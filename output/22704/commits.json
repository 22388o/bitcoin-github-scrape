[
  {
    "sha": "e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWI4ZDhhOGIzMTM0ODBlM2QwZmI5MzFkMjg3Mjg3NmI2NmQ0MGQy",
    "commit": {
      "author": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-07T10:51:34Z"
      },
      "committer": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-20T20:48:11Z"
      },
      "message": "[fuzz] Add D. J. Bernstein's implementation of ChaCha20\n\nCo-authored-by: Prakash Choudhary <44579179+prakash1512@users.noreply.github.com>",
      "tree": {
        "sha": "9f6ed8c57d01ac2cd22f336d0459a166aba80e96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f6ed8c57d01ac2cd22f336d0459a166aba80e96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b8d8a8b313480e3d0fb931d2872876b66d40d2/comments",
    "author": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fc15d15667d9d9c4fb5515ce73c05b4596298ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fc15d15667d9d9c4fb5515ce73c05b4596298ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fc15d15667d9d9c4fb5515ce73c05b4596298ec"
      }
    ],
    "stats": {
      "total": 252,
      "additions": 252,
      "deletions": 0
    },
    "files": [
      {
        "sha": "21613689e4cfc1c7c42215cb9fdd3c875644fe60",
        "filename": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "status": "added",
        "additions": 252,
        "deletions": 0,
        "changes": 252,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9b8d8a8b313480e3d0fb931d2872876b66d40d2/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9b8d8a8b313480e3d0fb931d2872876b66d40d2/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp?ref=e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
        "patch": "@@ -0,0 +1,252 @@\n+/*\n+From https://cr.yp.to/chacha.html\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+typedef unsigned int u32;\n+typedef unsigned char u8;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                                       \\\n+  (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) |            \\\n+   ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)                                                    \\\n+  do {                                                                         \\\n+    (p)[0] = U8V((v));                                                         \\\n+    (p)[1] = U8V((v) >> 8);                                                    \\\n+    (p)[2] = U8V((v) >> 16);                                                   \\\n+    (p)[3] = U8V((v) >> 24);                                                   \\\n+  } while (0)\n+\n+/* ------------------------------------------------------------------------- */\n+/* Data structures */\n+\n+typedef struct\n+{\n+    u32 input[16];\n+} ECRYPT_ctx;\n+\n+/* ------------------------------------------------------------------------- */\n+/* Mandatory functions */\n+\n+void ECRYPT_keysetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* key,\n+    u32 keysize, /* Key size in bits. */\n+    u32 ivsize); /* IV size in bits. */\n+\n+void ECRYPT_ivsetup(\n+    ECRYPT_ctx* ctx,\n+    const u8* iv);\n+\n+void ECRYPT_encrypt_bytes(\n+    ECRYPT_ctx* ctx,\n+    const u8* plaintext,\n+    u8* ciphertext,\n+    u32 msglen); /* Message length in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+/* Optional features */\n+\n+void ECRYPT_keystream_bytes(\n+  ECRYPT_ctx* ctx,\n+  u8* keystream,\n+  u32 length);                /* Length of keystream in bytes. */\n+\n+/* ------------------------------------------------------------------------- */\n+\n+#define ROTATE(v,c) (ROTL32(v,c))\n+#define XOR(v,w) ((v) ^ (w))\n+#define PLUS(v,w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v),1))\n+\n+#define QUARTERROUND(a,b,c,d) \\\n+  a = PLUS(a,b); d = ROTATE(XOR(d,a),16); \\\n+  c = PLUS(c,d); b = ROTATE(XOR(b,c),12); \\\n+  a = PLUS(a,b); d = ROTATE(XOR(d,a), 8); \\\n+  c = PLUS(c,d); b = ROTATE(XOR(b,c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void ECRYPT_keysetup(ECRYPT_ctx *x,const u8 *k,u32 kbits,u32 ivbits)\n+{\n+  const char *constants;\n+\n+  x->input[4] = U8TO32_LITTLE(k + 0);\n+  x->input[5] = U8TO32_LITTLE(k + 4);\n+  x->input[6] = U8TO32_LITTLE(k + 8);\n+  x->input[7] = U8TO32_LITTLE(k + 12);\n+  if (kbits == 256) { /* recommended */\n+    k += 16;\n+    constants = sigma;\n+  } else { /* kbits == 128 */\n+    constants = tau;\n+  }\n+  x->input[8] = U8TO32_LITTLE(k + 0);\n+  x->input[9] = U8TO32_LITTLE(k + 4);\n+  x->input[10] = U8TO32_LITTLE(k + 8);\n+  x->input[11] = U8TO32_LITTLE(k + 12);\n+  x->input[0] = U8TO32_LITTLE(constants + 0);\n+  x->input[1] = U8TO32_LITTLE(constants + 4);\n+  x->input[2] = U8TO32_LITTLE(constants + 8);\n+  x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void ECRYPT_ivsetup(ECRYPT_ctx *x,const u8 *iv)\n+{\n+  x->input[12] = 0;\n+  x->input[13] = 0;\n+  x->input[14] = U8TO32_LITTLE(iv + 0);\n+  x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx *x,const u8 *m,u8 *c,u32 bytes)\n+{\n+  u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+  u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+  u8 *ctarget=NULL;\n+  u8 tmp[64];\n+  uint32_t i;\n+\n+  if (!bytes) return;\n+\n+  j0 = x->input[0];\n+  j1 = x->input[1];\n+  j2 = x->input[2];\n+  j3 = x->input[3];\n+  j4 = x->input[4];\n+  j5 = x->input[5];\n+  j6 = x->input[6];\n+  j7 = x->input[7];\n+  j8 = x->input[8];\n+  j9 = x->input[9];\n+  j10 = x->input[10];\n+  j11 = x->input[11];\n+  j12 = x->input[12];\n+  j13 = x->input[13];\n+  j14 = x->input[14];\n+  j15 = x->input[15];\n+\n+  for (;;) {\n+    if (bytes < 64) {\n+      for (i = 0;i < bytes;++i) tmp[i] = m[i];\n+      m = tmp;\n+      ctarget = c;\n+      c = tmp;\n+    }\n+    x0 = j0;\n+    x1 = j1;\n+    x2 = j2;\n+    x3 = j3;\n+    x4 = j4;\n+    x5 = j5;\n+    x6 = j6;\n+    x7 = j7;\n+    x8 = j8;\n+    x9 = j9;\n+    x10 = j10;\n+    x11 = j11;\n+    x12 = j12;\n+    x13 = j13;\n+    x14 = j14;\n+    x15 = j15;\n+    for (i = 20;i > 0;i -= 2) {\n+      QUARTERROUND( x0, x4, x8,x12)\n+      QUARTERROUND( x1, x5, x9,x13)\n+      QUARTERROUND( x2, x6,x10,x14)\n+      QUARTERROUND( x3, x7,x11,x15)\n+      QUARTERROUND( x0, x5,x10,x15)\n+      QUARTERROUND( x1, x6,x11,x12)\n+      QUARTERROUND( x2, x7, x8,x13)\n+      QUARTERROUND( x3, x4, x9,x14)\n+    }\n+    x0 = PLUS(x0,j0);\n+    x1 = PLUS(x1,j1);\n+    x2 = PLUS(x2,j2);\n+    x3 = PLUS(x3,j3);\n+    x4 = PLUS(x4,j4);\n+    x5 = PLUS(x5,j5);\n+    x6 = PLUS(x6,j6);\n+    x7 = PLUS(x7,j7);\n+    x8 = PLUS(x8,j8);\n+    x9 = PLUS(x9,j9);\n+    x10 = PLUS(x10,j10);\n+    x11 = PLUS(x11,j11);\n+    x12 = PLUS(x12,j12);\n+    x13 = PLUS(x13,j13);\n+    x14 = PLUS(x14,j14);\n+    x15 = PLUS(x15,j15);\n+\n+    x0 = XOR(x0,U8TO32_LITTLE(m + 0));\n+    x1 = XOR(x1,U8TO32_LITTLE(m + 4));\n+    x2 = XOR(x2,U8TO32_LITTLE(m + 8));\n+    x3 = XOR(x3,U8TO32_LITTLE(m + 12));\n+    x4 = XOR(x4,U8TO32_LITTLE(m + 16));\n+    x5 = XOR(x5,U8TO32_LITTLE(m + 20));\n+    x6 = XOR(x6,U8TO32_LITTLE(m + 24));\n+    x7 = XOR(x7,U8TO32_LITTLE(m + 28));\n+    x8 = XOR(x8,U8TO32_LITTLE(m + 32));\n+    x9 = XOR(x9,U8TO32_LITTLE(m + 36));\n+    x10 = XOR(x10,U8TO32_LITTLE(m + 40));\n+    x11 = XOR(x11,U8TO32_LITTLE(m + 44));\n+    x12 = XOR(x12,U8TO32_LITTLE(m + 48));\n+    x13 = XOR(x13,U8TO32_LITTLE(m + 52));\n+    x14 = XOR(x14,U8TO32_LITTLE(m + 56));\n+    x15 = XOR(x15,U8TO32_LITTLE(m + 60));\n+\n+    j12 = PLUSONE(j12);\n+    if (!j12) {\n+      j13 = PLUSONE(j13);\n+      /* stopping at 2^70 bytes per nonce is user's responsibility */\n+    }\n+\n+    U32TO8_LITTLE(c + 0,x0);\n+    U32TO8_LITTLE(c + 4,x1);\n+    U32TO8_LITTLE(c + 8,x2);\n+    U32TO8_LITTLE(c + 12,x3);\n+    U32TO8_LITTLE(c + 16,x4);\n+    U32TO8_LITTLE(c + 20,x5);\n+    U32TO8_LITTLE(c + 24,x6);\n+    U32TO8_LITTLE(c + 28,x7);\n+    U32TO8_LITTLE(c + 32,x8);\n+    U32TO8_LITTLE(c + 36,x9);\n+    U32TO8_LITTLE(c + 40,x10);\n+    U32TO8_LITTLE(c + 44,x11);\n+    U32TO8_LITTLE(c + 48,x12);\n+    U32TO8_LITTLE(c + 52,x13);\n+    U32TO8_LITTLE(c + 56,x14);\n+    U32TO8_LITTLE(c + 60,x15);\n+\n+    if (bytes <= 64) {\n+      if (bytes < 64) {\n+        for (i = 0;i < bytes;++i) ctarget[i] = c[i];\n+      }\n+      x->input[12] = j12;\n+      x->input[13] = j13;\n+      return;\n+    }\n+    bytes -= 64;\n+    c += 64;\n+    m += 64;\n+  }\n+}\n+\n+void ECRYPT_keystream_bytes(ECRYPT_ctx *x,u8 *stream,u32 bytes)\n+{\n+  u32 i;\n+  for (i = 0;i < bytes;++i) stream[i] = 0;\n+  ECRYPT_encrypt_bytes(x,stream,stream,bytes);\n+}\n+"
      }
    ]
  },
  {
    "sha": "b674acb42a191fe8bfd2f96231f226f5057ffdfc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjc0YWNiNDJhMTkxZmU4YmZkMmY5NjIzMWYyMjZmNTA1N2ZmZGZj",
    "commit": {
      "author": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-11T06:58:27Z"
      },
      "committer": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-20T20:48:11Z"
      },
      "message": "[fuzz] Format spacing\n\nCo-authored-by: Prakash Choudhary <44579179+prakash1512@users.noreply.github.com>",
      "tree": {
        "sha": "142b4884a9ad5d9eb7c6d7172aefcee341b48a3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142b4884a9ad5d9eb7c6d7172aefcee341b48a3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b674acb42a191fe8bfd2f96231f226f5057ffdfc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b674acb42a191fe8bfd2f96231f226f5057ffdfc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b674acb42a191fe8bfd2f96231f226f5057ffdfc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b674acb42a191fe8bfd2f96231f226f5057ffdfc/comments",
    "author": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b8d8a8b313480e3d0fb931d2872876b66d40d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b8d8a8b313480e3d0fb931d2872876b66d40d2"
      }
    ],
    "stats": {
      "total": 369,
      "additions": 188,
      "deletions": 181
    },
    "files": [
      {
        "sha": "add92617592caa224683590313ed92b9bde12067",
        "filename": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "status": "modified",
        "additions": 188,
        "deletions": 181,
        "changes": 369,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b674acb42a191fe8bfd2f96231f226f5057ffdfc/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b674acb42a191fe8bfd2f96231f226f5057ffdfc/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp?ref=b674acb42a191fe8bfd2f96231f226f5057ffdfc",
        "patch": "@@ -16,17 +16,17 @@ typedef unsigned char u8;\n \n #define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n \n-#define U8TO32_LITTLE(p)                                                       \\\n-  (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) |            \\\n-   ((u32)((p)[3]) << 24))\n-\n-#define U32TO8_LITTLE(p, v)                                                    \\\n-  do {                                                                         \\\n-    (p)[0] = U8V((v));                                                         \\\n-    (p)[1] = U8V((v) >> 8);                                                    \\\n-    (p)[2] = U8V((v) >> 16);                                                   \\\n-    (p)[3] = U8V((v) >> 24);                                                   \\\n-  } while (0)\n+#define U8TO32_LITTLE(p)                                              \\\n+    (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) | \\\n+     ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)      \\\n+    do {                         \\\n+        (p)[0] = U8V((v));       \\\n+        (p)[1] = U8V((v) >> 8);  \\\n+        (p)[2] = U8V((v) >> 16); \\\n+        (p)[3] = U8V((v) >> 24); \\\n+    } while (0)\n \n /* ------------------------------------------------------------------------- */\n /* Data structures */\n@@ -60,193 +60,200 @@ void ECRYPT_encrypt_bytes(\n /* Optional features */\n \n void ECRYPT_keystream_bytes(\n-  ECRYPT_ctx* ctx,\n-  u8* keystream,\n-  u32 length);                /* Length of keystream in bytes. */\n+    ECRYPT_ctx* ctx,\n+    u8* keystream,\n+    u32 length); /* Length of keystream in bytes. */\n \n /* ------------------------------------------------------------------------- */\n \n-#define ROTATE(v,c) (ROTL32(v,c))\n-#define XOR(v,w) ((v) ^ (w))\n-#define PLUS(v,w) (U32V((v) + (w)))\n-#define PLUSONE(v) (PLUS((v),1))\n-\n-#define QUARTERROUND(a,b,c,d) \\\n-  a = PLUS(a,b); d = ROTATE(XOR(d,a),16); \\\n-  c = PLUS(c,d); b = ROTATE(XOR(b,c),12); \\\n-  a = PLUS(a,b); d = ROTATE(XOR(d,a), 8); \\\n-  c = PLUS(c,d); b = ROTATE(XOR(b,c), 7);\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d) \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 16);   \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 12);   \\\n+    a = PLUS(a, b);              \\\n+    d = ROTATE(XOR(d, a), 8);    \\\n+    c = PLUS(c, d);              \\\n+    b = ROTATE(XOR(b, c), 7);\n \n static const char sigma[] = \"expand 32-byte k\";\n static const char tau[] = \"expand 16-byte k\";\n \n-void ECRYPT_keysetup(ECRYPT_ctx *x,const u8 *k,u32 kbits,u32 ivbits)\n+void ECRYPT_keysetup(ECRYPT_ctx* x, const u8* k, u32 kbits, u32 ivbits)\n {\n-  const char *constants;\n-\n-  x->input[4] = U8TO32_LITTLE(k + 0);\n-  x->input[5] = U8TO32_LITTLE(k + 4);\n-  x->input[6] = U8TO32_LITTLE(k + 8);\n-  x->input[7] = U8TO32_LITTLE(k + 12);\n-  if (kbits == 256) { /* recommended */\n-    k += 16;\n-    constants = sigma;\n-  } else { /* kbits == 128 */\n-    constants = tau;\n-  }\n-  x->input[8] = U8TO32_LITTLE(k + 0);\n-  x->input[9] = U8TO32_LITTLE(k + 4);\n-  x->input[10] = U8TO32_LITTLE(k + 8);\n-  x->input[11] = U8TO32_LITTLE(k + 12);\n-  x->input[0] = U8TO32_LITTLE(constants + 0);\n-  x->input[1] = U8TO32_LITTLE(constants + 4);\n-  x->input[2] = U8TO32_LITTLE(constants + 8);\n-  x->input[3] = U8TO32_LITTLE(constants + 12);\n+    const char* constants;\n+\n+    x->input[4] = U8TO32_LITTLE(k + 0);\n+    x->input[5] = U8TO32_LITTLE(k + 4);\n+    x->input[6] = U8TO32_LITTLE(k + 8);\n+    x->input[7] = U8TO32_LITTLE(k + 12);\n+    if (kbits == 256) { /* recommended */\n+        k += 16;\n+        constants = sigma;\n+    } else { /* kbits == 128 */\n+        constants = tau;\n+    }\n+    x->input[8] = U8TO32_LITTLE(k + 0);\n+    x->input[9] = U8TO32_LITTLE(k + 4);\n+    x->input[10] = U8TO32_LITTLE(k + 8);\n+    x->input[11] = U8TO32_LITTLE(k + 12);\n+    x->input[0] = U8TO32_LITTLE(constants + 0);\n+    x->input[1] = U8TO32_LITTLE(constants + 4);\n+    x->input[2] = U8TO32_LITTLE(constants + 8);\n+    x->input[3] = U8TO32_LITTLE(constants + 12);\n }\n \n-void ECRYPT_ivsetup(ECRYPT_ctx *x,const u8 *iv)\n+void ECRYPT_ivsetup(ECRYPT_ctx* x, const u8* iv)\n {\n-  x->input[12] = 0;\n-  x->input[13] = 0;\n-  x->input[14] = U8TO32_LITTLE(iv + 0);\n-  x->input[15] = U8TO32_LITTLE(iv + 4);\n+    x->input[12] = 0;\n+    x->input[13] = 0;\n+    x->input[14] = U8TO32_LITTLE(iv + 0);\n+    x->input[15] = U8TO32_LITTLE(iv + 4);\n }\n \n-void ECRYPT_encrypt_bytes(ECRYPT_ctx *x,const u8 *m,u8 *c,u32 bytes)\n+void ECRYPT_encrypt_bytes(ECRYPT_ctx* x, const u8* m, u8* c, u32 bytes)\n {\n-  u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n-  u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n-  u8 *ctarget=NULL;\n-  u8 tmp[64];\n-  uint32_t i;\n-\n-  if (!bytes) return;\n-\n-  j0 = x->input[0];\n-  j1 = x->input[1];\n-  j2 = x->input[2];\n-  j3 = x->input[3];\n-  j4 = x->input[4];\n-  j5 = x->input[5];\n-  j6 = x->input[6];\n-  j7 = x->input[7];\n-  j8 = x->input[8];\n-  j9 = x->input[9];\n-  j10 = x->input[10];\n-  j11 = x->input[11];\n-  j12 = x->input[12];\n-  j13 = x->input[13];\n-  j14 = x->input[14];\n-  j15 = x->input[15];\n-\n-  for (;;) {\n-    if (bytes < 64) {\n-      for (i = 0;i < bytes;++i) tmp[i] = m[i];\n-      m = tmp;\n-      ctarget = c;\n-      c = tmp;\n-    }\n-    x0 = j0;\n-    x1 = j1;\n-    x2 = j2;\n-    x3 = j3;\n-    x4 = j4;\n-    x5 = j5;\n-    x6 = j6;\n-    x7 = j7;\n-    x8 = j8;\n-    x9 = j9;\n-    x10 = j10;\n-    x11 = j11;\n-    x12 = j12;\n-    x13 = j13;\n-    x14 = j14;\n-    x15 = j15;\n-    for (i = 20;i > 0;i -= 2) {\n-      QUARTERROUND( x0, x4, x8,x12)\n-      QUARTERROUND( x1, x5, x9,x13)\n-      QUARTERROUND( x2, x6,x10,x14)\n-      QUARTERROUND( x3, x7,x11,x15)\n-      QUARTERROUND( x0, x5,x10,x15)\n-      QUARTERROUND( x1, x6,x11,x12)\n-      QUARTERROUND( x2, x7, x8,x13)\n-      QUARTERROUND( x3, x4, x9,x14)\n-    }\n-    x0 = PLUS(x0,j0);\n-    x1 = PLUS(x1,j1);\n-    x2 = PLUS(x2,j2);\n-    x3 = PLUS(x3,j3);\n-    x4 = PLUS(x4,j4);\n-    x5 = PLUS(x5,j5);\n-    x6 = PLUS(x6,j6);\n-    x7 = PLUS(x7,j7);\n-    x8 = PLUS(x8,j8);\n-    x9 = PLUS(x9,j9);\n-    x10 = PLUS(x10,j10);\n-    x11 = PLUS(x11,j11);\n-    x12 = PLUS(x12,j12);\n-    x13 = PLUS(x13,j13);\n-    x14 = PLUS(x14,j14);\n-    x15 = PLUS(x15,j15);\n-\n-    x0 = XOR(x0,U8TO32_LITTLE(m + 0));\n-    x1 = XOR(x1,U8TO32_LITTLE(m + 4));\n-    x2 = XOR(x2,U8TO32_LITTLE(m + 8));\n-    x3 = XOR(x3,U8TO32_LITTLE(m + 12));\n-    x4 = XOR(x4,U8TO32_LITTLE(m + 16));\n-    x5 = XOR(x5,U8TO32_LITTLE(m + 20));\n-    x6 = XOR(x6,U8TO32_LITTLE(m + 24));\n-    x7 = XOR(x7,U8TO32_LITTLE(m + 28));\n-    x8 = XOR(x8,U8TO32_LITTLE(m + 32));\n-    x9 = XOR(x9,U8TO32_LITTLE(m + 36));\n-    x10 = XOR(x10,U8TO32_LITTLE(m + 40));\n-    x11 = XOR(x11,U8TO32_LITTLE(m + 44));\n-    x12 = XOR(x12,U8TO32_LITTLE(m + 48));\n-    x13 = XOR(x13,U8TO32_LITTLE(m + 52));\n-    x14 = XOR(x14,U8TO32_LITTLE(m + 56));\n-    x15 = XOR(x15,U8TO32_LITTLE(m + 60));\n-\n-    j12 = PLUSONE(j12);\n-    if (!j12) {\n-      j13 = PLUSONE(j13);\n-      /* stopping at 2^70 bytes per nonce is user's responsibility */\n-    }\n-\n-    U32TO8_LITTLE(c + 0,x0);\n-    U32TO8_LITTLE(c + 4,x1);\n-    U32TO8_LITTLE(c + 8,x2);\n-    U32TO8_LITTLE(c + 12,x3);\n-    U32TO8_LITTLE(c + 16,x4);\n-    U32TO8_LITTLE(c + 20,x5);\n-    U32TO8_LITTLE(c + 24,x6);\n-    U32TO8_LITTLE(c + 28,x7);\n-    U32TO8_LITTLE(c + 32,x8);\n-    U32TO8_LITTLE(c + 36,x9);\n-    U32TO8_LITTLE(c + 40,x10);\n-    U32TO8_LITTLE(c + 44,x11);\n-    U32TO8_LITTLE(c + 48,x12);\n-    U32TO8_LITTLE(c + 52,x13);\n-    U32TO8_LITTLE(c + 56,x14);\n-    U32TO8_LITTLE(c + 60,x15);\n-\n-    if (bytes <= 64) {\n-      if (bytes < 64) {\n-        for (i = 0;i < bytes;++i) ctarget[i] = c[i];\n-      }\n-      x->input[12] = j12;\n-      x->input[13] = j13;\n-      return;\n+    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+    u8* ctarget = NULL;\n+    u8 tmp[64];\n+    uint32_t i;\n+\n+    if (!bytes) return;\n+\n+    j0 = x->input[0];\n+    j1 = x->input[1];\n+    j2 = x->input[2];\n+    j3 = x->input[3];\n+    j4 = x->input[4];\n+    j5 = x->input[5];\n+    j6 = x->input[6];\n+    j7 = x->input[7];\n+    j8 = x->input[8];\n+    j9 = x->input[9];\n+    j10 = x->input[10];\n+    j11 = x->input[11];\n+    j12 = x->input[12];\n+    j13 = x->input[13];\n+    j14 = x->input[14];\n+    j15 = x->input[15];\n+\n+    for (;;) {\n+        if (bytes < 64) {\n+            for (i = 0; i < bytes; ++i)\n+                tmp[i] = m[i];\n+            m = tmp;\n+            ctarget = c;\n+            c = tmp;\n+        }\n+        x0 = j0;\n+        x1 = j1;\n+        x2 = j2;\n+        x3 = j3;\n+        x4 = j4;\n+        x5 = j5;\n+        x6 = j6;\n+        x7 = j7;\n+        x8 = j8;\n+        x9 = j9;\n+        x10 = j10;\n+        x11 = j11;\n+        x12 = j12;\n+        x13 = j13;\n+        x14 = j14;\n+        x15 = j15;\n+        for (i = 20; i > 0; i -= 2) {\n+            QUARTERROUND(x0, x4, x8, x12)\n+            QUARTERROUND(x1, x5, x9, x13)\n+            QUARTERROUND(x2, x6, x10, x14)\n+            QUARTERROUND(x3, x7, x11, x15)\n+            QUARTERROUND(x0, x5, x10, x15)\n+            QUARTERROUND(x1, x6, x11, x12)\n+            QUARTERROUND(x2, x7, x8, x13)\n+            QUARTERROUND(x3, x4, x9, x14)\n+        }\n+        x0 = PLUS(x0, j0);\n+        x1 = PLUS(x1, j1);\n+        x2 = PLUS(x2, j2);\n+        x3 = PLUS(x3, j3);\n+        x4 = PLUS(x4, j4);\n+        x5 = PLUS(x5, j5);\n+        x6 = PLUS(x6, j6);\n+        x7 = PLUS(x7, j7);\n+        x8 = PLUS(x8, j8);\n+        x9 = PLUS(x9, j9);\n+        x10 = PLUS(x10, j10);\n+        x11 = PLUS(x11, j11);\n+        x12 = PLUS(x12, j12);\n+        x13 = PLUS(x13, j13);\n+        x14 = PLUS(x14, j14);\n+        x15 = PLUS(x15, j15);\n+\n+        x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+        x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+        x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+        x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+        x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+        x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+        x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+        x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+        x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+        x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+        x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+        x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+        x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+        x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+        x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+        x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+        j12 = PLUSONE(j12);\n+        if (!j12) {\n+            j13 = PLUSONE(j13);\n+            /* stopping at 2^70 bytes per nonce is user's responsibility */\n+        }\n+\n+        U32TO8_LITTLE(c + 0, x0);\n+        U32TO8_LITTLE(c + 4, x1);\n+        U32TO8_LITTLE(c + 8, x2);\n+        U32TO8_LITTLE(c + 12, x3);\n+        U32TO8_LITTLE(c + 16, x4);\n+        U32TO8_LITTLE(c + 20, x5);\n+        U32TO8_LITTLE(c + 24, x6);\n+        U32TO8_LITTLE(c + 28, x7);\n+        U32TO8_LITTLE(c + 32, x8);\n+        U32TO8_LITTLE(c + 36, x9);\n+        U32TO8_LITTLE(c + 40, x10);\n+        U32TO8_LITTLE(c + 44, x11);\n+        U32TO8_LITTLE(c + 48, x12);\n+        U32TO8_LITTLE(c + 52, x13);\n+        U32TO8_LITTLE(c + 56, x14);\n+        U32TO8_LITTLE(c + 60, x15);\n+\n+        if (bytes <= 64) {\n+            if (bytes < 64) {\n+                for (i = 0; i < bytes; ++i)\n+                    ctarget[i] = c[i];\n+            }\n+            x->input[12] = j12;\n+            x->input[13] = j13;\n+            return;\n+        }\n+        bytes -= 64;\n+        c += 64;\n+        m += 64;\n     }\n-    bytes -= 64;\n-    c += 64;\n-    m += 64;\n-  }\n }\n \n-void ECRYPT_keystream_bytes(ECRYPT_ctx *x,u8 *stream,u32 bytes)\n+void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n {\n-  u32 i;\n-  for (i = 0;i < bytes;++i) stream[i] = 0;\n-  ECRYPT_encrypt_bytes(x,stream,stream,bytes);\n+    u32 i;\n+    for (i = 0; i < bytes; ++i)\n+        stream[i] = 0;\n+    ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n }\n "
      }
    ]
  },
  {
    "sha": "258d751c1c0363a880889275b4c567118b779ba1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNThkNzUxYzFjMDM2M2E4ODA4ODkyNzViNGM1NjcxMThiNzc5YmEx",
    "commit": {
      "author": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-07T10:55:33Z"
      },
      "committer": {
        "name": "root",
        "email": "ruhiasap@gmail.com",
        "date": "2021-08-20T20:56:45Z"
      },
      "message": "[fuzz] Add fuzzing harness to compare both implementations of ChaCha20\n\nCo-authored-by: Prakash Choudhary <44579179+prakash1512@users.noreply.github.com>",
      "tree": {
        "sha": "6bf4d15372299a30f7b4aa7ccd5aa0cf7b9d674c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bf4d15372299a30f7b4aa7ccd5aa0cf7b9d674c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/258d751c1c0363a880889275b4c567118b779ba1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258d751c1c0363a880889275b4c567118b779ba1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/258d751c1c0363a880889275b4c567118b779ba1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/258d751c1c0363a880889275b4c567118b779ba1/comments",
    "author": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following{/other_user}",
      "gists_url": "https://api.github.com/users/stratospher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b674acb42a191fe8bfd2f96231f226f5057ffdfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b674acb42a191fe8bfd2f96231f226f5057ffdfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b674acb42a191fe8bfd2f96231f226f5057ffdfc"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "37b7660bc39aceaa942085f4f85dfcb42ebc0638",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/258d751c1c0363a880889275b4c567118b779ba1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/258d751c1c0363a880889275b4c567118b779ba1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=258d751c1c0363a880889275b4c567118b779ba1",
        "patch": "@@ -230,6 +230,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/crypto_chacha20.cpp \\\n  test/fuzz/crypto_chacha20_poly1305_aead.cpp \\\n  test/fuzz/crypto_common.cpp \\\n+ test/fuzz/crypto_diff_fuzz_chacha20.cpp \\\n  test/fuzz/crypto_hkdf_hmac_sha256_l32.cpp \\\n  test/fuzz/crypto_poly1305.cpp \\\n  test/fuzz/cuckoocache.cpp \\"
      },
      {
        "sha": "7b29753bdc9ed79942ab0bfd4ab658f4a53872e3",
        "filename": "src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/258d751c1c0363a880889275b4c567118b779ba1/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/258d751c1c0363a880889275b4c567118b779ba1/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto_diff_fuzz_chacha20.cpp?ref=258d751c1c0363a880889275b4c567118b779ba1",
        "patch": "@@ -1,3 +1,15 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n /*\n From https://cr.yp.to/chacha.html\n chacha-merged.c version 20080118\n@@ -257,3 +269,66 @@ void ECRYPT_keystream_bytes(ECRYPT_ctx* x, u8* stream, u32 bytes)\n     ECRYPT_encrypt_bytes(x, stream, stream, bytes);\n }\n \n+FUZZ_TARGET(crypto_diff_fuzz_chacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    ChaCha20 chacha20;\n+    ECRYPT_ctx ctx;\n+    // D. J. Bernstein doesn't initialise ctx to 0 while Bitcoin Core initialises chacha20 to 0 in the constructor\n+    for (int i = 0; i < 16; i++) {\n+        ctx.input[i] = 0;\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+        chacha20 = ChaCha20{key.data(), key.size()};\n+        ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+        // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+        uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+        ECRYPT_ivsetup(&ctx, iv);\n+    }\n+\n+    LIMITED_WHILE (fuzzed_data_provider.ConsumeBool(), 3000) {\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] {\n+                const std::vector<unsigned char> key = ConsumeFixedLengthByteVector(fuzzed_data_provider, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(16, 32));\n+                chacha20.SetKey(key.data(), key.size());\n+                ECRYPT_keysetup(&ctx, key.data(), key.size() * 8, 0);\n+                // ECRYPT_keysetup() doesn't set the counter and nonce to 0 while SetKey() does\n+                uint8_t iv[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n+                ECRYPT_ivsetup(&ctx, iv);\n+            },\n+            [&] {\n+                uint64_t iv = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.SetIV(iv);\n+                ctx.input[14] = iv;\n+                ctx.input[15] = iv >> 32;\n+            },\n+            [&] {\n+                uint64_t counter = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+                chacha20.Seek(counter);\n+                ctx.input[12] = counter;\n+                ctx.input[13] = counter >> 32;\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                chacha20.Keystream(output.data(), output.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_keystream_bytes(&ctx, djb_output.data(), djb_output.size());\n+                if (output.data() != NULL && djb_output.data() != NULL) {\n+                    assert(memcmp(output.data(), djb_output.data(), integralInRange) == 0);\n+                }\n+            },\n+            [&] {\n+                uint32_t integralInRange = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096);\n+                std::vector<uint8_t> output(integralInRange);\n+                const std::vector<uint8_t> input = ConsumeFixedLengthByteVector(fuzzed_data_provider, output.size());\n+                chacha20.Crypt(input.data(), output.data(), input.size());\n+                std::vector<uint8_t> djb_output(integralInRange);\n+                ECRYPT_encrypt_bytes(&ctx, input.data(), djb_output.data(), input.size());\n+            });\n+    }\n+}"
      }
    ]
  }
]