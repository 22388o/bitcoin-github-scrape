theuni,2015-01-20T03:49:27Z,"Very nice! Before looking over the work itself, I wanted to be sure that libevent was viable for all of our build targets.\n\nSee here for the build-system work. This should be enough to get Travis passing, I'd think:\nhttps://github.com/theuni/bitcoin/commits/5677\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70600574,70600574,
laanwj,2015-01-20T05:00:33Z,"@cfields Will pull that in, thanks a lot!\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70604873,70604873,
luke-jr,2015-01-20T05:04:34Z,"Hm, nothing special needed for longpolling?\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70605115,70605115,
laanwj,2015-01-20T05:14:13Z,"@luke-jr I don't think so. The current implementation should work. Of course it would be more optimal to release the worker thread while longpolling, and change ""new block"" it into an event-trigger, but I leave that as a challenge for later.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70605676,70605676,
laanwj,2015-01-20T06:37:11Z,"The fail in ""32-bit + dash"" is strange\n\n```\nFAIL: qt/test/test_bitcoin-qt\n```\n\nI'm not sure how this can be affected at all (passes fine here), but I'll check.\n\nOn Win32/64 it still tries to link against libevent_pthread. IIRC there is no specific thread library for windows, `evthread_use_windows_threads` is part of the core library there.\n\n```\n/usr/bin/x86_64-w64-mingw32-ld: cannot fin",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70610849,70610849,
theuni,2015-01-20T06:45:31Z,"Blah, sorry, missed that one.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70611391,70611391,
laanwj,2015-01-20T07:21:11Z,"It's easy to miss those sneaky qt unit tests. Windows passes now!\n\nThat leaves the `32-bit + dash` case, which is not an intermittent issue\n\n```\nFAIL! : PaymentServerTests::paymentServerTests() Compared values are not the same\nActual (merchant):\nExpected (QString(""testmerchant.org"")): testmerchant.org\nLoc: [qt/test/paymentservertests.cpp(84)]\n```\n\n... no clue how this happens yet. The Q",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70613765,70613765,
theuni,2015-01-20T08:23:54Z,"@laanwj Yes, it has some interaction with qt:\n- ./configure --with-gui=qt4: fine.\n- ./configure --with-gui=qt5: fine.\n- make -C depends; ./configure --prefix=`pwd`/depends/x86_64-unknown-linux-gnu: busted\n- make -C depends USE_LINUX_STATIC_QT5=1;  ./configure --prefix=`pwd`/depends/x86_64-unknown-linux-gnu: fine.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70619366,70619366,
jonasschnelli,2015-01-20T15:11:07Z,tested gitian build.\nBinaries to test: https://builds.jonasschnelli.ch/pulls/5677/\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70668199,70668199,
jtimon,2015-01-21T14:28:12Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-70845949,70845949,
laanwj,2015-01-23T10:26:57Z,"Now that the code is stable it is time for some benchmarking.\nI found a nice scriptable framework for HTTP benchmarking, [wrk](https://github.com/wg/wrk). Some results.\nThese benchmarks were taken at the default settings (4 worker threads, 16 depth work queue).\n\n### GET request to invalid URL\n\nThese are handled by evhttp itself, so this is the baseline.\n\n```\n$  ./wrk -t12 -c15 -d10s http:",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71174411,71174411,
laanwj,2015-01-23T11:09:18Z,"## Old http server\n\nSame steps as above, repeated with the old server as of commit 944c256.\n\n### GET request to invalid URL\n\n```\n$  ./wrk -t12 -c15 -d10s http://127.0.0.1:18332/inv\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   502.17us   94.60us   2.65ms   74.77%\n    Req/Sec     1.89k   119.76     2.33k    83.38%\n  214864 requests in 9.99s, 37.50MB read\n  Responses:",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71179035,71179035,
Diapolo,2015-01-23T11:20:11Z,Why are we dropping SSL support for RPC?\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71180158,71180158,
laanwj,2015-01-23T11:29:47Z,"@diapolo Re: this pull: because I don't feel like implementing it.\n\nIn the longer term I (and many others) would also argue it is better to drop it:\n- Makes it possible to drop OpenSSL dependency from bitcoind completely, after secp256k1 verification is used. Simplifies the code overall.\n- I've never heard of anyone using SSL with RPC. It may also be better not to know; after all, this invites",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71181146,71181146,
jonasschnelli,2015-01-23T12:05:56Z,"I agree with @laanwj. SSL support could lead somebody to believe it's ""save"". IMO it currently a bad idea to expose bitcoind RPC to a public accessible area. Nevertheless, If one like to do this, he could still do a apache ssl enable reverse proxy to bitcoind's RPC.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71184656,71184656,
gmaxwell,2015-01-23T14:27:14Z,Also SSL in the RPC massively increases the attack surface we have exposed (if you also expose it to the outside world) and we've had to push updates previously on account of it-- even though we believe its a feature virtually no one uses.  As mentioned it can be better accomplished via stunnel (or any of several other tools)\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71200027,71200027,
gavinandresen,2015-01-23T16:13:56Z,"I agree, it was a mistake to add SSL support to the RPC (mea culpa-- I wrote the original version of that code).\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-71217270,71217270,
jonasschnelli,2015-02-04T15:07:06Z,concept ACK.\nneeds rebase.\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-72870617,72870617,
arnuschky,2015-02-21T07:47:27Z,"If I might chime in on the SSL discussion: I am not sure whether it should be removed. In terms of integrating bitcoin core into a bigger system, I would expect that it offers SSL in order to protect credentials. This has not much to do with publicly available access, I habitually do this for any service that sends credentials over any network (and I think that this is quite advisable for a bitcoi",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-75360870,75360870,
luke-jr,2015-02-21T07:58:58Z,"@arnuschky There is no secure way to expose RPC to an untrusted network, whether you use the wallet or not. Although perhaps with a libevent-based server maybe that changes...\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-75361175,75361175,
jgarzik,2015-02-21T15:46:42Z,@arnuschky The HTTP REST interface provides unauthenticated access to public blockchain data: https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-75377248,75377248,
arnuschky,2015-02-22T09:42:10Z,"@luke-jr What are you referring to? \n\nSorry, it seems that I haven't made myself clear. I agree that it is advisable to get rid of the openssl dependency in bitcoin core. However, losing the SSL feature for wallet RPC is a bit annoying from the system integrator's point of view - it just makes deployment more complex. I don't agree with the black-and-white consideration of a ""trusted"" vs ""untrus",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-75427534,75427534,
sipa,2015-03-03T12:26:16Z,Don't let this go unmaintained :)\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-76936251,76936251,
jonasschnelli,2015-03-05T08:37:55Z,"Needs rebase. I'm willing to help (testing, fixing, etc.).\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-77325968,77325968,
jonasschnelli,2015-03-10T14:15:42Z,I think this also solves https://github.com/bitcoin/bitcoin/issues/5526\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-78061333,78061333,
jgarzik,2015-05-02T19:17:56Z,Continued +1 on this.\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-98389333,98389333,
ajweiss,2015-05-05T19:51:56Z,"This was straightforward to rebase onto master.  While playing with it, this message got printed to the console once:\n\n```\n[warn] event_active: event has no event_base set.\n```\n\nI haven't been able to reproduce it, but I'm banging on it now.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-99201956,99201956,
cheako,2015-05-15T00:05:00Z,"I attempted to rebase master from the 2015_01_evhttpd branch and ran into a lot of merge conflicts that seemed to have nothing to do with libevent or http.  I'm not an expert in git, but does this indicate a serious problem?\n\nI've attempted with multiple -s options, but when completed I perform a diff master and I expected to see changes related to evhttpd but instead everything else seems to ch",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-102204878,102204878,
jgarzik,2015-05-15T00:36:24Z,"@cheako Sometimes the easiest thing to do is cherry pick each commit onto a fresh tree, rather than trying a git merge.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-102210004,102210004,
laanwj,2015-05-15T10:45:43Z,"@cheako This has become non-trivial to rebase, foremost due to a few REST changes and code moves. \nI promise to get back to this after the 0.11.0 release bustle and #6121 is merged.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-102366417,102366417,
ajweiss,2015-05-15T18:05:55Z,Here's a branch that was rebased as of about 10 days ago if you want to play:\n\nhttps://github.com/ajweiss/bitcoin/tree/ajw_libevent_rebase\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-102473955,102473955,
ajweiss,2015-05-15T19:07:04Z,"Also, on top of that rebase, here's a quick way to reproduce the race I found.  Just use the listtransactions.py RPC test...  ajweiss/bitcoin@0c008eb017824a21bc711e9e0d1cf52bff3a7b85\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-102495733,102495733,
jgarzik,2015-07-23T18:54:12Z,Continue to want this merged...\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-124210289,124210289,
laanwj,2015-08-27T18:38:41Z,"Finally got around to rebasing this. It was somewhat tricky to rebase, especially over the univalue switch, so I hope I got everything right (the tests pass at least locally...).\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135518027,135518027,
dcousens,2015-08-27T21:54:56Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135566332,135566332,
gmaxwell,2015-08-27T23:37:37Z,Thanks for the work rebasing this.\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135584631,135584631,
jgarzik,2015-08-28T00:34:43Z,"re-ACK + ""it works"" test\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135592135,135592135,
laanwj,2015-08-28T15:24:31Z,"OK, fixed all the issues in the opening post. Also added message to the release notes about removing SSL support (as well as how to use stunnel instead). Removed the [Poc] tag.\n\nNot sure yet why Travis is failing the RPC tests on Windows (both 32 and 64).\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135805660,135805660,
jonasschnelli,2015-08-28T15:39:51Z,Nice!\nStarted testing now...\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135809661,135809661,
cheako,2015-08-28T20:53:48Z,"Looks like this: http://stackoverflow.com/a/19017158\n\nPerhaps the URL is getting a ""\n\r"" on Windows but a ""\n"" elsewhere and the trim is not getting both bytes on Windows.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135885486,135885486,
theuni,2015-08-28T22:35:01Z,"I tracked down a few of the problems:\n\nbitcoin-cli's -rpcwait is broken due to the libevent connection model. CallRPC() doesn't return when the connection fails, so the loop doesn't continue, and a new connection isn't tried. Instead it just sits there until the connection times out. This one's easy to test, simply fire up a `./bitcoin-cli -rpcwait getblockcount` before starting bitcoind, then r",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135903247,135903247,
theuni,2015-08-29T00:03:46Z,"Ok, I was able to get to the bottom of this and get the tests passing. I have cobbled together a few hacks with the understanding that they're the _wrong_ things to do, but hopefully @laanwj will quickly see how to fix things up properly.\n\nThe issues outlined above are indeed the two issues. But to add to that, I think I know what's happening with the SO_REUSEADDR issue.\n\nI was able to ""fix"" t",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135918349,135918349,
theuni,2015-08-29T00:11:44Z,"(sorry for spamming)\n\nConfirmed the theory above: https://bugs.winehq.org/show_bug.cgi?id=26031\n\nLooks like the real fix will be to make sure that sockets are properly torn down so that we're not relying on SO_REUSEADDR at all. I tried everything I could think of, though, and couldn't get the socket suitably unbound. Maybe @laanwj will have better luck.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135919685,135919685,
ruimarinho,2015-08-29T01:09:03Z,"This might be irrelevant at this point, but was libuv considered for multi platform support?\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135924264,135924264,
dcousens,2015-08-29T01:21:02Z,"> This might be irrelevant at this point, but was libuv considered for multi platform support?\n\nHaving used both libraries extensively in commercial applications (using their native API),  I +1 support for libuv over libevent also.  **However, this PR is already ready.**\nlibuv is also more frequently updated, and arguably is deployed many thousands times more often in production (node/io.js), a",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135924817,135924817,
laanwj,2015-08-29T08:11:10Z,"@cfields Thanks a lot for looking into this. I don't like the solution of setting the timeout to 1, but it's good to have a way to make the tests pass :)\n\n@ruimarinho This has been floating around for months. I'd like to merge this when the remaining problems are solved. But if you can do so quickly, feel free to port this to libuv then we can compare performance and such...\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135960413,135960413,
gmaxwell,2015-08-29T08:27:46Z,"+1 on libevent; having also used it in large highly critical commercial applications it is very widely deployed and reliable.\n\nLibuv is also very similar, so if there was a need to change in the future it could just be done ""no big deal."".    Comparison would be neat, I agree, but not a reason to disrupt progress here.\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135961325,135961325,
jonasschnelli,2015-08-29T08:28:55Z,+1 on libevent. No need to disturb this PR in that stage of progress.\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135961618,135961618,
jonasschnelli,2015-08-29T08:53:06Z,"#### Performance:\n\nPerformance looks good, not much of a difference. Built over gitian for testing (https://builds.jonasschnelli.ch/pulls/5677/). Had much slower results with a local build (osx, --enable-debug, libevent 2.0.22, dynamic linked).\n\nStats, no very representative, did only once on a non-calm system.\nRegtest, 100 blocks chain, OSX 10.10, 2.6 GHz Intel Core i7:\n**apache-bench compa",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135964028,135964028,
jonasschnelli,2015-08-29T08:57:01Z,"Do i understand this correct, that this PR would no longer support **non**-http-keep-alive request/responses? Do we break existing things if we no longer allow forcing the disabling of http-keep-alive? Maybe some systems request with http keep alive `""Connection: keep-alive""` but expect that the connection closes after the first request because they have disabled keep-alive over the `-rpckeepalive",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135964175,135964175,
theuni,2015-08-29T10:13:56Z,"@laanwj In case it wasn't clear in all my rambling above, the rpcwait issue will need some sort of fix, not just for the sake of testing. I certainly didn't intend to imply that timeout=1 was any real solution though :)\n\n@jonasschnelli great testing!\n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-135968451,135968451,
laanwj,2015-08-31T09:07:56Z,"@jonasschnelli Thanks for testing the memory behavior and performance!\n\n> Do i understand this correct, that this PR would no longer support non-http-keep-alive request/responses? \n\nLibevent's http server absolutely supports non-http-keepalive `Connection:close`, and even HTTP 1.0. What it doesn't support is _disabling_ keepalive globally (as it is a mandatory feature of HTTP 1.1.) I don't thi",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136308842,136308842,
laanwj,2015-08-31T15:25:57Z,"> CallRPC() doesn't return when the connection fails, so the loop doesn't continue, and a new connection isn't tried. \n\nMissed this observation @theuni. Yes, that should definitely be solved. I wonder why this only trips up on Wine.E.g. on Linux this returns immediately without hang, if there is no server bound:\n\n```\n$ src/bitcoin-cli -rpcpassword='a' getinfo\nerror: couldn't connect to serve",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136405492,136405492,
theuni,2015-08-31T16:14:06Z,"@laanwj I wondered the same thing. The behavior seemed odd to me, I assumed it was just a timing difference. I'm glad to know it's just a Wine/Windows thing, but now I'm curious to know if it happens in native Win as well. I'll give it a shot on osx and see what happens.\n\nProbably worth taking a look at the source of evhttp_request_new to see what flags it sets. I also found it odd that a differ",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136418133,136418133,
laanwj,2015-09-01T09:22:34Z,"Looks like we're chasing emulator rabbits. I've cross-compiled (w/ depends) to win64 locally and ran the RPC tests (just as travis does) against this code, through WINE. No issues. The wine version is wine-1.7.50. Maybe that makes the difference, and Travis runs an old broken version?\nIf so I'd propose setting `rpctimeout=1` just for travis-win32/64 to make the test pass until they upgrade to a n",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964,136646964,
jonasschnelli,2015-09-01T13:46:55Z,"Successfully ran `rcp-test.sh` on ""Windows 8"" (see screen below):\nDisabled `p2p-fullbocktest.py` because didn't want to install python/dbm. Also had to disable one test in `rest.py` during getutxo binary request. The python httplib did somehow not sent a proper binary request. Tracked down and seems to be unrelated to this PR (also happens on current master).\n\n<img width=""964"" alt=""bildschirmfo",https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136728096,136728096,
jonasschnelli,2015-09-04T11:24:33Z,Post merge tested ACK\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-137710094,137710094,
paveljanik,2015-09-04T13:20:37Z,Build notes should be extended for at least OS X/brew. I use macports here and:\n\n```\nport install libevent\n```\n\nwas needed to get it compiled.\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-137736157,137736157,
jonasschnelli,2015-09-04T13:27:28Z,@paveljanik: just added `libevent` mentioning for osx in #6635\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-137737926,137737926,
jgarzik,2015-09-04T13:32:52Z,post merge tested re-ACK\n,https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-137739062,137739062,
Diapolo,2015-01-23T11:25:12Z,Just to understand why are you explicitly using == NULL here and for base above just !var?\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r23444511,23444511,src/bitcoin-cli.cpp
Diapolo,2015-01-23T11:26:08Z,Perhaps use some constant or struct for such strings and use a speaking name in the code?\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r23444540,23444540,src/bitcoin-cli.cpp
laanwj,2015-01-23T11:32:43Z,"@diapolo  `== NULL` and `!evcon` are equivalent in this case so purely a matter to taste.  The pull clearly states [PoC] as for proof-of-concept, please don't report all these minor things but only critical or high-level issues,\n",https://github.com/bitcoin/bitcoin/pull/5677#discussion_r23444766,23444766,src/bitcoin-cli.cpp
ajweiss,2015-05-05T21:35:44Z,"I think there's a complicated race condition here.  StartHTTPServer() will bind the HTTP server and start listening, but if requests come in before the RPC/REST servers have called RegisterHTTPHandler(), their requests will result in 404s.  Moreover, if the request comes in before eventBase is set in StartHTTPServer(), HTTPRequest::WriteReply() will attempt to queue an HTTPEvent with an invalid ev",https://github.com/bitcoin/bitcoin/pull/5677#discussion_r29715775,29715775,src/init.cpp
laanwj,2015-05-07T08:35:10Z,Thanks a lot for testing this! I'll try to track it down\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r29833341,29833341,src/init.cpp
jonasschnelli,2015-08-29T09:13:04Z,idea: sleep time=*2 per attempt unless a successful auth happened? (although could be done in another PR)\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38260585,38260585,src/httprpc.cpp
gmaxwell,2015-08-29T09:15:21Z,Since one can evade that just by making new connections (in parallel) is it really a gain?\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38260600,38260600,src/httprpc.cpp
jonasschnelli,2015-08-29T09:19:08Z,Hmm... the sleep time then could be global (thread safe static uint64_t)?\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38260634,38260634,src/httprpc.cpp
gmaxwell,2015-08-29T09:33:00Z,"perhaps, though it turns a auth token probe into a DOS attack then, enh?. That might be preferable though if your token is at all bruteforcable you are in bad shape.\n",https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38260719,38260719,src/httprpc.cpp
theuni,2015-08-29T10:27:04Z,Should evbuffer_drain here for good measure.\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38261029,38261029,src/bitcoin-cli.cpp
laanwj,2015-08-31T09:04:27Z,"I aimed to keep the behavior here exactly the same. Let's leave improvements for a latter pull.\n(there are various practical issues with doing it this way, e.g. sleeping a worker thread to just pause a bit is wasteful - it could be handled with a timed event callback. Then again, this is not _supposed_ to ever trigger as people should not leave the RPC port open to the outside world, so don't spe",https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38295242,38295242,src/httprpc.cpp
laanwj,2015-08-31T11:52:30Z,Done. Good catch.\n,https://github.com/bitcoin/bitcoin/pull/5677#discussion_r38304671,38304671,src/bitcoin-cli.cpp
