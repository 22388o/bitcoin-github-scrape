[
  {
    "sha": "7e319d63932c40730ee66110cd8edd14a312f297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTMxOWQ2MzkzMmM0MDczMGVlNjYxMTBjZDhlZGQxNGEzMTJmMjk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-16T17:56:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T16:41:02Z"
      },
      "message": "Fix -Wthread-safety-analysis warnings. Change the sync.h primitives to std from boost.\n\nCommit 1.\n\nThis code was written by @TheBlueMatt in the following branch:\n* https://github.com/TheBlueMatt/bitcoin/commits/2017-08-test-10923\n\nThis commit message was written by me (@practicalswift) who also squashed\n@TheBlueMatt's commits into one and tried to summarize the changes made.\n\nCommit 2.\n\nRemove boost include. Remove boost mentions in comments.",
      "tree": {
        "sha": "7d9ef7dea62678881a4a295cdc6421d92ad9d91b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d9ef7dea62678881a4a295cdc6421d92ad9d91b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e319d63932c40730ee66110cd8edd14a312f297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e319d63932c40730ee66110cd8edd14a312f297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e319d63932c40730ee66110cd8edd14a312f297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e319d63932c40730ee66110cd8edd14a312f297/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e022463a4b238750476430d08b45bc9171791e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e022463a4b238750476430d08b45bc9171791e6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e022463a4b238750476430d08b45bc9171791e6f"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 32,
      "deletions": 30
    },
    "files": [
      {
        "sha": "9e3eb6b926ede755ca5e820766af3021876d9ae1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e319d63932c40730ee66110cd8edd14a312f297/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e319d63932c40730ee66110cd8edd14a312f297/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7e319d63932c40730ee66110cd8edd14a312f297",
        "patch": "@@ -544,14 +544,14 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n }\n \n static bool fHaveGenesis = false;\n-static boost::mutex cs_GenesisWait;\n+static CWaitableCriticalSection cs_GenesisWait;\n static CConditionVariable condvar_GenesisWait;\n \n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n-            boost::unique_lock<boost::mutex> lock_GenesisWait(cs_GenesisWait);\n+            WaitableLock lock_GenesisWait(cs_GenesisWait);\n             fHaveGenesis = true;\n         }\n         condvar_GenesisWait.notify_all();\n@@ -1634,7 +1634,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Wait for genesis block to be processed\n     {\n-        boost::unique_lock<boost::mutex> lock(cs_GenesisWait);\n+        WaitableLock lock(cs_GenesisWait);\n         while (!fHaveGenesis) {\n             condvar_GenesisWait.wait(lock);\n         }"
      },
      {
        "sha": "0ba0e968a7ebac5b11c79f8fa26c41a17cf3db80",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e319d63932c40730ee66110cd8edd14a312f297/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e319d63932c40730ee66110cd8edd14a312f297/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7e319d63932c40730ee66110cd8edd14a312f297",
        "patch": "@@ -455,7 +455,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n         uint256 hashWatchedChain;\n-        boost::system_time checktxtime;\n+        std::chrono::steady_clock::time_point checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n         if (lpval.isStr())\n@@ -476,17 +476,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         // Release the wallet and main lock while waiting\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n-            checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n+            checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n-            boost::unique_lock<boost::mutex> lock(csBestBlock);\n+            WaitableLock lock(csBestBlock);\n             while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n             {\n-                if (!cvBlockChange.timed_wait(lock, checktxtime))\n+                if (cvBlockChange.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n-                    checktxtime += boost::posix_time::seconds(10);\n+                    checktxtime += std::chrono::seconds(10);\n                 }\n             }\n         }"
      },
      {
        "sha": "20556af89071c5237d17e99cc292c545f9796665",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e319d63932c40730ee66110cd8edd14a312f297/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e319d63932c40730ee66110cd8edd14a312f297/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=7e319d63932c40730ee66110cd8edd14a312f297",
        "patch": "@@ -10,7 +10,9 @@\n \n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/mutex.hpp>\n-#include <boost/thread/recursive_mutex.hpp>\n+#include <condition_variable>\n+#include <thread>\n+#include <mutex>\n \n \n ////////////////////////////////////////////////\n@@ -21,17 +23,17 @@\n \n /*\n CCriticalSection mutex;\n-    boost::recursive_mutex mutex;\n+    std::recursive_mutex mutex;\n \n LOCK(mutex);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock(mutex);\n+    std::unique_lock<std::recursive_mutex> criticalblock(mutex);\n \n LOCK2(mutex1, mutex2);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock1(mutex1);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock2(mutex2);\n+    std::unique_lock<std::recursive_mutex> criticalblock1(mutex1);\n+    std::unique_lock<std::recursive_mutex> criticalblock2(mutex2);\n \n TRY_LOCK(mutex, name);\n-    boost::unique_lock<boost::recursive_mutex> name(mutex, boost::try_to_lock_t);\n+    std::unique_lock<std::recursive_mutex> name(mutex, std::try_to_lock_t);\n \n ENTER_CRITICAL_SECTION(mutex); // no RAII\n     mutex.lock();\n@@ -85,33 +87,35 @@ void static inline DeleteLock(void* cs) {}\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n- * Wrapped boost mutex: supports recursive locking, but no waiting\n+ * Wrapped mutex: supports recursive locking, but no waiting\n  * TODO: We should move away from using the recursive lock by default.\n  */\n-class CCriticalSection : public AnnotatedMixin<boost::recursive_mutex>\n+class CCriticalSection : public AnnotatedMixin<std::recursive_mutex>\n {\n public:\n     ~CCriticalSection() {\n         DeleteLock((void*)this);\n     }\n };\n \n-/** Wrapped boost mutex: supports waiting but not recursive locking */\n-typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;\n+/** Wrapped mutex: supports waiting but not recursive locking */\n+typedef AnnotatedMixin<std::mutex> CWaitableCriticalSection;\n \n-/** Just a typedef for boost::condition_variable, can be wrapped later if desired */\n-typedef boost::condition_variable CConditionVariable;\n+/** Just a typedef for std::condition_variable, can be wrapped later if desired */\n+typedef std::condition_variable CConditionVariable;\n+\n+/** Just a typedef for std::unique_lock, can be wrapped later if desired */\n+typedef std::unique_lock<std::mutex> WaitableLock;\n \n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n-/** Wrapper around boost::unique_lock<Mutex> */\n-template <typename Mutex>\n-class SCOPED_LOCKABLE CMutexLock\n+/** Wrapper around std::unique_lock<CCriticalSection> */\n+class SCOPED_LOCKABLE CCriticalBlock\n {\n private:\n-    boost::unique_lock<Mutex> lock;\n+    std::unique_lock<CCriticalSection> lock;\n \n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n@@ -136,26 +140,26 @@ class SCOPED_LOCKABLE CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n+    CCriticalBlock(CCriticalSection& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, std::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n+    CCriticalBlock(CCriticalSection* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n-        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        lock = std::unique_lock<CCriticalSection>(*pmutexIn, std::defer_lock);\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock() UNLOCK_FUNCTION()\n+    ~CCriticalBlock() UNLOCK_FUNCTION()\n     {\n         if (lock.owns_lock())\n             LeaveCritical();\n@@ -167,8 +171,6 @@ class SCOPED_LOCKABLE CMutexLock\n     }\n };\n \n-typedef CMutexLock<CCriticalSection> CCriticalBlock;\n-\n #define PASTE(x, y) x ## y\n #define PASTE2(x, y) PASTE(x, y)\n "
      }
    ]
  },
  {
    "sha": "4616c825a4530042983186a3521a6bfe650b5b67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjE2YzgyNWE0NTMwMDQyOTgzMTg2YTM1MjFhNmJmZTY1MGI1YjY3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-25T07:30:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T16:41:02Z"
      },
      "message": "Use -Wthread-safety-analysis if available (+ -Werror=thread-safety-analysis if --enable-werror)",
      "tree": {
        "sha": "79a6876b8b8b40106ccf077e621c728a08779e7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79a6876b8b8b40106ccf077e621c728a08779e7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4616c825a4530042983186a3521a6bfe650b5b67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4616c825a4530042983186a3521a6bfe650b5b67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4616c825a4530042983186a3521a6bfe650b5b67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4616c825a4530042983186a3521a6bfe650b5b67/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e319d63932c40730ee66110cd8edd14a312f297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e319d63932c40730ee66110cd8edd14a312f297",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e319d63932c40730ee66110cd8edd14a312f297"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c37204193944048d599c8afe9ccf9d51daaad2b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4616c825a4530042983186a3521a6bfe650b5b67/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4616c825a4530042983186a3521a6bfe650b5b67/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4616c825a4530042983186a3521a6bfe650b5b67",
        "patch": "@@ -241,6 +241,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -249,6 +250,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[CXXFLAGS=\"$CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n \n   ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   ## unknown options if any other warning is produced. Test the -Wfoo case, and"
      }
    ]
  },
  {
    "sha": "76ea17c7964c15dd90e10c2c257cdeb5847b3d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmVhMTdjNzk2NGMxNWRkOTBlMTBjMmMyNTdjZGViNTg0N2IzZDY5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-09T21:06:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T16:41:02Z"
      },
      "message": "Add mutex requirement for AddToCompactExtraTransactions(\u2026)\n\nThe vector `vExtraTxnForCompact`, which is guarded by the mutex\n`cs_main`, is accessed in `AddToCompactExtraTransactions(\u2026)`.",
      "tree": {
        "sha": "831f95863a08a2a5808f0aff148eb7f47094c461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/831f95863a08a2a5808f0aff148eb7f47094c461"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76ea17c7964c15dd90e10c2c257cdeb5847b3d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ea17c7964c15dd90e10c2c257cdeb5847b3d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76ea17c7964c15dd90e10c2c257cdeb5847b3d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ea17c7964c15dd90e10c2c257cdeb5847b3d69/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4616c825a4530042983186a3521a6bfe650b5b67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4616c825a4530042983186a3521a6bfe650b5b67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4616c825a4530042983186a3521a6bfe650b5b67"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "17c354319a77a585de8e71dee3a45ab4ce53586b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ea17c7964c15dd90e10c2c257cdeb5847b3d69/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ea17c7964c15dd90e10c2c257cdeb5847b3d69/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=76ea17c7964c15dd90e10c2c257cdeb5847b3d69",
        "patch": "@@ -560,7 +560,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n // mapOrphanTransactions\n //\n \n-void AddToCompactExtraTransactions(const CTransactionRef& tx)\n+void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)"
      }
    ]
  }
]