laanwj,2018-05-02T13:04:43Z,"Concept ACK, this would indeed be useful.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-385970579,385970579,
promag,2018-05-02T13:14:45Z,"> Please advise me on the best approach for writing an automated test\n\nAt least it can test arguments (valid and invalid) and result format and fields (their presence and types).",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-385973503,385973503,
laanwj,2018-05-02T13:23:14Z,"I think this call should be called differently. `getaddress` is too easy to confuse with a bitcoin address (e.g. `getnewaddress`). Maybe `getnodeaddresses`?\n\n> Why not extend getpeerinfo?\n\nYou misunderstand what this does. It doesn't return currently conneced nodes, but potentially connectable addresses.\n",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-385975827,385975827,
chris-belcher,2018-05-02T14:16:54Z,"Renamed to `getnodeaddresses` and fixed nits.\n\nLooks like something went wrong with the rebase and now other people's commits are involved too. Does anyone know how I can fix this. (edit: fixed)\n\n> At least it can test arguments (valid and invalid) and result format and fields (their presence and types).\n\nI think in the test suite the node won't know about any other addresses, so this ",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-385993137,385993137,
chris-belcher,2018-05-02T15:32:49Z,"Fixed git weirdness (thanks to viasil).\n",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386020149,386020149,
promag,2018-05-02T16:02:54Z,Please rename PR.,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386030266,386030266,
MasterGrad17,2018-05-02T20:32:11Z,"Does getnodeaddresses command return a list of reachable nodes in the network known by a node? like the result of getaddr message? is getaddress/getnodeaddresses RPC command currently available in v0.16.0rc4?\n",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386111315,386111315,
chris-belcher,2018-05-02T20:37:13Z,"@MasterGrad17 Yes the result is very similar as from the p2p getaddr method. The addresses come from gossiping between nodes, so the IP address _may_ be reachable but that isn't guaranteed.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386112718,386112718,
sipa,2018-05-02T21:29:32Z,"@MasterGrad17 You're commenting on the request to get it merged into Bitcoin Core, so obviously no.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386127499,386127499,
sipa,2018-05-03T07:09:52Z,"@jonasschnelli `listpeeraddresses` sounds like it's somehow exhaustive, or at least a complete specific subset of addresses. It's just giving a bunch of random ones; `getpeeraddresses` sounds clearer to me. Am i missing something?",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386208397,386208397,
jonasschnelli,2018-05-03T07:16:34Z,"> listpeeraddresses sounds like it's somehow exhaustive, or at least a complete specific subset of addresses. It's just giving a bunch of random ones; getpeeraddresses sounds clearer to me. Am I missing something?\n\nGood point.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386209598,386209598,
chris-belcher,2018-05-03T09:20:58Z,`peer` implies it returns addresses of peers you're actually connected to. Like how `getpeerinfo` gives information only about connected peers. How about `getpossiblepeeraddresses`? It's a bit of a mouthful admittedly. Other options could be `getgossipedpeeraddresses` or `getpotentialpeeraddresses`.,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386236963,386236963,
laanwj,2018-05-03T09:50:54Z,"Yes, I intentionally avoided 'peer' in my suggested name for that reason, as it's easy to confuse and a lot of people confused it already. Also let's stop asking the guy to rename his RPC call :)\nI think `getnodeaddresses` is fine, just make sure that the documentation explains the functionality.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386243960,386243960,
chris-belcher,2018-05-03T13:03:26Z,Fixed nit,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-386288017,386288017,
chris-belcher,2018-05-21T16:27:43Z,Fixed nits and created a test in `rpc_net.py`.,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-390706895,390706895,
chris-belcher,2018-05-21T19:25:03Z,"Fixed nits, thanks for reviewing @jnewbery.\n\nbitcoind modifies the timestamp so it's complicated to check whether the time was equal. That's not the point of the RPC or the test anyway so the test only checks whether the ""time"" field exists.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-390756258,390756258,
jnewbery,2018-05-21T21:06:04Z,@jonasschnelli - can you remove your 'changes requested' status?,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-390782744,390782744,
jnewbery,2018-07-23T20:50:07Z,Needs rebase. The `rpc_net.py` functional test is failing.,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-407196489,407196489,
ajtowns,2018-08-16T10:44:22Z,"The `rpc_net.py` test looks like it just needs the references to `network_thread_start` removed, in line with #13517 ",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-413502869,413502869,
chris-belcher,2018-08-16T16:15:41Z,Fixed the broken test,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-413601307,413601307,
ajtowns,2018-08-17T09:58:52Z,utACK 316201485933b4fcdf8d4005d823effdfc4b913b,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-413818278,413818278,
chris-belcher,2018-08-27T22:37:17Z,"Rebased.\n\nThe test has failed but works when I run it locally.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-416391452,416391452,
promag,2018-08-27T22:42:41Z,"Unrelated build error:\n```\n...\nGet:17 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [389 kB]\nGet:18 http://archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [2807 B]\nFetched 25.9 MB in 8min 28s (50.9 kB/s)\nReading package lists...\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with th",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-416392569,416392569,
chris-belcher,2018-08-31T12:43:58Z,Thanks for the review @promag. I have created the release notes entry in the style of the release-notes-0.15.0 file.,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-417652226,417652226,
promag,2018-09-13T19:01:42Z,"Looks good to me, utACK 8b96ebe.",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-421116309,421116309,
chris-belcher,2018-09-18T08:57:38Z,Fixed those nits,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-422313133,422313133,
ajtowns,2018-09-18T13:28:01Z,utACK a2eb6f540538d32725aecf678301a96247db6fd9,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-422392982,422392982,
MarcoFalke,2018-09-18T21:25:26Z,utACK a2eb6f540538d32725aecf678301a96247db6fd9,https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-422561264,422561264,
promag,2018-09-18T21:30:56Z,"utACK a2eb6f5. Please fix PR description: ""New getaddress call gives ...""",https://github.com/bitcoin/bitcoin/pull/13152#issuecomment-422562897,422562897,
promag,2018-05-02T13:08:29Z,"Nit, space after `for`.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185489034,185489034,src/rpc/net.cpp
promag,2018-05-02T13:10:50Z,Why not return all?,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185489689,185489689,src/rpc/net.cpp
chris-belcher,2018-05-02T15:35:37Z,"Returning all would typically result in a massive json array with thousands of entries, about 2500 or so depending. Normally applications only need to connect to a few nodes, they don't need anywhere near that many.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185540844,185540844,src/rpc/net.cpp
jonasschnelli,2018-05-03T06:58:03Z,nit: could also be a tor address,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185708979,185708979,src/rpc/net.cpp
jonasschnelli,2018-05-03T07:01:30Z,"would be handy to have a string representation here. Like (`""NODE_NETWORK | NODE_NETWORK_LIMITED |Â NODE_BLOOM""`, etc.). But can be done later.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185709516,185709516,src/rpc/net.cpp
jnewbery,2018-05-03T17:50:32Z,"Should document that the maximum number of nodes to return is:\n- 2500 (due to `ADDRMAN_GETADDR_MAX` in `CAddrMan::GetAddr_()`); or\n- 23% of all known nodes.\n(whichever is smaller)",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185885253,185885253,src/rpc/net.cpp
jnewbery,2018-05-03T17:54:38Z,What does 'address timestamp' mean here?,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185886489,185886489,src/rpc/net.cpp
jnewbery,2018-05-03T17:57:44Z,return fields should be named in camel_case,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185887440,185887440,src/rpc/net.cpp
jnewbery,2018-05-03T17:58:00Z,prefer to name this `address`. No need to save characters!,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185887516,185887516,src/rpc/net.cpp
jnewbery,2018-05-03T18:46:29Z,I don't think this is useful. Services is a bitfield. Displaying it as an int doesn't give any useful information to the user. Just display the hex version.,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r185901257,185901257,src/rpc/net.cpp
laanwj,2018-05-07T11:43:36Z,"Depends on what 'the user' is. Programmatic RPC users will want the int, not have to do an additional step of parsing a hex string (though I don't care deeply in this case, just be mindful that manual command-line users are not the only clients of the RPC interface).",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r186398872,186398872,src/rpc/net.cpp
jnewbery,2018-05-07T12:56:03Z,"> be mindful that manual command-line users are not the only clients of the RPC interface\n\nYes good point. In general though, I think we should avoid RPCs returning the same data in multiple formats.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r186414329,186414329,src/rpc/net.cpp
jnewbery,2018-05-21T17:01:08Z,nit: should be `static`,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189650820,189650820,src/rpc/net.cpp
jnewbery,2018-05-21T17:13:36Z,nit: sort imports (in PEP-8 ordering),https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189654039,189654039,test/functional/rpc_net.py
jnewbery,2018-05-21T17:27:27Z,Should be `nServices`,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189657575,189657575,test/functional/rpc_net.py
jnewbery,2018-05-21T17:30:49Z,"nit: move this into the range loop below and use string formatters rather than concatenation:\n\n```python\n        # send some addresses to the node via the p2p message addr\n        now = int(time.time())\n        msg = msg_addr()\n        imported_addrs = []\n        for i in range(1000):\n            a = ""123.123.{}.{}"".format(i // 255, i % 256)\n            imported_addrs.append(a)\",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189658422,189658422,test/functional/rpc_net.py
jnewbery,2018-05-21T17:32:50Z,"nit: drop the set comparisons, loop over the return items and test all fields, eg:\n\n```python\n        for a in node_addresses:\n            assert a[""address""] in imported_addrs\n            assert_equal(a[""services""], NODE_NETWORK | NODE_WITNESS)\n            assert_equal(a[""time""], now)\n            assert_equal(a[""port""], 8333)\n```",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189658929,189658929,test/functional/rpc_net.py
jnewbery,2018-05-21T17:41:20Z,"nit: You're only using `time` to set the time field in the ADDR message. As long as the `CAddress`'s time is greater than             100000000, it'll be accepted. You can avoid this import by just setting time to `100000000 + i` or similar",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189661118,189661118,test/functional/rpc_net.py
jnewbery,2018-05-21T20:53:01Z,"Note that you'll only ever be able to get a maximum of 64 entries into the new addresses buckets by doing this. All of these addresses are in the same /16 address range, which means that addrman will place them into the same new bucket, and start evicting addresses once there are 64 entries (see the comment in addrman.h).\n\nYou may wish to simplify this to just send 256 addresses:\n\n```pytho",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r189710592,189710592,test/functional/rpc_net.py
jnewbery,2018-08-27T17:40:47Z,This is no longer required (`add_p2p_connection()` calls `wait_for_verack()` now),https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213055190,213055190,test/functional/rpc_net.py
promag,2018-08-27T22:44:18Z,"Should validate `count > 0`? Also, should have a maximum value?",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213138110,213138110,src/rpc/net.cpp
promag,2018-08-27T22:48:23Z,Use named arguments instead of long and verbose variables? Then ditch `NODE_ADDRESSES_REQUEST_COUNT`.,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213138867,213138867,test/functional/rpc_net.py
promag,2018-08-27T22:50:34Z,"Could also test that the result is limited by the existing addressed, not by the requested count.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213139240,213139240,test/functional/rpc_net.py
promag,2018-08-27T22:51:05Z,`const CAddress&`?,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213139359,213139359,src/rpc/net.cpp
promag,2018-08-27T22:51:33Z,"nit, could have a test for for invalid argument.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213139433,213139433,src/rpc/net.cpp
promag,2018-08-27T22:54:06Z,But could check that value is greater than some value?,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213139916,213139916,test/functional/rpc_net.py
promag,2018-08-27T22:54:37Z,Why the cast? Could inline std::min below.,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r213140019,213140019,src/rpc/net.cpp
chris-belcher,2018-08-31T12:32:03Z,"Unless I'm missing something, that verbose variable is still needed for the assert_equal check in the line after. It seems a better way than having magic numbers. I've reduced the length of the variable name though.\n\nI haven't put a max value check because it depends on the size of `g_connman->GetAddresses` at that time. How that max value works is explained in the docs.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214337749,214337749,test/functional/rpc_net.py
promag,2018-08-31T12:52:50Z,Makes sense to pass the max here?,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214343173,214343173,src/rpc/net.cpp
chris-belcher,2018-08-31T13:00:33Z,"Can you rephrase this, I didn't understand? What would be done with the max? The count parameter is already a bit like a max?",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214345349,214345349,src/rpc/net.cpp
promag,2018-08-31T13:04:28Z,"I mean, GetAddresses could return count addresses instead.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214346345,214346345,src/rpc/net.cpp
chris-belcher,2018-08-31T13:13:12Z,How? GetAddresses doesn't accept a parameter,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214348687,214348687,src/rpc/net.cpp
practicalswift,2018-09-02T18:18:26Z,Typo found by `codespell`: existance,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r214548899,214548899,test/functional/rpc_net.py
promag,2018-09-05T22:26:08Z,"Right, I'm asking if it makes sense to add that parameter.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r215444608,215444608,src/rpc/net.cpp
chris-belcher,2018-09-06T12:53:35Z,"Ah I see! I think it doesn't make sense, because GetAddresses is used in a few other places and that change would go against the principle of each PR only doing one thing.",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r215613108,215613108,src/rpc/net.cpp
promag,2018-09-06T12:57:03Z,Sounds reasonable.,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r215614238,215614238,src/rpc/net.cpp
practicalswift,2018-09-11T14:40:59Z,"A very small nit, but to please PEP-8 consider fixing this:\n\n```\n./test/functional/rpc_net.py:132:56: E262 inline comment should start with '# '\n```",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r216695213,216695213,test/functional/rpc_net.py
ken2812221,2018-09-13T13:27:25Z,"Appveyor error:\n```\nc:\projects\bitcoin\src\rpc\net.cpp(672): error C2668: 'UniValue::pushKV': ambiguous call to overloaded function\n```\nMaybe make it an explicit type?\n ```cpp\nobj.pushKV(""services"", (uint64_t)addr.nServices);",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r217382459,217382459,src/rpc/net.cpp
chris-belcher,2018-09-13T18:17:29Z,Done,https://github.com/bitcoin/bitcoin/pull/13152#discussion_r217485172,217485172,test/functional/rpc_net.py
jnewbery,2018-09-13T20:57:39Z,"I'm really sorry to code-style nit when this PR has been through so much review, but all then clauses should be in braces or on the same line (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c)",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r217531835,217531835,src/rpc/net.cpp
promag,2018-09-13T21:14:34Z,"nit, can be removed â since @jnewbery nit'ed :trollface: ",https://github.com/bitcoin/bitcoin/pull/13152#discussion_r217536637,217536637,test/functional/rpc_net.py
