[
  {
    "sha": "bb911ae7f5cbe4974ec61266d2334b95067fa49d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjkxMWFlN2Y1Y2JlNDk3NGVjNjEyNjZkMjMzNGI5NTA2N2ZhNDlk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-26T21:24:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-26T21:24:17Z"
      },
      "message": "[refactor] Pass CNode and CConnman by reference\n\nPass CNode and CConnman by reference instead of by pointer to\nProcessGetCFCheckPt() and ProcessGetCFHeaders().",
      "tree": {
        "sha": "8db9f8d7d54e206d576f294db3a76f60fb064211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8db9f8d7d54e206d576f294db3a76f60fb064211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb911ae7f5cbe4974ec61266d2334b95067fa49d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb911ae7f5cbe4974ec61266d2334b95067fa49d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb911ae7f5cbe4974ec61266d2334b95067fa49d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb911ae7f5cbe4974ec61266d2334b95067fa49d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcacea096e029a02a937bf96d002ca7e94c48c15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcacea096e029a02a937bf96d002ca7e94c48c15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcacea096e029a02a937bf96d002ca7e94c48c15"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cc5b4e4362372ac602b2f55668fe0791b60bb687",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb911ae7f5cbe4974ec61266d2334b95067fa49d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb911ae7f5cbe4974ec61266d2334b95067fa49d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bb911ae7f5cbe4974ec61266d2334b95067fa49d",
        "patch": "@@ -1998,7 +1998,7 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n-static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_params,\n                                       BlockFilterType filter_type, uint32_t start_height,\n                                       const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n@@ -2009,8 +2009,8 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n          gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n     if (!supported_filter_type) {\n         LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n-                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n-        pfrom->fDisconnect = true;\n+                 pfrom.GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom.fDisconnect = true;\n         return false;\n     }\n \n@@ -2021,8 +2021,8 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         // Check that the stop block exists and the peer would be allowed to fetch it.\n         if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n             LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n-                     pfrom->GetId(), stop_hash.ToString());\n-            pfrom->fDisconnect = true;\n+                     pfrom.GetId(), stop_hash.ToString());\n+            pfrom.fDisconnect = true;\n             return false;\n         }\n     }\n@@ -2031,14 +2031,14 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     if (start_height > stop_height) {\n         LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n                  \"start height %d and stop height %d\\n\",\n-                 pfrom->GetId(), start_height, stop_height);\n-        pfrom->fDisconnect = true;\n+                 pfrom.GetId(), start_height, stop_height);\n+        pfrom.fDisconnect = true;\n         return false;\n     }\n     if (stop_height - start_height >= max_height_diff) {\n         LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n-                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n-        pfrom->fDisconnect = true;\n+                 pfrom.GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom.fDisconnect = true;\n         return false;\n     }\n \n@@ -2061,8 +2061,8 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n-                                CConnman* connman)\n+static void ProcessGetCFHeaders(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman& connman)\n {\n     uint8_t filter_type_ser;\n     uint32_t start_height;\n@@ -2097,13 +2097,13 @@ static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return;\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n         .Make(NetMsgType::CFHEADERS,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n               prev_header,\n               filter_hashes);\n-    connman->PushMessage(pfrom, std::move(msg));\n+    connman.PushMessage(&pfrom, std::move(msg));\n }\n \n /**\n@@ -2116,8 +2116,8 @@ static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n-                                CConnman* connman)\n+static void ProcessGetCFCheckPt(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman& connman)\n {\n     uint8_t filter_type_ser;\n     uint256 stop_hash;\n@@ -2149,12 +2149,12 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         }\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n         .Make(NetMsgType::CFCHECKPT,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n               headers);\n-    connman->PushMessage(pfrom, std::move(msg));\n+    connman.PushMessage(&pfrom, std::move(msg));\n }\n \n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, ChainstateManager& chainman, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n@@ -3467,12 +3467,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n     }\n \n     if (msg_type == NetMsgType::GETCFHEADERS) {\n-        ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+        ProcessGetCFHeaders(*pfrom, vRecv, chainparams, *connman);\n         return true;\n     }\n \n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n-        ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n+        ProcessGetCFCheckPt(*pfrom, vRecv, chainparams, *connman);\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "e535670726952e43483763dfca6fc6ec2f4b0691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTM1NjcwNzI2OTUyZTQzNDgzNzYzZGZjYTZmYzZlYzJmNGIwNjkx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:23:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-26T21:27:15Z"
      },
      "message": "[indexes] Fix default [de]serialization of BlockFilter.\n\nThis only changes network serialization. Disk serialization does not\ninclude the filter_type and is defined in\nReadFilterFromDisk()/WriteFilterToDisk().",
      "tree": {
        "sha": "61676f77588cb467311e60b37d8fe9200cb8a74d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61676f77588cb467311e60b37d8fe9200cb8a74d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e535670726952e43483763dfca6fc6ec2f4b0691",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e535670726952e43483763dfca6fc6ec2f4b0691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e535670726952e43483763dfca6fc6ec2f4b0691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e535670726952e43483763dfca6fc6ec2f4b0691/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb911ae7f5cbe4974ec61266d2334b95067fa49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb911ae7f5cbe4974ec61266d2334b95067fa49d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb911ae7f5cbe4974ec61266d2334b95067fa49d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "96cefbf3b2f9ffb0c688eee6d00249ad1ad75cc5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e535670726952e43483763dfca6fc6ec2f4b0691/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e535670726952e43483763dfca6fc6ec2f4b0691/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=e535670726952e43483763dfca6fc6ec2f4b0691",
        "patch": "@@ -144,8 +144,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash\n           << m_filter.GetEncoded();\n     }\n \n@@ -154,8 +154,8 @@ class BlockFilter\n         std::vector<unsigned char> encoded_filter;\n         uint8_t filter_type;\n \n-        s >> m_block_hash\n-          >> filter_type\n+        s >> filter_type\n+          >> m_block_hash\n           >> encoded_filter;\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);"
      }
    ]
  },
  {
    "sha": "11106a4722558765a44ae45c7892724a73ce514c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTEwNmE0NzIyNTU4NzY1YTQ0YWU0NWM3ODkyNzI0YTczY2U1MTRj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:42:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-26T21:38:20Z"
      },
      "message": "[net processing] Message handling for getcfilters.\n\nHandle getcfilters request if -peercfilter is configured.",
      "tree": {
        "sha": "6e12384378e3d7a25c9f6d500cee2b09d57bbd71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e12384378e3d7a25c9f6d500cee2b09d57bbd71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11106a4722558765a44ae45c7892724a73ce514c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11106a4722558765a44ae45c7892724a73ce514c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11106a4722558765a44ae45c7892724a73ce514c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11106a4722558765a44ae45c7892724a73ce514c/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e535670726952e43483763dfca6fc6ec2f4b0691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e535670726952e43483763dfca6fc6ec2f4b0691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e535670726952e43483763dfca6fc6ec2f4b0691"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4536c737d1f058192b4b857fd088f90615af4786",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11106a4722558765a44ae45c7892724a73ce514c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11106a4722558765a44ae45c7892724a73ce514c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=11106a4722558765a44ae45c7892724a73ce514c",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n@@ -2051,6 +2053,49 @@ static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cfilters request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFilters(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman& connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman.PushMessage(&pfrom, std::move(msg));\n+    }\n+}\n+\n /**\n  * Handle a cfheaders request.\n  *\n@@ -3466,6 +3511,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFILTERS) {\n+        ProcessGetCFilters(*pfrom, vRecv, chainparams, *connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::GETCFHEADERS) {\n         ProcessGetCFHeaders(*pfrom, vRecv, chainparams, *connman);\n         return true;"
      },
      {
        "sha": "947f33c3dfa61ffc70cc9648393cc34caa42c223",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11106a4722558765a44ae45c7892724a73ce514c/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11106a4722558765a44ae45c7892724a73ce514c/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=11106a4722558765a44ae45c7892724a73ce514c",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFILTERS=\"getcfilters\";\n+const char *CFILTER=\"cfilter\";\n const char *GETCFHEADERS=\"getcfheaders\";\n const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n@@ -75,6 +77,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFILTERS,\n+    NetMsgType::CFILTER,\n     NetMsgType::GETCFHEADERS,\n     NetMsgType::CFHEADERS,\n     NetMsgType::GETCFCHECKPT,"
      },
      {
        "sha": "f61b724b742dc3f2e6807ad407254897c81cec19",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11106a4722558765a44ae45c7892724a73ce514c/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11106a4722558765a44ae45c7892724a73ce514c/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=11106a4722558765a44ae45c7892724a73ce514c",
        "patch": "@@ -225,6 +225,17 @@ extern const char* GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char* BLOCKTXN;\n+/**\n+ * getcfilters requests compact filters for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFILTERS;\n+/**\n+ * cfilter is a response to a getcfilters request containing a single compact\n+ * filter.\n+ */\n+extern const char* CFILTER;\n /**\n  * getcfheaders requests a compact filter header and the filter hashes for a\n  * range of blocks, which can then be used to reconstruct the filter headers"
      }
    ]
  },
  {
    "sha": "9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTM2MDY3ZDhjZDAyODMwYzdlNWE4OGEzOTFkZmY2YWMzYWRiZTBj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:27:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-26T21:38:26Z"
      },
      "message": "[test] Add test for cfilters.",
      "tree": {
        "sha": "cb8139a3e10b152efd4c293fa09fbef84bbe74c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb8139a3e10b152efd4c293fa09fbef84bbe74c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11106a4722558765a44ae45c7892724a73ce514c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11106a4722558765a44ae45c7892724a73ce514c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11106a4722558765a44ae45c7892724a73ce514c"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 127,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6d947ac660edf21265268dcb7144526d7795bd6a",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 70,
        "deletions": 4,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
        "patch": "@@ -13,6 +13,7 @@\n     hash256,\n     msg_getcfcheckpt,\n     msg_getcfheaders,\n+    msg_getcfilters,\n     ser_uint256,\n     uint256_from_str,\n )\n@@ -25,6 +26,21 @@\n     wait_until,\n )\n \n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n class CompactFiltersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -37,8 +53,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n-        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n \n         # Nodes 0 & 1 share the same first 999 blocks in the chain.\n         self.nodes[0].generate(999)\n@@ -112,7 +128,8 @@ def run_test(self):\n         )\n         node0.send_and_ping(request)\n         response = node0.last_message['cfheaders']\n-        assert_equal(len(response.hashes), 1000)\n+        main_cfhashes = response.hashes\n+        assert_equal(len(main_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n             int(main_cfcheckpt, 16)\n@@ -126,12 +143,50 @@ def run_test(self):\n         )\n         node0.send_and_ping(request)\n         response = node0.last_message['cfheaders']\n-        assert_equal(len(response.hashes), 1000)\n+        stale_cfhashes = response.hashes\n+        assert_equal(len(stale_cfhashes), 1000)\n         assert_equal(\n             compute_last_header(response.prev_header, response.hashes),\n             int(stale_cfcheckpt, 16)\n         )\n \n+        self.log.info(\"Check that peers can fetch cfilters.\")\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stop_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 10)\n+\n+        self.log.info(\"Check that cfilter responses are correct.\")\n+        for cfilter, cfhash, height in zip(response, main_cfhashes, range(1, 11)):\n+            block_hash = self.nodes[0].getblockhash(height)\n+            assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+            assert_equal(cfilter.block_hash, int(block_hash, 16))\n+            computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+            assert_equal(computed_cfhash, cfhash)\n+\n+        self.log.info(\"Check that peers can fetch cfilters for stale blocks.\")\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1000,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 1)\n+\n+        cfilter = response[0]\n+        assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+        assert_equal(cfilter.block_hash, int(stale_block_hash, 16))\n+        computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+        assert_equal(computed_cfhash, stale_cfhashes[999])\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n@@ -143,6 +198,11 @@ def run_test(self):\n                 start_height=1000,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -151,6 +211,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filters results in disconnection.\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n             # Requesting too many filter headers results in disconnection.\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,"
      },
      {
        "sha": "4d1dd4422e5998f805f44fde8010f62c47d7c75f",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
        "patch": "@@ -1516,6 +1516,57 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+\n+class msg_getcfilters:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfilters\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfilters(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfilter:\n+    __slots__ = (\"filter_type\", \"block_hash\", \"filter_data\")\n+    msgtype =  b\"cfilter\"\n+\n+    def __init__(self, filter_type=None, block_hash=None, filter_data=None):\n+        self.filter_type = filter_type\n+        self.block_hash = block_hash\n+        self.filter_data = filter_data\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.block_hash = deser_uint256(f)\n+        self.filter_data = deser_string(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.block_hash)\n+        r += ser_string(self.filter_data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfilter(filter_type={:#x}, block_hash={:x})\".format(\n+            self.filter_type, self.block_hash)\n+\n class msg_getcfheaders:\n     __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n     msgtype =  b\"getcfheaders\""
      },
      {
        "sha": "42ca7c8a10cc41a9dab869d7d9c102788cac7a86",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e36067d8cd02830c7e5a88a391dff6ac3adbe0c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=9e36067d8cd02830c7e5a88a391dff6ac3adbe0c",
        "patch": "@@ -31,8 +31,9 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n-    msg_cfheaders,\n     msg_cfcheckpt,\n+    msg_cfheaders,\n+    msg_cfilter,\n     msg_cmpctblock,\n     msg_feefilter,\n     msg_filteradd,\n@@ -69,8 +70,9 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n-    b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n+    b\"cfheaders\": msg_cfheaders,\n+    b\"cfilter\": msg_cfilter,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n     b\"filteradd\": msg_filteradd,\n@@ -332,8 +334,9 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n-    def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n+    def on_cfheaders(self, message): pass\n+    def on_cfilter(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass\n     def on_filteradd(self, message): pass"
      }
    ]
  }
]