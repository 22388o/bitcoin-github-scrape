DrahtBot,2020-07-22 14:20:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19503 (Add parameter feature to serialization and use it for CAddress by sipa)\n* #18991 (Cache responses to GETADDR to p",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-662481541,662481541,
laanwj,2020-07-22 15:27:00,Code review ACK 7aad9b2f02d0c62c05134e24b7274c27bb0a4624,https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-662519787,662519787,
vasild,2020-07-23 07:17:46,"Amazingly I have the following, almost identical, patch lurking locally! Notice that in this case there are two other magic numbers `1000` in the code which are not `MAX_ADDR_TO_SEND`.\n\n<details>\n<summary>diff</summary>\n\n```diff\ndiff --git a/src/net.h b/src/net.h\nindex a72af83ee..b059c28f8 100644\n--- a/src/net.h\n+++ b/src/net.h\n@@ -53,13 +53,13 @@ static const int TIMEOUT_INTER",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-662855486,662855486,
jonatack,2020-07-23 09:13:27,"> Amazingly I have the following, almost identical, patch lurking locally! Notice that in this case there are two other magic numbers `1000` in the code which are not `MAX_ADDR_TO_SEND`.\n\nSame! :smile: Therefore, concept ACK modulo @MarcoFalke's suggestion and @vasild's added comments.\n",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-662902150,662902150,
hebasto,2020-07-24 07:51:38,"@jnewbery \n> This issue is fixed by #18991...\n\nActually, the 7aad9b2f02d0c62c05134e24b7274c27bb0a4624 ""p2p, refactor: Do not over-reserve vAddr capacity"" commit is a fix in this PR, and this line is not touched in #18991.\n\nTo avoid #18991 rebasing I can see two possibilities:\n- drop the first commit in this PR, or\n- cherry-pick the second commit into #18991\n\nWhich variant is pref",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663394451,663394451,
jnewbery,2020-07-24 08:11:14,"I've looked a bit more closely at this PR, and I don't understand what it achieves. The supposed functional change is:\n\n```diff\n-            vAddr.reserve(pto->vAddrToSend.size());\n+            vAddr.reserve(std::min(pto->vAddrToSend.size(), (size_t)MAX_ADDR_TO_SEND));\n```\n\nbut `vAddrToSend` can never grow larger than `MAX_ADDR_TO_SEND` (see `PushAddress()` which is the only place th",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663401778,663401778,
hebasto,2020-07-24 08:21:05,"@jnewbery \nCorrect. Closing.",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663405332,663405332,
jnewbery,2020-07-24 08:36:44,"Thanks @hebasto . The code here is confusing, mostly due to the fact that AddrMan and net_processing are both setting their own limits on the size of of getaddr responses (`ADDRMAN_GETADDR_MAX` and `MAX_ADDR_TO_SEND` respectively). The size check inside the for loop is also unnecessary and confusing since `vAddr` never grows larger than 1000:\n\n```\n                    // receiver rejects addr",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663411637,663411637,
vasild,2020-07-24 08:39:47,"I guess the reason for the confusion is this code:\n\n```cpp\n            for (const CAddress& addr : pto->vAddrToSend)\n            { \n...\n                    vAddr.push_back(addr);\n                    // receiver rejects addr messages larger than 1000\n                    if (vAddr.size() >= 1000)\n```\n\nwhich would be better if something like:\n\n<details>\n<summary>diff</summ",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663413494,663413494,
jnewbery,2020-07-24 09:22:18,"@vasild I agree with removing the if block from within the loop, and adding the assert. However, I think the reserve is still useful. It ensures that we only ever have to do one allocation.\n\nEven better would be to move the vector out of `vAddrToSend` (since it gets cleared afterwards anyway) and use remove-erase to filter out the unwanted addresses.",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663442229,663442229,
jnewbery,2020-07-25 14:47:35,"> Even better would be to move the vector out of vAddrToSend (since it gets cleared afterwards anyway) and use remove-erase to filter out the unwanted addresses.\n\nI've implemented this in the _Refactor MaybeSendAddr()_ commit of https://github.com/jnewbery/bitcoin/tree/2020-06-cs-main-split. @hebasto - if you agree that's the right change, feel free to either take that commit (everything betwe",https://github.com/bitcoin/bitcoin/pull/19567#issuecomment-663863621,663863621,
MarcoFalke,2020-07-23 06:22:33,"style-nit: Instead of c-style casting of one or both arguments, selecting the exact template will force the type of both arguments and the return type as well. (Just casting one argument could still yield a different return type otherwise). Though, please don't change if there is nothing else to change\n\n```suggestion\n            vAddr.reserve(std::min<size_t>(pto->vAddrToSend.size(), MAX_ADD",https://github.com/bitcoin/bitcoin/pull/19567#discussion_r459235938,459235938,src/net_processing.cpp
vasild,2020-07-23 07:19:44,Or change the type of `MAX_ADDR_TO_SEND` from `unsigned int` to `size_t` (`std::vector::size()` always returns `size_t`).,https://github.com/bitcoin/bitcoin/pull/19567#discussion_r459257707,459257707,src/net_processing.cpp
hebasto,2020-07-23 07:24:53,"> Or change the type of `MAX_ADDR_TO_SEND` from `unsigned int` to `size_t` (`std::vector::size()` always returns `size_t`).\n\nTo be pedantic, `std::vector::size()` always returns `size_type` which [is](https://en.cppreference.com/w/cpp/container/vector)\n>  Unsigned integer type (_usually_ std::size_t) \n\n:)",https://github.com/bitcoin/bitcoin/pull/19567#discussion_r459260092,459260092,src/net_processing.cpp
vasild,2020-07-23 08:05:46,:ok_hand: :bulb: ,https://github.com/bitcoin/bitcoin/pull/19567#discussion_r459279265,459279265,src/net_processing.cpp
