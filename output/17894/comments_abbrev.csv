Crypt-iQ,2020-01-08 01:27:32,"Concept ACK.\n\nI'm not too familiar with libFuzzer so I can't speak to that, but won't this buildup only occur if AFL is in persistent mode since then there's a loop rather than a new binary being executed?",https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-571850318,571850318,
fanquake,2020-01-08 02:44:07,"[Travis failure](https://travis-ci.org/bitcoin/bitcoin/jobs/634007956): \n```bash\nTraceback (most recent call last):\n  File ""test/fuzz/test_runner.py"", line 175, in <module>\n    main()\n  File ""test/fuzz/test_runner.py"", line 115, in main\n    universal_newlines=True,\n  File ""/usr/lib/python3.6/subprocess.py"", line 438, in run\n    output=stdout, stderr=stderr)\nsubprocess.CalledProce",https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-571866938,571866938,
DrahtBot,2020-01-10 18:19:05,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-573148544,573148544,
practicalswift,2020-01-12 20:29:55,"@Crypt-iQ Yes, the build-up will only occur if in-process fuzzing is used: `libFuzzer` is always in-process and AFL only when in persistent mode.",https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-573453992,573453992,
practicalswift,2020-01-14 12:17:45,@MarcoFalke Approach ACK now with the updated version? :),https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-574147574,574147574,
practicalswift,2020-01-22 13:08:06,@MarcoFalke How can we proceed with this one? Would be really nice to not have deal with this memory leak when fuzzing the deserialisation code :),https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-577173556,577173556,
practicalswift,2020-03-10 08:12:56,Closing due to lack of interest :),https://github.com/bitcoin/bitcoin/pull/17894#issuecomment-596957345,596957345,
MarcoFalke,2020-01-13 18:51:29,"> Log messages are written to standard output\n\nWhy?",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r365968157,365968157,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-13 18:55:03,Pretty sure this will log to (and maybe corrupt) the users main data directory,https://github.com/bitcoin/bitcoin/pull/17894#discussion_r365969841,365969841,src/test/fuzz/deserialize.cpp
practicalswift,2020-01-13 21:12:48,"The regtest `debug.log` file you mean?\n\n```\n$ strace -f src/test/fuzz/messageheader_deserialize 2>&1 | grep -E '^open.*regtest'\nopenat(AT_FDCWD, ""/â€¦/.bitcoin/regtest/debug.log"", O_WRONLY|O_CREAT|O_APPEND, 0666) = 3\n```\n\nThat's not very nice and we shouldn't do that. The reason was that the `m_print_to_file` is effectively defaulting to `true` due to the initialization logic. It is ea",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366030510,366030510,src/test/fuzz/deserialize.cpp
practicalswift,2020-01-13 21:16:33,"My reasoning is that any `LogPrintf` in the deserialization code is likely a bug or a mistake, and thus something the fuzzing operator would like to be aware of. I'm scratching my own itch here: as a fuzzing operator myself I sure would like to know at least! :)\n\nFrom the OP:\n\n> This has the added benefit of making the fuzzing operator aware of any log printing caused by fuzzing which is l",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366032217,366032217,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-13 21:19:06,"In the gui tests we use this hack:\n\nhttps://github.com/bitcoin/bitcoin/blob/2ed74a43a05a47129d56117deeb489addbcaf05f/src/qt/test/test_main.cpp#L45-L53\n\n",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366033448,366033448,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-13 21:19:55,"Logging to stdout in the fuzzer is spammy, I think. It distracts from the normal fuzzer output.",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366033835,366033835,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-13 21:24:09,"If you decide to use this hack, it might make sense to move it to `src/test/util/setup_common.h` so that it can be more easily re-used.",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366035713,366035713,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-13 21:33:02,"Ah, that is true for deserialization fuzzers. However, for validation fuzzers or net processing fuzzers, or any other high level fuzzer, log prints are no longer an anomaly.",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366039772,366039772,src/test/fuzz/deserialize.cpp
practicalswift,2020-01-13 22:28:52,This PR is only making changes to the deserialization fuzzers.,https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366063282,366063282,src/test/fuzz/deserialize.cpp
practicalswift,2020-01-14 12:16:47,"I think I prefer the more explicit setup method: that way all necessary setup preconditions for the fuzzer are clearly stated in the fuzzing harness.\n\nNow setting both `-datadir` (dummy) and `-debuglogfile` (`/dev/null`) to make sure there is no possibility of interfering with the main regtest location.\n\nPlease re-review :)",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366305884,366305884,src/test/fuzz/deserialize.cpp
MarcoFalke,2020-01-14 19:32:10,"Sorry, I missed that.",https://github.com/bitcoin/bitcoin/pull/17894#discussion_r366531498,366531498,src/test/fuzz/deserialize.cpp
