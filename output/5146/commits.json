[
  {
    "sha": "5b40d8868820265adb24fec097905e84edb85762",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQwZDg4Njg4MjAyNjVhZGIyNGZlYzA5NzkwNWU4NGVkYjg1NzYy",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-26T07:03:12Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-28T03:47:49Z"
      },
      "message": "Update comments in wallet to be doxygen compatible",
      "tree": {
        "sha": "81084e25f3f0646f1052b1902de0925fb5aa9c41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81084e25f3f0646f1052b1902de0925fb5aa9c41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b40d8868820265adb24fec097905e84edb85762",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b40d8868820265adb24fec097905e84edb85762",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b40d8868820265adb24fec097905e84edb85762",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b40d8868820265adb24fec097905e84edb85762/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ece7dd074e1cb1b00ffb89dc6a6de063145b53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ece7dd074e1cb1b00ffb89dc6a6de063145b53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ece7dd074e1cb1b00ffb89dc6a6de063145b53"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 125,
      "deletions": 89
    },
    "files": [
      {
        "sha": "d392149dbb3b7c263180465056080f46106db088",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 30,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b40d8868820265adb24fec097905e84edb85762/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b40d8868820265adb24fec097905e84edb85762/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5b40d8868820265adb24fec097905e84edb85762",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"wallet.h\"\n@@ -22,18 +22,23 @@\n \n using namespace std;\n \n-// Settings\n+/**\n+ * Settings\n+ */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = 1;\n bool bSpendZeroConfChange = true;\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-CFeeRate CWallet::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n+/** \n+ * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) \n+ * Override with -mintxfee\n+ */\n+CFeeRate CWallet::minTxFee = CFeeRate(10000);\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// mapWallet\n-//\n+/** @defgroup mapWallet\n+ *\n+ * @{\n+ */\n \n struct CompareValueOnly\n {\n@@ -367,8 +372,10 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n     }\n }\n \n-// Outpoint is spent if any non-conflicted transaction\n-// spends it:\n+/**\n+ * Outpoint is spent if any non-conflicted transaction\n+ * spends it:\n+ */\n bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n {\n     const COutPoint outpoint(hash, n);\n@@ -477,7 +484,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         {\n             if (!pwalletdbEncryption->TxnCommit()) {\n                 delete pwalletdbEncryption;\n-                // We now have keys encrypted in memory, but no on disk...\n+                // We now have keys encrypted in memory, but not on disk...\n                 // die to avoid confusion and let the user reload their unencrypted wallet.\n                 assert(false);\n             }\n@@ -667,9 +674,11 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n     return true;\n }\n \n-// Add a transaction to the wallet, or update it.\n-// pblock is optional, but should be provided if the transaction is known to be in a block.\n-// If fUpdate is true, existing transactions will be updated.\n+/**\n+ * Add a transaction to the wallet, or update it.\n+ * pblock is optional, but should be provided if the transaction is known to be in a block.\n+ * If fUpdate is true, existing transactions will be updated.\n+ */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n     {\n@@ -911,9 +920,11 @@ bool CWalletTx::WriteToDisk()\n     return CWalletDB(pwallet->strWalletFile).WriteTx(GetHash(), *this);\n }\n \n-// Scan the block chain (starting in pindexStart) for transactions\n-// from or to us. If fUpdate is true, found transactions that already\n-// exist in the wallet will be updated.\n+/**\n+ * Scan the block chain (starting in pindexStart) for transactions\n+ * from or to us. If fUpdate is true, found transactions that already\n+ * exist in the wallet will be updated.\n+ */\n int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n     int ret = 0;\n@@ -1035,15 +1046,15 @@ void CWallet::ResendWalletTransactions()\n     }\n }\n \n+/** @} */ // end of mapWallet\n \n \n \n \n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Actions\n-//\n+/** @defgroup Actions\n+ *\n+ * @{\n+ */\n \n \n CAmount CWallet::GetBalance() const\n@@ -1136,7 +1147,9 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-// populate vCoins with vector of available COutputs.\n+/**\n+ * populate vCoins with vector of available COutputs.\n+ */\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl) const\n {\n     vCoins.clear();\n@@ -1194,7 +1207,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n                 //The solver here uses a randomized algorithm,\n                 //the randomness serves no real security purpose but is just\n                 //needed to prevent degenerate behavior and it is important\n-                //that the rng fast. We do not use a constant random sequence,\n+                //that the rng is fast. We do not use a constant random sequence,\n                 //because there may be some privacy improvement by making\n                 //the selection random.\n                 if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])\n@@ -1524,7 +1537,9 @@ bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n }\n \n-// Call after CreateTransaction unless you want to abort\n+/**\n+ * Call after CreateTransaction unless you want to abort\n+ */\n bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n {\n     {\n@@ -1669,7 +1684,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n             setKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n-            // the requires a new key.\n+            // that requires a new key.\n         }\n     }\n \n@@ -1736,10 +1751,10 @@ bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n     return true;\n }\n \n-//\n-// Mark old keypool keys as used,\n-// and generate all new keys\n-//\n+/**\n+ * Mark old keypool keys as used,\n+ * and generate all new keys \n+ */\n bool CWallet::NewKeyPool()\n {\n     {\n@@ -2120,6 +2135,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+/** @} */ // end of Actions\n \n class CAffectedKeysVisitor : public boost::static_visitor<void> {\n private:"
      },
      {
        "sha": "6ef830f22055c2ad190518a90425e6b0e27940f9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 79,
        "deletions": 59,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b40d8868820265adb24fec097905e84edb85762/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b40d8868820265adb24fec097905e84edb85762/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5b40d8868820265adb24fec097905e84edb85762",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_WALLET_H\n@@ -24,16 +24,18 @@\n #include <utility>\n #include <vector>\n \n-// Settings\n+/**\n+ * Settings\n+ */\n extern CFeeRate payTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n \n-// -paytxfee default\n+//! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n-// -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n+//! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n-// Largest (in bytes) free transaction we're willing to create\n+//! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n class CAccountingEntry;\n@@ -92,7 +94,8 @@ class CAddressBookData\n     StringMap destdata;\n };\n \n-/** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+/** \n+ * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n@@ -102,18 +105,20 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     CWalletDB *pwalletdbEncryption;\n \n-    // the current wallet version: clients below this version are not able to load the wallet\n+    //! the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion;\n \n-    // the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n     int nWalletMaxVersion;\n \n     int64_t nNextResend;\n     int64_t nLastResend;\n \n-    // Used to keep track of spent outpoints, and\n-    // detect and report conflicts (double-spends or\n-    // mutated transactions where the mutant gets mined).\n+    /**\n+     * Used to keep track of spent outpoints, and\n+     * detect and report conflicts (double-spends or\n+     * mutated transactions where the mutant gets mined).\n+     */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n     TxSpends mapTxSpends;\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n@@ -122,11 +127,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:\n-    /// Main wallet lock.\n-    /// This lock protects all the fields added by CWallet\n-    ///   except for:\n-    ///      fFileBacked (immutable after instantiation)\n-    ///      strWalletFile (immutable after instantiation)\n+    /*\n+     * Main wallet lock.\n+     * This lock protects all the fields added by CWallet\n+     *   except for:\n+     *      fFileBacked (immutable after instantiation)\n+     *      strWalletFile (immutable after instantiation)\n+     */\n     mutable CCriticalSection cs_wallet;\n \n     bool fFileBacked;\n@@ -186,7 +193,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n-    // check whether we are allowed to upgrade (or already support) to the named feature\n+    //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n@@ -200,38 +207,40 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void UnlockAllCoins();\n     void ListLockedCoins(std::vector<COutPoint>& vOutpts);\n \n-    // keystore implementation\n-    // Generate a new key\n+    /**\n+     * keystore implementation\n+     * Generate a new key\n+     */\n     CPubKey GenerateNewKey();\n-    // Adds a key to the store, and saves it to disk.\n+    //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    // Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n-    // Load metadata (used by LoadWallet)\n+    //! Load metadata (used by LoadWallet)\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n-    // Adds an encrypted key to the store, and saves it to disk.\n+    //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddCScript(const CScript& redeemScript);\n     bool LoadCScript(const CScript& redeemScript);\n \n-    /// Adds a destination data tuple to the store, and saves it to disk\n+    //! Adds a destination data tuple to the store, and saves it to disk\n     bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n-    /// Erases a destination data tuple in the store and on disk\n+    //! Erases a destination data tuple in the store and on disk\n     bool EraseDestData(const CTxDestination &dest, const std::string &key);\n-    /// Adds a destination data tuple to the store, without saving it to disk\n+    //! Adds a destination data tuple to the store, without saving it to disk\n     bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n-    /// Look up a destination data tuple in the store, return true if found false otherwise\n+    //! Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n-    // Adds a watch-only address to the store, and saves it to disk.\n+    //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript &dest);\n     bool RemoveWatchOnly(const CScript &dest);\n-    // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n@@ -240,17 +249,19 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n \n-    /** Increment the next transaction order id\n-        @return next transaction order id\n+    /** \n+     * Increment the next transaction order id\n+     * @return next transaction order id\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n     typedef std::multimap<int64_t, TxPair > TxItems;\n \n-    /** Get the wallet's activity log\n-        @return multimap of ordered transactions and accounting entries\n-        @warning Returned pointers are *only* valid within the scope of passed acentries\n+    /**\n+     * Get the wallet's activity log\n+     * @return multimap of ordered transactions and accounting entries\n+     * @warning Returned pointers are *only* valid within the scope of passed acentries\n      */\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n@@ -318,7 +329,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n                 return true;\n         return false;\n     }\n-    bool IsFromMe(const CTransaction& tx) const     // should probably be renamed to IsRelevantToMe\n+    /** should probably be renamed to IsRelevantToMe */\n+    bool IsFromMe(const CTransaction& tx) const\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n@@ -384,27 +396,29 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n \n-    // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n \n-    // change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n     bool SetMaxVersion(int nVersion);\n \n-    // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    //! get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n-    // Get wallet transactions that conflict with given transaction (spend same outputs)\n+    //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n-    /** Address book entry changed.\n+    /** \n+     * Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const CTxDestination\n             &address, const std::string &label, bool isMine,\n             const std::string &purpose,\n             ChangeType status)> NotifyAddressBookChanged;\n \n-    /** Wallet transaction added, removed or updated.\n+    /** \n+     * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx,\n@@ -515,18 +529,22 @@ class CMerkleTx : public CTransaction\n \n     int SetMerkleBranch(const CBlock& block);\n \n-    // Return depth of transaction in blockchain:\n-    // -1  : not in blockchain, and not in memory pool (conflicted transaction)\n-    //  0  : in memory pool, waiting to be included in a block\n-    // >=1 : this many blocks deep in the main chain\n+\n+    /**\n+     * Return depth of transaction in blockchain:\n+     * -1  : not in blockchain, and not in memory pool (conflicted transaction)\n+     *  0  : in memory pool, waiting to be included in a block\n+     * >=1 : this many blocks deep in the main chain\n+     */\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectInsaneFee=true);\n };\n \n-/** A transaction with a bunch of additional info that only the owner cares about.\n+/** \n+ * A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n class CWalletTx : public CMerkleTx\n@@ -538,11 +556,11 @@ class CWalletTx : public CMerkleTx\n     mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived;  // time received by this node\n+    unsigned int nTimeReceived; //! time received by this node\n     unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n-    int64_t nOrderPos;  // position in ordered transaction list\n+    int64_t nOrderPos; //! position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -634,7 +652,7 @@ class CWalletTx : public CMerkleTx\n         }\n \n         READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; // Used to be vtxPrev\n+        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);\n         READWRITE(vOrderForm);\n@@ -659,7 +677,7 @@ class CWalletTx : public CMerkleTx\n         mapValue.erase(\"timesmart\");\n     }\n \n-    // make sure balances are recalculated\n+    //! make sure balances are recalculated\n     void MarkDirty()\n     {\n         fCreditCached = false;\n@@ -678,7 +696,7 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    // filter decides which addresses will count towards the debit\n+    //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const\n     {\n         if (vin.empty())\n@@ -917,8 +935,8 @@ class CWalletKey\n     int64_t nTimeCreated;\n     int64_t nTimeExpires;\n     std::string strComment;\n-    //// todo: add something to note what created it (user, getnewaddress, change)\n-    ////   maybe should have a map<string, string> property map\n+    //! todo: add something to note what created it (user, getnewaddress, change)\n+    //!   maybe should have a map<string, string> property map\n \n     CWalletKey(int64_t nExpires=0);\n \n@@ -940,7 +958,8 @@ class CWalletKey\n \n \n \n-/** Account information.\n+/** \n+ * Account information.\n  * Stored in wallet with key \"acc\"+string account name.\n  */\n class CAccount\n@@ -970,7 +989,8 @@ class CAccount\n \n \n \n-/** Internal transfers.\n+/** \n+ * Internal transfers.\n  * Database key is acentry<account><counter>.\n  */\n class CAccountingEntry\n@@ -982,7 +1002,7 @@ class CAccountingEntry\n     std::string strOtherAccount;\n     std::string strComment;\n     mapValue_t mapValue;\n-    int64_t nOrderPos;  // position in ordered transaction list\n+    int64_t nOrderPos;  //! position in ordered transaction list\n     uint64_t nEntryNo;\n \n     CAccountingEntry()\n@@ -1007,7 +1027,7 @@ class CAccountingEntry\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         if (!(nType & SER_GETHASH))\n             READWRITE(nVersion);\n-        // Note: strAccount is serialized as part of the key, not here.\n+        //! Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n         READWRITE(nTime);\n         READWRITE(LIMITED_STRING(strOtherAccount, 65536));"
      }
    ]
  }
]