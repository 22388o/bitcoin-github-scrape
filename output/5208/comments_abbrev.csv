theuni,2014-11-05T02:07:01Z,Wouldn't this would be more flexible without keystore in the base class? Removing that would make this conducive to a future signing lib as well. Quick hack: https://github.com/theuni/bitcoin/commit/a61f6b103cd00c3540ea9d1d33f9810107713447\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-61748947,61748947,
sipa,2014-11-05T06:16:50Z,"@theuni Yes, I actually started off that way, but if you need something that can look up private keys, public keys, and  scripts... then you pretty much already have CKeyStore (the abstract base) already again. \n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-61764525,61764525,
theuni,2014-11-05T06:23:04Z,"@sipa fair enough. I've been debating whether CKeyStore should just drop its app deps and become available to libs. I guess you would argue ""yes"" on that one. In that case, it's only necessary to bump CKeyStore's CCriticalSection up to CBasicKeyStore, and move CKeyStore to a new file as a stateless base class. If you agree, I'll PR that change.\n\nEdit: Err.. stateless in the sense that it depends",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-61764954,61764954,
sipa,2014-11-05T06:25:22Z,"@theuni An alternative would be to make BaseSignatureCreator have the methods you suggest, and make CKeyStore derive from it: it effectively is something that is able to create signatures, but in addition, is able to recognize payments to itself.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-61765096,61765096,
theuni,2014-11-05T06:30:29Z,"@sipa Yes, that would make sense. That way SignatureCreator could use a small subset of CKeyStore, and that subset would be available to a lib as well. +1\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-61765478,61765478,
sipa,2014-11-08T16:08:20Z,"@theuni After thinking a bit longer, I think I prefer the solution with simplifying CKeyStore if necessary, as that means the same keystore class could be reused for different types of signing.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-62263068,62263068,
theuni,2014-11-08T19:51:38Z,"@sipa ok. Taking another look, for that we'd also need to rid CKeyStore (the interface class) of CKey usage, since that's not lib safe. Clunky as that sounds at first, it may make a little bit of sense if you consider that a lib's keystore implementation may want to maintain its own backing store and avoid copying data around with getters/setters.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-62274366,62274366,
jtimon,2014-11-09T23:53:00Z,"My preference is the solution in which CKeyStore doesn't have any critical section (it's moved up to CBasicKeyStore) and becomes just a pure interface (well, leaving AddKey() and GetPubKey() as the only non-pure virtual methods, so it's still an abstract class rather than an interface) with only CKey, CPubKey, CKeyID, CScript and CScriptID as dependencies. \nI implemented that prerequisite in #525",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-62326227,62326227,
sipa,2014-11-09T23:55:27Z,@jtimon 3x agreed.\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-62326311,62326311,
sipa,2014-11-16T21:09:14Z,"Rebased, and addressed @jtimon's two last nits. I haven't incorporated #5251 yet as that isn't sufficiently up to date with master.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-63239424,63239424,
sipa,2014-11-16T21:21:55Z,"@theuni we should get rid of those globals regardless, I suppose.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-63240027,63240027,
sipa,2015-02-05T02:13:28Z,"Rebased, and made the class names consistent with #5719.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-72982075,72982075,
theuni,2015-02-05T03:04:23Z,"Concept ACK, looks ok from a quick glance. \n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-72986495,72986495,
jtimon,2015-02-05T20:06:43Z,"You ended up doing TransactionSignatureCreator and TransactionSignatureChecker instead of TxSignatureCreator and TxSignatureChecker. Longer, but too late to bikeshed that.\nutACK\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-73116816,73116816,
sipa,2015-02-16T20:33:19Z,@laanwj Care to have a look?\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-74568358,74568358,
laanwj,2015-03-20T15:35:28Z,Huh - this somehow slipped through. Will take a look.\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-84050708,84050708,
sipa,2015-03-21T14:09:48Z,"Rebased and updated to use a CKeyStore\* pointer instead of reference, except for SignSignature, whose signature I did not change.\n",https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-84349841,84349841,
laanwj,2015-03-24T07:31:00Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-85375411,85375411,
jgarzik,2015-03-24T07:45:28Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5208#issuecomment-85380921,85380921,
jtimon,2015-02-05T20:11:21Z,Why this needs to become static?\nCan't the compiler find out what it's best (static or inline) by itself?\n,https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24195034,24195034,src/script/sign.cpp
luke-jr,2015-02-05T20:13:08Z,Compilers don't have enough information to determine if functions can be static. And non-static functions cannot be inlined.\n,https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24195206,24195206,src/script/sign.cpp
sipa,2015-02-05T20:14:34Z,"The compiler compiles individual .cpp files. At that stage, it's not yet known whether a function will be used by other modules (.cpp), so no, you need to tell it that it's local to the module.\n",https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24195348,24195348,src/script/sign.cpp
sipa,2015-02-05T20:30:09Z,@luke-jr Non-static functions can (and are) inlined just fine. They just can't be omitted from the resulting .o file unless they're 1) static 2) inlined in every call site.\n,https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24196617,24196617,src/script/sign.cpp
jtimon,2015-02-06T00:15:40Z,s/Solver/SignStep\n,https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24213081,24213081,src/script/sign.cpp
jtimon,2015-02-06T04:04:32Z,and s/need/needs\n,https://github.com/bitcoin/bitcoin/pull/5208#discussion_r24221455,24221455,src/script/sign.cpp
laanwj,2015-03-20T15:57:19Z,"Let's follow #5719 and make this (as well as the argument to BaseSignatureCreator) a pointer instead of a reference. This will avoid any possibility of bugs caused by storing a reference to a temporary, implicit conversion.\n",https://github.com/bitcoin/bitcoin/pull/5208#discussion_r26850774,26850774,src/script/sign.h
