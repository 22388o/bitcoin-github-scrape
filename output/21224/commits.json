[
  {
    "sha": "37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2ZlMGM5MzNlMzM4NWY0NzRkMDNhOGZhMjZhMWViNjU3YWU2NGI3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:43:03Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:45:12Z"
      },
      "message": "[test]: Make tx-relay test framework with the inv-getdata sequence\n\nCurrently, our testing framework doesn't comply with the canonical\ninv-getdata announcement sequence (`p2p_compactblocks.py,\n`p2p_eviction.py`, `p2p_segwit.py`, `p2p_invalid_tx.py`,\n`p2p_permissions.py`). We either add the required sequence or\nwhitelist testing peers when it doesn't have effect on test behaviors.",
      "tree": {
        "sha": "eb9af8b3919116789824ff075efb727d266ede0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb9af8b3919116789824ff075efb727d266ede0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/comments",
    "author": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b401b093556f53023d1615f7cff3eb84807c6e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b401b093556f53023d1615f7cff3eb84807c6e8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b401b093556f53023d1615f7cff3eb84807c6e8b"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 102,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5e12eb9bfe90792289bb4b62d7d60b6464c8ceff",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "patch": "@@ -10,7 +10,7 @@\n import random\n \n from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n+from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, MSG_WTX, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n@@ -462,6 +462,9 @@ def test_tip_after_message(node, peer, msg, tip):\n         utxo = self.utxos.pop(0)\n         block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        sha256 = block.vtx[1].calc_sha256(with_witness=True)\n+        test_node.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+        test_node.wait_for_getdata([sha256], 5)\n         test_node.send_and_ping(msg_tx(block.vtx[1]))\n         assert block.vtx[1].hash in node.getrawmempool()\n \n@@ -479,6 +482,9 @@ def test_tip_after_message(node, peer, msg, tip):\n         block = self.build_block_with_transactions(node, utxo, 10)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         for tx in block.vtx[1:]:\n+            sha256 = tx.calc_sha256(with_witness=True)\n+            test_node.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+            test_node.wait_for_getdata([sha256], 5)\n             test_node.send_message(msg_tx(tx))\n         test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n@@ -508,6 +514,9 @@ def test_incorrect_blocktxn_response(self, test_node):\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         # Relay the first 5 transactions from the block in advance\n         for tx in block.vtx[1:6]:\n+            sha256 = tx.calc_sha256(with_witness=True)\n+            test_node.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+            test_node.wait_for_getdata([sha256], 5)\n             test_node.send_message(msg_tx(tx))\n         test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n@@ -733,6 +742,9 @@ def announce_cmpct_block(node, peer):\n         block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n \n         for tx in block.vtx[1:]:\n+            sha256 = tx.calc_sha256(with_witness=True)\n+            delivery_peer.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+            delivery_peer.wait_for_getdata([sha256], 5)\n             delivery_peer.send_message(msg_tx(tx))\n         delivery_peer.sync_with_ping()\n         mempool = node.getrawmempool()\n@@ -748,6 +760,9 @@ def announce_cmpct_block(node, peer):\n \n         block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n         for tx in block.vtx[1:]:\n+            sha256 = tx.calc_sha256(with_witness=True)\n+            delivery_peer.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+            delivery_peer.wait_for_getdata([sha256], 5)\n             delivery_peer.send_message(msg_tx(tx))\n         delivery_peer.sync_with_ping()\n "
      },
      {
        "sha": "0f412f16eca06db7a679a811823fe70c5f284d8a",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "patch": "@@ -16,7 +16,7 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+from test_framework.messages import CInv, CTransaction, FromHex, msg_inv, msg_pong, msg_tx, MSG_WTX\n from test_framework.p2p import P2PDataStore, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -85,7 +85,11 @@ def run_test(self):\n                     'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n                 }],\n             )['hex']\n-            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            tx = FromHex(CTransaction(), sigtx)\n+            sha256 = tx.calc_sha256(with_witness=True)\n+            txpeer.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+            txpeer.wait_for_getdata([sha256], 5)\n+            txpeer.send_message(msg_tx(tx))\n             protected_peers.add(current_peer)\n \n         self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")"
      },
      {
        "sha": "bfa55db9e5ca2710452e94bd627ee894388726f8",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "patch": "@@ -26,6 +26,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n             \"-acceptnonstdtxn=1\",\n+            \"-whitelist=relay@127.0.0.1\"\n         ]]\n         self.setup_clean_chain = True\n \n@@ -76,6 +77,7 @@ def run_test(self):\n                 [tx], node, success=False,\n                 expect_disconnect=template.expect_disconnect,\n                 reject_reason=template.reject_reason,\n+                relay=True\n             )\n \n             if template.expect_disconnect:\n@@ -121,16 +123,16 @@ def run_test(self):\n \n         self.log.info('Send the orphans ... ')\n         # Send valid orphan txs from p2ps[0]\n-        node.p2ps[0].send_txs_and_test([tx_orphan_1, tx_orphan_2_no_fee, tx_orphan_2_valid], node, success=False)\n+        node.p2ps[0].send_txs_and_test([tx_orphan_1, tx_orphan_2_no_fee, tx_orphan_2_valid], node, success=False, expect_disconnect=False, reject_reason=None, relay=True)\n         # Send invalid tx from p2ps[1]\n-        node.p2ps[1].send_txs_and_test([tx_orphan_2_invalid], node, success=False)\n+        node.p2ps[1].send_txs_and_test([tx_orphan_2_invalid], node, success=False, expect_disconnect=False, reject_reason=None, relay=True)\n \n         assert_equal(0, node.getmempoolinfo()['size'])  # Mempool should be empty\n         assert_equal(2, len(node.getpeerinfo()))  # p2ps[1] is still connected\n \n         self.log.info('Send the withhold tx ... ')\n         with node.assert_debug_log(expected_msgs=[\"bad-txns-in-belowout\"]):\n-            node.p2ps[0].send_txs_and_test([tx_withhold], node, success=True)\n+            node.p2ps[0].send_txs_and_test([tx_withhold], node, success=True, expect_disconnect=False, reject_reason=None, relay=True)\n \n         # Transactions that should end up in the mempool\n         expected_mempool = {\n@@ -155,14 +157,14 @@ def run_test(self):\n             orphan_tx_pool[i].vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n \n         with node.assert_debug_log(['mapOrphan overflow, removed 1 tx']):\n-            node.p2ps[0].send_txs_and_test(orphan_tx_pool, node, success=False)\n+            node.p2ps[0].send_txs_and_test(orphan_tx_pool, node, success=False, expect_disconnect=False, reject_reason=None, relay=True)\n \n         rejected_parent = CTransaction()\n         rejected_parent.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_2_invalid.sha256, 0)))\n         rejected_parent.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n         rejected_parent.rehash()\n         with node.assert_debug_log(['not keeping orphan with rejected parents {}'.format(rejected_parent.hash)]):\n-            node.p2ps[0].send_txs_and_test([rejected_parent], node, success=False)\n+            node.p2ps[0].send_txs_and_test([rejected_parent], node, success=False, expect_disconnect=False, reject_reason=None, relay=True)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "fa5817b5fb09318133b67d38456e1e30e1a778dd",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 66,
        "deletions": 2,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "patch": "@@ -92,6 +92,7 @@\n MAX_SIGOP_COST = 80000\n \n SEGWIT_HEIGHT = 120\n+GETDATA_TX_INTERVAL = 60  # seconds\n \n class UTXO():\n     \"\"\"Used to keep track of anyone-can-spend outputs that we can use in the tests.\"\"\"\n@@ -124,10 +125,15 @@ def get_virtual_size(witness_block):\n def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n+    - Announce the transaction over the p2p interface\n     - Submit the transaction over the p2p interface\n     - use the getrawmempool rpc to check for acceptance.\"\"\"\n+    with p2p_lock:\n+        p2p.last_message.pop(\"getdata\", None)\n     reason = [reason] if reason else []\n     with node.assert_debug_log(expected_msgs=reason):\n+        p2p.send_and_ping(msg_inv(inv=[CInv(MSG_TX, tx.sha256)]))\n+        p2p.wait_for_getdata([tx.sha256], 5)\n         p2p.send_and_ping(msg_tx(tx) if with_witness else msg_no_witness_tx(tx))\n         assert_equal(tx.hash in node.getrawmempool(), accepted)\n \n@@ -340,6 +346,8 @@ def test_non_witness_transaction(self):\n         # This is a sanity check of our testing framework.\n         assert_equal(msg_no_witness_tx(tx).serialize(), msg_tx(tx).serialize())\n \n+        self.test_node.send_message(msg_inv(inv=[CInv(MSG_TX, tx.sha256)]))\n+        self.test_node.wait_for_getdata([tx.sha256], 5)\n         self.test_node.send_and_ping(msg_tx(tx))  # make sure the block was processed\n         assert tx.hash in self.nodes[0].getrawmempool()\n         # Save this transaction for later\n@@ -606,6 +614,17 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # a witness transaction ought not result in a getdata.\n         self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2, success=False)\n \n+        node_0_mocktime = int(time.time())\n+        node_0_mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[0].setmocktime(node_0_mocktime)\n+        self.old_node.sync_with_ping()\n+\n+        node_0_mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[0].setmocktime(node_0_mocktime)\n+        self.test_node.sync_with_ping()\n+\n+        self.nodes[0].setmocktime(0)\n+\n         # Delivering this transaction with witness should fail (no matter who\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -1311,6 +1330,13 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        node_0_mocktime = int(time.time())\n+        node_0_mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[0].setmocktime(node_0_mocktime)\n+        self.test_node.sync_with_ping()\n+        self.nodes[0].setmocktime(0)\n+\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n@@ -1342,10 +1368,25 @@ def test_tx_relay_after_segwit_activation(self):\n         # Node will be blinded to the transaction via wtxid, however.\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n         self.std_wtx_node.announce_tx_and_wait_for_getdata(tx3, use_wtxid=True)\n+\n+        node_1_mocktime = int(time.time())\n+        node_1_mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[1].setmocktime(node_1_mocktime)\n+        self.std_node.sync_with_ping()\n+        self.nodes[1].setmocktime(0)\n+        self.std_node.sync_with_ping()\n+\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, 'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n         self.std_wtx_node.announce_tx_and_wait_for_getdata(tx3, use_wtxid=True, success=False)\n \n+        node_0_mocktime = int(time.time())\n+        node_0_mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[0].setmocktime(node_0_mocktime)\n+        self.test_node.sync_with_ping()\n+        self.nodes[0].setmocktime(0)\n+        self.test_node.sync_with_ping()\n+\n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n@@ -1430,6 +1471,8 @@ def test_segwit_versions(self):\n         self.sync_blocks()\n         assert len(self.nodes[0].getrawmempool()) == 0\n \n+        self.disconnect_nodes(0, 1)\n+\n         # Finally, verify that version 0 -> version 2 transactions\n         # are standard\n         script_pubkey = CScript([CScriptOp(OP_2), witness_hash])\n@@ -1459,14 +1502,29 @@ def test_segwit_versions(self):\n         # First we test this transaction against fRequireStandard=true node\n         # making sure the txid is added to the reject filter\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n+\n+        mocktime = int(time.time())\n+        mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[1].setmocktime(mocktime)\n+        self.std_node.sync_with_ping()\n+        self.nodes[1].setmocktime(0)\n+\n         test_transaction_acceptance(self.nodes[1], self.std_node, tx3, with_witness=True, accepted=False, reason=\"bad-txns-nonstandard-inputs\")\n         # Now the node will no longer ask for getdata of this transaction when advertised by same txid\n         self.std_node.announce_tx_and_wait_for_getdata(tx3, timeout=5, success=False)\n \n+        mocktime = int(time.time())\n+        mocktime += GETDATA_TX_INTERVAL + 10\n+        self.nodes[0].setmocktime(mocktime)\n+        self.test_node.sync_with_ping()\n+        self.nodes[0].setmocktime(0)\n+\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")\n \n+        self.connect_nodes(0, 1)\n+\n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n@@ -1884,6 +1942,8 @@ def test_non_standard_witness(self):\n         self.nodes[0].generate(1)\n         self.sync_blocks()\n \n+        self.disconnect_nodes(0, 1)\n+\n         # Creating transactions for tests\n         p2wsh_txs = []\n         p2sh_txs = []\n@@ -1944,6 +2004,8 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, 'bad-witness-nonstandard')\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n+        self.connect_nodes(0, 1)\n+\n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n         self.sync_blocks()\n@@ -2169,7 +2231,8 @@ def received_wtxidrelay():\n         # Send tx2 through; it's an orphan so won't be accepted\n         with p2p_lock:\n             self.wtx_node.last_message.pop(\"getdata\", None)\n-        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n+        self.wtx_node.send_and_ping(msg_tx(tx2))\n+        assert_equal(tx2.hash in self.nodes[0].getrawmempool(), False)\n \n         # Expect a request for parent (tx) by txid despite use of WTX peer\n         self.wtx_node.wait_for_getdata([tx.sha256], 60)\n@@ -2178,7 +2241,8 @@ def received_wtxidrelay():\n         assert_equal(lgd, [CInv(MSG_WITNESS_TX, tx.sha256)])\n \n         # Send tx through\n-        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx, with_witness=False, accepted=True)\n+        self.wtx_node.send_and_ping(msg_no_witness_tx(tx))\n+        assert_equal(tx.hash in self.nodes[0].getrawmempool(), True)\n \n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)"
      },
      {
        "sha": "94af02d1bd18f09ef918a53e1e291df408078a60",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fe0c933e3385f474d03a8fa26a1eb657ae64b7/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "patch": "@@ -30,6 +30,7 @@\n \n from test_framework.messages import (\n     CBlockHeader,\n+    CInv,\n     MAX_HEADERS_RESULTS,\n     MIN_VERSION_SUPPORTED,\n     msg_addr,\n@@ -707,11 +708,11 @@ def send_blocks_and_test(self, blocks, node, *, success=True, force_send=False,\n             else:\n                 assert node.getbestblockhash() != blocks[-1].hash\n \n-    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_reason=None, relay=False):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n-         - send tx messages for all txs\n+         - send announcements and tx messages for all txs\n          - if success is True/False: assert that the txs are/are not accepted to the mempool\n          - if expect_disconnect is True: Skip the sync with ping\n          - if reject_reason is set: assert that the correct reject message is logged.\"\"\"\n@@ -723,6 +724,10 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n         reject_reason = [reject_reason] if reject_reason else []\n         with node.assert_debug_log(expected_msgs=reject_reason):\n             for tx in txs:\n+                if relay == False:\n+                    sha256 = tx.calc_sha256(with_witness=True)\n+                    self.send_message(msg_inv(inv=[CInv(MSG_WTX, sha256)]))\n+                    self.wait_for_getdata([sha256], 5)\n                 self.send_message(msg_tx(tx))\n \n             if expect_disconnect:"
      }
    ]
  },
  {
    "sha": "f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmVlZGE5OWI0YzYwN2EzNmM2Y2UwYjE5YzcyOWQxZWI5NGVkYjk5",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:37:20Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:45:12Z"
      },
      "message": "[p2p]: Stop unrequested transactions processing\n\nTo mitigate potential DoS risks, stop unrequested transaction\nprocessing early, unless the peer has PF_RELAY permission.\nUnrequested transaction is defined as one for which we have not\nissued getdatas on this connection link.\n\nNote, parent-orphan fetching happens through MSG_TX, thus we\nshould expect txid requests even on wtxid-relay peers.",
      "tree": {
        "sha": "8b040bd3f4704482de07096040175adbcdf5c030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b040bd3f4704482de07096040175adbcdf5c030"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/comments",
    "author": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fe0c933e3385f474d03a8fa26a1eb657ae64b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37fe0c933e3385f474d03a8fa26a1eb657ae64b7"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c26fb32e34b3b26e29d6aaaf4f54b7a5365a3fe",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
        "patch": "@@ -3154,6 +3154,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         LOCK2(cs_main, g_cs_orphans);\n \n+        // Do no not process unrequested transactions to mitigate potential DoS risks.\n+        // We check both identifiers as txid may happen on a wtxid-relay link due to\n+        // parent-orphan fetching.\n+        bool is_expected = tx.HasWitness() ? m_txrequest.ExpectedTx(pfrom.GetId(), wtxid) || m_txrequest.ExpectedTx(pfrom.GetId(), txid)\n+            : m_txrequest.ExpectedTx(pfrom.GetId(), txid);\n+        if (!pfrom.HasPermission(PF_RELAY) && !is_expected) {\n+            LogPrint(BCLog::NET, \"unrequested transaction from peer=%d\\n\", pfrom.GetId());\n+            return;\n+        }\n+\n         CNodeState* nodestate = State(pfrom.GetId());\n \n         const uint256& hash = nodestate->m_wtxid_relay ? wtxid : txid;"
      },
      {
        "sha": "dcf6c4de99e7b4366c0956f0d6863d4f665f2cb7",
        "filename": "src/txrequest.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/txrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/txrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrequest.cpp?ref=f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
        "patch": "@@ -678,6 +678,18 @@ class TxRequestTracker::Impl {\n         if (it != m_index.get<ByPeer>().end()) MakeCompleted(m_index.project<ByTxHash>(it));\n     }\n \n+    bool ExpectedTx(NodeId peer, const uint256& txhash)\n+    {\n+        auto it_hash = m_index.get<ByTxHash>().lower_bound(ByTxHashView{txhash, State::REQUESTED, 0});\n+        // We need to traverse all the REQUESTED/COMPLETED announcements to verify we effectively\n+        // requested the txhash from this peer.\n+        while (it_hash != m_index.get<ByTxHash>().end() && it_hash->m_txhash == txhash) {\n+            if (it_hash->m_peer == peer) return true;\n+            ++it_hash;\n+        }\n+        return false;\n+    }\n+\n     size_t CountInFlight(NodeId peer) const\n     {\n         auto it = m_peerinfo.find(peer);\n@@ -744,6 +756,11 @@ void TxRequestTracker::ReceivedResponse(NodeId peer, const uint256& txhash)\n     m_impl->ReceivedResponse(peer, txhash);\n }\n \n+bool TxRequestTracker::ExpectedTx(NodeId peer, const uint256& txhash)\n+{\n+    return m_impl->ExpectedTx(peer, txhash);\n+}\n+\n std::vector<GenTxid> TxRequestTracker::GetRequestable(NodeId peer, std::chrono::microseconds now,\n     std::vector<std::pair<NodeId, GenTxid>>* expired)\n {"
      },
      {
        "sha": "65adb5043ef7b614f6dfd95e8935f218f37f29cb",
        "filename": "src/txrequest.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/txrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99/src/txrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrequest.h?ref=f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
        "patch": "@@ -181,6 +181,9 @@ class TxRequestTracker {\n      */\n     void ReceivedResponse(NodeId peer, const uint256& txhash);\n \n+    /** Find if a given txhash has been requested to this peer. */\n+    bool ExpectedTx(NodeId peer, const uint256& txhash);\n+\n     // The operations below inspect the data structure.\n \n     /** Count how many REQUESTED announcements a peer has. */"
      }
    ]
  },
  {
    "sha": "0b9b98d29bee539dd66e51456d193d3d586e7b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjliOThkMjliZWU1MzlkZDY2ZTUxNDU2ZDE5M2QzZDU4NmU3YjRk",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2020-10-31T00:01:14Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:45:12Z"
      },
      "message": "[test]: Add new coverage for processing-halt of unrequested txn",
      "tree": {
        "sha": "0d857183ac18cc5b9153f90cd8b17f1709b7125b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d857183ac18cc5b9153f90cd8b17f1709b7125b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b9b98d29bee539dd66e51456d193d3d586e7b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9b98d29bee539dd66e51456d193d3d586e7b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9b98d29bee539dd66e51456d193d3d586e7b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9b98d29bee539dd66e51456d193d3d586e7b4d/comments",
    "author": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6eeda99b4c607a36c6ce0b19c729d1eb94edb99"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e2830456c9e9f9d71706878c64d35193b9aac7a7",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9b98d29bee539dd66e51456d193d3d586e7b4d/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9b98d29bee539dd66e51456d193d3d586e7b4d/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=0b9b98d29bee539dd66e51456d193d3d586e7b4d",
        "patch": "@@ -9,12 +9,15 @@\n from test_framework.messages import (\n     CInv,\n     CTransaction,\n+    CTxIn,\n+    CTxOut,\n     FromHex,\n     MSG_TX,\n     MSG_TYPE_MASK,\n     MSG_WTX,\n     msg_inv,\n     msg_notfound,\n+    msg_tx,\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -255,6 +258,35 @@ def test_spurious_notfound(self):\n         self.log.info('Check that spurious notfound is ignored')\n         self.nodes[0].p2ps[0].send_message(msg_notfound(vec=[CInv(MSG_TX, 1)]))\n \n+    def test_unrequested_tx(self):\n+        self.log.info(\"Check that nodes don't process unrequested txn\")\n+        self.restart_node(0)\n+\n+        unrequested_tx = CTransaction()\n+        unrequested_tx.vin.append(CTxIn())\n+\n+        unrequested_tx.vout.append(CTxOut())\n+        unrequested_tx.calc_sha256()\n+\n+        peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer.send_message(msg_tx(unrequested_tx))\n+        with self.nodes[0].assert_debug_log(expected_msgs=['unrequested transaction from peer=0']):\n+            peer.sync_with_ping()\n+            assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        peer.peer_disconnect()\n+        peer.wait_for_disconnect()\n+\n+        self.log.info(\"Check that nodes process unrequested txn with relay permission \")\n+        self.restart_node(0, extra_args=['-whitelist=relay@127.0.0.1'])\n+\n+        peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer.send_message(msg_tx(unrequested_tx))\n+        with self.nodes[0].assert_debug_log(expected_msgs=['from peer=0 was not accepted: scriptpubkey']):\n+            peer.sync_with_ping()\n+            assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        peer.peer_disconnect()\n+        peer.wait_for_disconnect()\n+\n     def run_test(self):\n         # Run tests without mocktime that only need one peer-connection first, to avoid restarting the nodes\n         self.test_expiry_fallback()\n@@ -266,6 +298,7 @@ def run_test(self):\n         self.test_txid_inv_delay(True)\n         self.test_large_inv_batch()\n         self.test_spurious_notfound()\n+        self.test_unrequested_tx()\n \n         # Run each test against new bitcoind instances, as setting mocktimes has long-term effects on when\n         # the next trickle relay event happens."
      }
    ]
  },
  {
    "sha": "63103daf80352fa48b671a66b624a15d0c00d2f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzEwM2RhZjgwMzUyZmE0OGI2NzFhNjZiNjI0YTE1ZDBjMDBkMmY3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-09T13:30:53Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "antoine.riard@gmail.com",
        "date": "2021-02-18T13:45:12Z"
      },
      "message": "Add a release note for unrequested transactions processing stop",
      "tree": {
        "sha": "a44b67d265881b3bf20e0cac3ad07d2521661595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a44b67d265881b3bf20e0cac3ad07d2521661595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63103daf80352fa48b671a66b624a15d0c00d2f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63103daf80352fa48b671a66b624a15d0c00d2f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63103daf80352fa48b671a66b624a15d0c00d2f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63103daf80352fa48b671a66b624a15d0c00d2f7/comments",
    "author": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9b98d29bee539dd66e51456d193d3d586e7b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9b98d29bee539dd66e51456d193d3d586e7b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9b98d29bee539dd66e51456d193d3d586e7b4d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a074a5c7554f2927b9ade9b0bc8a45ff42dda10e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63103daf80352fa48b671a66b624a15d0c00d2f7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63103daf80352fa48b671a66b624a15d0c00d2f7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=63103daf80352fa48b671a66b624a15d0c00d2f7",
        "patch": "@@ -61,6 +61,14 @@ Notable changes\n P2P and network changes\n -----------------------\n \n+- This release changes the behavior around processing of unrequested transactions.\n+  Previously, a transaction message was always submitted for processing, even if a\n+  getdata for this identifier have not been previously issued. Henceforth, such\n+  unrequested transaction will be rejected without any processing to mitigate about\n+  DoS risks. Bitcoin clients on the network relying on unannounced transaction broadcast\n+  should adapt their tx-relay to the compliant tx-request sequence. Peers might be\n+  authorized to bypass this check with the PF_RELAY permission. (#20277)\n+\n Updated RPCs\n ------------\n - `getpeerinfo` no longer returns the following fields: `addnode`, `banscore`,"
      }
    ]
  }
]