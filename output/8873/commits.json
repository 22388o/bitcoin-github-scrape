[
  {
    "sha": "18dacf9bd25154e184b097ee4e8f786d9be25637",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGRhY2Y5YmQyNTE1NGUxODRiMDk3ZWU0ZThmNzg2ZDliZTI1NjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-10-02T21:38:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:59:05Z"
      },
      "message": "Add microbenchmarks to profile more code paths.\n\nThe new benchmarks exercise script validation, CCoinsDBView caching,\nmempool eviction, and wallet coin selection code.\n\nAll of the benchmarks added here are extremely simple and don't\nnecessarily mirror common real world conditions or interesting\nperformance edge cases. Details about how specific benchmarks can be\nimproved are noted in comments.\n\nGithub-Issue: #7883",
      "tree": {
        "sha": "41f1a7a0d66a5183bf0594b508a09681ac04f001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41f1a7a0d66a5183bf0594b508a09681ac04f001"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18dacf9bd25154e184b097ee4e8f786d9be25637",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dacf9bd25154e184b097ee4e8f786d9be25637",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18dacf9bd25154e184b097ee4e8f786d9be25637",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dacf9bd25154e184b097ee4e8f786d9be25637/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 373,
      "additions": 372,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c83432e91a600cd8ec53c3d657e0e979b1c34492",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -14,6 +14,9 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n+  bench/ccoins_caching.cpp \\\n+  bench/mempool_eviction.cpp \\\n+  bench/verify_script.cpp \\\n   bench/base58.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n@@ -34,7 +37,8 @@ bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_WALLET\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "1e8e3d462fc157a33d4b3644d326dedbd83473eb",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"coins.h\"\n+#include \"policy/policy.h\"\n+#include \"wallet/crypter.h\"\n+\n+#include <vector>\n+\n+// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n+//\n+// Helper: create two dummy transactions, each with\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// paid to a TX_PUBKEYHASH.\n+//\n+static std::vector<CMutableTransaction>\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+{\n+    std::vector<CMutableTransaction> dummyTransactions;\n+    dummyTransactions.resize(2);\n+\n+    // Add some keys to the keystore:\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(i % 2);\n+        keystoreRet.AddKey(key[i]);\n+    }\n+\n+    // Create some dummy input transactions\n+    dummyTransactions[0].vout.resize(2);\n+    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n+\n+    dummyTransactions[1].vout.resize(2);\n+    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n+\n+    return dummyTransactions;\n+}\n+\n+// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n+// laanwj, \"replicating the actual usage patterns of the client is hard though,\n+// many times micro-benchmarks of the database showed completely different\n+// characteristics than e.g. reindex timings. But that's not a requirement of\n+// every benchmark.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CCoinsCaching(benchmark::State& state)\n+{\n+    CBasicKeyStore keystore;\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+\n+    CMutableTransaction t1;\n+    t1.vin.resize(3);\n+    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    t1.vin[0].prevout.n = 1;\n+    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[1].prevout.n = 0;\n+    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[2].prevout.n = 1;\n+    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vout.resize(2);\n+    t1.vout[0].nValue = 90 * CENT;\n+    t1.vout[0].scriptPubKey << OP_1;\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        bool success = AreInputsStandard(t1, coins);\n+        assert(success);\n+        CAmount value = coins.GetValueIn(t1);\n+        assert(value == (50 + 21 + 22) * CENT);\n+    }\n+}\n+\n+BENCHMARK(CCoinsCaching);"
      },
      {
        "sha": "7091ee3e1143534bc70d9a099079b01fa51cce4d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"wallet/wallet.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <set>\n+\n+using namespace std;\n+\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput>& vCoins)\n+{\n+    int nInput = 0;\n+\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+\n+    int nAge = 6 * 24;\n+    COutput output(wtx, nInput, nAge, true, true);\n+    vCoins.push_back(output);\n+}\n+\n+// Simple benchmark for wallet coin selection. Note that it maybe be necessary\n+// to build up more complicated scenarios in order to get meaningful\n+// measurements of performance. From laanwj, \"Wallet coin selection is probably\n+// the hardest, as you need a wider selection of scenarios, just testing the\n+// same one over and over isn't too useful. Generating random isn't useful\n+// either for measurements.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CoinSelection(benchmark::State& state)\n+{\n+    const CWallet wallet;\n+    vector<COutput> vCoins;\n+    LOCK(wallet.cs_wallet);\n+\n+    while (state.KeepRunning()) {\n+        // Empty wallet.\n+        BOOST_FOREACH (COutput output, vCoins)\n+            delete output.tx;\n+        vCoins.clear();\n+\n+        // Add coins.\n+        for (int i = 0; i < 1000; i++)\n+            addCoin(1000 * COIN, wallet, vCoins);\n+        addCoin(3 * COIN, wallet, vCoins);\n+\n+        set<pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        CAmount nValueRet;\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, vCoins, setCoinsRet, nValueRet);\n+        assert(success);\n+        assert(nValueRet == 1003 * COIN);\n+        assert(setCoinsRet.size() == 2);\n+    }\n+}\n+\n+BENCHMARK(CoinSelection);"
      },
      {
        "sha": "0ae69c75fcaeb3326d648e7633dbf6209d5c2aa8",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"policy/policy.h\"\n+#include \"txmempool.h\"\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n+{\n+    int64_t nTime = 0;\n+    double dPriority = 10.0;\n+    unsigned int nHeight = 1;\n+    bool spendsCoinbase = false;\n+    unsigned int sigOpCost = 4;\n+    LockPoints lp;\n+    pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n+                                        tx, nFee, nTime, dPriority, nHeight, pool.HasNoInputsOf(tx),\n+                                        tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n+}\n+\n+// Right now this is only testing eviction performance in an extremely small\n+// mempool. Code needs to be written to generate a much wider variety of\n+// unique transactions for a more meaningful performance measurement.\n+static void MempoolEviction(benchmark::State& state)\n+{\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n+\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    while (state.KeepRunning()) {\n+        AddTx(tx1, 10000LL, pool);\n+        AddTx(tx2, 5000LL, pool);\n+        AddTx(tx3, 20000LL, pool);\n+        AddTx(tx4, 7000LL, pool);\n+        AddTx(tx5, 1000LL, pool);\n+        AddTx(tx6, 1100LL, pool);\n+        AddTx(tx7, 9000LL, pool);\n+        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n+    }\n+}\n+\n+BENCHMARK(MempoolEviction);"
      },
      {
        "sha": "dc3940cdbdd992052ab07fe7ef3f50ccee7262f9",
        "filename": "src/bench/verify_script.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"key.h\"\n+#if defined(HAVE_CONSENSUS_LIB)\n+#include \"script/bitcoinconsensus.h\"\n+#endif\n+#include \"script/script.h\"\n+#include \"script/sign.h\"\n+#include \"streams.h\"\n+\n+// FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = 1;\n+\n+    return txCredit;\n+}\n+\n+// FIXME: Dedup with BuildSpendingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.wit.vtxinwit.resize(1);\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n+\n+    return txSpend;\n+}\n+\n+// Microbenchmark for verification of a basic P2WPKH script. Can be easily\n+// modified to measure performance of other types of scripts.\n+static void VerifyScriptBench(benchmark::State& state)\n+{\n+    const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n+    const int witnessversion = 0;\n+\n+    // Keypair.\n+    CKey key;\n+    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n+    key.Set(vchKey, vchKey + 32, false);\n+    CPubKey pubkey = key.GetPubKey();\n+    uint160 pubkeyHash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());\n+\n+    // Script.\n+    CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);\n+    CScript scriptSig;\n+    CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    CTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n+    CScriptWitness& witness = txSpend.wit.vtxinwit[0].scriptWitness;\n+    witness.stack.emplace_back();\n+    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SIGVERSION_WITNESS_V0), witness.stack.back(), 0);\n+    witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n+    witness.stack.push_back(ToByteVector(pubkey));\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        ScriptError err;\n+        bool success = VerifyScript(\n+            txSpend.vin[0].scriptSig,\n+            txCredit.vout[0].scriptPubKey,\n+            &txSpend.wit.vtxinwit[0].scriptWitness,\n+            flags,\n+            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue),\n+            &err);\n+        assert(err == SCRIPT_ERR_OK);\n+        assert(success);\n+\n+#if defined(HAVE_CONSENSUS_LIB)\n+        CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+        stream << txSpend;\n+        int csuccess = bitcoinconsensus_verify_script_with_amount(\n+            begin_ptr(txCredit.vout[0].scriptPubKey),\n+            txCredit.vout[0].scriptPubKey.size(),\n+            txCredit.vout[0].nValue,\n+            (const unsigned char*)&stream[0], stream.size(), 0, flags, nullptr);\n+        assert(csuccess == 1);\n+#endif\n+    }\n+}\n+\n+BENCHMARK(VerifyScriptBench);"
      }
    ]
  }
]