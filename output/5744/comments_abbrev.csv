jtimon,2015-02-13T19:55:56Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-74316191,74316191,
dexX7,2015-03-04T22:07:43Z,"Hey @jonasschnelli,\n\nthis is a very interesting idea. I faced some issues (segfaults and std::bad_alloc exceptions), probably related to object lifetime, and ended up passing `const CRPCCommand* command`, where the pointer is maintaned externally, which seemed more intuitive.\n\nFrom a practical perspective, value conversion is also a relevant topic, and editing `vRPCConvertParams` in `rpcclient",https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-77260540,77260540,
jonasschnelli,2015-03-05T08:14:53Z,@dexX7 Indeed. The `vRPCConvertParams` needs also modularization. I'll check your implementation approach and will try to update this PR.\n,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-77323285,77323285,
jonasschnelli,2015-03-06T10:03:03Z,@dexX7 i played around with your `json_conversion.h` implementation and it seems to be useful. How would you solution to the call `RPCTypeCheck` look like? I assume when skipping the `vRPCConvertParams` conversion the type check no longer works?\n\nWe could get rid of the conversion via `vRPCConvertParams` but this would generate some changes (problem of testing/reviewing). Maybe the `json_convers,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-77534696,77534696,
dexX7,2015-03-07T09:51:19Z,"Good point, I didn't really intend to replace the old system, but it was more like a quick workaround-ish solution, although I have to admit, I don't like having a conversion table _and_ still be required specify data types (e.g. `get_str()`, `get_int()`, ...).\n\nI pushed three more conservative and similar, but slightly different each, approaches:\n- [modularization-json-conversion-3](https://gi",https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-77681917,77681917,
jonasschnelli,2015-03-13T15:53:56Z,pulled in @dexX7 conversion table work. Fixed code nits mentioned by @sipa .\n\nA flexible RPC interface is required if we like to add capability to switch on/off certain modules.\nIt's also totally required to factor out/decouple the wallet from the rest of the code.\nIt could be a intermediate stop in case of a new RPC implementation. But for now i think this is a feasible way.\nReviewing this m,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-79070084,79070084,
dexX7,2015-03-13T19:14:36Z,"Adding new commands is still an issue for me, if the scope is left. For example: https://gist.github.com/dexX7/32accc4b04cb2e7dd496\n",https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-79268922,79268922,
jonasschnelli,2015-03-13T21:03:59Z,@dexX7 Thanks for the response. Yes. Bad memory management. Will have a look at it.\n,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-79395099,79395099,
jonasschnelli,2015-03-14T08:25:54Z,@dexX7 i reviewed you gist https://gist.github.com/dexX7/32accc4b04cb2e7dd496. I would say the PR is acting correct.\nWhen adding a rpc command over the new call `AddOrReplaceCommand()` you have to make sure that your `CRPCCommand` struct stays in memory. In your gist you create your CRPCCommand within your function `void addTestCommand()` but then test it in another block. `const CRPCCommand newC,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-80137653,80137653,
sipa,2015-06-16T15:05:01Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-112463254,112463254,
jonasschnelli,2015-06-16T15:23:58Z,@sipa: i think this solution is more flexible (and also less risky): https://github.com/bitcoin/bitcoin/pull/6006. Closing this.\n,https://github.com/bitcoin/bitcoin/pull/5744#issuecomment-112469502,112469502,
sipa,2015-02-13T19:57:32Z,Why is this lookup needed? You can just overwrite using the line you have below?\n,https://github.com/bitcoin/bitcoin/pull/5744#discussion_r24691775,24691775,src/rpcserver.cpp
sipa,2015-02-13T20:00:41Z,"map is also not a hashmap, but a treemap (but that shouldn't really matter).\n",https://github.com/bitcoin/bitcoin/pull/5744#discussion_r24692035,24692035,src/rpcserver.cpp
jonasschnelli,2015-02-13T20:04:26Z,Hmm... yes. Should be sufficient to just overwrite. Will change this.\n,https://github.com/bitcoin/bitcoin/pull/5744#discussion_r24692339,24692339,src/rpcserver.cpp
dexX7,2015-03-14T11:49:25Z,"The devil is in the details here, I think. :) `const CRPCCommand command` creates _copy_ of the original command, and the caller can maintain the original for the whole execution lifetime, but it would still break (try: the [updated gist](https://gist.github.com/dexX7/32accc4b04cb2e7dd496)).\n\nIt's a slightly different story with `RPCAddConversion(const std::string& method, int idx)`, because the",https://github.com/bitcoin/bitcoin/pull/5744#discussion_r26437309,26437309,src/rpcserver.h
jonasschnelli,2015-03-14T12:05:36Z,You are totally right. It must be `const CRPCCommand& command` (passing pointers). I just pulled in your commit.\nI'm also aware that this pointer-passing-approche is not intuitive. But i'm still trying to keep the changeset-size at minimum. I also think a rpc calls will be added when the app starts (modules get loaded) then they stay alive until the app detects a shutdown so the lifetime manageme,https://github.com/bitcoin/bitcoin/pull/5744#discussion_r26437380,26437380,src/rpcserver.h
