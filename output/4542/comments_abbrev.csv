kazcw,2014-07-16T20:48:22Z,"My concern with remembering some rejections that currently may change is that it offers an easy avenue to blind a particular node to a double-spend: just send it the tx to be hidden at a time when it will reject-cache that tx, and that tx will effectively be invisible to the node until/unless it's included in a block.\n\nIf this is not considered an important risk, I think we could also reject pre",https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-49224692,49224692,
laanwj,2014-07-17T07:16:23Z,I like the idea to not re-request transactions that are seen as misbehaviour.\n,https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-49266721,49266721,
kazcw,2014-07-20T22:21:43Z,"If we do start persisting rejections that would otherwise not be permanent under certain circumstances, it seems like we'd ought to implement a way to still keep track of them for purposes of double-spend monitoring.\n\nI'm going to include just the minimal behavioral changes to fix the original issue in this PR, caching only rejections that definitely would have been rejected again if they were r",https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-49561571,49561571,
BitcoinPullTester,2014-07-20T22:40:24Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4542_edde2dda82320e4660bc09cefd285310b8f1318e/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-49562069,49562069,
TheBlueMatt,2014-09-09T20:11:02Z,"I dont think the network needs to concern itself with double spends. They've proven to be a PITA to try to relay and probably shouldnt be relayed as standard transactions, so I'd say ignore them for this pull.\n",https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-55026030,55026030,
rebroad,2014-09-29T00:31:12Z,@kazcw needs rebase. \n,https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-57106256,57106256,
laanwj,2015-03-24T16:50:51Z,Needs rebase (if we still want this)\n,https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-85595097,85595097,
laanwj,2015-06-10T08:16:43Z,"Closing this due to inactivity. Let me know if you start work on this again, then I'll reopen.\n",https://github.com/bitcoin/bitcoin/pull/4542#issuecomment-110646484,110646484,
sipa,2014-07-16T20:01:29Z,Don't use an assignment. Just:\n\n```\nmruset<uint256> setRejectedTx(200);\n```\n,https://github.com/bitcoin/bitcoin/pull/4542#discussion_r15023553,15023553,src/main.cpp
sipa,2014-07-16T20:19:14Z,"If we reject a transaction because of rate-limiting, I'd like that to be permanent. Otherwise you can keep retrying,\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r15024568,15024568,src/main.cpp
sipa,2014-07-16T20:20:00Z,"If inputs are spent, they should remain spent, unless in the case of a reorganization, or transactions in a block that conflict with mempool transactions that conflict with us. Do we care?\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r15024621,15024621,src/main.cpp
rebroad,2014-08-29T08:22:01Z,What does the 200 do here? Limit it to remembering 200 TXs? Why 200? Would it make more sense to remember for a certain period rather than a fixed number?\n,https://github.com/bitcoin/bitcoin/pull/4542#discussion_r16886510,16886510,src/main.cpp
kazcw,2014-08-29T09:39:07Z,"200 is arbitrary. I figured it would be large enough to handle the rate at which invalid txes would occur under ""normal"" circumstances like the wallet tx empty-vin bug. I don't think reasonable behavior is very dependent on the set size/expiration policy so long as it's in the right ballpark; it seems like returns diminish quickly beyond the cache being big enough to handle the bulk of unnecessary",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r16889293,16889293,src/main.cpp
laanwj,2014-09-25T08:58:26Z,"Having a hard upper limit is a good idea for any data structure, this avoids DoS possibilities.\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18021288,18021288,src/main.cpp
Diapolo,2014-09-29T08:40:07Z,"Nit: Should just pass a copy of a bool IMHO, I guess a pointer is bigger on some system archs even.\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18142561,18142561,src/main.cpp
laanwj,2014-09-29T11:49:54Z,"That's an _output_ parameter, passing a copy would defeat the purpose\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18148964,18148964,src/main.cpp
Diapolo,2014-09-29T11:55:59Z,"Then leave out the const, it could be a reference ;)?\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18149174,18149174,src/main.cpp
laanwj,2014-09-29T11:57:12Z,"What const? And no, it can't be a reference, because it can be 0 if you're not interested in the output (see the function).\n",https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18149213,18149213,src/main.cpp
Diapolo,2014-09-29T12:02:56Z,I was at a totally different place in my brain while posting this. You are completely right.\n,https://github.com/bitcoin/bitcoin/pull/4542#discussion_r18149417,18149417,src/main.cpp
