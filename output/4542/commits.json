[
  {
    "sha": "edde2dda82320e4660bc09cefd285310b8f1318e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGRlMmRkYTgyMzIwZTQ2NjBiYzA5Y2VmZDI4NTMxMGI4ZjEzMThl",
    "commit": {
      "author": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-14T22:53:08Z"
      },
      "committer": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-07-20T03:52:28Z"
      },
      "message": "Cache rejected tx to avoid rerequesting\n\nPreviously AlreadyHave would only prevent rerequesting transactions accepted to\nthe mempool or identified as orphans; if a transaction failed validation, it\nwould keep requesting it and validating it every time it received an inv. This\nchange adds a small mruset to remember some failed transactions.\n\nThe main benefit of this change is that if a bug like #3190 causes a peer to\nperiodically send invs for bogus transactions, we don't repeatedly getdata and\nvalidate the same transactions until we DoS-ban the peer.\n\nThis requires a new distinction between permanent failures (that are independent\nof chain state) and temporary failures; the few potentially temporary rejections\nare not cached.",
      "tree": {
        "sha": "511d107cc72ac3eac166a7ca3ddc0c2ec4536b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/511d107cc72ac3eac166a7ca3ddc0c2ec4536b03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edde2dda82320e4660bc09cefd285310b8f1318e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edde2dda82320e4660bc09cefd285310b8f1318e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edde2dda82320e4660bc09cefd285310b8f1318e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edde2dda82320e4660bc09cefd285310b8f1318e/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff1fe669d41814a4e0406243d1c081725006a735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff1fe669d41814a4e0406243d1c081725006a735",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff1fe669d41814a4e0406243d1c081725006a735"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 35,
      "deletions": 15
    },
    "files": [
      {
        "sha": "734cd4b787f269babe6058ee2053523e9bd99708",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edde2dda82320e4660bc09cefd285310b8f1318e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edde2dda82320e4660bc09cefd285310b8f1318e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=edde2dda82320e4660bc09cefd285310b8f1318e",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"init.h\"\n+#include \"mruset.h\"\n #include \"net.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n@@ -67,6 +68,8 @@ multimap<uint256, COrphanBlock*> mapOrphanBlocksByPrev;\n map<uint256, CTransaction> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n+mruset<uint256> setRejectedTx(200);\n+\n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n \n@@ -535,9 +538,12 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n \n \n-bool IsStandardTx(const CTransaction& tx, string& reason)\n+bool IsStandardTx(const CTransaction& tx, string& reason, bool* pfPermanentRet)\n {\n     AssertLockHeld(cs_main);\n+    if (pfPermanentRet)\n+        *pfPermanentRet = true;\n+\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n@@ -561,6 +567,8 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n     // can't know what timestamp the next block will have, and there aren't\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1)) {\n+        if (pfPermanentRet)\n+            *pfPermanentRet = false;\n         reason = \"non-final\";\n         return false;\n     }\n@@ -953,10 +961,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n+    bool fPermanentlyNonstandard;\n+    if (Params().RequireStandard() && !IsStandardTx(tx, reason, &fPermanentlyNonstandard))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+                         REJECT_NONSTANDARD, reason, fPermanentlyNonstandard);\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n@@ -1008,7 +1017,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n             return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\", false);\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -1052,7 +1061,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n             if (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\", false);\n \n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n         }\n@@ -1537,7 +1546,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()),\n+                                 0, \"\", false);\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1555,7 +1565,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                 if (nSpendHeight - coins.nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n                         error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins.nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\", false);\n             }\n \n             // Check for negative or overflow input values\n@@ -2410,7 +2420,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     }\n     if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n-                         REJECT_INVALID, \"bad-txns-duplicate\", true);\n+                         REJECT_INVALID, \"bad-txns-duplicate\", true, true);\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2419,12 +2429,12 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n-                         REJECT_INVALID, \"bad-blk-sigops\", true);\n+                         REJECT_INVALID, \"bad-blk-sigops\", true, true);\n \n     // Check merkle root\n     if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n-                         REJECT_INVALID, \"bad-txnmrklroot\", true);\n+                         REJECT_INVALID, \"bad-txnmrklroot\", true, true);\n \n     return true;\n }\n@@ -3401,7 +3411,8 @@ bool static AlreadyHave(const CInv& inv)\n         {\n             bool txInMap = false;\n             txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n+            bool txRejected = setRejectedTx.count(inv.hash);\n+            return txInMap || txRejected || mapOrphanTransactions.count(inv.hash) ||\n                 pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n@@ -3974,6 +3985,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                                state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n+            if (state.IsPermanent())\n+                setRejectedTx.insert(inv.hash);\n         }\n     }\n "
      },
      {
        "sha": "49f9b918ae810731b5c64376a1bd14b02617ea74",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edde2dda82320e4660bc09cefd285310b8f1318e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edde2dda82320e4660bc09cefd285310b8f1318e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=edde2dda82320e4660bc09cefd285310b8f1318e",
        "patch": "@@ -300,7 +300,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n /** Check for standard transaction types\n     @return True if all outputs (scriptPubKeys) use only standard transaction forms\n */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, bool* pfPermanent=NULL);\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n@@ -955,14 +955,17 @@ class CValidationState {\n     int nDoS;\n     std::string strRejectReason;\n     unsigned char chRejectCode;\n+    bool permanent;\n     bool corruptionPossible;\n public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), corruptionPossible(false) {}\n+    CValidationState() : mode(MODE_VALID), nDoS(0), permanent(false), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n              unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool permanentIn=true,\n              bool corruptionIn=false) {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n+        permanent = permanent || permanentIn;\n         corruptionPossible = corruptionIn;\n         if (mode == MODE_ERROR)\n             return ret;\n@@ -971,8 +974,9 @@ class CValidationState {\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\",\n+                 bool _permanent=true) {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, _permanent);\n     }\n     bool Error(std::string strRejectReasonIn=\"\") {\n         if (mode == MODE_VALID)\n@@ -1000,6 +1004,9 @@ class CValidationState {\n         }\n         return false;\n     }\n+    bool IsPermanent() const {\n+        return permanent;\n+    }\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }"
      }
    ]
  }
]