DrahtBot,2020-07-16 16:12:48,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-659515632,659515632,
vasild,2020-07-16 18:12:54,Rebased to wake up Travis,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-659583340,659583340,
troygiorshev,2020-07-17 03:43:05,"ACK eb22eeda5b37afea0649688690e04c00d5a6dbfd\n\nIf you make any changes, consider running `clang-format`.  No worries if you don't, we can always do it later in the roadmap.  Might be nice to clean up the formatting of some of the other methods here as well, now that we're touching so much of this.",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-659824665,659824665,
Saibato,2020-07-17 07:08:16,"So if i read this correct, if this is merged we narrow before even having benefit and v3 , and say an address is not routable if one flag in  CNetAddr m_net say's something else than  m_net == NET_IPV6 and skip that the Bitcoin imperative  'data decides'\n\nSo you want to change even the old ADDRv1 logic while BIP155 say's don't. hmm...\nThe way bitcoin is used in the wild is often strange and ",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-659911102,659911102,
michaelfolkson,2020-07-18 10:49:44,"Concept ACK, Approach ACK. \n\nThe [BIP](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki#specification) refers to I2P and CJDNS overlay networks and gives them their own network IDs. An I2P address is a Tor v3 address and a CJDNS address is a IPV6 address (or at least they are the same size) right? I'm just trying to understand why they warrant their own reserved network IDs in th",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-660464773,660464773,
vasild,2020-07-20 09:46:06,> The [BIP](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki#specification) refers to I2P and CJDNS overlay networks and gives them their own network IDs. An I2P address is a Tor v3 address and a CJDNS address is a IPV6 address (or at least they are the same size) right? I'm just trying to understand why they warrant their own reserved network IDs in the BIP but don't seem to be impl,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-660923972,660923972,
vasild,2020-07-20 14:19:10,Extended the `NET_INTERNAL` comment as per @Saibato's suggestion.,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661069296,661069296,
jonatack,2020-07-20 14:35:17,re-ACK 662bb25 per `git diff eb22eed 662bb25` only change is improved documentation.,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661078923,661078923,
troygiorshev,2020-07-20 15:50:22,"reACK 662bb25\n\nOnly change is in a comment.",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661123794,661123794,
Saibato,2020-07-21 08:19:01,"tyi, I will not ACK or NACK any of ADDRv2 roadmap, Since Tor v2 will be deprecated sooner or later. I will try to start a side project to morph some old legacy tunnel code code to a special general 'bitcoin-peer-address' tor or whatever  proxy wrapper, for all old nodes to have full v3 and after 2038 support, without need to softfork  This will from day one, mitigate any chainsplit or censorship. ",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661709850,661709850,
vasild,2020-07-21 13:20:36,"Just to clarify - ADDRv2/BIP155 does not involve a softfork, chainsplit or censorship. Old nodes (e.g. 0.19.1) can't have full support for TORv3 because they don't contain the code for it.",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661857276,661857276,
Saibato,2020-07-21 13:56:44,"I full support ADDRv2 and i will comment and provide review.\nAlso imo ADDRv2 its inevitable for master.\n\nMy approach aims to let old tor nodes not behind and be forced to softfork when tor v2 fades out. \n\n> can't have full support for TORv3 because they don't contain the code for it\n\nI love this cant's in software dev, because i can,\nThere is a great misconception in how MITM or sa",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661877269,661877269,
vasild,2020-07-21 17:14:39,"Coverage report of modified code: https://people.freebsd.org/~vd/pr19534_662bb25ef_coverage/\n(all modified code is covered by tests)",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-661991446,661991446,
Saibato,2020-07-22 09:00:00,"> Just to clarify - ADDRv2/BIP155 does not involve a softfork, chainsplit or censorship. Old nodes (e.g. 0.19.1) can't have full support for TORv3 because they don't contain the code for it.\n\nwow, that was really funny took,me a while to figure out the zero. is a morse placeholder. This kind of humor makes really fun and that i like so much when programing senator brains.  I almost tend to bli",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-662334186,662334186,
vasild,2020-07-27 12:42:07,"Made 2 changes as per review suggestions:\n* [Initialize](https://github.com/bitcoin/bitcoin/pull/19534#pullrequestreview-455286722) `CNetAddr::m_net` in its definition instead of in the constructor\n* [Move](https://github.com/bitcoin/bitcoin/pull/19534#pullrequestreview-455286866) the code that detects non-IPv6 addresses embedded in IPv6 to a separate method\n",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-664372275,664372275,
troygiorshev,2020-07-27 13:15:15,reACK bcfebb6d5511ad4c156868bc799831ace628a225 via `git range-diff master 64897c5 bcfebb6`,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-664389264,664389264,
vasild,2020-07-27 13:16:39,"Updated a comment to reflect that we now call `SetLegacyIPv6()` instead of `SetRaw()`, as per [suggestion](https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460873884).",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-664390090,664390090,
jonatack,2020-07-27 14:37:59,"re-ACK bcfebb6 per `git diff 662bb25 bcfebb6`, code review, debug build/tests clean, ran bitcoind.",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-664436109,664436109,
promag,2020-07-28 19:44:29,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-665239856,665239856,
laanwj,2020-07-29 11:31:01,Code review ACK bcfebb6d5511ad4c156868bc799831ace628a225,https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-665610663,665610663,
vasild,2020-07-30 15:47:39,"Thanks to everybody involved!\n\nI opened the next PR at https://github.com/bitcoin/bitcoin/pull/19628. It is the biggest one from the ADDRv2 roadmap (https://github.com/bitcoin/bitcoin/pull/19031) and is mostly (but not entirely) mechanical.\n\nAfter it follow more ""interesting"" commits :)",https://github.com/bitcoin/bitcoin/pull/19534#issuecomment-666474936,666474936,
jonatack,2020-07-18 14:56:17,"Is this code still needed in `GetNetwork()`?\n```cpp\n    if (IsInternal())\n        return NET_INTERNAL;\n```",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r456797618,456797618,src/netaddress.cpp
Saibato,2020-07-18 17:49:58,"Suggested change:\n``` Code\n/// A set of special crafted FC00/7 IPv6 addresses we use to map a string or FQDN to an IPv6 address.\n/// We uses these important fake addresses also in CAddrMan to keep track of which DNS seeds were used \n/// and how we manage buckets and peers.\n```\n With that in mind when dev  we can take special care in transit to ADDRv2 to not mess with this address realm",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r456812354,456812354,src/netaddress.h
vasild,2020-07-20 08:56:03,Good question - no. But it was not necessary before this PR either. Some good simplification can be done here even on `master`. I will see whether it is better to add a new commit to this PR or file it as a separate PR.,https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457193721,457193721,src/netaddress.cpp
vasild,2020-07-20 13:54:46,"Correction - it is needed, otherwise this test would fail:\n\nhttps://github.com/bitcoin/bitcoin/blob/476436b/src/test/netbase_tests.cpp#L45\n\nAnyway, I made some simplifications on top of this PR that remove the ""extending"" of `enum Network` with `NET_UNKNOWN` and `NET_TEREDO` and also removed `GetExtNetwork()`. To avoid distractions, I will not append those commits to this PR but would rath",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457406587,457406587,src/netaddress.cpp
jonatack,2020-07-20 14:10:13,"Thanks @vasild, looking forward to reviewing the simplifications.",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457421199,457421199,src/netaddress.cpp
vasild,2020-07-20 14:16:29,"I extended the comment, thanks!\n\nIn https://github.com/bitcoin/bitcoin/pull/19031 we drop the 6-byte `fd6b:88c0:8724` prefix from these addresses and store them in memory as `m_net=NET_INTERNAL, m_addr=...10 bytes...`. Serializing that to `addrv1` remains unchanged (we add the `fd6b:88c0:8724` prefix) and they are never serialized as `addrv2`.",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457426586,457426586,src/netaddress.h
Saibato,2020-07-20 14:34:03,"In general some of this might be optimized out by the compiler,  \nAnd i would prefer for the transition period something like this that we can refactor out when all works fine\nto an compiler and bytecode friendly version.\n\nI would prefer constructions for all those ipv6 overrides in the rest of the code to look like this\nsuggested change: \n``` Code\nif  (memcmp(ip, pchLocal, 16) == 0)",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457443302,457443302,src/netaddress.cpp
Saibato,2020-07-20 14:56:15,"Not that related here and just to your info, the follow up construction on this run in an assert failure when i made the v3 patch,\n\nThe structures need also some failure tolerance and flexibility.  \nDon;t mind if i am harsh and sometimes sarcastic, but you do here heart surgery and better not look good but beat the drum\n\nAlso to get in an out of peers and DNS seeds is somewhat unrelated ",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r457464165,457464165,src/netaddress.h
laanwj,2020-07-25 13:58:06,"Thanks for adding documentation here, it was not immediately clear to me what NET_INTERNAL was.",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460407528,460407528,src/netaddress.h
laanwj,2020-07-25 13:59:25,"Please initialize the default here instead of in the constructor\n```\n    Network m_net{NET_IPV6};\n```",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460407616,460407616,src/netaddress.h
laanwj,2020-07-25 14:01:43,"I think it would make sense to add this detection out to a separate function, e.g. `SetLegacyIPV6` then call it here and in the deserialization logic, highlighting that it does auto-detection.",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460407852,460407852,src/netaddress.cpp
vasild,2020-07-27 12:06:10,"It was unclear to me too :)\n",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460842357,460842357,src/netaddress.h
vasild,2020-07-27 12:43:28,Done: https://github.com/bitcoin/bitcoin/compare/662bb25efa0d164edace0cd2809ba85e5baf19fe..64897c5776f024662000528415315995e2a83d3c,https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460861877,460861877,src/netaddress.h
vasild,2020-07-27 12:43:40,Done: https://github.com/bitcoin/bitcoin/compare/662bb25efa0d164edace0cd2809ba85e5baf19fe..64897c5776f024662000528415315995e2a83d3c,https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460861970,460861970,src/netaddress.cpp
troygiorshev,2020-07-27 13:04:07,"Comment no longer reflects the code.\n```suggestion\n            // Use SetLegacyIPv6() so that m_net is set correctly. For example\n            // ::FFFF:0102:0304 should be set as m_net=NET_IPV4 (1.2.3.4).\n```\nOr, maybe reword to avoid writing the name of a method in a comment.",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460873884,460873884,src/netaddress.h
vasild,2020-07-27 13:13:54,Right! Updated.,https://github.com/bitcoin/bitcoin/pull/19534#discussion_r460879998,460879998,src/netaddress.h
MarcoFalke,2020-07-30 07:33:37,Any reason to pass around fixed-length data with a raw data pointer (of arbitrary length) when type safe alternatives like span or std::array (probably not applicable in this case) are available?,https://github.com/bitcoin/bitcoin/pull/19534#discussion_r462805026,462805026,src/netaddress.cpp
laanwj,2020-07-30 08:13:02,"The input has to be 16 bytes, in this case. Is there a way to enforce this in the type, for spans?\n(sure, the `[16]` doesn't do anything here either except as a signal to the programmer)",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r462826455,462826455,src/netaddress.cpp
MarcoFalke,2020-07-30 09:03:30,"Not sure, but I presumed spans could be of non-dynamic extent as well. Does this not work?\n\n```cpp\nconst std::span<uint8_t, 16>& ipv6",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r462856369,462856369,src/netaddress.cpp
vasild,2020-07-30 12:35:24,"Yes, in this case the `[16]` is just a ""signal to the programmer"". In `SetRaw()` we have a bare pointer `const uint8_t*` when calling this function.\n\nI have removed `SetRaw()` in the subsequent commit and will revisit this code.\n\nSome experiments:\n\n```cpp\nint f1(const std::span<int, 3>& p)\n{\n    return p[5]; // no warning\n}\n\nint f2(const int (&p)[3])\n{\n    return p[5]; ",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r462963789,462963789,src/netaddress.cpp
vasild,2020-07-30 15:52:42,"So, in https://github.com/bitcoin/bitcoin/pull/19628 I changed the argument to `const uint8_t (&ipv6)[ADDR_IPv6_SIZE]` mostly to make the interface clean. From 3 callers 2 need an abusive typecasts because they don't have an array (one has bare pointer (the fuzz tests) and the other has `struct in6_addr`).\n\nFeel free to comment there: https://github.com/bitcoin/bitcoin/pull/19628/files#diff-b6",https://github.com/bitcoin/bitcoin/pull/19534#discussion_r463098182,463098182,src/netaddress.cpp
