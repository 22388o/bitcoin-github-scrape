practicalswift,2018-08-15T13:46:56Z,@domob1812 Thanks for reviewing. Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-413202398,413202398,
domob1812,2018-08-18T16:31:06Z,"Thanks for the fixes, looks good to me - utACK 067409221dde450ee9ba5dd7a545d9640ed7608b.",https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-414070090,414070090,
practicalswift,2018-08-21T21:42:34Z,@ryanofsky Thanks for reviewing. Good point! Feedback now addressed. Please re-review! :-),https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-414831319,414831319,
practicalswift,2018-08-23T07:58:32Z,AppVeyor build failure seems unrelated? :-),https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-415327068,415327068,
ryanofsky,2018-08-24T16:33:45Z,"> AppVeyor build failure seems unrelated? :-)\n\nIt looks related to lack of visual c++ support for `__attribute__`. You can probably avoid it by checking for `_MSC_VER`. It's probably fine to do this in another PR, though it might be nice to get out of the way now.\n\nRelevant logs:\n\n```\nc:\projects\bitcoin\src\key_io.h(21): error C2065: 'warn_unused_result': undeclared identifier [C:\p",https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-415812921,415812921,
DrahtBot,2018-08-26T21:00:29Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14224 (Document intentional and unintentional unsigned integer overflows (wraparounds) using annotations by practicalswift)\n* #14194 (Annotate unused parameters with [[maybe_unused]] by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicti",https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-416071726,416071726,
practicalswift,2018-08-27T16:12:08Z,"@ryanofsky Updated to work with Visual C++ as well. Please re-review :-)\n\n@domob1812 Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/13971#issuecomment-416279423,416279423,
domob1812,2018-08-15T06:09:00Z,Nit: This and `validExtKey` above can be const.,https://github.com/bitcoin/bitcoin/pull/13971#discussion_r210178266,210178266,src/script/descriptor.cpp
domob1812,2018-08-15T06:10:31Z,"Why do you check `IsValid` here again?  That's already contained in the return value you added.  So either you should make it explicit in `DecodeExtKey`'s contract that the returned key is valid if `true` is returned and remove the check here (preferred for me), or you should not check the key for validity in `DecodeExtKey` and have the callers check it - but not both.",https://github.com/bitcoin/bitcoin/pull/13971#discussion_r210178439,210178439,src/script/descriptor.cpp
ryanofsky,2018-08-21T17:28:12Z,"I don't understand the style used in this part of the test. It seems like the test would be both more useful and more readable with:\n\n```c++\nBOOST_CHECK(DecodeExtKey(derive.prv, extkeyTmp) != DecodeExtPubKey(derive.prv, extpubkeyTmp));\n```\nreplaced by something like:\n\n```c++\nBOOST_CHECK_EQUAL(DecodeExtKey(derive.prv, extkeyTmp, true);\nBOOST_CHECK_EQUAL(DecodeExtPubKey(derive.prv,",https://github.com/bitcoin/bitcoin/pull/13971#discussion_r211691604,211691604,src/test/bip32_tests.cpp
luke-jr,2018-08-28T08:01:54Z,This isn't guaranteed to be valid AFAIK?,https://github.com/bitcoin/bitcoin/pull/13971#discussion_r213217554,213217554,src/attributes.h
luke-jr,2018-08-28T08:03:37Z,I think the current API is better. Just check `.IsValid()` in the caller...,https://github.com/bitcoin/bitcoin/pull/13971#discussion_r213217949,213217949,src/key_io.cpp
practicalswift,2018-08-29T07:43:53Z,"Do you have any suggestion on a more proper way to do it?\n\nFWIW this is how Chromium does it :-)\n\n```\n#undef WARN_UNUSED_RESULT\n#if defined(COMPILER_GCC) || defined(__clang__)\n#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))\n#else\n#define WARN_UNUSED_RESULT\n#endif\n```",https://github.com/bitcoin/bitcoin/pull/13971#discussion_r213575167,213575167,src/attributes.h
