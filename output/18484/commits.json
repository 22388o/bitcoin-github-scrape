[
  {
    "sha": "cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDNiMTU2OWQ5YWQ4ZTI0ZDNhMjIyYWZmNzRlMGMyNTRiYWFkZjc5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-31T17:36:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-31T22:41:52Z"
      },
      "message": "Correctly compute redeemScript from witnessScript for signrawtransaction\n\nParsePrevouts uses GetScriptForWitness on the given witnessScript\nto find the corresponding redeemScript. This is incorrect when the\nwitnessScript is either a P2PK or P2PKH script as it returns the\ncorresponding P2WPK script instead of turning the witnessScript\ninto a P2WSH script. Instead this should make the script a\nWitnessV0ScriptHash destination and get the script for that.\n\nTest cases are also added.",
      "tree": {
        "sha": "6571f3e20d4c9055f1f60f70ae72012a50978aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6571f3e20d4c9055f1f60f70ae72012a50978aa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3b1569d9ad8e24d3a222aff74e0c254baadf79/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d52ba21dfff99173abb927bc964ce7ceb711d789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52ba21dfff99173abb927bc964ce7ceb711d789",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52ba21dfff99173abb927bc964ce7ceb711d789"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 42,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7b701a2bbe5de67022b65a6a0b8a37d214411e1f",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3b1569d9ad8e24d3a222aff74e0c254baadf79/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3b1569d9ad8e24d3a222aff74e0c254baadf79/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
        "patch": "@@ -216,7 +216,7 @@ void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keyst\n                 keystore->AddCScript(script);\n                 // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n                 // This is done for redeemScript only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n-                CScript witness_output_script{GetScriptForWitness(script)};\n+                CScript witness_output_script{GetScriptForDestination(WitnessV0ScriptHash(script))};\n                 keystore->AddCScript(witness_output_script);\n \n                 if (!ws.isNull() && !rs.isNull()) {"
      },
      {
        "sha": "a34abbd41be439fc8bc76670f09f111f38349b49",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3b1569d9ad8e24d3a222aff74e0c254baadf79/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3b1569d9ad8e24d3a222aff74e0c254baadf79/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=cd3b1569d9ad8e24d3a222aff74e0c254baadf79",
        "patch": "@@ -4,10 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n+from test_framework.address import check_script, script_to_p2sh\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, hex_str_to_bytes\n+from test_framework.util import assert_equal, assert_raises_rpc_error, find_vout_for_address, hex_str_to_bytes\n from test_framework.messages import sha256\n-from test_framework.script import CScript, OP_0\n+from test_framework.script import CScript, OP_0, OP_CHECKSIG\n \n from decimal import Decimal\n \n@@ -168,6 +169,44 @@ def witness_script_test(self):\n         assert 'complete' in spending_tx_signed\n         assert_equal(spending_tx_signed['complete'], True)\n \n+        # Now try with a P2PKH script as the witnessScript\n+        embedded_addr_info = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress('', 'legacy'))\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_addr_info['address'])\n+        witness_script = embedded_addr_info['scriptPubKey']\n+        redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n+        addr = script_to_p2sh(redeem_script)\n+        script_pub_key = self.nodes[1].validateaddress(addr)['scriptPubKey']\n+        # Fund that address\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        vout = find_vout_for_address(self.nodes[0], txid, addr)\n+        self.nodes[0].generate(1)\n+        # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): Decimal(\"9.999\")})\n+        spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [{'txid': txid, 'vout': vout, 'scriptPubKey': script_pub_key, 'redeemScript': redeem_script, 'witnessScript': witness_script, 'amount': 10}])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+        self.nodes[1].sendrawtransaction(spending_tx_signed['hex'])\n+\n+        # Now try with a P2PK script as the witnessScript\n+        embedded_addr_info = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress('', 'legacy'))\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_addr_info['address'])\n+        witness_script = CScript([hex_str_to_bytes(embedded_addr_info['pubkey']), OP_CHECKSIG]).hex()\n+        redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n+        addr = script_to_p2sh(redeem_script)\n+        script_pub_key = self.nodes[1].validateaddress(addr)['scriptPubKey']\n+        # Fund that address\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        vout = find_vout_for_address(self.nodes[0], txid, addr)\n+        self.nodes[0].generate(1)\n+        # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): Decimal(\"9.999\")})\n+        spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [{'txid': txid, 'vout': vout, 'scriptPubKey': script_pub_key, 'redeemScript': redeem_script, 'witnessScript': witness_script, 'amount': 10}])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+        self.nodes[1].sendrawtransaction(spending_tx_signed['hex'])\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      }
    ]
  }
]