[
  {
    "sha": "dbb13311da38f562dc34741e818275560072bd17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmIxMzMxMWRhMzhmNTYyZGMzNDc0MWU4MTgyNzU1NjAwNzJiZDE3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-08-30T23:56:56Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-09-01T18:15:47Z"
      },
      "message": "Make prevector_tests much faster by replacing BOOST_CHECK with a simpler version.",
      "tree": {
        "sha": "65fbe8fd425826d8d17806b33d4216fe904d3ec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65fbe8fd425826d8d17806b33d4216fe904d3ec6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbb13311da38f562dc34741e818275560072bd17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb13311da38f562dc34741e818275560072bd17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb13311da38f562dc34741e818275560072bd17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb13311da38f562dc34741e818275560072bd17/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b23dbaee5b88d7237144e14eff01391e2cc201d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b23dbaee5b88d7237144e14eff01391e2cc201d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b23dbaee5b88d7237144e14eff01391e2cc201d"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 37,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b0f05be98eb87a40cb97ce72ec8c667c91940a88",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 21,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb13311da38f562dc34741e818275560072bd17/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb13311da38f562dc34741e818275560072bd17/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=dbb13311da38f562dc34741e818275560072bd17",
        "patch": "@@ -12,8 +12,18 @@\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n+#include <sstream>\n+\n+BOOST_FIXTURE_TEST_SUITE(PrevectorTests, BasicTestingSetup)\n+\n+\n+static std::ostringstream first_failure;\n+static bool failed = false;\n+\n+#define pBOOST_CHECK(v) { if (!(v)) { if (!failed) {failed=true; first_failure << \"Checking: \" << #v << \" failed.\\n\";} } }\n+\n+#define pBOOST_CHECK_EQUAL(t, v) { if ((t) != (v)) { if (!failed) {failed=true; first_failure << \"Checking: \" << #t << \" == \"<< #v << \" failed.\\n\";} } }\n \n-BOOST_FIXTURE_TEST_SUITE(PrevectorTests, TestingSetup)\n \n template<unsigned int N, typename T>\n class prevector_tester {\n@@ -29,54 +39,54 @@ class prevector_tester {\n \n     void test() {\n         const pretype& const_pre_vector = pre_vector;\n-        BOOST_CHECK_EQUAL(real_vector.size(), pre_vector.size());\n-        BOOST_CHECK_EQUAL(real_vector.empty(), pre_vector.empty());\n+        pBOOST_CHECK_EQUAL(real_vector.size(), pre_vector.size());\n+        pBOOST_CHECK_EQUAL(real_vector.empty(), pre_vector.empty());\n         for (Size s = 0; s < real_vector.size(); s++) {\n-             BOOST_CHECK(real_vector[s] == pre_vector[s]);\n-             BOOST_CHECK(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n-             BOOST_CHECK(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n-             BOOST_CHECK(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+             pBOOST_CHECK(real_vector[s] == pre_vector[s]);\n+             pBOOST_CHECK(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             pBOOST_CHECK(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             pBOOST_CHECK(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n         }\n         // BOOST_CHECK(realtype(pre_vector) == real_vector);\n-        BOOST_CHECK(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n-        BOOST_CHECK(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        pBOOST_CHECK(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        pBOOST_CHECK(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n         BOOST_FOREACH(const T& v, pre_vector) {\n-             BOOST_CHECK(v == real_vector[pos++]);\n+             pBOOST_CHECK(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n-             BOOST_CHECK(v == real_vector[--pos]);\n+             pBOOST_CHECK(v == real_vector[--pos]);\n         }\n         BOOST_FOREACH(const T& v, const_pre_vector) {\n-             BOOST_CHECK(v == real_vector[pos++]);\n+             pBOOST_CHECK(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n-             BOOST_CHECK(v == real_vector[--pos]);\n+             pBOOST_CHECK(v == real_vector[--pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);\n         CDataStream ss2(SER_DISK, 0);\n         ss1 << real_vector;\n         ss2 << pre_vector;\n-        BOOST_CHECK_EQUAL(ss1.size(), ss2.size());\n+        pBOOST_CHECK_EQUAL(ss1.size(), ss2.size());\n         for (Size s = 0; s < ss1.size(); s++) {\n-            BOOST_CHECK_EQUAL(ss1[s], ss2[s]);\n+            pBOOST_CHECK_EQUAL(ss1[s], ss2[s]);\n         }\n     }\n \n public:\n     void resize(Size s) {\n         real_vector.resize(s);\n-        BOOST_CHECK_EQUAL(real_vector.size(), s);\n+        pBOOST_CHECK_EQUAL(real_vector.size(), s);\n         pre_vector.resize(s);\n-        BOOST_CHECK_EQUAL(pre_vector.size(), s);\n+        pBOOST_CHECK_EQUAL(pre_vector.size(), s);\n         test();\n     }\n \n     void reserve(Size s) {\n         real_vector.reserve(s);\n-        BOOST_CHECK(real_vector.capacity() >= s);\n+        pBOOST_CHECK(real_vector.capacity() >= s);\n         pre_vector.reserve(s);\n-        BOOST_CHECK(pre_vector.capacity() >= s);\n+        pBOOST_CHECK(pre_vector.capacity() >= s);\n         test();\n     }\n \n@@ -159,11 +169,13 @@ class prevector_tester {\n     }\n };\n \n+\n BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n {\n-    for (int j = 0; j < 64; j++) {\n+\n+    for (int j = 0; j < 64; ++j) {\n         prevector_tester<8, int> test;\n-        for (int i = 0; i < 2048; i++) {\n+        for (int i = 0; i < 2048 && !failed; i++) {\n             int r = insecure_rand();\n             if ((r % 4) == 0) {\n                 test.insert(insecure_rand() % (test.size() + 1), insecure_rand());\n@@ -222,7 +234,11 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.swap();\n             }\n         }\n+\n     }\n+    if (failed)\n+        BOOST_CHECK_MESSAGE(false, first_failure.str());\n+\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]