[
  {
    "sha": "e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGUxOGExMDE3ZmEzZGM1ZDZlYmVkYTZlYzM1YzQyNjMzMjdkMTdj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T06:29:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T11:51:50Z"
      },
      "message": "refactoring: Check IsArgKnown() early",
      "tree": {
        "sha": "37adf99564b71a1ee197922441809a9b4d60ade6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37adf99564b71a1ee197922441809a9b4d60ade6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08OtkACgkQQQEIES5+\nqB/6VQ//eHG52uzh0cgwu1REoUqkoOLdyPhqAFiNpFovcucyk5B/gtyVIR7NtcWf\nuq6FI7AZ5dRUi1UAdY6sZZC7a3KJPR1+okL+7lhGqEJ6xX0wLFseQ4fecjZdtUwW\nH0kDfuQNw/JC8NgSnaoySkpOaHhriU5Uj8W+rHWWRUD72b6YBLvfI8mBwp63ucDn\nAmhXUpME2OOQR/8JgXpqEWCTY+zuzdHyTi287+6rg5MI4qy9IWTd4VNZ59mJxZUn\nCwTEOJ1XEoLXqQT6AKqnuSHqgq6304jTzQpk2VjGTpYTe2zL5OR9dGgv9wjkHIxT\naiLRTvP7Jaa14cpfCH2EZkOfrzaxOQpPY29TOCd+c1bnQxpvVF4DYQDY54Z7SSwd\nzPBXNjOAQ0Gd3DTaB01i3zewhUKCKqNk7jiM7xV8B7wRHRE34pil1R/Hqh8XekTF\n+zDA3iX0SqjbYKOISuD/IEJ62xspAVpB9gOQpn2TuO1bgNGsIxAD5+Vveou7O84K\nAwlLlsChGo7ok9Djg4Adu2bm7kNIXDv8eu/MplDs8KXH7ENp1aTxog0F9V/sb6+B\nUCofC5E/Oktkdb4vnfZ+kngkPulWw8C+6zTFD9Hl8DyxatAqUK3RmrWsRDPQRWCk\nOxej0J1FVnsMZTRIBsQQd7DPTDAK/IdQMdUG0JYsKjLDq/n/uyk=\n=kDuB\n-----END PGP SIGNATURE-----",
        "payload": "tree 37adf99564b71a1ee197922441809a9b4d60ade6\nparent dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564208990 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564228310 +0300\n\nrefactoring: Check IsArgKnown() early\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf4f3f86a8fd954cd25d8d70afde781c2fe24ce"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 25,
      "deletions": 19
    },
    "files": [
      {
        "sha": "f3010d06f437d07d35217e439b365ef0f4de2abb",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 19,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
        "patch": "@@ -403,20 +403,20 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n-        }\n-\n         // Check that the arg is known\n         if (!(IsSwitchChar(key[0]) && key.size() == 1)) {\n             if (!IsArgKnown(key)) {\n                 error = strprintf(\"Invalid parameter %s\", key.c_str());\n                 return false;\n             }\n         }\n+\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();\n+        } else {\n+            m_override_args[key].push_back(val);\n+        }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n@@ -434,17 +434,23 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n \n bool ArgsManager::IsArgKnown(const std::string& key) const\n {\n+    assert(key[0] == '-');\n+\n     size_t option_index = key.find('.');\n-    std::string arg_no_net;\n     if (option_index == std::string::npos) {\n-        arg_no_net = key;\n+        option_index = 1;\n     } else {\n-        arg_no_net = std::string(\"-\") + key.substr(option_index + 1, std::string::npos);\n+        ++option_index;\n     }\n+    if (key.substr(option_index, 2) == \"no\") {\n+        option_index += 2;\n+    }\n+\n+    const std::string base_arg_name = '-' + key.substr(option_index);\n \n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        if (arg_map.second.count(arg_no_net)) return true;\n+        if (arg_map.second.count(base_arg_name)) return true;\n     }\n     return false;\n }\n@@ -840,23 +846,23 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string strKey = std::string(\"-\") + option.first;\n-        std::string strValue = option.second;\n-\n-        if (InterpretNegatedOption(strKey, strValue)) {\n-            m_config_args[strKey].clear();\n-        } else {\n-            m_config_args[strKey].push_back(strValue);\n-        }\n-\n         // Check that the arg is known\n         if (!IsArgKnown(strKey)) {\n             if (!ignore_invalid_keys) {\n                 error = strprintf(\"Invalid configuration value %s\", option.first.c_str());\n                 return false;\n             } else {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n+                continue;\n             }\n         }\n+\n+        std::string strValue = option.second;\n+        if (InterpretNegatedOption(strKey, strValue)) {\n+            m_config_args[strKey].clear();\n+        } else {\n+            m_config_args[strKey].push_back(strValue);\n+        }\n     }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGQxODdkZmViMThiMDI2ZGUyMmJkNzk2MGIyYTUwYzJiOTU4ZTFh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T06:56:45Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T12:05:01Z"
      },
      "message": "Refactor InterpretNegatedOption() function\n\n- added args parameter\n- renamed to InterpretOption()\n- removed code duplication",
      "tree": {
        "sha": "9d51c6f2438e3f1912cd72921fc8ddfc6750481e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d51c6f2438e3f1912cd72921fc8ddfc6750481e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08Pe8ACgkQQQEIES5+\nqB9e3w/9GbTKdnoihbfd8kxW4SGSAQZK33T7jPlLAB2aSTri5Surc3dqaph4UjhO\nHpZhkgaDAPFFKWx4gWNiuaDUoVDP9fX60StQYa5BsSXH7p40JNDbsvPu6ahrfeHA\nUM/OcUQW+6fhA463OwCvi/ikJyncsepGYy6cS8SQ2cumDfaNsFsA5fgZZrOemtIT\nFOpdrZc4UcYogmKxPKLpKPYgKuWDBf6peiEHAyYtfqBMlTslV5zSAkWrW4K8X0DK\nfOhwD68pj4dI+9+PRkiCUVwc9/ZJ9zn9GH7OKh7SlEx793BqZ/PdIJWGb35CfiFf\nIBVonYNGufr+5JKFO6zYghji3QQDxJpf6yaDy9kBSjm2fn996e6v+WqqzfGkz7H9\nZvGzWVxFszOyuynnwaERIOBW9W5EJyOB+VE4z+c2aZ01GaTPWxRQ/o0RZkfyodZc\n+rWE2G9piaOPagEBnfUYgERqV7l3iLdcnqHQijo2uNdLsEO5WSuSP9q3WKP4HWMm\nR20P0aihLsdnwpX1J7901t0vdZyYowvfcOQ1opF6DSJtBWsHe7g6S3wnxaRHI19z\noX9TFPhofRS/ELjA6UMOTDir54A4gdlQCLPclQ6JjMW5nIhFX3BUd/eoUPt5CoP0\nB9A/WaQUW6Sj9xeaGBYcri/GMIdkSx+8lvwqm6/ftwlAjnkqFiQ=\n=SEL3\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d51c6f2438e3f1912cd72921fc8ddfc6750481e\nparent e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564210605 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564229101 +0300\n\nRefactor InterpretNegatedOption() function\n\n- added args parameter\n- renamed to InterpretOption()\n- removed code duplication\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d187dfeb18b026de22bd7960b2a50c2b958e1a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0e18a1017fa3dc5d6ebeda6ec35c4263327d17c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 13,
      "deletions": 23
    },
    "files": [
      {
        "sha": "eb3f90dcf7c7f66abeb56d3b78a0f9344fb46f54",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 23,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d187dfeb18b026de22bd7960b2a50c2b958e1a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d187dfeb18b026de22bd7960b2a50c2b958e1a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
        "patch": "@@ -268,22 +268,21 @@ class ArgsManagerHelper {\n  * This method also tracks when the -no form was supplied, and if so,\n  * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n  *\n- * If there was not a double negative, it removes the \"no\" from the key,\n- * and returns true, indicating the caller should clear the args vector\n- * to indicate a negated option.\n+ * If there was not a double negative, it removes the \"no\" from the key\n+ * and clears the args vector to indicate a negated option.\n  *\n  * If there was a double negative, it removes \"no\" from the key, sets the\n- * value to \"1\" and returns false.\n+ * value to \"1\" and pushes the key and the updated value to the args vector.\n  *\n- * If there was no \"no\", it leaves key and value untouched and returns\n- * false.\n+ * If there was no \"no\", it leaves key and value untouched and pushes them\n+ * to the args vector.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-static bool InterpretNegatedOption(std::string& key, std::string& val)\n+static void InterpretOption(std::string key, std::string val, std::map<std::string, std::vector<std::string>>& args)\n {\n     assert(key[0] == '-');\n \n@@ -294,17 +293,18 @@ static bool InterpretNegatedOption(std::string& key, std::string& val)\n         ++option_index;\n     }\n     if (key.substr(option_index, 2) == \"no\") {\n-        bool bool_val = InterpretBool(val);\n+        const bool bool_val = InterpretBool(val);\n         key.erase(option_index, 2);\n         if (!bool_val ) {\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n             val = \"1\";\n         } else {\n-            return true;\n+            args[key].clear();\n+            return;\n         }\n     }\n-    return false;\n+    args[key].push_back(val);\n }\n \n ArgsManager::ArgsManager() :\n@@ -411,12 +411,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             }\n         }\n \n-        // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n-        }\n+        InterpretOption(key, val, m_override_args);\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n@@ -845,7 +840,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        std::string strKey = std::string(\"-\") + option.first;\n+        const std::string strKey = std::string(\"-\") + option.first;\n         // Check that the arg is known\n         if (!IsArgKnown(strKey)) {\n             if (!ignore_invalid_keys) {\n@@ -857,12 +852,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n             }\n         }\n \n-        std::string strValue = option.second;\n-        if (InterpretNegatedOption(strKey, strValue)) {\n-            m_config_args[strKey].clear();\n-        } else {\n-            m_config_args[strKey].push_back(strValue);\n-        }\n+        InterpretOption(strKey, option.second, m_config_args);\n     }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "265c1b58d89b7b6fb30468ba402d7f75cc59a510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjVjMWI1OGQ4OWI3YjZmYjMwNDY4YmE0MDJkN2Y3NWNjNTlhNTEw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T07:19:53Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T12:05:14Z"
      },
      "message": "Add Flags enum to ArgsManager",
      "tree": {
        "sha": "af29b6ddde03bfc975825c67d6f42f990a90c940",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af29b6ddde03bfc975825c67d6f42f990a90c940"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/265c1b58d89b7b6fb30468ba402d7f75cc59a510",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08PfoACgkQQQEIES5+\nqB8goxAAva67AgRWcTkBjphjAQhI3CKZDo7HDqVwfCJ6jwSwyghvzLZzMb52odbf\nqRL6eMiBNL/sRcspL6tYrFTWwkzffYXTVKx+04xXW/ywF5LKqWHM5i+F/VH9Vfm7\nB7bjt0kiT4Kssc4EkknJ7hWi+JP7iDp18ZPvvs5RMddlT4SikXVyquEDmXpFfXpJ\n9VYU7DH30co5uOrGVBONCfzJBDYACLZVPICVrxtlgtvI/graTx4Jl/pV5aTWlk59\nMhAxpyTSujB1QvbSefZPd8L9wz1CJJt+/sjpOups9TqtZpGlG+ByjKov42k36e8B\n3m7pGl00pvd+7e1XKOL2Mcz1Phj1znzGYNSMWkQDR5zR4+IC//b1yBHGF/3PoZeh\ngOJJe+zgwzK9eAtmm3wVvOmIT+K7wQFTy3guGtFWZkJV4tYi30hoV7sfV5AgiD6H\n4qGslttsumxTzFL/Xb/nuleMRsFo1ZxX8Wogu1ECQjV7GZ48HZrhfhpkhQ2QYTAA\n9QS6SuOIXwxHI8PZBBH7TnQKyU2dcNw9NbDrj221BhNMs+V/y5U/idBeUpKClxEy\nexg2Mkxf2Ssff3sjmK0hZq5l/bFZsdpyQQDt3qjzoeL2bxCD6jDTivWb+vvgt9i6\nCutgqASKlQ2QZTKuKxrHd98AJo84fNTMd8NA4rNXvUawRlITvZ8=\n=R9Ks\n-----END PGP SIGNATURE-----",
        "payload": "tree af29b6ddde03bfc975825c67d6f42f990a90c940\nparent e0d187dfeb18b026de22bd7960b2a50c2b958e1a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564211993 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564229114 +0300\n\nAdd Flags enum to ArgsManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265c1b58d89b7b6fb30468ba402d7f75cc59a510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/265c1b58d89b7b6fb30468ba402d7f75cc59a510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265c1b58d89b7b6fb30468ba402d7f75cc59a510/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d187dfeb18b026de22bd7960b2a50c2b958e1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d187dfeb18b026de22bd7960b2a50c2b958e1a"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "155809c2205f1911c10178592fb8caaabc76eee9",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/265c1b58d89b7b6fb30468ba402d7f75cc59a510/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/265c1b58d89b7b6fb30468ba402d7f75cc59a510/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=265c1b58d89b7b6fb30468ba402d7f75cc59a510",
        "patch": "@@ -549,7 +549,7 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, const\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg(name.substr(eq_index, name.size() - eq_index), help, debug_only));\n+    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, ArgsManager::NONE, debug_only});\n     assert(ret.second); // Make sure an insertion actually happened\n }\n "
      },
      {
        "sha": "27b364a5e26ac8e0ecde5909d0748be496d72ebe",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/265c1b58d89b7b6fb30468ba402d7f75cc59a510/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/265c1b58d89b7b6fb30468ba402d7f75cc59a510/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=265c1b58d89b7b6fb30468ba402d7f75cc59a510",
        "patch": "@@ -127,16 +127,32 @@ struct SectionInfo\n \n class ArgsManager\n {\n+public:\n+    enum Flags {\n+        NONE = 0x00,\n+        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n+        ALLOW_BOOL = 0x01,\n+        ALLOW_INT = 0x02,\n+        ALLOW_STRING = 0x04,\n+        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        DEBUG_ONLY = 0x100,\n+        /* Some options would cause cross-contamination if values for\n+         * mainnet were used while running on regtest/testnet (or vice-versa).\n+         * Setting them as NETWORK_ONLY ensures that sharing a config file\n+         * between mainnet and regtest/testnet won't cause problems due to these\n+         * parameters by accident. */\n+        NETWORK_ONLY = 0x200,\n+    };\n+\n protected:\n     friend class ArgsManagerHelper;\n \n     struct Arg\n     {\n         std::string m_help_param;\n         std::string m_help_text;\n+        unsigned int m_flags;\n         bool m_debug_only;\n-\n-        Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};\n     };\n \n     mutable CCriticalSection cs_args;"
      }
    ]
  },
  {
    "sha": "1b4b9422cad28d1bead24ff5fd472536954cfaf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjRiOTQyMmNhZDI4ZDFiZWFkMjRmZjVmZDQ3MjUzNjk1NGNmYWY5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T07:48:25Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T12:05:14Z"
      },
      "message": "scripted-diff: Use Flags enum in AddArg()\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/const bool debug_only,/unsigned int flags, &/' src/util/system.h src/util/system.cpp\nsed -i -E 's/(true|false), OptionsCategory::/ArgsManager::ALLOW_ANY, &/' $(git grep --files-with-matches 'AddArg(' src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "32600f1aff34a01617d445fd598fb1b15099bf2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32600f1aff34a01617d445fd598fb1b15099bf2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b4b9422cad28d1bead24ff5fd472536954cfaf9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08PfoACgkQQQEIES5+\nqB/3mhAAra3UyKBY7B0Ih2dZDrOn8YRIeqKAjSMd0rOHxvvf3HvH2xNAJq/X8D8s\nxspswVqPaxu6x8KJmgtPEZftIqSXnyCVqXZiaXkPgTh/AU1uxv5uWWzuaUjLNAMO\n46bEKp4N3yNsGEMH0xffJjDEmPjb3EaH/suYEcWa95Hmi+/sqY7r9ePs4yN8yoBQ\nVgI6o7YJIw1Y/+Nx1vxDHUWyuo/EUjqndD+lfzSuCNjb4AjZlivFYtRr8y7j+Svq\n+EDKzaM4AxOJqKcgb8V+a/yzga85Ty7DUq9rtRw4XLuK1qx/sX3vZwwdhg5/lv5f\nMgSnXD2OAWzEE3ZPhGE5+MBUBX0IbXDaJ4nWwNAPBsVyVaFIY2PpXqCeAAMzsJyo\n25MMPsAYHU1btcgaOcWv0+ZgkDoIemYcY2zhoTraI5p06npEBUYeR21uKstoBAQ2\n5+btsTIAZNvaCn5Y8ND50zDr6NVn0bBGoZy2NeYygTLAPQzfQ/0Q5mDaU90eBwsW\nsYKGUKQzprWWDEs13jaLUEbk0CoX3qG93eXkKpiLzwY58nc2+Mj8jUBxzoi7FUy1\nzCNsWKc+RBw3OcxUCWwpJOJQ6NTTblUS6o2saMyLMGXoafyW1Hy5/MR/rcLC5TVq\nZfhiHdcKVBg/y6YuavIRG0YjUr1V9l6IxFqtibN4faQUeSmbYAI=\n=WImk\n-----END PGP SIGNATURE-----",
        "payload": "tree 32600f1aff34a01617d445fd598fb1b15099bf2e\nparent 265c1b58d89b7b6fb30468ba402d7f75cc59a510\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564213705 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564229114 +0300\n\nscripted-diff: Use Flags enum in AddArg()\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/const bool debug_only,/unsigned int flags, &/' src/util/system.h src/util/system.cpp\nsed -i -E 's/(true|false), OptionsCategory::/ArgsManager::ALLOW_ANY, &/' $(git grep --files-with-matches 'AddArg(' src)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4b9422cad28d1bead24ff5fd472536954cfaf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4b9422cad28d1bead24ff5fd472536954cfaf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4b9422cad28d1bead24ff5fd472536954cfaf9/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "265c1b58d89b7b6fb30468ba402d7f75cc59a510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265c1b58d89b7b6fb30468ba402d7f75cc59a510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/265c1b58d89b7b6fb30468ba402d7f75cc59a510"
      }
    ],
    "stats": {
      "total": 438,
      "additions": 219,
      "deletions": 219
    },
    "files": [
      {
        "sha": "d243bc35eec8d40b73197ad32e9980d9a51230ad",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -21,14 +21,14 @@ static void SetupBenchArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n }\n \n int main(int argc, char** argv)"
      },
      {
        "sha": "e935bed10c58e379dab91bcc62b653831bb65fba",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -43,22 +43,22 @@ static void SetupCliArgs()\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n-    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n }\n \n /** libevent event log callback */"
      },
      {
        "sha": "b24e9e0a39225bb5dad70b8583f50cff1c78a866",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -40,36 +40,36 @@ static void SetupBitcoinTxArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n         \"This command requires JSON registers:\"\n         \"prevtxs=JSON object, \"\n         \"privatekeys=JSON object. \"\n-        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", false, OptionsCategory::COMMANDS);\n+        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n \n-    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n-    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, false, OptionsCategory::REGISTER_COMMANDS);\n }\n \n //"
      },
      {
        "sha": "bbe5d84123867b3028b6512440d68943a0c0075f",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -24,13 +24,13 @@ static void SetupWalletToolArgs()\n     SetupHelpOptions(gArgs);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n \n-    gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "d161a4700a3507fb1dbc7d1d65c2b7f39b31ef56",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -18,9 +18,9 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-                                   \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n+                                   \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY, true, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY, true, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "b13aea57e134464d62638c8a77aae349b9234efd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 128,
        "deletions": 128,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -338,7 +338,7 @@ static void OnRPCStopped()\n void SetupServerArgs()\n {\n     SetupHelpOptions(gArgs);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST); // server-only for now\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST); // server-only for now\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -353,103 +353,103 @@ void SetupServerArgs()\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", false, OptionsCategory::OPTIONS);\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n-    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blockfilterindex=<type>\",\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n-                 false, OptionsCategory::OPTIONS);\n-\n-    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), true, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", false, OptionsCategory::CONNECTION);\n+                 ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, true, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n #else\n-    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n #endif\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n-        \" Whitelisted peers cannot be DoS banned\", false, OptionsCategory::CONNECTION);\n+        \" Whitelisted peers cannot be DoS banned\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n@@ -461,76 +461,76 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n-    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n         \"level 0 reads the blocks from disk, \"\n         \"level 1 verifies block validity, \"\n         \"level 2 verifies undo data, \"\n         \"level 3 checks disconnection of tip blocks, \"\n         \"and level 4 tries to reconnect the blocks, \"\n         \"each level includes the checks of the previous levels \"\n-        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for the block tree, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for the block tree, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n+        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n-\n-\n-    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n-\n-    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY, true, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY, true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY, true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n \n #if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n #endif"
      },
      {
        "sha": "cc9523fe6b986b7f18e4be117f4cb2e173b31344",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -399,15 +399,15 @@ WId BitcoinApplication::getMainWinId() const\n static void SetupUIArgs()\n {\n #if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), ArgsManager::ALLOW_ANY, true, OptionsCategory::GUI);\n #endif\n-    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-min\", \"Start minimized\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY, true, OptionsCategory::GUI);\n }\n \n int GuiMain(int argc, char* argv[])"
      },
      {
        "sha": "82eb3eeec045fdb60fe001886e6b83957ee65416",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -36,7 +36,7 @@ static void SetupArgs(const std::vector<std::string>& args)\n {\n     gArgs.ClearArgs();\n     for (const std::string& arg : args) {\n-        gArgs.AddArg(arg, \"\", false, OptionsCategory::OPTIONS);\n+        gArgs.AddArg(arg, \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     }\n }\n "
      },
      {
        "sha": "d154cd6c31e774a591578c2f57187f9d53b7ca1f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -157,7 +157,7 @@ struct TestArgsManager : public ArgsManager\n     void SetupArgs(int argv, const char* args[])\n     {\n         for (int i = 0; i < argv; ++i) {\n-            AddArg(args[i], \"\", false, OptionsCategory::OPTIONS);\n+            AddArg(args[i], \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n         }\n     }\n     using ArgsManager::ReadConfigStream;\n@@ -682,7 +682,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n-        parser.AddArg(key, name, false, OptionsCategory::OPTIONS);\n+        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n \n         auto args = GetValues(arg_actions, section, name, \"a\");\n@@ -809,8 +809,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n         TestArgsManager parser;\n         LOCK(parser.cs_args);\n-        parser.AddArg(\"-regtest\", \"regtest\", false, OptionsCategory::OPTIONS);\n-        parser.AddArg(\"-testnet\", \"testnet\", false, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n \n         auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n                                               action == DISABLE_TEST ? \"-testnet=0\"   :"
      },
      {
        "sha": "c80536ec41a272449a94a29aa69969aff33d03e7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -539,7 +539,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n-void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+void ArgsManager::AddArg(const std::string& name, const std::string& help, unsigned int flags, const bool debug_only, const OptionsCategory& cat)\n {\n     // Split arg name from its help param\n     size_t eq_index = name.find('=');\n@@ -556,7 +556,7 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, const\n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n {\n     for (const std::string& name : names) {\n-        AddArg(name, \"\", false, OptionsCategory::HIDDEN);\n+        AddArg(name, \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::HIDDEN);\n     }\n }\n \n@@ -636,7 +636,7 @@ bool HelpRequested(const ArgsManager& args)\n \n void SetupHelpOptions(ArgsManager& args)\n {\n-    args.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    args.AddArg(\"-?\", \"Print this help message and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n     args.AddHiddenArgs({\"-h\", \"-help\"});\n }\n "
      },
      {
        "sha": "0ec09e7564170fad0237495e8433d4c03dd28d1e",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -272,7 +272,7 @@ class ArgsManager\n     /**\n      * Add argument\n      */\n-    void AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat);\n+    void AddArg(const std::string& name, const std::string& help, unsigned int flags, const bool debug_only, const OptionsCategory& cat);\n \n     /**\n      * Add many hidden arguments"
      },
      {
        "sha": "1821e8152d94b0f9a6a072b0728cad2c129f5377",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4b9422cad28d1bead24ff5fd472536954cfaf9/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "patch": "@@ -34,41 +34,41 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n void WalletInit::AddWalletOptions() const\n {\n-    gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n-                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), false, OptionsCategory::WALLET);\n+                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\",\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), false, OptionsCategory::WALLET);\n+                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), false, OptionsCategory::WALLET);\n+                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n-                                                            CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", false, OptionsCategory::WALLET);\n+                                                            CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n #endif\n-    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n-                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", false, OptionsCategory::WALLET);\n+                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n \n-    gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n }\n \n bool WalletInit::ParameterInteraction() const"
      }
    ]
  },
  {
    "sha": "fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjRiOWY5ZTNiNDMzZDg4NDg4MzJlMmMyNjg2Y2Y3YjFmMjEyYTVl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T09:06:32Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T12:05:14Z"
      },
      "message": "scripted-diff: Use ArgsManager::DEBUG_ONLY flag\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/unsigned int flags, const bool debug_only,/unsigned int flags,/' src/util/system.h src/util/system.cpp\nsed -i 's/ArgsManager::NONE, debug_only/flags, false/' src/util/system.cpp\nsed -i 's/arg.second.m_debug_only/(arg.second.m_flags \\& ArgsManager::DEBUG_ONLY)/' src/util/system.cpp\nsed -i 's/ArgsManager::ALLOW_ANY, true, OptionsCategory::/ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::/' $(git grep --files-with-matches 'AddArg(' src)\nsed -i 's/ArgsManager::ALLOW_ANY, false, OptionsCategory::/ArgsManager::ALLOW_ANY, OptionsCategory::/' $(git grep --files-with-matches 'AddArg(' src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d0462df9587009555b19ddf6b64e8275d046f860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0462df9587009555b19ddf6b64e8275d046f860"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08PfsACgkQQQEIES5+\nqB8VMw/+KEn0ZrRAOn5rO5whLIGtFxDMglnWsWHzL2pfSHjkIECzLGoyQN6SJ4I0\n0QmwafhFjm55vSok+p2iUVpNXnXMJ7jzr7NU7gzJa8+N9Wvn5U7tYIXXM3nd2urH\nRfDF0Ud5/4U+gBRhO4hkHek2t1C/TlJderO5kIxCz34fe8pqi4rpRRxUBU4qJN2L\nvYic2YHlNJJea8TxY+5UEll2IwQGwqy/xI5NqRsgi3xNXQdGs/zu+D8YsiQUJdFc\nLL0+IYt95MtXCYiPGecTyn2xDHdjDUtzlJ30qCXeQAVpg20++8YyCxKjYjEYslMK\nxeBstlMbk+9EraTBoqs1CeoO5V7e6n7bwbesCLKEj5hpda9g3e6dMGlIeqVW414p\nGny+OndaRyTz/ePyEV00SN39DGDmr9SdMztUrPTYaXLc4IBpIRcL+O9bnwg356Rf\nFz19Il4zMIafyu1aHGUV6Y0S1ytda79BvFL1AJKMQqx5SPPHJ7PsxOk7QlfIJ+UV\noo4vp4NjT3UUVtQcVSF3UYzUYY4zi4JVD4Y3dmsDpwkeFbUwbQztSDNIij7PK/4M\n4UUUf69T9CJVeG6At1RzMr7At5t+2MsOhCOPFj9te8uR6J2rNDxpfaMKzVzPSzah\nFVGpKrbiI+jnACiz2dgnr3MexVfKeJRHyysAEosBmAu63uuTGYI=\n=Ljyr\n-----END PGP SIGNATURE-----",
        "payload": "tree d0462df9587009555b19ddf6b64e8275d046f860\nparent 1b4b9422cad28d1bead24ff5fd472536954cfaf9\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564218392 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564229114 +0300\n\nscripted-diff: Use ArgsManager::DEBUG_ONLY flag\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/unsigned int flags, const bool debug_only,/unsigned int flags,/' src/util/system.h src/util/system.cpp\nsed -i 's/ArgsManager::NONE, debug_only/flags, false/' src/util/system.cpp\nsed -i 's/arg.second.m_debug_only/(arg.second.m_flags \\& ArgsManager::DEBUG_ONLY)/' src/util/system.cpp\nsed -i 's/ArgsManager::ALLOW_ANY, true, OptionsCategory::/ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::/' $(git grep --files-with-matches 'AddArg(' src)\nsed -i 's/ArgsManager::ALLOW_ANY, false, OptionsCategory::/ArgsManager::ALLOW_ANY, OptionsCategory::/' $(git grep --files-with-matches 'AddArg(' src)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4b9422cad28d1bead24ff5fd472536954cfaf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4b9422cad28d1bead24ff5fd472536954cfaf9"
      }
    ],
    "stats": {
      "total": 442,
      "additions": 221,
      "deletions": 221
    },
    "files": [
      {
        "sha": "d0d7c03ee177a782611db5f9984fa76856ea8568",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -21,14 +21,14 @@ static void SetupBenchArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n int main(int argc, char** argv)"
      },
      {
        "sha": "8f944fa6c97eaa63a976606cd749f31a18171a61",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -43,22 +43,22 @@ static void SetupCliArgs()\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n-    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n /** libevent event log callback */"
      },
      {
        "sha": "f4972c3cd44970cd90f2eac5f2074f97886136f7",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -40,36 +40,36 @@ static void SetupBitcoinTxArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n         \"This command requires JSON registers:\"\n         \"prevtxs=JSON object, \"\n         \"privatekeys=JSON object. \"\n-        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n \n-    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, false, OptionsCategory::REGISTER_COMMANDS);\n-    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n }\n \n //"
      },
      {
        "sha": "b5f962d016ec00160e1c8ca10a952a50003f8671",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -24,13 +24,13 @@ static void SetupWalletToolArgs()\n     SetupHelpOptions(gArgs);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "deb8e0fb57ac2c908369d0400a1d2af53b0555bb",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -18,9 +18,9 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-                                   \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY, true, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY, true, OptionsCategory::CHAINPARAMS);\n+                                   \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "c0c8c5224418327814bbb4f0d2dd7565b0b751de",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 128,
        "deletions": 128,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -338,7 +338,7 @@ static void OnRPCStopped()\n void SetupServerArgs()\n {\n     SetupHelpOptions(gArgs);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST); // server-only for now\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -353,103 +353,103 @@ void SetupServerArgs()\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY, true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n-    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blockfilterindex=<type>\",\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n-                 ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-\n-    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, true, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+                 ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n-    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #endif\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n-        \" Whitelisted peers cannot be DoS banned\", ArgsManager::ALLOW_ANY, false, OptionsCategory::CONNECTION);\n+        \" Whitelisted peers cannot be DoS banned\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n@@ -461,76 +461,76 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n-    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n         \"level 0 reads the blocks from disk, \"\n         \"level 1 verifies block validity, \"\n         \"level 2 verifies undo data, \"\n         \"level 3 checks disconnection of tip blocks, \"\n         \"and level 4 tries to reconnect the blocks, \"\n         \"each level includes the checks of the previous levels \"\n-        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for the block tree, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n+        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for the block tree, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY, true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, false, OptionsCategory::NODE_RELAY);\n-\n-\n-    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY, true, OptionsCategory::BLOCK_CREATION);\n-\n-    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY, true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY, true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, false, OptionsCategory::RPC);\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n #endif"
      },
      {
        "sha": "e8b776b4050e5c785a13e742564e0ce584a65175",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -399,15 +399,15 @@ WId BitcoinApplication::getMainWinId() const\n static void SetupUIArgs()\n {\n #if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), ArgsManager::ALLOW_ANY, true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n #endif\n-    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY, true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n }\n \n int GuiMain(int argc, char* argv[])"
      },
      {
        "sha": "e36ba4b3c1935557ac625f3b063dbbe65cd6ecae",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -36,7 +36,7 @@ static void SetupArgs(const std::vector<std::string>& args)\n {\n     gArgs.ClearArgs();\n     for (const std::string& arg : args) {\n-        gArgs.AddArg(arg, \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+        gArgs.AddArg(arg, \"\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     }\n }\n "
      },
      {
        "sha": "f0ed0962a8971650e4cd4d5013fb20b8e261cd62",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -157,7 +157,7 @@ struct TestArgsManager : public ArgsManager\n     void SetupArgs(int argv, const char* args[])\n     {\n         for (int i = 0; i < argv; ++i) {\n-            AddArg(args[i], \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+            AddArg(args[i], \"\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n         }\n     }\n     using ArgsManager::ReadConfigStream;\n@@ -682,7 +682,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n-        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n \n         auto args = GetValues(arg_actions, section, name, \"a\");\n@@ -809,8 +809,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n         TestArgsManager parser;\n         LOCK(parser.cs_args);\n-        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n-        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n         auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n                                               action == DISABLE_TEST ? \"-testnet=0\"   :"
      },
      {
        "sha": "4610d1fb7ea594563f830ee97cf7d5df0079e840",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -539,7 +539,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n-void ArgsManager::AddArg(const std::string& name, const std::string& help, unsigned int flags, const bool debug_only, const OptionsCategory& cat)\n+void ArgsManager::AddArg(const std::string& name, const std::string& help, unsigned int flags, const OptionsCategory& cat)\n {\n     // Split arg name from its help param\n     size_t eq_index = name.find('=');\n@@ -549,14 +549,14 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, ArgsManager::NONE, debug_only});\n+    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, flags, false});\n     assert(ret.second); // Make sure an insertion actually happened\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n {\n     for (const std::string& name : names) {\n-        AddArg(name, \"\", ArgsManager::ALLOW_ANY, false, OptionsCategory::HIDDEN);\n+        AddArg(name, \"\", ArgsManager::ALLOW_ANY, OptionsCategory::HIDDEN);\n     }\n }\n \n@@ -615,7 +615,7 @@ std::string ArgsManager::GetHelpMessage() const\n         if (arg_map.first == OptionsCategory::HIDDEN) break;\n \n         for (const auto& arg : arg_map.second) {\n-            if (show_debug || !arg.second.m_debug_only) {\n+            if (show_debug || !(arg.second.m_flags & ArgsManager::DEBUG_ONLY)) {\n                 std::string name;\n                 if (arg.second.m_help_param.empty()) {\n                     name = arg.first;\n@@ -636,7 +636,7 @@ bool HelpRequested(const ArgsManager& args)\n \n void SetupHelpOptions(ArgsManager& args)\n {\n-    args.AddArg(\"-?\", \"Print this help message and exit\", ArgsManager::ALLOW_ANY, false, OptionsCategory::OPTIONS);\n+    args.AddArg(\"-?\", \"Print this help message and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     args.AddHiddenArgs({\"-h\", \"-help\"});\n }\n "
      },
      {
        "sha": "fe3c3b6a61a84fa4e6b3e62d6e4bdf71f871cf05",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -272,7 +272,7 @@ class ArgsManager\n     /**\n      * Add argument\n      */\n-    void AddArg(const std::string& name, const std::string& help, unsigned int flags, const bool debug_only, const OptionsCategory& cat);\n+    void AddArg(const std::string& name, const std::string& help, unsigned int flags, const OptionsCategory& cat);\n \n     /**\n      * Add many hidden arguments"
      },
      {
        "sha": "f2ea16618b7fe31eed9c2fe91a723e8c7a299d30",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "patch": "@@ -34,41 +34,41 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n void WalletInit::AddWalletOptions() const\n {\n-    gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n-                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\",\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::DEBUG_TEST);\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n-                                                            CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+                                                            CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n-    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n-    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n-                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, false, OptionsCategory::WALLET);\n+                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n-    gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY, true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n }\n \n bool WalletInit::ParameterInteraction() const"
      }
    ]
  },
  {
    "sha": "9a12733508e47f558959f1b0ed9937bc3eff8962",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTEyNzMzNTA4ZTQ3ZjU1ODk1OWYxYjBlZDk5MzdiYzNlZmY4OTYy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T09:10:43Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T12:05:14Z"
      },
      "message": "Remove unused m_debug_only member from Arg struct",
      "tree": {
        "sha": "22dbddbd290cf9f41d8a402cc44946d7209bb37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22dbddbd290cf9f41d8a402cc44946d7209bb37a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a12733508e47f558959f1b0ed9937bc3eff8962",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08PfsACgkQQQEIES5+\nqB9oRBAAllTC3/RbyIoAeAp6doLfucH6XMCIHRGbFfgyINZTWQElUG9blaEzNNwn\nP/Zq7/VqMs1Xm9n23XDjHoFpoEPwmZ5T4cGeCH9MgUiPOQjqypRVJHnAeoAzFV5G\nnfoMUTwUSW/milP99kZOkXQWND6AF6kPNn3bLzvecR++quEE+wkrVSngBOoTO65L\nNj78pXrLSL9QAVzOVlYlTEINncHGe7xsmASTbFtKXIMODpfWfHPkH4IcANtJ7Sul\n/ObdfwyzNKx7rY54vh2eB71iaMAB0z16CzL0tW9/OHb2ArdmYncgG4VLQrhb8mox\nPovACOkmsGYEaRSv7L60PGftp62r1y5QKkZT0IzuxYIgADdZLzcZkj4Tcgu8Vtf0\nKzgCSoUg9k/uwillxWlgD8gtFOmmC3J3E/Phg6rO9hZCK8TCVRVkUO4u0/LawaOk\nF8+0D3RD3oEG6ZAgv+Zc85JhKYcS0rWajueudPj90urHekFwpxQWckaaKsB8TxS/\nBxLBWdHFflIv+sHYajQcMpUpclbO9CnJY2SXXB/sF42eRjUv7YW8rU5oD706jhPe\n6+eJ7zwVowYvVQ92iEZ8VXbdDuz6aXHP0d0jC6P/SXiBbW6rDyZMmkE6Li3h6nfh\ncQxfZ/JCoZHXr3mucTV6a1em+xrBGZBddBAMWqQhkb6FRD6Jeuc=\n=DSoG\n-----END PGP SIGNATURE-----",
        "payload": "tree 22dbddbd290cf9f41d8a402cc44946d7209bb37a\nparent fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564218643 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564229114 +0300\n\nRemove unused m_debug_only member from Arg struct\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a12733508e47f558959f1b0ed9937bc3eff8962",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a12733508e47f558959f1b0ed9937bc3eff8962",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a12733508e47f558959f1b0ed9937bc3eff8962/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4b9f9e3b433d8848832e2c2686cf7b1f212a5e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "75dbc72e77da83c352cdd32978c4838179ef250c",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a12733508e47f558959f1b0ed9937bc3eff8962/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a12733508e47f558959f1b0ed9937bc3eff8962/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=9a12733508e47f558959f1b0ed9937bc3eff8962",
        "patch": "@@ -549,7 +549,7 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, flags, false});\n+    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n }\n "
      },
      {
        "sha": "79fb33a9bda9bfa27ca109409da6e6fcf151f93f",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a12733508e47f558959f1b0ed9937bc3eff8962/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a12733508e47f558959f1b0ed9937bc3eff8962/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=9a12733508e47f558959f1b0ed9937bc3eff8962",
        "patch": "@@ -152,7 +152,6 @@ class ArgsManager\n         std::string m_help_param;\n         std::string m_help_text;\n         unsigned int m_flags;\n-        bool m_debug_only;\n     };\n \n     mutable CCriticalSection cs_args;"
      }
    ]
  },
  {
    "sha": "dde80c272ae584410532f48d23866d7d8581a1cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGU4MGMyNzJhZTU4NDQxMDUzMmY0OGQyMzg2NmQ3ZDg1ODFhMWNj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T09:37:09Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T19:51:58Z"
      },
      "message": "Use ArgsManager::NETWORK_ONLY flag",
      "tree": {
        "sha": "a2c8d160de867db18bd965b339f5b5bdffa7f3f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2c8d160de867db18bd965b339f5b5bdffa7f3f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dde80c272ae584410532f48d23866d7d8581a1cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08q2IACgkQQQEIES5+\nqB8r3g/9E6yN/zJcZn3LWEKOOyOQC9xCk5knXHUI5Xn68NdsY9AtV5HOt06ESaNC\nbh/AC4P//TlEZ6Wm3JxhzIkvsjUjNhRn1bolazM0IFPzJvD1nH8gaznQR2GGW6Ve\nAWAGmAFPIMPeygEMKPoYnmqn0wQBgMUjbqEvKNsGcMl+1hySK2y906bf0CBSNzFp\nx/PE6T+ofSMsJwTxhg8bFdipY/VSe53NCQDKJp5dS6rJP0kdIPG6hs9Wl1pjGP3j\ndtjrIxhGolMptdkBY8+H5PXdjeOycVvyCXGJ5xsIKknsYD7d1bxCUXbE6dcey3PO\nPAXBDRIvqdkDPYnvZ+HELG+BNLmXBsChJVysMlstgi+z/noQ5an12T5pNn34Zco0\nJh5++jRqVn/bpVdC2oPdZqs3FLh8d68r65BZ6pKn0GBwuMDEJ61EAtGcNpE7gC3k\nEugM9J8ar5CCA3FmwU3sUMvGCqZjBfuE0Ftnlb9CSKLH/5r2hxcamANHjG7PJm7C\nqXgZDf0cjVBJlXb+ZnMHwGmr73TgXatEIj+248jqIbopA95zdbgEgu0WgtLIRQwX\ny9f0W/0B2J3GWXpXfutIrWHEBAwht5s3Fr6560mfgsvk+mty2cymf7ZTy6WvbBgP\nEdQLYIkpH4A9OOskBO5jUOYGUWbYLqUVtPppGoOpymlvLwseiOU=\n=abzB\n-----END PGP SIGNATURE-----",
        "payload": "tree a2c8d160de867db18bd965b339f5b5bdffa7f3f0\nparent 9a12733508e47f558959f1b0ed9937bc3eff8962\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564220229 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564257118 +0300\n\nUse ArgsManager::NETWORK_ONLY flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dde80c272ae584410532f48d23866d7d8581a1cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dde80c272ae584410532f48d23866d7d8581a1cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dde80c272ae584410532f48d23866d7d8581a1cc/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a12733508e47f558959f1b0ed9937bc3eff8962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a12733508e47f558959f1b0ed9937bc3eff8962",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a12733508e47f558959f1b0ed9937bc3eff8962"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 21,
      "deletions": 25
    },
    "files": [
      {
        "sha": "5f6d69a4f352ae4cddbecd0eb6cd6c92f75b3081",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -53,7 +53,7 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "203f909cc4522daff4f991af16ffe3ab79bbab9f",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -25,7 +25,7 @@ static void SetupWalletToolArgs()\n     SetupChainParamsBaseOptions();\n \n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n "
      },
      {
        "sha": "bb3ff8d88f179fd4d66fe2bae236d55587acb2c6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -396,11 +396,11 @@ void SetupServerArgs()\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -418,7 +418,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -518,10 +518,10 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      },
      {
        "sha": "b8aa168082be5da2c8b8d7110fd0c7cc867423b1",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -307,18 +307,7 @@ static void InterpretOption(std::string key, std::string val, std::map<std::stri\n     args[key].push_back(val);\n }\n \n-ArgsManager::ArgsManager() :\n-    /* These options would cause cross-contamination if values for\n-     * mainnet were used while running on regtest/testnet (or vice-versa).\n-     * Setting them as section_only_args ensures that sharing a config file\n-     * between mainnet and regtest/testnet won't cause problems due to these\n-     * parameters by accident. */\n-    m_network_only_args{\n-      \"-addnode\", \"-connect\",\n-      \"-port\", \"-bind\",\n-      \"-rpcport\", \"-rpcbind\",\n-      \"-wallet\",\n-    }\n+ArgsManager::ArgsManager()\n {\n     // nothing to do\n }\n@@ -546,11 +535,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (eq_index == std::string::npos) {\n         eq_index = name.size();\n     }\n+    std::string arg_name = name.substr(0, eq_index);\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n+    auto ret = arg_map.emplace(arg_name, Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n+\n+    if (flags & ArgsManager::NETWORK_ONLY) {\n+        m_network_only_args.emplace(arg_name);\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)"
      },
      {
        "sha": "9f8d94f5209eadbb7c9a6f6da990a790ad05eb90",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -284,6 +284,7 @@ class ArgsManager\n     void ClearArgs() {\n         LOCK(cs_args);\n         m_available_args.clear();\n+        m_network_only_args.clear();\n     }\n \n     /**"
      },
      {
        "sha": "e766deadb7aaa8b31a4384d5bf2c62bfb387bf54",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -55,7 +55,7 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM"
      },
      {
        "sha": "70a824b8633b852a1b9cdfc88eb350f5af134f0a",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dde80c272ae584410532f48d23866d7d8581a1cc/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dde80c272ae584410532f48d23866d7d8581a1cc/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=dde80c272ae584410532f48d23866d7d8581a1cc",
        "patch": "@@ -35,9 +35,10 @@ def test_config_file_parser(self):\n             conf.write('-dash=1\\n')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n \n-        with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n-            conf.write(\"wallet=foo\\n\")\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n+        if self.is_wallet_compiled():\n+            with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n+                conf.write(\"wallet=foo\\n\")\n+            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('regtest=0\\n') # mainnet"
      }
    ]
  },
  {
    "sha": "db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjA4ZWRiMzAzOGEwODVkM2RiY2U3YmI0ZWMzYzFkOWI5YTViMjgx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T11:41:27Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T19:52:18Z"
      },
      "message": "Replace IsArgKnown() with FlagsOfKnownArg()",
      "tree": {
        "sha": "b3742e01067366680da9051dab62261b7cd9e0ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3742e01067366680da9051dab62261b7cd9e0ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl08q3IACgkQQQEIES5+\nqB9ifw//RgFa0BNbQ0XyygRzgr/TngfVyN6qLgQ0mLwvDybV2rEMRcPFcQGae8Fl\nRkj4cUb5etIvv08fhqGm+F9FSj9yKzY6MlMH9UrOsRHt7HP5AcMN6ij2CfWWGIG2\nOEck02zYFMS1FkqfEZHPLilUNUbNLXuFGehkrLBsWkV3mzQOvPpOY5BVQyX2s26b\nK3OgelpWZN6Rv8B2dzgKOcCQWADVXQfWUHtzOTRf+ZZ1QV44SBo71pe7eeHcaggY\nm1DTJl47OmoLu8wjGpJpyZ3D3lhsrdEdcM3uEkehOrtwAUW3Zg3A2uPIEZggc8lE\nAsv3GV8MKlOOuZYBUbc/pKyrvSMIwpuvqyGK/STN2GELDxQ536MsR7fZBHul+Ys/\nHi5owh5O1sxkuoqhKiIYiuezYj3x+H0D6BkaZeS8A6jsNtq0vPvulJtGAypqr+0n\nef1e7zwCNEYJM+8Nt2LowCco2Zxg5t9Ng7tdr2fHN2ZQZ6hFRtNTpwwg90Il/2t6\nxkBFdVagcLcqMiro8zAjNWQx0AHT0AuPhXDzuUyzWVtltScuRbX1A7qdHXQrThSF\nuTL8HR65zgY0veE4tX675CMP1QrVBz2UuhCuijJ8UErhZQEz8uL9KW6QQ+zkI6ic\nti82yBzYLxfua869+OJ/t9BnJFJ5NnmqM/SaFjH2PFJiZXf9eOw=\n=OJV9\n-----END PGP SIGNATURE-----",
        "payload": "tree b3742e01067366680da9051dab62261b7cd9e0ac\nparent dde80c272ae584410532f48d23866d7d8581a1cc\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564227687 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564257138 +0300\n\nReplace IsArgKnown() with FlagsOfKnownArg()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dde80c272ae584410532f48d23866d7d8581a1cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dde80c272ae584410532f48d23866d7d8581a1cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dde80c272ae584410532f48d23866d7d8581a1cc"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 23,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c7e342a59e6dd3bcacfc95d0c37c5c1c71b5e92e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
        "patch": "@@ -373,6 +373,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n \n     for (int i = 1; i < argc; i++) {\n         std::string key(argv[i]);\n+        if (key == \"-\") break; //bitcoin-tx using stdin\n         std::string val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n@@ -392,15 +393,13 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Check that the arg is known\n-        if (!(IsSwitchChar(key[0]) && key.size() == 1)) {\n-            if (!IsArgKnown(key)) {\n-                error = strprintf(\"Invalid parameter %s\", key.c_str());\n-                return false;\n-            }\n+        const unsigned int flags = FlagsOfKnownArg(key);\n+        if (flags) {\n+            InterpretOption(key, val, m_override_args);\n+        } else {\n+            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            return false;\n         }\n-\n-        InterpretOption(key, val, m_override_args);\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n@@ -416,7 +415,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     return true;\n }\n \n-bool ArgsManager::IsArgKnown(const std::string& key) const\n+unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n {\n     assert(key[0] == '-');\n \n@@ -434,9 +433,12 @@ bool ArgsManager::IsArgKnown(const std::string& key) const\n \n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        if (arg_map.second.count(base_arg_name)) return true;\n+        const auto search = arg_map.second.find(base_arg_name);\n+        if (search != arg_map.second.end()) {\n+            return search->second.m_flags;\n+        }\n     }\n-    return false;\n+    return ArgsManager::NONE;\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n@@ -835,18 +837,17 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n         const std::string strKey = std::string(\"-\") + option.first;\n-        // Check that the arg is known\n-        if (!IsArgKnown(strKey)) {\n-            if (!ignore_invalid_keys) {\n+        const unsigned int flags = FlagsOfKnownArg(strKey);\n+        if (flags) {\n+            InterpretOption(strKey, option.second, m_config_args);\n+        } else {\n+            if (ignore_invalid_keys) {\n+                LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n+            } else {\n                 error = strprintf(\"Invalid configuration value %s\", option.first.c_str());\n                 return false;\n-            } else {\n-                LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n-                continue;\n             }\n         }\n-\n-        InterpretOption(strKey, option.second, m_config_args);\n     }\n     return true;\n }"
      },
      {
        "sha": "75e80968262d170aa0829b769130c11c74d73866",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
        "patch": "@@ -293,9 +293,10 @@ class ArgsManager\n     std::string GetHelpMessage() const;\n \n     /**\n-     * Check whether we know of this arg\n+     * Return Flags for known arg.\n+     * Return ArgsManager::NONE for unknown arg.\n      */\n-    bool IsArgKnown(const std::string& key) const;\n+    unsigned int FlagsOfKnownArg(const std::string& key) const;\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  },
  {
    "sha": "b70cc5d73357ea11296f3b6bb81193ba1101e73b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzBjYzVkNzMzNTdlYTExMjk2ZjNiNmJiODExOTNiYTExMDFlNzNi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T13:19:17Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-31T18:57:12Z"
      },
      "message": "Revamp option negating policy",
      "tree": {
        "sha": "a1e1be103916b15a8385ea6950e8f860b855393f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1e1be103916b15a8385ea6950e8f860b855393f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b70cc5d73357ea11296f3b6bb81193ba1101e73b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl1B5I0ACgkQQQEIES5+\nqB+wXw//YodEa88ZRll7TI0AxCK8bngobgVHNYFI5mWVgGcxda16liaMJH6Bms9R\nv+fDgCB3hlduBgRfeC+td50saJZy1VeoJ2kgFPNAA58p77kr2LLpQDSWwmE22vb3\nKVXGDyklHi5WYPX1JewLZLMQjqt71izWv28+2zpqmVWVOOp/sDvXylHvBWnTbGu+\nneneneEOoerkwsnLjQO+RyKm1EU2tZMm/9n7SM89IVaIHsbIXhCwV4Cb0878rJDl\nKzY9R6VTYEVcZLwTYQ8UTRmN9RATDAP7bwVKO1VrGNM/6BcOTLIfK47/w0fPP3+W\n4b+HZxTuqGs6SfjZluArf6b5y/jOtochAVRqY0+J73ntIsr0jZHt3wcua38GUVC6\ns/H5xGmo5KBYXpjLluUuN3JCQ9emACvYnBDViyZkzRtL2vtv3m9V0LcXH+kloHZm\n/PttlQOD0JjUGXs2uCR7pYD3KZh+vbyQl41iOVq/uxKjfa/DcJGnOk0Ugqh95sU4\nmfq0Kw6SQEgZf3Hg8McWc25bmlgUcJfFHi2srgfK6M6k7G9BRd/MQyXAt2/bSEqh\nO/Cued5lyWQ7oTuk8+riYhKh0GgeqZkNAhdzVLUgP12U70h72H92LCfOogDmEtVe\nEl5obGV/Yho4STSmqiRLmZ57L1EusZHodLbVWcPm+onrQq6C3Jo=\n=JrGp\n-----END PGP SIGNATURE-----",
        "payload": "tree a1e1be103916b15a8385ea6950e8f860b855393f\nparent db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564233557 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564599432 +0300\n\nRevamp option negating policy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cc5d73357ea11296f3b6bb81193ba1101e73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b70cc5d73357ea11296f3b6bb81193ba1101e73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cc5d73357ea11296f3b6bb81193ba1101e73b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db08edb3038a085d3dbce7bb4ec3c1d9b9a5b281"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f8fcbc12062a0641f6a0463e061ebdbb6c1a3449",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70cc5d73357ea11296f3b6bb81193ba1101e73b/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70cc5d73357ea11296f3b6bb81193ba1101e73b/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b70cc5d73357ea11296f3b6bb81193ba1101e73b",
        "patch": "@@ -282,7 +282,10 @@ class ArgsManagerHelper {\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-static void InterpretOption(std::string key, std::string val, std::map<std::string, std::vector<std::string>>& args)\n+\n+NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned int flags,\n+                                      std::map<std::string, std::vector<std::string>>& args,\n+                                      std::string& error)\n {\n     assert(key[0] == '-');\n \n@@ -293,18 +296,22 @@ static void InterpretOption(std::string key, std::string val, std::map<std::stri\n         ++option_index;\n     }\n     if (key.substr(option_index, 2) == \"no\") {\n-        const bool bool_val = InterpretBool(val);\n         key.erase(option_index, 2);\n-        if (!bool_val ) {\n+        if (flags & ArgsManager::ALLOW_BOOL) {\n+            if (InterpretBool(val)) {\n+                args[key].clear();\n+                return true;\n+            }\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n             val = \"1\";\n         } else {\n-            args[key].clear();\n-            return;\n+            error = strprintf(\"Negating of %s is meaningless and therefore forbidden\", key.c_str());\n+            return false;\n         }\n     }\n     args[key].push_back(val);\n+    return true;\n }\n \n ArgsManager::ArgsManager()\n@@ -395,7 +402,9 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n \n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            InterpretOption(key, val, m_override_args);\n+            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+                return false;\n+            }\n         } else {\n             error = strprintf(\"Invalid parameter %s\", key.c_str());\n             return false;\n@@ -839,7 +848,9 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         const std::string strKey = std::string(\"-\") + option.first;\n         const unsigned int flags = FlagsOfKnownArg(strKey);\n         if (flags) {\n-            InterpretOption(strKey, option.second, m_config_args);\n+            if (!InterpretOption(strKey, option.second, flags, m_config_args, error)) {\n+                return false;\n+            }\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);"
      }
    ]
  },
  {
    "sha": "e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmY2NDljYjJjMDdiZjU1ZDkyMTRjMjg3NjYxOWM1NmYxZDZmZTMw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-27T17:27:08Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-31T18:58:14Z"
      },
      "message": "test: Make tests arg type specific",
      "tree": {
        "sha": "e57bd249945ad7cba5c5e01fab217254423a2c41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57bd249945ad7cba5c5e01fab217254423a2c41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl1B5NIACgkQQQEIES5+\nqB9ZkxAAj3aFDrd8HxxnI8o8fZgO0DpOJFEaTkgf3cnNL2rs6EEXGa6iqFoxp3ya\ncfaXZljlZtle4qXRJGVexIVgznyhjOQGNsua/AUUIoZeDIJoXuF8j6NbKfyj6ogA\nfRfj0kHhk0vm8H8zboRZhw1vYec/jAcYVj40afs7r9IzpZepmq/ZwVjRVe2rW/8S\nBiOUU4Yj8D3B81pFh36AWJ54pCrBUUSbXx5oD6YZQ3zBsyrE8yC21oxi7ew2Ys/r\ne3VcWHTRgekv9U1ItytRlf+lS6ngkD9ayT7ArL/VzDFx6YW4X4OGpbsP0rmSWXpz\nGHYtrLLepzTwAZ7LHwTMVEkBU7dRg1hCyDpLM+ie7dbwX83dO9iDpxxh4nbAJRlG\n6WYV+Vh+u5KNR9AwI8ipaG+YajThCRVif+PPstKdaGYp1FK2fuCeMQnIhHD9Z9tK\nwg4ZnVvv+Dk9eoRZ/JKFCUv/yXbZ5cSfXdOUshnEf/KtVeAOL4OJTESuqYqbwErS\nYOkkfHc58gd8NCvxMzeREP8BPcgz4pXIHmsWVX/X/meRL6RgAVszvegCLtbr5qt5\nM0d3TxmpzhqJCQ/3hxXpSsCDYTfLTSp9qrik3EcWQglN+tx8idHAPhwTrjCbpcHg\n98CAWz126RyafBzCxNwcdc1cHvbhXCrzWrfER0ZKv+qJSQphhDw=\n=h+5q\n-----END PGP SIGNATURE-----",
        "payload": "tree e57bd249945ad7cba5c5e01fab217254423a2c41\nparent b70cc5d73357ea11296f3b6bb81193ba1101e73b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564248428 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564599494 +0300\n\ntest: Make tests arg type specific\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f649cb2c07bf55d9214c2876619c56f1d6fe30/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b70cc5d73357ea11296f3b6bb81193ba1101e73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cc5d73357ea11296f3b6bb81193ba1101e73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b70cc5d73357ea11296f3b6bb81193ba1101e73b"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 53,
      "deletions": 21
    },
    "files": [
      {
        "sha": "77304fe91845d141d6dfeeef65fbaa1af0a5207d",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f649cb2c07bf55d9214c2876619c56f1d6fe30/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f649cb2c07bf55d9214c2876619c56f1d6fe30/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
        "patch": "@@ -7,6 +7,7 @@\n #include <test/setup_common.h>\n \n #include <string>\n+#include <utility>\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n@@ -32,17 +33,18 @@ static void ResetArgs(const std::string& strArg)\n     BOOST_CHECK(gArgs.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-static void SetupArgs(const std::vector<std::string>& args)\n+static void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n     gArgs.ClearArgs();\n-    for (const std::string& arg : args) {\n-        gArgs.AddArg(arg, \"\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    for (const auto& arg : args) {\n+        gArgs.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n-    SetupArgs({\"-foo\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    SetupArgs({foo});\n     ResetArgs(\"-foo\");\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n@@ -95,7 +97,9 @@ BOOST_AUTO_TEST_CASE(boolarg)\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_STRING);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_STRING);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n@@ -120,7 +124,9 @@ BOOST_AUTO_TEST_CASE(stringarg)\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_INT);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_INT);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n@@ -140,7 +146,9 @@ BOOST_AUTO_TEST_CASE(intarg)\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"--foo\");\n     BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n \n@@ -151,7 +159,9 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_BOOL);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"-nofoo\");\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));"
      },
      {
        "sha": "15fe1148fe98e9f92b01c9cb6b05a1e5dd702d61",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f649cb2c07bf55d9214c2876619c56f1d6fe30/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f649cb2c07bf55d9214c2876619c56f1d6fe30/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e6f649cb2c07bf55d9214c2876619c56f1d6fe30",
        "patch": "@@ -14,6 +14,7 @@\n \n #include <stdint.h>\n #include <thread>\n+#include <utility>\n #include <vector>\n #ifndef WIN32\n #include <signal.h>\n@@ -154,10 +155,10 @@ struct TestArgsManager : public ArgsManager\n         LOCK(cs_args);\n         m_network_only_args.insert(arg);\n     }\n-    void SetupArgs(int argv, const char* args[])\n+    void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n     {\n-        for (int i = 0; i < argv; ++i) {\n-            AddArg(args[i], \"\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        for (const auto& arg : args) {\n+            AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n     using ArgsManager::ReadConfigStream;\n@@ -168,11 +169,15 @@ struct TestArgsManager : public ArgsManager\n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n     TestArgsManager testArgs;\n-    const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\"};\n+    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n+    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n+\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n     std::string error;\n-    testArgs.SetupArgs(4, avail_args);\n+    testArgs.SetupArgs({a, b, ccc, d});\n     BOOST_CHECK(testArgs.ParseParameters(0, (char**)argv_test, error));\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n@@ -200,11 +205,17 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n {\n     TestArgsManager testArgs;\n-    const char* avail_args[] = {\"-a\", \"-b\", \"-c\", \"-d\", \"-e\", \"-f\"};\n+    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_BOOL);\n+    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_BOOL);\n+    const auto c = std::make_pair(\"-c\", ArgsManager::ALLOW_BOOL);\n+    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_BOOL);\n+    const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_BOOL);\n+    const auto f = std::make_pair(\"-f\", ArgsManager::ALLOW_BOOL);\n+\n     const char *argv_test[] = {\n         \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n     std::string error;\n-    testArgs.SetupArgs(6, avail_args);\n+    testArgs.SetupArgs({a, b, c, d, e, f});\n     BOOST_CHECK(testArgs.ParseParameters(7, (char**)argv_test, error));\n \n     // Each letter should be set.\n@@ -237,9 +248,10 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n-    const char* avail_args[] = {\"-foo\", \"-bar\"};\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_BOOL);\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n-    testArgs.SetupArgs(2, avail_args);\n+    testArgs.SetupArgs({foo, bar});\n     std::string error;\n     BOOST_CHECK(testArgs.ParseParameters(4, (char**)argv_test, error));\n \n@@ -308,8 +320,17 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"iii=2\\n\";\n \n     TestArgsManager test_args;\n-    const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\", \"-e\", \"-fff\", \"-ggg\", \"-h\", \"-i\", \"-iii\"};\n-    test_args.SetupArgs(10, avail_args);\n+    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_BOOL);\n+    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_BOOL);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_STRING);\n+    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_STRING);\n+    const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n+    const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_BOOL);\n+    const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_BOOL);\n+    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_BOOL);\n+    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_BOOL);\n+    const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_INT);\n+    test_args.SetupArgs({a, b, ccc, d, e, fff, ggg, h, i, iii});\n \n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n@@ -507,8 +528,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n BOOST_AUTO_TEST_CASE(util_GetChainName)\n {\n     TestArgsManager test_args;\n-    const char* avail_args[] = {\"-testnet\", \"-regtest\"};\n-    test_args.SetupArgs(2, avail_args);\n+    const auto testnet = std::make_pair(\"-testnet\", ArgsManager::ALLOW_BOOL);\n+    const auto regtest = std::make_pair(\"-regtest\", ArgsManager::ALLOW_BOOL);\n+    test_args.SetupArgs({testnet, regtest});\n \n     const char* argv_testnet[] = {\"cmd\", \"-testnet\"};\n     const char* argv_regtest[] = {\"cmd\", \"-regtest\"};"
      }
    ]
  }
]