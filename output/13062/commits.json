[
  {
    "sha": "ae847ee604b682a5d6d7748295ffc6fc25f291f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTg0N2VlNjA0YjY4MmE1ZDZkNzc0ODI5NWZmYzZmYzI1ZjI5MWY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-30T22:04:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Test that OP_1-OP_16 (but not lower/higher) start witness programs",
      "tree": {
        "sha": "9d39ddb5e991b152708abb173859cf469ab0f6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d39ddb5e991b152708abb173859cf469ab0f6e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae847ee604b682a5d6d7748295ffc6fc25f291f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae847ee604b682a5d6d7748295ffc6fc25f291f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae847ee604b682a5d6d7748295ffc6fc25f291f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae847ee604b682a5d6d7748295ffc6fc25f291f7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c041cb348e667672c8b5ed504dba05adf60783b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c041cb348e667672c8b5ed504dba05adf60783b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c041cb348e667672c8b5ed504dba05adf60783b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad05240369b315952721eb6c4b731916c6e829a8",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae847ee604b682a5d6d7748295ffc6fc25f291f7/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae847ee604b682a5d6d7748295ffc6fc25f291f7/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=ae847ee604b682a5d6d7748295ffc6fc25f291f7",
        "patch": "@@ -1269,6 +1269,10 @@\n [[\"51\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"P2SH,WITNESS\", \"WITNESS_PROGRAM_MISMATCH\", \"Witness script hash mismatch\"],\n [[\"00\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Invalid witness script without WITNESS\"],\n [[\"51\", 0.00000000 ], \"\", \"0 0x206e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\", \"\", \"OK\", \"Witness script hash mismatch without WITNESS\"],\n+[[\"51\", 0.00000000 ], \"\", \"-1 0x021234\", \"P2SH,WITNESS\", \"WITNESS_UNEXPECTED\", \"OP_1NEGATE does not introduce a witness program\"],\n+[[\"51\", 0.00000000 ], \"00\", \"1 0x021234\", \"P2SH,WITNESS\", \"WITNESS_MALLEATED\", \"OP_1 does introduce a witness program\"],\n+[[\"51\", 0.00000000 ], \"00\", \"16 0x021234\", \"P2SH,WITNESS\", \"WITNESS_MALLEATED\", \"OP_16 does introduce a witness program\"],\n+[[\"51\", 0.00000000 ], \"\", \"NOP 0x021234\", \"P2SH,WITNESS\", \"WITNESS_UNEXPECTED\", \"NOP does not introduce a witness program\"],\n \n [\"Automatically generated test cases\"],\n ["
      }
    ]
  },
  {
    "sha": "d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWVkNWZhZTAyYWZlOTliM2NhYzM4YWMwMzVjZGYyMjA4NWM5ZDAz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-25T03:02:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Make uint{160,256} support construction from Span",
      "tree": {
        "sha": "ab468aa5e3f110424a9967543f05786b20ab2dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab468aa5e3f110424a9967543f05786b20ab2dde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5ed5fae02afe99b3cac38ac035cdf22085c9d03/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae847ee604b682a5d6d7748295ffc6fc25f291f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae847ee604b682a5d6d7748295ffc6fc25f291f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae847ee604b682a5d6d7748295ffc6fc25f291f7"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cc0a40f43e5517a9163f9415db696df3b641150d",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5ed5fae02afe99b3cac38ac035cdf22085c9d03/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5ed5fae02afe99b3cac38ac035cdf22085c9d03/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
        "patch": "@@ -10,7 +10,7 @@\n #include <string.h>\n \n template <unsigned int BITS>\n-base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n+base_blob<BITS>::base_blob(Span<const unsigned char> vch)\n {\n     assert(vch.size() == sizeof(m_data));\n     memcpy(m_data, vch.data(), sizeof(m_data));\n@@ -67,14 +67,14 @@ std::string base_blob<BITS>::ToString() const\n }\n \n // Explicit instantiations for base_blob<160>\n-template base_blob<160>::base_blob(const std::vector<unsigned char>&);\n+template base_blob<160>::base_blob(Span<const unsigned char>);\n template std::string base_blob<160>::GetHex() const;\n template std::string base_blob<160>::ToString() const;\n template void base_blob<160>::SetHex(const char*);\n template void base_blob<160>::SetHex(const std::string&);\n \n // Explicit instantiations for base_blob<256>\n-template base_blob<256>::base_blob(const std::vector<unsigned char>&);\n+template base_blob<256>::base_blob(Span<const unsigned char>);\n template std::string base_blob<256>::GetHex() const;\n template std::string base_blob<256>::ToString() const;\n template void base_blob<256>::SetHex(const char*);"
      },
      {
        "sha": "b82d681747e17db23e043dd7b71a67ba7bb47314",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5ed5fae02afe99b3cac38ac035cdf22085c9d03/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5ed5fae02afe99b3cac38ac035cdf22085c9d03/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n+#include <span.h>\n+\n #include <assert.h>\n #include <cstring>\n #include <stdint.h>\n@@ -26,7 +28,7 @@ class base_blob\n     /* constructor for constants between 1 and 255 */\n     constexpr explicit base_blob(uint8_t v) : m_data{v} {}\n \n-    explicit base_blob(const std::vector<unsigned char>& vch);\n+    explicit base_blob(Span<const unsigned char> vch);\n \n     bool IsNull() const\n     {\n@@ -113,7 +115,7 @@ class base_blob\n class uint160 : public base_blob<160> {\n public:\n     constexpr uint160() {}\n-    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n+    explicit uint160(Span<const unsigned char> vch) : base_blob<160>(vch) {}\n };\n \n /** 256-bit opaque blob.\n@@ -125,7 +127,7 @@ class uint256 : public base_blob<256> {\n public:\n     constexpr uint256() {}\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n-    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n+    explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n     static const uint256 ZERO;\n     static const uint256 ONE;\n };"
      }
    ]
  },
  {
    "sha": "6e224e18b837c8c03df2b2815592b651a8f0ffdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTIyNGUxOGI4MzdjOGMwM2RmMmIyODE1NTkyYjY1MWE4ZjBmZmRm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-23T22:26:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Support pushing Spans onto CScript",
      "tree": {
        "sha": "77d262ba067f62f2d421293b5222cf3e2c730f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d262ba067f62f2d421293b5222cf3e2c730f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e224e18b837c8c03df2b2815592b651a8f0ffdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e224e18b837c8c03df2b2815592b651a8f0ffdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e224e18b837c8c03df2b2815592b651a8f0ffdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e224e18b837c8c03df2b2815592b651a8f0ffdf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5ed5fae02afe99b3cac38ac035cdf22085c9d03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5ed5fae02afe99b3cac38ac035cdf22085c9d03"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ebdebf73cd33b4cb4eeb140eaf9ba86fa4df6ccf",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e224e18b837c8c03df2b2815592b651a8f0ffdf/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e224e18b837c8c03df2b2815592b651a8f0ffdf/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=6e224e18b837c8c03df2b2815592b651a8f0ffdf",
        "patch": "@@ -454,7 +454,7 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b)\n+    CScript& operator<<(const Span<const unsigned char>& b)\n     {\n         if (b.size() < OP_PUSHDATA1)\n         {"
      }
    ]
  },
  {
    "sha": "4f6bc1b875377274eccbf382dab381a8681ee5dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjZiYzFiODc1Mzc3Mjc0ZWNjYmYzODJkYWIzODFhODY4MWVlNWRk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-23T19:44:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Make GetScriptOp operate on Span\n\nThis introduces a version of GetScriptOp that is independent from the script\nstorage type.",
      "tree": {
        "sha": "1ee8105ebdab1dbce0ca654af83d8466146fa0cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ee8105ebdab1dbce0ca654af83d8466146fa0cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f6bc1b875377274eccbf382dab381a8681ee5dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f6bc1b875377274eccbf382dab381a8681ee5dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f6bc1b875377274eccbf382dab381a8681ee5dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f6bc1b875377274eccbf382dab381a8681ee5dd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e224e18b837c8c03df2b2815592b651a8f0ffdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e224e18b837c8c03df2b2815592b651a8f0ffdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e224e18b837c8c03df2b2815592b651a8f0ffdf"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 31,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f4f71948b275a248839ac176e7f0dba7776f5f82",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 24,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f6bc1b875377274eccbf382dab381a8681ee5dd/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f6bc1b875377274eccbf382dab381a8681ee5dd/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=4f6bc1b875377274eccbf382dab381a8681ee5dd",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <script/script.h>\n \n+#include <span.h>\n #include <util/strencodings.h>\n \n #include <string>\n@@ -280,18 +281,15 @@ bool CScript::HasValidOps() const\n     return true;\n }\n \n-bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet)\n+bool GetScriptOp(Span<const unsigned char>& script, opcodetype& opcodeRet, Span<const unsigned char>* data_out)\n {\n     opcodeRet = OP_INVALIDOPCODE;\n-    if (pvchRet)\n-        pvchRet->clear();\n-    if (pc >= end)\n-        return false;\n+    if (data_out) *data_out = {};\n \n     // Read instruction\n-    if (end - pc < 1)\n-        return false;\n-    unsigned int opcode = *pc++;\n+    if (script.size() < 1) return false;\n+    unsigned int opcode = script.front();\n+    script = script.subspan(1);\n \n     // Immediate operand\n     if (opcode <= OP_PUSHDATA4)\n@@ -303,29 +301,25 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n         }\n         else if (opcode == OP_PUSHDATA1)\n         {\n-            if (end - pc < 1)\n-                return false;\n-            nSize = *pc++;\n+            if (script.size() < 1) return false;\n+            nSize = script.front();\n+            script = script.subspan(1);\n         }\n         else if (opcode == OP_PUSHDATA2)\n         {\n-            if (end - pc < 2)\n-                return false;\n-            nSize = ReadLE16(&pc[0]);\n-            pc += 2;\n+            if (script.size() < 2) return false;\n+            nSize = ReadLE16(script.data());\n+            script = script.subspan(2);\n         }\n         else if (opcode == OP_PUSHDATA4)\n         {\n-            if (end - pc < 4)\n-                return false;\n-            nSize = ReadLE32(&pc[0]);\n-            pc += 4;\n+            if (script.size() < 4) return false;\n+            nSize = ReadLE32(script.data());\n+            script = script.subspan(4);\n         }\n-        if (end - pc < 0 || (unsigned int)(end - pc) < nSize)\n-            return false;\n-        if (pvchRet)\n-            pvchRet->assign(pc, pc + nSize);\n-        pc += nSize;\n+        if (script.size() < nSize) return false;\n+        if (data_out) *data_out = script.first(nSize);\n+        script = script.subspan(nSize);\n     }\n \n     opcodeRet = static_cast<opcodetype>(opcode);\n@@ -339,3 +333,14 @@ bool IsOpSuccess(const opcodetype& opcode)\n            (opcode >= 141 && opcode <= 142) || (opcode >= 149 && opcode <= 153) ||\n            (opcode >= 187 && opcode <= 254);\n }\n+\n+bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet)\n+{\n+    if (pc >= end) return false;\n+    Span<const unsigned char> script(&*pc, end - pc);\n+    Span<const unsigned char> data;\n+    bool ret = GetScriptOp(script, opcodeRet, &data);\n+    if (pvchRet) pvchRet->assign(data.begin(), data.end());\n+    pc = end - script.size();\n+    return ret;\n+}"
      },
      {
        "sha": "0093adfd69e85f2a262404f33e0a75fc7ac0912e",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f6bc1b875377274eccbf382dab381a8681ee5dd/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f6bc1b875377274eccbf382dab381a8681ee5dd/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4f6bc1b875377274eccbf382dab381a8681ee5dd",
        "patch": "@@ -9,6 +9,7 @@\n #include <crypto/common.h>\n #include <prevector.h>\n #include <serialize.h>\n+#include <span.h>\n \n #include <assert.h>\n #include <climits>\n@@ -398,6 +399,7 @@ class CScriptNum\n  */\n typedef prevector<28, unsigned char> CScriptBase;\n \n+bool GetScriptOp(Span<const unsigned char>& script, opcodetype& opcodeRet, Span<const unsigned char>* data_out);\n bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet);\n \n /** Serialized script, used inside transaction inputs and outputs */"
      }
    ]
  },
  {
    "sha": "8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGRjMWZiMDBkOGY2NzhmZDRhZjYwZmYzNGY1ZjNhYzFmNDJlOWU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-23T21:51:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Introduce consensus versions of CScript checks and use them\n\nThe CScript methods IsPayToScriptHash, IsWitnessProgram, and IsPushOnly are currently\nconsensus critical, and dependent on the storage type (CScript).\n\nThis creates new consensus-critical versions inside interpreter that operate on the\nmore efficient Span<const unsigned char> type, independent from the script storage.\n\nThe CScript methods remain, but are no longer consensus-critical.",
      "tree": {
        "sha": "2e4a21a8ed3a26886bf6916580b0aa519bc62992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e4a21a8ed3a26886bf6916580b0aa519bc62992"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f6bc1b875377274eccbf382dab381a8681ee5dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f6bc1b875377274eccbf382dab381a8681ee5dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f6bc1b875377274eccbf382dab381a8681ee5dd"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 51,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4d9b8073298ef1d85b6633c6fa4e994ae21d058e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 10,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
        "patch": "@@ -1848,6 +1848,44 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n+/** Consensus-critical analogue of CScript::IsPayToScriptHash. */\n+static bool IsPayToScriptHash(Span<const unsigned char> script)\n+{\n+    return script.size() == 23 &&\n+           script[0] == OP_HASH160 &&\n+           script[1] == 0x14 &&\n+           script[22] == OP_EQUAL;\n+}\n+\n+/** Consensus-critical analogue of CScript::IsWitnessProgram. */\n+static bool IsWitnessProgram(Span<const unsigned char> script, int& version, Span<const unsigned char>& program)\n+{\n+    if (script.size() < 4 || script.size() > 42) return false;\n+    if (script[0] != OP_0 && (script[0] < OP_1 || script[0] > OP_16)) return false;\n+    if (std::size_t(script[1] + 2) == script.size()) {\n+        version = CScript::DecodeOP_N((opcodetype)script[0]);\n+        program = script.subspan(2);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+/** Consensus-critical analogue of CScript::IsPushOnly. */\n+static bool IsPushOnly(Span<const unsigned char> script)\n+{\n+    Span<const unsigned char> pc = script;\n+    while (pc.size() > 0) {\n+        opcodetype opcode;\n+        if (!GetScriptOp(pc, opcode, nullptr)) return false;\n+        // Note that IsPushOnly() *does* consider OP_RESERVED to be a\n+        // push-type opcode, however execution of OP_RESERVED fails, so\n+        // it's not relevant to P2SH/BIP62 as the scriptSig would fail prior to\n+        // the P2SH special validation code being executed.\n+        if (opcode > OP_16) return false;\n+    }\n+    return true;\n+}\n+\n static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n@@ -1967,7 +2005,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n \n-    if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !scriptSig.IsPushOnly()) {\n+    if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !IsPushOnly(scriptSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n     }\n \n@@ -1990,8 +2028,10 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     // Bare witness programs\n     int witnessversion;\n     std::vector<unsigned char> witnessprogram;\n+    Span<const unsigned char> witnessprogram_span;\n     if (flags & SCRIPT_VERIFY_WITNESS) {\n-        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        if (IsWitnessProgram(scriptPubKey, witnessversion, witnessprogram_span)) {\n+            witnessprogram.assign(witnessprogram_span.begin(), witnessprogram_span.end());\n             hadWitness = true;\n             if (scriptSig.size() != 0) {\n                 // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n@@ -2007,10 +2047,10 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     }\n \n     // Additional validation for spend-to-script-hash transactions:\n-    if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n+    if ((flags & SCRIPT_VERIFY_P2SH) && IsPayToScriptHash(scriptPubKey))\n     {\n         // scriptSig must be literals-only or validation fails\n-        if (!scriptSig.IsPushOnly())\n+        if (!IsPushOnly(scriptSig))\n             return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n \n         // Restore stack.\n@@ -2035,7 +2075,8 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n         // P2SH witness program\n         if (flags & SCRIPT_VERIFY_WITNESS) {\n-            if (pubKey2.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            if (IsWitnessProgram(pubKey2, witnessversion, witnessprogram_span)) {\n+                witnessprogram.assign(witnessprogram_span.begin(), witnessprogram_span.end());\n                 hadWitness = true;\n                 if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n                     // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n@@ -2078,7 +2119,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     return set_success(serror);\n }\n \n-size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness)\n+size_t static WitnessSigOps(int witversion, Span<const unsigned char> witprogram, const CScriptWitness& witness)\n {\n     if (witversion == 0) {\n         if (witprogram.size() == WITNESS_V0_KEYHASH_SIZE)\n@@ -2104,20 +2145,20 @@ size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey,\n     assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n \n     int witnessversion;\n-    std::vector<unsigned char> witnessprogram;\n-    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+    Span<const unsigned char> witnessprogram;\n+    if (IsWitnessProgram(scriptPubKey, witnessversion, witnessprogram)) {\n         return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty);\n     }\n \n-    if (scriptPubKey.IsPayToScriptHash() && scriptSig.IsPushOnly()) {\n+    if (IsPayToScriptHash(scriptPubKey) && IsPushOnly(scriptSig)) {\n         CScript::const_iterator pc = scriptSig.begin();\n         std::vector<unsigned char> data;\n         while (pc < scriptSig.end()) {\n             opcodetype opcode;\n             scriptSig.GetOp(pc, opcode, data);\n         }\n         CScript subscript(data.begin(), data.end());\n-        if (subscript.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        if (IsWitnessProgram(subscript, witnessversion, witnessprogram)) {\n             return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "6b65bf7d634792d2068259a2b14dee7adbcaf797",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjY1YmY3ZDYzNDc5MmQyMDY4MjU5YTJiMTRkZWU3YWRiY2FmNzk3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-23T21:13:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-26T23:30:08Z"
      },
      "message": "Make EvalScript operate on Span\n\nThis introduces a version of EvalScript that is independent from the storage type.",
      "tree": {
        "sha": "f8722a52fb8c4e63097a3ccbd96f7276df462fea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8722a52fb8c4e63097a3ccbd96f7276df462fea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b65bf7d634792d2068259a2b14dee7adbcaf797",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b65bf7d634792d2068259a2b14dee7adbcaf797",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b65bf7d634792d2068259a2b14dee7adbcaf797",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b65bf7d634792d2068259a2b14dee7adbcaf797/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddc1fb00d8f678fd4af60ff34f5f3ac1f42e9e7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "a1b02e1b504ba8ead9edf7146684d437a62e2b5c",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b65bf7d634792d2068259a2b14dee7adbcaf797/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b65bf7d634792d2068259a2b14dee7adbcaf797/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6b65bf7d634792d2068259a2b14dee7adbcaf797",
        "patch": "@@ -10,6 +10,7 @@\n #include <crypto/sha256.h>\n #include <pubkey.h>\n #include <script/script.h>\n+#include <span.h>\n #include <uint256.h>\n \n typedef std::vector<unsigned char> valtype;\n@@ -225,7 +226,7 @@ bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, co\n     return true;\n }\n \n-bool CheckMinimalPush(const valtype& data, opcodetype opcode) {\n+bool CheckMinimalPush(Span<const unsigned char> data, opcodetype opcode) {\n     // Excludes OP_1NEGATE, OP_1-16 since they are by definition minimal\n     assert(0 <= opcode && opcode <= OP_PUSHDATA4);\n     if (data.size() == 0) {\n@@ -342,12 +343,12 @@ class ConditionStack {\n };\n }\n \n-static bool EvalChecksigPreTapscript(const valtype& vchSig, const valtype& vchPubKey, CScript::const_iterator pbegincodehash, CScript::const_iterator pend, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& fSuccess)\n+static bool EvalChecksigPreTapscript(const valtype& vchSig, const valtype& vchPubKey, Span<const unsigned char> codehash, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& fSuccess)\n {\n     assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0);\n \n     // Subset of script starting at the most recent codeseparator\n-    CScript scriptCode(pbegincodehash, pend);\n+    CScript scriptCode(codehash.begin(), codehash.end());\n \n     // Drop the signature in pre-segwit scripts but not segwit scripts\n     if (sigversion == SigVersion::BASE) {\n@@ -413,12 +414,12 @@ static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, Scr\n  * A return value of false means the script fails entirely. When true is returned, the\n  * success variable indicates whether the signature check itself succeeded.\n  */\n-static bool EvalChecksig(const valtype& sig, const valtype& pubkey, CScript::const_iterator pbegincodehash, CScript::const_iterator pend, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n+static bool EvalChecksig(const valtype& sig, const valtype& pubkey, Span<const unsigned char> codehash, ScriptExecutionData& execdata, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& success)\n {\n     switch (sigversion) {\n     case SigVersion::BASE:\n     case SigVersion::WITNESS_V0:\n-        return EvalChecksigPreTapscript(sig, pubkey, pbegincodehash, pend, flags, checker, sigversion, serror, success);\n+        return EvalChecksigPreTapscript(sig, pubkey, codehash, flags, checker, sigversion, serror, success);\n     case SigVersion::TAPSCRIPT:\n         return EvalChecksigTapscript(sig, pubkey, execdata, flags, checker, sigversion, serror, success);\n     case SigVersion::TAPROOT:\n@@ -428,7 +429,7 @@ static bool EvalChecksig(const valtype& sig, const valtype& pubkey, CScript::con\n     assert(false);\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror)\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -441,11 +442,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     // sigversion cannot be TAPROOT here, as it admits no script execution.\n     assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0 || sigversion == SigVersion::TAPSCRIPT);\n \n-    CScript::const_iterator pc = script.begin();\n-    CScript::const_iterator pend = script.end();\n-    CScript::const_iterator pbegincodehash = script.begin();\n+    Span<const unsigned char> pc = script;\n+    Span<const unsigned char> codehash = script;\n     opcodetype opcode;\n-    valtype vchPushValue;\n     ConditionStack vfExec;\n     std::vector<valtype> altstack;\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n@@ -460,15 +459,17 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n \n     try\n     {\n-        for (; pc < pend; ++opcode_pos) {\n+        for (; pc.size() > 0; ++opcode_pos) {\n             bool fExec = vfExec.all_true();\n \n             //\n             // Read instruction\n             //\n-            if (!script.GetOp(pc, opcode, vchPushValue))\n+            Span<const unsigned char> push_value;\n+            if (!GetScriptOp(pc, opcode, &push_value)) {\n                 return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n-            if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+            }\n+            if (push_value.size() > MAX_SCRIPT_ELEMENT_SIZE)\n                 return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n \n             if (sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) {\n@@ -500,10 +501,10 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 return set_error(serror, SCRIPT_ERR_OP_CODESEPARATOR);\n \n             if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4) {\n-                if (fRequireMinimal && !CheckMinimalPush(vchPushValue, opcode)) {\n+                if (fRequireMinimal && !CheckMinimalPush(push_value, opcode)) {\n                     return set_error(serror, SCRIPT_ERR_MINIMALDATA);\n                 }\n-                stack.push_back(vchPushValue);\n+                stack.emplace_back(push_value.begin(), push_value.end());\n             } else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))\n             switch (opcode)\n             {\n@@ -1075,7 +1076,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     // script, even in an unexecuted branch (this is checked above the opcode case statement).\n \n                     // Hash starts after the code separator\n-                    pbegincodehash = pc;\n+                    codehash = pc;\n                     execdata.m_codeseparator_pos = opcode_pos;\n                 }\n                 break;\n@@ -1091,7 +1092,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     valtype& vchPubKey = stacktop(-1);\n \n                     bool fSuccess = true;\n-                    if (!EvalChecksig(vchSig, vchPubKey, pbegincodehash, pend, execdata, flags, checker, sigversion, serror, fSuccess)) return false;\n+                    if (!EvalChecksig(vchSig, vchPubKey, codehash, execdata, flags, checker, sigversion, serror, fSuccess)) return false;\n                     popstack(stack);\n                     popstack(stack);\n                     stack.push_back(fSuccess ? vchTrue : vchFalse);\n@@ -1118,7 +1119,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     const valtype& pubkey = stacktop(-1);\n \n                     bool success = true;\n-                    if (!EvalChecksig(sig, pubkey, pbegincodehash, pend, execdata, flags, checker, sigversion, serror, success)) return false;\n+                    if (!EvalChecksig(sig, pubkey, codehash, execdata, flags, checker, sigversion, serror, success)) return false;\n                     popstack(stack);\n                     popstack(stack);\n                     popstack(stack);\n@@ -1160,7 +1161,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n \n                     // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n+                    CScript scriptCode(codehash.begin(), codehash.end());\n \n                     // Drop the signature in pre-segwit scripts but not segwit scripts\n                     for (int k = 0; k < nSigsCount; k++)\n@@ -1258,7 +1259,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     return set_success(serror);\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     ScriptExecutionData execdata;\n     return EvalScript(stack, script, flags, checker, sigversion, execdata, serror);"
      },
      {
        "sha": "59b0d0dd1a64e372a3eef168373743a6f1406e0f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b65bf7d634792d2068259a2b14dee7adbcaf797/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b65bf7d634792d2068259a2b14dee7adbcaf797/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=6b65bf7d634792d2068259a2b14dee7adbcaf797",
        "patch": "@@ -310,13 +310,13 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n     }\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);\n \n size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n \n-bool CheckMinimalPush(const std::vector<unsigned char>& data, opcodetype opcode);\n+bool CheckMinimalPush(Span<const unsigned char> data, opcodetype opcode);\n \n int FindAndDelete(CScript& script, const CScript& b);\n "
      }
    ]
  },
  {
    "sha": "1f1e1bf569a94f5f0d882386afef595c881c048b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjFlMWJmNTY5YTk0ZjVmMGQ4ODIzODZhZmVmNTk1Yzg4MWMwNDhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-25T03:02:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-27T01:11:47Z"
      },
      "message": "Make VerifyScript operate on Span",
      "tree": {
        "sha": "2b4af0324390d0bfba3852b53103d9cbae5444e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b4af0324390d0bfba3852b53103d9cbae5444e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f1e1bf569a94f5f0d882386afef595c881c048b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f1e1bf569a94f5f0d882386afef595c881c048b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f1e1bf569a94f5f0d882386afef595c881c048b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f1e1bf569a94f5f0d882386afef595c881c048b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b65bf7d634792d2068259a2b14dee7adbcaf797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b65bf7d634792d2068259a2b14dee7adbcaf797",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b65bf7d634792d2068259a2b14dee7adbcaf797"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 24,
      "deletions": 31
    },
    "files": [
      {
        "sha": "e0633c7258c7cadbc9fcd15c679767f562a7e35a",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 29,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=1f1e1bf569a94f5f0d882386afef595c881c048b",
        "patch": "@@ -1809,16 +1809,14 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptExecutionData& execdata, ScriptError* serror)\n+static bool ExecuteWitnessScript(Span<const valtype> stack, Span<const unsigned char> script, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptExecutionData& execdata, ScriptError* serror)\n {\n-    std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n-\n     if (sigversion == SigVersion::TAPSCRIPT) {\n         // OP_SUCCESSx processing overrides everything, including stack element size limits\n-        CScript::const_iterator pc = scriptPubKey.begin();\n-        while (pc < scriptPubKey.end()) {\n+        Span<const unsigned char> pc{script};\n+        while (pc.size()) {\n             opcodetype opcode;\n-            if (!scriptPubKey.GetOp(pc, opcode)) {\n+            if (!GetScriptOp(pc, opcode, nullptr)) {\n                 // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n                 return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n             }\n@@ -1841,11 +1839,12 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     }\n \n     // Run the script interpreter.\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, execdata, serror)) return false;\n+    std::vector<valtype> mutable_stack(stack.begin(), stack.end());\n+    if (!EvalScript(mutable_stack, script, flags, checker, sigversion, execdata, serror)) return false;\n \n     // Scripts inside witness implicitly require cleanstack behaviour\n-    if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n-    if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    if (mutable_stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n+    if (!CastToBool(mutable_stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n     return true;\n }\n \n@@ -1887,15 +1886,15 @@ static bool IsPushOnly(Span<const unsigned char> script)\n     return true;\n }\n \n-static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n+static bool VerifyTaprootCommitment(Span<const unsigned char> control, Span<const unsigned char> program, Span<const unsigned char> script, uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n     //! The internal pubkey (x-only, so no Y coordinate parity).\n-    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    const XOnlyPubKey p{uint256(control.subspan(1, TAPROOT_CONTROL_BASE_SIZE - 1))};\n     //! The output pubkey (taken from the scriptPubKey).\n     const XOnlyPubKey q{uint256(program)};\n     // Compute the tapleaf hash.\n-    tapleaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n+    tapleaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << COMPACTSIZE(script.size()) << script).GetSHA256();\n     // Compute the Merkle root from the leaf and the provided path.\n     uint256 k = tapleaf_hash;\n     for (int i = 0; i < path_len; ++i) {\n@@ -1914,9 +1913,8 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n     return q.CheckPayToContract(p, k, control[0] & 1);\n }\n \n-static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, Span<const unsigned char> program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n {\n-    CScript exec_script; //!< Actually executed script (last stack item in P2WSH; implied P2PKH script in P2WPKH; leaf script in P2TR)\n     Span<const valtype> stack{witness.stack};\n     ScriptExecutionData execdata;\n \n@@ -1926,8 +1924,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (stack.size() == 0) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n-            const valtype& script_bytes = SpanPopBack(stack);\n-            exec_script = CScript(script_bytes.begin(), script_bytes.end());\n+            const valtype& exec_script = SpanPopBack(stack);\n             uint256 hash_exec_script;\n             CSHA256().Write(exec_script.data(), exec_script.size()).Finalize(hash_exec_script.begin());\n             if (memcmp(hash_exec_script.begin(), program.data(), 32)) {\n@@ -1939,7 +1936,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n-            exec_script << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            CScript exec_script = CScript() << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n             return ExecuteWitnessScript(stack, exec_script, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n@@ -1966,8 +1963,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             // Script path spending (stack size is >1 after removing optional annex)\n             const valtype& control = SpanPopBack(stack);\n-            const valtype& script_bytes = SpanPopBack(stack);\n-            exec_script = CScript(script_bytes.begin(), script_bytes.end());\n+            const valtype& exec_script = SpanPopBack(stack);\n             if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n                 return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n             }\n@@ -1996,7 +1992,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n     // There is intentionally no return statement here, to be able to use \"control reaches end of non-void function\" warnings to detect gaps in the logic above.\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+bool VerifyScript(Span<const unsigned char> scriptSig, Span<const unsigned char> scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     static const CScriptWitness emptyWitness;\n     if (witness == nullptr) {\n@@ -2028,11 +2024,9 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n     // Bare witness programs\n     int witnessversion;\n-    std::vector<unsigned char> witnessprogram;\n-    Span<const unsigned char> witnessprogram_span;\n+    Span<const unsigned char> witnessprogram;\n     if (flags & SCRIPT_VERIFY_WITNESS) {\n-        if (IsWitnessProgram(scriptPubKey, witnessversion, witnessprogram_span)) {\n-            witnessprogram.assign(witnessprogram_span.begin(), witnessprogram_span.end());\n+        if (IsWitnessProgram(scriptPubKey, witnessversion, witnessprogram)) {\n             hadWitness = true;\n             if (scriptSig.size() != 0) {\n                 // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n@@ -2062,8 +2056,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         // an empty stack and the EvalScript above would return false.\n         assert(!stack.empty());\n \n-        const valtype& pubKeySerialized = stack.back();\n-        CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n+        const valtype pubKey2 = std::move(stack.back());\n         popstack(stack);\n \n         if (!EvalScript(stack, pubKey2, flags, checker, SigVersion::BASE, serror))\n@@ -2076,10 +2069,10 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n \n         // P2SH witness program\n         if (flags & SCRIPT_VERIFY_WITNESS) {\n-            if (IsWitnessProgram(pubKey2, witnessversion, witnessprogram_span)) {\n-                witnessprogram.assign(witnessprogram_span.begin(), witnessprogram_span.end());\n+            if (IsWitnessProgram(pubKey2, witnessversion, witnessprogram)) {\n                 hadWitness = true;\n-                if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n+                const CScript expected_scriptsig = CScript() << pubKey2;\n+                if (scriptSig != expected_scriptsig) {\n                     // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n                     // reintroduce malleability.\n                     return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);"
      },
      {
        "sha": "8a88007b5da0b95c6f0df8a1a4e851167c736720",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=1f1e1bf569a94f5f0d882386afef595c881c048b",
        "patch": "@@ -312,7 +312,7 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);\n+bool VerifyScript(Span<const unsigned char> scriptSig, Span<const unsigned char> scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);\n \n size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n "
      },
      {
        "sha": "318597d8db43999a850acf896005c69baab68350",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f1e1bf569a94f5f0d882386afef595c881c048b/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=1f1e1bf569a94f5f0d882386afef595c881c048b",
        "patch": "@@ -530,7 +530,7 @@ class CScript : public CScriptBase\n     bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n-    /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    /** Called by IsStandardTx. */\n     bool IsPushOnly(const_iterator pc) const;\n     bool IsPushOnly() const;\n "
      }
    ]
  },
  {
    "sha": "a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjNlNWY1YjIwOWY4OWE3ZDBkNGMxZDdjYmQzMmEzMzk5MTY5OTZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-27T21:59:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-27T01:11:51Z"
      },
      "message": "Avoid a few instances of CScript in interpreter",
      "tree": {
        "sha": "a3d687aa2d49b88ab591fc2c8bb26e47b96ab25b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3d687aa2d49b88ab591fc2c8bb26e47b96ab25b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f1e1bf569a94f5f0d882386afef595c881c048b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f1e1bf569a94f5f0d882386afef595c881c048b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f1e1bf569a94f5f0d882386afef595c881c048b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "20fde03aade99f8f86825a2df08556075a93f10c",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
        "patch": "@@ -1936,7 +1936,9 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n-            CScript exec_script = CScript() << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n+            //! The script \"OP_DUP OP_HASH160 <program> OP_EQUALVERIFY OP_CHECKSIG\".\n+            unsigned char exec_script[25] = {OP_DUP, OP_HASH160, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, OP_EQUALVERIFY, OP_CHECKSIG};\n+            std::copy(program.begin(), program.end(), exec_script + 3);\n             return ExecuteWitnessScript(stack, exec_script, flags, SigVersion::WITNESS_V0, checker, execdata, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n@@ -2071,8 +2073,7 @@ bool VerifyScript(Span<const unsigned char> scriptSig, Span<const unsigned char>\n         if (flags & SCRIPT_VERIFY_WITNESS) {\n             if (IsWitnessProgram(pubKey2, witnessversion, witnessprogram)) {\n                 hadWitness = true;\n-                const CScript expected_scriptsig = CScript() << pubKey2;\n-                if (scriptSig != expected_scriptsig) {\n+                if (scriptSig.size() != pubKey2.size() + 1 || scriptSig[0] != pubKey2.size()) {\n                     // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n                     // reintroduce malleability.\n                     return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);"
      }
    ]
  },
  {
    "sha": "5514a826abd2311d421c11dd9ebbdff9b3d249d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTE0YTgyNmFiZDIzMTFkNDIxYzExZGQ5ZWJiZGZmOWIzZDI0OWQx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-25T21:16:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-05-27T01:11:51Z"
      },
      "message": "Make CountWitnessSigOps operate on Span",
      "tree": {
        "sha": "50b5f0f1cde2d2a862c4f929300730fa31666d9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50b5f0f1cde2d2a862c4f929300730fa31666d9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5514a826abd2311d421c11dd9ebbdff9b3d249d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5514a826abd2311d421c11dd9ebbdff9b3d249d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5514a826abd2311d421c11dd9ebbdff9b3d249d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5514a826abd2311d421c11dd9ebbdff9b3d249d1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a23e5f5b209f89a7d0d4c1d7cbd32a339916996f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1d3658f9c69426b9e58b37eb5e7c189a0550ad50",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5514a826abd2311d421c11dd9ebbdff9b3d249d1/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5514a826abd2311d421c11dd9ebbdff9b3d249d1/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5514a826abd2311d421c11dd9ebbdff9b3d249d1",
        "patch": "@@ -2130,7 +2130,7 @@ size_t static WitnessSigOps(int witversion, Span<const unsigned char> witprogram\n     return 0;\n }\n \n-size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)\n+size_t CountWitnessSigOps(Span<const unsigned char> scriptSig, Span<const unsigned char> scriptPubKey, const CScriptWitness* witness, unsigned int flags)\n {\n     static const CScriptWitness witnessEmpty;\n \n@@ -2146,13 +2146,12 @@ size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey,\n     }\n \n     if (IsPayToScriptHash(scriptPubKey) && IsPushOnly(scriptSig)) {\n-        CScript::const_iterator pc = scriptSig.begin();\n-        std::vector<unsigned char> data;\n-        while (pc < scriptSig.end()) {\n+        Span<const unsigned char> pc = scriptSig;\n+        Span<const unsigned char> subscript;\n+        while (pc.size()) {\n             opcodetype opcode;\n-            scriptSig.GetOp(pc, opcode, data);\n+            GetScriptOp(pc, opcode, &subscript);\n         }\n-        CScript subscript(data.begin(), data.end());\n         if (IsWitnessProgram(subscript, witnessversion, witnessprogram)) {\n             return WitnessSigOps(witnessversion, witnessprogram, witness ? *witness : witnessEmpty);\n         }"
      },
      {
        "sha": "7df65fc7495ed570af1acc06dc9d176353acf168",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5514a826abd2311d421c11dd9ebbdff9b3d249d1/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5514a826abd2311d421c11dd9ebbdff9b3d249d1/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=5514a826abd2311d421c11dd9ebbdff9b3d249d1",
        "patch": "@@ -314,7 +314,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsi\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, Span<const unsigned char> script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(Span<const unsigned char> scriptSig, Span<const unsigned char> scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);\n \n-size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n+size_t CountWitnessSigOps(Span<const unsigned char> scriptSig, Span<const unsigned char> scriptPubKey, const CScriptWitness* witness, unsigned int flags);\n \n bool CheckMinimalPush(Span<const unsigned char> data, opcodetype opcode);\n "
      }
    ]
  }
]