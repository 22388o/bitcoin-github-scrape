laanwj,2018-04-25T13:51:27Z,"Makes `interpreter.cpp` more self-contained, that's good.\nVerified that:\n- Consensus `IsPayToScriptHash` matches `CScript::IsPayToScriptHash`: copy-only apart from variable names\n- Consensus `IsWitnessProgram` matches `CScript::IsWitnessProgram`: \n  - a size_t becomes ptr_diff_t: not an issue as only positive values are possible (unsigned char + 2)\n  - `std::vector<unsigned char>(this->b",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-384294167,384294167,
TheBlueMatt,2018-04-27T16:40:27Z,This seems to be lacking a bunch of motivation. Can you clarify *why* you want to run a script stored in a span?,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-385026068,385026068,
sipa,2018-04-27T16:51:25Z,"@TheBlueMatt They're not stored in a Span; a Span is just a way to refer to a script stored anywhere (vector, array, prevector, whatever custom structure that can hold a continuous sequence of bytes).\n\nI'll add some more motivation.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-385029327,385029327,
TheBlueMatt,2018-04-27T16:55:43Z,"Suresure, I was asking for motivation of where we want to do this in the immediate future (do you have any branches that run scripts in non-prevector form?). The only place I can think of it being useful is in libbitcoinconsensus.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-385030495,385030495,
sipa,2018-04-27T17:02:53Z,"@TheBlueMatt No code to show, but I added some thoughts to the PR description.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-385032610,385032610,
TheBlueMatt,2018-04-27T17:12:33Z,"Ah, the scriptPubKey/scriptSig distinction seems like a reasonable idea. Would love to see a branch with that implemented to see the feasibility of using this in the short-term after a merge.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-385035134,385035134,
ryanofsky,2018-05-11T14:08:02Z,Related discussion in IRC: https://botbot.me/freenode/bitcoin-core-dev/msg/99929791/,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-388374394,388374394,
sipa,2018-05-31T18:53:29Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-393639530,393639530,
achow101,2018-06-11T22:58:16Z,utACK 6ae8a5d681b181c7cb772778e18285139df74ece,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-396412833,396412833,
jb55,2018-06-21T01:04:20Z,utACK ae8df82ad34a6baaf883411308255e6c6d093c53 ,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-398944076,398944076,
promag,2018-06-21T19:01:35Z,utACK ae8df82.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-399209511,399209511,
achow101,2018-06-29T22:05:54Z,re-utACK ae8df82ad34a6baaf883411308255e6c6d093c53,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-401485757,401485757,
sipa,2018-08-01T18:42:13Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-409680069,409680069,
DrahtBot,2018-09-21T15:18:50Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22278 (Add LIFETIMEBOUND to CScript where needed by MarcoFalke)\n* #22166 (Add support for inferring tr() descriptors by ",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-423570136,423570136,
DrahtBot,2019-04-28T19:11:52Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 269 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-487407224,487407224,
sipa,2019-10-03T15:35:30Z,Will rebase next week.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-537999032,537999032,
sipa,2019-10-10T19:45:23Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-540752817,540752817,
sipa,2019-11-09T19:33:58Z,"Rebased, and also made `GetScriptOp` return a span for the data pushed.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-552130130,552130130,
theStack,2020-02-02T16:24:32Z,"> Related discussion in IRC: https://botbot.me/freenode/bitcoin-core-dev/msg/99929791/\n\nThe link is dead unfortunately, is the IRC log still available at another place?",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-581151288,581151288,
sipa,2020-03-14T02:07:34Z,Rebased (nontrivially) on the now-merged #18002.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-598997297,598997297,
sipa,2020-03-14T22:05:12Z,Rebased on top of the now-merged #16902.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-599140625,599140625,
sipa,2020-03-27T23:18:36Z,Rebased now that #18388 is merged. Also added a commit to get rid of two more unnecessary CScript instances in the verification code.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-605353057,605353057,
sipa,2020-04-12T20:38:49Z,Rebased now that #18422 is merged.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-612672816,612672816,
adamjonas,2020-06-18T16:57:34Z,"For those looking to review - this had 4 pre-rebase utACKs (laanwj, jb55, achow101, promag) and a code review ACK (theStack) with no NACKs or any show-stopping concerns raised.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-646172018,646172018,
jb55,2020-06-18T18:04:40Z,post-rebase Concept ACK,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-646222140,646222140,
sipa,2020-06-19T18:33:29Z,(Trivially) rebased now that #18468 is merged.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-646808620,646808620,
theuni,2020-06-19T19:30:03Z,"Just a general question/concern as I re-review: I don't see in the ```std::span``` docs what the guarantees are if the underlying structure is extended after the span is created. If it's supposed to remain generally sane (which I would vaguely expect because it's required to be contiguous), I'm nervous about prevector:\n```c++\nint main()\n{\n    std::vector<int> foo;\n    foo.push_back(1);\",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-646829093,646829093,
sipa,2020-06-19T19:38:19Z,"@theuni I imagine that the guarantees for any container are that anything that may invalidate references, invalidates a span over those elements.\n\nIt's a good point that we should document reference/iterator invalidation for our custom data structures like prevector (which could be something like ""extending a prevector to any size beyond its preallocated limit invalidates all references"").\n\nBo",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-646831877,646831877,
hebasto,2020-08-06T11:34:11Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-669874123,669874123,
hebasto,2020-08-06T12:03:30Z,"> > Related discussion in IRC: https://botbot.me/freenode/bitcoin-core-dev/msg/99929791/\n> \n> The link is dead unfortunately, is the IRC log still available at another place?\n\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2018-05-10.html#l-524",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-669886290,669886290,
hebasto,2020-08-06T12:14:37Z,"> As mentioned on IRC, I am a little nervous about the greedy Span constructor as I prefer the explicitness of MakeSpan, but as @sipa pointed out, it matches std::span's behavior.\n\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2020-06-19.html#l-488",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-669890888,669890888,
sipa,2021-05-25T03:25:27Z,"Rebased on top of, and integrated with, the Taproot validation logic.",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-847500300,847500300,
DrahtBot,2021-06-23T13:13:52Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-866824592,866824592,
MarcoFalke,2021-06-23T13:21:13Z,Still wondering about https://github.com/bitcoin/bitcoin/pull/13062#discussion_r478629130 btw,https://github.com/bitcoin/bitcoin/pull/13062#issuecomment-866830602,866830602,
promag,2018-04-23T23:54:52Z,"Note, equivalent to `count = std::dynamic_extent` in std::span.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r183571007,183571007,src/span.h
theuni,2018-04-27T22:29:48Z,"I believe this needs a check before dereference. Before, it would've been caught in the real GetScriptOp() by the newly removed\n```c++\nif (pc >= end)\n    return false;\n```",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184820685,184820685,src/script/script.cpp
theuni,2018-04-27T22:45:40Z,This seems unnecessarily brittle. How about caching the before-size and adding back the difference from the final script.size() ?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184822784,184822784,src/script/script.cpp
theuni,2018-04-27T23:16:45Z,how did ```script[1]``` sneak in here?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184826273,184826273,src/script/interpreter.cpp
sipa,2018-04-28T00:04:36Z,"Fixed, going to add a test.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184830547,184830547,src/script/interpreter.cpp
sipa,2018-04-28T00:04:46Z,"Good catch, fixed.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184830564,184830564,src/script/script.cpp
sipa,2018-04-28T00:04:58Z,That's indeed cleaner; done.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r184830577,184830577,src/script/script.cpp
sipa,2018-04-30T22:06:11Z,"Done, added a test in a follow-up commit.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r185124184,185124184,src/script/interpreter.cpp
sipa,2018-05-22T00:34:08Z,"Which is the default, so I think it's fine. Generally all methods here mimic a subset of the behaviour of std::span, but sometimes with optional arguments/types omitted.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r189749671,189749671,src/span.h
martinus,2018-05-31T15:24:34Z,"I think it's a bit dangerous to use `noexcept` for `operator[]`. If Span is used for a custom collection that might throw an exception here, using noexcept here will cause the app to terminate. `std::span`'s operator[] also does not use noexcept here either: http://en.cppreference.com/w/cpp/container/span/operator_at\n\nSame goes for `subspan`, it might be better to throw an exception for an inv",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r192138723,192138723,src/span.h
sipa,2018-05-31T15:26:47Z,m_data is just a pointer; operator[] is pointer arithmetic + dereferencing of a pointer. There is no chance for anything custom.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r192139489,192139489,src/span.h
martinus,2018-05-31T15:35:36Z,ah you are of course right,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r192142504,192142504,src/span.h
promag,2018-06-11T13:03:13Z,AFAICT span end can change whereas before the end iterator couldn't change. Is this worth noting?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r194395324,194395324,src/script/script.cpp
promag,2018-06-11T13:05:21Z,"Could be `pc += script.begin() - &*pc`?\n\nIf so `old_size` above is not necessary if you add `Span(C* begin, C* end)` constructor.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r194395946,194395946,src/script/script.cpp
promag,2018-06-11T13:07:37Z,Should not touch `pc` if `!ret`?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r194396602,194396602,src/script/script.cpp
sipa,2018-06-18T22:46:27Z,Noted.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196248589,196248589,src/script/script.cpp
sipa,2018-06-18T22:47:30Z,"> Could be `pc += script.begin() - &*pc`?\n\nNice, done.\n\n> Should not touch `pc` if `!ret`?\n\nYes it should. The old `GetScriptOp` implementation operating on iterators did too.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196248776,196248776,src/script/script.cpp
promag,2018-06-18T22:58:21Z,Okay.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196250627,196250627,src/script/script.cpp
promag,2018-06-18T23:05:03Z,üëÄ ,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196251771,196251771,src/script/script.cpp
sipa,2018-06-18T23:09:46Z,"I'm not sure what you're asking here. Yes, it's a change, but I don't think it significant enough to point out in the commit, and certainly not in the code itself.\n\nIf you mean that it should be pointed out to other reviewers, I agree - and you just did :)",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196252546,196252546,src/script/script.cpp
promag,2018-06-19T09:34:44Z,Ok then.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196355787,196355787,src/script/script.cpp
jb55,2018-06-21T00:52:06Z,Just a thought: wouldn't asserting `pos < m_size` be a quick win here to catch out of bounds bugs during development?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r196984051,196984051,src/span.h
sipa,2018-06-22T02:20:15Z,"Sounds like a good idea to add in a form of debug mode (like `DEBUG_ADDRMAN` etc), but perhaps independently of this PR?",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r197324958,197324958,src/span.h
jb55,2018-06-22T02:29:22Z,üëç. usually asserts are disabled when NDEBUG is defined but it [looks like](https://github.com/bitcoin/bitcoin/blob/000abbb6b07410357a928768d7d56465ba0d3bac/src/validation.cpp#L51-L53) asserts can't be disabled in bitcoin for some reason? so would need to do something custom... ¬Ø\_(„ÉÑ)_/¬Ø,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r197325832,197325832,src/span.h
sipa,2018-06-22T02:35:36Z,"Yes, we already have that; see DEBUG_ADDRMAN, DEBUG_LOCKORDER, DEBUG_LOCKCONTENTION. More could be added.\n",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r197327016,197327016,src/span.h
theStack,2020-02-02T16:30:49Z,nit: Is there any reason why an empty subspan on `script` ist preferred over just the default constructor (i.e. `*data_out = Span<const unsigned char>();`? For a zero-size span the address doesn't seem to matter.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373858351,373858351,src/script/script.cpp
theStack,2020-02-02T16:35:27Z,"This could also be done without constructing a new vector instance through `pvchRet->assign(...,...);`?",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373858682,373858682,src/script/script.cpp
theStack,2020-02-02T16:37:33Z,"With the changes, `vchPushValue` is now unused and can be deleted.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373858811,373858811,src/script/interpreter.cpp
theStack,2020-02-02T16:43:26Z,nit: Braces can be removed here as the if-body only consists of one single statement (to be consistent with the remaining ifs in the same function).,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373859204,373859204,src/script/interpreter.cpp
theStack,2020-02-02T16:49:25Z,"As `temp_script` is only used once, it could be declared and initialized immediately (as `const`) below at the place where it is needed.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373859580,373859580,src/script/interpreter.cpp
theStack,2020-02-02T16:51:43Z,"Given that `temp_script` is declared as `const` (see previous reviews comment above), one can simply use `MakeSpan(temp_script)` here.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373859716,373859716,src/script/interpreter.cpp
sipa,2020-02-03T04:29:59Z,"No reason, changed it.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918216,373918216,src/script/script.cpp
sipa,2020-02-03T04:30:08Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918237,373918237,src/script/script.cpp
sipa,2020-02-03T04:30:20Z,Nice find. Gone.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918264,373918264,src/script/interpreter.cpp
sipa,2020-02-03T04:31:24Z,"I'd rather not. The style guide only allows brace-less ifs if the then clause is on the same line as the if condition. Doing so would make the line a bit long in my opinion.\n\nThe fact that it's inconsistent with the code around it doesn't matter.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918418,373918418,src/script/interpreter.cpp
sipa,2020-02-03T04:32:10Z,"That's unfortunately incorrect. The `script` variable is a Span which doesn't have its own storage, so it needs the `temp_script` to remain intact over its lifetime. I've added a comment to clarify.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918511,373918511,src/script/interpreter.cpp
sipa,2020-02-03T04:32:34Z,That does not work (see other comment).,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r373918556,373918556,src/script/interpreter.cpp
theStack,2020-02-04T12:58:51Z,"Whoops, you are of course right, `temp_script` wouldn't be alive anymore when `script` is used below. The evil thing with errors like those is that they are hard to get catch by tests: when I tried out my suggestion all of the unit tests still passed successfully. Obviously even though `temp_script` wasn't alive anymore the data at the address was still there unmodified.\nOnly creating a destruct",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r374655110,374655110,src/script/interpreter.cpp
theStack,2020-02-04T13:10:01Z,"Oh, my assumption was that mimicing the surrounding style was favored over new style rather than the other way around, mea culpa.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r374659931,374659931,src/script/interpreter.cpp
theuni,2020-06-19T20:17:11Z,"This would be much less confusing to read if reordered:\n```c++\nuint256 hashScriptPubKey;\nCSHA256().Write(stack.back().data(), stack.back().size()).Finalize(hashScriptPubKey.begin());\nif (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n    return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n}\nreturn ExecuteWitnessScript(stack, SpanPopBack(stack), flags, SigVersion::",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r443026997,443026997,src/script/interpreter.cpp
sipa,2020-06-26T21:21:30Z,"Huh, this code just didn't make sense - it had `script` already, why was it accessing it through `witness.stack.back()`?\n\nI've changed it to just use `Write(script.data(), script.size())`.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r446415552,446415552,src/script/interpreter.cpp
pinheadmz,2020-06-29T22:29:25Z,Do we get the benefit of the `Span` here even though it's only used in a short context?,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r447294589,447294589,src/script/interpreter.cpp
sipa,2020-07-01T04:11:39Z,"Not sure what you mean by ""the benefit of the `Span`"". Spans are a more readable way of dealing with span-like data, but it depends what you care about, and what you compare with.\n\nCompared to the current code, it's more efficient: it's avoiding an allocation and a copy (vchPushValue was storing a copy of the pushed data). A copy still happens when emplacing on the stack, but only in executed ",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r448104318,448104318,src/script/interpreter.cpp
pinheadmz,2020-07-01T11:16:59Z,"I see, thanks",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r448293401,448293401,src/script/interpreter.cpp
theStack,2020-07-23T12:26:51Z,"Strictly speaking that's not semantically equivalent to the code replaced. Before it would compare `scriptSig` and the pushed `redeem_script` byte-by-byte, now with the change it only compares that the size matches and the first byte (the push).\nI guess that is indended though, as `redeem_script` is derived from `scriptSig` above anyways, and hence the content comparison is not needed?",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r459410149,459410149,src/script/interpreter.cpp
hebasto,2020-08-06T18:26:10Z,"591f1037e474ffb1c9f84926bb8f846a515096e9\n\nnit: Mind adding `#include <algorithm>` ?",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r466604751,466604751,src/script/interpreter.cpp
MarcoFalke,2020-08-27T18:55:57Z,"Any reason to make this private? `static` makes it harder to test and also the ""other"" version of IsPushOnly can't call this to avoid code duplication.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r478629130,478629130,src/script/interpreter.cpp
ajtowns,2020-09-22T12:46:21Z,"Was there a bad rebase here somewhere? The ""Introduce consensus versions of script type checks on Span"" doesn't actually use the new code and there's not a separate commit for `VerifyWitnessProgram` accepting spans -- both those are instead part of ""gMake VerifyScript operate on Span"" which has a weird typo in the commit title. (That commit also has a typo in the description: ""storare"")",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r492703713,492703713,src/script/interpreter.cpp
ajtowns,2020-09-22T12:57:29Z,"That change makes me twitchy; maybe `static_assert(WITNESS_V0_KEYHASH_SIZE==20, ""consensus critical parameter will result in buffer overrun if changed"");` ?",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r492711092,492711092,src/script/interpreter.cpp
ajtowns,2020-09-22T13:14:50Z,"If you rebase, could move the test additions to the first commit, since they're testing things that are already true.",https://github.com/bitcoin/bitcoin/pull/13062#discussion_r492723037,492723037,src/test/data/script_tests.json
sipa,2021-05-25T03:28:59Z,This commit just introduces these functions; they're used later on.,https://github.com/bitcoin/bitcoin/pull/13062#discussion_r638426292,638426292,src/script/interpreter.cpp
