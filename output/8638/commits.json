[
  {
    "sha": "f012a857f5e9b3bdd11a64dd0c16b4c805076594",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDEyYTg1N2Y1ZTliM2JkZDExYTY0ZGQwYzE2YjRjODA1MDc2NTk0",
    "commit": {
      "author": {
        "name": "djpnewton",
        "email": "djpnewton@gmail.com",
        "date": "2016-08-31T23:52:47Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2016-09-01T10:12:19Z"
      },
      "message": "rest.cpp: change HTTP_INTERNAL_SERVER_ERROR to HTTP_BAD_REQUEST",
      "tree": {
        "sha": "eaa981fbaccf896c2edbc3a8a0413bf3c091e053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaa981fbaccf896c2edbc3a8a0413bf3c091e053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f012a857f5e9b3bdd11a64dd0c16b4c805076594",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f012a857f5e9b3bdd11a64dd0c16b4c805076594",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f012a857f5e9b3bdd11a64dd0c16b4c805076594",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f012a857f5e9b3bdd11a64dd0c16b4c805076594/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84decb54f2592d543cb557bf46ce54cbcd2959e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84decb54f2592d543cb557bf46ce54cbcd2959e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84decb54f2592d543cb557bf46ce54cbcd2959e8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f2d8ca3a1517b49d2cca2e9544079a722e739141",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f012a857f5e9b3bdd11a64dd0c16b4c805076594/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f012a857f5e9b3bdd11a64dd0c16b4c805076594/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f012a857f5e9b3bdd11a64dd0c16b4c805076594",
        "patch": "@@ -59,6 +59,10 @@ git merge commit are mentioned.\n \n ### RPC and REST\n \n+UTXO set query (`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`) responses\n+were changed to return status code HTTP_BAD_REQUEST (400) instead of HTTP_INTERNAL_SERVER_ERROR (500) when requests\n+contain invalid parameters.\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling"
      },
      {
        "sha": "b769cd71f20501978a28a07ced46bdadb4f6bcab",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f012a857f5e9b3bdd11a64dd0c16b4c805076594/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f012a857f5e9b3bdd11a64dd0c16b4c805076594/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=f012a857f5e9b3bdd11a64dd0c16b4c805076594",
        "patch": "@@ -179,29 +179,29 @@ def run_test(self):\n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 500) #must be a 500 because we send a invalid json request\n+        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n \n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n \n         response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 500) #must be a 500 because we exceeding the limits\n+        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n+        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n \n         self.nodes[0].generate(1) #generate block to not affect upcoming tests\n         self.sync_all()"
      },
      {
        "sha": "c81559212419fc68924efddba2be6e347d33a563",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f012a857f5e9b3bdd11a64dd0c16b4c805076594/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f012a857f5e9b3bdd11a64dd0c16b4c805076594/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=f012a857f5e9b3bdd11a64dd0c16b4c805076594",
        "patch": "@@ -420,7 +420,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     // throw exception in case of a empty request\n     std::string strRequestMutable = req->ReadBody();\n     if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n-        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n@@ -444,7 +444,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             std::string strOutput = uriParts[i].substr(uriParts[i].find(\"-\")+1);\n \n             if (!ParseInt32(strOutput, &nOutput) || !IsHex(strTxid))\n-                return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+                return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n \n             txid.SetHex(strTxid);\n             vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n@@ -453,7 +453,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         if (vOutPoints.size() > 0)\n             fInputParsed = true;\n         else\n-            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n     }\n \n     switch (rf) {\n@@ -469,7 +469,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             if (strRequestMutable.size() > 0)\n             {\n                 if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n-                    return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n+                    return RESTERR(req, HTTP_BAD_REQUEST, \"Combination of URI scheme inputs and raw post data is not allowed\");\n \n                 CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n                 oss << strRequestMutable;\n@@ -478,14 +478,14 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             }\n         } catch (const std::ios_base::failure& e) {\n             // abort in case of unreadable binary data\n-            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n         }\n         break;\n     }\n \n     case RF_JSON: {\n         if (!fInputParsed)\n-            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n         break;\n     }\n     default: {\n@@ -495,7 +495,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     // limit max outpoints\n     if (vOutPoints.size() > MAX_GETUTXOS_OUTPOINTS)\n-        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readable string representation)\n     vector<unsigned char> bitmap;"
      }
    ]
  }
]