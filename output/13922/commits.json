[
  {
    "sha": "036bac83d247516fba0f9549ad87a63dbc4d8244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzZiYWM4M2QyNDc1MTZmYmEwZjk1NDlhZDg3YTYzZGJjNGQ4MjQ0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-08-08T15:48:43Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-09-18T13:33:08Z"
      },
      "message": "Set minrelaytxfee=0.00001 in tests\n\nSome tests assume a minrelaytxfee of 1000 satoshi/kB, so explicitly set\nthat in preparation for lowering the default.",
      "tree": {
        "sha": "e7a2b4e66a9fc99aa6a84b95a0986bf5ba7d9ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a2b4e66a9fc99aa6a84b95a0986bf5ba7d9ccd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036bac83d247516fba0f9549ad87a63dbc4d8244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036bac83d247516fba0f9549ad87a63dbc4d8244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/036bac83d247516fba0f9549ad87a63dbc4d8244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036bac83d247516fba0f9549ad87a63dbc4d8244/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d926a87fde80b64024b2d94260c53aab20ccb259",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d926a87fde80b64024b2d94260c53aab20ccb259",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d926a87fde80b64024b2d94260c53aab20ccb259"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "65336745878b8c117051743fdf8ff85bfbc8b93c",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=036bac83d247516fba0f9549ad87a63dbc4d8244",
        "patch": "@@ -13,7 +13,7 @@ class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n+        self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\", \"-minrelaytxfee=0.00001\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "78e82d44f9723b450ca2aaf197b16670b0f68a23",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=036bac83d247516fba0f9549ad87a63dbc4d8244",
        "patch": "@@ -28,6 +28,7 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-minrelaytxfee=0.00001000\"]]*self.num_nodes\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -516,7 +517,7 @@ def run_test(self):\n         oldBalance = self.nodes[0].getbalance()\n \n         inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n+        outputs = {self.nodes[0].getnewaddress():Decimal(\"1.1\")}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n@@ -527,7 +528,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        # make sure funds are received at node1\n+        # make sure funds are received at node0\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n \n "
      },
      {
        "sha": "48765b9e565c8b3d3b19c1c1432f616911f1a5df",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036bac83d247516fba0f9549ad87a63dbc4d8244/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=036bac83d247516fba0f9549ad87a63dbc4d8244",
        "patch": "@@ -35,6 +35,7 @@ def set_test_params(self):\n             \"-deprecatedrpc=addwitnessaddress\",\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n+            \"-minrelaytxfee=0.00001\",\n         ] for i in range(self.num_nodes)]\n \n     def skip_test_if_missing_module(self):"
      }
    ]
  },
  {
    "sha": "a04a0146a28fa681793a3bd2131eede26da8a5aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDRhMDE0NmEyOGZhNjgxNzkzYTNiZDIxMzFlZWRlMjZkYThhNWFh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-08-08T15:53:43Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-09-18T13:53:50Z"
      },
      "message": "Lower default fees\n\nThis changes the fee defaults to:\n\n  BLOCK_MIN_TX_FEE = 200\n  DEFAULT_MIN_RELAY_TX_FEE = 200\n\n  DEFAULT_INCREMENTAL_RELAY_FEE = 100\n\n  DEFAULT_TRANSACTION_MINFEE = 1000\n  WALLET_INCREMENTAL_RELAY_FEE = 5000\n\nThese reduce default minimum network fees by a factor of 5 (from 1000s/kB\nto 200s/kB), which matches previous decreases in lowering the price of\nblock data in USD to about 1c/kB:\n\n  2013-05: 50,000 to 10,000 at $100 USD/BTC: 5c/kB to 1c/kB\n  2014-11: 10,000 to 1,000 at $700 USD/BTC: 7c/kB to 0.7c/kB\n  2015-10: 1,000 to 5,000 and back to 1,000 at $250 USD/BTC:\n           0.25c/kB to 1.25c/kB to 0.25c/kB\n  2018-08: 1,000 to 200 at $6000 USD/BTC: 6c/kB to 1.2c/kB\n\n(Note that on a per-transaction basis, the witness discount generally\ndecreases fees by about a further 50%, so for individual's a better\ncomparison might be 3c/kB to 0.6c/kB)\n\nThe incremental relay fee is lowered further, to allow cheaper updates\nof transactions, which makes better use of blockspace.\n\nBecause it will take time for the network to broadly support these lower\nmining and relay fees, the wallet defaults are left unchanged at 1000s/kB\nand 5000s/kB.",
      "tree": {
        "sha": "ac5dccae7b8aded83015c0e9f00c09659ef8189b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac5dccae7b8aded83015c0e9f00c09659ef8189b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a04a0146a28fa681793a3bd2131eede26da8a5aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04a0146a28fa681793a3bd2131eede26da8a5aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a04a0146a28fa681793a3bd2131eede26da8a5aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a04a0146a28fa681793a3bd2131eede26da8a5aa/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "036bac83d247516fba0f9549ad87a63dbc4d8244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036bac83d247516fba0f9549ad87a63dbc4d8244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/036bac83d247516fba0f9549ad87a63dbc4d8244"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 55,
      "deletions": 37
    },
    "files": [
      {
        "sha": "768d674aa7cee9f122def75ae613e7268d23d919",
        "filename": "doc/release-notes-13922.md",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04a0146a28fa681793a3bd2131eede26da8a5aa/doc/release-notes-13922.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04a0146a28fa681793a3bd2131eede26da8a5aa/doc/release-notes-13922.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-13922.md?ref=a04a0146a28fa681793a3bd2131eede26da8a5aa",
        "patch": "@@ -0,0 +1,18 @@\n+Minimum Fee Rate Policies\n+-------------------------\n+\n+This release drops the default minimum fee rates required to relay\n+transactions across the network and for miners to consider the\n+transaction in their blocks to 2 bits per kilobyte (0.00000200 BTC/kB,\n+200 satoshis/kB), and the default additional fee rate required for\n+replacing a transaction to 1 bit per kilobyte (0.00000100 BTC/kB, 100\n+satoshis/kB). The previous default for all these values was 10 bits\n+per kilobyte. These defaults can be overridden using the minrelaytxfee,\n+blockmintxfee and incrementalrelayfee options.\n+\n+Note that until these lower defaults are widely adopted across the\n+network, transactions created with lower fee rates may not propagate\n+and may not be mined. As a result, the wallet code continues to use a\n+default fee for low-priority transactions of 10 bits per kilobyte and\n+an incremental fee of 50 bits per kilobyte when replacing transactions.\n+"
      },
      {
        "sha": "112a2c83caca14f7e4b87ee9291c5a60267c9c23",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a04a0146a28fa681793a3bd2131eede26da8a5aa",
        "patch": "@@ -19,7 +19,7 @@ class CTxOut;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n-static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n+static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 200;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** The minimum non-witness size for transactions we're willing to relay/mine (1 segwit input + 1 P2WPKH output = 82 bytes) */\n@@ -31,7 +31,7 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\n-static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n+static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 100;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /** The maximum number of witness stack items in a standard P2WSH script */"
      },
      {
        "sha": "812546e05e982f3e1e372fb24e841f8b3f4ee787",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=a04a0146a28fa681793a3bd2131eede26da8a5aa",
        "patch": "@@ -128,14 +128,14 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(2000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(4000LL).FromTx(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n@@ -149,15 +149,15 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(entry.Fee(15000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(3000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n     entry.nTime = 1;\n-    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(2000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n@@ -195,7 +195,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     CTxMemPool::setEntries setAncestorsCalculated;\n     std::string dummy;\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(400000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(entry.FromTx(tx7), setAncestors);\n@@ -253,7 +253,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx10.vout[0].nValue = 10 * COIN;\n \n     setAncestorsCalculated.clear();\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(40000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(entry.FromTx(tx10), setAncestors);\n@@ -301,14 +301,14 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(2000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(4000LL).FromTx(tx2));\n     uint64_t tx2Size = GetVirtualTransactionSize(tx2);\n \n     /* lowest fee */\n@@ -323,14 +323,14 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(entry.Fee(15000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(3000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n-    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(2000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n@@ -379,7 +379,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     uint64_t tx7Size = GetVirtualTransactionSize(tx7);\n \n     /* set the fee to just below tx2's feerate when including ancestor */\n-    CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n+    CAmount fee = (4000/tx2Size)*(tx7Size + tx6Size) - 1;\n \n     pool.addUnchecked(entry.Fee(fee).FromTx(tx7));\n     BOOST_CHECK_EQUAL(pool.size(), 7U);\n@@ -413,7 +413,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     // Check that we sort by min(feerate, ancestor_feerate):\n     // set the fee so that the ancestor feerate is above tx1/5,\n     // but the transaction's own feerate is lower\n-    pool.addUnchecked(entry.Fee(5000LL).FromTx(tx8));\n+    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx8));\n     sortedOrder.insert(sortedOrder.end()-1, tx8.GetHash().ToString());\n     CheckSort<ancestor_score>(pool, sortedOrder);\n }\n@@ -431,15 +431,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(2000LL).FromTx(tx1));\n \n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vin.resize(1);\n     tx2.vin[0].scriptSig = CScript() << OP_2;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx2));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n@@ -457,7 +457,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n     tx3.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n+    pool.addUnchecked(entry.Fee(4000LL).FromTx(tx3));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n@@ -469,8 +469,8 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n-    CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    CFeeRate maxFeeRateRemoved(5000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 100);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -520,10 +520,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    pool.addUnchecked(entry.Fee(7000LL).FromTx(tx4));\n-    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(entry.Fee(1100LL).FromTx(tx6));\n-    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n+    pool.addUnchecked(entry.Fee(1400LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee( 200LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee( 220LL).FromTx(tx6));\n+    pool.addUnchecked(entry.Fee(1800LL).FromTx(tx7));\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n@@ -532,43 +532,43 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n     if (!pool.exists(tx5.GetHash()))\n-        pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n+        pool.addUnchecked(entry.Fee(200LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(1800LL).FromTx(tx7));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n-    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n+    pool.addUnchecked(entry.Fee(200LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(1800LL).FromTx(tx7));\n \n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 100);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 100)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 100)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 100)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n-    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n-    // ... but feerate should never drop below 1000\n-\n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 100);\n+    // ... but feerate should never drop below the min incremental relay fee\n+\n+    SetMockTime(42 + 9*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n-    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n+    // ... unless it has gone all the way to 0 (after getting past minrelayfee/2)\n \n     SetMockTime(0);\n }"
      },
      {
        "sha": "d7ce5dc8492bf9523a1c16e2d2fc267c4ce2cadd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a04a0146a28fa681793a3bd2131eede26da8a5aa/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a04a0146a28fa681793a3bd2131eede26da8a5aa",
        "patch": "@@ -51,7 +51,7 @@ static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for -whitelistforcerelay. */\n static const bool DEFAULT_WHITELISTFORCERELAY = true;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n-static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n+static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 200;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = COIN / 10;\n //! Discourage users to set fees higher than this amount (in satoshis) per kB"
      }
    ]
  }
]