DrahtBot,2020-10-31 09:17:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23127](https://github.com/bitcoin/bitcoin/pull/23127) (tests: Use test framework utils where possible by vincenzopalazzo",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-719907780,719907780,
MarcoFalke,2020-11-02 07:33:05,"How much difference is this going to make in practice? For a node without incoming connections it seems unlikely to have peers that don't support the `feefilter` message. For a node with incoming connections, minor traffic waste doesn't seem to be a concern.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-720293190,720293190,
decryp2kanon,2020-11-02 15:11:54,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-720531320,720531320,
ariard,2020-11-03 00:46:16,"@MarcoFalke \n\nRight, I should have explicit the assumption on sender, that they are non-Bitcoin Core clients. Thus we can't be certain they enforce the regular tx-relay flow inv,getdata,tx but might send directly txn, don't bothering with any `feefilter` at all nor sending an inv first.\n\nI agree that the waste is likely to be minor in any-case, but note that this PR is aiming to align beha",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-720808689,720808689,
jnewbery,2020-11-04 12:23:00,"EDIT: this was for a different version of this PR.\n\nThis seems like an extremely verbose PR to modify an unlikely and unimportant edge case. We don't expect to process unconfirmed transactions during IBD for a couple of reasons:\n\n- we'll send a feefilter set to MAX_MONEY, telling our peers not to INV transactions to us.\n- we'll ignore INVs for transactions.\n\nSo a peer would need to s",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-721701255,721701255,
sdaftuar,2020-11-04 16:02:53,"I tend to agree with @jnewbery that just ignoring all unrequested transactions during IBD would make more sense, but I'd go further and suggest we generally ignore all unrequested transactions (perhaps excepting peers with PF_RELAY permission), to mitigate potential CPU DoS.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-721819763,721819763,
ariard,2020-11-05 01:43:47,">  It seems inconsistent to process that transaction as normal, but not do the normal orphan processing logic too.\n\nThanks to answering my wonder about jumping directly to stop processing unrequested transaction instead of only scoping to orphan. Updated branch with this behavior.\n\n> I don't think we need a 10 line comment and 100 line test case to justify that - just say that we don't pro",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-722071996,722071996,
ariard,2020-11-05 02:01:16,"Note to reviewers, you might verify `test_inv_ibd` coverage with:\n\n```\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex c21c9e3ee..5def5178e 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2687,7 +2687,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                     LogPrint(BCLog::NET, ""transaction (%",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-722077323,722077323,
ariard,2020-11-09 00:23:53,"Thanks @MarcoFalke, updated at 75b45eb.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-723690048,723690048,
ariard,2020-12-10 17:04:20,"Thanks @jnewbery for review, sorry for delay and updated at 0cd6088.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-742656254,742656254,
MarcoFalke,2020-12-10 18:13:38,"If you want the ci to run on this, you might have to rebase on current master.\n\nEdit: Or maybe not",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-742700125,742700125,
ariard,2020-12-11 16:05:42,@MarcoFalke Ah should I rebase on master to clean out the time out about libfuzzer+valgrind or it's cirrus-ci's VM runtime ?,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-743280511,743280511,
jnewbery,2020-12-15 13:19:01,@ariard can you try rebasing?,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-745281723,745281723,
ariard,2020-12-16 16:42:14,Rebased at d893b47.,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-746606050,746606050,
sdaftuar,2020-12-16 19:41:38,"Do you have any thoughts on my suggestion from before, about just always ignoring unrequested transactions? https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-721819763. \n\nIt's not really clear to me why we're more concerned about this behavior during IBD than outside of IBD.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-746899339,746899339,
jnewbery,2020-12-17 08:14:52,Needs rebase!,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-747284749,747284749,
ariard,2020-12-29 23:09:47,"@sdaftuar To answer I didn't propose to stop processing of unrequested transactions even out-of-IBD because I was worried to break bitcoin clients which don't respect the canonical tx-request sequence and thus smashing out their txn broadcast ?\n\nIf we think such clients are non-existent, extending `TxRequestTracker` with a `bool ExpectedResponse()` should be possible.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-752271517,752271517,
ariard,2020-12-29 23:52:51,"Rebased at 886d05d.\n\nSee IRC discussion with concerns about potentially breaking bitcoin software if we go with Suhas suggestion: http://gnusha.org/bitcoin-core-dev/2020-12-29.log  (starting at 23:10)",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-752279425,752279425,
sdaftuar,2021-01-05 13:39:45,">See IRC discussion with concerns about potentially breaking bitcoin software if we go with Suhas suggestion: http://gnusha.org/bitcoin-core-dev/2020-12-29.log (starting at 23:10)\n\nFrom that IRC conversation:\n\n> 15:24 < phantomcircuit> im also not sure the core concept of ignoring those transactions makes a lot of sense\n15:25 < phantomcircuit> messages from peers are handled round robin ",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-754642226,754642226,
ariard,2021-02-10 13:16:25,"See mailing list thread, moving this PR as draft until I gather feedback on this proposal, or at least no one speaks up.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-776698614,776698614,
jnewbery,2021-02-16 10:38:15,"As a minor procedural point, I think it would have been better to open a new PR for the current branch. This PR has now been through three significantly different iterations, and it's impossible to tell which versions the review comments/ACKs are referring to.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-779749154,779749154,
ariard,2021-02-17 17:05:24,"@jnewbery Agree, I've a new branch handling the parent-orphan fetching case and fixing all the tests. Going to open it soon and leave test coverage tx-requester extension here.\n",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-780704619,780704619,
ariard,2021-02-18 14:17:23,This PR has been restrained to the lightweight test coverage extension. The halting of unrequested transaction processing has been moved in its own one. See #21224 ,https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-781374389,781374389,
naumenkogs,2021-09-28 08:27:02,"ACK ec04fa50c703e726f2315195892d22c4486bf31a\n\nThe test makes sense. I'd say it's gonna be easier to get this merged if you open a separate clean PR. As someone who looked at it for the first time, I found it distracting going through all irrelevant legacy comments.",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-928971722,928971722,
DrahtBot,2021-11-30 19:32:35,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-982952698,982952698,
mjdietzx,2020-10-31 21:53:10,Does the scope resolution operator need to be used here like everywhere else? `if (::ChainstateActive().IsInitialBlockDownload()) return;`,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515544072,515544072,src/net_processing.cpp
ariard,2020-11-01 01:31:01,Good point! I'll update once PR got Concept ACK/NACK.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515562121,515562121,src/net_processing.cpp
jonatack,2020-11-01 18:12:39,"78b1044 Could you update the name of `INBOUND_PEER_TX_RELAY` for clarity and searchability of its equivalent in the net_processing code?\n\n```suggestion\nTXID_RELAY_DELAY = 2  # seconds\n```",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515653390,515653390,test/functional/test_framework/p2p.py
jonatack,2020-11-01 18:29:44,"78b1044 \n\n```suggestion\n            if (i.type & MSG_TYPE_MASK) in {MSG_TX, MSG_WTX}:\n```",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515655202,515655202,test/functional/test_framework/p2p.py
jonatack,2020-11-01 19:26:57,"8afa4fa s/parent are/parents are/\n```suggestion\n        sleep(INBOUND_PEER_TX_DELAY + TXID_RELAY_DELAY)\n```",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515661399,515661399,test/functional/p2p_ibd_txrelay.py
jonatack,2020-11-01 19:29:59,"2ada3103 tabulation is off for all of the added imports, should be 4 spaces\n",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515661758,515661758,test/functional/p2p_ibd_txrelay.py
jonatack,2020-11-01 19:38:28,"d65dca43 partial WIP suggestions, though I think it could still be more clearly written\n```diff\n-                // To save bandwidth during IBD, stop orphan processing early. With the state of\n-                // our UTXO set far from tip, we might not have yet the unspent output spend by this\n-                // transaction or this transaction is already double-spend but not yet seen blo",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r515662647,515662647,src/net_processing.cpp
ariard,2020-11-03 00:09:51,Switched to NONPREF_PEER_TX_RELAY.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r516351204,516351204,test/functional/test_framework/p2p.py
ariard,2020-11-03 00:33:52,Yes this is the recentRejects filter. I did modify the comment to underscore that during IBD blocks are received fast and thus the filter quickly cleanup in consequence.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r516362195,516362195,src/net_processing.cpp
MarcoFalke,2020-11-05 06:29:15,"```suggestion\n        if (!pfrom.HasPermission(PF_RELAY) && m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n```\n\nstyle-nit: Please don't use the deprecated wrappers. This is going to silently conflict with ongoing work to remove them\n\nAlso clang-format for new code ",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r517818190,517818190,src/net_processing.cpp
MarcoFalke,2020-11-05 06:34:26,I don't think the tx needs to be valid (and it can't be valid because the utxo set is empty). Just using `0` or default constructors for CTxIn/Out should be sufficient.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r517819829,517819829,test/functional/p2p_ibd_txrelay.py
MarcoFalke,2020-11-05 06:35:53,"```suggestion\n        peer.send_and_ping(msg_tx(unrequested_tx))\n```\n\nOtherwise you are using the debug.log to synchronize. And the `assert_equal(len(self.nodes[0].getrawmempool()), 0)` doesn't actually check anything.",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r517820308,517820308,test/functional/p2p_ibd_txrelay.py
ariard,2020-11-09 00:22:38,I introduced a `sync_with_ping` inside the with statement. Test is breaking as expected with new code muted. Let me know if it achieves what you intended.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r519499867,519499867,test/functional/p2p_ibd_txrelay.py
jnewbery,2020-11-10 10:23:19,The docstring in this file could be updated. It's no longer just testing fee filters.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r520450520,520450520,test/functional/p2p_ibd_txrelay.py
jnewbery,2020-11-10 10:25:42,"This doesn't save bandwidth since the tx is already downloaded. I think ""Do not process unrequested transactions during IBD"" is sufficient as a comment.",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r520452215,520452215,src/net_processing.cpp
jnewbery,2020-11-10 10:29:17,"The unexpected_msgs here is very specific. I understand that you're trying to check that the tx wasn't rejected by the mempool, but if the log format ever changes, then the unexpected_msgs string isn't actually testing anything, and would just be dead code. I'd suggest removing it and relying on the expected_msgs string.",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r520454615,520454615,test/functional/p2p_ibd_txrelay.py
ariard,2020-12-10 16:56:58,"Yes updated the docstring, lmk about the formatting by bullet point.",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r540335434,540335434,test/functional/p2p_ibd_txrelay.py
ariard,2020-12-10 16:57:56,There is a edge case where the transaction is an orphan and thus trigger further download but that's not worthy to document as bandwidth saving. Updated.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r540336267,540336267,src/net_processing.cpp
ariard,2020-12-10 17:02:30,"Thanks for the tip, removed it. I've searched for a while for this but I don't think we have better than checking the logs to test that feeding the node with some input (an unrequested tx) is effectively rejected by the targeted code check (the new check L2928) and not by the mempool checks further down in the code path ?\n\nI'm still ramping up on our p2p functional test framework :)",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r540339858,540339858,test/functional/p2p_ibd_txrelay.py
MarcoFalke,2021-02-09 14:36:04,"I don't think light clients can set the flag on the server they connect to. So this will break any such clients that opted to send txs directly. I know that there is no BIP (for obvious reasons) that explains how transaction relay should work, but I'd be cautious breaking a relay mechanism that some software relies on because it has been working in the past. At the very least this breaking change ",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r572935450,572935450,doc/release-notes.md
ariard,2021-02-09 15:46:22,"I agree on the mailing list communication. By the way, my concern about breaking tx-broadcast capabilities of such clients was one of the reason for all the back-and-forth on this PR. I expect those clients to be connected to at least few different peers and among them you can assume a subset will be prior versions still supporting processing of unrequested transactions. I would say deployment tim",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r572999407,572999407,doc/release-notes.md
sdaftuar,2021-02-09 15:48:47,"Thanks for taking the suggestion -- I think it would make sense to mention on the mailing list now that this is a proposed behavior change for Bitcoin Core, so that if others have feedback on whether this is breaking they can speak up.",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r573001651,573001651,doc/release-notes.md
ellemouton,2021-02-17 09:51:55,"Seems that `assert_equal(len(self.nodes[0].getrawmempool()), 0)` isn't really doing anything since the tx being used is always invalid so we don't ever expect it to be accepted to the mempool.\n\nSuggest using a valid tx instead and then testing the changes to the mempool directly (count=0 if tx msg is received before being requested and count=1 if tx msg is received after tx is requested) inste",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r577470350,577470350,test/functional/p2p_tx_download.py
MarcoFalke,2021-02-18 14:20:01,"Could speed this up? I think txrequest works with mocktime, too",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r578454531,578454531,test/functional/p2p_ibd_txrelay.py
ariard,2021-02-18 14:23:01,"That's a good suggestion. Initially I was using valid transactions to feed the node and changed it after this [comment](https://github.com/bitcoin/bitcoin/pull/20277#discussion_r517819829). I guess the `getrawmempool` is a leftover. Will remove it on #21224.\n\nI think it's still fine to use invalid transactions as the behavior under check is ""Does this transaction reach mempool acceptance ?"", w",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r578456847,578456847,test/functional/p2p_tx_download.py
ariard,2021-02-23 15:17:07,Yes I can confirm txrequests works with mocktime. Updated with your suggestion.,https://github.com/bitcoin/bitcoin/pull/20277#discussion_r581124518,581124518,test/functional/p2p_ibd_txrelay.py
jonatack,2021-09-28 14:17:24,"5b2ab873f7c793ea8ce871260b35 With this change can remove these lines?\n```diff\n--- a/test/functional/p2p_tx_download.py\n+++ b/test/functional/p2p_tx_download.py\n@@ -117,9 +117,6 @@ class TxDownloadTest(BitcoinTestFramework):\n \n         p = self.nodes[0].p2ps[0]\n \n-        with p2p_lock:\n-            p.tx_getdata_count = 0\n-\n         mock_time = int(time.time() + 1)\n```\n",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r717626252,717626252,test/functional/test_framework/p2p.py
jonatack,2021-09-28 14:33:47,"- Would it make sense for this new test to be in `p2p_tx_download.py` where we have similar testing?\n- Perhaps also test that `tx_getdata_count` is/can be greater than zero once out of IBD?\n\nA few PEP8 suggestions and (maybe, IIUC) a clarifying constant:\n```diff\n--- a/test/functional/p2p_ibd_txrelay.py\n+++ b/test/functional/p2p_ibd_txrelay.py\n@@ -8,6 +8,7 @@\n """""" \n from decimal i",https://github.com/bitcoin/bitcoin/pull/20277#discussion_r717644017,717644017,test/functional/p2p_ibd_txrelay.py
