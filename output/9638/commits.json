[
  {
    "sha": "fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwMzVmMmY3ZjdiY2ZjYTc4OThkMDAxMDVmNmNiNTM5YTJjOGRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-12T02:59:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-26T15:30:15Z"
      },
      "message": "qa: Actually test assertions in pruning.py\n\nAlso refactor to use wrapper for stop_node",
      "tree": {
        "sha": "f2708d561ec2539d5de856c769d067d8485c83c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2708d561ec2539d5de856c769d067d8485c83c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 17,
      "deletions": 21
    },
    "files": [
      {
        "sha": "9d155478e251a605479c097a945b6e573397efe9",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
        "patch": "@@ -103,7 +103,7 @@ def create_chain_with_staleblocks(self):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n-            stop_node(self.nodes[0],0)\n+            self.stop_node(0)\n             self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n@@ -128,7 +128,7 @@ def reorg_test(self):\n         # This will cause Node 2 to do a reorg requiring 288 blocks of undo data to the reorg_test chain\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n@@ -151,7 +151,7 @@ def reorg_test(self):\n         print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         print(\"Generating new longer chain of 300 more blocks\")\n@@ -231,7 +231,7 @@ def manual_test(self, node_number, use_timestamp):\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=1\"], timewait=900)\n@@ -266,25 +266,21 @@ def has_block(index):\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n+        assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n-        # negative and zero inputs should raise an exception\n-        try:\n-            node.pruneblockchain(-10)\n-            raise AssertionError(\"pruneblockchain(-10) should have failed.\")\n-        except:\n-            pass\n-\n-        try:\n-            node.pruneblockchain(0)\n-            raise AssertionError(\"pruneblockchain(0) should have failed.\")\n-        except:\n-            pass\n+        # negative heights should raise an exception\n+        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n         if not has_block(0):\n             raise AssertionError(\"blk00000.dat is missing when should still be there\")\n \n+        # Does nothing\n+        node.pruneblockchain(height(0))\n+        if not has_block(0):\n+            raise AssertionError(\"blk00000.dat is missing when should still be there\")\n+\n         # height=500 should prune first file\n         prune(500)\n         if has_block(0):\n@@ -311,7 +307,7 @@ def has_block(index):\n             raise AssertionError(\"blk00003.dat is still there, should be pruned by now\")\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n         self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=550\"], timewait=900)\n \n         print(\"Success\")\n@@ -320,7 +316,7 @@ def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n         try:\n-            stop_node(self.nodes[2], 2)\n+            self.stop_node(2)\n             start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print(\"Success\")\n         except Exception as detail:\n@@ -333,7 +329,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         try:\n-            stop_node(self.nodes[5],5) #stop and start to trigger rescan\n+            self.stop_node(5) #stop and start to trigger rescan\n             start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print (\"Success\")\n         except Exception as detail:\n@@ -353,8 +349,8 @@ def run_test(self):\n         # N0=N1=N2 **...*(995)\n \n         # stop manual-pruning node with 995 blocks\n-        stop_node(self.nodes[3],3)\n-        stop_node(self.nodes[4],4)\n+        self.stop_node(3)\n+        self.stop_node(4)\n \n         print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()"
      }
    ]
  }
]