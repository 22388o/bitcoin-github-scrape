luke-jr,2017-07-14T07:15:20Z,"Even with inline assembly, there are build complications unfortunately. The compile will fail if the target doesn't support it..",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315289223,315289223,
sipa,2017-07-14T08:36:16Z,@luke-jr There are system macros to test whether you're compiling for x86_64 or not.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315304464,315304464,
luke-jr,2017-07-14T09:34:45Z,You said *almost* every x86_64 CPU. Are we going to drop support for the outliers then?,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315316466,315316466,
meshcollider,2017-07-14T10:13:14Z,"One of the travis builds obviously has an issue with it too:\n`crypto/sha256_sse42.cpp:42:9: error: inline assembly requires more registers than available`",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315324518,315324518,
theuni,2017-07-14T16:11:52Z,The clang/osx build succeeds when -fomit-frame-pointer is used. I don't speak enough asm to know if a register can be freed up.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315400196,315400196,
gmaxwell,2017-07-14T16:20:32Z,"> Even with inline assembly, there are build complications unfortunately. The compile will fail if the target doesn't support it..\n\nNo it won't-- these files are compiled without -msse4.2 already.  The only thing required is that its x86_64, which the build tests for. ",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315402227,315402227,
sipa,2017-07-14T18:24:03Z,@luke-jr There is runtime detection to see if the CPU supports the extension. The only requirement is that the target is x86_64.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315431876,315431876,
jonasschnelli,2017-07-14T19:11:18Z,"Gitian OSX build is broken (https://bitcoin.jonasschnelli.ch/build/216):\n\n```\nGenerated test/data/base58_keys_invalid.json.h\ncrypto/sha256_sse42.cpp:42:9: error: inline assembly requires more registers than available\n        ""shl    $0x6,%2;""\n        ^\n1 error generated.\n```\nNo problem on Win/ ~~OSX~~Â Linux",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315443570,315443570,
sipa,2017-07-14T19:41:38Z,"@jonasschnelli @theuni figured it out - clang isn't compiling with `-fomit-frame-pointer`, and thus there is one fewer register available. Unfortunately, omitting the frame pointer still makes this code not work...",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315449667,315449667,
sipa,2017-07-14T22:11:53Z,"Updated the code to use one fewer register. The original YASM code used the `dx` register for two purposes, which I had separated out into two separate registers. They're merged now.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315480292,315480292,
sipa,2017-07-15T01:05:32Z,"Marking as WIP, as this does not seem to produce correct hashes on OSX (cc @theuni).",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315498962,315498962,
theuni,2017-07-15T05:46:50Z,I poked at this for hours and came up empty-handed. I'll wait for someone else to confirm my osx breakage isn't just local.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315511895,315511895,
theuni,2017-07-15T06:51:55Z,"two more data points:\n1. @fanquake verified that this crashes on osx for him as well.\n\n2. I managed to reproduce a crash on Linux with an old clang (3.2), and it's even uglier, crashing gdb as well:\n\n>Starting program: /home/cory/dev/bitcoin2/src/bitcoind\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".\n>\n>Pr",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315514931,315514931,
theuni,2017-07-16T06:41:54Z,"Tested ACK 08b7438f73236fc738fb655f766e77a81e6b7311. Good on OSX now!\n\nEdit: Though I'd prefer to have the cpu check done separately.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315589421,315589421,
sipa,2017-07-16T06:43:17Z,"Removing WIP tag, I believe we solved the OSX problem.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315589480,315589480,
fanquake,2017-07-16T10:20:15Z,"Confirmed that this now runs on OSX.\n\nRunning `src/bench/bench_bitcoin`\nmaster (https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d)\n```\nSHA256,30,0.034190416336060,0.035426974296570,0.034737364451090,115983933,120179929,117843926\nSHA256,30,0.033560991287231,0.037778496742249,0.035649696985881,113846584,128155476,120938933\nSHA256,30,0.033833026885986,0.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315599667,315599667,
gmaxwell,2017-07-16T14:06:06Z,This should do something to print what implementation its using to help spot runtime auto-detection bugs.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315611435,315611435,
sipa,2017-07-16T17:28:36Z,@gmaxwell Already done,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315623897,315623897,
sipa,2017-07-16T18:31:05Z,Added an extra commit that performs a self-test before selecting an optimized transform function.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315627735,315627735,
sipa,2017-07-16T18:44:48Z,@fanquake Are you compiling with -O0 or something similar? This shouldn't give a 10x speedup for the SHA256 benchmark. More like a factor 1.5x.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315628546,315628546,
jonasschnelli,2017-07-16T19:26:19Z,"Tested ACK on my OSX box as well as on a Debian with Skylake\n\nCPU OSX: `Intel(R) Core(TM) i7-6920HQ CPU @ 2.90GHz`\nCPU Debian: `Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz`\n\nPerf.-improvements: factor ~1.6.\n\n\n---- DETAILS:\n\nExts OSX:\n```SYSCALL XD 1GBPAGE EM64T LAHF LZCNT PREFETCHW RDTSCP TSCI\nSMEP ERMS RDWRFSGS TSC_THREAD_OFFSET BMI1 HLE AVX2 BMI2 INVPCID RTM SMAP RDSEED ADX",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315631135,315631135,
sipa,2017-07-16T19:42:30Z,"Rebased, and moved the autodetection to an explicit `SHA256AutoDetect()` function that is called during initialization.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315632014,315632014,
sipa,2017-07-16T23:50:32Z,"Improved the self test (it now tests 0, 1, and 2-block transforms), and made it assert when the selftest fails rather than failing over to the standard implementation. This way, it won't hide problems.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315646928,315646928,
laanwj,2017-07-18T06:42:15Z,"utACK, looks good to me now, but I still think it's too late for 0.15. \nAt least to enable it by default, I'm ok with an `--enable-experimental-asm` option, then enabling it by default after the 0.15 branch-off.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315972697,315972697,
sipa,2017-07-18T08:07:14Z,"@laanwj Added a `--enable-experimental-asm` configure option, disabled by default.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315990007,315990007,
theuni,2017-07-18T17:35:20Z,utACK modulo the small nits.,https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-316138914,316138914,
theuni,2017-07-20T16:39:56Z,"utACK 6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb, though I extensively tested earlier revisions.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-316761536,316761536,
Sjors,2017-10-20T07:16:14Z,"For future reference, as of #11176 this is now enabled by default.",https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-338125795,338125795,
laanwj,2017-07-14T06:57:56Z,"I'd prefer to do this setup explicitly during initialization; this also avoids having to use an atomic pointer, which seems overkill (why would it ever change during runtime?) and may be inefficient on some platforms.\n(also the detection might be more involved on some platforms, so it's better for clarity to drive it from an init function instead of magically at first call).",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127395978,127395978,src/crypto/sha256.cpp
theuni,2017-07-14T13:07:06Z,"We also have the option of using the ifunc attribute, supported on recent binutils with at least gcc and clang.\n\nThough it's non-standard and afaik elf-specific, it's worth considering where possible.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127451919,127451919,src/crypto/sha256.cpp
TheBlueMatt,2017-07-14T23:28:35Z,"We're gonna have to do *something* to meet this condition, though it doesnt appear we'd have to do much.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567007,127567007,src/crypto/sha256_sse42.cpp
gmaxwell,2017-07-14T23:33:36Z,"This is the standard three clause BSD license, it is GPL and whatnot compatible. The source code to Bitcoin, which contains this notice, is part of the ""documentation and/or other materials"" we provide.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567433,127567433,src/crypto/sha256_sse42.cpp
TheBlueMatt,2017-07-14T23:37:07Z,"We ship sans-source all the time? I figured we'd just put a ""contains softare copyright Intel"" in the --help output or a README somewhere.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567734,127567734,src/crypto/sha256_sse42.cpp
gmaxwell,2017-07-16T02:50:19Z,do we have constructors with hashing in them?,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127597240,127597240,src/crypto/sha256.cpp
sipa,2017-07-16T07:54:51Z,@laanwj Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127601294,127601294,src/crypto/sha256.cpp
theuni,2017-07-17T13:36:28Z,"It'd be helpful to add a little note about the 'L' prefix and what problem it solves. If nothing else, it may turn up as a another useful google hit for someone in the future.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127709044,127709044,src/crypto/sha256_sse4.cpp
theuni,2017-07-17T14:06:26Z,"Like with the rand init, I think we'd save ourselves from future oopses by setting this to nullptr initially, and letting SHA256AutoDetect() set the fallback to sha256::Transform if necessary.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127717020,127717020,src/crypto/sha256.cpp
laanwj,2017-07-17T14:16:43Z,I don't think that will work - there is some SHA256 work before main (IIRC to set up the chain parameteters). Better if that uses the 'canonical' SHA256.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127719818,127719818,src/crypto/sha256.cpp
theuni,2017-07-17T15:16:34Z,"Right, nevermind.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127736970,127736970,src/crypto/sha256.cpp
sipa,2017-07-17T18:01:52Z,"Indeed, that is the reason.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127779308,127779308,src/crypto/sha256.cpp
laanwj,2017-07-18T11:57:53Z,"This should be `$enableval`, not `$withval`",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127953973,127953973,configure.ac
sipa,2017-07-18T16:22:39Z,"Strange, I tested this.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128025351,128025351,configure.ac
laanwj,2017-07-18T16:34:10Z,"Me too, and it didn't work for me unless I changed it. Using $withval here most llikelys pick up the last --with check result (for qrencode, which wasn't installed in my case, so it always had `no`)",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128028248,128028248,configure.ac
theuni,2017-07-18T16:56:21Z,This is only needed if you intended to avoid compiling the _sse4.o variant altogether. AM_CONDITIONAL sets Makefile variables.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128033631,128033631,configure.ac
theuni,2017-07-18T17:03:34Z,"On second thought, I'd actually prefer doing it that way in order to keep sha256_sse4.cpp completely generic. It was very helpful for me while testing to just throw together a quick test app using the .cpp directly.\n\nThe makefile change would become:\n```\nif EXPERIMENTAL_ASM\ncrypto_libbitcoin_crypto_a_SOURCES += crypto/sha256_sse4.cpp\nendif\n```\nThen obviously the guard isn't needed ",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128035298,128035298,configure.ac
sipa,2017-07-18T17:20:18Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039476,128039476,configure.ac
sipa,2017-07-18T17:20:27Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039503,128039503,configure.ac
theuni,2017-07-18T17:33:59Z,Nit: no need to risk including the not-guaranteed-to-exist header. Move the ```#if``` up a bit?,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043032,128043032,src/crypto/sha256.cpp
theuni,2017-07-18T17:34:16Z,Not needed anymore :),https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043106,128043106,src/crypto/sha256_sse4.cpp
sipa,2017-07-18T17:36:19Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043705,128043705,src/crypto/sha256.cpp
sipa,2017-07-18T17:36:25Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043734,128043734,src/crypto/sha256_sse4.cpp
laanwj,2017-07-20T07:32:11Z,"Nit: Seems this is a log message with the side-effect of detecting the SHA256 implementation. \nI'd prefer to assign the result explicitly, so that if someone happens to comment this out, or moves it to debug category, it won't just be skipped.",https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128443230,128443230,src/init.cpp
sipa,2017-07-20T16:41:07Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128568239,128568239,src/init.cpp
