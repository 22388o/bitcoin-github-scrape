[
  {
    "sha": "4d50f38fe05374342b4b55953d188fd50d422663",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDUwZjM4ZmUwNTM3NDM0MmI0YjU1OTUzZDE4OGZkNTBkNDIyNjYz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T00:10:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-20T16:03:53Z"
      },
      "message": "Support multi-block SHA256 transforms\n\nExtracted from a patch by Wladimir van der Laan.",
      "tree": {
        "sha": "2bbdcf29e456a20a3778133a0c6b51acb213ea1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bbdcf29e456a20a3778133a0c6b51acb213ea1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d50f38fe05374342b4b55953d188fd50d422663",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50f38fe05374342b4b55953d188fd50d422663",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d50f38fe05374342b4b55953d188fd50d422663",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50f38fe05374342b4b55953d188fd50d422663/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6859ad2936bf431cd745b6763b62051319435742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6859ad2936bf431cd745b6763b62051319435742",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6859ad2936bf431cd745b6763b62051319435742"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 90,
      "deletions": 87
    },
    "files": [
      {
        "sha": "45ee93d4719483747b2998cda7dcea41aa6071cd",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 87,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d50f38fe05374342b4b55953d188fd50d422663/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d50f38fe05374342b4b55953d188fd50d422663/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=4d50f38fe05374342b4b55953d188fd50d422663",
        "patch": "@@ -43,88 +43,91 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    while (blocks--) {\n+        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s[0] += a;\n+        s[1] += b;\n+        s[2] += c;\n+        s[3] += d;\n+        s[4] += e;\n+        s[5] += f;\n+        s[6] += g;\n+        s[7] += h;\n+        chunk += 64;\n+    }\n }\n \n } // namespace sha256\n@@ -147,14 +150,14 @@ CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n         memcpy(buf + bufsize, data, 64 - bufsize);\n         bytes += 64 - bufsize;\n         data += 64 - bufsize;\n-        sha256::Transform(s, buf);\n+        sha256::Transform(s, buf, 1);\n         bufsize = 0;\n     }\n-    while (end >= data + 64) {\n-        // Process full chunks directly from the source.\n-        sha256::Transform(s, data);\n-        bytes += 64;\n-        data += 64;\n+    if (end - data >= 64) {\n+        size_t blocks = (end - data) / 64;\n+        sha256::Transform(s, data, blocks);\n+        data += 64 * blocks;\n+        bytes += 64 * blocks;\n     }\n     if (end > data) {\n         // Fill the buffer with what remains."
      }
    ]
  },
  {
    "sha": "2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTkxYzkxZDg4ZjNkMTdhYzZiMzhiZGRmYTZmMWI2YjhkODM1YzBm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T06:26:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-20T16:03:53Z"
      },
      "message": "Add SHA256 dispatcher",
      "tree": {
        "sha": "38783e7e46a9fbf4b038236f2cde834afe1a6fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38783e7e46a9fbf4b038236f2cde834afe1a6fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d50f38fe05374342b4b55953d188fd50d422663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d50f38fe05374342b4b55953d188fd50d422663",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d50f38fe05374342b4b55953d188fd50d422663"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "37fd772435ed70ce760fc1ad8f3b36f1f37776e1",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"bench.h\"\n \n+#include \"crypto/sha256.h\"\n #include \"key.h\"\n #include \"validation.h\"\n #include \"util.h\"\n@@ -12,6 +13,7 @@\n int\n main(int argc, char** argv)\n {\n+    SHA256AutoDetect();\n     RandomInit();\n     ECC_Start();\n     SetupEnvironment();"
      },
      {
        "sha": "3649dc4be0d649c30d3e3d1ca765b9f642056e43",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "patch": "@@ -8,6 +8,8 @@\n \n #include <string.h>\n \n+#include <atomic>\n+\n // Internal implementation code.\n namespace\n {\n@@ -131,8 +133,15 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n }\n \n } // namespace sha256\n+\n+void (*Transform)(uint32_t*, const unsigned char*, size_t) = sha256::Transform;\n+\n } // namespace\n \n+std::string SHA256AutoDetect()\n+{\n+    return \"standard\";\n+}\n \n ////// SHA-256\n \n@@ -150,12 +159,12 @@ CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n         memcpy(buf + bufsize, data, 64 - bufsize);\n         bytes += 64 - bufsize;\n         data += 64 - bufsize;\n-        sha256::Transform(s, buf, 1);\n+        Transform(s, buf, 1);\n         bufsize = 0;\n     }\n     if (end - data >= 64) {\n         size_t blocks = (end - data) / 64;\n-        sha256::Transform(s, data, blocks);\n+        Transform(s, data, blocks);\n         data += 64 * blocks;\n         bytes += 64 * blocks;\n     }"
      },
      {
        "sha": "aa4f3972cc71c358fffabe31423b9f7c787c3488",
        "filename": "src/crypto/sha256.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <stdint.h>\n #include <stdlib.h>\n+#include <string>\n \n /** A hasher class for SHA-256. */\n class CSHA256\n@@ -25,4 +26,9 @@ class CSHA256\n     CSHA256& Reset();\n };\n \n+/** Autodetect the best available SHA256 implementation.\n+ *  Returns the name of the implementation.\n+ */\n+std::string SHA256AutoDetect();\n+\n #endif // BITCOIN_CRYPTO_SHA256_H"
      },
      {
        "sha": "b16653624cae7d496107373061aefdf598f21512",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "patch": "@@ -1161,6 +1161,8 @@ bool AppInitSanityChecks()\n     // ********************************************************* Step 4: sanity checks\n \n     // Initialize elliptic curve code\n+    std::string sha256_algo = SHA256AutoDetect();\n+    LogPrintf(\"Using the '%s' SHA256 implementation\\n\", sha256_algo);\n     RandomInit();\n     ECC_Start();\n     globalVerifyHandle.reset(new ECCVerifyHandle());"
      },
      {
        "sha": "0dd51a4908f020a7100eea8e18968465bdd79443",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"crypto/sha256.h\"\n #include \"fs.h\"\n #include \"key.h\"\n #include \"validation.h\"\n@@ -33,6 +34,7 @@ extern void noui_connect();\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n+        SHA256AutoDetect();\n         RandomInit();\n         ECC_Start();\n         SetupEnvironment();"
      }
    ]
  },
  {
    "sha": "c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWNjYjE1YjBlODQ3ZWI5NTYyM2Y5ZDI1ZGM1MjJhYTAyZGJkYmU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-14T06:33:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-20T16:03:53Z"
      },
      "message": "Add SSE4 based SHA256",
      "tree": {
        "sha": "659366f3215952eebac27e504d4a25b070732f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/659366f3215952eebac27e504d4a25b070732f0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2991c91d88f3d17ac6b38bddfa6f1b6b8d835c0f"
      }
    ],
    "stats": {
      "total": 1525,
      "additions": 1523,
      "deletions": 2
    },
    "files": [
      {
        "sha": "35bfeb466c19f90c26f1495d8dfb49b91e39f217",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
        "patch": "@@ -263,6 +263,7 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha1.h \\\n   crypto/sha256.cpp \\\n+  crypto/sha256_sse4.cpp \\\n   crypto/sha256.h \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h"
      },
      {
        "sha": "4ecf50903973f62ecfc604f39987f57547680309",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
        "patch": "@@ -3,13 +3,19 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/sha256.h\"\n-\n #include \"crypto/common.h\"\n \n #include <string.h>\n-\n #include <atomic>\n \n+#if defined(__x86_64__) || defined(__amd64__)\n+#include <cpuid.h>\n+namespace sha256_sse4\n+{\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks);\n+}\n+#endif\n+\n // Internal implementation code.\n namespace\n {\n@@ -140,6 +146,14 @@ void (*Transform)(uint32_t*, const unsigned char*, size_t) = sha256::Transform;\n \n std::string SHA256AutoDetect()\n {\n+#if defined(__x86_64__) || defined(__amd64__)\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n+        Transform = sha256_sse4::Transform;\n+        return \"sse4\";\n+    }\n+#endif\n+\n     return \"standard\";\n }\n "
      },
      {
        "sha": "89f529a3abcff52044b0db662aa857518c523e80",
        "filename": "src/crypto/sha256_sse4.cpp",
        "status": "added",
        "additions": 1506,
        "deletions": 0,
        "changes": 1506,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/crypto/sha256_sse4.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8/src/crypto/sha256_sse4.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_sse4.cpp?ref=c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
        "patch": "@@ -0,0 +1,1506 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// This is a translation to GCC extended asm syntax from YASM code by Intel\n+// (available at the bottom of this file).\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+\n+namespace sha256_sse4\n+{\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+{\n+    static const uint32_t K256 alignas(16) [] = {\n+        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n+        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n+        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n+        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n+        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n+        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n+        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n+        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n+        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n+        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n+        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n+        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n+        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n+        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n+        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n+        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n+    };\n+    static const uint32_t FLIP_MASK alignas(16) [] = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};\n+    static const uint32_t SHUF_00BA alignas(16) [] = {0x03020100, 0x0b0a0908, 0xffffffff, 0xffffffff};\n+    static const uint32_t SHUF_DC00 alignas(16) [] = {0xffffffff, 0xffffffff, 0x03020100, 0x0b0a0908};\n+    uint32_t a, b, c, d, f, g, h, y0, y1, y2;\n+    uint64_t tbl;\n+    uint64_t inp_end, inp;\n+    uint32_t xfer alignas(16) [4];\n+\n+    __asm__ __volatile__(\n+        \"shl    $0x6,%2;\"\n+        \"je     Ldone_hash_%=;\"\n+        \"add    %1,%2;\"\n+        \"mov    %2,%14;\"\n+        \"mov    (%0),%3;\"\n+        \"mov    0x4(%0),%4;\"\n+        \"mov    0x8(%0),%5;\"\n+        \"mov    0xc(%0),%6;\"\n+        \"mov    0x10(%0),%k2;\"\n+        \"mov    0x14(%0),%7;\"\n+        \"mov    0x18(%0),%8;\"\n+        \"mov    0x1c(%0),%9;\"\n+        \"movdqa %18,%%xmm12;\"\n+        \"movdqa %19,%%xmm10;\"\n+        \"movdqa %20,%%xmm11;\"\n+\n+        \"Lloop0_%=:\"\n+        \"lea    %17,%13;\"\n+        \"movdqu (%1),%%xmm4;\"\n+        \"pshufb %%xmm12,%%xmm4;\"\n+        \"movdqu 0x10(%1),%%xmm5;\"\n+        \"pshufb %%xmm12,%%xmm5;\"\n+        \"movdqu 0x20(%1),%%xmm6;\"\n+        \"pshufb %%xmm12,%%xmm6;\"\n+        \"movdqu 0x30(%1),%%xmm7;\"\n+        \"pshufb %%xmm12,%%xmm7;\"\n+        \"mov    %1,%15;\"\n+        \"mov    $3,%1;\"\n+\n+        \"Lloop1_%=:\"\n+        \"movdqa 0x0(%13),%%xmm9;\"\n+        \"paddd  %%xmm4,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm7,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm5,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm4,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm7,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm4;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm4;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm4;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm4;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm4;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x10(%13),%%xmm9;\"\n+        \"paddd  %%xmm5,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm4,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm6,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm5,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm4,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm5;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm5;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm5;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm5;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm5;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa 0x20(%13),%%xmm9;\"\n+        \"paddd  %%xmm6,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm5,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm7,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm6,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm5,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm6;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm6;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm6;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm6;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm6;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x30(%13),%%xmm9;\"\n+        \"paddd  %%xmm7,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"add    $0x40,%13;\"\n+        \"movdqa %%xmm6,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm4,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm7,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm6,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm7;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm7;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm7;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm7;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm7;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    Lloop1_%=;\"\n+        \"mov    $0x2,%1;\"\n+\n+        \"Lloop2_%=:\"\n+        \"paddd  0x0(%13),%%xmm4;\"\n+        \"movdqa %%xmm4,%16;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %7,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %8,%12;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %k2,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"mov    %6,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %9,%11;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %k2,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %6,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %7,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"mov    %5,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %8,%11;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %5,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %5,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %6,%12;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %4,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"paddd  0x10(%13),%%xmm5;\"\n+        \"movdqa %%xmm5,%16;\"\n+        \"add    $0x20,%13;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %4,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %5,%12;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %3,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"mov    %9,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %6,%11;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %3,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %9,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %4,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"mov    %8,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %5,%11;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %3,%12;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %8,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %3,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %8,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %9,%12;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %7,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa %%xmm6,%%xmm4;\"\n+        \"movdqa %%xmm7,%%xmm5;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    Lloop2_%=;\"\n+        \"add    (%0),%3;\"\n+        \"mov    %3,(%0);\"\n+        \"add    0x4(%0),%4;\"\n+        \"mov    %4,0x4(%0);\"\n+        \"add    0x8(%0),%5;\"\n+        \"mov    %5,0x8(%0);\"\n+        \"add    0xc(%0),%6;\"\n+        \"mov    %6,0xc(%0);\"\n+        \"add    0x10(%0),%k2;\"\n+        \"mov    %k2,0x10(%0);\"\n+        \"add    0x14(%0),%7;\"\n+        \"mov    %7,0x14(%0);\"\n+        \"add    0x18(%0),%8;\"\n+        \"mov    %8,0x18(%0);\"\n+        \"add    0x1c(%0),%9;\"\n+        \"mov    %9,0x1c(%0);\"\n+        \"mov    %15,%1;\"\n+        \"add    $0x40,%1;\"\n+        \"cmp    %14,%1;\"\n+        \"jne    Lloop0_%=;\"\n+\n+        \"Ldone_hash_%=:\"\n+\n+        : \"+r\"(s), \"+r\"(chunk), \"+r\"(blocks), \"=r\"(a), \"=r\"(b), \"=r\"(c), \"=r\"(d), /* e = chunk */ \"=r\"(f), \"=r\"(g), \"=r\"(h), \"=r\"(y0), \"=r\"(y1), \"=r\"(y2), \"=r\"(tbl), \"+m\"(inp_end), \"+m\"(inp), \"+m\"(xfer)\n+        : \"m\"(K256), \"m\"(FLIP_MASK), \"m\"(SHUF_00BA), \"m\"(SHUF_DC00)\n+        : \"cc\", \"memory\", \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\", \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\"\n+   );\n+}\n+}\n+\n+/*\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+; Copyright (c) 2012, Intel Corporation \n+; \n+; All rights reserved. \n+; \n+; Redistribution and use in source and binary forms, with or without\n+; modification, are permitted provided that the following conditions are\n+; met: \n+; \n+; * Redistributions of source code must retain the above copyright\n+;   notice, this list of conditions and the following disclaimer.  \n+; \n+; * Redistributions in binary form must reproduce the above copyright\n+;   notice, this list of conditions and the following disclaimer in the\n+;   documentation and/or other materials provided with the\n+;   distribution. \n+; \n+; * Neither the name of the Intel Corporation nor the names of its\n+;   contributors may be used to endorse or promote products derived from\n+;   this software without specific prior written permission. \n+; \n+; \n+; THIS SOFTWARE IS PROVIDED BY INTEL CORPORATION \"AS IS\" AND ANY\n+; EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INTEL CORPORATION OR\n+; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;\n+; Example YASM command lines:\n+; Windows:  yasm -Xvc -f x64 -rnasm -pnasm -o sha256_sse4.obj -g cv8 sha256_sse4.asm\n+; Linux:    yasm -f x64 -f elf64 -X gnu -g dwarf2 -D LINUX -o sha256_sse4.o sha256_sse4.asm\n+;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;\n+; This code is described in an Intel White-Paper:\n+; \"Fast SHA-256 Implementations on Intel Architecture Processors\"\n+;\n+; To find it, surf to http://www.intel.com/p/en_US/embedded \n+; and search for that title.\n+; The paper is expected to be released roughly at the end of April, 2012\n+;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+; This code schedules 1 blocks at a time, with 4 lanes per block\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+%define\tMOVDQ movdqu ;; assume buffers not aligned \n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Define Macros\n+\n+; addm [mem], reg\n+; Add reg to mem using reg-mem add and store\n+%macro addm 2\n+    add\t%2, %1\n+    mov\t%1, %2\n+%endm\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+; COPY_XMM_AND_BSWAP xmm, [mem], byte_flip_mask\n+; Load xmm with mem and byte swap each dword\n+%macro COPY_XMM_AND_BSWAP 3\n+    MOVDQ %1, %2\n+    pshufb %1, %3\n+%endmacro\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+%define X0 xmm4\n+%define X1 xmm5\n+%define X2 xmm6\n+%define X3 xmm7\n+\n+%define XTMP0 xmm0\n+%define XTMP1 xmm1\n+%define XTMP2 xmm2\n+%define XTMP3 xmm3\n+%define XTMP4 xmm8\n+%define XFER  xmm9\n+\n+%define SHUF_00BA\txmm10 ; shuffle xBxA -> 00BA\n+%define SHUF_DC00\txmm11 ; shuffle xDxC -> DC00\n+%define BYTE_FLIP_MASK\txmm12\n+    \n+%ifdef LINUX\n+%define NUM_BLKS rdx\t; 3rd arg\n+%define CTX\trsi\t; 2nd arg\n+%define INP\trdi\t; 1st arg\n+\n+%define SRND\trdi\t; clobbers INP\n+%define c\tecx\n+%define d \tr8d\n+%define e \tedx\n+%else\n+%define NUM_BLKS r8\t; 3rd arg\n+%define CTX\trdx \t; 2nd arg\n+%define INP\trcx \t; 1st arg\n+\n+%define SRND\trcx\t; clobbers INP\n+%define c \tedi \n+%define d\tesi \n+%define e \tr8d\n+    \n+%endif\n+%define TBL\trbp\n+%define a eax\n+%define b ebx\n+\n+%define f r9d\n+%define g r10d\n+%define h r11d\n+\n+%define y0 r13d\n+%define y1 r14d\n+%define y2 r15d\n+\n+\n+\n+_INP_END_SIZE\tequ 8\n+_INP_SIZE\tequ 8\n+_XFER_SIZE\tequ 8\n+%ifdef LINUX\n+_XMM_SAVE_SIZE\tequ 0\n+%else\n+_XMM_SAVE_SIZE\tequ 7*16\n+%endif\n+; STACK_SIZE plus pushes must be an odd multiple of 8\n+_ALIGN_SIZE\tequ 8\n+\n+_INP_END\tequ 0\n+_INP\t\tequ _INP_END  + _INP_END_SIZE\n+_XFER\t\tequ _INP      + _INP_SIZE\n+_XMM_SAVE\tequ _XFER     + _XFER_SIZE + _ALIGN_SIZE\n+STACK_SIZE\tequ _XMM_SAVE + _XMM_SAVE_SIZE\n+\n+; rotate_Xs\n+; Rotate values of symbols X0...X3\n+%macro rotate_Xs 0\n+%xdefine X_ X0\n+%xdefine X0 X1\n+%xdefine X1 X2\n+%xdefine X2 X3\n+%xdefine X3 X_\n+%endm\n+\n+; ROTATE_ARGS\n+; Rotate values of symbols a...h\n+%macro ROTATE_ARGS 0\n+%xdefine TMP_ h\n+%xdefine h g\n+%xdefine g f\n+%xdefine f e\n+%xdefine e d\n+%xdefine d c\n+%xdefine c b\n+%xdefine b a\n+%xdefine a TMP_\n+%endm\n+\n+%macro FOUR_ROUNDS_AND_SCHED 0\n+\t;; compute s0 four at a time and s1 two at a time\n+\t;; compute W[-16] + W[-7] 4 at a time\n+\tmovdqa\tXTMP0, X3\n+    mov\ty0, e\t\t; y0 = e\n+    ror\ty0, (25-11)\t; y0 = e >> (25-11)\n+    mov\ty1, a\t\t; y1 = a\n+\tpalignr\tXTMP0, X2, 4\t; XTMP0 = W[-7]\n+    ror\ty1, (22-13)\t; y1 = a >> (22-13)\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (25-11))\n+    mov\ty2, f\t\t; y2 = f\n+    ror\ty0, (11-6)\t; y0 = (e >> (11-6)) ^ (e >> (25-6))\n+\tmovdqa\tXTMP1, X1\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (22-13)\n+    xor\ty2, g\t\t; y2 = f^g\n+\tpaddd\tXTMP0, X0\t; XTMP0 = W[-7] + W[-16]\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (11-6)) ^ (e >> (25-6))\n+    and\ty2, e\t\t; y2 = (f^g)&e\n+    ror\ty1, (13-2)\t; y1 = (a >> (13-2)) ^ (a >> (22-2))\n+\t;; compute s0\n+\tpalignr\tXTMP1, X0, 4\t; XTMP1 = W[-15]\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (13-2)) ^ (a >> (22-2))\n+    ror\ty0, 6\t\t; y0 = S1 = (e>>6) & (e>>11) ^ (e>>25)\n+    xor\ty2, g\t\t; y2 = CH = ((f^g)&e)^g\n+\tmovdqa\tXTMP2, XTMP1\t; XTMP2 = W[-15]\n+    ror\ty1, 2\t\t; y1 = S0 = (a>>2) ^ (a>>13) ^ (a>>22)\n+    add\ty2, y0\t\t; y2 = S1 + CH\n+    add\ty2, [rsp + _XFER + 0*4]\t; y2 = k + w + S1 + CH\n+\tmovdqa\tXTMP3, XTMP1\t; XTMP3 = W[-15]\n+    mov\ty0, a\t\t; y0 = a\n+    add\th, y2\t\t; h = h + S1 + CH + k + w\n+    mov\ty2, a\t\t; y2 = a\n+\tpslld\tXTMP1, (32-7)\n+    or\ty0, c\t\t; y0 = a|c\n+    add\td, h\t\t; d = d + h + S1 + CH + k + w\n+    and\ty2, c\t\t; y2 = a&c\n+\tpsrld\tXTMP2, 7\n+    and\ty0, b\t\t; y0 = (a|c)&b\n+    add\th, y1\t\t; h = h + S1 + CH + k + w + S0\n+\tpor\tXTMP1, XTMP2\t; XTMP1 = W[-15] ror 7\n+    or\ty0, y2\t\t; y0 = MAJ = (a|c)&b)|(a&c)\n+    add\th, y0\t\t; h = h + S1 + CH + k + w + S0 + MAJ\n+\n+ROTATE_ARGS\n+\tmovdqa\tXTMP2, XTMP3\t; XTMP2 = W[-15]\n+    mov\ty0, e\t\t; y0 = e\n+    mov\ty1, a\t\t; y1 = a\n+\tmovdqa\tXTMP4, XTMP3\t; XTMP4 = W[-15]\n+    ror\ty0, (25-11)\t; y0 = e >> (25-11)\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (25-11))\n+    mov\ty2, f\t\t; y2 = f\n+    ror\ty1, (22-13)\t; y1 = a >> (22-13)\n+\tpslld\tXTMP3, (32-18)\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (22-13)\n+    ror\ty0, (11-6)\t; y0 = (e >> (11-6)) ^ (e >> (25-6))\n+    xor\ty2, g\t\t; y2 = f^g\n+\tpsrld\tXTMP2, 18\n+    ror\ty1, (13-2)\t; y1 = (a >> (13-2)) ^ (a >> (22-2))\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (11-6)) ^ (e >> (25-6))\n+    and\ty2, e\t\t; y2 = (f^g)&e\n+    ror\ty0, 6\t\t; y0 = S1 = (e>>6) & (e>>11) ^ (e>>25)\n+\tpxor\tXTMP1, XTMP3\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (13-2)) ^ (a >> (22-2))\n+    xor\ty2, g\t\t; y2 = CH = ((f^g)&e)^g\n+\tpsrld\tXTMP4, 3\t; XTMP4 = W[-15] >> 3\n+    add\ty2, y0\t\t; y2 = S1 + CH\n+    add\ty2, [rsp + _XFER + 1*4]\t; y2 = k + w + S1 + CH\n+    ror\ty1, 2\t\t; y1 = S0 = (a>>2) ^ (a>>13) ^ (a>>22)\n+\tpxor\tXTMP1, XTMP2\t; XTMP1 = W[-15] ror 7 ^ W[-15] ror 18\n+    mov\ty0, a\t\t; y0 = a\n+    add\th, y2\t\t; h = h + S1 + CH + k + w\n+    mov\ty2, a\t\t; y2 = a\n+\tpxor\tXTMP1, XTMP4\t; XTMP1 = s0\n+    or\ty0, c\t\t; y0 = a|c\n+    add\td, h\t\t; d = d + h + S1 + CH + k + w\n+    and\ty2, c\t\t; y2 = a&c\n+\t;; compute low s1\n+\tpshufd\tXTMP2, X3, 11111010b\t; XTMP2 = W[-2] {BBAA}\n+    and\ty0, b\t\t; y0 = (a|c)&b\n+    add\th, y1\t\t; h = h + S1 + CH + k + w + S0\n+\tpaddd\tXTMP0, XTMP1\t; XTMP0 = W[-16] + W[-7] + s0\n+    or\ty0, y2\t\t; y0 = MAJ = (a|c)&b)|(a&c)\n+    add\th, y0\t\t; h = h + S1 + CH + k + w + S0 + MAJ\n+\n+ROTATE_ARGS\n+\tmovdqa\tXTMP3, XTMP2\t; XTMP3 = W[-2] {BBAA}\n+    mov\ty0, e\t\t; y0 = e\n+    mov\ty1, a\t\t; y1 = a\n+    ror\ty0, (25-11)\t; y0 = e >> (25-11)\n+\tmovdqa\tXTMP4, XTMP2\t; XTMP4 = W[-2] {BBAA}\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (25-11))\n+    ror\ty1, (22-13)\t; y1 = a >> (22-13)\n+    mov\ty2, f\t\t; y2 = f\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (22-13)\n+    ror\ty0, (11-6)\t; y0 = (e >> (11-6)) ^ (e >> (25-6))\n+\tpsrlq\tXTMP2, 17\t; XTMP2 = W[-2] ror 17 {xBxA}\n+    xor\ty2, g\t\t; y2 = f^g\n+\tpsrlq\tXTMP3, 19\t; XTMP3 = W[-2] ror 19 {xBxA}\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (11-6)) ^ (e >> (25-6))\n+    and\ty2, e\t\t; y2 = (f^g)&e\n+\tpsrld\tXTMP4, 10\t; XTMP4 = W[-2] >> 10 {BBAA}\n+    ror\ty1, (13-2)\t; y1 = (a >> (13-2)) ^ (a >> (22-2))\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (13-2)) ^ (a >> (22-2))\n+    xor\ty2, g\t\t; y2 = CH = ((f^g)&e)^g\n+    ror\ty0, 6\t\t; y0 = S1 = (e>>6) & (e>>11) ^ (e>>25)\n+\tpxor\tXTMP2, XTMP3\n+    add\ty2, y0\t\t; y2 = S1 + CH\n+    ror\ty1, 2\t\t; y1 = S0 = (a>>2) ^ (a>>13) ^ (a>>22)\n+    add\ty2, [rsp + _XFER + 2*4]\t; y2 = k + w + S1 + CH\n+\tpxor\tXTMP4, XTMP2\t; XTMP4 = s1 {xBxA}\n+    mov\ty0, a\t\t; y0 = a\n+    add\th, y2\t\t; h = h + S1 + CH + k + w\n+    mov\ty2, a\t\t; y2 = a\n+\tpshufb\tXTMP4, SHUF_00BA\t; XTMP4 = s1 {00BA}\n+    or\ty0, c\t\t; y0 = a|c\n+    add\td, h\t\t; d = d + h + S1 + CH + k + w\n+    and\ty2, c\t\t; y2 = a&c\n+\tpaddd\tXTMP0, XTMP4\t; XTMP0 = {..., ..., W[1], W[0]}\n+    and\ty0, b\t\t; y0 = (a|c)&b\n+    add\th, y1\t\t; h = h + S1 + CH + k + w + S0\n+\t;; compute high s1\n+\tpshufd\tXTMP2, XTMP0, 01010000b\t; XTMP2 = W[-2] {DDCC}\n+    or\ty0, y2\t\t; y0 = MAJ = (a|c)&b)|(a&c)\n+    add\th, y0\t\t; h = h + S1 + CH + k + w + S0 + MAJ\n+\n+ROTATE_ARGS\n+\tmovdqa\tXTMP3, XTMP2\t; XTMP3 = W[-2] {DDCC}\n+    mov\ty0, e\t\t; y0 = e\n+    ror\ty0, (25-11)\t; y0 = e >> (25-11)\n+    mov\ty1, a\t\t; y1 = a\n+\tmovdqa\tX0,    XTMP2\t; X0    = W[-2] {DDCC}\n+    ror\ty1, (22-13)\t; y1 = a >> (22-13)\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (25-11))\n+    mov\ty2, f\t\t; y2 = f\n+    ror\ty0, (11-6)\t; y0 = (e >> (11-6)) ^ (e >> (25-6))\n+\tpsrlq\tXTMP2, 17\t; XTMP2 = W[-2] ror 17 {xDxC}\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (22-13)\n+    xor\ty2, g\t\t; y2 = f^g\n+\tpsrlq\tXTMP3, 19\t; XTMP3 = W[-2] ror 19 {xDxC}\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (11-6)) ^ (e >> (25-6))\n+    and\ty2, e\t\t; y2 = (f^g)&e\n+    ror\ty1, (13-2)\t; y1 = (a >> (13-2)) ^ (a >> (22-2))\n+\tpsrld\tX0,    10\t; X0 = W[-2] >> 10 {DDCC}\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (13-2)) ^ (a >> (22-2))\n+    ror\ty0, 6\t\t; y0 = S1 = (e>>6) & (e>>11) ^ (e>>25)\n+    xor\ty2, g\t\t; y2 = CH = ((f^g)&e)^g\n+\tpxor\tXTMP2, XTMP3\n+    ror\ty1, 2\t\t; y1 = S0 = (a>>2) ^ (a>>13) ^ (a>>22)\n+    add\ty2, y0\t\t; y2 = S1 + CH\n+    add\ty2, [rsp + _XFER + 3*4]\t; y2 = k + w + S1 + CH\n+\tpxor\tX0, XTMP2\t; X0 = s1 {xDxC}\n+    mov\ty0, a\t\t; y0 = a\n+    add\th, y2\t\t; h = h + S1 + CH + k + w\n+    mov\ty2, a\t\t; y2 = a\n+\tpshufb\tX0, SHUF_DC00\t; X0 = s1 {DC00}\n+    or\ty0, c\t\t; y0 = a|c\n+    add\td, h\t\t; d = d + h + S1 + CH + k + w\n+    and\ty2, c\t\t; y2 = a&c\n+\tpaddd\tX0, XTMP0\t; X0 = {W[3], W[2], W[1], W[0]}\n+    and\ty0, b\t\t; y0 = (a|c)&b\n+    add\th, y1\t\t; h = h + S1 + CH + k + w + S0\n+    or\ty0, y2\t\t; y0 = MAJ = (a|c)&b)|(a&c)\n+    add\th, y0\t\t; h = h + S1 + CH + k + w + S0 + MAJ\n+\n+ROTATE_ARGS\n+rotate_Xs\n+%endm\n+\n+;; input is [rsp + _XFER + %1 * 4]\n+%macro DO_ROUND 1\n+    mov\ty0, e\t\t; y0 = e\n+    ror\ty0, (25-11)\t; y0 = e >> (25-11)\n+    mov\ty1, a\t\t; y1 = a\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (25-11))\n+    ror\ty1, (22-13)\t; y1 = a >> (22-13)\n+    mov\ty2, f\t\t; y2 = f\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (22-13)\n+    ror\ty0, (11-6)\t; y0 = (e >> (11-6)) ^ (e >> (25-6))\n+    xor\ty2, g\t\t; y2 = f^g\n+    xor\ty0, e\t\t; y0 = e ^ (e >> (11-6)) ^ (e >> (25-6))\n+    ror\ty1, (13-2)\t; y1 = (a >> (13-2)) ^ (a >> (22-2))\n+    and\ty2, e\t\t; y2 = (f^g)&e\n+    xor\ty1, a\t\t; y1 = a ^ (a >> (13-2)) ^ (a >> (22-2))\n+    ror\ty0, 6\t\t; y0 = S1 = (e>>6) & (e>>11) ^ (e>>25)\n+    xor\ty2, g\t\t; y2 = CH = ((f^g)&e)^g\n+    add\ty2, y0\t\t; y2 = S1 + CH\n+    ror\ty1, 2\t\t; y1 = S0 = (a>>2) ^ (a>>13) ^ (a>>22)\n+    add\ty2, [rsp + _XFER + %1 * 4]\t; y2 = k + w + S1 + CH\n+    mov\ty0, a\t\t; y0 = a\n+    add\th, y2\t\t; h = h + S1 + CH + k + w\n+    mov\ty2, a\t\t; y2 = a\n+    or\ty0, c\t\t; y0 = a|c\n+    add\td, h\t\t; d = d + h + S1 + CH + k + w\n+    and\ty2, c\t\t; y2 = a&c\n+    and\ty0, b\t\t; y0 = (a|c)&b\n+    add\th, y1\t\t; h = h + S1 + CH + k + w + S0\n+    or\ty0, y2\t\t; y0 = MAJ = (a|c)&b)|(a&c)\n+    add\th, y0\t\t; h = h + S1 + CH + k + w + S0 + MAJ\n+    ROTATE_ARGS\n+%endm\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; void sha256_sse4(void *input_data, UINT32 digest[8], UINT64 num_blks)\n+;; arg 1 : pointer to input data\n+;; arg 2 : pointer to digest\n+;; arg 3 : Num blocks\n+section .text\n+global sha256_sse4\n+align 32\n+sha256_sse4:\n+    push\trbx\n+%ifndef LINUX\n+    push\trsi\n+    push\trdi\n+%endif\n+    push\trbp\n+    push\tr13\n+    push\tr14\n+    push\tr15\n+\n+    sub\trsp,STACK_SIZE\n+%ifndef LINUX\n+    movdqa\t[rsp + _XMM_SAVE + 0*16],xmm6\t\n+    movdqa\t[rsp + _XMM_SAVE + 1*16],xmm7\n+    movdqa\t[rsp + _XMM_SAVE + 2*16],xmm8\t\n+    movdqa\t[rsp + _XMM_SAVE + 3*16],xmm9\t\n+    movdqa\t[rsp + _XMM_SAVE + 4*16],xmm10\n+    movdqa\t[rsp + _XMM_SAVE + 5*16],xmm11\n+    movdqa\t[rsp + _XMM_SAVE + 6*16],xmm12\n+%endif\n+\n+    shl\tNUM_BLKS, 6\t; convert to bytes\n+    jz\tdone_hash\n+    add\tNUM_BLKS, INP\t; pointer to end of data\n+    mov\t[rsp + _INP_END], NUM_BLKS\n+\n+    ;; load initial digest\n+    mov\ta,[4*0 + CTX]\n+    mov\tb,[4*1 + CTX]\n+    mov\tc,[4*2 + CTX]\n+    mov\td,[4*3 + CTX]\n+    mov\te,[4*4 + CTX]\n+    mov\tf,[4*5 + CTX]\n+    mov\tg,[4*6 + CTX]\n+    mov\th,[4*7 + CTX]\n+\n+    movdqa\tBYTE_FLIP_MASK, [PSHUFFLE_BYTE_FLIP_MASK wrt rip]\n+    movdqa\tSHUF_00BA, [_SHUF_00BA wrt rip]\n+    movdqa\tSHUF_DC00, [_SHUF_DC00 wrt rip]\n+\n+loop0:\n+    lea\tTBL,[K256 wrt rip]\n+\n+    ;; byte swap first 16 dwords\n+    COPY_XMM_AND_BSWAP\tX0, [INP + 0*16], BYTE_FLIP_MASK\n+    COPY_XMM_AND_BSWAP\tX1, [INP + 1*16], BYTE_FLIP_MASK\n+    COPY_XMM_AND_BSWAP\tX2, [INP + 2*16], BYTE_FLIP_MASK\n+    COPY_XMM_AND_BSWAP\tX3, [INP + 3*16], BYTE_FLIP_MASK\n+    \n+    mov\t[rsp + _INP], INP\n+\n+    ;; schedule 48 input dwords, by doing 3 rounds of 16 each\n+    mov\tSRND, 3\n+align 16\n+loop1:\n+    movdqa\tXFER, [TBL + 0*16]\n+    paddd\tXFER, X0\n+    movdqa\t[rsp + _XFER], XFER\n+    FOUR_ROUNDS_AND_SCHED\n+\n+    movdqa\tXFER, [TBL + 1*16]\n+    paddd\tXFER, X0\n+    movdqa\t[rsp + _XFER], XFER\n+    FOUR_ROUNDS_AND_SCHED\n+\n+    movdqa\tXFER, [TBL + 2*16]\n+    paddd\tXFER, X0\n+    movdqa\t[rsp + _XFER], XFER\n+    FOUR_ROUNDS_AND_SCHED\n+\n+    movdqa\tXFER, [TBL + 3*16]\n+    paddd\tXFER, X0\n+    movdqa\t[rsp + _XFER], XFER\n+    add\tTBL, 4*16\n+    FOUR_ROUNDS_AND_SCHED\n+\n+    sub\tSRND, 1\n+    jne\tloop1\n+\n+    mov\tSRND, 2\n+loop2:\n+    paddd\tX0, [TBL + 0*16]\n+    movdqa\t[rsp + _XFER], X0\n+    DO_ROUND\t0\n+    DO_ROUND\t1\n+    DO_ROUND\t2\n+    DO_ROUND\t3\n+    paddd\tX1, [TBL + 1*16]\n+    movdqa\t[rsp + _XFER], X1\n+    add\tTBL, 2*16\n+    DO_ROUND\t0\n+    DO_ROUND\t1\n+    DO_ROUND\t2\n+    DO_ROUND\t3\n+\n+    movdqa\tX0, X2\n+    movdqa\tX1, X3\n+\n+    sub\tSRND, 1\n+    jne\tloop2\n+\n+    addm\t[4*0 + CTX],a\n+    addm\t[4*1 + CTX],b\n+    addm\t[4*2 + CTX],c\n+    addm\t[4*3 + CTX],d\n+    addm\t[4*4 + CTX],e\n+    addm\t[4*5 + CTX],f\n+    addm\t[4*6 + CTX],g\n+    addm\t[4*7 + CTX],h\n+\n+    mov\tINP, [rsp + _INP]\n+    add\tINP, 64\n+    cmp\tINP, [rsp + _INP_END]\n+    jne\tloop0\n+\n+done_hash:\n+%ifndef LINUX\n+    movdqa\txmm6,[rsp + _XMM_SAVE + 0*16]\n+    movdqa\txmm7,[rsp + _XMM_SAVE + 1*16]\n+    movdqa\txmm8,[rsp + _XMM_SAVE + 2*16]\n+    movdqa\txmm9,[rsp + _XMM_SAVE + 3*16]\n+    movdqa\txmm10,[rsp + _XMM_SAVE + 4*16]\n+    movdqa\txmm11,[rsp + _XMM_SAVE + 5*16]\n+    movdqa\txmm12,[rsp + _XMM_SAVE + 6*16]\n+%endif\n+\n+    add\trsp, STACK_SIZE\n+\n+    pop\tr15\n+    pop\tr14\n+    pop\tr13\n+    pop\trbp\n+%ifndef LINUX\n+    pop\trdi\n+    pop\trsi\n+%endif\n+    pop\trbx\n+\n+    ret\t\n+    \n+\n+section .data\n+align 64\n+K256:\n+    dd\t0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5\n+    dd\t0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5\n+    dd\t0xd807aa98,0x12835b01,0x243185be,0x550c7dc3\n+    dd\t0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174\n+    dd\t0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc\n+    dd\t0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da\n+    dd\t0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7\n+    dd\t0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967\n+    dd\t0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13\n+    dd\t0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85\n+    dd\t0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3\n+    dd\t0xd192e819,0xd6990624,0xf40e3585,0x106aa070\n+    dd\t0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5\n+    dd\t0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3\n+    dd\t0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208\n+    dd\t0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2\n+\n+PSHUFFLE_BYTE_FLIP_MASK: ddq 0x0c0d0e0f08090a0b0405060700010203\n+\n+; shuffle xBxA -> 00BA\n+_SHUF_00BA:              ddq 0xFFFFFFFFFFFFFFFF0b0a090803020100\n+\n+; shuffle xDxC -> DC00\n+_SHUF_DC00:              ddq 0x0b0a090803020100FFFFFFFFFFFFFFFF\n+*/\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "fa9be909c945c3689591590ac19504aa53154c2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTliZTkwOWM5NDVjMzY4OTU5MTU5MGFjMTk1MDRhYTUzMTU0YzJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-16T18:30:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-20T16:03:53Z"
      },
      "message": "Add selftest for SHA256 transform",
      "tree": {
        "sha": "12523dff7750c64cb61aeeee1df438700c72d98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12523dff7750c64cb61aeeee1df438700c72d98b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9be909c945c3689591590ac19504aa53154c2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9be909c945c3689591590ac19504aa53154c2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9be909c945c3689591590ac19504aa53154c2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9be909c945c3689591590ac19504aa53154c2f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ccb15b0e847eb95623f9d25dc522aa02dbdbe8"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 33,
      "deletions": 1
    },
    "files": [
      {
        "sha": "25f4eabd4c2bfb6348818c29925bbcf2be5216d7",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9be909c945c3689591590ac19504aa53154c2f/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9be909c945c3689591590ac19504aa53154c2f/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=fa9be909c945c3689591590ac19504aa53154c2f",
        "patch": "@@ -5,6 +5,7 @@\n #include \"crypto/sha256.h\"\n #include \"crypto/common.h\"\n \n+#include <assert.h>\n #include <string.h>\n #include <atomic>\n \n@@ -140,7 +141,36 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n \n } // namespace sha256\n \n-void (*Transform)(uint32_t*, const unsigned char*, size_t) = sha256::Transform;\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+\n+bool SelfTest(TransformType tr) {\n+    static const unsigned char in1[65] = {0, 0x80};\n+    static const unsigned char in2[129] = {\n+        0,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    static const uint32_t init[8] = {0x6a09e667ul, 0xbb67ae85ul, 0x3c6ef372ul, 0xa54ff53aul, 0x510e527ful, 0x9b05688cul, 0x1f83d9abul, 0x5be0cd19ul};\n+    static const uint32_t out1[8] = {0xe3b0c442ul, 0x98fc1c14ul, 0x9afbf4c8ul, 0x996fb924ul, 0x27ae41e4ul, 0x649b934cul, 0xa495991bul, 0x7852b855ul};\n+    static const uint32_t out2[8] = {0xce4153b0ul, 0x147c2a86ul, 0x3ed4298eul, 0xe0676bc8ul, 0x79fc77a1ul, 0x2abe1f49ul, 0xb2b055dful, 0x1069523eul};\n+    uint32_t buf[8];\n+    memcpy(buf, init, sizeof(buf));\n+    // Process nothing, and check we remain in the initial state.\n+    tr(buf, nullptr, 0);\n+    if (memcmp(buf, init, sizeof(buf))) return false;\n+    // Process the padded empty string (unaligned)\n+    tr(buf, in1 + 1, 1);\n+    if (memcmp(buf, out1, sizeof(buf))) return false;\n+    // Process 64 spaces (unaligned)\n+    memcpy(buf, init, sizeof(buf));\n+    tr(buf, in2 + 1, 2);\n+    if (memcmp(buf, out2, sizeof(buf))) return false;\n+    return true;\n+}\n+\n+TransformType Transform = sha256::Transform;\n \n } // namespace\n \n@@ -150,10 +180,12 @@ std::string SHA256AutoDetect()\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n+        assert(SelfTest(Transform));\n         return \"sse4\";\n     }\n #endif\n \n+    assert(SelfTest(Transform));\n     return \"standard\";\n }\n "
      }
    ]
  },
  {
    "sha": "6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjhkODcyZTVlMmRkNjhhNTIyOWVjNTVmNTI2MWRhZTM0ZmY5YmRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-18T08:06:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-20T16:03:53Z"
      },
      "message": "Protect SSE4 code behind a compile-time flag",
      "tree": {
        "sha": "3ac15ca0584417ab467071a4c28132630093a922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ac15ca0584417ab467071a4c28132630093a922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9be909c945c3689591590ac19504aa53154c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9be909c945c3689591590ac19504aa53154c2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9be909c945c3689591590ac19504aa53154c2f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aea5d7160c77b3385da0f41f4723e2b957829b47",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
        "patch": "@@ -177,6 +177,16 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([experimental-asm],\n+  [AS_HELP_STRING([--enable-experimental-asm],\n+  [Enable experimental assembly routines (default is no)])],\n+  [experimental_asm=$enableval],\n+  [experimental_asm=no])\n+\n+if test \"x$experimental_asm\" = xyes; then\n+  AC_DEFINE(EXPERIMENTAL_ASM, 1, [Define this symbol to build in experimental assembly routines])\n+fi\n+\n AC_ARG_WITH([system-univalue],\n   [AS_HELP_STRING([--with-system-univalue],\n   [Build with system UniValue (default is no)])],\n@@ -1162,6 +1172,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n+AM_CONDITIONAL([EXPERIMENTAL_ASM],[test x$experimental_asm = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "f7abab482e9e6ef338bee3bc710de3fe5e65a588",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
        "patch": "@@ -263,11 +263,14 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha1.h \\\n   crypto/sha256.cpp \\\n-  crypto/sha256_sse4.cpp \\\n   crypto/sha256.h \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h\n \n+if EXPERIMENTAL_ASM\n+crypto_libbitcoin_crypto_a_SOURCES += crypto/sha256_sse4.cpp\n+endif\n+\n # consensus: shared between all executables that validate any consensus rules.\n libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "15d6db90c2469fdee46fda454a471ce6d506b258",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb",
        "patch": "@@ -10,12 +10,14 @@\n #include <atomic>\n \n #if defined(__x86_64__) || defined(__amd64__)\n+#if defined(EXPERIMENTAL_ASM)\n #include <cpuid.h>\n namespace sha256_sse4\n {\n void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks);\n }\n #endif\n+#endif\n \n // Internal implementation code.\n namespace\n@@ -176,7 +178,7 @@ TransformType Transform = sha256::Transform;\n \n std::string SHA256AutoDetect()\n {\n-#if defined(__x86_64__) || defined(__amd64__)\n+#if defined(EXPERIMENTAL_ASM) && (defined(__x86_64__) || defined(__amd64__))\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;"
      }
    ]
  }
]