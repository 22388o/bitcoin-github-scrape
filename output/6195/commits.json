[
  {
    "sha": "8273793350e47786edbb2abf5831ebab9b72ca01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjczNzkzMzUwZTQ3Nzg2ZWRiYjJhYmY1ODMxZWJhYjliNzJjYTAx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-05-27T14:57:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-05-27T17:04:59Z"
      },
      "message": "Eliminate compiler warning due to unused variable",
      "tree": {
        "sha": "1107075c5c290efc5c26bc1bb2bf28578fd32528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1107075c5c290efc5c26bc1bb2bf28578fd32528"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8273793350e47786edbb2abf5831ebab9b72ca01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8273793350e47786edbb2abf5831ebab9b72ca01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8273793350e47786edbb2abf5831ebab9b72ca01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8273793350e47786edbb2abf5831ebab9b72ca01/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7c9af381cacd76fa5190dad5a8a537eb3aa6b70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7c9af381cacd76fa5190dad5a8a537eb3aa6b70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c9af381cacd76fa5190dad5a8a537eb3aa6b70"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "012495594a600812df8daf39906cb2cb47871f26",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8273793350e47786edbb2abf5831ebab9b72ca01/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8273793350e47786edbb2abf5831ebab9b72ca01/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8273793350e47786edbb2abf5831ebab9b72ca01",
        "patch": "@@ -264,9 +264,9 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n }\n \n // Returns time at which to timeout block request (nTime in microseconds)\n-int64_t GetBlockTimeout(int64_t nTime, int nValidatedQueuedBefore)\n+int64_t GetBlockTimeout(int64_t nTime, int nValidatedQueuedBefore, const Consensus::Params &consensusParams)\n {\n-    return nTime + 500000 * Params().GetConsensus().nPowTargetSpacing * (4 + nValidatedQueuedBefore);\n+    return nTime + 500000 * consensusParams.nPowTargetSpacing * (4 + nValidatedQueuedBefore);\n }\n \n void InitializeNode(NodeId nodeid, const CNode *pnode) {\n@@ -310,15 +310,15 @@ void MarkBlockAsReceived(const uint256& hash) {\n }\n \n // Requires cs_main.\n-void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex = NULL) {\n+void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, CBlockIndex *pindex = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n     int64_t nNow = GetTimeMicros();\n-    QueuedBlock newentry = {hash, pindex, nNow, pindex != NULL, GetBlockTimeout(nNow, nQueuedValidatedHeaders)};\n+    QueuedBlock newentry = {hash, pindex, nNow, pindex != NULL, GetBlockTimeout(nNow, nQueuedValidatedHeaders, consensusParams)};\n     nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n@@ -4181,7 +4181,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n-                        MarkBlockAsInFlight(pfrom->GetId(), inv.hash);\n+                        MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n                     }\n                     LogPrint(\"net\", \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->id);\n                 }\n@@ -5034,7 +5034,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // more quickly than once every 5 minutes, then we'll shorten the download window for this block).\n         if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n-            int64_t nTimeoutIfRequestedNow = GetBlockTimeout(nNow, nQueuedValidatedHeaders - state.nBlocksInFlightValidHeaders);\n+            int64_t nTimeoutIfRequestedNow = GetBlockTimeout(nNow, nQueuedValidatedHeaders - state.nBlocksInFlightValidHeaders, consensusParams);\n             if (queuedBlock.nTimeDisconnect > nTimeoutIfRequestedNow) {\n                 LogPrint(\"net\", \"Reducing block download timeout for peer=%d block=%s, orig=%d new=%d\\n\", pto->id, queuedBlock.hash.ToString(), queuedBlock.nTimeDisconnect, nTimeoutIfRequestedNow);\n                 queuedBlock.nTimeDisconnect = nTimeoutIfRequestedNow;\n@@ -5055,7 +5055,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n                 LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }"
      }
    ]
  }
]