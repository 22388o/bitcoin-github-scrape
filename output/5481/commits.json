[
  {
    "sha": "64849306905e625fd44d297e8d58c3e1dd98cb90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDg0OTMwNjkwNWU2MjVmZDQ0ZDI5N2U4ZDU4YzNlMWRkOThjYjkw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-12-15T22:38:25Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-12-15T22:50:24Z"
      },
      "message": "Apply AreSane() checks to the fees from the network.\n\n'Sane' was already defined by this code as:\n fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000\n But sanity was only enforced for data loaded from disk.\n\nNote that this is a pretty expansive definition of 'sane': A 10 BTC\n fee is still passes the test if its on a 100kb transaction.\n\nThis prevents a single insane fee on the network from making us reject\n our stored fee data at start.  We still may reject valid saved fee\n state if minRelayFee is changed between executions.\n\nThis also reduces the risk and limits the damage from a cascading\n failure where one party pays a bunch of insane fees which cases\n others to pay insane fees.",
      "tree": {
        "sha": "ce42b5abcff9137685d128aa21d11eef99feb5f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce42b5abcff9137685d128aa21d11eef99feb5f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64849306905e625fd44d297e8d58c3e1dd98cb90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64849306905e625fd44d297e8d58c3e1dd98cb90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64849306905e625fd44d297e8d58c3e1dd98cb90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64849306905e625fd44d297e8d58c3e1dd98cb90/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13c077c7cfe9f367c721f3d99924b3d568afb4d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c077c7cfe9f367c721f3d99924b3d568afb4d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13c077c7cfe9f367c721f3d99924b3d568afb4d0"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 18,
      "deletions": 8
    },
    "files": [
      {
        "sha": "dcdf5653fe8c4f35c3f797e53e8d17e6b4c0b624",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64849306905e625fd44d297e8d58c3e1dd98cb90/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64849306905e625fd44d297e8d58c3e1dd98cb90/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=64849306905e625fd44d297e8d58c3e1dd98cb90",
        "patch": "@@ -91,22 +91,32 @@ class CBlockAverage\n      * Used as belt-and-suspenders check when reading to detect\n      * file corruption\n      */\n-    bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n+    static bool AreSane(const CFeeRate fee, const CFeeRate& minRelayFee)\n+    {\n+        if (fee < CFeeRate(0))\n+            return false;\n+        if (fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000)\n+            return false;\n+        return true;\n+    }\n+    static bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n     {\n         BOOST_FOREACH(CFeeRate fee, vecFee)\n         {\n-            if (fee < CFeeRate(0))\n-                return false;\n-            if (fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000)\n+            if (!AreSane(fee, minRelayFee))\n                 return false;\n         }\n         return true;\n     }\n-    bool AreSane(const std::vector<double> vecPriority)\n+    static bool AreSane(const double priority)\n+    {\n+        return priority >= 0;\n+    }\n+    static bool AreSane(const std::vector<double> vecPriority)\n     {\n         BOOST_FOREACH(double priority, vecPriority)\n         {\n-            if (priority < 0)\n+            if (!AreSane(priority))\n                 return false;\n         }\n         return true;\n@@ -167,12 +177,12 @@ class CMinerPolicyEstimator\n         bool sufficientFee = (feeRate > minRelayFee);\n         bool sufficientPriority = AllowFree(dPriority);\n         const char* assignedTo = \"unassigned\";\n-        if (sufficientFee && !sufficientPriority)\n+        if (sufficientFee && !sufficientPriority && CBlockAverage::AreSane(feeRate, minRelayFee))\n         {\n             history[nBlocksTruncated].RecordFee(feeRate);\n             assignedTo = \"fee\";\n         }\n-        else if (sufficientPriority && !sufficientFee)\n+        else if (sufficientPriority && !sufficientFee && CBlockAverage::AreSane(dPriority))\n         {\n             history[nBlocksTruncated].RecordPriority(dPriority);\n             assignedTo = \"priority\";"
      }
    ]
  }
]