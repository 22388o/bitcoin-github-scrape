MarcoFalke,2021-01-02 11:54:06,I'll update the remaining fuzz targets once this has one or two Concept ACKs,https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753464719,753464719,
hebasto,2021-01-02 12:01:18,"> I'll update the remaining fuzz targets once this has one or two Concept ACKs\n\nConcept ACK.\n\n\n\n>     * It makes it hard to update a target, because updating all case labels is trivial, but tedious to review and causes merge conflicts\n\nIt will be tedious to review only this pull :)",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753465289,753465289,
theStack,2021-01-02 15:54:22,"Concept ACK!\n\n> It will be tedious to review only this pull :)\n\nWith ignored whitespace (`-w` or `--ignore-all-space`) the diff actually looks quite straight-forward to review.",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753489757,753489757,
DrahtBot,2021-01-02 21:22:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20729 (p2p: standardize on outbound-{full, block}-relay connection type naming by jonatack)\n* #20715 (util: Add ArgsMana",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753531297,753531297,
ajtowns,2021-01-03 01:33:09,"Concept ACK.\n\nWhere a case statement previously had a `return;` this will need to have an `abort_loop = true;` escape instead, which seems like no big deal.\n\nI'm not a fan of ""Fuzz input format might already change implicitly on every commit, so this isn't something worthwhile to pursue."" -- changing the fuzz input format invalidates the code coverage of the qa assets corpus, so it seems l",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753553841,753553841,
MarcoFalke,2021-01-03 07:50:53,"Coverage:\n\n* Current: https://marcofalke.github.io/btc_cov/fuzz.coverage/index.html\n* This: https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa12a5d69bca21e5/fuzz.coverage/index.html",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753581492,753581492,
MarcoFalke,2021-01-03 08:17:26,"> Where a case statement previously had a return; this will need to have an abort_loop = true; escape instead, which seems like no big deal.\n\nGood point, but a `return` at that scope generally means that fuzzing will end for the current input. This is very rare and the only `return` I could find inside a switch was a `return` inside a `CConnman::ForEach` lambda, which obviously needs to be kep",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753583717,753583717,
MarcoFalke,2021-01-03 12:10:00,Removed `std::function` indirection as requested by @ajtowns . Thanks!,https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753607583,753607583,
jnewbery,2021-01-03 12:14:45,"Strong concept ACK. Thanks for doing this! Merge conflicts in the fuzz files seem to be very common, so eliminating the majority of them in this way would be a big win.",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753608158,753608158,
jonatack,2021-01-04 10:50:30,For a second I thought you were adding Call of Duty into bitcoin. This is a great idea. Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-753903963,753903963,
laanwj,2021-01-07 15:11:14,This is much more elegant! Concept/quick skim code review ACK.,https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-756175339,756175339,
practicalswift,2021-01-10 20:52:38,"Concept ACK: much better! Thanks!\n\nWill review. ",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-757542269,757542269,
MarcoFalke,2021-01-11 10:21:10,"> For a second I thought you were adding Call of Duty into bitcoin. This is a great idea. Concept ACK.\n\nCall of Duty is already being fuzzed: https://twitter.com/NedWilliamson/status/1348432573836349441",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-757855782,757855782,
practicalswift,2021-01-13 18:26:35,"> * ~Updating the target raises the question whether the case labels should be preserved to not invalidate the existing fuzz inputs format. Fuzz input format might already change implicitly on every commit, so this isn't something worthwhile to pursue.~ Edit: This pull doesn't fix this problem.\n\nWhen using the `switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, N))` idiom it is worth ",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-759634453,759634453,
MarcoFalke,2021-01-13 18:31:13,"> Perhaps that strategy could be incorporated in this PR?\n\nThe pr is tagged with ""refactoring"", so behaviour changes are not allowed. The suggestion can be discussed in #20837 and addressed in a follow-up pull request. The changes should be trivial based on this pr.",https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-759636976,759636976,
ajtowns,2021-01-14 09:10:55,ACK fa75d40ef866ef9ff8dc115e239ca6763aa23b06 - code review only,https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-760057646,760057646,
MarcoFalke,2021-01-03 12:11:25,"Note: I couldn't figure out how to make `i` evaluate at compile time, but I presume that `-O1` already flattens this out.",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r550997564,550997564,src/test/fuzz/util.h
MarcoFalke,2021-01-03 13:58:46,"turns out `-O1` isn't enough for clang, but `-O2` seems to do it: https://godbolt.org/z/Pz1YGv",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r551009515,551009515,src/test/fuzz/util.h
ajtowns,2021-01-04 00:11:34,"You can evaluate `i` at compile time with more recursive templates:\n\n```c++\ntemplate <size_t i>\ninline void CallNthOf(size_t n) { }\n\ntemplate <size_t i, typename Callable, typename... Callables>\ninline void CallNthOf(size_t n, Callable callable, Callables... callables)\n{\n    switch(n) {\n    case i:\n        callable();\n        break;\n    }\n    CallNthOf<i+1>(n, callables",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r551073150,551073150,src/test/fuzz/util.h
MarcoFalke,2021-01-04 11:03:50,Closing discussion for now because there is nothing left to do right now,https://github.com/bitcoin/bitcoin/pull/20828#discussion_r551250685,551250685,src/test/fuzz/util.h
jnewbery,2021-01-11 09:42:21,"No need for an explicit `return` statement if the return type is void:\n\n```suggestion\n    ((i++ == call_index ? callables() : void()), ...);\n```\n\nI think that's clearer since you're not actually returning anything from the fold expression.",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554922096,554922096,src/test/fuzz/util.h
promag,2021-01-11 09:46:09,TIL.,https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554924365,554924365,src/test/fuzz/util.h
jnewbery,2021-01-11 09:47:13,?,https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554925009,554925009,src/test/fuzz/banman.cpp
jnewbery,2021-01-11 09:47:19,?,https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554925066,554925066,src/test/fuzz/banman.cpp
MarcoFalke,2021-01-11 09:56:30,"This is needed to preserve the ""refactoring"" nature of this pull request. Whether to remove or keep the noop should be discussed in #20837 .",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554930558,554930558,src/test/fuzz/banman.cpp
MarcoFalke,2021-01-11 09:56:34,"This is needed to preserve the ""refactoring"" nature of this pull request. Whether to remove or keep the noop should be discussed in #20837 .",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554930606,554930606,src/test/fuzz/banman.cpp
MarcoFalke,2021-01-11 10:00:00,"I wanted to keep it to enforce that only void functions can be called. Though, the ternary operator already enforces that.\n\nIn the future someone might want to extend this for non-void functions, e.g. a `ConstructOneOf(...)` could create and return a type constructed according to one of several construction rules).\n\nWill leave as-is for now. Happy to remove if I need to force-push.",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554932697,554932697,src/test/fuzz/util.h
MarcoFalke,2021-01-11 10:01:20,"(Note that case 3 does not exists, i.e. is a noop)",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554933448,554933448,src/test/fuzz/banman.cpp
MarcoFalke,2021-01-11 10:01:34,"(Note that case 10 does not exists, i.e. is a noop)",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554933587,554933587,src/test/fuzz/banman.cpp
jnewbery,2021-01-11 10:07:50,Ah! I missed that 3 and 10 don't exist. Thanks.,https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554937069,554937069,src/test/fuzz/banman.cpp
jnewbery,2021-01-11 10:08:45,"Yes, not a big deal. Can be left like this or updated if you have to touch the branch again.",https://github.com/bitcoin/bitcoin/pull/20828#discussion_r554937595,554937595,src/test/fuzz/util.h
