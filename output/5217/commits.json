[
  {
    "sha": "8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjJjNzVhMjhiYWRhN2ZiYzU1YTMxODUzZmJlM2UyM2QzZGQ5MGZh",
    "commit": {
      "author": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2014-10-30T19:59:56Z"
      },
      "committer": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2014-11-05T11:42:22Z"
      },
      "message": "Generate bootstrap.dat file with the wallet",
      "tree": {
        "sha": "057cba5c11cab61d064083dc371a6e6abd76764a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/057cba5c11cab61d064083dc371a6e6abd76764a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/comments",
    "author": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0778333b8c037ef4092c87acb2de21639e2bee9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0778333b8c037ef4092c87acb2de21639e2bee9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0778333b8c037ef4092c87acb2de21639e2bee9e"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bb73d80d971521e9396feae5101dc30cf0f5c64c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "patch": "@@ -344,11 +344,16 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n+    strUsage += \"  -makebootstrap=<file>  \" + _(\"Create a bootstrap file\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n     strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n \n+    strUsage += \"\\n\" + _(\"Bootstrap creation options:\") + \"\\n\";\n+    strUsage += \"  -bootstrapmin=<n>      \" + strprintf(_(\"Set minimum height for bootstrap (default: %u)\"), 1) + \"\\n\";\n+    strUsage += \"  -bootstrapmax=<n>      \" + _(\"Set maximum height for bootstrap (default: latest height)\") + \"\\n\";\n+\n     strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n     strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n@@ -1055,6 +1060,21 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return false;\n     }\n \n+    if (mapArgs.count(\"-mkbootstrap\"))\n+    {\n+        string strBootstrap = GetArg(\"-mkbootstrap\", \"bootstrap.new.dat\");\n+\n+        int nMaxHeight = GetArg(\"-bootstrapmax\", chainActive.Height());\n+        if (nMaxHeight < 1 || nMaxHeight > chainActive.Height())\n+            return InitError(_(\"Max block number out of range\"));\n+\n+        int nMinHeight = GetArg(\"-bootstrapmin\", 1);\n+        if (nMinHeight < 1 || nMinHeight > chainActive.Height())\n+            return InitError(_(\"Min block number out of range\"));\n+\n+        return MakeBootstrap(strBootstrap, nMinHeight, nMaxHeight);\n+    }\n+\n     if (mapArgs.count(\"-printblock\"))\n     {\n         string strMatch = mapArgs[\"-printblock\"];"
      },
      {
        "sha": "707b074294ff1006c5ce9c1d06b29113eab0dace",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "patch": "@@ -24,6 +24,7 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/lexical_cast.hpp>\n #include <boost/thread.hpp>\n \n using namespace boost;\n@@ -1126,6 +1127,11 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     if (fileout.IsNull())\n         return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n \n+    return WriteBlockToDisk(block, fileout, pos);\n+}\n+\n+bool WriteBlockToDisk(CBlock& block, CAutoFile& fileout, CDiskBlockPos& pos)\n+{\n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n     fileout << FLATDATA(Params().MessageStart()) << nSize;\n@@ -3033,6 +3039,42 @@ bool InitBlockIndex() {\n }\n \n \n+bool MakeBootstrap(std::string strBootstrap, int nMinHeight, int nMaxHeight)\n+{\n+    CDiskBlockPos blockPos;\n+    CBlockIndex* pindex = chainActive.Genesis();\n+    filesystem::path pathBootstrap = GetCustomFile(strBootstrap);\n+#if BOOST_VERSION >= 104400\n+    filesystem::path pathBootstrapTmp = filesystem::unique_path(pathBootstrap.string() + \".%%%%-%%%%-%%%%-%%%%\");\n+#else\n+    // ubuntu lucid lts has 1.40 boost\n+    std::string tmp = boost::lexical_cast<std::string>(boost::this_thread::get_id());\n+    filesystem::path pathBootstrapTmp = pathBootstrap.string() + \".\" + tmp;\n+#endif\n+    FILE *file = fopen(pathBootstrapTmp.string().c_str(), \"ab\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"MakeBootstrap() : open failed\");\n+\n+    for (; pindex; pindex = chainActive.Next(pindex))\n+    {\n+            CBlock block;\n+            if (pindex->nHeight < nMinHeight) continue;\n+            if (pindex->nHeight > nMaxHeight) break;\n+\n+            if (!ReadBlockFromDisk(block, pindex))\n+                return error(\"MakeBootstrap() : ReadBlockFromDisk failed\");\n+\n+            if (!WriteBlockToDisk(block, fileout, blockPos))\n+                return error(\"MakeBootstrap() : WriteBlockToDisk failed\");\n+    }\n+    fileout.fclose();\n+\n+    if (!RenameOver(pathBootstrapTmp, pathBootstrap))\n+        return error(\"MakeBootstrap() : Rename-into-place failed\");\n+\n+    return false;\n+}\n \n void PrintBlockTree()\n {"
      },
      {
        "sha": "eb192c5846a406d9f6877dde1c6d6742a2a74810",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "patch": "@@ -175,6 +175,8 @@ bool InitBlockIndex();\n bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n+/** Make a bootstrap file */\n+bool MakeBootstrap(std::string strBootstrap, int nMinHeight, int nMaxHeight);\n /** Print the loaded block tree */\n void PrintBlockTree();\n /** Process protocol messages received from a given node */\n@@ -444,6 +446,7 @@ class CPartialMerkleTree\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n+bool WriteBlockToDisk(CBlock& block, CAutoFile& fileout, CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n "
      },
      {
        "sha": "289a66ee5bc0240c72849f0867d2da0f130a98bf",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "patch": "@@ -435,6 +435,15 @@ void ClearDatadirCache()\n     pathCachedNetSpecific = boost::filesystem::path();\n }\n \n+boost::filesystem::path GetCustomFile(const std::string& strArg)\n+{\n+    boost::filesystem::path pathCustomFile(strArg);\n+    if (!pathCustomFile.is_complete())\n+        pathCustomFile = GetDataDir(false) / pathCustomFile;\n+\n+    return pathCustomFile;\n+}\n+\n boost::filesystem::path GetConfigFile()\n {\n     boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));"
      },
      {
        "sha": "019384b97c7ded3d7842f284f81aecc1e6cea4a3",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "patch": "@@ -92,6 +92,7 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+boost::filesystem::path GetCustomFile(const std::string& strArg);\n boost::filesystem::path GetConfigFile();\n #ifndef WIN32\n boost::filesystem::path GetPidFile();"
      }
    ]
  },
  {
    "sha": "7ce51ec7bc1deeecab39b4e0e152f02f20217636",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2U1MWVjN2JjMWRlZWVjYWIzOWI0ZTBlMTUyZjAyZjIwMjE3NjM2",
    "commit": {
      "author": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2014-10-30T20:03:46Z"
      },
      "committer": {
        "name": "Andras Elso",
        "email": "elso.andras@gmail.com",
        "date": "2014-11-05T11:42:28Z"
      },
      "message": "makebootstrap rpc command",
      "tree": {
        "sha": "2e7336ff6260fc41057a8a7dc0dd44a656a3fe84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e7336ff6260fc41057a8a7dc0dd44a656a3fe84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ce51ec7bc1deeecab39b4e0e152f02f20217636",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ce51ec7bc1deeecab39b4e0e152f02f20217636",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ce51ec7bc1deeecab39b4e0e152f02f20217636",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ce51ec7bc1deeecab39b4e0e152f02f20217636/comments",
    "author": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Elbandi",
      "id": 44674,
      "node_id": "MDQ6VXNlcjQ0Njc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Elbandi",
      "html_url": "https://github.com/Elbandi",
      "followers_url": "https://api.github.com/users/Elbandi/followers",
      "following_url": "https://api.github.com/users/Elbandi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Elbandi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Elbandi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Elbandi/subscriptions",
      "organizations_url": "https://api.github.com/users/Elbandi/orgs",
      "repos_url": "https://api.github.com/users/Elbandi/repos",
      "events_url": "https://api.github.com/users/Elbandi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Elbandi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b2c75a28bada7fbc55a31853fbe3e23d3dd90fa"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a253557f57578e340d93e2820a63416f2eb029ee",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7ce51ec7bc1deeecab39b4e0e152f02f20217636",
        "patch": "@@ -561,3 +561,75 @@ Value getmempoolinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+struct bootstrapparams\n+{\n+    string strBootstrap;\n+    int nMinHeight;\n+    int nMaxHeight;\n+    bootstrapparams()\n+    {\n+        strBootstrap = \"bootstrap.new.dat\";\n+        nMinHeight = 1;\n+        nMaxHeight = chainActive.Height();\n+    }\n+};\n+\n+#if 0\n+// TODO: this is a helper for thread\n+void ThreadMakeBootstrap(void* parg)\n+{\n+    bootstrapparams *p = (bootstrapparams *)parg;\n+    // Make this thread recognisable as the make-bootstrap thread\n+    RenameThread(\"bitcoin-make-bootstrap\");\n+\n+    MakeBootstrap(p->strBootstrap, p->nMinHeight, p->nMaxHeight);\n+\n+    delete p;\n+}\n+#endif\n+\n+Value makebootstrap(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 3)\n+        throw runtime_error(\n+            \"makebootstrap \\\"filename\\\" ( max min )\\n\"\n+            \"\\nMake bootstrap.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"filename\\\" (string, required) The filename\\n\"\n+            \"2. max          (numeric, optional, default=best height) Last block height.\\n\"\n+            \"3. min          (numeric, optional, default=1) First block height.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nMake bootstrap from whole blockchain\\n\"\n+            + HelpExampleCli(\"makebootstrap\", \"\\\"bootstrap-new.dat\\\"\") +\n+            \"\\nMake bootstrap form the first 100 blocks\\n\"\n+            + HelpExampleCli(\"makebootstrap\", \"\\\"bootstrap-new.dat\\\" 100\") +\n+            \"\\nMake bootstrap from 20 to 100 blocks\\n\"\n+            + HelpExampleCli(\"makebootstrap\", \"\\\"bootstrap-new.dat\\\" 100 20\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"makebootstrap\", \"\\\"bootstrap-new.dat\\\", 100, 20\")\n+        );\n+\n+    bootstrapparams *p = new bootstrapparams();\n+    if (params.size() > 0)\n+        p->strBootstrap = params[0].get_str();\n+\n+    if (params.size() > 1)\n+        p->nMaxHeight = params[1].get_int();\n+\n+    if (params.size() > 2)\n+        p->nMinHeight = params[2].get_int();\n+\n+    if (p->nMaxHeight < 1 || p->nMaxHeight > chainActive.Height())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Max block height out of range\");\n+\n+    if (p->nMinHeight < 1 || p->nMinHeight > chainActive.Height())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Min block height out of range\");\n+\n+    MakeBootstrap(p->strBootstrap, p->nMinHeight, p->nMaxHeight);\n+    delete p;\n+//  TODO: use thread\n+//    NewThread(ThreadMakeBootstrap, p);\n+\n+    return Value::null;\n+}\n+"
      },
      {
        "sha": "4b27f0a00037485c2758f94c23be4659f3a309f7",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7ce51ec7bc1deeecab39b4e0e152f02f20217636",
        "patch": "@@ -269,6 +269,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n+    { \"blockchain\",         \"makebootstrap\",          &makebootstrap,          true,      false,      false },\n \n     /* Mining */\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },"
      },
      {
        "sha": "a3381fb5bc1f5c758270eec5770cfe452ee1712b",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ce51ec7bc1deeecab39b4e0e152f02f20217636/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=7ce51ec7bc1deeecab39b4e0e152f02f20217636",
        "patch": "@@ -217,5 +217,6 @@ extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool\n extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getchaintips(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value makebootstrap(const json_spirit::Array& params, bool fHelp);\n \n #endif // BITCOIN_RPCSERVER_H"
      }
    ]
  }
]