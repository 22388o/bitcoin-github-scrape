TheBlueMatt,2016-11-03T19:22:16Z,Closing for now. Will rebase on #9075 when its merged.\n,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-258247466,258247466,
TheBlueMatt,2016-11-18T03:29:14Z,Rebased on #9075...this now forms the last pull before main.cpp is split clean in two :).\n,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-261440177,261440177,
instagibbs,2016-11-18T15:08:51Z,utACK https://github.com/bitcoin/bitcoin/pull/8930/commits/2dd652afe577a09d6f70db0e79b8f6c0706dd1b4\n,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-261554103,261554103,
rebroad,2016-11-21T09:33:50Z,What is the rationale behind this refactoring please? What future changes is it enabling? Or what is it fixing?,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-261888265,261888265,
laanwj,2016-11-21T12:45:40Z,"@rebroad \n\n> This further decouples ""main"" and ""net"" processing logic by moving\n> orphan processing out of the chain-connecting cs_main lock and\n> into its own cs_main lock, beside all of the other chain callbacks.\n\nDecoupling unrelated logic to be able to split up main into validation and network handling parts.",https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-261927435,261927435,
sdaftuar,2016-11-22T14:26:12Z,"@TheBlueMatt  One thing we don't currently do, but probably should, is try to reaccept orphan transactions to the mempool if their missing inputs appear in a block.  After this PR, would you suggest we just do that inside `PeerLogicValidation::SyncTransaction()`, or would that be problematic?",https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-262253884,262253884,
sipa,2016-11-22T22:53:37Z,"utACK. You could get rid of the BOOST_FOREACH along the way, if you wish.",https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-262390333,262390333,
TheBlueMatt,2016-11-23T00:28:00Z,"@sdaftuar that seems reasonable, yea. Not for this PR, though, indeed.",https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-262406615,262406615,
sdaftuar,2016-11-23T00:41:26Z,utACK,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-262408500,262408500,
theuni,2016-11-23T22:50:08Z,utACK d2b88f97a1235057290f9e8ca0bf11437ba919f8,https://github.com/bitcoin/bitcoin/pull/8930#issuecomment-262649070,262649070,
sipa,2016-10-31T07:29:32Z,Useful.\n,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r85693873,85693873,src/main.cpp
sipa,2016-10-31T07:30:12Z,I hope we can separate nodestate and other message-processing related variables from cs_main...\n,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r85693912,85693912,src/main.cpp
theuni,2016-10-31T20:52:34Z,"@sipa Absolutely, I'm planning on doing that after the dust settles here, unless @TheBlueMatt already has it queued up. I'm planning on moving lots of what's currently in CNode to CNodeState, so breaking out the locks is a prerequisite for that.\n",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r85830368,85830368,src/main.cpp
TheBlueMatt,2016-10-31T22:47:28Z,"Dont have it queued up, but, indeed, thats an obvious change after we split main.cpp.\n",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r85848973,85848973,src/main.cpp
theuni,2016-11-23T19:35:24Z,Shouldn't this check against CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK?,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89385868,89385868,src/main.cpp
TheBlueMatt,2016-11-23T20:01:00Z,"Hmmmmm...good point...for corectness I'll add that check to this PR, but I think we probably actually want to remove it in a future one since I believe it would allow us to clean up orphan cleanup logic in the ::TX message handling logic.",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89390068,89390068,src/main.cpp
theuni,2016-11-23T20:11:30Z,"Yep, makes sense. But for now, it can at least be a short-circuit for returning without locking cs_main (not sure if there's any unlocked caller who would benefit, though).",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89391701,89391701,src/main.cpp
TheBlueMatt,2016-11-23T20:29:53Z,Done,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89394235,89394235,src/main.cpp
morcos,2016-11-28T16:55:51Z,@TheBlueMatt Your comment confuses me a bit.  Wouldn't this be broken without that check?,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89827185,89827185,src/main.cpp
TheBlueMatt,2016-11-28T19:04:52Z,"@morcos it was a reference to the fact that we might want to remove orphan transactions which conflict with txn which were added to mempool, instead of doing that work in the ::TX message handling. I believe without the check they would step all over each other, but this could be fixed in the future.",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89854552,89854552,src/main.cpp
morcos,2016-11-28T19:12:22Z,"I agree, nice to move all logic to this function. \nBut for now, we don't actually remove orphan txs which conflict with things accepted to mempool.  We could, however, move recursive processing of orphan txs that depended on mempool accepted txs here, I agree.\nAlso there are other places SyncTransaction is called, such as for disconnected block txs, where it would be incorrect to remove orphan",https://github.com/bitcoin/bitcoin/pull/8930#discussion_r89856523,89856523,src/main.cpp
rebroad,2016-12-22T15:13:31Z,Why create vOrphanErase at all? Why not simply run the EraseOrphanTx() here instead?,https://github.com/bitcoin/bitcoin/pull/8930#discussion_r93639603,93639603,src/main.cpp
