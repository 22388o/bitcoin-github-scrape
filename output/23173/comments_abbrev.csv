DrahtBot,2021-10-04 14:22:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21527](https://github.com/bitcoin/bitcoin/pull/21527) (net_processing: lock clean up by ajtowns)\n* [#21515](https://git",https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-933537749,933537749,
jamesob,2021-10-04 14:47:01,"Concept ACK, looks like a good change. Will review soon.",https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-933559585,933559585,
jnewbery,2021-10-04 16:09:04,Resolved @MarcoFalke's review comment and added a missing lock annotation.,https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-933634281,933634281,
practicalswift,2021-10-05 10:21:44,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-934274316,934274316,
jnewbery,2021-10-07 09:51:12,"Fixed up an error string and rebased on master to (hopefully) pick up fixes for unrelated CI failures. The fuzz test will still fail, so I'll try to fix that next.",https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-937634357,937634357,
jnewbery,2021-10-07 14:00:28,I've reverted the change that made `AcceptToMemoryPool()` static and left it as dynamically linkable for use by the mempool fuzz test (which was operating on a separate CChainState and CTxMemPool).,https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-937822056,937822056,
jnewbery,2021-10-19 17:14:17,Thanks for the reviews @glozow and @promag. I've addressed all review comments.,https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-946932130,946932130,
jnewbery,2021-10-29 10:53:19,"Thanks for the review, @glozow! I've rebased past #23157 and addressed all your comments.",https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-954647284,954647284,
jnewbery,2021-11-03 14:57:50,Thanks for the thorough review @ryanofsky! I believe I've addressed all of your review comments.,https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-959342617,959342617,
jnewbery,2021-11-03 16:51:53,"> 2c64270 seems to indicate that all AcceptToMemoryPool() calls from outside validation.cpp/h are removed, but it appears there are still two references left. Is this intentional?\n\nYes, see the `AcceptToMemoryPool` doxygen comment:\n\n```\n * Try to add a transaction to the mempool. This is an internal function and is\n * exposed only for testing. Client code should use ChainstateManager::",https://github.com/bitcoin/bitcoin/pull/23173#issuecomment-959725255,959725255,
MarcoFalke,2021-10-04 13:31:06,"wrong\n\n```suggestion\n        const MempoolAcceptResult result = m_node.chainman->ProcessTransaction(MakeTransactionRef(mempool_txn), /* test_accept */ false);\n```",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r721366984,721366984,src/test/util/setup_common.cpp
jnewbery,2021-10-04 16:08:41,Fixed!,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r721511017,721511017,src/test/util/setup_common.cpp
glozow,2021-10-11 15:24:47,could you explain why this move is needed? is it to reduce the diff? 179e0fb1456cf7f75517d537ba68774d59312311 _Move CChainState::MaybeUpdateMempoolForReorg() lower in validation.cpp_,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r726216627,726216627,src/validation.cpp
glozow,2021-10-11 15:29:33,Why can't ATMP be static and `ProcessTransaction` be called from the fuzz test instead?,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r726220398,726220398,src/validation.h
glozow,2021-10-11 15:30:48,93bdbf468addd11581a5f1a4465147da24920235 adds a doxygen comment that is deleted 3 commits later. Might not be necessary...,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r726221352,726221352,src/validation.h
glozow,2021-10-12 08:30:49,"I also wonder if, now that `AcceptToMemoryPool` is nothing but a wrapper for `AcceptToMemoryPoolWithTime`, we could just delete ATMP and call ATMPWT. It would also make it easier to make sure we'reremoving mentions of ATMP throughout the codebase.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r726885395,726885395,src/validation.h
jnewbery,2021-10-19 13:53:00,"Oops. This is leftover from a previous version of the branch where I made ATMP static in validation.cpp and removed the declaration from validation.h. That meant moving all of the callers of ATMP to be lower in the file (or adding a forward declaration).\n\nI've now left ATMP in the header as a test-only function, so this commit is no longer required.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r731891235,731891235,src/validation.cpp
jnewbery,2021-10-19 13:56:45,"The fuzz test is using a derived class of the mempool called `MockedTxPool`, which isn't referenced from the `CChainState` object, and so it can't use the `ChainstateManager` interface to submit transactions to the mempool.\n\nIt may be possible to clean this up in future so the fuzz test is only using public interfaces, but I think that can be left for another PR.\n\n> I also wonder if, now t",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r731895386,731895386,src/validation.h
jnewbery,2021-10-19 17:09:16,"Not necessary, but might be confusing for reviewers if I add a doxygen comment in 93bdbf4 that doesn't document all the parameters.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732078334,732078334,src/validation.h
glozow,2021-10-20 16:17:14,bypass_limits also allows the mempool to grow past the maximum size: https://github.com/bitcoin/bitcoin/blob/3bb34f0c7104dd5bfc141b6c24ab206c08f1b8c7/src/validation.cpp#L914,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732942466,732942466,src/validation.h
glozow,2021-10-20 16:17:34,"nit in f21c86c6fa\n```suggestion\n    const auto result = AcceptToMemoryPool(active_chainstate, *active_chainstate.m_mempool, tx, /* bypass_limits= */ false, test_accept);\n```",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732942757,732942757,src/validation.cpp
glozow,2021-10-20 16:19:58,"in aad911d28b: I don't disagree with this change (in fact it would be nice to remove the default argument in the future since it's common to mix up the two bools), but it's not related to this commit.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732944744,732944744,src/validation.cpp
glozow,2021-10-20 16:24:12,The addition of the /* bypass_limits= */ comment should be moved from 90f1a1f8cf to f21c86c6fa,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732948334,732948334,src/validation.cpp
glozow,2021-10-20 16:34:06,"in 48e69da541: it would be nice for the compiler to let us know we aren't doing all this validation work for nothing, how about a lil dash of C++17 spice?\n```suggestion\n    [[nodiscard]] MempoolAcceptResult ProcessTransaction(const CTransactionRef& tx, bool test_accept=false)\n```",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r732956508,732956508,src/validation.h
jnewbery,2021-10-29 10:52:24,Done! :hot_pepper: ,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r739133450,739133450,src/validation.h
jnewbery,2021-10-29 10:52:27,You're right. I've removed it and will leave for a future cleanup.,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r739133471,739133471,src/validation.cpp
jnewbery,2021-10-29 10:52:28,"I don't agree. Prior to 90f1a1f8cf8ba4a11b2f93b55d1c0e25bcdcdd6f, the argument passed here is a named variable `bypass_limits`. In that commit we change it to be the literal `false`, so adding the `/* bypass_limits= */` comment makes it obvious which argument we're passing.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r739133488,739133488,src/validation.cpp
jnewbery,2021-10-29 10:52:30,Thanks. Fixed!,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r739133506,739133506,src/validation.h
ryanofsky,2021-11-01 21:26:36,"In commit ""[test] Don't set bypass_limits to true in txvalidation_tests.cpp"" (23e5cba7749ae0a668c0e3b084e65f723617ba9f)\n\nNote, just for understanding: I think this change is safe and doesn't risk making the test meaningless because checks below verify it fails `TX_CONSENSUS`, not `TX_MEMPOOL_POLICY`. Might be worth saying this in the commit description, though, if you happen to update it.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740541469,740541469,src/test/txvalidation_tests.cpp
ryanofsky,2021-11-01 21:45:28,"In commit ""[refactor] Don't call AcceptToMemoryPool() from outside validation.cpp"" (edd4b472adbe6f45aee40d739f6c1f44e2dc35e2)\n\nAre these changes part of the wrong commit? I wouldn't expect to see changing error messages in a refactoring commit.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740551011,740551011,src/util/error.cpp
ryanofsky,2021-11-01 21:49:46,"In commit ""[validation] Add CChainState::ProcessTransaction()"" (bbc785f31b5d70c702ae37d259c46652e243ddba)\n\nIs it intentional to not pass reject reason & debug message strings to `Invalid()`? Depending on when this is expected to happen, strings might be more friendly than a numeric error code.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740552929,740552929,src/validation.cpp
ryanofsky,2021-11-01 21:54:55,"In commit ""[validation] Remove comment about AcceptToMemoryPool()"" (bc9218139fd17d26eaac5093ac36b7da016734b6)\n\nNice find!",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740555364,740555364,src/validation.cpp
ryanofsky,2021-11-01 22:06:46,"In commit ""[validation] Always call mempool.check() after processing a new transaction"" (f87e07c6fe321f0fb97703c82c0e4122f800589f)\n\nThis change does not appear to be a pure refactoring, so it would be helpful if commit description mentioned something about cases when these new checks will be done and whether there are effects on validation or performance.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740560773,740560773,src/validation.cpp
ryanofsky,2021-11-01 22:22:17,"In commit ""[validation] Add CChainState::ProcessTransaction()"" (bbc785f31b5d70c702ae37d259c46652e243ddba)\n\nIMO it would be really good to add this function in its final form without the `bypass_limits` parameter, so the later commit removing it can be dropped. This would simplify reviewing the PR, and more importantly avoid unsafe change:\n\n```diff\n-    [[nodiscard]] MempoolAcceptResult P",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r740567565,740567565,src/validation.h
ryanofsky,2021-11-02 15:54:03,"In commit ""[validation] Add CChainState::ProcessTransaction()"" (bbc785f31b5d70c702ae37d259c46652e243ddba)\n\nMaybe for consistency with `ProcessNewBlock` and `ProcessNewBlockHeaders`, call this method `ProcessNewTransaction` instead of `ProcessTransaction`. Might also help suggest that purpose of processing is to add new data, not validate existing data.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r741230001,741230001,src/validation.h
jnewbery,2021-11-03 14:56:57,"Haha you noticed. I actually hope that we'd go the other way and change `ProcessNewBlock` to `ProcessBlock` and `ProcessNewBlockHeaders` to `ProcessBlockHeaders`. There's nothing to prevent passing in the same block/headers/transaction that have previously been processed, and the functions have ways of returning that information to the caller (`ProcessNewBlock` will set the `new_block` out-param t",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027716,742027716,src/validation.h
jnewbery,2021-11-03 14:56:59,"Good idea. This was a misguided attempt to make the commits as granular as possible, but you're right that it just adds churn and confusion.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027769,742027769,src/validation.h
jnewbery,2021-11-03 14:57:03,"For mainnet nodes with default config, there's no behaviour change. I've added the following text to the commit log:\n\n>    CTxMemPool::check() will carry out internal consistency checks 1/n times,\n>    where n is set by the `-checkmempool` configuration option. By default,\n>    mempool consistency checks are disabled entirely on mainnet.\n>    \n>    Therefore, this change has no effect ",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027824,742027824,src/validation.cpp
jnewbery,2021-11-03 14:57:05,:bow: ,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027864,742027864,src/validation.cpp
jnewbery,2021-11-03 14:57:06,Good point. Fixed!,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027895,742027895,src/validation.cpp
jnewbery,2021-11-03 14:57:09,That's a fair point. I've split this change into its own commit with the reasoning in the commit log.,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027928,742027928,src/util/error.cpp
jnewbery,2021-11-03 14:57:11,That's correct. I've updated the commit log as suggested.,https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027956,742027956,src/test/txvalidation_tests.cpp
ryanofsky,2021-11-09 21:19:06,"re: https://github.com/bitcoin/bitcoin/pull/23173#discussion_r742027928\n\n> I've split this change into its own commit with the reasoning in the commit log.\n\nNot sure if it's intentional, but part of edd4b472adbe6f45aee40d739f6c1f44e2dc35e2 that was changing ""transaction pool"" to ""mempool"" in some comments was also dropped. Seem fine but just checking it wasn't lost accidentally.",https://github.com/bitcoin/bitcoin/pull/23173#discussion_r746054653,746054653,src/util/error.cpp
