[
  {
    "sha": "497c9e29640858bb3beb20089c2d4f9e133c7e42",
    "node_id": "C_kwDOABII59oAKDQ5N2M5ZTI5NjQwODU4YmIzYmViMjAwODljMmQ0ZjllMTMzYzdlNDI",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-27T15:40:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T12:04:46Z"
      },
      "message": "[test] Don't set bypass_limits to true in txvalidationcache_tests.cpp\n\nAcceptToMemoryPool() is called for transactions with fees above\nminRelayTxFee and with the mempool not full, so setting bypass_limits to\ntrue or false has no impact on the test.\n\nThe only way that changing bypass_limits from true to false could change\nthe result would be to change the outcome to INVALID(TX_MEMPOOL_POLICY).\nSince all the ATMP calls in this test result in VALID both before and\nafter this change, there is no change in behavior.",
      "tree": {
        "sha": "16860c100817166305f50ac35e1473b60a126234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16860c100817166305f50ac35e1473b60a126234"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/497c9e29640858bb3beb20089c2d4f9e133c7e42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497c9e29640858bb3beb20089c2d4f9e133c7e42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/497c9e29640858bb3beb20089c2d4f9e133c7e42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497c9e29640858bb3beb20089c2d4f9e133c7e42/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "baa9fc941cac76b35630da16d77fa2a8b0cc1755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baa9fc941cac76b35630da16d77fa2a8b0cc1755",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/baa9fc941cac76b35630da16d77fa2a8b0cc1755"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f799b8c9aab9ec25a4130b6ec3e6d08f13693051",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497c9e29640858bb3beb20089c2d4f9e133c7e42/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497c9e29640858bb3beb20089c2d4f9e133c7e42/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=497c9e29640858bb3beb20089c2d4f9e133c7e42",
        "patch": "@@ -37,7 +37,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, Dersig100Setup)\n         LOCK(cs_main);\n \n         const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(tx),\n-            true /* bypass_limits */);\n+            false /* bypass_limits */);\n         return result.m_result_type == MempoolAcceptResult::ResultType::VALID;\n     };\n "
      }
    ]
  },
  {
    "sha": "5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
    "node_id": "C_kwDOABII59oAKDU3NTlmZDEyYjhkNTkzN2U5MTg3ZmEzMzQ4OWE5NWIxZDhlNmQxZTU",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-27T15:40:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T12:04:49Z"
      },
      "message": "[test] Don't set bypass_limits to true in txvalidation_tests.cpp\n\nAcceptToMemoryPool() is called for an invalid coinbase transaction, so\nsetting bypass_limits to true or false has no impact on the test.\n\nThe only way that changing bypass_limits from true to false could change\nthe result would be to change the outcome to INVALID(TX_MEMPOOL_POLICY).\nSince the ATMP call in this test results in INVALID(TX_CONSENSUS) both\nbefore and after this change, there is no change in behavior.",
      "tree": {
        "sha": "3b8232fea2b531065197a560f621699749f2e4f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b8232fea2b531065197a560f621699749f2e4f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "497c9e29640858bb3beb20089c2d4f9e133c7e42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497c9e29640858bb3beb20089c2d4f9e133c7e42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/497c9e29640858bb3beb20089c2d4f9e133c7e42"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a966c30720400bf72e1ad476aa57fad197174dd6",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
        "patch": "@@ -38,7 +38,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n     const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(coinbaseTx),\n-                true /* bypass_limits */);\n+                false /* bypass_limits */);\n \n     BOOST_CHECK(result.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n "
      }
    ]
  },
  {
    "sha": "4c24142b1ec121623f81ba644d77341bc1bd88dd",
    "node_id": "C_kwDOABII59oAKDRjMjQxNDJiMWVjMTIxNjIzZjgxYmE2NDRkNzczNDFiYzFiZDg4ZGQ",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-19T11:12:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T14:28:04Z"
      },
      "message": "[validation] Remove comment about AcceptToMemoryPool()\n\n\"This logic is not necessary for memory pool transactions, as\nAcceptToMemoryPool already refuses previously-known transaction ids\nentirely.\" refers to the logic at\nhttps://github.com/bitcoin/bitcoin/blob/a206b0ea12eb4606b93323268fc81a4f1f952531/src/main.cpp#L484-L486,\nwhich was later removed in commit 450cbb0944cd20a06ce806e6679a1f4c83c50db2.",
      "tree": {
        "sha": "9e0525a9eadd118dabcf5405ad2d6d7062b6b129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e0525a9eadd118dabcf5405ad2d6d7062b6b129"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c24142b1ec121623f81ba644d77341bc1bd88dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c24142b1ec121623f81ba644d77341bc1bd88dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c24142b1ec121623f81ba644d77341bc1bd88dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c24142b1ec121623f81ba644d77341bc1bd88dd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5759fd12b8d5937e9187fa33489a95b1d8e6d1e5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f1c44d61ae12088562efbf40f7f06c12fb086725",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c24142b1ec121623f81ba644d77341bc1bd88dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c24142b1ec121623f81ba644d77341bc1bd88dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4c24142b1ec121623f81ba644d77341bc1bd88dd",
        "patch": "@@ -1658,8 +1658,6 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     // can be duplicated to remove the ability to spend the first instance -- even after\n     // being sent to another address.\n     // See BIP30, CVE-2012-1909, and http://r6.ca/blog/20120206T005236Z.html for more information.\n-    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n-    // already refuses previously-known transaction ids entirely.\n     // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n     // two in the chain that violate it. This prevents exploiting the issue against nodes during their"
      }
    ]
  },
  {
    "sha": "36167faea92c97ddea7403280a5074073c8e5f90",
    "node_id": "C_kwDOABII59oAKDM2MTY3ZmFlYTkyYzk3ZGRlYTc0MDMyODBhNTA3NDA3M2M4ZTVmOTA",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T12:06:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T14:28:04Z"
      },
      "message": "[logging/documentation] Remove reference to AcceptToMemoryPool from error string\n\nUser-facing error messages should not leak internal implementation\ndetails like function names. Update the MEMPOOL_REJECTED error string\nfrom \"Transaction rejected by AcceptToMemoryPool\" to the more generic\n\"Transaction rejected by mempool\". Also update the MEMPOOL_ERROR error\nmessage from \"AcceptToMemoryPool failed\" to the more precise \"Mempool\ninternal error\" since this error indicates and internal (e.g.\nlogic/hardware/etc) failure, and not a transaction rejection.",
      "tree": {
        "sha": "21879ffc86537282ca1d41abe551ec22b1bd1d4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21879ffc86537282ca1d41abe551ec22b1bd1d4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36167faea92c97ddea7403280a5074073c8e5f90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36167faea92c97ddea7403280a5074073c8e5f90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36167faea92c97ddea7403280a5074073c8e5f90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36167faea92c97ddea7403280a5074073c8e5f90/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c24142b1ec121623f81ba644d77341bc1bd88dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c24142b1ec121623f81ba644d77341bc1bd88dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c24142b1ec121623f81ba644d77341bc1bd88dd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d019ba018d0ad42f9f9165b217e3830a000bea00",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36167faea92c97ddea7403280a5074073c8e5f90/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36167faea92c97ddea7403280a5074073c8e5f90/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=36167faea92c97ddea7403280a5074073c8e5f90",
        "patch": "@@ -20,9 +20,9 @@ bilingual_str TransactionErrorString(const TransactionError err)\n         case TransactionError::P2P_DISABLED:\n             return Untranslated(\"Peer-to-peer functionality missing or disabled\");\n         case TransactionError::MEMPOOL_REJECTED:\n-            return Untranslated(\"Transaction rejected by AcceptToMemoryPool\");\n+            return Untranslated(\"Transaction rejected by mempool\");\n         case TransactionError::MEMPOOL_ERROR:\n-            return Untranslated(\"AcceptToMemoryPool failed\");\n+            return Untranslated(\"Mempool internal error\");\n         case TransactionError::INVALID_PSBT:\n             return Untranslated(\"PSBT is not well-formed\");\n         case TransactionError::PSBT_MISMATCH:"
      }
    ]
  },
  {
    "sha": "92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
    "node_id": "C_kwDOABII59oAKDkyYTNhZWVjZjZhODJlOWNiYzlmZGExMTAyMmIwNTQ4ZWZkMjRkMDU",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-27T15:55:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T14:34:38Z"
      },
      "message": "[validation] Add CChainState::ProcessTransaction()\n\nThis just calls through to AcceptToMemoryPool() internally, and is currently unused.\n\nAlso add a new transaction validation failure reason TX_NO_MEMPOOL to\nindicate that there is no mempool.",
      "tree": {
        "sha": "b7767b17918c211b159097329950a8f5d2bc6b4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7767b17918c211b159097329950a8f5d2bc6b4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36167faea92c97ddea7403280a5074073c8e5f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36167faea92c97ddea7403280a5074073c8e5f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36167faea92c97ddea7403280a5074073c8e5f90"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "05416d0aca49ba6b05f84130f4e3c912de621186",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "patch": "@@ -53,6 +53,7 @@ enum class TxValidationResult {\n      */\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n+    TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n };\n \n /** A \"reason\" why a block was invalid, suitable for determining whether the"
      },
      {
        "sha": "3ab716dc3b744f6218074db636ba02a37d1fb980",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "patch": "@@ -1409,6 +1409,7 @@ bool PeerManagerImpl::MaybePunishNodeForTx(NodeId nodeid, const TxValidationStat\n     case TxValidationResult::TX_WITNESS_STRIPPED:\n     case TxValidationResult::TX_CONFLICT:\n     case TxValidationResult::TX_MEMPOOL_POLICY:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n         break;\n     }\n     if (message != \"\") {"
      },
      {
        "sha": "1947f5d9c330556ba9fcbe423ef822546dcbfe58",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "patch": "@@ -3421,6 +3421,17 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n     return true;\n }\n \n+MempoolAcceptResult ChainstateManager::ProcessTransaction(const CTransactionRef& tx, bool test_accept)\n+{\n+    CChainState& active_chainstate = ActiveChainstate();\n+    if (!active_chainstate.m_mempool) {\n+        TxValidationState state;\n+        state.Invalid(TxValidationResult::TX_NO_MEMPOOL, \"no-mempool\");\n+        return MempoolAcceptResult::Failure(state);\n+    }\n+    return AcceptToMemoryPool(active_chainstate, *active_chainstate.m_mempool, tx, /*bypass_limits=*/ false, test_accept);\n+}\n+\n bool TestBlockValidity(BlockValidationState& state,\n                        const CChainParams& chainparams,\n                        CChainState& chainstate,"
      },
      {
        "sha": "096e609abe457a599083ebf8c35adbcb00d73000",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a3aeecf6a82e9cbc9fda11022b0548efd24d05/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "patch": "@@ -994,6 +994,15 @@ class ChainstateManager\n      */\n     bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\n \n+    /**\n+     * Try to add a transaction to the memory pool.\n+     *\n+     * @param[in]  tx              The transaction to submit for mempool acceptance.\n+     * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\n+     */\n+    [[nodiscard]] MempoolAcceptResult ProcessTransaction(const CTransactionRef& tx, bool test_accept=false)\n+        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     //! Load the block tree and coins database from disk, initializing state if we're running with -reindex\n     bool LoadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "2c64270bbe523ef87e7225c351464e7c716f0b3e",
    "node_id": "C_kwDOABII59oAKDJjNjQyNzBiYmU1MjNlZjg3ZTcyMjVjMzUxNDY0ZTdjNzE2ZjBiM2U",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-27T16:47:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T14:34:41Z"
      },
      "message": "[refactor] Don't call AcceptToMemoryPool() from outside validation.cpp",
      "tree": {
        "sha": "9a19b873baba2b2ec407dcd9cace410c37fc49f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a19b873baba2b2ec407dcd9cace410c37fc49f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c64270bbe523ef87e7225c351464e7c716f0b3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c64270bbe523ef87e7225c351464e7c716f0b3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c64270bbe523ef87e7225c351464e7c716f0b3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c64270bbe523ef87e7225c351464e7c716f0b3e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a3aeecf6a82e9cbc9fda11022b0548efd24d05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92a3aeecf6a82e9cbc9fda11022b0548efd24d05"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 28,
      "deletions": 24
    },
    "files": [
      {
        "sha": "0577ab80e3441c368350fc8f356eac6925292744",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -34,10 +34,10 @@ static void AssembleBlock(benchmark::Bench& bench)\n             txs.at(b) = MakeTransactionRef(tx);\n     }\n     {\n-        LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n+        LOCK(::cs_main);\n \n         for (const auto& txr : txs) {\n-            const MempoolAcceptResult res = ::AcceptToMemoryPool(test_setup->m_node.chainman->ActiveChainstate(), *test_setup->m_node.mempool, txr, false /* bypass_limits */);\n+            const MempoolAcceptResult res = test_setup->m_node.chainman->ProcessTransaction(txr);\n             assert(res.m_result_type == MempoolAcceptResult::ResultType::VALID);\n         }\n     }"
      },
      {
        "sha": "7e35f1f9e69b5e22cf42d1397b79d1d064c24d94",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -461,9 +461,9 @@ class PeerManagerImpl final : public PeerManager\n     bool AlreadyHaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-     * Filter for transactions that were recently rejected by\n-     * AcceptToMemoryPool. These are not rerequested until the chain tip\n-     * changes, at which point the entire filter is reset.\n+     * Filter for transactions that were recently rejected by the mempool.\n+     * These are not rerequested until the chain tip changes, at which point\n+     * the entire filter is reset.\n      *\n      * Without this filter we'd be re-requesting txs from each of our peers,\n      * increasing bandwidth consumption considerably. For instance, with 100\n@@ -2243,7 +2243,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n         if (porphanTx == nullptr) continue;\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_chainman.ActiveChainstate(), m_mempool, porphanTx, false /* bypass_limits */);\n+        const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n@@ -3260,7 +3260,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_chainman.ActiveChainstate(), m_mempool, ptx, false /* bypass_limits */);\n+        const MempoolAcceptResult result = m_chainman.ProcessTransaction(ptx);\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n@@ -3384,8 +3384,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         // If a tx has been detected by m_recent_rejects, we will have reached\n-        // this point and the tx will have been ignored. Because we haven't run\n-        // the tx through AcceptToMemoryPool, we won't have computed a DoS\n+        // this point and the tx will have been ignored. Because we haven't\n+        // submitted the tx to our mempool, we won't have computed a DoS\n         // score for it or determined exactly why we consider it invalid.\n         //\n         // This means we won't penalize any peer subsequently relaying a DoSy"
      },
      {
        "sha": "33b8e9351c206a7485dbb5964015a291b1de4ec0",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -70,17 +70,15 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             if (max_tx_fee > 0) {\n                 // First, call ATMP with test_accept and check the fee. If ATMP\n                 // fails here, return error immediately.\n-                const MempoolAcceptResult result = AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, tx, false /* bypass_limits */,\n-                                                                      true /* test_accept */);\n+                const MempoolAcceptResult result = node.chainman->ProcessTransaction(tx, /*test_accept=*/ true);\n                 if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n                     return HandleATMPError(result.m_state, err_string);\n                 } else if (result.m_base_fees.value() > max_tx_fee) {\n                     return TransactionError::MAX_FEE_EXCEEDED;\n                 }\n             }\n             // Try to submit the transaction to the mempool.\n-            const MempoolAcceptResult result = AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, tx, false /* bypass_limits */,\n-                                                                  false /* test_accept */);\n+            const MempoolAcceptResult result = node.chainman->ProcessTransaction(tx, /*test_accept=*/ false);\n             if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n                 return HandleATMPError(result.m_state, err_string);\n             }"
      },
      {
        "sha": "dd9f78da0d59b03a2e1fc4db64f79e51376bac1b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -946,12 +946,13 @@ static RPCHelpMan testmempoolaccept()\n \n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    CChainState& chainstate = chainman.ActiveChainstate();\n     const PackageMempoolAcceptResult package_result = [&] {\n         LOCK(::cs_main);\n         if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n         return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n-               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+               chainman.ProcessTransaction(txns[0], /*test_accept=*/ true));\n     }();\n \n     UniValue rpc_result(UniValue::VARR);"
      },
      {
        "sha": "2e21c666ab05e8b0576fe15c29016c5351519a78",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -37,8 +37,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n-    const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(coinbaseTx),\n-                false /* bypass_limits */);\n+    const MempoolAcceptResult result = m_node.chainman->ProcessTransaction(MakeTransactionRef(coinbaseTx));\n \n     BOOST_CHECK(result.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n "
      },
      {
        "sha": "8be64531c42fcafd5e496cc122d31ec0a19aaff5",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -36,8 +36,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, Dersig100Setup)\n     const auto ToMemPool = [this](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n \n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, MakeTransactionRef(tx),\n-            false /* bypass_limits */);\n+        const MempoolAcceptResult result = m_node.chainman->ProcessTransaction(MakeTransactionRef(tx));\n         return result.m_result_type == MempoolAcceptResult::ResultType::VALID;\n     };\n "
      },
      {
        "sha": "5a0c8e152af6c9e12314d78ad6347200c7f7eff2",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -315,7 +315,7 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     // If submit=true, add transaction to the mempool.\n     if (submit) {\n         LOCK(cs_main);\n-        const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n+        const MempoolAcceptResult result = m_node.chainman->ProcessTransaction(MakeTransactionRef(mempool_txn));\n         assert(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n     }\n "
      },
      {
        "sha": "8a48d539f86ce2483671ec14f69126b2e1b518ee",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -273,7 +273,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n         {\n             LOCK(cs_main);\n             for (const auto& tx : txs) {\n-                const MempoolAcceptResult result = AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, tx, false /* bypass_limits */);\n+                const MempoolAcceptResult result = m_node.chainman->ProcessTransaction(tx);\n                 BOOST_REQUIRE(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n             }\n         }"
      },
      {
        "sha": "71bbcbf0d4bea10ec35e730563c88aa27888f57e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c64270bbe523ef87e7225c351464e7c716f0b3e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "patch": "@@ -206,9 +206,16 @@ struct PackageMempoolAcceptResult\n };\n \n /**\n- * (Try to) add a transaction to the memory pool.\n- * @param[in]  bypass_limits   When true, don't enforce mempool fee limits.\n- * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\n+ * Try to add a transaction to the mempool. This is an internal function and is\n+ * exposed only for testing. Client code should use ChainstateManager::ProcessTransaction()\n+ *\n+ * @param[in]  active_chainstate  Reference to the active chainstate.\n+ * @param[in]  pool               Reference to the node's mempool.\n+ * @param[in]  tx                 The transaction to submit for mempool acceptance.\n+ * @param[in]  bypass_limits      When true, don't enforce mempool fee and capacity limits.\n+ * @param[in]  test_accept        When true, run validation checks but don't submit to mempool.\n+ *\n+ * @returns a MempoolAcceptResult indicating whether the transaction was accepted/rejected with reason.\n  */\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "0fdb619aaf1d62598263361a6082d182be1af792",
    "node_id": "C_kwDOABII59oAKDBmZGI2MTlhYWYxZDYyNTk4MjYzMzYxYTYwODJkMTgyYmUxYWY3OTI",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-09-27T17:11:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-11-03T14:37:45Z"
      },
      "message": "[validation] Always call mempool.check() after processing a new transaction\n\nCTxMemPool::check() will carry out internal consistency checks 1/n times,\nwhere n is set by the `-checkmempool` configuration option. By default,\nmempool consistency checks are disabled entirely on mainnet.\n\nTherefore, this change has no effect on mainnet nodes running with\ndefault configuration. It simply removes the responsibility to trigger\nmempool consistency checks from net_processing.",
      "tree": {
        "sha": "4c09bbc8b3b74e992e0a311d6ed2621e1e55c39c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c09bbc8b3b74e992e0a311d6ed2621e1e55c39c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fdb619aaf1d62598263361a6082d182be1af792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdb619aaf1d62598263361a6082d182be1af792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdb619aaf1d62598263361a6082d182be1af792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdb619aaf1d62598263361a6082d182be1af792/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c64270bbe523ef87e7225c351464e7c716f0b3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c64270bbe523ef87e7225c351464e7c716f0b3e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2185ccc7001192b5c6a68eed529b0555ff3cb94b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdb619aaf1d62598263361a6082d182be1af792/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdb619aaf1d62598263361a6082d182be1af792/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0fdb619aaf1d62598263361a6082d182be1af792",
        "patch": "@@ -2300,8 +2300,6 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n             break;\n         }\n     }\n-    CChainState& active_chainstate = m_chainman.ActiveChainstate();\n-    m_mempool.check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n }\n \n bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n@@ -3264,8 +3262,6 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            CChainState& active_chainstate = m_chainman.ActiveChainstate();\n-            m_mempool.check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());"
      },
      {
        "sha": "79ef6a6b19e0e9f91b4d76e3e7dcf545cbf28f03",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdb619aaf1d62598263361a6082d182be1af792/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdb619aaf1d62598263361a6082d182be1af792/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0fdb619aaf1d62598263361a6082d182be1af792",
        "patch": "@@ -3429,7 +3429,9 @@ MempoolAcceptResult ChainstateManager::ProcessTransaction(const CTransactionRef&\n         state.Invalid(TxValidationResult::TX_NO_MEMPOOL, \"no-mempool\");\n         return MempoolAcceptResult::Failure(state);\n     }\n-    return AcceptToMemoryPool(active_chainstate, *active_chainstate.m_mempool, tx, /*bypass_limits=*/ false, test_accept);\n+    auto result = AcceptToMemoryPool(active_chainstate, *active_chainstate.m_mempool, tx, /*bypass_limits=*/ false, test_accept);\n+    active_chainstate.m_mempool->check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n+    return result;\n }\n \n bool TestBlockValidity(BlockValidationState& state,"
      }
    ]
  }
]