[
  {
    "sha": "fa334b405411dc97fbed12b5e9103510eeb2c9f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMzNGI0MDU0MTFkYzk3ZmJlZDEyYjVlOTEwMzUxMGVlYjJjOWYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-11T07:56:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-11T07:56:16Z"
      },
      "message": "refactor: Pass block reference instead of pointer to PeerManagerImpl::BlockRequested",
      "tree": {
        "sha": "b56841aebc747ce5ffec53920150424dd567c0e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b56841aebc747ce5ffec53920150424dd567c0e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa334b405411dc97fbed12b5e9103510eeb2c9f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg9Jwv+J2hxAjk432XoJ8niaXDkMMN+oLeHe2208PdqF6DSB48CZkJP/54w+UsS\nv7aDsanlNzCjUO3rL97NRGiZekNGxEcC7YAOrUkV6qTZ5I46/NBAAHH7Dci91bJo\nnc3agObiYvm+X5K1/0/GtZo1Cc85FPYIR7dudBZzGAMcSk8d9+pKRpCd75+aIL51\nYVoBrPy+87LpOF9pHcRO40RFiwYxpBj7EtV+ce1K/a4VYdXZXNbkQ0b+Geqjl4BW\n1dcspRZoqHKyWACs6+1qS275391jwDHFrPxK4jsXFY/uvTZIjwpgsHBd3UrXfNR0\nPijb31JoO6JIKPYVupzxc7pcJbfrcuEKc85388LZ9Ni5mSrjC1TRm4xQBYN6lKbR\n7VhFWiaEpQPAoLff7UUfm0kbj1uHYEw1Sk8YuNzjS/h0bD73WfCkLnNJmmMnfOJ1\n7PLFidNaD0xMEy1BvT3eeRtDY0NG6ykB+tieuW1rAxscuq66mChifSikzX56tfa7\nKFGwUnOw\n=O9PK\n-----END PGP SIGNATURE-----",
        "payload": "tree b56841aebc747ce5ffec53920150424dd567c0e8\nparent f66eceaecf464bfab5e19f3ca8fe680d8a6aa2e1\nauthor MarcoFalke <falke.marco@gmail.com> 1623398196 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623398176 +0200\n\nrefactor: Pass block reference instead of pointer to PeerManagerImpl::BlockRequested\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa334b405411dc97fbed12b5e9103510eeb2c9f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa334b405411dc97fbed12b5e9103510eeb2c9f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa334b405411dc97fbed12b5e9103510eeb2c9f1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66eceaecf464bfab5e19f3ca8fe680d8a6aa2e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66eceaecf464bfab5e19f3ca8fe680d8a6aa2e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66eceaecf464bfab5e19f3ca8fe680d8a6aa2e1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "375be4480bd439b284fcd796dc78217680c2b039",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa334b405411dc97fbed12b5e9103510eeb2c9f1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa334b405411dc97fbed12b5e9103510eeb2c9f1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa334b405411dc97fbed12b5e9103510eeb2c9f1",
        "patch": "@@ -476,7 +476,7 @@ class PeerManagerImpl final : public PeerManager\n      * Returns false, still setting pit, if the block was already in flight from the same peer\n      * pit will only be valid as long as the same cs_main lock is being held\n      */\n-    bool BlockRequested(NodeId nodeid, const CBlockIndex* pindex, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool BlockRequested(NodeId nodeid, const CBlockIndex& block, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool TipMayBeStale() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -793,10 +793,9 @@ void PeerManagerImpl::RemoveBlockRequest(const uint256& hash)\n     mapBlocksInFlight.erase(it);\n }\n \n-bool PeerManagerImpl::BlockRequested(NodeId nodeid, const CBlockIndex* pindex, std::list<QueuedBlock>::iterator** pit)\n+bool PeerManagerImpl::BlockRequested(NodeId nodeid, const CBlockIndex& block, std::list<QueuedBlock>::iterator** pit)\n {\n-    assert(pindex);\n-    const uint256& hash{pindex->GetBlockHash()};\n+    const uint256& hash{block.GetBlockHash()};\n \n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -814,16 +813,17 @@ bool PeerManagerImpl::BlockRequested(NodeId nodeid, const CBlockIndex* pindex, s\n     RemoveBlockRequest(hash);\n \n     std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {pindex, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&m_mempool) : nullptr)});\n+            {&block, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&m_mempool) : nullptr)});\n     state->nBlocksInFlight++;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n         state->m_downloading_since = GetTime<std::chrono::microseconds>();\n         m_peers_downloading_from++;\n     }\n     itInFlight = mapBlocksInFlight.insert(std::make_pair(hash, std::make_pair(nodeid, it))).first;\n-    if (pit)\n+    if (pit) {\n         *pit = &itInFlight->second.second;\n+    }\n     return true;\n }\n \n@@ -2092,7 +2092,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                     }\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    BlockRequested(pfrom.GetId(), pindex);\n+                    BlockRequested(pfrom.GetId(), *pindex);\n                     LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom.GetId());\n                 }\n@@ -3395,7 +3395,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom.GetId())) {\n                 std::list<QueuedBlock>::iterator* queuedBlockIt = nullptr;\n-                if (!BlockRequested(pfrom.GetId(), pindex, &queuedBlockIt)) {\n+                if (!BlockRequested(pfrom.GetId(), *pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&m_mempool));\n                     else {\n@@ -4779,7 +4779,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(*pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                BlockRequested(pto->GetId(), pindex);\n+                BlockRequested(pto->GetId(), *pindex);\n                 LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());\n             }"
      }
    ]
  }
]