[
  {
    "sha": "addfdebe1a2ec45f718638f39a9ae3afb531805f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGRmZGViZTFhMmVjNDVmNzE4NjM4ZjM5YTlhZTNhZmI1MzE4MDVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-10-03T23:40:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-11-08T13:50:04Z"
      },
      "message": "Multiple Selection for peer and ban tables\n\nAllows multiple selection and action for the nodes in the peer and ban tables in the Debug Window.",
      "tree": {
        "sha": "1c8567526b0eac7767dd40f0c115c38bc1ebd995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c8567526b0eac7767dd40f0c115c38bc1ebd995"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/addfdebe1a2ec45f718638f39a9ae3afb531805f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfdebe1a2ec45f718638f39a9ae3afb531805f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/addfdebe1a2ec45f718638f39a9ae3afb531805f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfdebe1a2ec45f718638f39a9ae3afb531805f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e5782438c3d117be7e52ddd0d35ae0475a30759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e5782438c3d117be7e52ddd0d35ae0475a30759",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e5782438c3d117be7e52ddd0d35ae0475a30759"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 55,
      "deletions": 46
    },
    "files": [
      {
        "sha": "9dc75c2e1a25eb346032a6925f8ea9c90da1660a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=addfdebe1a2ec45f718638f39a9ae3afb531805f",
        "patch": "@@ -291,17 +291,11 @@ void copyEntryData(QAbstractItemView *view, int column, int role)\n     }\n }\n \n-QVariant getEntryData(QAbstractItemView *view, int column, int role)\n+QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)\n {\n     if(!view || !view->selectionModel())\n-        return QVariant();\n-    QModelIndexList selection = view->selectionModel()->selectedRows(column);\n-\n-    if(!selection.isEmpty()) {\n-        // Return first item\n-        return (selection.at(0).data(role));\n-    }\n-    return QVariant();\n+        return QList<QModelIndex>();\n+    return view->selectionModel()->selectedRows(column);\n }\n \n QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,"
      },
      {
        "sha": "64cbd51eb6f395a6015323044a8019a7ccb6d22c",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=addfdebe1a2ec45f718638f39a9ae3afb531805f",
        "patch": "@@ -67,10 +67,9 @@ namespace GUIUtil\n     /** Return a field of the currently selected entry as a QString. Does nothing if nothing\n         is selected.\n        @param[in] column  Data column to extract from the model\n-       @param[in] role    Data role to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    QVariant getEntryData(QAbstractItemView *view, int column, int role);\n+    QList<QModelIndex> getEntryData(QAbstractItemView *view, int column);\n \n     void setClipboard(const QString& str);\n "
      },
      {
        "sha": "7320c3bf7368606703d11503185f0d8a329014ea",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 35,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/addfdebe1a2ec45f718638f39a9ae3afb531805f/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=addfdebe1a2ec45f718638f39a9ae3afb531805f",
        "patch": "@@ -469,19 +469,19 @@ void RPCConsole::setClientModel(ClientModel *model)\n         ui->peerWidget->verticalHeader()->hide();\n         ui->peerWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);\n         ui->peerWidget->setSelectionBehavior(QAbstractItemView::SelectRows);\n-        ui->peerWidget->setSelectionMode(QAbstractItemView::SingleSelection);\n+        ui->peerWidget->setSelectionMode(QAbstractItemView::ExtendedSelection);\n         ui->peerWidget->setContextMenuPolicy(Qt::CustomContextMenu);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Address, ADDRESS_COLUMN_WIDTH);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Subversion, SUBVERSION_COLUMN_WIDTH);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Ping, PING_COLUMN_WIDTH);\n         ui->peerWidget->horizontalHeader()->setStretchLastSection(true);\n \n         // create peer table context menu actions\n-        QAction* disconnectAction = new QAction(tr(\"&Disconnect Node\"), this);\n-        QAction* banAction1h      = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &hour\"), this);\n-        QAction* banAction24h     = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &day\"), this);\n-        QAction* banAction7d      = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &week\"), this);\n-        QAction* banAction365d    = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &year\"), this);\n+        QAction* disconnectAction = new QAction(tr(\"&Disconnect\"), this);\n+        QAction* banAction1h      = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &hour\"), this);\n+        QAction* banAction24h     = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &day\"), this);\n+        QAction* banAction7d      = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &week\"), this);\n+        QAction* banAction365d    = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &year\"), this);\n \n         // create peer table context menu\n         peersTableContextMenu = new QMenu();\n@@ -527,7 +527,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         ui->banlistWidget->horizontalHeader()->setStretchLastSection(true);\n \n         // create ban table context menu action\n-        QAction* unbanAction = new QAction(tr(\"&Unban Node\"), this);\n+        QAction* unbanAction = new QAction(tr(\"&Unban\"), this);\n \n         // create ban table context menu\n         banTableContextMenu = new QMenu();\n@@ -973,49 +973,65 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    // Get currently selected peer address\n-    NodeId id = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::NetNodeId).toInt();\n-    // Find the node, disconnect it and clear the selected node\n-    if(g_connman->DisconnectNode(id))\n-        clearSelectedNode();\n+    \n+    // Get selected peer addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n+    {\n+        // Get currently selected peer address\n+        NodeId id = nodes.at(i).data(PeerTableModel::NetNodeId).toInt();\n+        // Find the node, disconnect it and clear the selected node\n+        if(g_connman->DisconnectNode(id))\n+            clearSelectedNode();\n+    }\n }\n \n void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-\n-    if(cachedNodeid == -1)\n-        return;\n-\n-    // Get currently selected peer address\n-    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n-    if(detailNodeRow < 0)\n-        return;\n-\n-    // Find possible nodes, ban it and clear the selected node\n-    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n-    if(stats) {\n-        g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n-        clearSelectedNode();\n-        clientModel->getBanTableModel()->refresh();\n+    \n+    // Get selected peer addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n+    {\n+        // Get currently selected peer address\n+        NodeId id = nodes.at(i).data(PeerTableModel::NetNodeId).toInt();\n+\n+\t// Get currently selected peer address\n+\tint detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(id);\n+\tif(detailNodeRow < 0)\n+\t    return;\n+\n+\t// Find possible nodes, ban it and clear the selected node\n+\tconst CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+\tif(stats) {\n+\t    g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+\t}\n     }\n+    clearSelectedNode();\n+    clientModel->getBanTableModel()->refresh();\n }\n \n void RPCConsole::unbanSelectedNode()\n {\n     if (!clientModel)\n         return;\n \n-    // Get currently selected ban address\n-    QString strNode = GUIUtil::getEntryData(ui->banlistWidget, 0, BanTableModel::Address).toString();\n-    CSubNet possibleSubnet;\n-\n-    LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n-    if (possibleSubnet.IsValid() && g_connman)\n+    // Get selected ban addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->banlistWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n     {\n-        g_connman->Unban(possibleSubnet);\n-        clientModel->getBanTableModel()->refresh();\n+        // Get currently selected ban address\n+        QString strNode = nodes.at(i).data(BanTableModel::Address).toString();\n+        CSubNet possibleSubnet;\n+\n+        LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n+        if (possibleSubnet.IsValid() && g_connman)\n+        {\n+            g_connman->Unban(possibleSubnet);\n+            clientModel->getBanTableModel()->refresh();\n+        }\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "1077577546334bc26daa3ab8580f24063a0b67c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDc3NTc3NTQ2MzM0YmMyNmRhYTNhYjg1ODBmMjQwNjNhMGI2N2M2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-11-08T15:41:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-11-08T20:11:25Z"
      },
      "message": "Fix auto-deselection of peers",
      "tree": {
        "sha": "ef167f41b3c421895d1226ed3d9220772ad63a6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef167f41b3c421895d1226ed3d9220772ad63a6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1077577546334bc26daa3ab8580f24063a0b67c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1077577546334bc26daa3ab8580f24063a0b67c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1077577546334bc26daa3ab8580f24063a0b67c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1077577546334bc26daa3ab8580f24063a0b67c6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "addfdebe1a2ec45f718638f39a9ae3afb531805f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/addfdebe1a2ec45f718638f39a9ae3afb531805f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/addfdebe1a2ec45f718638f39a9ae3afb531805f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 24,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a9fef731e1979927a9d9df53a7497606bd5542fb",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1077577546334bc26daa3ab8580f24063a0b67c6/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1077577546334bc26daa3ab8580f24063a0b67c6/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1077577546334bc26daa3ab8580f24063a0b67c6",
        "patch": "@@ -343,7 +343,6 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n-    cachedNodeid(-1),\n     platformStyle(_platformStyle),\n     peersTableContextMenu(0),\n     banTableContextMenu(0),\n@@ -514,7 +513,9 @@ void RPCConsole::setClientModel(ClientModel *model)\n             this, SLOT(peerSelected(const QItemSelection &, const QItemSelection &)));\n         // peer table signal handling - update peer details when new nodes are added to the model\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n-\n+        // peer table signal handling - cache selected node ids\n+        connect(model->getPeerTableModel(), SIGNAL(layoutAboutToChange()), this, SLOT(peerLayoutAboutToChange()));\n+        \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -825,6 +826,17 @@ void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelecti\n         updateNodeDetail(stats);\n }\n \n+void RPCConsole::peerLayoutAboutToChange()\n+{\n+    QModelIndexList selected = ui->peerWidget->selectionModel()->selectedIndexes();\n+    cachedNodeids.clear();\n+    for(int i = 0; i < selected.size(); i++)\n+    {\n+        const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(selected.at(i).row());\n+        cachedNodeids.append(stats->nodeStats.nodeid);\n+    }\n+}\n+\n void RPCConsole::peerLayoutChanged()\n {\n     if (!clientModel || !clientModel->getPeerTableModel())\n@@ -834,7 +846,7 @@ void RPCConsole::peerLayoutChanged()\n     bool fUnselect = false;\n     bool fReselect = false;\n \n-    if (cachedNodeid == -1) // no node selected yet\n+    if (cachedNodeids.empty()) // no node selected yet\n         return;\n \n     // find the currently selected row\n@@ -846,7 +858,7 @@ void RPCConsole::peerLayoutChanged()\n \n     // check if our detail node has a row in the table (it may not necessarily\n     // be at selectedRow since its position can change after a layout change)\n-    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeids.first());\n \n     if (detailNodeRow < 0)\n     {\n@@ -872,7 +884,10 @@ void RPCConsole::peerLayoutChanged()\n \n     if (fReselect)\n     {\n-        ui->peerWidget->selectRow(detailNodeRow);\n+        for(int i = 0; i < cachedNodeids.size(); i++)\n+        {\n+            ui->peerWidget->selectRow(clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeids.at(i)));\n+        }\n     }\n \n     if (stats)\n@@ -881,9 +896,6 @@ void RPCConsole::peerLayoutChanged()\n \n void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n {\n-    // Update cached nodeid\n-    cachedNodeid = stats->nodeStats.nodeid;\n-\n     // update the detail ui with latest node information\n     QString peerAddrDetails(QString::fromStdString(stats->nodeStats.addrName) + \" \");\n     peerAddrDetails += tr(\"(node id: %1)\").arg(QString::number(stats->nodeStats.nodeid));\n@@ -1038,7 +1050,7 @@ void RPCConsole::unbanSelectedNode()\n void RPCConsole::clearSelectedNode()\n {\n     ui->peerWidget->selectionModel()->clearSelection();\n-    cachedNodeid = -1;\n+    cachedNodeids.clear();\n     ui->detailWidget->hide();\n     ui->peerHeading->setText(tr(\"Select a peer to view detailed information.\"));\n }"
      },
      {
        "sha": "8e1d878ae5199dc7d1c5a50994c6346f5af398d8",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1077577546334bc26daa3ab8580f24063a0b67c6/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1077577546334bc26daa3ab8580f24063a0b67c6/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=1077577546334bc26daa3ab8580f24063a0b67c6",
        "patch": "@@ -98,6 +98,8 @@ public Q_SLOTS:\n     void scrollToEnd();\n     /** Handle selection of peer in peers list */\n     void peerSelected(const QItemSelection &selected, const QItemSelection &deselected);\n+    /** Handle selection caching before update */\n+    void peerLayoutAboutToChange();\n     /** Handle updated peer information */\n     void peerLayoutChanged();\n     /** Disconnect a selected node on the Peers tab */\n@@ -135,7 +137,7 @@ public Q_SLOTS:\n     ClientModel *clientModel;\n     QStringList history;\n     int historyPtr;\n-    NodeId cachedNodeid;\n+    QList<NodeId> cachedNodeids;\n     const PlatformStyle *platformStyle;\n     RPCTimerInterface *rpcTimerInterface;\n     QMenu *peersTableContextMenu;"
      }
    ]
  }
]