[
  {
    "sha": "30c3fb1359d836107bdaa15a457c9a331caba4f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGMzZmIxMzU5ZDgzNjEwN2JkYWExNWE0NTdjOWEzMzFjYWJhNGY0",
    "commit": {
      "author": {
        "name": "SylTi",
        "email": "sylvain.tissier@gmail.com",
        "date": "2019-08-29T10:05:36Z"
      },
      "committer": {
        "name": "SylTi",
        "email": "sylvain.tissier@gmail.com",
        "date": "2019-08-29T10:13:45Z"
      },
      "message": "RPC: Add command for pruning past ChainTip",
      "tree": {
        "sha": "541273d11666faf7d9e7bc6674261c7573313321",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/541273d11666faf7d9e7bc6674261c7573313321"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30c3fb1359d836107bdaa15a457c9a331caba4f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c3fb1359d836107bdaa15a457c9a331caba4f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30c3fb1359d836107bdaa15a457c9a331caba4f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c3fb1359d836107bdaa15a457c9a331caba4f4/comments",
    "author": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SylTi",
      "id": 1770876,
      "node_id": "MDQ6VXNlcjE3NzA4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1770876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylTi",
      "html_url": "https://github.com/SylTi",
      "followers_url": "https://api.github.com/users/SylTi/followers",
      "following_url": "https://api.github.com/users/SylTi/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylTi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylTi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylTi/subscriptions",
      "organizations_url": "https://api.github.com/users/SylTi/orgs",
      "repos_url": "https://api.github.com/users/SylTi/repos",
      "events_url": "https://api.github.com/users/SylTi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylTi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00dad5e0e1ddd6047bd4ff0a3032aa8950817b5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dad5e0e1ddd6047bd4ff0a3032aa8950817b5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00dad5e0e1ddd6047bd4ff0a3032aa8950817b5f"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 56,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a12259ae4ef525de1b684b5d3c227fc4c103aab1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c3fb1359d836107bdaa15a457c9a331caba4f4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c3fb1359d836107bdaa15a457c9a331caba4f4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=30c3fb1359d836107bdaa15a457c9a331caba4f4",
        "patch": "@@ -1034,6 +1034,45 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n     return uint64_t(block->nHeight);\n }\n \n+static UniValue pruneaftertip(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"pruneaftertip\",\n+        \"Prune any blocks past the chain tip.\\n\",\n+        {},\n+        RPCResult{\n+            \"n    (numeric) Current Chain Tip height.\\n\"\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"pruneaftertip\", \"\")\n+            + HelpExampleRpc(\"pruneaftertip\", \"\")\n+        },\n+    }.Check(request);\n+\n+    if (!fPruneMode)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n+\n+    LOCK(cs_main);\n+\n+    int heightParam = ::ChainActive().Tip()->nHeight;\n+    if (heightParam < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative block height.\");\n+\n+    unsigned int height = (unsigned int) heightParam;\n+    unsigned int chainHeight = (unsigned int) ::ChainActive().Height();\n+    if (chainHeight < Params().PruneAfterHeight())\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n+    else if (height > chainHeight)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Blockchain is shorter than the attempted prune height.\");\n+\n+    PruneBlockFilesManual(height);\n+    const CBlockIndex* block = ::ChainActive().Tip();\n+    assert(block);\n+    while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+        block = block->pprev;\n+    }\n+    return uint64_t(height);\n+}\n+\n static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n@@ -2331,6 +2370,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {} },\n+    { \"blockchain\",         \"pruneaftertip\",          &pruneaftertip,          {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },\n     { \"blockchain\",         \"savemempool\",            &savemempool,            {} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },"
      },
      {
        "sha": "5764877f9645400f053a93d0bcad6cd622f975c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c3fb1359d836107bdaa15a457c9a331caba4f4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c3fb1359d836107bdaa15a457c9a331caba4f4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=30c3fb1359d836107bdaa15a457c9a331caba4f4",
        "patch": "@@ -3590,6 +3590,14 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n     }\n }\n \n+bool isNormalPruningFile(int fileNumber, unsigned int nLastBlockWeCanPrune) {\n+    return (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune);\n+}\n+\n+bool isAfterTipPruningFile(int fileNumber, unsigned int nFirstBlockWeCanPrune) {\n+    return (vinfoBlockFile[fileNumber].nSize == 0  || vinfoBlockFile[fileNumber].nHeightFirst < nFirstBlockWeCanPrune || vinfoBlockFile[fileNumber].nHeightLast < nFirstBlockWeCanPrune);\n+}\n+\n /* Calculate the block/rev files to delete based on height specified by user with RPC command pruneblockchain */\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)\n {\n@@ -3599,17 +3607,20 @@ static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPr\n     if (::ChainActive().Tip() == nullptr)\n         return;\n \n-    // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n-    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, ::ChainActive().Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n+    bool afterTip = nManualPruneHeight == ::ChainActive().Tip()->nHeight;\n+    bool (*isProtectedFile)(int, unsigned int) = afterTip ? isAfterTipPruningFile : isNormalPruningFile;\n+    // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip) UNLESS we are pruning after the Tip\n+    unsigned int nFirstOrLastBlockWeCanPrune = afterTip ? (unsigned int) ::ChainActive().Tip()->nHeight + 1 : std::min((unsigned)nManualPruneHeight, ::ChainActive().Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n+    \n     int count=0;\n-    for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n-        if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n+    for (int fileNumber = 0; fileNumber <= nLastBlockFile; fileNumber++) {\n+        if (isProtectedFile(fileNumber, nFirstOrLastBlockWeCanPrune))\n             continue;\n         PruneOneBlockFile(fileNumber);\n         setFilesToPrune.insert(fileNumber);\n         count++;\n     }\n-    LogPrintf(\"Prune (Manual): prune_height=%d removed %d blk/rev pairs\\n\", nLastBlockWeCanPrune, count);\n+    LogPrintf(\"Prune (Manual): prune_height=%d removed %d blk/rev pairs\\n\", nFirstOrLastBlockWeCanPrune, count);\n }\n \n /* This function is called from the RPC code for pruneblockchain */"
      }
    ]
  }
]