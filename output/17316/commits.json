[
  {
    "sha": "d314e8a818d4c162b1c7201533e6b600dcab2d91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzE0ZThhODE4ZDRjMTYyYjFjNzIwMTUzM2U2YjYwMGRjYWIyZDkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-30T12:10:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-30T13:27:31Z"
      },
      "message": "refactor: Replace all uses of boost::optional with our own Optional type\n\nAfter this:\n\n- `boost::optional` is no longer used directly (only through `Optional`\n    which is an alias for it)\n- `boost/optional.hpp` is only included in one place",
      "tree": {
        "sha": "ead168b71776df14aa263bb28bb5678eaf9c0646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ead168b71776df14aa263bb28bb5678eaf9c0646"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d314e8a818d4c162b1c7201533e6b600dcab2d91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d314e8a818d4c162b1c7201533e6b600dcab2d91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d314e8a818d4c162b1c7201533e6b600dcab2d91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d314e8a818d4c162b1c7201533e6b600dcab2d91/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecad0a8019fb9e8503ec92b6057a5e649866e25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecad0a8019fb9e8503ec92b6057a5e649866e25e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecad0a8019fb9e8503ec92b6057a5e649866e25e"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "9d996171bb73759d8408bb4d421a888b67628537",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d314e8a818d4c162b1c7201533e6b600dcab2d91",
        "patch": "@@ -387,7 +387,7 @@ struct PSBTOutput\n /** A version of CTransaction with the PSBT format*/\n struct PartiallySignedTransaction\n {\n-    boost::optional<CMutableTransaction> tx;\n+    Optional<CMutableTransaction> tx;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;"
      },
      {
        "sha": "77353f5f0517fb22a56e3fd22c2ce31c376f5b88",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d314e8a818d4c162b1c7201533e6b600dcab2d91",
        "patch": "@@ -8,6 +8,7 @@\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <optional.h>\n #include <validation.h>\n #include <policy/policy.h>\n #include <policy/fees.h>\n@@ -155,7 +156,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            boost::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n                 parentHashes.insert(*piter);\n                 if (parentHashes.size() + 1 > limitAncestorCount) {\n@@ -860,11 +861,11 @@ const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n     return it == mapNextTx.end() ? nullptr : it->second;\n }\n \n-boost::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n+Optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return boost::optional<txiter>{};\n+    return Optional<txiter>{};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "9ccede9d4df19637964e10759ab8aded2bb65b9e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d314e8a818d4c162b1c7201533e6b600dcab2d91",
        "patch": "@@ -17,6 +17,7 @@\n #include <coins.h>\n #include <crypto/siphash.h>\n #include <indirectmap.h>\n+#include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n@@ -602,7 +603,7 @@ class CTxMemPool\n     const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Returns an iterator to the given hash, if found */\n-    boost::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    Optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);"
      },
      {
        "sha": "fca4b75c458689124649aa979363e14c48a05ad7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d314e8a818d4c162b1c7201533e6b600dcab2d91",
        "patch": "@@ -5,13 +5,12 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n+#include <optional.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <wallet/wallet.h>\n \n-#include <boost/optional.hpp>\n-\n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n@@ -22,19 +21,19 @@ class CCoinControl\n     //! Custom change destination, if not set an address is generated\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n-    boost::optional<OutputType> m_change_type;\n+    Optional<OutputType> m_change_type;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which are solvable\n     bool fAllowWatchOnly;\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n     //! Override the wallet's m_pay_tx_fee if set\n-    boost::optional<CFeeRate> m_feerate;\n+    Optional<CFeeRate> m_feerate;\n     //! Override the default confirmation target if set\n-    boost::optional<unsigned int> m_confirm_target;\n+    Optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n-    boost::optional<bool> m_signal_bip125_rbf;\n+    Optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n     //! Forbids inclusion of dirty (previously used) addresses"
      },
      {
        "sha": "870e23596482123ee6844069f8511b80e8fa90ac",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d314e8a818d4c162b1c7201533e6b600dcab2d91/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=d314e8a818d4c162b1c7201533e6b600dcab2d91",
        "patch": "@@ -4,11 +4,10 @@\n \n #include <wallet/coinselection.h>\n \n+#include <optional.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n-#include <boost/optional.hpp>\n-\n // Descending order comparator\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n@@ -219,7 +218,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     nValueRet = 0;\n \n     // List of values less than target\n-    boost::optional<OutputGroup> lowest_larger;\n+    Optional<OutputGroup> lowest_larger;\n     std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n "
      }
    ]
  }
]