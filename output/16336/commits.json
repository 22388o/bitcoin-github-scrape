[
  {
    "sha": "d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmU2Y2Y1MWRjZmI0ZmRmZjg0YzFlZWJkM2MxOTg3ZTEyNDBkMDU1",
    "commit": {
      "author": {
        "name": "qmma",
        "email": "qmma70@gmail.com",
        "date": "2019-07-04T01:36:06Z"
      },
      "committer": {
        "name": "qmma",
        "email": "qmma70@gmail.com",
        "date": "2019-07-04T01:36:06Z"
      },
      "message": "Refactor bloom filter class data member names",
      "tree": {
        "sha": "5b2ecbb8a283e195be6f582135ff7632427cd4a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2ecbb8a283e195be6f582135ff7632427cd4a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEESR+Z3AAz5TjClLGeBGEjOKQ38goFAl0dWAYACgkQBGEjOKQ3\n8gq9UA/5AUKssiShy+aVBZhISzP4w7UQftMTHuP+W5rH2fc27bQVljLzNbqVyGb+\niYA0BVoUcyOHFlzYuOPuv1nqgqu+FiD08i+5rZjvRAoK+GR+YsBoyXXbCzD0N9Ah\n7xAyrJmCV3bwUNXQW8FWLtK3mnIdaodLDX9W60Qzzs2Md7UjQOIWQnNkWkjdv//l\ncMN15Jm1ypIKJOjOF7edg+SPXvP9b1ctT15dHtFiLzGEPlQQAcZyXx0/vzPHQKff\nSJQ2ak3AtZoTFJ5LtxWc4xs/GK/QyIS+EBIUvnwhgOInyRHFPSF58wQ5+abx0xgH\n2TrhOhPJ6Xjok59Gl4EQduV5Uih8mUEik7q3Ss/u5xeAjLDEnUFn67HG4tkysnv4\n3f+yB2JIm5fOHqUYnC9kpI/CBpZhSdHLOoPRpPjiMschgpx260mNTbIshZlDMSDw\nERoJMo0d9/rXGv2cZ1p3QPm5lqwNJoR+zkgd8PpdtrCsyY1rpYojPzoTA839VTO6\nq/cAdLz1Qr2AbjXh3XvDpmMPnook7fjCXB9kVY87mUa6QEt35gnZJe2nekIzskYH\n0Dg/spK7S6RM666DqqT5SfdxnQ1t2ocShlntuRaM1E2ENh9D5F+OZ7OQNJQ95Ssw\nHAbJ9KvcpE4jjYWtfuk7gs8Y4Zen5W1dAEhhSb6sxj66pDLN10A=\n=HSZs\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b2ecbb8a283e195be6f582135ff7632427cd4a9\nparent 1381ddbcfcb6429b1327fd3db91ef97d8603aef9\nauthor qmma <qmma70@gmail.com> 1562204166 -0400\ncommitter qmma <qmma70@gmail.com> 1562204166 -0400\n\nRefactor bloom filter class data member names\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055/comments",
    "author": {
      "login": "qmma70",
      "id": 5808517,
      "node_id": "MDQ6VXNlcjU4MDg1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5808517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qmma70",
      "html_url": "https://github.com/qmma70",
      "followers_url": "https://api.github.com/users/qmma70/followers",
      "following_url": "https://api.github.com/users/qmma70/following{/other_user}",
      "gists_url": "https://api.github.com/users/qmma70/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qmma70/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qmma70/subscriptions",
      "organizations_url": "https://api.github.com/users/qmma70/orgs",
      "repos_url": "https://api.github.com/users/qmma70/repos",
      "events_url": "https://api.github.com/users/qmma70/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qmma70/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "qmma70",
      "id": 5808517,
      "node_id": "MDQ6VXNlcjU4MDg1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5808517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qmma70",
      "html_url": "https://github.com/qmma70",
      "followers_url": "https://api.github.com/users/qmma70/followers",
      "following_url": "https://api.github.com/users/qmma70/following{/other_user}",
      "gists_url": "https://api.github.com/users/qmma70/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qmma70/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qmma70/subscriptions",
      "organizations_url": "https://api.github.com/users/qmma70/orgs",
      "repos_url": "https://api.github.com/users/qmma70/repos",
      "events_url": "https://api.github.com/users/qmma70/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qmma70/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1381ddbcfcb6429b1327fd3db91ef97d8603aef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1381ddbcfcb6429b1327fd3db91ef97d8603aef9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1381ddbcfcb6429b1327fd3db91ef97d8603aef9"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 78,
      "deletions": 78
    },
    "files": [
      {
        "sha": "801fff027295a849e99047190f60df7f89f3b8a5",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 61,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
        "patch": "@@ -25,37 +25,37 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n      * - nElements * log(fp rate) / ln(2)^2\n      * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n      */\n-    vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+    m_vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n     /**\n      * The ideal number of hash functions is filter size * ln(2) / number of elements\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n-    isFull(false),\n-    isEmpty(true),\n-    nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n-    nTweak(nTweakIn),\n-    nFlags(nFlagsIn)\n+    m_isFull(false),\n+    m_isEmpty(true),\n+    m_nHashFuncs(std::min((unsigned int)(m_vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+    m_nTweak(nTweakIn),\n+    m_nFlags(nFlagsIn)\n {\n }\n \n inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n-    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n+    return MurmurHash3(nHashNum * 0xFBA4C795 + m_nTweak, vDataToHash) % (m_vData.size() * 8);\n }\n \n void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n-    if (isFull)\n+    if (m_isFull)\n         return;\n-    for (unsigned int i = 0; i < nHashFuncs; i++)\n+    for (unsigned int i = 0; i < m_nHashFuncs; ++i)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n         // Sets bit nIndex of vData\n-        vData[nIndex >> 3] |= (1 << (7 & nIndex));\n+        m_vData[nIndex >> 3] |= (1 << (7 & nIndex));\n     }\n-    isEmpty = false;\n+    m_isEmpty = false;\n }\n \n void CBloomFilter::insert(const COutPoint& outpoint)\n@@ -74,15 +74,15 @@ void CBloomFilter::insert(const uint256& hash)\n \n bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n-    if (isFull)\n+    if (m_isFull)\n         return true;\n-    if (isEmpty)\n+    if (m_isEmpty)\n         return false;\n-    for (unsigned int i = 0; i < nHashFuncs; i++)\n+    for (unsigned int i = 0; i < m_nHashFuncs; ++i)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n         // Checks bit nIndex of vData\n-        if (!(vData[nIndex >> 3] & (1 << (7 & nIndex))))\n+        if (!(m_vData[nIndex >> 3] & (1 << (7 & nIndex))))\n             return false;\n     }\n     return true;\n@@ -104,36 +104,36 @@ bool CBloomFilter::contains(const uint256& hash) const\n \n void CBloomFilter::clear()\n {\n-    vData.assign(vData.size(),0);\n-    isFull = false;\n-    isEmpty = true;\n+    m_vData.assign(m_vData.size(), 0);\n+    m_isFull = false;\n+    m_isEmpty = true;\n }\n \n void CBloomFilter::reset(const unsigned int nNewTweak)\n {\n     clear();\n-    nTweak = nNewTweak;\n+    m_nTweak = nNewTweak;\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n-    return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n+    return m_vData.size() <= MAX_BLOOM_FILTER_SIZE && m_nHashFuncs <= MAX_HASH_FUNCS;\n }\n \n bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n {\n     bool fFound = false;\n     // Match if the filter contains the hash of tx\n     //  for finding tx when they appear in a block\n-    if (isFull)\n+    if (m_isFull)\n         return true;\n-    if (isEmpty)\n+    if (m_isEmpty)\n         return false;\n     const uint256& hash = tx.GetHash();\n     if (contains(hash))\n         fFound = true;\n \n-    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    for (unsigned int i = 0; i < tx.vout.size(); ++i)\n     {\n         const CTxOut& txout = tx.vout[i];\n         // Match if the filter contains any arbitrary script data element in any scriptPubKey in tx\n@@ -150,9 +150,9 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n             if (data.size() != 0 && contains(data))\n             {\n                 fFound = true;\n-                if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_ALL)\n+                if ((m_nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_ALL)\n                     insert(COutPoint(hash, i));\n-                else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n+                else if ((m_nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     std::vector<std::vector<unsigned char> > vSolutions;\n                     txnouttype type = Solver(txout.scriptPubKey, vSolutions);\n@@ -194,39 +194,39 @@ void CBloomFilter::UpdateEmptyFull()\n {\n     bool full = true;\n     bool empty = true;\n-    for (unsigned int i = 0; i < vData.size(); i++)\n+    for (unsigned int i = 0; i < m_vData.size(); ++i)\n     {\n-        full &= vData[i] == 0xff;\n-        empty &= vData[i] == 0;\n+        full &= m_vData[i] == 0xff;\n+        empty &= m_vData[i] == 0;\n     }\n-    isFull = full;\n-    isEmpty = empty;\n+    m_isFull = full;\n+    m_isEmpty = empty;\n }\n \n CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)\n {\n     double logFpRate = log(fpRate);\n     /* The optimal number of hash functions is log(fpRate) / log(0.5), but\n      * restrict it to the range 1-50. */\n-    nHashFuncs = std::max(1, std::min((int)round(logFpRate / log(0.5)), 50));\n+    m_nHashFuncs = std::max(1, std::min((int)round(logFpRate / log(0.5)), 50));\n     /* In this rolling bloom filter, we'll store between 2 and 3 generations of nElements / 2 entries. */\n-    nEntriesPerGeneration = (nElements + 1) / 2;\n-    uint32_t nMaxElements = nEntriesPerGeneration * 3;\n+    m_nEntriesPerGeneration = (nElements + 1) / 2;\n+    uint32_t nMaxElements = m_nEntriesPerGeneration * 3;\n     /* The maximum fpRate = pow(1.0 - exp(-nHashFuncs * nMaxElements / nFilterBits), nHashFuncs)\n      * =>          pow(fpRate, 1.0 / nHashFuncs) = 1.0 - exp(-nHashFuncs * nMaxElements / nFilterBits)\n      * =>          1.0 - pow(fpRate, 1.0 / nHashFuncs) = exp(-nHashFuncs * nMaxElements / nFilterBits)\n      * =>          log(1.0 - pow(fpRate, 1.0 / nHashFuncs)) = -nHashFuncs * nMaxElements / nFilterBits\n      * =>          nFilterBits = -nHashFuncs * nMaxElements / log(1.0 - pow(fpRate, 1.0 / nHashFuncs))\n      * =>          nFilterBits = -nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs))\n      */\n-    uint32_t nFilterBits = (uint32_t)ceil(-1.0 * nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs)));\n-    data.clear();\n+    uint32_t nFilterBits = (uint32_t)ceil(-1.0 * m_nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / m_nHashFuncs)));\n+    m_data.clear();\n     /* For each data element we need to store 2 bits. If both bits are 0, the\n      * bit is treated as unset. If the bits are (01), (10), or (11), the bit is\n      * treated as set in generation 1, 2, or 3 respectively.\n      * These bits are stored in separate integers: position P corresponds to bit\n      * (P & 63) of the integers data[(P >> 6) * 2] and data[(P >> 6) * 2 + 1]. */\n-    data.resize(((nFilterBits + 63) / 64) << 1);\n+    m_data.resize(((nFilterBits + 63) / 64) << 1);\n     reset();\n }\n \n@@ -245,32 +245,32 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n-    if (nEntriesThisGeneration == nEntriesPerGeneration) {\n-        nEntriesThisGeneration = 0;\n-        nGeneration++;\n-        if (nGeneration == 4) {\n-            nGeneration = 1;\n+    if (m_nEntriesThisGeneration == m_nEntriesPerGeneration) {\n+        m_nEntriesThisGeneration = 0;\n+        ++m_nGeneration;\n+        if (m_nGeneration == 4) {\n+            m_nGeneration = 1;\n         }\n-        uint64_t nGenerationMask1 = 0 - (uint64_t)(nGeneration & 1);\n-        uint64_t nGenerationMask2 = 0 - (uint64_t)(nGeneration >> 1);\n+        uint64_t nGenerationMask1 = 0 - (uint64_t)(m_nGeneration & 1);\n+        uint64_t nGenerationMask2 = 0 - (uint64_t)(m_nGeneration >> 1);\n         /* Wipe old entries that used this generation number. */\n-        for (uint32_t p = 0; p < data.size(); p += 2) {\n-            uint64_t p1 = data[p], p2 = data[p + 1];\n+        for (uint32_t p = 0; p < m_data.size(); p += 2) {\n+            uint64_t p1 = m_data[p], p2 = m_data[p + 1];\n             uint64_t mask = (p1 ^ nGenerationMask1) | (p2 ^ nGenerationMask2);\n-            data[p] = p1 & mask;\n-            data[p + 1] = p2 & mask;\n+            m_data[p] = p1 & mask;\n+            m_data[p + 1] = p2 & mask;\n         }\n     }\n-    nEntriesThisGeneration++;\n+    ++m_nEntriesThisGeneration;\n \n-    for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+    for (int n = 0; n < m_nHashFuncs; n++) {\n+        uint32_t h = RollingBloomHash(n, m_nTweak, vKey);\n         int bit = h & 0x3F;\n         /* FastMod works with the upper bits of h, so it is safe to ignore that the lower bits of h are already used for bit. */\n-        uint32_t pos = FastMod(h, data.size());\n+        uint32_t pos = FastMod(h, m_data.size());\n         /* The lowest bit of pos is ignored, and set to zero for the first bit, and to one for the second. */\n-        data[pos & ~1] = (data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration & 1)) << bit;\n-        data[pos | 1] = (data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration >> 1)) << bit;\n+        m_data[pos & ~1] = (m_data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(m_nGeneration & 1)) << bit;\n+        m_data[pos | 1] = (m_data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(m_nGeneration >> 1)) << bit;\n     }\n }\n \n@@ -282,12 +282,12 @@ void CRollingBloomFilter::insert(const uint256& hash)\n \n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n-    for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+    for (int n = 0; n < m_nHashFuncs; n++) {\n+        uint32_t h = RollingBloomHash(n, m_nTweak, vKey);\n         int bit = h & 0x3F;\n-        uint32_t pos = FastMod(h, data.size());\n+        uint32_t pos = FastMod(h, m_data.size());\n         /* If the relevant bit is not set in either data[pos & ~1] or data[pos | 1], the filter does not contain vKey */\n-        if (!(((data[pos & ~1] | data[pos | 1]) >> bit) & 1)) {\n+        if (!(((m_data[pos & ~1] | m_data[pos | 1]) >> bit) & 1)) {\n             return false;\n         }\n     }\n@@ -302,8 +302,8 @@ bool CRollingBloomFilter::contains(const uint256& hash) const\n \n void CRollingBloomFilter::reset()\n {\n-    nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n-    nEntriesThisGeneration = 0;\n-    nGeneration = 1;\n-    std::fill(data.begin(), data.end(), 0);\n+    m_nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+    m_nEntriesThisGeneration = 0;\n+    m_nGeneration = 1;\n+    std::fill(m_data.begin(), m_data.end(), 0);\n }"
      },
      {
        "sha": "ffc3b4ba8a9bf8a6a3e3fcf386ef38b681ac2bc0",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d2e6cf51dcfb4fdff84c1eebd3c1987e1240d055",
        "patch": "@@ -44,12 +44,12 @@ enum bloomflags\n class CBloomFilter\n {\n private:\n-    std::vector<unsigned char> vData;\n-    bool isFull;\n-    bool isEmpty;\n-    unsigned int nHashFuncs;\n-    unsigned int nTweak;\n-    unsigned char nFlags;\n+    std::vector<unsigned char> m_vData;\n+    bool m_isFull;\n+    bool m_isEmpty;\n+    unsigned int m_nHashFuncs;\n+    unsigned int m_nTweak;\n+    unsigned char m_nFlags;\n \n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n@@ -64,16 +64,16 @@ class CBloomFilter\n      * nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n      */\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n-    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n+    CBloomFilter() : m_isFull(true), m_isEmpty(false), m_nHashFuncs(0), m_nTweak(0), m_nFlags(0) {}\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n+        READWRITE(m_vData);\n+        READWRITE(m_nHashFuncs);\n+        READWRITE(m_nTweak);\n+        READWRITE(m_nFlags);\n     }\n \n     void insert(const std::vector<unsigned char>& vKey);\n@@ -128,12 +128,12 @@ class CRollingBloomFilter\n     void reset();\n \n private:\n-    int nEntriesPerGeneration;\n-    int nEntriesThisGeneration;\n-    int nGeneration;\n-    std::vector<uint64_t> data;\n-    unsigned int nTweak;\n-    int nHashFuncs;\n+    int m_nEntriesPerGeneration;\n+    int m_nEntriesThisGeneration;\n+    int m_nGeneration;\n+    std::vector<uint64_t> m_data;\n+    unsigned int m_nTweak;\n+    int m_nHashFuncs;\n };\n \n #endif // BITCOIN_BLOOM_H"
      }
    ]
  }
]