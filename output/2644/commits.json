[
  {
    "sha": "0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmU4MDEwYTEwYmFmZDY3ZjkxMzFiMmRhMDM0ZmI5Y2Q3ZmM1MDI0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-05-12T13:50:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-05-12T17:52:16Z"
      },
      "message": "Make FindBlockByHeight constant-time.\n\nRemove the pnext pointer in CBlockIndex, and replace it with a\nvBlockIndexByHeight vector (no effect on memory usage). pnext can\nnow be replaced by vBlockIndexByHeight[nHeight+1], but\nFindBlockByHeight becomes constant-time.\n\nThis also means the entire mapBlockIndex structure and the block\nindex entries in it become purely blocktree-related data, and\nindependent from the currently active chain, potentially allowing\nthem to be protected by separate mutexes in the future.",
      "tree": {
        "sha": "d0b8dd4281e2c088559356642c48c903403f9909",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0b8dd4281e2c088559356642c48c903403f9909"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 36,
      "deletions": 51
    },
    "files": [
      {
        "sha": "f82b102e2aa105174f57554b4a387e32b95f7e2a",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
        "patch": "@@ -3,9 +3,9 @@ index 04a8618..519429a 100644\n --- a/src/main.cpp\n +++ b/src/main.cpp\n @@ -31,8 +31,8 @@ CTxMemPool mempool;\n- unsigned int nTransactionsUpdated = 0;\n  \n  map<uint256, CBlockIndex*> mapBlockIndex;\n+ std::vector<CBlockIndex*> vBlockIndexByHeight;\n -uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n -static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n +uint256 hashGenesisBlock(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\");"
      },
      {
        "sha": "5fa35f011b28de829c6025a6ebf650b760fa771b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 34,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
        "patch": "@@ -31,6 +31,7 @@ CTxMemPool mempool;\n unsigned int nTransactionsUpdated = 0;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n+std::vector<CBlockIndex*> vBlockIndexByHeight;\n uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n@@ -1036,19 +1037,9 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n static CBlockIndex* pblockindexFBBHLast;\n CBlockIndex* FindBlockByHeight(int nHeight)\n {\n-    CBlockIndex *pblockindex;\n-    if (nHeight < nBestHeight / 2)\n-        pblockindex = pindexGenesisBlock;\n-    else\n-        pblockindex = pindexBest;\n-    if (pblockindexFBBHLast && abs(nHeight - pblockindex->nHeight) > abs(nHeight - pblockindexFBBHLast->nHeight))\n-        pblockindex = pblockindexFBBHLast;\n-    while (pblockindex->nHeight > nHeight)\n-        pblockindex = pblockindex->pprev;\n-    while (pblockindex->nHeight < nHeight)\n-        pblockindex = pblockindex->pnext;\n-    pblockindexFBBHLast = pblockindex;\n-    return pblockindex;\n+    if (nHeight >= (int)vBlockIndexByHeight.size())\n+        return NULL;\n+    return vBlockIndexByHeight[nHeight];\n }\n \n bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n@@ -1231,7 +1222,7 @@ void static InvalidBlockFound(CBlockIndex *pindex) {\n     pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex));\n     setBlockIndexValid.erase(pindex);\n     InvalidChainFound(pindex);\n-    if (pindex->pnext) {\n+    if (pindex->GetNextInMainChain()) {\n         CValidationState stateDummy;\n         ConnectBestBlock(stateDummy); // reorganise away from the failed block\n     }\n@@ -1271,7 +1262,7 @@ bool ConnectBestBlock(CValidationState &state) {\n             if (pindexBest == NULL || pindexTest->nChainWork > pindexBest->nChainWork)\n                 vAttach.push_back(pindexTest);\n \n-            if (pindexTest->pprev == NULL || pindexTest->pnext != NULL) {\n+            if (pindexTest->pprev == NULL || pindexTest->GetNextInMainChain()) {\n                 reverse(vAttach.begin(), vAttach.end());\n                 BOOST_FOREACH(CBlockIndex *pindexSwitch, vAttach) {\n                     boost::this_thread::interruption_point();\n@@ -1849,15 +1840,10 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     // At this point, all changes have been done to the database.\n     // Proceed by updating the memory structures.\n \n-    // Disconnect shorter branch\n-    BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n-        if (pindex->pprev)\n-            pindex->pprev->pnext = NULL;\n-\n-    // Connect longer branch\n+    // Register new best chain\n+    vBlockIndexByHeight.resize(pindexNew->nHeight + 1);\n     BOOST_FOREACH(CBlockIndex* pindex, vConnect)\n-        if (pindex->pprev)\n-            pindex->pprev->pnext = pindex;\n+        vBlockIndexByHeight[pindex->nHeight] = pindex;\n \n     // Resurrect memory transactions that were in the disconnected branch\n     BOOST_FOREACH(CTransaction& tx, vResurrect) {\n@@ -2609,12 +2595,12 @@ bool static LoadBlockIndexDB()\n     nBestHeight = pindexBest->nHeight;\n     nBestChainWork = pindexBest->nChainWork;\n \n-    // set 'next' pointers in best chain\n+    // register best chain\n     CBlockIndex *pindex = pindexBest;\n-    while(pindex != NULL && pindex->pprev != NULL) {\n-         CBlockIndex *pindexPrev = pindex->pprev;\n-         pindexPrev->pnext = pindex;\n-         pindex = pindexPrev;\n+    vBlockIndexByHeight.resize(pindexBest->nHeight + 1);\n+    while(pindex != NULL) {\n+         vBlockIndexByHeight[pindex->nHeight] = pindex;\n+         pindex = pindex->pprev;\n     }\n     printf(\"LoadBlockIndexDB(): hashBestChain=%s  height=%d date=%s\\n\",\n         hashBestChain.ToString().c_str(), nBestHeight,\n@@ -2683,7 +2669,7 @@ bool VerifyDB() {\n         CBlockIndex *pindex = pindexState;\n         while (pindex != pindexBest) {\n             boost::this_thread::interruption_point();\n-            pindex = pindex->pnext;\n+            pindex = pindex->GetNextInMainChain();\n             CBlock block;\n             if (!block.ReadFromDisk(pindex))\n                 return error(\"VerifyDB() : *** block.ReadFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n@@ -2859,7 +2845,7 @@ void PrintBlockTree()\n         vector<CBlockIndex*>& vNext = mapNext[pindex];\n         for (unsigned int i = 0; i < vNext.size(); i++)\n         {\n-            if (vNext[i]->pnext)\n+            if (vNext[i]->GetNextInMainChain())\n             {\n                 swap(vNext[0], vNext[i]);\n                 break;\n@@ -3440,10 +3426,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Send the rest of the chain\n         if (pindex)\n-            pindex = pindex->pnext;\n+            pindex = pindex->GetNextInMainChain();\n         int nLimit = 500;\n         printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str(), nLimit);\n-        for (; pindex; pindex = pindex->pnext)\n+        for (; pindex; pindex = pindex->GetNextInMainChain())\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n@@ -3483,14 +3469,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             // Find the last block the caller has in the main chain\n             pindex = locator.GetBlockIndex();\n             if (pindex)\n-                pindex = pindex->pnext;\n+                pindex = pindex->GetNextInMainChain();\n         }\n \n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n         printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str());\n-        for (; pindex; pindex = pindex->pnext)\n+        for (; pindex; pindex = pindex->GetNextInMainChain())\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)"
      },
      {
        "sha": "020f2354854ee027d2cf2a6d05844819e1af8feb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
        "patch": "@@ -69,6 +69,7 @@ extern CScript COINBASE_FLAGS;\n \n extern CCriticalSection cs_main;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n+extern std::vector<CBlockIndex*> vBlockIndexByHeight;\n extern std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n extern uint256 hashGenesisBlock;\n extern CBlockIndex* pindexGenesisBlock;\n@@ -1589,10 +1590,8 @@ enum BlockStatus {\n \n /** The block chain is a tree shaped structure starting with the\n  * genesis block at the root, with each block potentially having multiple\n- * candidates to be the next block.  pprev and pnext link a path through the\n- * main/longest chain.  A blockindex may have multiple pprev pointing back\n- * to it, but pnext will only point forward to the longest branch, or will\n- * be null if the block is not part of the longest chain.\n+ * candidates to be the next block. A blockindex may have multiple pprev pointing\n+ * to it, but at most one of them can be part of the currently active branch.\n  */\n class CBlockIndex\n {\n@@ -1603,9 +1602,6 @@ class CBlockIndex\n     // pointer to the index of the predecessor of this block\n     CBlockIndex* pprev;\n \n-    // (memory only) pointer to the index of the *active* successor of this block\n-    CBlockIndex* pnext;\n-\n     // height of the entry in the chain. The genesis block has height 0\n     int nHeight;\n \n@@ -1643,7 +1639,6 @@ class CBlockIndex\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n-        pnext = NULL;\n         nHeight = 0;\n         nFile = 0;\n         nDataPos = 0;\n@@ -1664,7 +1659,6 @@ class CBlockIndex\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n-        pnext = NULL;\n         nHeight = 0;\n         nFile = 0;\n         nDataPos = 0;\n@@ -1733,7 +1727,11 @@ class CBlockIndex\n \n     bool IsInMainChain() const\n     {\n-        return (pnext || this == pindexBest);\n+        return nHeight < (int)vBlockIndexByHeight.size() && vBlockIndexByHeight[nHeight] == this;\n+    }\n+\n+    CBlockIndex *GetNextInMainChain() const {\n+        return nHeight+1 >= (int)vBlockIndexByHeight.size() ? NULL : vBlockIndexByHeight[nHeight+1];\n     }\n \n     bool CheckIndex() const\n@@ -1762,9 +1760,9 @@ class CBlockIndex\n         const CBlockIndex* pindex = this;\n         for (int i = 0; i < nMedianTimeSpan/2; i++)\n         {\n-            if (!pindex->pnext)\n+            if (!pindex->GetNextInMainChain())\n                 return GetBlockTime();\n-            pindex = pindex->pnext;\n+            pindex = pindex->GetNextInMainChain();\n         }\n         return pindex->GetMedianTimePast();\n     }\n@@ -1779,7 +1777,7 @@ class CBlockIndex\n     std::string ToString() const\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, pnext=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n-            pprev, pnext, nHeight,\n+            pprev, GetNextInMainChain(), nHeight,\n             hashMerkleRoot.ToString().c_str(),\n             GetBlockHash().ToString().c_str());\n     }"
      },
      {
        "sha": "b1b0c1ac168ca3a3a48b00dba7c023baa06269d6",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
        "patch": "@@ -65,8 +65,9 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n \n     if (blockindex->pprev)\n         result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n-    if (blockindex->pnext)\n-        result.push_back(Pair(\"nextblockhash\", blockindex->pnext->GetBlockHash().GetHex()));\n+    CBlockIndex *pnext = blockindex->GetNextInMainChain();\n+    if (pnext)\n+        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n     return result;\n }\n "
      },
      {
        "sha": "1cc2483232fb48be1f63f2dc034c41d9dd4f529c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe8010a10bafd67f9131b2da034fb9cd7fc5024/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0fe8010a10bafd67f9131b2da034fb9cd7fc5024",
        "patch": "@@ -780,7 +780,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))\n                     ret++;\n             }\n-            pindex = pindex->pnext;\n+            pindex = pindex->GetNextInMainChain();\n         }\n     }\n     return ret;"
      }
    ]
  }
]