[
  {
    "sha": "bc9c0a7b74eab853fc21402d62a30dacd77a8843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzljMGE3Yjc0ZWFiODUzZmMyMTQwMmQ2MmEzMGRhY2Q3N2E4ODQz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-24T11:45:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-24T11:45:17Z"
      },
      "message": "Improve wallet-accounts test\n\nAdd comments and\n\n- Verify sending to a account causes getaccountaddress to generate new addresses.\n- Verify sending to a account causes getreceivedbyaccount to return amount received.\n- Verify ways setaccount updates the accounts of existing addresses.",
      "tree": {
        "sha": "56587f93e055af2fc7004fb8d3067eed738b0872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56587f93e055af2fc7004fb8d3067eed738b0872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc9c0a7b74eab853fc21402d62a30dacd77a8843",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc9c0a7b74eab853fc21402d62a30dacd77a8843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc9c0a7b74eab853fc21402d62a30dacd77a8843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc9c0a7b74eab853fc21402d62a30dacd77a8843/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 105,
      "deletions": 32
    },
    "files": [
      {
        "sha": "bc1efaee15504420aa8559b081c55ed000816aa7",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 105,
        "deletions": 32,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc9c0a7b74eab853fc21402d62a30dacd77a8843/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc9c0a7b74eab853fc21402d62a30dacd77a8843/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=bc9c0a7b74eab853fc21402d62a30dacd77a8843",
        "patch": "@@ -72,62 +72,135 @@ def run_test(self):\n         # otherwise we're off by exactly the fee amount as that's mined\n         # and matures in the next 100 blocks\n         node.sendfrom(\"\", common_address, fee)\n-        accounts = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n         amount_to_send = 1.0\n-        account_addresses = dict()\n+\n+        # Create accounts and make sure subsequent account API calls\n+        # recognize the account/address associations.\n+        accounts = [Account(name) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n         for account in accounts:\n-            address = node.getaccountaddress(account)\n-            account_addresses[account] = address\n-            \n-            node.getnewaddress(account)\n-            assert_equal(node.getaccount(address), account)\n-            assert(address in node.getaddressesbyaccount(account))\n-            \n-            node.sendfrom(\"\", address, amount_to_send)\n-        \n+            account.add_receive_address(node.getaccountaddress(account.name))\n+            account.verify(node)\n+\n+        # Send a transaction to each account, and make sure this forces\n+        # getaccountaddress to generate a new receiving address.\n+        for account in accounts:\n+            node.sendtoaddress(account.receive_address, amount_to_send)\n+            account.add_receive_address(node.getaccountaddress(account.name))\n+            account.verify(node)\n+\n+        # Check the amounts received.\n         node.generate(1)\n+        for account in accounts:\n+            assert_equal(\n+                node.getreceivedbyaddress(account.addresses[0]), amount_to_send)\n+            assert_equal(node.getreceivedbyaccount(account.name), amount_to_send)\n         \n-        for i in range(len(accounts)):\n-            from_account = accounts[i]\n+        # Check that sendfrom account reduces listaccounts balances.\n+        for i, account in enumerate(accounts):\n             to_account = accounts[(i+1) % len(accounts)]\n-            to_address = account_addresses[to_account]\n-            node.sendfrom(from_account, to_address, amount_to_send)\n-        \n+            node.sendfrom(account.name, to_account.receive_address, amount_to_send)\n         node.generate(1)\n-        \n         for account in accounts:\n-            address = node.getaccountaddress(account)\n-            assert(address != account_addresses[account])\n-            assert_equal(node.getreceivedbyaccount(account), 2)\n-            node.move(account, \"\", node.getbalance(account))\n-\n+            account.add_receive_address(node.getaccountaddress(account.name))\n+            account.verify(node)\n+            assert_equal(node.getreceivedbyaccount(account.name), 2)\n+            node.move(account.name, \"\", node.getbalance(account.name))\n+            account.verify(node)\n         node.generate(101)\n-        \n         expected_account_balances = {\"\": 5200}\n         for account in accounts:\n-            expected_account_balances[account] = 0\n-        \n+            expected_account_balances[account.name] = 0\n         assert_equal(node.listaccounts(), expected_account_balances)\n-        \n         assert_equal(node.getbalance(\"\"), 5200)\n         \n+        # Check that setaccount can assign an account to a new unused address.\n         for account in accounts:\n             address = node.getaccountaddress(\"\")\n-            node.setaccount(address, account)\n-            assert(address in node.getaddressesbyaccount(account))\n+            node.setaccount(address, account.name)\n+            account.add_address(address)\n+            account.verify(node)\n             assert(address not in node.getaddressesbyaccount(\"\"))\n         \n+        # Check that addmultisigaddress can assign accounts.\n         for account in accounts:\n             addresses = []\n             for x in range(10):\n                 addresses.append(node.getnewaddress())\n-            multisig_address = node.addmultisigaddress(5, addresses, account)\n+            multisig_address = node.addmultisigaddress(5, addresses, account.name)\n+            account.add_address(multisig_address)\n+            account.verify(node)\n             node.sendfrom(\"\", multisig_address, 50)\n-        \n         node.generate(101)\n-        \n         for account in accounts:\n-            assert_equal(node.getbalance(account), 50)\n+            assert_equal(node.getbalance(account.name), 50)\n+\n+        # Check that setaccount can change the account of an address from a\n+        # different account.\n+        change_account(node, accounts[0].addresses[0], accounts[0], accounts[1])\n+\n+        # Check that setaccount can change the account of an address which\n+        # is the receiving address of a different account.\n+        change_account(node, accounts[0].receive_address, accounts[0], accounts[1])\n+\n+        # Check that setaccount can set the account of an address already\n+        # in the account. This is a no-op.\n+        change_account(node, accounts[2].addresses[0], accounts[2], accounts[2])\n+\n+        # Check that setaccount can set the account of an address which is\n+        # already the receiving address of the account. It would probably make\n+        # sense for this to be a no-op, but right now it resets the receiving\n+        # address, causing getaccountaddress to return a brand new address.\n+        change_account(node, accounts[2].receive_address, accounts[2], accounts[2])\n+\n+class Account:\n+    def __init__(self, name):\n+        # Account name\n+        self.name = name\n+        # Current receiving address associated with this account.\n+        self.receive_address = None\n+        # List of all addresses assigned with this account\n+        self.addresses = []\n+\n+    def add_address(self, address):\n+        assert_equal(address not in self.addresses, True)\n+        self.addresses.append(address)\n+\n+    def add_receive_address(self, address):\n+        self.add_address(address)\n+        self.receive_address = address\n+\n+    def verify(self, node):\n+        if self.receive_address is not None:\n+            assert self.receive_address in self.addresses\n+            assert_equal(node.getaccountaddress(self.name), self.receive_address)\n+\n+        for address in self.addresses:\n+            assert_equal(node.getaccount(address), self.name)\n+\n+        assert_equal(\n+            set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n+\n+\n+def change_account(node, address, old_account, new_account):\n+    assert_equal(address in old_account.addresses, True)\n+    node.setaccount(address, new_account.name)\n+\n+    old_account.addresses.remove(address)\n+    new_account.add_address(address)\n+\n+    # Calling setaccount on an address which was previously the receiving\n+    # address of a different account should reset the receiving address of\n+    # the old account, causing getaccountaddress to return a brand new\n+    # address.\n+    if address == old_account.receive_address:\n+        new_address = node.getaccountaddress(old_account.name)\n+        assert_equal(new_address not in old_account.addresses, True)\n+        assert_equal(new_address not in new_account.addresses, True)\n+        old_account.add_receive_address(new_address)\n+\n+    old_account.verify(node)\n+    new_account.verify(node)\n+\n \n if __name__ == '__main__':\n     WalletAccountsTest().main()"
      }
    ]
  }
]