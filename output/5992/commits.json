[
  {
    "sha": "0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjlkYzljOGY1OTQzYTgzODlmYWExZmQwZTUyZmE1YWM2YTRhNzU5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-12T15:56:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-12T15:56:32Z"
      },
      "message": "[move] move listunspent to wallet/rpcwallet.cpp",
      "tree": {
        "sha": "23e7f370cf726b533c28c5de7ed4c39a59bb7042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23e7f370cf726b533c28c5de7ed4c39a59bb7042"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8a13501196fc79a3f728683b74f9d586dda46c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8a13501196fc79a3f728683b74f9d586dda46c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8a13501196fc79a3f728683b74f9d586dda46c1"
      }
    ],
    "stats": {
      "total": 223,
      "additions": 112,
      "deletions": 111
    },
    "files": [
      {
        "sha": "c979217a1308de50c60bd9134cda28f9d8b48d50",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 111,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
        "patch": "@@ -193,117 +193,6 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-#ifdef ENABLE_WALLET\n-Value listunspent(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() > 3)\n-        throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n-            \"\\nReturns array of unspent transaction outputs\\n\"\n-            \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n-            \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n-            \"Results are an array of Objects, each of which has:\\n\"\n-            \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n-            \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n-            \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"   (string) bitcoin address\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"\\nResult\\n\"\n-            \"[                   (array of json object)\\n\"\n-            \"  {\\n\"\n-            \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n-            \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n-            \"  }\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"listunspent\", \"\")\n-            + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n-            + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n-        );\n-\n-    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n-\n-    int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n-\n-    int nMaxDepth = 9999999;\n-    if (params.size() > 1)\n-        nMaxDepth = params[1].get_int();\n-\n-    set<CBitcoinAddress> setAddress;\n-    if (params.size() > 2) {\n-        Array inputs = params[2].get_array();\n-        BOOST_FOREACH(Value& input, inputs) {\n-            CBitcoinAddress address(input.get_str());\n-            if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n-            if (setAddress.count(address))\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n-           setAddress.insert(address);\n-        }\n-    }\n-\n-    Array results;\n-    vector<COutput> vecOutputs;\n-    assert(pwalletMain != NULL);\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-    pwalletMain->AvailableCoins(vecOutputs, false);\n-    BOOST_FOREACH(const COutput& out, vecOutputs) {\n-        if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n-            continue;\n-\n-        if (setAddress.size()) {\n-            CTxDestination address;\n-            if (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n-                continue;\n-\n-            if (!setAddress.count(address))\n-                continue;\n-        }\n-\n-        CAmount nValue = out.tx->vout[out.i].nValue;\n-        const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n-        Object entry;\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n-        CTxDestination address;\n-        if (ExtractDestination(out.tx->vout[out.i].scriptPubKey, address)) {\n-            entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n-            if (pwalletMain->mapAddressBook.count(address))\n-                entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n-        }\n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(pk.begin(), pk.end())));\n-        if (pk.IsPayToScriptHash()) {\n-            CTxDestination address;\n-            if (ExtractDestination(pk, address)) {\n-                const CScriptID& hash = boost::get<const CScriptID&>(address);\n-                CScript redeemScript;\n-                if (pwalletMain->GetCScript(hash, redeemScript))\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n-            }\n-        }\n-        entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n-        entry.push_back(Pair(\"confirmations\",out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        results.push_back(entry);\n-    }\n-\n-    return results;\n-}\n-#endif\n-\n Value createrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)"
      },
      {
        "sha": "f94a2ce8ea6241cfe836be4d1f116eda72fc987a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
        "patch": "@@ -2118,3 +2118,115 @@ Value resendwallettransactions(const Array& params, bool fHelp)\n     }\n     return result;\n }\n+\n+Value listunspent(const Array& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n+    if (fHelp || params.size() > 3)\n+    throw runtime_error(\n+                        \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n+                        \"\\nReturns array of unspent transaction outputs\\n\"\n+                        \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n+                        \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n+                        \"Results are an array of Objects, each of which has:\\n\"\n+                        \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n+                        \"\\nArguments:\\n\"\n+                        \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n+                        \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n+                        \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n+                        \"    [\\n\"\n+                        \"      \\\"address\\\"   (string) bitcoin address\\n\"\n+                        \"      ,...\\n\"\n+                        \"    ]\\n\"\n+                        \"\\nResult\\n\"\n+                        \"[                   (array of json object)\\n\"\n+                        \"  {\\n\"\n+                        \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n+                        \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n+                        \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n+                        \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n+                        \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n+                        \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+                        \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n+                        \"  }\\n\"\n+                        \"  ,...\\n\"\n+                        \"]\\n\"\n+                        \n+                        \"\\nExamples\\n\"\n+                        + HelpExampleCli(\"listunspent\", \"\")\n+                        + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+                        + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+                        );\n+    \n+    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n+    \n+    int nMinDepth = 1;\n+    if (params.size() > 0)\n+    nMinDepth = params[0].get_int();\n+    \n+    int nMaxDepth = 9999999;\n+    if (params.size() > 1)\n+    nMaxDepth = params[1].get_int();\n+    \n+    set<CBitcoinAddress> setAddress;\n+    if (params.size() > 2) {\n+        Array inputs = params[2].get_array();\n+        BOOST_FOREACH(Value& input, inputs) {\n+            CBitcoinAddress address(input.get_str());\n+            if (!address.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n+            if (setAddress.count(address))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n+            setAddress.insert(address);\n+        }\n+    }\n+    \n+    Array results;\n+    vector<COutput> vecOutputs;\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    pwalletMain->AvailableCoins(vecOutputs, false);\n+    BOOST_FOREACH(const COutput& out, vecOutputs) {\n+        if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n+        continue;\n+        \n+        if (setAddress.size()) {\n+            CTxDestination address;\n+            if (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+            continue;\n+            \n+            if (!setAddress.count(address))\n+            continue;\n+        }\n+        \n+        CAmount nValue = out.tx->vout[out.i].nValue;\n+        const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n+        Object entry;\n+        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n+        entry.push_back(Pair(\"vout\", out.i));\n+        CTxDestination address;\n+        if (ExtractDestination(out.tx->vout[out.i].scriptPubKey, address)) {\n+            entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n+            if (pwalletMain->mapAddressBook.count(address))\n+            entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n+        }\n+        entry.push_back(Pair(\"scriptPubKey\", HexStr(pk.begin(), pk.end())));\n+        if (pk.IsPayToScriptHash()) {\n+            CTxDestination address;\n+            if (ExtractDestination(pk, address)) {\n+                const CScriptID& hash = boost::get<const CScriptID&>(address);\n+                CScript redeemScript;\n+                if (pwalletMain->GetCScript(hash, redeemScript))\n+                entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+            }\n+        }\n+        entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n+        entry.push_back(Pair(\"confirmations\",out.nDepth));\n+        entry.push_back(Pair(\"spendable\", out.fSpendable));\n+        results.push_back(entry);\n+    }\n+    \n+    return results;\n+}\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "b9fb692d04e90967b14c6988553c9121c5eea64e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWZiNjkyZDA0ZTkwOTY3YjE0YzY5ODg1NTNjOTEyMWM1ZWVhNjRl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-12T15:56:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-12T17:37:29Z"
      },
      "message": "Push down RPC reqWallet flag",
      "tree": {
        "sha": "0e7c4d478456af92478cc7df3ab07b0802f64ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e7c4d478456af92478cc7df3ab07b0802f64ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9fb692d04e90967b14c6988553c9121c5eea64e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb692d04e90967b14c6988553c9121c5eea64e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb692d04e90967b14c6988553c9121c5eea64e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb692d04e90967b14c6988553c9121c5eea64e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9dc9c8f5943a8389faa1fd0e52fa5ac6a4a759"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 216,
      "deletions": 97
    },
    "files": [
      {
        "sha": "eb3a3fe58b19a1c06119ce12ac8f8543ae40ab10",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb692d04e90967b14c6988553c9121c5eea64e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb692d04e90967b14c6988553c9121c5eea64e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b9fb692d04e90967b14c6988553c9121c5eea64e",
        "patch": "@@ -242,11 +242,6 @@ void OnRPCStopped()\n \n void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n-#ifdef ENABLE_WALLET\n-    if (cmd.reqWallet && !pwalletMain)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n-#endif\n-\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&"
      },
      {
        "sha": "e2df41fe2112ee6130b61b801ae98351fa6ca560",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 91,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb692d04e90967b14c6988553c9121c5eea64e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb692d04e90967b14c6988553c9121c5eea64e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b9fb692d04e90967b14c6988553c9121c5eea64e",
        "patch": "@@ -193,11 +193,6 @@ string CRPCTable::help(string strCommand) const\n             continue;\n         if ((strCommand != \"\" || pcmd->category == \"hidden\") && strMethod != strCommand)\n             continue;\n-#ifdef ENABLE_WALLET\n-        if (pcmd->reqWallet && !pwalletMain)\n-            continue;\n-#endif\n-\n         try\n         {\n             Array params;\n@@ -271,114 +266,114 @@ Value stop(const Array& params, bool fHelp)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode reqWallet\n-  //  --------------------- ------------------------  -----------------------  ---------- ---------\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true,      false }, /* uses wallet if enabled */\n-    { \"control\",            \"help\",                   &help,                   true,      false },\n-    { \"control\",            \"stop\",                   &stop,                   true,      false },\n+    { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n+    { \"control\",            \"help\",                   &help,                   true  },\n+    { \"control\",            \"stop\",                   &stop,                   true  },\n \n     /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,      false },\n-    { \"network\",            \"addnode\",                &addnode,                true,      false },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,      false },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,      false },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true,      false },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false },\n-    { \"network\",            \"ping\",                   &ping,                   true,      false },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n+    { \"network\",            \"addnode\",                &addnode,                true  },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n+    { \"network\",            \"ping\",                   &ping,                   true  },\n \n     /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,      false },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,      false },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,      false },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,      false },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,      false },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,      false },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,      false },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false },\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true  },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true  },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n \n     /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,      false },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,      false },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,      false },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true,      false },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true  },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true  },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true  },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n #ifdef ENABLE_WALLET\n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n-    { \"generating\",         \"generate\",               &generate,               true,      false },\n+    { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n+    { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n+    { \"generating\",         \"generate\",               &generate,               true  },\n #endif\n \n     /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,      false },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true  },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true  },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n \n     /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,      false },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true,      false },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,      false },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,      false },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,      false },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,      false },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n #ifdef ENABLE_WALLET\n-    { \"hidden\", \"resendwallettransactions\", &resendwallettransactions, true, true },\n+    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true},\n #endif\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n-    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true,      true },\n-    { \"wallet\",             \"backupwallet\",           &backupwallet,           true,      true },\n-    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true,      true },\n-    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true,      true },\n-    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true,      true },\n-    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true,      true },\n-    { \"wallet\",             \"getaccount\",             &getaccount,             true,      true },\n-    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true,      true },\n-    { \"wallet\",             \"getbalance\",             &getbalance,             false,     true },\n-    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true,      true },\n-    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true,      true },\n-    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false,     true },\n-    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false,     true },\n-    { \"wallet\",             \"gettransaction\",         &gettransaction,         false,     true },\n-    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false,     true },\n-    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false,     true },\n-    { \"wallet\",             \"importprivkey\",          &importprivkey,          true,      true },\n-    { \"wallet\",             \"importwallet\",           &importwallet,           true,      true },\n-    { \"wallet\",             \"importaddress\",          &importaddress,          true,      true },\n-    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true,      true },\n-    { \"wallet\",             \"listaccounts\",           &listaccounts,           false,     true },\n-    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false,     true },\n-    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false,     true },\n-    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,     true },\n-    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,     true },\n-    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false,     true },\n-    { \"wallet\",             \"listtransactions\",       &listtransactions,       false,     true },\n-    { \"wallet\",             \"listunspent\",            &listunspent,            false,     true },\n-    { \"wallet\",             \"lockunspent\",            &lockunspent,            true,      true },\n-    { \"wallet\",             \"move\",                   &movecmd,                false,     true },\n-    { \"wallet\",             \"sendfrom\",               &sendfrom,               false,     true },\n-    { \"wallet\",             \"sendmany\",               &sendmany,               false,     true },\n-    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false,     true },\n-    { \"wallet\",             \"setaccount\",             &setaccount,             true,      true },\n-    { \"wallet\",             \"settxfee\",               &settxfee,               true,      true },\n-    { \"wallet\",             \"signmessage\",            &signmessage,            true,      true },\n-    { \"wallet\",             \"walletlock\",             &walletlock,             true,      true },\n-    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true,      true },\n-    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true,      true },\n+    { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true  },\n+    { \"wallet\",             \"backupwallet\",           &backupwallet,           true  },\n+    { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true  },\n+    { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true  },\n+    { \"wallet\",             \"encryptwallet\",          &encryptwallet,          true  },\n+    { \"wallet\",             \"getaccountaddress\",      &getaccountaddress,      true  },\n+    { \"wallet\",             \"getaccount\",             &getaccount,             true  },\n+    { \"wallet\",             \"getaddressesbyaccount\",  &getaddressesbyaccount,  true  },\n+    { \"wallet\",             \"getbalance\",             &getbalance,             false },\n+    { \"wallet\",             \"getnewaddress\",          &getnewaddress,          true  },\n+    { \"wallet\",             \"getrawchangeaddress\",    &getrawchangeaddress,    true  },\n+    { \"wallet\",             \"getreceivedbyaccount\",   &getreceivedbyaccount,   false },\n+    { \"wallet\",             \"getreceivedbyaddress\",   &getreceivedbyaddress,   false },\n+    { \"wallet\",             \"gettransaction\",         &gettransaction,         false },\n+    { \"wallet\",             \"getunconfirmedbalance\",  &getunconfirmedbalance,  false },\n+    { \"wallet\",             \"getwalletinfo\",          &getwalletinfo,          false },\n+    { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n+    { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n+    { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n+    { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n+    { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n+    { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },\n+    { \"wallet\",             \"listlockunspent\",        &listlockunspent,        false },\n+    { \"wallet\",             \"listreceivedbyaccount\",  &listreceivedbyaccount,  false },\n+    { \"wallet\",             \"listreceivedbyaddress\",  &listreceivedbyaddress,  false },\n+    { \"wallet\",             \"listsinceblock\",         &listsinceblock,         false },\n+    { \"wallet\",             \"listtransactions\",       &listtransactions,       false },\n+    { \"wallet\",             \"listunspent\",            &listunspent,            false },\n+    { \"wallet\",             \"lockunspent\",            &lockunspent,            true  },\n+    { \"wallet\",             \"move\",                   &movecmd,                false },\n+    { \"wallet\",             \"sendfrom\",               &sendfrom,               false },\n+    { \"wallet\",             \"sendmany\",               &sendmany,               false },\n+    { \"wallet\",             \"sendtoaddress\",          &sendtoaddress,          false },\n+    { \"wallet\",             \"setaccount\",             &setaccount,             true  },\n+    { \"wallet\",             \"settxfee\",               &settxfee,               true  },\n+    { \"wallet\",             \"signmessage\",            &signmessage,            true  },\n+    { \"wallet\",             \"walletlock\",             &walletlock,             true  },\n+    { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true  },\n+    { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true  },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "c3200d8c35d4d83cf9f1252f979ddd55de0a451f",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb692d04e90967b14c6988553c9121c5eea64e/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb692d04e90967b14c6988553c9121c5eea64e/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=b9fb692d04e90967b14c6988553c9121c5eea64e",
        "patch": "@@ -98,7 +98,6 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n-    bool reqWallet;\n };\n \n /**"
      },
      {
        "sha": "ab951d1d7d134d8b760f5b0a8ffdb95a5cf76263",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb692d04e90967b14c6988553c9121c5eea64e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb692d04e90967b14c6988553c9121c5eea64e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b9fb692d04e90967b14c6988553c9121c5eea64e",
        "patch": "@@ -25,6 +25,7 @@ using namespace json_spirit;\n using namespace std;\n \n void EnsureWalletIsUnlocked();\n+bool EnsureWalletIsAvailable(bool avoidException);\n \n std::string static EncodeDumpTime(int64_t nTime) {\n     return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n@@ -71,6 +72,9 @@ std::string DecodeDumpString(const std::string &str) {\n \n Value importprivkey(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n@@ -142,6 +146,9 @@ Value importprivkey(const Array& params, bool fHelp)\n \n Value importaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan )\\n\"\n@@ -212,6 +219,9 @@ Value importaddress(const Array& params, bool fHelp)\n \n Value importwallet(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n@@ -313,6 +323,9 @@ Value importwallet(const Array& params, bool fHelp)\n \n Value dumpprivkey(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n@@ -348,6 +361,9 @@ Value dumpprivkey(const Array& params, bool fHelp)\n \n Value dumpwallet(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\""
      },
      {
        "sha": "2c3507fb3b76444a249f7608d972b92daa1b2778",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb692d04e90967b14c6988553c9121c5eea64e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb692d04e90967b14c6988553c9121c5eea64e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b9fb692d04e90967b14c6988553c9121c5eea64e",
        "patch": "@@ -37,6 +37,18 @@ std::string HelpRequiringPassphrase()\n         : \"\";\n }\n \n+bool EnsureWalletIsAvailable(bool avoidException)\n+{\n+    if (!pwalletMain)\n+    {\n+        if (!avoidException)\n+            throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+        else\n+            return false;\n+    }\n+    return true;\n+}\n+\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n@@ -77,6 +89,9 @@ string AccountFromValue(const Value& value)\n \n Value getnewaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n@@ -153,6 +168,9 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n \n Value getaccountaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n@@ -182,6 +200,9 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n Value getrawchangeaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"getrawchangeaddress\\n\"\n@@ -214,6 +235,9 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n \n Value setaccount(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n@@ -257,6 +281,9 @@ Value setaccount(const Array& params, bool fHelp)\n \n Value getaccount(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n@@ -286,6 +313,9 @@ Value getaccount(const Array& params, bool fHelp)\n \n Value getaddressesbyaccount(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n@@ -351,6 +381,9 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n \n Value sendtoaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n@@ -404,6 +437,9 @@ Value sendtoaddress(const Array& params, bool fHelp)\n \n Value listaddressgroupings(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp)\n         throw runtime_error(\n             \"listaddressgroupings\\n\"\n@@ -453,6 +489,9 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n \n Value signmessage(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n@@ -506,6 +545,9 @@ Value signmessage(const Array& params, bool fHelp)\n \n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n@@ -561,6 +603,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n@@ -647,6 +692,9 @@ CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminef\n \n Value getbalance(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n@@ -719,6 +767,9 @@ Value getbalance(const Array& params, bool fHelp)\n \n Value getunconfirmedbalance(const Array &params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n@@ -732,6 +783,9 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n \n Value movecmd(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n@@ -799,6 +853,9 @@ Value movecmd(const Array& params, bool fHelp)\n \n Value sendfrom(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n@@ -859,6 +916,9 @@ Value sendfrom(const Array& params, bool fHelp)\n \n Value sendmany(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n@@ -965,6 +1025,9 @@ extern CScript _createmultisig_redeemScript(const Array& params);\n \n Value addmultisigaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n@@ -1143,6 +1206,9 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n Value listreceivedbyaddress(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n@@ -1177,6 +1243,9 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n \n Value listreceivedbyaccount(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n@@ -1304,6 +1373,9 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n \n Value listtransactions(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 4)\n         throw runtime_error(\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n@@ -1415,6 +1487,9 @@ Value listtransactions(const Array& params, bool fHelp)\n \n Value listaccounts(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n@@ -1492,6 +1567,9 @@ Value listaccounts(const Array& params, bool fHelp)\n \n Value listsinceblock(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n@@ -1580,6 +1658,9 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n Value gettransaction(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n@@ -1655,6 +1736,9 @@ Value gettransaction(const Array& params, bool fHelp)\n \n Value backupwallet(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"backupwallet \\\"destination\\\"\\n\"\n@@ -1678,6 +1762,9 @@ Value backupwallet(const Array& params, bool fHelp)\n \n Value keypoolrefill(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n@@ -1719,6 +1806,9 @@ static void LockWallet(CWallet* pWallet)\n \n Value walletpassphrase(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n@@ -1776,6 +1866,9 @@ Value walletpassphrase(const Array& params, bool fHelp)\n \n Value walletpassphrasechange(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n@@ -1819,6 +1912,9 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n \n Value walletlock(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n@@ -1855,6 +1951,9 @@ Value walletlock(const Array& params, bool fHelp)\n \n Value encryptwallet(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n@@ -1909,6 +2008,9 @@ Value encryptwallet(const Array& params, bool fHelp)\n \n Value lockunspent(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"lockunspent unlock [{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...]\\n\"\n@@ -1990,6 +2092,9 @@ Value lockunspent(const Array& params, bool fHelp)\n \n Value listlockunspent(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n@@ -2036,6 +2141,9 @@ Value listlockunspent(const Array& params, bool fHelp)\n \n Value settxfee(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n@@ -2062,6 +2170,9 @@ Value settxfee(const Array& params, bool fHelp)\n \n Value getwalletinfo(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getwalletinfo\\n\"\n@@ -2099,6 +2210,9 @@ Value getwalletinfo(const Array& params, bool fHelp)\n \n Value resendwallettransactions(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"resendwallettransactions\\n\""
      }
    ]
  },
  {
    "sha": "ea9e82df739dfc1e84b42cc42c6a65c243cca03d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTllODJkZjczOWRmYzFlODRiNDJjYzQyYzZhNjVjMjQzY2NhMDNk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-13T13:04:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-13T13:04:08Z"
      },
      "message": "[squashme] fix listunspent code indentation",
      "tree": {
        "sha": "ca41c0021582a66343b0c3a4c381378f521c2f14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca41c0021582a66343b0c3a4c381378f521c2f14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea9e82df739dfc1e84b42cc42c6a65c243cca03d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9e82df739dfc1e84b42cc42c6a65c243cca03d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea9e82df739dfc1e84b42cc42c6a65c243cca03d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9e82df739dfc1e84b42cc42c6a65c243cca03d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9fb692d04e90967b14c6988553c9121c5eea64e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb692d04e90967b14c6988553c9121c5eea64e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb692d04e90967b14c6988553c9121c5eea64e"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 53,
      "deletions": 53
    },
    "files": [
      {
        "sha": "e03cd5b84ea235a0267d4146d66f0c2f62982f36",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9e82df739dfc1e84b42cc42c6a65c243cca03d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9e82df739dfc1e84b42cc42c6a65c243cca03d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ea9e82df739dfc1e84b42cc42c6a65c243cca03d",
        "patch": "@@ -2239,82 +2239,82 @@ Value listunspent(const Array& params, bool fHelp)\n         return Value::null;\n     \n     if (fHelp || params.size() > 3)\n-    throw runtime_error(\n-                        \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n-                        \"\\nReturns array of unspent transaction outputs\\n\"\n-                        \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n-                        \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n-                        \"Results are an array of Objects, each of which has:\\n\"\n-                        \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n-                        \"\\nArguments:\\n\"\n-                        \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n-                        \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n-                        \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n-                        \"    [\\n\"\n-                        \"      \\\"address\\\"   (string) bitcoin address\\n\"\n-                        \"      ,...\\n\"\n-                        \"    ]\\n\"\n-                        \"\\nResult\\n\"\n-                        \"[                   (array of json object)\\n\"\n-                        \"  {\\n\"\n-                        \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n-                        \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-                        \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n-                        \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n-                        \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-                        \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n-                        \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n-                        \"  }\\n\"\n-                        \"  ,...\\n\"\n-                        \"]\\n\"\n-                        \n-                        \"\\nExamples\\n\"\n-                        + HelpExampleCli(\"listunspent\", \"\")\n-                        + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n-                        + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n-                        );\n-    \n+        throw runtime_error(\n+            \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n+            \"\\nReturns array of unspent transaction outputs\\n\"\n+            \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n+            \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n+            \"Results are an array of Objects, each of which has:\\n\"\n+            \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n+            \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n+            \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n+            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n+            \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\")\n+            + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n     RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n-    \n+\n     int nMinDepth = 1;\n     if (params.size() > 0)\n-    nMinDepth = params[0].get_int();\n-    \n+        nMinDepth = params[0].get_int();\n+\n     int nMaxDepth = 9999999;\n     if (params.size() > 1)\n-    nMaxDepth = params[1].get_int();\n-    \n+        nMaxDepth = params[1].get_int();\n+\n     set<CBitcoinAddress> setAddress;\n     if (params.size() > 2) {\n         Array inputs = params[2].get_array();\n         BOOST_FOREACH(Value& input, inputs) {\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n             if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n-            setAddress.insert(address);\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n+           setAddress.insert(address);\n         }\n     }\n-    \n+\n     Array results;\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n-        continue;\n-        \n+            continue;\n+\n         if (setAddress.size()) {\n             CTxDestination address;\n             if (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n-            continue;\n-            \n+                continue;\n+\n             if (!setAddress.count(address))\n-            continue;\n+                continue;\n         }\n-        \n+\n         CAmount nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n@@ -2324,7 +2324,7 @@ Value listunspent(const Array& params, bool fHelp)\n         if (ExtractDestination(out.tx->vout[out.i].scriptPubKey, address)) {\n             entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n             if (pwalletMain->mapAddressBook.count(address))\n-            entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n+                entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n         }\n         entry.push_back(Pair(\"scriptPubKey\", HexStr(pk.begin(), pk.end())));\n         if (pk.IsPayToScriptHash()) {\n@@ -2333,14 +2333,14 @@ Value listunspent(const Array& params, bool fHelp)\n                 const CScriptID& hash = boost::get<const CScriptID&>(address);\n                 CScript redeemScript;\n                 if (pwalletMain->GetCScript(hash, redeemScript))\n-                entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n             }\n         }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n         entry.push_back(Pair(\"spendable\", out.fSpendable));\n         results.push_back(entry);\n     }\n-    \n+\n     return results;\n }\n\\ No newline at end of file"
      }
    ]
  }
]