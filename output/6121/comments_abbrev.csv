jonasschnelli,2015-05-11T08:21:15Z,I did use merge instead of rebase to clearly see my adaptations from #4738.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-100812398,100812398,
jgarzik,2015-05-11T15:15:30Z,ut ACK - reviewed the whole thing\n\nWill do some testing later this week.\n\nThanks for moving this forward!\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-100940115,100940115,
laanwj,2015-05-12T12:48:22Z,Thanks for doing this work.\n\nOne remark: I see `AmountFromValue` and `ValueFromAmount` still make the value pass through a `double.` My prime gripe with JSON spirit is that monetary values still had to be converted from and to floating point which can cause deviations (see See #3759 and https://bitcoin.stackexchange.com/questions/22716/bitcoind-sendfrom-round-amount-error ). \n\nIdeally a new JS,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-101264677,101264677,
jgarzik,2015-05-12T14:09:46Z,"Agree w/ your gripe @laanwj.  However, I think of that as a separate logical step:\n1. Convert tree with as much equivalence as possible, to prove everything works as it always did.\n2. Improve the tree beyond json-spirit equivalence.\n\nSeparated thusly it is easier to test the conversion before moving on to more ambitious cleanups.\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-101296016,101296016,
jonasschnelli,2015-05-18T12:08:39Z,"This is now complete.\n\nJust added another commit (https://github.com/bitcoin/bitcoin/commit/2a3126c336fc0cc2b19f9b89bd48ed3e489a0817) which does completely remove JSON Spirit (also the UniValue wrapper) from the sources and the compile process.\n\nPasses all tests.\n\nIf the diff size makes this PR to risky, there would also be the chance to pull this in without https://github.com/bitcoin/bitcoi",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-103039560,103039560,
jonasschnelli,2015-05-18T16:21:52Z,Gitian was also happy with this: http://builds.jonasschnelli.ch/pulls/6121/\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-103117934,103117934,
jgarzik,2015-05-18T16:51:29Z,"Yes, I agree JSON-spirit should be removed in this PR.\n\nReviewing & testing right now...\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-103127170,103127170,
jonasschnelli,2015-06-01T13:36:29Z,Rebased (puhh).\nThanks in advance for reviewing this (maybe @jgarzik and @theuni) and finally bring this forward.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107474377,107474377,
laanwj,2015-06-02T07:34:28Z,"(apparantly) spurious travis failure with the comparison tool, retriggering\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107840225,107840225,
laanwj,2015-06-02T08:10:14Z,Looks good to me. Tested and reviewed ACK.\nWould like to merge this asap now that 0.11 is branched.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107853302,107853302,
laanwj,2015-06-02T08:43:23Z,"This breaks `linearize-hashes.py`. Likely, this is caused by JSON-RPC batching no longer working:\n\n```\n./linearize-hashes.py  linearize.cfg \nTraceback (most recent call last):\n  File ""./linearize-hashes.py"", line 112, in <module>\n    get_block_hashes(settings)\n  File ""./linearize-hashes.py"", line 68, in get_block_hashes\n    for x,resp_obj in enumerate(reply):\nTypeError: 'NoneType' object ",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107866347,107866347,
jonasschnelli,2015-06-02T09:20:49Z,Thanks for testing. Nice catch!\nWill have a close look at the batching feature within the next hours.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107882202,107882202,
jonasschnelli,2015-06-02T09:41:28Z,RPC batching issue is fixed.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107896455,107896455,
laanwj,2015-06-02T10:18:15Z,"Can confirm that it is fixed.\nDamnit, another random travis fail.\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107908278,107908278,
jonasschnelli,2015-06-02T10:30:00Z,added another commit that fixes a univalue type issue within `getrawmempool` and `getmempoolinfo`\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107911201,107911201,
jtimon,2015-06-02T11:00:56Z,Concept ACK. \nIs this getting into 0.11?\nThis kind of change tends to be painful to maintain...\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107916105,107916105,
jonasschnelli,2015-06-02T11:36:15Z,@jtimon It's not for 0.11. It's meant for current master which aims for 0.12.\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-107923879,107923879,
laanwj,2015-06-04T06:48:44Z,"Needs rebase after #6226, will merge after that\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-108752068,108752068,
sdaftuar,2015-06-04T19:01:19Z,"I'm getting an error now when running `qa/rpc-tests/getblocktemplate_proposals.py`:\n`JSONRPC error: Missing data String key for proposal`\n\nLooks like it's here:\n\n```\nFile ""./getblocktemplate_proposals.py"", line 86, in assert_template\n    rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n```\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-109010584,109010584,
jonasschnelli,2015-06-04T19:45:24Z,Meh. This bug crept in during multiple transitions from json spirit objects to UniValue.\nFixed with #6234.\n\nThanks @sdaftuar for reporting!\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-109027520,109027520,
jgarzik,2015-06-04T20:10:33Z,"Odd that I missed that in my testing.  Anyway, re-ACK!  Tested.\n",https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-109034317,109034317,
theuni,2015-06-05T00:08:32Z,@jonasschnelli Sorry for not getting to a final review in time. I'll still look over it again in master for good measure. Great work!\n,https://github.com/bitcoin/bitcoin/pull/6121#issuecomment-109100296,109100296,
jonasschnelli,2015-05-11T08:20:05Z,UniValue required explicit type definition during constructing.\n`Value` should be replaced with `UniValue` soon.\n,https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020005,30020005,src/bitcoin-cli.cpp
jonasschnelli,2015-05-11T08:25:45Z,I had to extend this to gain compatibility between JSON Spirit and UniValue. UniValue is more strict in case of JSON encoding.\n,https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020329,30020329,src/rpcclient.cpp
jonasschnelli,2015-05-11T08:28:05Z,"Had to change this to `setNumStr` because `read()` only parses valid JSON (things like ""0.00000001"" are not valid JSON).\n\nEDIT: spelling\n",https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020457,30020457,src/test/rpc_tests.cpp
jonasschnelli,2015-05-11T08:30:15Z,"Because now there is a distinction between int and real (to make it JSON Spirit compatible), things like -7.21 are now `VREAL` and no longer `VNUM`. I decided to make `VREAL` a standalone type instead of a `VNUM` subtype.\n\nEdit: spelling\n",https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020562,30020562,src/test/univalue_tests.cpp
jonasschnelli,2015-05-11T08:31:21Z,"To keep the JSON/RPC API backward compatible, all reals represented in JSON have a fixed precision to 8 digits after point.\n",https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020631,30020631,src/test/univalue_tests.cpp
jonasschnelli,2015-05-11T08:33:12Z,This PR also adds a clean boolean handling to UniValue (necessary for JSONRPC compatibility).\n,https://github.com/bitcoin/bitcoin/pull/6121#discussion_r30020706,30020706,src/univalue/univalue.h
