[
  {
    "sha": "efc78837728bebcf2030d1d495018e563eb10c71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmM3ODgzNzcyOGJlYmNmMjAzMGQxZDQ5NTAxOGU1NjNlYjEwYzcx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T13:59:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:05Z"
      },
      "message": "UniValue: prefer .size() to .count(), to harmonize w/ existing tree",
      "tree": {
        "sha": "767ac9e67aa0616498af77dfa64d5be3bf713a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/767ac9e67aa0616498af77dfa64d5be3bf713a9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc78837728bebcf2030d1d495018e563eb10c71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc78837728bebcf2030d1d495018e563eb10c71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efc78837728bebcf2030d1d495018e563eb10c71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc78837728bebcf2030d1d495018e563eb10c71/comments",
    "author": null,
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd855023158e1c5ca2c5f0e8be552ecfb455834",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd855023158e1c5ca2c5f0e8be552ecfb455834",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd855023158e1c5ca2c5f0e8be552ecfb455834"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "45990f6bd8aa2d47482d98fa46a4afd423d166cc",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc78837728bebcf2030d1d495018e563eb10c71/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc78837728bebcf2030d1d495018e563eb10c71/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=efc78837728bebcf2030d1d495018e563eb10c71",
        "patch": "@@ -346,7 +346,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     UniValue keysObj = registers[\"privatekeys\"];\n     fGivenKeys = true;\n \n-    for (unsigned int kidx = 0; kidx < keysObj.count(); kidx++) {\n+    for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n         if (!keysObj[kidx].isStr())\n             throw runtime_error(\"privatekey not a string\");\n         CBitcoinSecret vchSecret;\n@@ -363,7 +363,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         throw runtime_error(\"prevtxs register variable must be set.\");\n     UniValue prevtxsObj = registers[\"prevtxs\"];\n     {\n-        for (unsigned int previdx = 0; previdx < prevtxsObj.count(); previdx++) {\n+        for (unsigned int previdx = 0; previdx < prevtxsObj.size(); previdx++) {\n             UniValue prevOut = prevtxsObj[previdx];\n             if (!prevOut.isObject())\n                 throw runtime_error(\"expected prevtxs internal object\");"
      },
      {
        "sha": "6df980ad0c6d1f6b8a1127bc9b7ae74acbd872e8",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc78837728bebcf2030d1d495018e563eb10c71/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc78837728bebcf2030d1d495018e563eb10c71/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=efc78837728bebcf2030d1d495018e563eb10c71",
        "patch": "@@ -72,13 +72,13 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n \n     BOOST_CHECK(v.setObject());\n     BOOST_CHECK(v.isObject());\n-    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n     BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n     BOOST_CHECK(v.empty());\n \n     BOOST_CHECK(v.setArray());\n     BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n \n     BOOST_CHECK(v.setStr(\"zum\"));\n     BOOST_CHECK(v.isStr());\n@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n     BOOST_CHECK(arr.push_backV(vec));\n \n     BOOST_CHECK_EQUAL(arr.empty(), false);\n-    BOOST_CHECK_EQUAL(arr.count(), 5);\n+    BOOST_CHECK_EQUAL(arr.size(), 5);\n \n     BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n     BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n@@ -157,7 +157,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n \n     arr.clear();\n     BOOST_CHECK(arr.empty());\n-    BOOST_CHECK_EQUAL(arr.count(), 0);\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n }\n \n BOOST_AUTO_TEST_CASE(univalue_object)\n@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.count(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -240,7 +240,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n \n     obj.clear();\n     BOOST_CHECK(obj.empty());\n-    BOOST_CHECK_EQUAL(obj.count(), 0);\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n }\n \n static const char *json1 =\n@@ -255,13 +255,13 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     BOOST_CHECK(v.read(strJson1));\n \n     BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.count(), 2);\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n \n     BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.1\");\n \n     UniValue obj = v[1];\n     BOOST_CHECK(obj.isObject());\n-    BOOST_CHECK_EQUAL(obj.count(), 3);\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n \n     BOOST_CHECK(obj[\"key1\"].isStr());\n     BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), \"str\");"
      },
      {
        "sha": "d31c596a616e2652c44e384bf5323a00e4a1490c",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc78837728bebcf2030d1d495018e563eb10c71/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc78837728bebcf2030d1d495018e563eb10c71/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=efc78837728bebcf2030d1d495018e563eb10c71",
        "patch": "@@ -58,7 +58,7 @@ class UniValue {\n     std::string getValStr() const { return val; }\n     bool empty() const { return (values.size() == 0); }\n \n-    size_t count() const { return values.size(); }\n+    size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n     bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);"
      }
    ]
  },
  {
    "sha": "5e3060c0d104c734e7e2a200e2d937ea01166c8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTMwNjBjMGQxMDRjNzM0ZTdlMmEyMDBlMmQ5MzdlYTAxMTY2Yzhh",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T15:13:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:05Z"
      },
      "message": "UniValue: export NullUniValue global constant",
      "tree": {
        "sha": "8b5c1e254a751dd93bfcc71efa39ea3173508822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b5c1e254a751dd93bfcc71efa39ea3173508822"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3060c0d104c734e7e2a200e2d937ea01166c8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3060c0d104c734e7e2a200e2d937ea01166c8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3060c0d104c734e7e2a200e2d937ea01166c8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3060c0d104c734e7e2a200e2d937ea01166c8a/comments",
    "author": null,
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efc78837728bebcf2030d1d495018e563eb10c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc78837728bebcf2030d1d495018e563eb10c71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efc78837728bebcf2030d1d495018e563eb10c71"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6870ce59eb2ea36424bdfc6c775913de3fcc3db1",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3060c0d104c734e7e2a200e2d937ea01166c8a/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3060c0d104c734e7e2a200e2d937ea01166c8a/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=5e3060c0d104c734e7e2a200e2d937ea01166c8a",
        "patch": "@@ -9,7 +9,7 @@\n \n using namespace std;\n \n-static const UniValue nullValue;\n+const UniValue NullUniValue;\n \n void UniValue::clear()\n {\n@@ -175,21 +175,21 @@ bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n const UniValue& UniValue::operator[](const std::string& key) const\n {\n     if (typ != VOBJ)\n-        return nullValue;\n+        return NullUniValue;\n \n     int index = findKey(key);\n     if (index < 0)\n-        return nullValue;\n+        return NullUniValue;\n \n     return values[index];\n }\n \n const UniValue& UniValue::operator[](unsigned int index) const\n {\n     if (typ != VOBJ && typ != VARR)\n-        return nullValue;\n+        return NullUniValue;\n     if (index >= values.size())\n-        return nullValue;\n+        return NullUniValue;\n \n     return values[index];\n }"
      },
      {
        "sha": "afe751ed9d7becdc4643723caf66c397b2e0d528",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3060c0d104c734e7e2a200e2d937ea01166c8a/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3060c0d104c734e7e2a200e2d937ea01166c8a/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=5e3060c0d104c734e7e2a200e2d937ea01166c8a",
        "patch": "@@ -152,4 +152,6 @@ extern enum jtokentype getJsonToken(std::string& tokenVal,\n                                     unsigned int& consumed, const char *raw);\n extern const char *uvTypeName(UniValue::VType t);\n \n+extern const UniValue NullUniValue;\n #endif // BITCOIN_UNIVALUE_UNIVALUE_H\n+"
      }
    ]
  },
  {
    "sha": "15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTk4MmE4YjY5ZWM2YWIzYzNhNmJmNzFmYzZhOWI2ODFkM2ZmNTQx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T19:15:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:05Z"
      },
      "message": "Convert tree to using univalue. Eliminate all json_spirit uses.",
      "tree": {
        "sha": "854a48a039d4199dbc1acf33ef94d06d007f1348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/854a48a039d4199dbc1acf33ef94d06d007f1348"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/comments",
    "author": null,
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3060c0d104c734e7e2a200e2d937ea01166c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3060c0d104c734e7e2a200e2d937ea01166c8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3060c0d104c734e7e2a200e2d937ea01166c8a"
      }
    ],
    "stats": {
      "total": 526,
      "additions": 321,
      "deletions": 205
    },
    "files": [
      {
        "sha": "63332f9acd0b6091a42fe3d073ce18fc6a0a2bf1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -342,6 +342,7 @@ endif\n \n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBSECP256K1)\n "
      },
      {
        "sha": "9950153a659b7d02e4edbbdcf79b3b1d3f906080",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -143,7 +143,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     // Parse reply\n     Value valReply;\n-    if (!read_string(strReply, valReply))\n+    if (!valReply.read(strReply))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const Object& reply = valReply.get_obj();\n     if (reply.empty())\n@@ -176,29 +176,27 @@ int CommandLineRPC(int argc, char *argv[])\n         const bool fWait = GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                const Object reply = CallRPC(strMethod, params);\n+                // Execute\n+                Object reply = CallRPC(strMethod, params);\n \n                 // Parse reply\n                 const Value& result = find_value(reply, \"result\");\n                 const Value& error  = find_value(reply, \"error\");\n \n-                if (error.type() != null_type) {\n+                if (!error.isNull()) {\n                     // Error\n-                    const int code = find_value(error.get_obj(), \"code\").get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + write_string(error, false);\n+                    strPrint = \"error: \" + error.write();\n+                    int code = error[\"code\"].get_int();\n                     nRet = abs(code);\n                 } else {\n                     // Result\n-                    if (result.type() == null_type)\n+                    if (result.isNull())\n                         strPrint = \"\";\n-                    else if (result.type() == str_type)\n+                    else if (result.isStr())\n                         strPrint = result.get_str();\n                     else\n-                        strPrint = write_string(result, true);\n+                        strPrint = result.write(2);\n                 }\n-\n                 // Connection succeeded, no need to retry.\n                 break;\n             }"
      },
      {
        "sha": "1962cf6431f01aff3fd72b1bad6ae51a2c701f41",
        "filename": "src/json_spirit_wrapper.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/json_spirit_wrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/json_spirit_wrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json_spirit_wrapper.h?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -0,0 +1,17 @@\n+#ifndef __JSON_SPIRIT_WRAPPER_H__\n+#define __JSON_SPIRIT_WRAPPER_H__\n+\n+#include \"univalue/univalue.h\"\n+\n+namespace json_spirit {\n+\n+typedef UniValue Value;\n+typedef UniValue Array;\n+typedef UniValue Object;\n+typedef UniValue::VType Value_type;\n+\n+}\n+\n+#define find_value(val,key) (val[key])\n+\n+#endif // __JSON_SPIRIT_WRAPPER_H__"
      },
      {
        "sha": "29b1e8f262ef700eee2739f9c58c4b261a00b6e2",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -16,10 +16,10 @@\n #include \"rpcclient.h\"\n #include \"util.h\"\n \n-#include \"json/json_spirit_value.h\"\n-\n #include <openssl/crypto.h>\n \n+#include \"univalue/univalue.h\"\n+\n #ifdef ENABLE_WALLET\n #include <db_cxx.h>\n #endif\n@@ -167,21 +167,25 @@ void RPCExecutor::request(const QString &command)\n         std::string strPrint;\n         // Convert argument list to JSON objects in method-dependent way,\n         // and pass it along with the method name to the dispatcher.\n-        json_spirit::Value result = tableRPC.execute(\n+        UniValue result = tableRPC.execute(\n             args[0],\n             RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n \n         // Format result reply\n-        if (result.type() == json_spirit::null_type)\n+        if (result.isNull())\n             strPrint = \"\";\n-        else if (result.type() == json_spirit::str_type)\n+        else if (result.isStr())\n             strPrint = result.get_str();\n         else\n-            strPrint = write_string(result, true);\n+            strPrint = result.write(2);\n \n         emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n+<<<<<<< HEAD\n     catch (const json_spirit::Object& objError)\n+=======\n+    catch (UniValue& objError)\n+>>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n     {\n         try // Nice formatting for standard-format error\n         {\n@@ -191,7 +195,7 @@ void RPCExecutor::request(const QString &command)\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (const std::exception& e)"
      },
      {
        "sha": "2f9fd5e0451262f4e27991cd740196336d0a10d3",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <stdint.h>\n \n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -206,7 +206,13 @@ Value getrawmempool(const Array& params, bool fHelp)\n                 if (mempool.exists(txin.prevout.hash))\n                     setDepends.insert(txin.prevout.hash.ToString());\n             }\n-            Array depends(setDepends.begin(), setDepends.end());\n+\n+            UniValue depends;\n+            BOOST_FOREACH(const string& dep, setDepends)\n+            {\n+                depends.push_back(dep);\n+            }\n+\n             info.push_back(Pair(\"depends\", depends));\n             o.push_back(Pair(hash.ToString(), info));\n         }\n@@ -412,14 +418,14 @@ Value gettxout(const Array& params, bool fHelp)\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n         if (!view.GetCoins(hash, coins))\n-            return Value::null;\n+            return NullUniValue;\n         mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n         if (!pcoinsTip->GetCoins(hash, coins))\n-            return Value::null;\n+            return NullUniValue;\n     }\n     if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n-        return Value::null;\n+        return NullUniValue;\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;"
      },
      {
        "sha": "d8c4da4207b0b9c3c8c569680547d0abd3197a14",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -135,7 +135,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n         // parse string as JSON, insert bool/number/object/etc. value\n         else {\n             Value jVal;\n-            if (!read_string(strVal, jVal))\n+            if (!jVal.read(strVal))\n                 throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n             params.push_back(jVal);\n         }"
      },
      {
        "sha": "29c12602721b4e0ae3f55c8094496c0a49082ab0",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -6,9 +6,7 @@\n #ifndef BITCOIN_RPCCLIENT_H\n #define BITCOIN_RPCCLIENT_H\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n json_spirit::Array RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n "
      },
      {
        "sha": "4571269c3f31712dcc25b7bb17996199457fe58d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -24,8 +24,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -216,7 +215,7 @@ Value setgenerate(const Array& params, bool fHelp)\n     mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n     GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n \n-    return Value::null;\n+    return NullUniValue;\n }\n #endif\n \n@@ -382,14 +381,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     LOCK(cs_main);\n \n     std::string strMode = \"template\";\n-    Value lpval = Value::null;\n+    Value lpval = NullUniValue;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n         const Value& modeval = find_value(oparam, \"mode\");\n-        if (modeval.type() == str_type)\n+        if (modeval.isStr())\n             strMode = modeval.get_str();\n-        else if (modeval.type() == null_type)\n+        else if (modeval.isNull())\n         {\n             /* Do nothing */\n         }\n@@ -439,14 +438,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n     static unsigned int nTransactionsUpdatedLast;\n \n-    if (lpval.type() != null_type)\n+    if (!lpval.isNull())\n     {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n         uint256 hashWatchedChain;\n         boost::system_time checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n-        if (lpval.type() == str_type)\n+        if (lpval.isStr())\n         {\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n             std::string lpstr = lpval.get_str();\n@@ -686,7 +685,7 @@ Value estimatefee(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)\n@@ -718,7 +717,7 @@ Value estimatepriority(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)"
      },
      {
        "sha": "f7bd3e0d5af7c5f1a0e2322e61d9d7f24f4b4f7a",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -20,8 +20,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -204,7 +203,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         if (mine != ISMINE_NO) {\n             ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n-            ret.insert(ret.end(), detail.begin(), detail.end());\n+            ret.pushKVs(detail);\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));"
      },
      {
        "sha": "3f46be0ccbe9066b2905502fc72cfcbd8fb73803",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -16,7 +16,7 @@\n \n #include <boost/foreach.hpp>\n \n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -59,7 +59,7 @@ Value ping(const Array& params, bool fHelp)\n         pNode->fPingQueued = true;\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n@@ -190,7 +190,7 @@ Value addnode(const Array& params, bool fHelp)\n     {\n         CAddress addr;\n         OpenNetworkConnection(addr, NULL, strNode.c_str());\n-        return Value::null;\n+        return NullUniValue;\n     }\n \n     LOCK(cs_vAddedNodes);\n@@ -212,7 +212,7 @@ Value addnode(const Array& params, bool fHelp)\n         vAddedNodes.erase(it);\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value getaddednodeinfo(const Array& params, bool fHelp)"
      },
      {
        "sha": "72a7b763439b681e7422813cedd452eadbf95d4e",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -260,14 +260,14 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return write_string(Value(request), false) + \"\\n\";\n+    return request.write() + \"\\n\";\n }\n \n Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n {\n     Object reply;\n-    if (error.type() != null_type)\n-        reply.push_back(Pair(\"result\", Value::null));\n+    if (!error.isNull())\n+        reply.push_back(Pair(\"result\", NullUniValue));\n     else\n         reply.push_back(Pair(\"result\", result));\n     reply.push_back(Pair(\"error\", error));\n@@ -278,7 +278,7 @@ Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n {\n     Object reply = JSONRPCReplyObj(result, error, id);\n-    return write_string(Value(reply), false) + \"\\n\";\n+    return reply.write() + \"\\n\";\n }\n \n Object JSONRPCError(int code, const string& message)"
      },
      {
        "sha": "496e19ed5363c756d5427966e821da187b1cee6c",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -15,9 +15,7 @@\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n //! HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "8d2b035f31b8f5156212a3b9701b7b4f289bae11",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 22,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -25,8 +25,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -343,20 +342,21 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n-    BOOST_FOREACH(const Value& input, inputs) {\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const Value& input = inputs[idx];\n         const Object& o = input.get_obj();\n \n         uint256 txid = ParseHashO(o, \"txid\");\n \n         const Value& vout_v = find_value(o, \"vout\");\n-        if (vout_v.type() != int_type)\n+        if (!vout_v.isNum())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n         int nOutput = vout_v.get_int();\n         if (nOutput < 0)\n@@ -367,17 +367,18 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     }\n \n     set<CBitcoinAddress> setAddress;\n-    BOOST_FOREACH(const Pair& s, sendTo) {\n-        CBitcoinAddress address(s.name_);\n+    vector<string> addrList = sendTo.getKeys();\n+    BOOST_FOREACH(const string& name_, addrList) {\n+        CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        CAmount nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(sendTo[name_]);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);\n@@ -438,7 +439,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n \n     CTransaction tx;\n \n@@ -570,7 +571,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n #else\n     LOCK(cs_main);\n #endif\n-    RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -613,10 +614,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && params[2].type() != null_type) {\n+    if (params.size() > 2 && !params[2].isNull()) {\n         fGivenKeys = true;\n         Array keys = params[2].get_array();\n-        BOOST_FOREACH(Value k, keys) {\n+        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+            Value k = keys[idx];\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n@@ -633,15 +635,16 @@ Value signrawtransaction(const Array& params, bool fHelp)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1 && params[1].type() != null_type) {\n+    if (params.size() > 1 && !params[1].isNull()) {\n         Array prevTxs = params[1].get_array();\n-        BOOST_FOREACH(Value& p, prevTxs) {\n-            if (p.type() != obj_type)\n+        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+            const Value& p = prevTxs[idx];\n+            if (!p.isObject())\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -669,9 +672,9 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n                 Value v = find_value(prevOut, \"redeemScript\");\n-                if (!(v == Value::null)) {\n+                if (!v.isNull()) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n@@ -687,7 +690,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3 && params[3].type() != null_type) {\n+    if (params.size() > 3 && !params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n             (string(\"ALL\"), int(SIGHASH_ALL))\n@@ -769,7 +772,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "da0a8048b258d2d95cc1a9304946baa2870ab9e2",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -27,7 +27,8 @@\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+\n+#include \"json_spirit_wrapper.h\"\n \n using namespace boost::asio;\n using namespace json_spirit;\n@@ -89,30 +90,30 @@ void RPCTypeCheck(const Array& params,\n             break;\n \n         const Value& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.type() == null_type))))\n+        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n         {\n             string err = strprintf(\"Expected type %s, got %s\",\n-                                   Value_type_name[t], Value_type_name[v.type()]);\n+                                   uvTypeName(t), uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n         i++;\n     }\n }\n \n-void RPCTypeCheck(const Object& o,\n-                  const map<string, Value_type>& typesExpected,\n+void RPCTypeCheckObj(const UniValue& o,\n+                  const map<string, UniValue::VType>& typesExpected,\n                   bool fAllowNull)\n {\n     BOOST_FOREACH(const PAIRTYPE(string, Value_type)& t, typesExpected)\n     {\n         const Value& v = find_value(o, t.first);\n-        if (!fAllowNull && v.type() == null_type)\n+        if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n-        if (!((v.type() == t.second) || (fAllowNull && (v.type() == null_type))))\n+        if (!((v.type() == t.second) || (fAllowNull && (v.isNull()))))\n         {\n             string err = strprintf(\"Expected type %s for %s, got %s\",\n-                                   Value_type_name[t.second], t.first, Value_type_name[v.type()]);\n+                                   uvTypeName(t.second), t.first, uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n     }\n@@ -142,7 +143,7 @@ Value ValueFromAmount(const CAmount& amount)\n uint256 ParseHashV(const Value& v, string strName)\n {\n     string strHex;\n-    if (v.type() == str_type)\n+    if (v.isStr())\n         strHex = v.get_str();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n@@ -157,7 +158,7 @@ uint256 ParseHashO(const Object& o, string strKey)\n vector<unsigned char> ParseHexV(const Value& v, string strName)\n {\n     string strHex;\n-    if (v.type() == str_type)\n+    if (v.isStr())\n         strHex = v.get_str();\n     if (!IsHex(strHex))\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n@@ -417,7 +418,7 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     int code = find_value(objError, \"code\").get_int();\n     if (code == RPC_INVALID_REQUEST) nStatus = HTTP_BAD_REQUEST;\n     else if (code == RPC_METHOD_NOT_FOUND) nStatus = HTTP_NOT_FOUND;\n-    string strReply = JSONRPCReply(Value::null, objError, id);\n+    string strReply = JSONRPCReply(NullUniValue, objError, id);\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n@@ -828,14 +829,14 @@ class JSONRequest\n     string strMethod;\n     Array params;\n \n-    JSONRequest() { id = Value::null; }\n+    JSONRequest() { id = NullUniValue; }\n     void parse(const Value& valRequest);\n };\n \n void JSONRequest::parse(const Value& valRequest)\n {\n     // Parse request\n-    if (valRequest.type() != obj_type)\n+    if (!valRequest.isObject())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n     const Object& request = valRequest.get_obj();\n \n@@ -844,19 +845,19 @@ void JSONRequest::parse(const Value& valRequest)\n \n     // Parse method\n     Value valMethod = find_value(request, \"method\");\n-    if (valMethod.type() == null_type)\n+    if (valMethod.isNull())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n-    if (valMethod.type() != str_type)\n+    if (!valMethod.isStr())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n         LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");\n-    if (valParams.type() == array_type)\n+    if (valParams.isArray())\n         params = valParams.get_array();\n-    else if (valParams.type() == null_type)\n+    else if (valParams.isNull())\n         params = Array();\n     else\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n@@ -872,15 +873,15 @@ static Object JSONRPCExecOne(const Value& req)\n         jreq.parse(req);\n \n         Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n-        rpc_result = JSONRPCReplyObj(result, Value::null, jreq.id);\n+        rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (const Object& objError)\n     {\n-        rpc_result = JSONRPCReplyObj(Value::null, objError, jreq.id);\n+        rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n     }\n     catch (const std::exception& e)\n     {\n-        rpc_result = JSONRPCReplyObj(Value::null,\n+        rpc_result = JSONRPCReplyObj(NullUniValue,\n                                      JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n     }\n \n@@ -893,7 +894,7 @@ static string JSONRPCExecBatch(const Array& vReq)\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n         ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n \n-    return write_string(Value(ret), false) + \"\\n\";\n+    return ret.write() + \"\\n\";\n }\n \n static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n@@ -925,7 +926,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n     {\n         // Parse request\n         Value valRequest;\n-        if (!read_string(strRequest, valRequest))\n+        if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n         // Return immediately if in warmup\n@@ -938,16 +939,16 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         string strReply;\n \n         // singleton request\n-        if (valRequest.type() == obj_type) {\n+        if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n             Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n \n             // Send reply\n-            strReply = JSONRPCReply(result, Value::null, jreq.id);\n+            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n         // array of requests\n-        } else if (valRequest.type() == array_type)\n+        } else if (valRequest.isArray())\n             strReply = JSONRPCExecBatch(valRequest.get_array());\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");"
      },
      {
        "sha": "c9982bb8ca0e8912c289d2af254916c5c990312c",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -15,9 +15,8 @@\n #include <stdint.h>\n #include <string>\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include <boost/function.hpp>\n+#include \"json_spirit_wrapper.h\"\n \n class CRPCCommand;\n \n@@ -73,12 +72,13 @@ bool RPCIsInWarmup(std::string *statusOut);\n  */\n void RPCTypeCheck(const json_spirit::Array& params,\n                   const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n-/**\n- * Check for expected keys/value types in an Object.\n- * Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n- */\n-void RPCTypeCheck(const json_spirit::Object& o,\n-                  const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n+\n+/*\n+  Check for expected keys/value types in an Object.\n+  Use like: RPCTypeCheckObj(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n+*/\n+void RPCTypeCheckObj(const UniValue& o,\n+                  const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n /**\n  * Run func nSeconds from now. Uses boost deadline timers."
      },
      {
        "sha": "a806fe7b05695b6c1f20856020c225879b1dbc8c",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 23,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -17,9 +17,7 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n@@ -30,10 +28,9 @@ BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -53,10 +50,9 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     std::vector<unsigned char> result;\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -130,10 +126,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     CBitcoinAddress addr;\n     SelectParams(CBaseChainParams::MAIN);\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -185,10 +180,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -256,10 +251,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "fea826b65af4d0dc747bfcace3e0045aae9fb9e6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -111,20 +111,20 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n \n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n {\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(0LL), false), \"0.00000000\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(1LL), false), \"0.00000001\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(17622195LL), false), \"0.17622195\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(50000000LL), false), \"0.50000000\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(89898989LL), false), \"0.89898989\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(100000000LL), false), \"1.00000000\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(2099999999999990LL), false), \"20999999.99999990\");\n-    BOOST_CHECK_EQUAL(write_string(ValueFromAmount(2099999999999999LL), false), \"20999999.99999999\");\n+    BOOST_CHECK(ValueFromAmount(0LL).write() == \"0.00000000\");\n+    BOOST_CHECK(ValueFromAmount(1LL).write() == \"0.00000001\");\n+    BOOST_CHECK(ValueFromAmount(17622195LL).write() == \"0.17622195\");\n+    BOOST_CHECK(ValueFromAmount(50000000LL).write() == \"0.50000000\");\n+    BOOST_CHECK(ValueFromAmount(89898989LL).write() == \"0.89898989\");\n+    BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n+    BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n+    BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n }\n \n static Value ValueFromString(const std::string &str)\n {\n     Value value;\n-    BOOST_CHECK(read_string(str, value));\n+    BOOST_CHECK(value.read(str));\n     return value;\n }\n "
      },
      {
        "sha": "b4cab3245c81feb2032c5853d7ca870796fe53b7",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -26,9 +26,7 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -46,7 +44,7 @@ read_json(const std::string& jsondata)\n {\n     Value v;\n \n-    if (!read_string(jsondata, v) || v.type() != array_type)\n+    if (!v.read(jsondata) || !v.isArray())\n     {\n         BOOST_ERROR(\"Parse error.\");\n         return Array();\n@@ -636,10 +634,9 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     // scripts.\n     Array tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n         if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n@@ -662,11 +659,10 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     // Scripts that should evaluate as invalid\n     Array tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n-        if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n+        if (test.size() < 3) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "121644ddc45da178f6bbfbb3dcf1ecd7a06d0e7c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -16,9 +16,7 @@\n #include <iostream>\n \n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n@@ -170,10 +168,9 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n     Array tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "cdd88f348d236af5ed473cfa4a534702f856d2b0",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 9,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -22,7 +22,8 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -90,14 +91,21 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     Array tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n+<<<<<<< HEAD\n     ScriptError err;\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n         if (test[0].type() == array_type)\n+=======\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n+        if (test[0].isArray())\n+>>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n         {\n-            if (test.size() != 3 || test[1].type() != str_type || test[2].type() != str_type)\n+            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n@@ -106,9 +114,9 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n-            {\n-                if (input.type() != array_type)\n+\t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n+\t        const Value& input = inputs[inpIdx];\n+                if (!input.isArray())\n                 {\n                     fValid = false;\n                     break;\n@@ -166,14 +174,21 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     Array tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n+<<<<<<< HEAD\n     ScriptError err;\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n         if (test[0].type() == array_type)\n+=======\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n+        if (test[0].isArray())\n+>>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n         {\n-            if (test.size() != 3 || test[1].type() != str_type || test[2].type() != str_type)\n+            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n@@ -182,9 +197,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n-            {\n-                if (input.type() != array_type)\n+\t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n+\t        const Value& input = inputs[inpIdx];\n+                if (!input.isArray())\n                 {\n                     fValid = false;\n                     break;"
      },
      {
        "sha": "28d6e3d3cd80af5b3436b6a1b5ce3c8531b6cf4c",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -11,6 +11,10 @@\n #include <map>\n #include <cassert>\n \n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+#include <stdlib.h>       // atoi(), atof()   TODO: remove\n+\n class UniValue {\n public:\n     enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n@@ -130,8 +134,88 @@ class UniValue {\n     int findKey(const std::string& key) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    //\n+    // The following were added for compatibility with json_spirit.\n+    // Most duplicate other methods, and should be removed.\n+    //\n+    std::vector<std::string> getKeys() const { return keys; }\n+    std::vector<UniValue> getValues() const { return values; }\n+    bool get_bool() const { return getBool(); }\n+    std::string get_str() const { return getValStr(); }\n+    int get_int() const { return atoi(getValStr().c_str()); }\n+    double get_real() const { return atof(getValStr().c_str()); }\n+    const UniValue& get_obj() const { return *this; }\n+    const UniValue& get_array() const { return *this; }\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    int64_t get_int64() const {\n+        int64_t ret;\n+        std::istringstream(getValStr()) >> ret;\n+        return ret;\n+    }\n };\n \n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n enum jtokentype {\n     JTOK_ERR        = -1,\n     JTOK_NONE       = 0,                           // eof"
      },
      {
        "sha": "68d2a21c47014c6d0c830b7714c2d53a2657f6a8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -19,7 +19,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -126,7 +126,7 @@ Value importprivkey(const Array& params, bool fHelp)\n \n         // Don't throw error in case a key is already there\n         if (pwalletMain->HaveKey(vchAddress))\n-            return Value::null;\n+            return NullUniValue;\n \n         pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = 1;\n \n@@ -141,7 +141,7 @@ Value importprivkey(const Array& params, bool fHelp)\n         }\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value importaddress(const Array& params, bool fHelp)\n@@ -200,7 +200,7 @@ Value importaddress(const Array& params, bool fHelp)\n \n         // Don't throw error in case an address is already there\n         if (pwalletMain->HaveWatchOnly(script))\n-            return Value::null;\n+            return NullUniValue;\n \n         pwalletMain->MarkDirty();\n \n@@ -214,7 +214,7 @@ Value importaddress(const Array& params, bool fHelp)\n         }\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value importwallet(const Array& params, bool fHelp)\n@@ -318,7 +318,7 @@ Value importwallet(const Array& params, bool fHelp)\n     if (!fGood)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value dumpprivkey(const Array& params, bool fHelp)\n@@ -421,5 +421,5 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file << \"\\n\";\n     file << \"# End of dump\\n\";\n     file.close();\n-    return Value::null;\n+    return NullUniValue;\n }"
      },
      {
        "sha": "e743b1fa1d200e8a60ac09128092ed9e7f7e84c6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 29,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "patch": "@@ -21,8 +21,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -275,7 +274,7 @@ Value setaccount(const Array& params, bool fHelp)\n     else\n         throw JSONRPCError(RPC_MISC_ERROR, \"setaccount can only be used with own address\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -419,9 +418,9 @@ Value sendtoaddress(const Array& params, bool fHelp)\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (params.size() > 2 && params[2].type() != null_type && !params[2].get_str().empty())\n+    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[2].get_str();\n-    if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n+    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n@@ -896,9 +895,9 @@ Value sendfrom(const Array& params, bool fHelp)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 4 && params[4].type() != null_type && !params[4].get_str().empty())\n+    if (params.size() > 4 && !params[4].isNull() && !params[4].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[4].get_str();\n-    if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n+    if (params.size() > 5 && !params[5].isNull() && !params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[5].get_str();\n \n     EnsureWalletIsUnlocked();\n@@ -965,7 +964,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n+    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     Array subtractFeeFromAmount;\n@@ -976,18 +975,19 @@ Value sendmany(const Array& params, bool fHelp)\n     vector<CRecipient> vecSend;\n \n     CAmount totalAmount = 0;\n-    BOOST_FOREACH(const Pair& s, sendTo)\n+    vector<string> keys = sendTo.getKeys();\n+    BOOST_FOREACH(const string& name_, keys)\n     {\n-        CBitcoinAddress address(s.name_);\n+        CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        CAmount nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(sendTo[name_]);\n         totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n@@ -1472,15 +1472,21 @@ Value listtransactions(const Array& params, bool fHelp)\n         nFrom = ret.size();\n     if ((nFrom + nCount) > (int)ret.size())\n         nCount = ret.size() - nFrom;\n-    Array::iterator first = ret.begin();\n+\n+    vector<UniValue> arrTmp = ret.getValues();\n+\n+    vector<UniValue>::iterator first = arrTmp.begin();\n     std::advance(first, nFrom);\n-    Array::iterator last = ret.begin();\n+    vector<UniValue>::iterator last = arrTmp.begin();\n     std::advance(last, nFrom+nCount);\n \n-    if (last != ret.end()) ret.erase(last, ret.end());\n-    if (first != ret.begin()) ret.erase(ret.begin(), first);\n+    if (last != arrTmp.end()) arrTmp.erase(last, arrTmp.end());\n+    if (first != arrTmp.begin()) arrTmp.erase(arrTmp.begin(), first);\n \n-    std::reverse(ret.begin(), ret.end()); // Return oldest to newest\n+    std::reverse(arrTmp.begin(), arrTmp.end()); // Return oldest to newest\n+\n+    ret.clear();\n+    ret.push_backV(arrTmp);\n \n     return ret;\n }\n@@ -1756,7 +1762,7 @@ Value backupwallet(const Array& params, bool fHelp)\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1793,7 +1799,7 @@ Value keypoolrefill(const Array& params, bool fHelp)\n     if (pwalletMain->GetKeyPoolSize() < kpSize)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1860,7 +1866,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1906,7 +1912,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1945,7 +1951,7 @@ Value walletlock(const Array& params, bool fHelp)\n         nWalletUnlockTime = 0;\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -2050,9 +2056,9 @@ Value lockunspent(const Array& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, boost::assign::list_of(bool_type));\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL));\n     else\n-        RPCTypeCheck(params, boost::assign::list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -2063,13 +2069,13 @@ Value lockunspent(const Array& params, bool fHelp)\n     }\n \n     Array outputs = params[1].get_array();\n-    BOOST_FOREACH(Value& output, outputs)\n-    {\n-        if (output.type() != obj_type)\n+    for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n+        const UniValue& output = outputs[idx];\n+        if (!output.isObject())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheckObj(o, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      }
    ]
  },
  {
    "sha": "53b4671a9de75f7c8e2903d510cf88867c3f6b97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I0NjcxYTlkZTc1ZjdjOGUyOTAzZDUxMGNmODg4NjdjM2Y2Yjk3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T11:35:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:05Z"
      },
      "message": "extend conversion to UniValue",
      "tree": {
        "sha": "9bb3808d270e58f7c7a0a546110f5e9dbd941fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bb3808d270e58f7c7a0a546110f5e9dbd941fc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b4671a9de75f7c8e2903d510cf88867c3f6b97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b4671a9de75f7c8e2903d510cf88867c3f6b97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b4671a9de75f7c8e2903d510cf88867c3f6b97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b4671a9de75f7c8e2903d510cf88867c3f6b97/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15982a8b69ec6ab3c3a6bf71fc6a9b681d3ff541"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 76,
      "deletions": 69
    },
    "files": [
      {
        "sha": "5041ae2f1cea30954edf6d8706bd8cd2c8037e04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   ecwrapper.h \\\n   hash.h \\\n   init.h \\\n+  json_spirit_wrapper.h \\\n   key.h \\\n   keystore.h \\\n   leveldbwrapper.h \\"
      },
      {
        "sha": "9ad5fb6b1d0ac92fd9c84c4ab20b9b0a2223a79e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -142,7 +142,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n         throw runtime_error(\"no response from server\");\n \n     // Parse reply\n-    Value valReply;\n+    Value valReply(UniValue::VSTR);\n     if (!valReply.read(strReply))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const Object& reply = valReply.get_obj();"
      },
      {
        "sha": "5f64a0091c9f70451507df647ff38a80a3205dd8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -222,7 +222,7 @@ static bool rest_block(AcceptedConnection* conn,\n \n     case RF_JSON: {\n         Object objBlock = blockToJSON(block, pblockindex, showTxDetails);\n-        string strJSON = write_string(Value(objBlock), false) + \"\\n\";\n+        string strJSON = objBlock.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n     }\n@@ -267,8 +267,7 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     case RF_JSON: {\n         Array rpcParams;\n         Value chainInfoObject = getblockchaininfo(rpcParams, false);\n-\n-        string strJSON = write_string(chainInfoObject, false) + \"\\n\";\n+        string strJSON = chainInfoObject.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n     }\n@@ -319,7 +318,7 @@ static bool rest_tx(AcceptedConnection* conn,\n     case RF_JSON: {\n         Object objTx;\n         TxToJSON(tx, hashBlock, objTx);\n-        string strJSON = write_string(Value(objTx), false) + \"\\n\";\n+        string strJSON = objTx.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n     }\n@@ -516,7 +515,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n \n         // return json string\n-        string strJSON = write_string(Value(objGetUTXOResponse), false) + \"\\n\";\n+        string strJSON = objGetUTXOResponse.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n     }"
      },
      {
        "sha": "55403c9e82636c7870172e102f6a8e945db51db2",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -678,7 +678,7 @@ Value invalidateblock(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value reconsiderblock(const Array& params, bool fHelp)\n@@ -717,5 +717,5 @@ Value reconsiderblock(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }"
      },
      {
        "sha": "8b7b9e1493ea00069ef41dfed9fc883c216b0051",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -122,7 +122,7 @@ static CRPCConvertTable rpcCvtTable;\n /** Convert strings to command-specific RPC representation */\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n-    Array params;\n+    UniValue params(UniValue::VARR);\n \n     for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n         const std::string& strVal = strParams[idx];"
      },
      {
        "sha": "95b788810e22a031ddd93b539db1c30205f68606",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -399,7 +399,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         if (strMode == \"proposal\")\n         {\n             const Value& dataval = find_value(oparam, \"data\");\n-            if (dataval.type() != str_type)\n+            if (dataval.isStr())\n                 throw JSONRPCError(RPC_TYPE_ERROR, \"Missing data String key for proposal\");\n \n             CBlock block;\n@@ -519,7 +519,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n     pblock->nNonce = 0;\n \n-    static const Array aCaps = boost::assign::list_of(\"proposal\");\n+    Array aCaps; aCaps.push_back(\"proposal\");\n \n     Array transactions;\n     map<uint256, int64_t> setTxIndex;"
      },
      {
        "sha": "b06408f21e2dc260c66611de172c5f99c4b4d8ca",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -389,8 +389,8 @@ Value setmocktime(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(params[0].get_int64());\n \n-    return Value::null;\n+    return NullUniValue;\n }"
      },
      {
        "sha": "9b422894ef5287fe235a0bb434da61d7948ec95a",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -256,7 +256,7 @@ int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n \n string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)\n {\n-    Object request;\n+    Object request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n@@ -265,7 +265,7 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n \n Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n {\n-    Object reply;\n+    Object reply(UniValue::VOBJ);\n     if (!error.isNull())\n         reply.push_back(Pair(\"result\", NullUniValue));\n     else\n@@ -283,7 +283,7 @@ string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n \n Object JSONRPCError(int code, const string& message)\n {\n-    Object error;\n+    UniValue error(UniValue::VOBJ);\n     error.push_back(Pair(\"code\", code));\n     error.push_back(Pair(\"message\", message));\n     return error;"
      },
      {
        "sha": "fe357d341fb0cdd3de12a446c71b2a580409d1ca",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -220,7 +220,8 @@ Value gettxoutproof(const Array& params, bool fHelp)\n     set<uint256> setTxids;\n     uint256 oneTxid;\n     Array txids = params[0].get_array();\n-    BOOST_FOREACH(Value& txid, txids) {\n+    for (unsigned int idx = 0; idx < txids.size(); idx++) {\n+        const Value& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid txid \")+txid.get_str());\n         uint256 hash(uint256S(txid.get_str()));\n@@ -446,7 +447,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n-    Object result;\n+    UniValue result(UniValue::VOBJ);\n     TxToJSON(tx, uint256(), result);\n \n     return result;\n@@ -478,7 +479,7 @@ Value decodescript(const Array& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n \n     Object r;\n     CScript script;"
      },
      {
        "sha": "989b35b9e82bef5295f2d2462a8369535b8d2625",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -583,11 +583,13 @@ BOOST_AUTO_TEST_CASE(script_build)\n         Array json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n         Array json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n-        BOOST_FOREACH(Value& tv, json_good) {\n-            tests_good.insert(write_string(Value(tv.get_array()), true));\n+        for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n+            const Value& tv = json_good[idx];\n+            tests_good.insert(tv.get_array().write());\n         }\n-        BOOST_FOREACH(Value& tv, json_bad) {\n-            tests_bad.insert(write_string(Value(tv.get_array()), true));\n+        for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n+            const Value& tv = json_bad[idx];\n+            tests_bad.insert(tv.get_array().write());\n         }\n     }\n \n@@ -596,7 +598,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = write_string(Value(test.GetJSON()), true);\n+        std::string str = test.GetJSON().write();\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -606,7 +608,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = write_string(Value(test.GetJSON()), true);\n+        std::string str = test.GetJSON().write();\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      },
      {
        "sha": "0ddc48271be43e8704466a9dcdea28ef9ccda7e3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -20,6 +20,7 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n "
      },
      {
        "sha": "e0cccef696949437c9b24c369d02147488ea2fc4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -73,7 +73,7 @@ std::string DecodeDumpString(const std::string &str) {\n Value importprivkey(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n@@ -147,7 +147,7 @@ Value importprivkey(const Array& params, bool fHelp)\n Value importaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n@@ -220,7 +220,7 @@ Value importaddress(const Array& params, bool fHelp)\n Value importwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -324,7 +324,7 @@ Value importwallet(const Array& params, bool fHelp)\n Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -362,7 +362,7 @@ Value dumpprivkey(const Array& params, bool fHelp)\n Value dumpwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "f24a37ae6c4fc97fa8e371231f0a155e14168611",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 39,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b4671a9de75f7c8e2903d510cf88867c3f6b97/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "patch": "@@ -89,7 +89,7 @@ string AccountFromValue(const Value& value)\n Value getnewaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -168,7 +168,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n Value getaccountaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -200,7 +200,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n Value getrawchangeaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -235,7 +235,7 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n Value setaccount(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -281,7 +281,7 @@ Value setaccount(const Array& params, bool fHelp)\n Value getaccount(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -313,7 +313,7 @@ Value getaccount(const Array& params, bool fHelp)\n Value getaddressesbyaccount(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -381,7 +381,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n Value sendtoaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n@@ -437,7 +437,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n Value listaddressgroupings(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp)\n         throw runtime_error(\n@@ -489,7 +489,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -545,7 +545,7 @@ Value signmessage(const Array& params, bool fHelp)\n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -603,7 +603,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -692,7 +692,7 @@ CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminef\n Value getbalance(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -767,7 +767,7 @@ Value getbalance(const Array& params, bool fHelp)\n Value getunconfirmedbalance(const Array &params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n@@ -783,7 +783,7 @@ Value getunconfirmedbalance(const Array &params, bool fHelp)\n Value movecmd(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n@@ -853,7 +853,7 @@ Value movecmd(const Array& params, bool fHelp)\n Value sendfrom(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n@@ -916,7 +916,7 @@ Value sendfrom(const Array& params, bool fHelp)\n Value sendmany(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 2 || params.size() > 5)\n         throw runtime_error(\n@@ -991,9 +991,11 @@ Value sendmany(const Array& params, bool fHelp)\n         totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n-        BOOST_FOREACH(const Value& addr, subtractFeeFromAmount)\n-            if (addr.get_str() == s.name_)\n+        for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n+            const Value& addr = subtractFeeFromAmount[idx];\n+            if (addr.get_str() == name_)\n                 fSubtractFeeFromAmount = true;\n+        }\n \n         CRecipient recipient = {scriptPubKey, nAmount, fSubtractFeeFromAmount};\n         vecSend.push_back(recipient);\n@@ -1026,7 +1028,7 @@ extern CScript _createmultisig_redeemScript(const Array& params);\n Value addmultisigaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n@@ -1207,7 +1209,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n Value listreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -1244,7 +1246,7 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n Value listreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -1374,7 +1376,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n Value listtransactions(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 4)\n         throw runtime_error(\n@@ -1494,7 +1496,7 @@ Value listtransactions(const Array& params, bool fHelp)\n Value listaccounts(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -1574,7 +1576,7 @@ Value listaccounts(const Array& params, bool fHelp)\n Value listsinceblock(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp)\n         throw runtime_error(\n@@ -1665,7 +1667,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n Value gettransaction(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -1743,7 +1745,7 @@ Value gettransaction(const Array& params, bool fHelp)\n Value backupwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -1769,7 +1771,7 @@ Value backupwallet(const Array& params, bool fHelp)\n Value keypoolrefill(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -1813,7 +1815,7 @@ static void LockWallet(CWallet* pWallet)\n Value walletpassphrase(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n@@ -1873,7 +1875,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n Value walletpassphrasechange(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n@@ -1919,7 +1921,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n Value walletlock(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n         throw runtime_error(\n@@ -1958,7 +1960,7 @@ Value walletlock(const Array& params, bool fHelp)\n Value encryptwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n         throw runtime_error(\n@@ -2015,7 +2017,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n Value lockunspent(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -2099,7 +2101,7 @@ Value lockunspent(const Array& params, bool fHelp)\n Value listlockunspent(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n@@ -2148,7 +2150,7 @@ Value listlockunspent(const Array& params, bool fHelp)\n Value settxfee(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -2177,7 +2179,7 @@ Value settxfee(const Array& params, bool fHelp)\n Value getwalletinfo(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -2217,7 +2219,7 @@ Value getwalletinfo(const Array& params, bool fHelp)\n Value resendwallettransactions(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -2242,7 +2244,7 @@ Value resendwallettransactions(const Array& params, bool fHelp)\n Value listunspent(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n-        return Value::null;\n+        return NullUniValue;\n     \n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n@@ -2280,7 +2282,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -2293,7 +2295,8 @@ Value listunspent(const Array& params, bool fHelp)\n     set<CBitcoinAddress> setAddress;\n     if (params.size() > 2) {\n         Array inputs = params[2].get_array();\n-        BOOST_FOREACH(Value& input, inputs) {\n+        for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+            const Value& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());"
      }
    ]
  },
  {
    "sha": "6c7bee062437acbc078533fdcf8e53794031bf99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzdiZWUwNjI0MzdhY2JjMDc4NTMzZmRjZjhlNTM3OTQwMzFiZjk5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T12:48:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:05Z"
      },
      "message": "expicit set UniValue type to avoid empty values",
      "tree": {
        "sha": "9af2921524e39c6c25df31fba9d1dd55e03ba04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9af2921524e39c6c25df31fba9d1dd55e03ba04b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c7bee062437acbc078533fdcf8e53794031bf99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c7bee062437acbc078533fdcf8e53794031bf99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c7bee062437acbc078533fdcf8e53794031bf99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c7bee062437acbc078533fdcf8e53794031bf99/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b4671a9de75f7c8e2903d510cf88867c3f6b97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53b4671a9de75f7c8e2903d510cf88867c3f6b97"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 93,
      "deletions": 92
    },
    "files": [
      {
        "sha": "f3195746bac5651b4c8b7c6352402d65313db5ba",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -265,7 +265,7 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n \n     switch (rf) {\n     case RF_JSON: {\n-        Array rpcParams;\n+        UniValue rpcParams(UniValue::VARR);\n         Value chainInfoObject = getblockchaininfo(rpcParams, false);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n@@ -316,7 +316,7 @@ static bool rest_tx(AcceptedConnection* conn,\n     }\n \n     case RF_JSON: {\n-        Object objTx;\n+        UniValue objTx(UniValue::VOBJ);\n         TxToJSON(tx, hashBlock, objTx);\n         string strJSON = objTx.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n@@ -491,23 +491,23 @@ static bool rest_getutxos(AcceptedConnection* conn,\n     }\n \n     case RF_JSON: {\n-        Object objGetUTXOResponse;\n+        UniValue objGetUTXOResponse(UniValue::VOBJ);\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n         objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n         objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n-        Array utxos;\n+        UniValue utxos(UniValue::VARR);\n         BOOST_FOREACH (const CCoin& coin, outs) {\n-            Object utxo;\n+            UniValue utxo(UniValue::VOBJ);\n             utxo.push_back(Pair(\"txvers\", (int32_t)coin.nTxVer));\n             utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n             utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n \n             // include the script in a json output\n-            Object o;\n+            UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToJSON(coin.out.scriptPubKey, o, true);\n             utxo.push_back(Pair(\"scriptPubKey\", o));\n             utxos.push_back(utxo);"
      },
      {
        "sha": "facc112cb4204452f50c2ab256734e7e43ef8b25",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -55,7 +55,7 @@ double GetDifficulty(const CBlockIndex* blockindex)\n \n Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n-    Object result;\n+    UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n@@ -66,12 +66,12 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDe\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n-    Array txs;\n+    UniValue txs(UniValue::VARR);\n     BOOST_FOREACH(const CTransaction&tx, block.vtx)\n     {\n         if(txDetails)\n         {\n-            Object objTx;\n+            UniValue objTx(UniValue::VOBJ);\n             TxToJSON(tx, uint256(), objTx);\n             txs.push_back(objTx);\n         }\n@@ -187,12 +187,12 @@ Value getrawmempool(const Array& params, bool fHelp)\n     if (fVerbose)\n     {\n         LOCK(mempool.cs);\n-        Object o;\n+        UniValue o(UniValue::VOBJ);\n         BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n         {\n             const uint256& hash = entry.first;\n             const CTxMemPoolEntry& e = entry.second;\n-            Object info;\n+            UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n             info.push_back(Pair(\"time\", e.GetTime()));\n@@ -223,7 +223,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n         vector<uint256> vtxid;\n         mempool.queryHashes(vtxid);\n \n-        Array a;\n+        UniValue a(UniValue::VARR);\n         BOOST_FOREACH(const uint256& hash, vtxid)\n             a.push_back(hash.ToString());\n \n@@ -348,7 +348,7 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    Object ret;\n+    UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n@@ -404,7 +404,7 @@ Value gettxout(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    Object ret;\n+    UniValue ret(UniValue::VOBJ);\n \n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n@@ -435,7 +435,7 @@ Value gettxout(const Array& params, bool fHelp)\n     else\n         ret.push_back(Pair(\"confirmations\", pindex->nHeight - coins.nHeight + 1));\n     ret.push_back(Pair(\"value\", ValueFromAmount(coins.vout[n].nValue)));\n-    Object o;\n+    UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToJSON(coins.vout[n].scriptPubKey, o, true);\n     ret.push_back(Pair(\"scriptPubKey\", o));\n     ret.push_back(Pair(\"version\", coins.nVersion));\n@@ -495,7 +495,7 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n     obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n@@ -582,10 +582,10 @@ Value getchaintips(const Array& params, bool fHelp)\n     setTips.insert(chainActive.Tip());\n \n     /* Construct the output array.  */\n-    Array res;\n+    UniValue res(UniValue::VARR);\n     BOOST_FOREACH(const CBlockIndex* block, setTips)\n     {\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"height\", block->nHeight));\n         obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n \n@@ -636,7 +636,7 @@ Value getmempoolinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    Object ret;\n+    UniValue ret;\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n "
      },
      {
        "sha": "c2ad75af69bb2b8d3485114f1568875f856b672a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -146,7 +146,7 @@ Value generate(const Array& params, bool fHelp)\n         nHeightEnd = nHeightStart+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n-    Array blockHashes;\n+    UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n         auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n@@ -247,7 +247,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n@@ -519,9 +519,9 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n     pblock->nNonce = 0;\n \n-    Array aCaps; aCaps.push_back(\"proposal\");\n+    UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n \n-    Array transactions;\n+    UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n     BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n@@ -532,13 +532,13 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         if (tx.IsCoinBase())\n             continue;\n \n-        Object entry;\n+        UniValue entry(UniValue::VOBJ);\n \n         entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n \n         entry.push_back(Pair(\"hash\", txHash.GetHex()));\n \n-        Array deps;\n+        UniValue deps(UniValue::VARR);\n         BOOST_FOREACH (const CTxIn &in, tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n@@ -553,20 +553,20 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         transactions.push_back(entry);\n     }\n \n-    Object aux;\n+    UniValue aux(UniValue::VOBJ);\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n-    static Array aMutable;\n+    static UniValue aMutable(UniValue::VARR);\n     if (aMutable.empty())\n     {\n         aMutable.push_back(\"time\");\n         aMutable.push_back(\"transactions\");\n         aMutable.push_back(\"prevblock\");\n     }\n \n-    Object result;\n+    UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"capabilities\", aCaps));\n     result.push_back(Pair(\"version\", pblock->nVersion));\n     result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));"
      },
      {
        "sha": "2d54b555b9dcf7234e217d87e10b5acea8fb8dbb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -77,7 +77,7 @@ Value getinfo(const Array& params, bool fHelp)\n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\", CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\", PROTOCOL_VERSION));\n #ifdef ENABLE_WALLET\n@@ -118,7 +118,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n         if (mine == ISMINE_SPENDABLE) {\n@@ -130,7 +130,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     }\n \n     Object operator()(const CScriptID &scriptID) const {\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"isscript\", true));\n         if (mine != ISMINE_NO) {\n             CScript subscript;\n@@ -141,7 +141,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n             ExtractDestinations(subscript, whichType, addresses, nRequired);\n             obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n             obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-            Array a;\n+            UniValue a(UniValue::VARR);\n             BOOST_FOREACH(const CTxDestination& addr, addresses)\n                 a.push_back(CBitcoinAddress(addr).ToString());\n             obj.push_back(Pair(\"addresses\", a));\n@@ -186,7 +186,7 @@ Value validateaddress(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n \n-    Object ret;\n+    UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n@@ -312,7 +312,7 @@ Value createmultisig(const Array& params, bool fHelp)\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n-    Object result;\n+    UniValue result;\n     result.push_back(Pair(\"address\", address.ToString()));\n     result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n "
      },
      {
        "sha": "d8dd46e64ec20b3176d1d60271331cc6bf289132",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -120,10 +120,10 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n \n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n \n     BOOST_FOREACH(const CNodeStats& stats, vstats) {\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n         obj.push_back(Pair(\"id\", stats.nodeid));\n@@ -151,7 +151,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n             obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n             obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            Array heights;\n+            UniValue heights(UniValue::VARR);\n             BOOST_FOREACH(int height, statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n@@ -271,12 +271,12 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n     }\n \n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n     if (!fDns)\n     {\n         BOOST_FOREACH(string& strAddNode, laddedNodes)\n         {\n-            Object obj;\n+            UniValue obj(UniValue::VOBJ);\n             obj.push_back(Pair(\"addednode\", strAddNode));\n             ret.push_back(obj);\n         }\n@@ -291,26 +291,26 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n             laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n         else\n         {\n-            Object obj;\n+            UniValue obj(UniValue::VOBJ);\n             obj.push_back(Pair(\"addednode\", strAddNode));\n             obj.push_back(Pair(\"connected\", false));\n-            Array addresses;\n+            UniValue addresses(UniValue::VARR);\n             obj.push_back(Pair(\"addresses\", addresses));\n         }\n     }\n \n     LOCK(cs_vNodes);\n     for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); it++)\n     {\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"addednode\", it->first));\n \n-        Array addresses;\n+        UniValue addresses(UniValue::VARR);\n         bool fConnected = false;\n         BOOST_FOREACH(CService& addrNode, it->second)\n         {\n             bool fFound = false;\n-            Object node;\n+            UniValue node(UniValue::VOBJ);\n             node.push_back(Pair(\"address\", addrNode.ToString()));\n             BOOST_FOREACH(CNode* pnode, vNodes)\n                 if (pnode->addr == addrNode)\n@@ -350,7 +350,7 @@ Value getnettotals(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getnettotals\", \"\")\n        );\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"totalbytesrecv\", CNode::GetTotalBytesRecv()));\n     obj.push_back(Pair(\"totalbytessent\", CNode::GetTotalBytesSent()));\n     obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n@@ -359,14 +359,14 @@ Value getnettotals(const Array& params, bool fHelp)\n \n static Array GetNetworksInfo()\n {\n-    Array networks;\n+    UniValue networks(UniValue::VARR);\n     for(int n=0; n<NET_MAX; ++n)\n     {\n         enum Network network = static_cast<enum Network>(n);\n         if(network == NET_UNROUTABLE)\n             continue;\n         proxyType proxy;\n-        Object obj;\n+        UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n         obj.push_back(Pair(\"name\", GetNetworkName(network)));\n         obj.push_back(Pair(\"limited\", IsLimited(network)));\n@@ -418,7 +418,7 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",\n         FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n@@ -428,12 +428,12 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    Array localAddresses;\n+    UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         BOOST_FOREACH(const PAIRTYPE(CNetAddr, LocalServiceInfo) &item, mapLocalHost)\n         {\n-            Object rec;\n+            UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));\n             rec.push_back(Pair(\"port\", item.second.nPort));\n             rec.push_back(Pair(\"score\", item.second.nScore));"
      },
      {
        "sha": "5467f6df8859ada3f0a4dc43e0acefde0f06fb7f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -48,7 +48,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeH\n     out.push_back(Pair(\"reqSigs\", nRequired));\n     out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n \n-    Array a;\n+    UniValue a(UniValue::VARR);\n     BOOST_FOREACH(const CTxDestination& addr, addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n@@ -59,15 +59,15 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n-    Array vin;\n+    UniValue vin(UniValue::VARR);\n     BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        Object in;\n+        UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.push_back(Pair(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n         else {\n             in.push_back(Pair(\"txid\", txin.prevout.hash.GetHex()));\n             in.push_back(Pair(\"vout\", (int64_t)txin.prevout.n));\n-            Object o;\n+            UniValue o(UniValue::VOBJ);\n             o.push_back(Pair(\"asm\", txin.scriptSig.ToString()));\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n@@ -76,13 +76,13 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n         vin.push_back(in);\n     }\n     entry.push_back(Pair(\"vin\", vin));\n-    Array vout;\n+    UniValue vout(UniValue::VARR);\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n         const CTxOut& txout = tx.vout[i];\n-        Object out;\n+        UniValue out(UniValue::VOBJ);\n         out.push_back(Pair(\"value\", ValueFromAmount(txout.nValue)));\n         out.push_back(Pair(\"n\", (int64_t)i));\n-        Object o;\n+        UniValue o(UniValue::VOBJ);\n         ScriptPubKeyToJSON(txout.scriptPubKey, o, true);\n         out.push_back(Pair(\"scriptPubKey\", o));\n         vout.push_back(out);\n@@ -189,7 +189,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     if (!fVerbose)\n         return strHex;\n \n-    Object result;\n+    UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", strHex));\n     TxToJSON(tx, hashBlock, result);\n     return result;\n@@ -293,7 +293,7 @@ Value verifytxoutproof(const Array& params, bool fHelp)\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n-    Array res;\n+    UniValue res(UniValue::VARR);\n \n     vector<uint256> vMatch;\n     if (merkleBlock.txn.ExtractMatches(vMatch) != merkleBlock.header.hashMerkleRoot)\n@@ -481,7 +481,7 @@ Value decodescript(const Array& params, bool fHelp)\n     LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n \n-    Object r;\n+    UniValue r(UniValue::VOBJ);\n     CScript script;\n     if (params[0].get_str().size() > 0){\n         vector<unsigned char> scriptData(ParseHexV(params[0], \"argument\"));\n@@ -498,7 +498,7 @@ Value decodescript(const Array& params, bool fHelp)\n /** Pushes a JSON object for script verification or signing errors to vErrorsRet. */\n static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::string& strMessage)\n {\n-    Object entry;\n+    UniValue entry(UniValue::VOBJ);\n     entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n     entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n     entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n@@ -711,7 +711,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n     // Script verification errors\n-    Array vErrors;\n+    UniValue vErrors(UniValue::VARR);\n \n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n@@ -739,7 +739,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     }\n     bool fComplete = vErrors.empty();\n \n-    Object result;\n+    UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", EncodeHexTx(mergedTx)));\n     result.push_back(Pair(\"complete\", fComplete));\n     if (!vErrors.empty()) {"
      },
      {
        "sha": "3a54f1670b375345d5f49c6583206fcb5726063e",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -866,7 +866,7 @@ void JSONRequest::parse(const Value& valRequest)\n \n static Object JSONRPCExecOne(const Value& req)\n {\n-    Object rpc_result;\n+    UniValue rpc_result(UniValue::VOBJ);\n \n     JSONRequest jreq;\n     try {"
      },
      {
        "sha": "cbbecf08efc03b0311d0a982bf93f32e06a8d2e0",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -19,9 +19,9 @@ using namespace json_spirit;\n Array\n createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n {\n-    Array result;\n+    UniValue result(UniValue::VARR);\n     result.push_back(nRequired);\n-    Array addresses;\n+    UniValue addresses(UniValue::VARR);\n     if (address1) addresses.push_back(address1);\n     if (address2) addresses.push_back(address2);\n     result.push_back(addresses);"
      },
      {
        "sha": "80e5ac6b3272dff22685cd7c22587badf1d0de09",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -296,7 +296,7 @@ class TestBuilder\n     Array GetJSON()\n     {\n         DoPush();\n-        Array array;\n+        UniValue array(UniValue::VARR);\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));"
      },
      {
        "sha": "0cfd13a6b2fcdf13a4c94051a6e1b23291de7e57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c7bee062437acbc078533fdcf8e53794031bf99/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c7bee062437acbc078533fdcf8e53794031bf99/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6c7bee062437acbc078533fdcf8e53794031bf99",
        "patch": "@@ -68,7 +68,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n-    Array conflicts;\n+    UniValue conflicts(UniValue::VARR);\n     BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n@@ -336,7 +336,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n \n     // Find all addresses that have the given account\n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n@@ -464,14 +464,14 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    Array jsonGroupings;\n+    UniValue jsonGroupings(UniValue::VARR);\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n-        Array jsonGrouping;\n+        UniValue jsonGrouping(UniValue::VARR);\n         BOOST_FOREACH(CTxDestination address, grouping)\n         {\n-            Array addressInfo;\n+            UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n@@ -967,7 +967,7 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n-    Array subtractFeeFromAmount;\n+    UniValue subtractFeeFromAmount(UniValue::VARR);\n     if (params.size() > 4)\n         subtractFeeFromAmount = params[4].get_array();\n \n@@ -1138,7 +1138,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     }\n \n     // Reply\n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n     map<string, tallyitem> mapAccountTally;\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n@@ -1167,14 +1167,14 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         }\n         else\n         {\n-            Object obj;\n+            UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n             obj.push_back(Pair(\"address\",       address.ToString()));\n             obj.push_back(Pair(\"account\",       strAccount));\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n-            Array transactions;\n+            UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n                 BOOST_FOREACH(const uint256& item, (*it).second.txids)\n@@ -1193,7 +1193,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         {\n             CAmount nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n-            Object obj;\n+            UniValue obj(UniValue::VOBJ);\n             if((*it).second.fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n             obj.push_back(Pair(\"account\",       (*it).first));\n@@ -1303,7 +1303,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     {\n         BOOST_FOREACH(const COutputEntry& s, listSent)\n         {\n-            Object entry;\n+            UniValue entry(UniValue::VOBJ);\n             if(involvesWatchonly || (::IsMine(*pwalletMain, s.destination) & ISMINE_WATCH_ONLY))\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1328,7 +1328,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                 account = pwalletMain->mapAddressBook[r.destination].name;\n             if (fAllAccounts || (account == strAccount))\n             {\n-                Object entry;\n+                UniValue entry(UniValue::VOBJ);\n                 if(involvesWatchonly || (::IsMine(*pwalletMain, r.destination) & ISMINE_WATCH_ONLY))\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 entry.push_back(Pair(\"account\", account));\n@@ -1362,7 +1362,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n \n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n-        Object entry;\n+        UniValue entry(UniValue::VOBJ);\n         entry.push_back(Pair(\"account\", acentry.strAccount));\n         entry.push_back(Pair(\"category\", \"move\"));\n         entry.push_back(Pair(\"time\", acentry.nTime));\n@@ -1451,7 +1451,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     if (nFrom < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n \n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n \n     std::list<CAccountingEntry> acentries;\n     CWallet::TxItems txOrdered = pwalletMain->OrderedTxItems(acentries, strAccount);\n@@ -1488,6 +1488,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     std::reverse(arrTmp.begin(), arrTmp.end()); // Return oldest to newest\n \n     ret.clear();\n+    ret.setArray();\n     ret.push_backV(arrTmp);\n \n     return ret;\n@@ -1566,7 +1567,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n-    Object ret;\n+    UniValue ret(UniValue::VOBJ);\n     BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n@@ -1644,7 +1645,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n-    Array transactions;\n+    UniValue transactions(UniValue::VARR);\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n@@ -1657,7 +1658,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n-    Object ret;\n+    UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"transactions\", transactions));\n     ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n \n@@ -1715,7 +1716,7 @@ Value gettransaction(const Array& params, bool fHelp)\n         if(params[1].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    Object entry;\n+    UniValue entry(UniValue::VOBJ);\n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n@@ -1731,7 +1732,7 @@ Value gettransaction(const Array& params, bool fHelp)\n \n     WalletTxToJSON(wtx, entry);\n \n-    Array details;\n+    UniValue details(UniValue::VARR);\n     ListTransactions(wtx, \"*\", 0, false, details, filter);\n     entry.push_back(Pair(\"details\", details));\n \n@@ -2134,10 +2135,10 @@ Value listlockunspent(const Array& params, bool fHelp)\n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);\n \n-    Array ret;\n+    UniValue ret(UniValue::VARR);\n \n     BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n-        Object o;\n+        UniValue o(UniValue::VOBJ);\n \n         o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n         o.push_back(Pair(\"vout\", (int)outpt.n));\n@@ -2203,7 +2204,7 @@ Value getwalletinfo(const Array& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    Object obj;\n+    UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n@@ -2233,7 +2234,7 @@ Value resendwallettransactions(const Array& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime());\n-    Array result;\n+    UniValue result(UniValue::VARR);\n     BOOST_FOREACH(const uint256& txid, txids)\n     {\n         result.push_back(txid.ToString());\n@@ -2306,7 +2307,7 @@ Value listunspent(const Array& params, bool fHelp)\n         }\n     }\n \n-    Array results;\n+    UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -2326,7 +2327,7 @@ Value listunspent(const Array& params, bool fHelp)\n \n         CAmount nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n-        Object entry;\n+        UniValue entry(UniValue::VOBJ);\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n         entry.push_back(Pair(\"vout\", out.i));\n         CTxDestination address;"
      }
    ]
  },
  {
    "sha": "21c10de8c2de17a6357dbbcea7613b41f6ab8449",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWMxMGRlOGMyZGUxN2E2MzU3ZGJiY2VhNzYxM2I0MWY2YWI4NDQ5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T12:49:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:06Z"
      },
      "message": "special threatment for null,true,false because they are non valid json",
      "tree": {
        "sha": "3bb0e6e27fd438edc0f8906321a1544e3ddc8777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bb0e6e27fd438edc0f8906321a1544e3ddc8777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21c10de8c2de17a6357dbbcea7613b41f6ab8449",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21c10de8c2de17a6357dbbcea7613b41f6ab8449",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21c10de8c2de17a6357dbbcea7613b41f6ab8449",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21c10de8c2de17a6357dbbcea7613b41f6ab8449/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c7bee062437acbc078533fdcf8e53794031bf99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c7bee062437acbc078533fdcf8e53794031bf99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c7bee062437acbc078533fdcf8e53794031bf99"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bedf9ffbcb69bd593d4478b387b3a94e2b0cf33c",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21c10de8c2de17a6357dbbcea7613b41f6ab8449/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21c10de8c2de17a6357dbbcea7613b41f6ab8449/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=21c10de8c2de17a6357dbbcea7613b41f6ab8449",
        "patch": "@@ -11,6 +11,8 @@\n #include <set>\n #include <stdint.h>\n \n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+\n using namespace std;\n using namespace json_spirit;\n \n@@ -134,9 +136,19 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n \n         // parse string as JSON, insert bool/number/object/etc. value\n         else {\n+            //according to rfc4627 null, true, false are not valid json strings\n             Value jVal;\n-            if (!jVal.read(strVal))\n-                throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n+            if(strVal == \"null\")\n+                jVal.setNull();\n+            else if(strVal == \"true\")\n+                jVal.setBool(true);\n+            else if(strVal == \"false\")\n+                jVal.setBool(false);\n+            else\n+            {\n+                if (!jVal.read(strVal))\n+                    throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n+            }\n             params.push_back(jVal);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzViMmNmNjlhZTIwZjgzY2JkODk0YmIxOWQwZTExMTYyM2JhZTBm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T13:53:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:06Z"
      },
      "message": "univalue: add support for real, fix percision and make it json_spirit compatible\n\n- avoid breaking the API because of different number/percision handling",
      "tree": {
        "sha": "5adf63f805d4908ce5224c83bea99a763dfdf21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5adf63f805d4908ce5224c83bea99a763dfdf21d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21c10de8c2de17a6357dbbcea7613b41f6ab8449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21c10de8c2de17a6357dbbcea7613b41f6ab8449",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21c10de8c2de17a6357dbbcea7613b41f6ab8449"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 25,
      "deletions": 10
    },
    "files": [
      {
        "sha": "aa6d1eff59fc2d85f0f20b8b4d3ce93c21a9a15d",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "patch": "@@ -146,8 +146,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n                 jVal.setBool(false);\n             else\n             {\n-                if (!jVal.read(strVal))\n-                    throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n+                if (!jVal.read(strVal) || (jVal.isNull() && strVal.size() > 0))\n+                    if(!jVal.setNumStr(strVal) || jVal.isNull())\n+                        throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n             }\n             params.push_back(jVal);\n         }"
      },
      {
        "sha": "87186cac4409dc5d42c006ee4a24e9beb5f3b1b3",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "patch": "@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK(v7.isReal());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK(v.isReal());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"distance\"] = UniValue::VNUM;\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VREAL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n }\n \n static const char *json1 =\n-\"[1.1,{\\\"key1\\\":\\\"str\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n+\"[1.10000000,{\\\"key1\\\":\\\"str\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n \n BOOST_AUTO_TEST_CASE(univalue_readwrite)\n {\n@@ -257,7 +257,7 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     BOOST_CHECK(v.isArray());\n     BOOST_CHECK_EQUAL(v.size(), 2);\n \n-    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.1\");\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.10000000\");\n \n     UniValue obj = v[1];\n     BOOST_CHECK(obj.isObject());"
      },
      {
        "sha": "994d93113a89cbcc4c312850b8e450225b4b7130",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <stdint.h>\n #include <ctype.h>\n+#include <iomanip>\n #include <sstream>\n #include \"univalue.h\"\n \n@@ -78,9 +79,11 @@ bool UniValue::setFloat(double val)\n     string s;\n     ostringstream oss;\n \n-    oss << val;\n+    oss << std::setprecision(16) << val;\n \n-    return setNumStr(oss.str());\n+    bool ret = setNumStr(oss.str());\n+    typ = VREAL;\n+    return ret;\n }\n \n bool UniValue::setStr(const string& val_)\n@@ -203,6 +206,7 @@ const char *uvTypeName(UniValue::VType t)\n     case UniValue::VARR: return \"array\";\n     case UniValue::VSTR: return \"string\";\n     case UniValue::VNUM: return \"number\";\n+    case UniValue::VREAL: return \"number\";\n     }\n \n     // not reached"
      },
      {
        "sha": "efcf202bdd409a108ea5f8c91313dfc368f5ca49",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "patch": "@@ -17,7 +17,7 @@\n \n class UniValue {\n public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VREAL, VBOOL, };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -76,6 +76,7 @@ class UniValue {\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n+    bool isReal() const { return (typ == VREAL); }\n     bool isArray() const { return (typ == VARR); }\n     bool isObject() const { return (typ == VOBJ); }\n "
      },
      {
        "sha": "d360c253b030632c8a5602ff929d090d2d126264",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "patch": "@@ -3,6 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <ctype.h>\n+#include <iomanip>\n+#include <sstream>\n #include <stdio.h>\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n@@ -59,6 +61,13 @@ string UniValue::write(unsigned int prettyIndent,\n     case VSTR:\n         s += \"\\\"\" + json_escape(val) + \"\\\"\";\n         break;\n+    case VREAL:\n+        {\n+            std::stringstream ss;\n+            ss << std::showpoint << std::fixed << std::setprecision(8) << get_real();\n+            s += ss.str();\n+        }\n+        break;\n     case VNUM:\n         s += val;\n         break;"
      }
    ]
  },
  {
    "sha": "e04d9c25cf96edaf5b70baec6a21ceca624deea6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDRkOWMyNWNmOTZlZGFmNWI3MGJhZWM2YTIxY2VjYTYyNGRlZWE2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T13:54:11Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:06Z"
      },
      "message": "univalue: correct bool support",
      "tree": {
        "sha": "a32ba88e126ecbd2385e00c4ada7163561638f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a32ba88e126ecbd2385e00c4ada7163561638f70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e04d9c25cf96edaf5b70baec6a21ceca624deea6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04d9c25cf96edaf5b70baec6a21ceca624deea6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e04d9c25cf96edaf5b70baec6a21ceca624deea6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04d9c25cf96edaf5b70baec6a21ceca624deea6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c5b2cf69ae20f83cbd894bb19d0e111623bae0f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c37a3829fc8e252fc1f4dbcf44641ec45fdfb681",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04d9c25cf96edaf5b70baec6a21ceca624deea6/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04d9c25cf96edaf5b70baec6a21ceca624deea6/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=e04d9c25cf96edaf5b70baec6a21ceca624deea6",
        "patch": "@@ -30,6 +30,9 @@ class UniValue {\n     UniValue(int64_t val_) {\n         setInt(val_);\n     }\n+    UniValue(bool val_) {\n+        setBool(val_);\n+    }\n     UniValue(int val_) {\n         setInt(val_);\n     }\n@@ -192,6 +195,13 @@ static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64\n     return std::make_pair(key, uVal);\n }\n \n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n {\n     std::string key(cKey);"
      }
    ]
  },
  {
    "sha": "1f263c899ee0756ed9ed133f35bec18bdef20cdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjI2M2M4OTllZTA3NTZlZDllZDEzM2YzNWJlYzE4YmRlZjIwY2Rj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-10T13:55:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:06Z"
      },
      "message": "fix rpc unit test, plain numbers are not JSON compatible object\n\nUniValues read() does only read valid json.",
      "tree": {
        "sha": "60931f07baeb2ae73492cda1bf91dbe521feca21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60931f07baeb2ae73492cda1bf91dbe521feca21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f263c899ee0756ed9ed133f35bec18bdef20cdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f263c899ee0756ed9ed133f35bec18bdef20cdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f263c899ee0756ed9ed133f35bec18bdef20cdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f263c899ee0756ed9ed133f35bec18bdef20cdc/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e04d9c25cf96edaf5b70baec6a21ceca624deea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04d9c25cf96edaf5b70baec6a21ceca624deea6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e04d9c25cf96edaf5b70baec6a21ceca624deea6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "991763abaff6f0f84a313b3d8a71b4ebd6216aa6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f263c899ee0756ed9ed133f35bec18bdef20cdc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f263c899ee0756ed9ed133f35bec18bdef20cdc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1f263c899ee0756ed9ed133f35bec18bdef20cdc",
        "patch": "@@ -123,8 +123,8 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n \n static Value ValueFromString(const std::string &str)\n {\n-    Value value;\n-    BOOST_CHECK(value.read(str));\n+    UniValue value;\n+    BOOST_CHECK(value.setNumStr(str));\n     return value;\n }\n "
      }
    ]
  },
  {
    "sha": "3df0411ad9fd75fb27af53e44835d41f5480fe3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGYwNDExYWQ5ZmQ3NWZiMjdhZjUzZTQ0ODM1ZDQxZjU0ODBmZTNm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-13T19:29:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:06Z"
      },
      "message": "remove JSON Spirit UniValue wrapper",
      "tree": {
        "sha": "99e1a50e6b36e69c4429129d87567890b5878b3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99e1a50e6b36e69c4429129d87567890b5878b3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3df0411ad9fd75fb27af53e44835d41f5480fe3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df0411ad9fd75fb27af53e44835d41f5480fe3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3df0411ad9fd75fb27af53e44835d41f5480fe3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df0411ad9fd75fb27af53e44835d41f5480fe3f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f263c899ee0756ed9ed133f35bec18bdef20cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f263c899ee0756ed9ed133f35bec18bdef20cdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f263c899ee0756ed9ed133f35bec18bdef20cdc"
      }
    ],
    "stats": {
      "total": 497,
      "additions": 239,
      "deletions": 258
    },
    "files": [
      {
        "sha": "63332f9acd0b6091a42fe3d073ce18fc6a0a2bf1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -98,7 +98,6 @@ BITCOIN_CORE_H = \\\n   ecwrapper.h \\\n   hash.h \\\n   init.h \\\n-  json_spirit_wrapper.h \\\n   key.h \\\n   keystore.h \\\n   leveldbwrapper.h \\"
      },
      {
        "sha": "0cafd2b0b44cef787e96473a964dc69712f9b12c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -94,7 +94,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     return true;\n }\n \n-Object CallRPC(const string& strMethod, const Array& params)\n+UniValue CallRPC(const string& strMethod, const Array& params)\n {\n     if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n         throw runtime_error(strprintf(\n@@ -142,7 +142,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n         throw runtime_error(\"no response from server\");\n \n     // Parse reply\n-    Value valReply(UniValue::VSTR);\n+    UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(strReply))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const Object& reply = valReply.get_obj();\n@@ -170,14 +170,13 @@ int CommandLineRPC(int argc, char *argv[])\n \n         // Parameters default to strings\n         std::vector<std::string> strParams(&argv[2], &argv[argc]);\n-        Array params = RPCConvertValues(strMethod, strParams);\n+        UniValue params = RPCConvertValues(strMethod, strParams);\n \n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                // Execute\n-                Object reply = CallRPC(strMethod, params);\n+                const UniValue reply = CallRPC(strMethod, params);\n \n                 // Parse reply\n                 const Value& result = find_value(reply, \"result\");"
      },
      {
        "sha": "1962cf6431f01aff3fd72b1bad6ae51a2c701f41",
        "filename": "src/json_spirit_wrapper.h",
        "status": "removed",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f263c899ee0756ed9ed133f35bec18bdef20cdc/src/json_spirit_wrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f263c899ee0756ed9ed133f35bec18bdef20cdc/src/json_spirit_wrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json_spirit_wrapper.h?ref=1f263c899ee0756ed9ed133f35bec18bdef20cdc",
        "patch": "@@ -1,17 +0,0 @@\n-#ifndef __JSON_SPIRIT_WRAPPER_H__\n-#define __JSON_SPIRIT_WRAPPER_H__\n-\n-#include \"univalue/univalue.h\"\n-\n-namespace json_spirit {\n-\n-typedef UniValue Value;\n-typedef UniValue Array;\n-typedef UniValue Object;\n-typedef UniValue::VType Value_type;\n-\n-}\n-\n-#define find_value(val,key) (val[key])\n-\n-#endif // __JSON_SPIRIT_WRAPPER_H__"
      },
      {
        "sha": "3142b250366f901f9f0ee0a06d719a2ee776856f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -62,7 +62,7 @@ class RestErr\n };\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry);\n-extern Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n@@ -221,7 +221,7 @@ static bool rest_block(AcceptedConnection* conn,\n     }\n \n     case RF_JSON: {\n-        Object objBlock = blockToJSON(block, pblockindex, showTxDetails);\n+        UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n         string strJSON = objBlock.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n@@ -266,7 +266,7 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     switch (rf) {\n     case RF_JSON: {\n         UniValue rpcParams(UniValue::VARR);\n-        Value chainInfoObject = getblockchaininfo(rpcParams, false);\n+        UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;"
      },
      {
        "sha": "f20f9f994df370e90dc5104cbe1f4debf7654956",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -53,7 +53,7 @@ double GetDifficulty(const CBlockIndex* blockindex)\n }\n \n \n-Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n@@ -94,7 +94,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDe\n }\n \n \n-Value getblockcount(const Array& params, bool fHelp)\n+UniValue getblockcount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -111,7 +111,7 @@ Value getblockcount(const Array& params, bool fHelp)\n     return chainActive.Height();\n }\n \n-Value getbestblockhash(const Array& params, bool fHelp)\n+UniValue getbestblockhash(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -128,7 +128,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n-Value getdifficulty(const Array& params, bool fHelp)\n+UniValue getdifficulty(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -146,7 +146,7 @@ Value getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-Value getrawmempool(const Array& params, bool fHelp)\n+UniValue getrawmempool(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -231,7 +231,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n     }\n }\n \n-Value getblockhash(const Array& params, bool fHelp)\n+UniValue getblockhash(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -256,7 +256,7 @@ Value getblockhash(const Array& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-Value getblock(const Array& params, bool fHelp)\n+UniValue getblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -324,7 +324,7 @@ Value getblock(const Array& params, bool fHelp)\n     return blockToJSON(block, pblockindex);\n }\n \n-Value gettxoutsetinfo(const Array& params, bool fHelp)\n+UniValue gettxoutsetinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -364,7 +364,7 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettxout(const Array& params, bool fHelp)\n+UniValue gettxout(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error(\n@@ -444,7 +444,7 @@ Value gettxout(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value verifychain(const Array& params, bool fHelp)\n+UniValue verifychain(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -472,7 +472,7 @@ Value verifychain(const Array& params, bool fHelp)\n     return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n-Value getblockchaininfo(const Array& params, bool fHelp)\n+UniValue getblockchaininfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -530,7 +530,7 @@ struct CompareBlocksByHeight\n     }\n };\n \n-Value getchaintips(const Array& params, bool fHelp)\n+UniValue getchaintips(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -620,7 +620,7 @@ Value getchaintips(const Array& params, bool fHelp)\n     return res;\n }\n \n-Value getmempoolinfo(const Array& params, bool fHelp)\n+UniValue getmempoolinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -643,7 +643,7 @@ Value getmempoolinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value invalidateblock(const Array& params, bool fHelp)\n+UniValue invalidateblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -681,7 +681,7 @@ Value invalidateblock(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-Value reconsiderblock(const Array& params, bool fHelp)\n+UniValue reconsiderblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "ec098a17a7edc213b247171dff264a3d24591da7",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -122,7 +122,7 @@ CRPCConvertTable::CRPCConvertTable()\n static CRPCConvertTable rpcCvtTable;\n \n /** Convert strings to command-specific RPC representation */\n-Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n+UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n "
      },
      {
        "sha": "52270aec746c0dfadf241c573b9f25c9195ea0fd",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_RPCCLIENT_H\n #define BITCOIN_RPCCLIENT_H\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n-json_spirit::Array RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n+UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n \n #endif // BITCOIN_RPCCLIENT_H"
      },
      {
        "sha": "89e20526ed32dc84ea8387f5e43e2bbbcb0d4d1c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -34,7 +34,7 @@ using namespace std;\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-Value GetNetworkHashPS(int lookup, int height) {\n+UniValue GetNetworkHashPS(int lookup, int height) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n@@ -71,7 +71,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n     return (int64_t)(workDiff.getdouble() / timeDiff);\n }\n \n-Value getnetworkhashps(const Array& params, bool fHelp)\n+UniValue getnetworkhashps(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -94,7 +94,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n }\n \n #ifdef ENABLE_WALLET\n-Value getgenerate(const Array& params, bool fHelp)\n+UniValue getgenerate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -113,7 +113,7 @@ Value getgenerate(const Array& params, bool fHelp)\n     return GetBoolArg(\"-gen\", false);\n }\n \n-Value generate(const Array& params, bool fHelp)\n+UniValue generate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -172,7 +172,7 @@ Value generate(const Array& params, bool fHelp)\n }\n \n \n-Value setgenerate(const Array& params, bool fHelp)\n+UniValue setgenerate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -220,7 +220,7 @@ Value setgenerate(const Array& params, bool fHelp)\n #endif\n \n \n-Value getmininginfo(const Array& params, bool fHelp)\n+UniValue getmininginfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -266,7 +266,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-Value prioritisetransaction(const Array& params, bool fHelp)\n+UniValue prioritisetransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -298,7 +298,7 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n \n \n // NOTE: Assumes a conclusive result; if result is inconclusive, it must be handled by caller\n-static Value BIP22ValidationResult(const CValidationState& state)\n+static UniValue BIP22ValidationResult(const CValidationState& state)\n {\n     if (state.IsValid())\n         return Value::null;\n@@ -316,7 +316,7 @@ static Value BIP22ValidationResult(const CValidationState& state)\n     return \"valid?\";\n }\n \n-Value getblocktemplate(const Array& params, bool fHelp)\n+UniValue getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -381,7 +381,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     LOCK(cs_main);\n \n     std::string strMode = \"template\";\n-    Value lpval = NullUniValue;\n+    UniValue lpval = NullUniValue;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n@@ -605,7 +605,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     };\n };\n \n-Value submitblock(const Array& params, bool fHelp)\n+UniValue submitblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -666,7 +666,7 @@ Value submitblock(const Array& params, bool fHelp)\n     return BIP22ValidationResult(state);\n }\n \n-Value estimatefee(const Array& params, bool fHelp)\n+UniValue estimatefee(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -698,7 +698,7 @@ Value estimatefee(const Array& params, bool fHelp)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-Value estimatepriority(const Array& params, bool fHelp)\n+UniValue estimatepriority(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "15bbe90bc7c4eb3b092ad944a162f1eca73c7492",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -38,7 +38,7 @@ using namespace std;\n  *\n  * Or alternatively, create a specific query method for the information.\n  **/\n-Value getinfo(const Array& params, bool fHelp)\n+UniValue getinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -115,9 +115,9 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n public:\n     DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n \n-    Object operator()(const CNoDestination &dest) const { return Object(); }\n+    UniValue operator()(const CNoDestination &dest) const { return Object(); }\n \n-    Object operator()(const CKeyID &keyID) const {\n+    UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n@@ -129,7 +129,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n         return obj;\n     }\n \n-    Object operator()(const CScriptID &scriptID) const {\n+    UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"isscript\", true));\n         if (mine != ISMINE_NO) {\n@@ -153,7 +153,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n };\n #endif\n \n-Value validateaddress(const Array& params, bool fHelp)\n+UniValue validateaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -202,7 +202,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n         if (mine != ISMINE_NO) {\n             ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.pushKVs(detail);\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n@@ -276,7 +276,7 @@ CScript _createmultisig_redeemScript(const Array& params)\n     return result;\n }\n \n-Value createmultisig(const Array& params, bool fHelp)\n+UniValue createmultisig(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 2)\n     {\n@@ -319,7 +319,7 @@ Value createmultisig(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value verifymessage(const Array& params, bool fHelp)\n+UniValue verifymessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -373,7 +373,7 @@ Value verifymessage(const Array& params, bool fHelp)\n     return (pubkey.GetID() == keyID);\n }\n \n-Value setmocktime(const Array& params, bool fHelp)\n+UniValue setmocktime(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "17eda2245188ba8b31a55d199ef8a0f974b9e02f",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -21,7 +21,7 @@\n using namespace json_spirit;\n using namespace std;\n \n-Value getconnectioncount(const Array& params, bool fHelp)\n+UniValue getconnectioncount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -39,7 +39,7 @@ Value getconnectioncount(const Array& params, bool fHelp)\n     return (int)vNodes.size();\n }\n \n-Value ping(const Array& params, bool fHelp)\n+UniValue ping(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -75,7 +75,7 @@ static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-Value getpeerinfo(const Array& params, bool fHelp)\n+UniValue getpeerinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -165,7 +165,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value addnode(const Array& params, bool fHelp)\n+UniValue addnode(const Array& params, bool fHelp)\n {\n     string strCommand;\n     if (params.size() == 2)\n@@ -215,7 +215,7 @@ Value addnode(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-Value getaddednodeinfo(const Array& params, bool fHelp)\n+UniValue getaddednodeinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -332,7 +332,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value getnettotals(const Array& params, bool fHelp)\n+UniValue getnettotals(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n@@ -357,7 +357,7 @@ Value getnettotals(const Array& params, bool fHelp)\n     return obj;\n }\n \n-static Array GetNetworksInfo()\n+static UniValue GetNetworksInfo()\n {\n     UniValue networks(UniValue::VARR);\n     for(int n=0; n<NET_MAX; ++n)\n@@ -378,7 +378,7 @@ static Array GetNetworksInfo()\n     return networks;\n }\n \n-Value getnetworkinfo(const Array& params, bool fHelp)\n+UniValue getnetworkinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error("
      },
      {
        "sha": "953e476022cd9080cd3e69b1fff2134f25d8603a",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -256,7 +256,7 @@ int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n \n string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)\n {\n-    Object request(UniValue::VOBJ);\n+    UniValue request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n@@ -265,7 +265,7 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n \n Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n {\n-    Object reply(UniValue::VOBJ);\n+    UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n         reply.push_back(Pair(\"result\", NullUniValue));\n     else\n@@ -277,11 +277,11 @@ Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n \n string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n {\n-    Object reply = JSONRPCReplyObj(result, error, id);\n+    UniValue reply = JSONRPCReplyObj(result, error, id);\n     return reply.write() + \"\\n\";\n }\n \n-Object JSONRPCError(int code, const string& message)\n+UniValue JSONRPCError(int code, const string& message)\n {\n     UniValue error(UniValue::VOBJ);\n     error.push_back(Pair(\"code\", code));"
      },
      {
        "sha": "83d6123c56f4ca82ced50f5358225a3fb75375d0",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -158,9 +158,9 @@ int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto);\n int ReadHTTPHeaders(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet);\n int ReadHTTPMessage(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet,\n                     std::string& strMessageRet, int nProto, size_t max_size);\n-std::string JSONRPCRequest(const std::string& strMethod, const json_spirit::Array& params, const json_spirit::Value& id);\n-json_spirit::Object JSONRPCReplyObj(const json_spirit::Value& result, const json_spirit::Value& error, const json_spirit::Value& id);\n-std::string JSONRPCReply(const json_spirit::Value& result, const json_spirit::Value& error, const json_spirit::Value& id);\n-json_spirit::Object JSONRPCError(int code, const std::string& message);\n+std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n+std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n+UniValue JSONRPCError(int code, const std::string& message);\n \n #endif // BITCOIN_RPCPROTOCOL_H"
      },
      {
        "sha": "b4ddbfebf36ac5d8971d1a6b8447c17a60807b29",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -105,7 +105,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n-Value getrawtransaction(const Array& params, bool fHelp)\n+UniValue getrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -195,7 +195,7 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value gettxoutproof(const Array& params, bool fHelp)\n+UniValue gettxoutproof(const Array& params, bool fHelp)\n {\n     if (fHelp || (params.size() != 1 && params.size() != 2))\n         throw runtime_error(\n@@ -219,7 +219,7 @@ Value gettxoutproof(const Array& params, bool fHelp)\n \n     set<uint256> setTxids;\n     uint256 oneTxid;\n-    Array txids = params[0].get_array();\n+    UniValue txids = params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const Value& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n@@ -276,7 +276,7 @@ Value gettxoutproof(const Array& params, bool fHelp)\n     return strHex;\n }\n \n-Value verifytxoutproof(const Array& params, bool fHelp)\n+UniValue verifytxoutproof(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -309,7 +309,7 @@ Value verifytxoutproof(const Array& params, bool fHelp)\n     return res;\n }\n \n-Value createrawtransaction(const Array& params, bool fHelp)\n+UniValue createrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -345,8 +345,8 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     LOCK(cs_main);\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n \n-    Array inputs = params[0].get_array();\n-    Object sendTo = params[1].get_obj();\n+    UniValue inputs = params[0].get_array();\n+    UniValue sendTo = params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n@@ -388,7 +388,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     return EncodeHexTx(rawTx);\n }\n \n-Value decoderawtransaction(const Array& params, bool fHelp)\n+UniValue decoderawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -453,7 +453,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value decodescript(const Array& params, bool fHelp)\n+UniValue decodescript(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -507,7 +507,7 @@ static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::str\n     vErrorsRet.push_back(entry);\n }\n \n-Value signrawtransaction(const Array& params, bool fHelp)\n+UniValue signrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n@@ -617,9 +617,9 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     CBasicKeyStore tempKeystore;\n     if (params.size() > 2 && !params[2].isNull()) {\n         fGivenKeys = true;\n-        Array keys = params[2].get_array();\n+        UniValue keys = params[2].get_array();\n         for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            Value k = keys[idx];\n+            UniValue k = keys[idx];\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n@@ -637,13 +637,13 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     // Add previous txouts given in the RPC call:\n     if (params.size() > 1 && !params[1].isNull()) {\n-        Array prevTxs = params[1].get_array();\n+        UniValue prevTxs = params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n             const Value& p = prevTxs[idx];\n             if (!p.isObject())\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n \n-            Object prevOut = p.get_obj();\n+            UniValue prevOut = p.get_obj();\n \n             RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR));\n \n@@ -674,7 +674,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n                 RPCTypeCheckObj(prevOut, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n-                Value v = find_value(prevOut, \"redeemScript\");\n+                UniValue v = find_value(prevOut, \"redeemScript\");\n                 if (!v.isNull()) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n@@ -749,7 +749,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value sendrawtransaction(const Array& params, bool fHelp)\n+UniValue sendrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error("
      },
      {
        "sha": "cb746508b1bd176372f2c5817dd5505c2892c1a2",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -135,7 +135,7 @@ CAmount AmountFromValue(const Value& value)\n     return nAmount;\n }\n \n-Value ValueFromAmount(const CAmount& amount)\n+UniValue ValueFromAmount(const CAmount& amount)\n {\n     return (double)amount / (double)COIN;\n }\n@@ -196,7 +196,7 @@ string CRPCTable::help(string strCommand) const\n             continue;\n         try\n         {\n-            Array params;\n+            UniValue params;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n                 (*pfn)(params, true);\n@@ -229,7 +229,7 @@ string CRPCTable::help(string strCommand) const\n     return strRet;\n }\n \n-Value help(const Array& params, bool fHelp)\n+UniValue help(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -249,7 +249,7 @@ Value help(const Array& params, bool fHelp)\n }\n \n \n-Value stop(const Array& params, bool fHelp)\n+UniValue stop(const Array& params, bool fHelp)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n     if (fHelp || params.size() > 1)\n@@ -825,9 +825,9 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n class JSONRequest\n {\n public:\n-    Value id;\n+    UniValue id;\n     string strMethod;\n-    Array params;\n+    UniValue params;\n \n     JSONRequest() { id = NullUniValue; }\n     void parse(const Value& valRequest);\n@@ -844,7 +844,7 @@ void JSONRequest::parse(const Value& valRequest)\n     id = find_value(request, \"id\");\n \n     // Parse method\n-    Value valMethod = find_value(request, \"method\");\n+    UniValue valMethod = find_value(request, \"method\");\n     if (valMethod.isNull())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n     if (!valMethod.isStr())\n@@ -854,7 +854,7 @@ void JSONRequest::parse(const Value& valRequest)\n         LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n-    Value valParams = find_value(request, \"params\");\n+    UniValue valParams = find_value(request, \"params\");\n     if (valParams.isArray())\n         params = valParams.get_array();\n     else if (valParams.isNull())\n@@ -864,15 +864,15 @@ void JSONRequest::parse(const Value& valRequest)\n }\n \n \n-static Object JSONRPCExecOne(const Value& req)\n+static UniValue JSONRPCExecOne(const Value& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n     JSONRequest jreq;\n     try {\n         jreq.parse(req);\n \n-        Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n+        UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (const Object& objError)\n@@ -890,7 +890,7 @@ static Object JSONRPCExecOne(const Value& req)\n \n static string JSONRPCExecBatch(const Array& vReq)\n {\n-    Array ret;\n+    UniValue ret;\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n         ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n \n@@ -925,7 +925,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n     try\n     {\n         // Parse request\n-        Value valRequest;\n+        UniValue valRequest;\n         if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n@@ -942,7 +942,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n-            Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n+            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n@@ -1005,7 +1005,7 @@ void ServiceConnection(AcceptedConnection *conn)\n     }\n }\n \n-json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const\n+UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n     // Find method\n     const CRPCCommand *pcmd = tableRPC[strMethod];"
      },
      {
        "sha": "e2bc8c0955bc83d661ae70f5925f91842e1ae7cb",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 101,
        "deletions": 101,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -70,8 +70,8 @@ bool RPCIsInWarmup(std::string *statusOut);\n  * the right number of arguments are passed, just that any passed are the correct type.\n  * Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n  */\n-void RPCTypeCheck(const json_spirit::Array& params,\n-                  const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n+void RPCTypeCheck(const UniValue& params,\n+                  const std::list<UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n /*\n   Check for expected keys/value types in an Object.\n@@ -89,7 +89,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n //! Convert boost::asio address to CNetAddr\n extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n \n-typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n+typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n \n class CRPCCommand\n {\n@@ -115,11 +115,11 @@ class CRPCTable\n     /**\n      * Execute a method.\n      * @param method   Method to execute\n-     * @param params   Array of arguments (JSON objects)\n+     * @param params   UniValue Array of arguments (JSON objects)\n      * @returns Result of the call.\n-     * @throws an exception (json_spirit::Value) when an error happens.\n+     * @throws an exception (UniValue) when an error happens.\n      */\n-    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params) const;\n+    UniValue execute(const std::string &method, const UniValue &params) const;\n };\n \n extern const CRPCTable tableRPC;\n@@ -128,113 +128,113 @@ extern const CRPCTable tableRPC;\n  * Utilities: convert hex-encoded Values\n  * (throws error if not hex).\n  */\n-extern uint256 ParseHashV(const json_spirit::Value& v, std::string strName);\n-extern uint256 ParseHashO(const json_spirit::Object& o, std::string strKey);\n-extern std::vector<unsigned char> ParseHexV(const json_spirit::Value& v, std::string strName);\n-extern std::vector<unsigned char> ParseHexO(const json_spirit::Object& o, std::string strKey);\n+extern uint256 ParseHashV(const UniValue& v, std::string strName);\n+extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n+extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n+extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern CAmount AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(const CAmount& amount);\n+extern CAmount AmountFromValue(const UniValue& value);\n+extern UniValue ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpRequiringPassphrase();\n extern std::string HelpExampleCli(std::string methodname, std::string args);\n extern std::string HelpExampleRpc(std::string methodname, std::string args);\n \n extern void EnsureWalletIsUnlocked();\n \n-extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n-extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n-extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value importaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n-extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value generate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value prioritisetransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value estimatefee(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value estimatepriority(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getnewaddress(const json_spirit::Array& params, bool fHelp); // in rpcwallet.cpp\n-extern json_spirit::Value getaccountaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getrawchangeaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value setaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getaddressesbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendtoaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signmessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value verifymessage(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getbalance(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getunconfirmedbalance(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value movecmd(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendfrom(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendmany(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value addmultisigaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createmultisig(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listtransactions(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaddressgroupings(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value backupwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value keypoolrefill(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrase(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrasechange(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwalletinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblockchaininfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getnetworkinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value setmocktime(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value resendwallettransactions(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n-extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxoutproof(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value verifytxoutproof(const json_spirit::Array& params, bool fHelp);\n-\n-extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n-extern json_spirit::Value getbestblockhash(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getdifficulty(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value settxfee(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getmempoolinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getrawmempool(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblockhash(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getchaintips(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value invalidateblock(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value reconsiderblock(const json_spirit::Array& params, bool fHelp);\n+extern UniValue getconnectioncount(const UniValue& params, bool fHelp); // in rpcnet.cpp\n+extern UniValue getpeerinfo(const UniValue& params, bool fHelp);\n+extern UniValue ping(const UniValue& params, bool fHelp);\n+extern UniValue addnode(const UniValue& params, bool fHelp);\n+extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n+extern UniValue getnettotals(const UniValue& params, bool fHelp);\n+\n+extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n+extern UniValue importprivkey(const UniValue& params, bool fHelp);\n+extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n+extern UniValue importwallet(const UniValue& params, bool fHelp);\n+\n+extern UniValue getgenerate(const UniValue& params, bool fHelp); // in rpcmining.cpp\n+extern UniValue setgenerate(const UniValue& params, bool fHelp);\n+extern UniValue generate(const UniValue& params, bool fHelp);\n+extern UniValue getnetworkhashps(const UniValue& params, bool fHelp);\n+extern UniValue getmininginfo(const UniValue& params, bool fHelp);\n+extern UniValue prioritisetransaction(const UniValue& params, bool fHelp);\n+extern UniValue getblocktemplate(const UniValue& params, bool fHelp);\n+extern UniValue submitblock(const UniValue& params, bool fHelp);\n+extern UniValue estimatefee(const UniValue& params, bool fHelp);\n+extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n+\n+extern UniValue getnewaddress(const UniValue& params, bool fHelp); // in rpcwallet.cpp\n+extern UniValue getaccountaddress(const UniValue& params, bool fHelp);\n+extern UniValue getrawchangeaddress(const UniValue& params, bool fHelp);\n+extern UniValue setaccount(const UniValue& params, bool fHelp);\n+extern UniValue getaccount(const UniValue& params, bool fHelp);\n+extern UniValue getaddressesbyaccount(const UniValue& params, bool fHelp);\n+extern UniValue sendtoaddress(const UniValue& params, bool fHelp);\n+extern UniValue signmessage(const UniValue& params, bool fHelp);\n+extern UniValue verifymessage(const UniValue& params, bool fHelp);\n+extern UniValue getreceivedbyaddress(const UniValue& params, bool fHelp);\n+extern UniValue getreceivedbyaccount(const UniValue& params, bool fHelp);\n+extern UniValue getbalance(const UniValue& params, bool fHelp);\n+extern UniValue getunconfirmedbalance(const UniValue& params, bool fHelp);\n+extern UniValue movecmd(const UniValue& params, bool fHelp);\n+extern UniValue sendfrom(const UniValue& params, bool fHelp);\n+extern UniValue sendmany(const UniValue& params, bool fHelp);\n+extern UniValue addmultisigaddress(const UniValue& params, bool fHelp);\n+extern UniValue createmultisig(const UniValue& params, bool fHelp);\n+extern UniValue listreceivedbyaddress(const UniValue& params, bool fHelp);\n+extern UniValue listreceivedbyaccount(const UniValue& params, bool fHelp);\n+extern UniValue listtransactions(const UniValue& params, bool fHelp);\n+extern UniValue listaddressgroupings(const UniValue& params, bool fHelp);\n+extern UniValue listaccounts(const UniValue& params, bool fHelp);\n+extern UniValue listsinceblock(const UniValue& params, bool fHelp);\n+extern UniValue gettransaction(const UniValue& params, bool fHelp);\n+extern UniValue backupwallet(const UniValue& params, bool fHelp);\n+extern UniValue keypoolrefill(const UniValue& params, bool fHelp);\n+extern UniValue walletpassphrase(const UniValue& params, bool fHelp);\n+extern UniValue walletpassphrasechange(const UniValue& params, bool fHelp);\n+extern UniValue walletlock(const UniValue& params, bool fHelp);\n+extern UniValue encryptwallet(const UniValue& params, bool fHelp);\n+extern UniValue validateaddress(const UniValue& params, bool fHelp);\n+extern UniValue getinfo(const UniValue& params, bool fHelp);\n+extern UniValue getwalletinfo(const UniValue& params, bool fHelp);\n+extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n+extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);\n+extern UniValue setmocktime(const UniValue& params, bool fHelp);\n+extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n+\n+extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp\n+extern UniValue listunspent(const UniValue& params, bool fHelp);\n+extern UniValue lockunspent(const UniValue& params, bool fHelp);\n+extern UniValue listlockunspent(const UniValue& params, bool fHelp);\n+extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n+extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n+extern UniValue decodescript(const UniValue& params, bool fHelp);\n+extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n+extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n+extern UniValue gettxoutproof(const UniValue& params, bool fHelp);\n+extern UniValue verifytxoutproof(const UniValue& params, bool fHelp);\n+\n+extern UniValue getblockcount(const UniValue& params, bool fHelp); // in rpcblockchain.cpp\n+extern UniValue getbestblockhash(const UniValue& params, bool fHelp);\n+extern UniValue getdifficulty(const UniValue& params, bool fHelp);\n+extern UniValue settxfee(const UniValue& params, bool fHelp);\n+extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n+extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n+extern UniValue getblockhash(const UniValue& params, bool fHelp);\n+extern UniValue getblock(const UniValue& params, bool fHelp);\n+extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n+extern UniValue gettxout(const UniValue& params, bool fHelp);\n+extern UniValue verifychain(const UniValue& params, bool fHelp);\n+extern UniValue getchaintips(const UniValue& params, bool fHelp);\n+extern UniValue invalidateblock(const UniValue& params, bool fHelp);\n+extern UniValue reconsiderblock(const UniValue& params, bool fHelp);\n \n // in rest.cpp\n extern bool HTTPReq_REST(AcceptedConnection *conn,"
      },
      {
        "sha": "114bd79ea9ab02146a06f371978eb6242f4303e7",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -20,16 +20,16 @@\n #include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n-extern Array read_json(const std::string& jsondata);\n+extern UniValue read_json(const std::string& jsondata);\n \n BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n \n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n-    Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n+    UniValue tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n@@ -47,11 +47,11 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n // Goal: test low-level base58 decoding functionality\n BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n {\n-    Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n+    UniValue tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     std::vector<unsigned char> result;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n@@ -120,14 +120,14 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n-    Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n+    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n     SelectParams(CBaseChainParams::MAIN);\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const Object &metadata = test[2].get_obj();\n+        const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n         if (isTestnet)\n@@ -178,11 +178,11 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n-    Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n+    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const Object &metadata = test[2].get_obj();\n+        const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n         if (isTestnet)\n@@ -246,13 +246,13 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n-    Array tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n+    UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {"
      },
      {
        "sha": "a97c96be72f3170891ae47572befce4bf1949664",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -34,7 +34,7 @@ Value CallRPC(string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    Array params = RPCConvertValues(strMethod, vArgs);\n+    UniValue params = RPCConvertValues(strMethod, vArgs);\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {"
      },
      {
        "sha": "1a897fcd54a3bbe8c9c006d31e1e7bf319eb973b",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -17,7 +17,7 @@\n using namespace std;\n using namespace json_spirit;\n \n-extern Array createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n+extern UniValue createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n      *********************************/\n     BOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n     BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n-    Array arr = retValue.get_array();\n+    UniValue arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n }"
      },
      {
        "sha": "af11c0c9d9e885601726f925786485afb35d1e41",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -293,7 +293,7 @@ class TestBuilder\n         return *this;\n     }\n \n-    Array GetJSON()\n+    UniValue GetJSON()\n     {\n         DoPush();\n         UniValue array(UniValue::VARR);\n@@ -580,8 +580,8 @@ BOOST_AUTO_TEST_CASE(script_build)\n     std::set<std::string> tests_bad;\n \n     {\n-        Array json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n-        Array json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+        UniValue json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n+        UniValue json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const Value& tv = json_good[idx];\n@@ -634,10 +634,10 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n-    Array tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n+    UniValue tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n@@ -659,10 +659,10 @@ BOOST_AUTO_TEST_CASE(script_valid)\n BOOST_AUTO_TEST_CASE(script_invalid)\n {\n     // Scripts that should evaluate as invalid\n-    Array tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+    UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test.size() < 3) // Allow size > 2; extra stuff ignored (useful for comments)\n         {"
      },
      {
        "sha": "efdb4e80432dc09edd31bd9cf4c3e1012d7d7ce4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -19,7 +19,7 @@\n #include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n-extern Array read_json(const std::string& jsondata);\n+extern UniValue read_json(const std::string& jsondata);\n \n // Old script.cpp SignatureHash function\n uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -166,10 +166,10 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n // Goal: check that SignatureHash generates correct hash\n BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n-    Array tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n+    UniValue tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {"
      },
      {
        "sha": "afd2d74013cd300507fe523be4ce3024626d9094",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -30,7 +30,7 @@ using namespace std;\n using namespace json_spirit;\n \n // In script_tests.cpp\n-extern Array read_json(const std::string& jsondata);\n+extern UniValue read_json(const std::string& jsondata);\n \n static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n-    Array tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n+    UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n <<<<<<< HEAD\n     ScriptError err;\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n         if (test[0].type() == array_type)\n =======\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test[0].isArray())\n >>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n-            Array inputs = test[0].get_array();\n+            UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n \t        const Value& input = inputs[inpIdx];\n@@ -122,7 +122,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     fValid = false;\n                     break;\n                 }\n-                Array vinput = input.get_array();\n+                UniValue vinput = input.get_array();\n                 if (vinput.size() != 3)\n                 {\n                     fValid = false;\n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n-    Array tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n+    UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n <<<<<<< HEAD\n     ScriptError err;\n@@ -184,7 +184,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         if (test[0].type() == array_type)\n =======\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        Array test = tests[idx];\n+        UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test[0].isArray())\n >>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n-            Array inputs = test[0].get_array();\n+            UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n \t        const Value& input = inputs[inpIdx];\n@@ -205,7 +205,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     fValid = false;\n                     break;\n                 }\n-                Array vinput = input.get_array();\n+                UniValue vinput = input.get_array();\n                 if (vinput.size() != 3)\n                 {\n                     fValid = false;"
      },
      {
        "sha": "9d72c45baea7556bebdcf8778889803f4f794453",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -70,7 +70,7 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-Value importprivkey(const Array& params, bool fHelp)\n+UniValue importprivkey(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -144,7 +144,7 @@ Value importprivkey(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-Value importaddress(const Array& params, bool fHelp)\n+UniValue importaddress(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -217,7 +217,7 @@ Value importaddress(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-Value importwallet(const Array& params, bool fHelp)\n+UniValue importwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -321,7 +321,7 @@ Value importwallet(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-Value dumpprivkey(const Array& params, bool fHelp)\n+UniValue dumpprivkey(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -359,7 +359,7 @@ Value dumpprivkey(const Array& params, bool fHelp)\n }\n \n \n-Value dumpwallet(const Array& params, bool fHelp)\n+UniValue dumpwallet(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;"
      },
      {
        "sha": "d5d97604f48d44c5805701d94e0d62c786135f5d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -764,7 +764,7 @@ Value getbalance(const Array& params, bool fHelp)\n     return ValueFromAmount(nBalance);\n }\n \n-Value getunconfirmedbalance(const Array &params, bool fHelp)\n+Value getunconfirmedbalance(const UniValue &params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -957,7 +957,7 @@ Value sendmany(const Array& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = AccountFromValue(params[0]);\n-    Object sendTo = params[1].get_obj();\n+    UniValue sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n     if (params.size() > 2)\n         nMinDepth = params[2].get_int();\n@@ -1279,7 +1279,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     return ListReceived(params, true);\n }\n \n-static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n+static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     CBitcoinAddress addr;\n     if (addr.Set(dest))\n@@ -2071,7 +2071,7 @@ Value lockunspent(const Array& params, bool fHelp)\n         return true;\n     }\n \n-    Array outputs = params[1].get_array();\n+    UniValue outputs = params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];\n         if (!output.isObject())\n@@ -2295,7 +2295,7 @@ Value listunspent(const Array& params, bool fHelp)\n \n     set<CBitcoinAddress> setAddress;\n     if (params.size() > 2) {\n-        Array inputs = params[2].get_array();\n+        UniValue inputs = params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const Value& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());"
      }
    ]
  },
  {
    "sha": "9a8897f4ac992741e153d88b54bd2cde877c713d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTg4OTdmNGFjOTkyNzQxZTE1M2Q4OGI1NGJkMmNkZTg3N2M3MTNk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-18T12:02:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:21Z"
      },
      "message": "Remove JSON Spirit wrapper, remove JSON Spirit leftovers\n\n- implement find_value() function for UniValue\n- replace all Array/Value/Object types with UniValues, remove JSON Spirit to UniValue wrapper\n- remove JSON Spirit sources",
      "tree": {
        "sha": "e827981679708bae6bef1516d69efda3524b719f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e827981679708bae6bef1516d69efda3524b719f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8897f4ac992741e153d88b54bd2cde877c713d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8897f4ac992741e153d88b54bd2cde877c713d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8897f4ac992741e153d88b54bd2cde877c713d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8897f4ac992741e153d88b54bd2cde877c713d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3df0411ad9fd75fb27af53e44835d41f5480fe3f"
      }
    ],
    "stats": {
      "total": 2414,
      "additions": 212,
      "deletions": 2202
    },
    "files": [
      {
        "sha": "59618c4940d09ea853f1aface2e1790dbaf19ce8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -154,17 +154,6 @@ BITCOIN_CORE_H = \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h\n \n-JSON_H = \\\n-  json/json_spirit.h \\\n-  json/json_spirit_error_position.h \\\n-  json/json_spirit_reader.h \\\n-  json/json_spirit_reader_template.h \\\n-  json/json_spirit_stream_reader.h \\\n-  json/json_spirit_utils.h \\\n-  json/json_spirit_value.h \\\n-  json/json_spirit_writer.h \\\n-  json/json_spirit_writer_template.h\n-\n obj/build.h: FORCE\n \t@$(MKDIR_P) $(builddir)/obj\n \t@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \\\n@@ -200,7 +189,6 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   validationinterface.cpp \\\n-  $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n \n # wallet: shared between bitcoind and bitcoin-qt, but only linked"
      },
      {
        "sha": "d451720141761021a817e8053ed9a904b07ccb02",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -12,8 +12,9 @@\n \n #include <boost/filesystem/operations.hpp>\n \n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n-using namespace json_spirit;\n \n std::string HelpMessageCli()\n {\n@@ -94,7 +95,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     return true;\n }\n \n-UniValue CallRPC(const string& strMethod, const Array& params)\n+UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n     if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n         throw runtime_error(strprintf(\n@@ -145,7 +146,7 @@ UniValue CallRPC(const string& strMethod, const Array& params)\n     UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(strReply))\n         throw runtime_error(\"couldn't parse reply from server\");\n-    const Object& reply = valReply.get_obj();\n+    const UniValue& reply = valReply.get_obj();\n     if (reply.empty())\n         throw runtime_error(\"expected reply to have result, error and id properties\");\n \n@@ -179,13 +180,15 @@ int CommandLineRPC(int argc, char *argv[])\n                 const UniValue reply = CallRPC(strMethod, params);\n \n                 // Parse reply\n-                const Value& result = find_value(reply, \"result\");\n-                const Value& error  = find_value(reply, \"error\");\n+                const UniValue& result = find_value(reply, \"result\");\n+                const UniValue& error  = find_value(reply, \"error\");\n \n                 if (!error.isNull()) {\n                     // Error\n-                    strPrint = \"error: \" + error.write();\n                     int code = error[\"code\"].get_int();\n+                    if (fWait && code == RPC_IN_WARMUP)\n+                        throw CConnectionFailed(\"server in warmup\");\n+                    strPrint = \"error: \" + error.write();\n                     nRet = abs(code);\n                 } else {\n                     // Result"
      },
      {
        "sha": "797d5363b3036290b3ea5853355cf4fa3a5db328",
        "filename": "src/json/LICENSE.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/LICENSE.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/LICENSE.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/LICENSE.txt?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,24 +0,0 @@\n-The MIT License\n-\n-Copyright (c) 2007 - 2009 John W. Wilkinson\n-\n-Permission is hereby granted, free of charge, to any person\n-obtaining a copy of this software and associated documentation\n-files (the \"Software\"), to deal in the Software without\n-restriction, including without limitation the rights to use,\n-copy, modify, merge, publish, distribute, sublicense, and/or sell\n-copies of the Software, and to permit persons to whom the\n-Software is furnished to do so, subject to the following\n-conditions:\n-\n-The above copyright notice and this permission notice shall be\n-included in all copies or substantial portions of the Software.\n-\n-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n-OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n-HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n-WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n-FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n-OTHER DEALINGS IN THE SOFTWARE."
      },
      {
        "sha": "ac1879d5b33c9e2458fa70dd7f6e01bf8bbc8109",
        "filename": "src/json/json_spirit.h",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,18 +0,0 @@\n-#ifndef JSON_SPIRIT\n-#define JSON_SPIRIT\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include \"json_spirit_value.h\"\n-#include \"json_spirit_reader.h\"\n-#include \"json_spirit_writer.h\"\n-#include \"json_spirit_utils.h\"\n-\n-#endif"
      },
      {
        "sha": "17208507dfae141d79ee0010290eb0d76fe67232",
        "filename": "src/json/json_spirit_error_position.h",
        "status": "removed",
        "additions": 0,
        "deletions": 54,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_error_position.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_error_position.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_error_position.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,54 +0,0 @@\n-#ifndef JSON_SPIRIT_ERROR_POSITION\n-#define JSON_SPIRIT_ERROR_POSITION\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include <string>\n-\n-namespace json_spirit\n-{\n-    // An Error_position exception is thrown by the \"read_or_throw\" functions below on finding an error.\n-    // Note the \"read_or_throw\" functions are around 3 times slower than the standard functions \"read\" \n-    // functions that return a bool.\n-    //\n-    struct Error_position\n-    {\n-        Error_position();\n-        Error_position( unsigned int line, unsigned int column, const std::string& reason );\n-        bool operator==( const Error_position& lhs ) const;\n-        unsigned int line_;\n-        unsigned int column_;\n-        std::string reason_;\n-    };\n-\n-    inline Error_position::Error_position()\n-    :   line_( 0 )\n-    ,   column_( 0 )\n-    {\n-    }\n-\n-    inline Error_position::Error_position( unsigned int line, unsigned int column, const std::string& reason )\n-    :   line_( line )\n-    ,   column_( column )\n-    ,   reason_( reason )\n-    {\n-    }\n-\n-    inline bool Error_position::operator==( const Error_position& lhs ) const\n-    {\n-        if( this == &lhs ) return true;\n-\n-        return ( reason_ == lhs.reason_ ) &&\n-               ( line_   == lhs.line_ ) &&\n-               ( column_ == lhs.column_ ); \n-}\n-}\n-\n-#endif"
      },
      {
        "sha": "aa4f63722692f547a0d22db41b290d048850c430",
        "filename": "src/json/json_spirit_reader.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 137,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,137 +0,0 @@\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#include \"json_spirit_reader.h\"\n-#include \"json_spirit_reader_template.h\"\n-\n-using namespace json_spirit;\n-\n-bool json_spirit::read( const std::string& s, Value& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::string& s, Value& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::istream& is, Value& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::istream& is, Value& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-bool json_spirit::read( const std::wstring& s, wValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::wstring& s, wValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::wistream& is, wValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wistream& is, wValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#endif\n-\n-bool json_spirit::read( const std::string& s, mValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::string& s, mValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::istream& is, mValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::istream& is, mValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-bool json_spirit::read( const std::wstring& s, wmValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::wstring& s, wmValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::wistream& is, wmValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wistream& is, wmValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#endif"
      },
      {
        "sha": "96494a9789a35a9f10de563a710eea8259b25076",
        "filename": "src/json/json_spirit_reader.h",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,62 +0,0 @@\n-#ifndef JSON_SPIRIT_READER\n-#define JSON_SPIRIT_READER\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include \"json_spirit_value.h\"\n-#include \"json_spirit_error_position.h\"\n-#include <iostream>\n-\n-namespace json_spirit\n-{\n-    // functions to reads a JSON values\n-\n-    bool read( const std::string& s, Value& value );\n-    bool read( std::istream& is,     Value& value );\n-    bool read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );\n-\n-    void read_or_throw( const std::string& s, Value& value );  \n-    void read_or_throw( std::istream& is,     Value& value );\n-    void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    bool read( const std::wstring& s, wValue& value );\n-    bool read( std::wistream&  is,    wValue& value );\n-    bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );    \n-\n-    void read_or_throw( const std::wstring& s, wValue& value );\n-    void read_or_throw( std::wistream& is,     wValue& value );\n-    void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );\n-\n-#endif\n-\n-    bool read( const std::string& s, mValue& value );\n-    bool read( std::istream& is,     mValue& value );\n-    bool read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );\n-\n-    void read_or_throw( const std::string& s, mValue& value );  \n-    void read_or_throw( std::istream& is,     mValue& value );\n-    void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    bool read( const std::wstring& s, wmValue& value );\n-    bool read( std::wistream& is,     wmValue& value );\n-    bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );    \n-\n-    void read_or_throw( const std::wstring& s, wmValue& value );\n-    void read_or_throw( std::wistream& is,     wmValue& value );\n-    void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );\n-\n-#endif\n-}\n-\n-#endif"
      },
      {
        "sha": "47e3c1ca84389149570af3dcb0b22b6566e02113",
        "filename": "src/json/json_spirit_reader_template.h",
        "status": "removed",
        "additions": 0,
        "deletions": 612,
        "changes": 612,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader_template.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_reader_template.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader_template.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,612 +0,0 @@\n-#ifndef JSON_SPIRIT_READER_TEMPLATE\n-#define JSON_SPIRIT_READER_TEMPLATE\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#include \"json_spirit_value.h\"\n-#include \"json_spirit_error_position.h\"\n-\n-//#define BOOST_SPIRIT_THREADSAFE  // uncomment for multithreaded use, requires linking to boost.thread\n-\n-#include <boost/bind.hpp>\n-#include <boost/function.hpp>\n-#include <boost/version.hpp>\n-\n-#if BOOST_VERSION >= 103800\n-    #include <boost/spirit/include/classic_core.hpp>\n-    #include <boost/spirit/include/classic_confix.hpp>\n-    #include <boost/spirit/include/classic_escape_char.hpp>\n-    #include <boost/spirit/include/classic_multi_pass.hpp>\n-    #include <boost/spirit/include/classic_position_iterator.hpp>\n-    #define spirit_namespace boost::spirit::classic\n-#else\n-    #include <boost/spirit/core.hpp>\n-    #include <boost/spirit/utility/confix.hpp>\n-    #include <boost/spirit/utility/escape_char.hpp>\n-    #include <boost/spirit/iterator/multi_pass.hpp>\n-    #include <boost/spirit/iterator/position_iterator.hpp>\n-    #define spirit_namespace boost::spirit\n-#endif\n-\n-namespace json_spirit\n-{\n-    const spirit_namespace::int_parser < int64_t >  int64_p  = spirit_namespace::int_parser < int64_t  >();\n-    const spirit_namespace::uint_parser< uint64_t > uint64_p = spirit_namespace::uint_parser< uint64_t >();\n-\n-    template< class Iter_type >\n-    bool is_eq( Iter_type first, Iter_type last, const char* c_str )\n-    {\n-        for( Iter_type i = first; i != last; ++i, ++c_str )\n-        {\n-            if( *c_str == 0 ) return false;\n-\n-            if( *i != *c_str ) return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    template< class Char_type >\n-    Char_type hex_to_num( const Char_type c )\n-    {\n-        if( ( c >= '0' ) && ( c <= '9' ) ) return c - '0';\n-        if( ( c >= 'a' ) && ( c <= 'f' ) ) return c - 'a' + 10;\n-        if( ( c >= 'A' ) && ( c <= 'F' ) ) return c - 'A' + 10;\n-        return 0;\n-    }\n-\n-    template< class Char_type, class Iter_type >\n-    Char_type hex_str_to_char( Iter_type& begin )\n-    {\n-        const Char_type c1( *( ++begin ) );\n-        const Char_type c2( *( ++begin ) );\n-\n-        return ( hex_to_num( c1 ) << 4 ) + hex_to_num( c2 );\n-    }       \n-\n-    template< class Char_type, class Iter_type >\n-    Char_type unicode_str_to_char( Iter_type& begin )\n-    {\n-        const Char_type c1( *( ++begin ) );\n-        const Char_type c2( *( ++begin ) );\n-        const Char_type c3( *( ++begin ) );\n-        const Char_type c4( *( ++begin ) );\n-\n-        return ( hex_to_num( c1 ) << 12 ) + \n-               ( hex_to_num( c2 ) <<  8 ) + \n-               ( hex_to_num( c3 ) <<  4 ) + \n-               hex_to_num( c4 );\n-    }\n-\n-    template< class String_type >\n-    void append_esc_char_and_incr_iter( String_type& s, \n-                                        typename String_type::const_iterator& begin, \n-                                        typename String_type::const_iterator end )\n-    {\n-        typedef typename String_type::value_type Char_type;\n-             \n-        const Char_type c2( *begin );\n-\n-        switch( c2 )\n-        {\n-            case 't':  s += '\\t'; break;\n-            case 'b':  s += '\\b'; break;\n-            case 'f':  s += '\\f'; break;\n-            case 'n':  s += '\\n'; break;\n-            case 'r':  s += '\\r'; break;\n-            case '\\\\': s += '\\\\'; break;\n-            case '/':  s += '/';  break;\n-            case '\"':  s += '\"';  break;\n-            case 'x':  \n-            {\n-                if( end - begin >= 3 )  //  expecting \"xHH...\"\n-                {\n-                    s += hex_str_to_char< Char_type >( begin );  \n-                }\n-                break;\n-            }\n-            case 'u':  \n-            {\n-                if( end - begin >= 5 )  //  expecting \"uHHHH...\"\n-                {\n-                    s += unicode_str_to_char< Char_type >( begin );  \n-                }\n-                break;\n-            }\n-        }\n-    }\n-\n-    template< class String_type >\n-    String_type substitute_esc_chars( typename String_type::const_iterator begin, \n-                                   typename String_type::const_iterator end )\n-    {\n-        typedef typename String_type::const_iterator Iter_type;\n-\n-        if( end - begin < 2 ) return String_type( begin, end );\n-\n-        String_type result;\n-        \n-        result.reserve( end - begin );\n-\n-        const Iter_type end_minus_1( end - 1 );\n-\n-        Iter_type substr_start = begin;\n-        Iter_type i = begin;\n-\n-        for( ; i < end_minus_1; ++i )\n-        {\n-            if( *i == '\\\\' )\n-            {\n-                result.append( substr_start, i );\n-\n-                ++i;  // skip the '\\'\n-             \n-                append_esc_char_and_incr_iter( result, i, end );\n-\n-                substr_start = i + 1;\n-            }\n-        }\n-\n-        result.append( substr_start, end );\n-\n-        return result;\n-    }\n-\n-    template< class String_type >\n-    String_type get_str_( typename String_type::const_iterator begin, \n-                       typename String_type::const_iterator end )\n-    {\n-        assert( end - begin >= 2 );\n-\n-        typedef typename String_type::const_iterator Iter_type;\n-\n-        Iter_type str_without_quotes( ++begin );\n-        Iter_type end_without_quotes( --end );\n-\n-        return substitute_esc_chars< String_type >( str_without_quotes, end_without_quotes );\n-    }\n-\n-    inline std::string get_str( std::string::const_iterator begin, std::string::const_iterator end )\n-    {\n-        return get_str_< std::string >( begin, end );\n-    }\n-\n-    inline std::wstring get_str( std::wstring::const_iterator begin, std::wstring::const_iterator end )\n-    {\n-        return get_str_< std::wstring >( begin, end );\n-    }\n-    \n-    template< class String_type, class Iter_type >\n-    String_type get_str( Iter_type begin, Iter_type end )\n-    {\n-        const String_type tmp( begin, end );  // convert multipass iterators to string iterators\n-\n-        return get_str( tmp.begin(), tmp.end() );\n-    }\n-\n-    // this class's methods get called by the spirit parse resulting\n-    // in the creation of a JSON object or array\n-    //\n-    // NB Iter_type could be a std::string iterator, wstring iterator, a position iterator or a multipass iterator\n-    //\n-    template< class Value_type, class Iter_type >\n-    class Semantic_actions \n-    {\n-    public:\n-\n-        typedef typename Value_type::Config_type Config_type;\n-        typedef typename Config_type::String_type String_type;\n-        typedef typename Config_type::Object_type Object_type;\n-        typedef typename Config_type::Array_type Array_type;\n-        typedef typename String_type::value_type Char_type;\n-\n-        Semantic_actions( Value_type& value )\n-        :   value_( value )\n-        ,   current_p_( 0 )\n-        {\n-        }\n-\n-        void begin_obj( Char_type c )\n-        {\n-            assert( c == '{' );\n-\n-            begin_compound< Object_type >();\n-        }\n-\n-        void end_obj( Char_type c )\n-        {\n-            assert( c == '}' );\n-\n-            end_compound();\n-        }\n-\n-        void begin_array( Char_type c )\n-        {\n-            assert( c == '[' );\n-     \n-            begin_compound< Array_type >();\n-        }\n-\n-        void end_array( Char_type c )\n-        {\n-            assert( c == ']' );\n-\n-            end_compound();\n-        }\n-\n-        void new_name( Iter_type begin, Iter_type end )\n-        {\n-            assert( current_p_->type() == obj_type );\n-\n-            name_ = get_str< String_type >( begin, end );\n-        }\n-\n-        void new_str( Iter_type begin, Iter_type end )\n-        {\n-            add_to_current( get_str< String_type >( begin, end ) );\n-        }\n-\n-        void new_true( Iter_type begin, Iter_type end )\n-        {\n-            assert( is_eq( begin, end, \"true\" ) );\n-\n-            add_to_current( true );\n-        }\n-\n-        void new_false( Iter_type begin, Iter_type end )\n-        {\n-            assert( is_eq( begin, end, \"false\" ) );\n-\n-            add_to_current( false );\n-        }\n-\n-        void new_null( Iter_type begin, Iter_type end )\n-        {\n-            assert( is_eq( begin, end, \"null\" ) );\n-\n-            add_to_current( Value_type() );\n-        }\n-\n-        void new_int( int64_t i )\n-        {\n-            add_to_current( i );\n-        }\n-\n-        void new_uint64( uint64_t ui )\n-        {\n-            add_to_current( ui );\n-        }\n-\n-        void new_real( double d )\n-        {\n-            add_to_current( d );\n-        }\n-\n-    private:\n-\n-        Semantic_actions& operator=( const Semantic_actions& ); \n-                                    // to prevent \"assignment operator could not be generated\" warning\n-\n-        Value_type* add_first( const Value_type& value )\n-        {\n-            assert( current_p_ == 0 );\n-\n-            value_ = value;\n-            current_p_ = &value_;\n-            return current_p_;\n-        }\n-\n-        template< class Array_or_obj >\n-        void begin_compound()\n-        {\n-            if( current_p_ == 0 )\n-            {\n-                add_first( Array_or_obj() );\n-            }\n-            else\n-            {\n-                stack_.push_back( current_p_ );\n-\n-                Array_or_obj new_array_or_obj;   // avoid copy by building new array or object in place\n-\n-                current_p_ = add_to_current( new_array_or_obj );\n-            }\n-        }\n-\n-        void end_compound()\n-        {\n-            if( current_p_ != &value_ )\n-            {\n-                current_p_ = stack_.back();\n-                \n-                stack_.pop_back();\n-            }    \n-        }\n-\n-        Value_type* add_to_current( const Value_type& value )\n-        {\n-            if( current_p_ == 0 )\n-            {\n-                return add_first( value );\n-            }\n-            else if( current_p_->type() == array_type )\n-            {\n-                current_p_->get_array().push_back( value );\n-\n-                return &current_p_->get_array().back(); \n-            }\n-            \n-            assert( current_p_->type() == obj_type );\n-\n-            return &Config_type::add( current_p_->get_obj(), name_, value );\n-        }\n-\n-        Value_type& value_;             // this is the object or array that is being created\n-        Value_type* current_p_;         // the child object or array that is currently being constructed\n-\n-        std::vector< Value_type* > stack_;   // previous child objects and arrays\n-\n-        String_type name_;              // of current name/value pair\n-    };\n-\n-    template< typename Iter_type >\n-    void throw_error( spirit_namespace::position_iterator< Iter_type > i, const std::string& reason )\n-    {\n-        throw Error_position( i.get_position().line, i.get_position().column, reason );\n-    }\n-\n-    template< typename Iter_type >\n-    void throw_error( Iter_type i, const std::string& reason )\n-    {\n-       throw reason;\n-    }\n-\n-    // the spirit grammer \n-    //\n-    template< class Value_type, class Iter_type >\n-    class Json_grammer : public spirit_namespace::grammar< Json_grammer< Value_type, Iter_type > >\n-    {\n-    public:\n-\n-        typedef Semantic_actions< Value_type, Iter_type > Semantic_actions_t;\n-\n-        Json_grammer( Semantic_actions_t& semantic_actions )\n-        :   actions_( semantic_actions )\n-        {\n-        }\n-\n-        static void throw_not_value( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"not a value\" );\n-        }\n-\n-        static void throw_not_array( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"not an array\" );\n-        }\n-\n-        static void throw_not_object( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"not an object\" );\n-        }\n-\n-        static void throw_not_pair( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"not a pair\" );\n-        }\n-\n-        static void throw_not_colon( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"no colon in pair\" );\n-        }\n-\n-        static void throw_not_string( Iter_type begin, Iter_type end )\n-        {\n-    \t    throw_error( begin, \"not a string\" );\n-        }\n-\n-        template< typename ScannerT >\n-        class definition\n-        {\n-        public:\n-\n-            definition( const Json_grammer& self )\n-            {\n-                using namespace spirit_namespace;\n-\n-                typedef typename Value_type::String_type::value_type Char_type;\n-\n-                // first we convert the semantic action class methods to functors with the \n-                // parameter signature expected by spirit\n-\n-                typedef boost::function< void( Char_type )            > Char_action;\n-                typedef boost::function< void( Iter_type, Iter_type ) > Str_action;\n-                typedef boost::function< void( double )               > Real_action;\n-                typedef boost::function< void( int64_t )       > Int_action;\n-                typedef boost::function< void( uint64_t )      > Uint64_action;\n-\n-                Char_action   begin_obj  ( boost::bind( &Semantic_actions_t::begin_obj,   &self.actions_, _1 ) );\n-                Char_action   end_obj    ( boost::bind( &Semantic_actions_t::end_obj,     &self.actions_, _1 ) );\n-                Char_action   begin_array( boost::bind( &Semantic_actions_t::begin_array, &self.actions_, _1 ) );\n-                Char_action   end_array  ( boost::bind( &Semantic_actions_t::end_array,   &self.actions_, _1 ) );\n-                Str_action    new_name   ( boost::bind( &Semantic_actions_t::new_name,    &self.actions_, _1, _2 ) );\n-                Str_action    new_str    ( boost::bind( &Semantic_actions_t::new_str,     &self.actions_, _1, _2 ) );\n-                Str_action    new_true   ( boost::bind( &Semantic_actions_t::new_true,    &self.actions_, _1, _2 ) );\n-                Str_action    new_false  ( boost::bind( &Semantic_actions_t::new_false,   &self.actions_, _1, _2 ) );\n-                Str_action    new_null   ( boost::bind( &Semantic_actions_t::new_null,    &self.actions_, _1, _2 ) );\n-                Real_action   new_real   ( boost::bind( &Semantic_actions_t::new_real,    &self.actions_, _1 ) );\n-                Int_action    new_int    ( boost::bind( &Semantic_actions_t::new_int,     &self.actions_, _1 ) );\n-                Uint64_action new_uint64 ( boost::bind( &Semantic_actions_t::new_uint64,  &self.actions_, _1 ) );\n-\n-                // actual grammer\n-\n-                json_\n-                    = value_ | eps_p[ &throw_not_value ]\n-                    ;\n-\n-                value_\n-                    = string_[ new_str ] \n-                    | number_ \n-                    | object_ \n-                    | array_ \n-                    | str_p( \"true\" ) [ new_true  ] \n-                    | str_p( \"false\" )[ new_false ] \n-                    | str_p( \"null\" ) [ new_null  ]\n-                    ;\n-\n-                object_ \n-                    = ch_p('{')[ begin_obj ]\n-                    >> !members_\n-                    >> ( ch_p('}')[ end_obj ] | eps_p[ &throw_not_object ] )\n-                    ;\n-\n-                members_\n-                    = pair_ >> *( ',' >> pair_ )\n-                    ;\n-\n-                pair_\n-                    = string_[ new_name ]\n-                    >> ( ':' | eps_p[ &throw_not_colon ] )\n-                    >> ( value_ | eps_p[ &throw_not_value ] )\n-                    ;\n-\n-                array_\n-                    = ch_p('[')[ begin_array ]\n-                    >> !elements_\n-                    >> ( ch_p(']')[ end_array ] | eps_p[ &throw_not_array ] )\n-                    ;\n-\n-                elements_\n-                    = value_ >> *( ',' >> value_ )\n-                    ;\n-\n-                string_ \n-                    = lexeme_d // this causes white space inside a string to be retained\n-                      [\n-                          confix_p\n-                          ( \n-                              '\"', \n-                              *lex_escape_ch_p,\n-                              '\"'\n-                          ) \n-                      ]\n-                    ;\n-\n-                number_\n-                    = strict_real_p[ new_real   ] \n-                    | int64_p      [ new_int    ]\n-                    | uint64_p     [ new_uint64 ]\n-                    ;\n-            }\n-\n-            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;\n-\n-            const spirit_namespace::rule< ScannerT >& start() const { return json_; }\n-        };\n-\n-    private:\n-\n-        Json_grammer& operator=( const Json_grammer& ); // to prevent \"assignment operator could not be generated\" warning\n-\n-        Semantic_actions_t& actions_;\n-    };\n-\n-    template< class Iter_type, class Value_type >\n-    Iter_type read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )\n-    {\n-        Semantic_actions< Value_type, Iter_type > semantic_actions( value );\n-     \n-        const spirit_namespace::parse_info< Iter_type > info = \n-                            spirit_namespace::parse( begin, end, \n-                                                    Json_grammer< Value_type, Iter_type >( semantic_actions ) >> spirit_namespace::end_p,\n-                                                    spirit_namespace::space_p );\n-\n-        if( !info.hit )\n-        {\n-            throw_error( info.stop, \"error\" );\n-        }\n-\n-        return info.stop;\n-    }\n-\n-    template< class Iter_type, class Value_type >\n-    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )\n-    {\n-        typedef spirit_namespace::position_iterator< Iter_type > Posn_iter_t;\n-\n-        const Posn_iter_t posn_begin( begin, end );\n-        const Posn_iter_t posn_end( end, end );\n-     \n-        read_range_or_throw( posn_begin, posn_end, value );\n-    }\n-\n-    template< class Iter_type, class Value_type >\n-    bool read_range( Iter_type& begin, Iter_type end, Value_type& value )\n-    {\n-        try\n-        {\n-            begin = read_range_or_throw( begin, end, value );\n-\n-            return true;\n-        }\n-        catch( ... )\n-        {\n-            return false;\n-        }\n-    }\n-\n-    template< class String_type, class Value_type >\n-    void read_string_or_throw( const String_type& s, Value_type& value )\n-    {\n-        add_posn_iter_and_read_range_or_throw( s.begin(), s.end(), value );\n-    }\n-\n-    template< class String_type, class Value_type >\n-    bool read_string( const String_type& s, Value_type& value )\n-    {\n-        typename String_type::const_iterator begin = s.begin();\n-\n-        bool success = read_range( begin, s.end(), value );\n-        return success && begin == s.end();\n-    }\n-\n-    template< class Istream_type >\n-    struct Multi_pass_iters\n-    {\n-        typedef typename Istream_type::char_type Char_type;\n-        typedef std::istream_iterator< Char_type, Char_type > istream_iter;\n-        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;\n-\n-        Multi_pass_iters( Istream_type& is )\n-        {\n-            is.unsetf( std::ios::skipws );\n-\n-            begin_ = spirit_namespace::make_multi_pass( istream_iter( is ) );\n-            end_   = spirit_namespace::make_multi_pass( istream_iter() );\n-        }\n-\n-        Mp_iter begin_;\n-        Mp_iter end_;\n-    };\n-\n-    template< class Istream_type, class Value_type >\n-    bool read_stream( Istream_type& is, Value_type& value )\n-    {\n-        Multi_pass_iters< Istream_type > mp_iters( is );\n-\n-        return read_range( mp_iters.begin_, mp_iters.end_, value );\n-    }\n-\n-    template< class Istream_type, class Value_type >\n-    void read_stream_or_throw( Istream_type& is, Value_type& value )\n-    {\n-        const Multi_pass_iters< Istream_type > mp_iters( is );\n-\n-        add_posn_iter_and_read_range_or_throw( mp_iters.begin_, mp_iters.end_, value );\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "7e59c9adc25436c0283ea341c7138cf22823e5fb",
        "filename": "src/json/json_spirit_stream_reader.h",
        "status": "removed",
        "additions": 0,
        "deletions": 70,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_stream_reader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_stream_reader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_stream_reader.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,70 +0,0 @@\n-#ifndef JSON_SPIRIT_READ_STREAM\n-#define JSON_SPIRIT_READ_STREAM\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include \"json_spirit_reader_template.h\"\n-\n-namespace json_spirit\n-{\n-    // these classes allows you to read multiple top level contiguous values from a stream,\n-    // the normal stream read functions have a bug that prevent multiple top level values \n-    // from being read unless they are separated by spaces\n-\n-    template< class Istream_type, class Value_type >\n-    class Stream_reader\n-    {\n-    public:\n-\n-        Stream_reader( Istream_type& is )\n-        :   iters_( is )\n-        {\n-        }\n-\n-        bool read_next( Value_type& value )\n-        {\n-            return read_range( iters_.begin_, iters_.end_, value );\n-        }\n-\n-    private:\n-\n-        typedef Multi_pass_iters< Istream_type > Mp_iters;\n-\n-        Mp_iters iters_;\n-    };\n-\n-    template< class Istream_type, class Value_type >\n-    class Stream_reader_thrower\n-    {\n-    public:\n-\n-        Stream_reader_thrower( Istream_type& is )\n-        :   iters_( is )\n-        ,    posn_begin_( iters_.begin_, iters_.end_ )\n-        ,    posn_end_( iters_.end_, iters_.end_ )\n-        {\n-        }\n-\n-        void read_next( Value_type& value )\n-        {\n-            posn_begin_ = read_range_or_throw( posn_begin_, posn_end_, value );\n-        }\n-\n-    private:\n-\n-        typedef Multi_pass_iters< Istream_type > Mp_iters;\n-        typedef spirit_namespace::position_iterator< typename Mp_iters::Mp_iter > Posn_iter_t;\n-\n-        Mp_iters iters_;\n-        Posn_iter_t posn_begin_, posn_end_;\n-    };\n-}\n-\n-#endif"
      },
      {
        "sha": "553e3b96a4e95f960a307e5a9a174f3f1a055b97",
        "filename": "src/json/json_spirit_utils.h",
        "status": "removed",
        "additions": 0,
        "deletions": 61,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_utils.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,61 +0,0 @@\n-#ifndef JSON_SPIRIT_UTILS\n-#define JSON_SPIRIT_UTILS\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include \"json_spirit_value.h\"\n-#include <map>\n-\n-namespace json_spirit\n-{ \n-    template< class Obj_t, class Map_t >\n-    void obj_to_map( const Obj_t& obj, Map_t& mp_obj )\n-    {\n-        mp_obj.clear();\n-\n-        for( typename Obj_t::const_iterator i = obj.begin(); i != obj.end(); ++i )\n-        {\n-            mp_obj[ i->name_ ] = i->value_;\n-        }\n-    }\n-\n-    template< class Obj_t, class Map_t >\n-    void map_to_obj( const Map_t& mp_obj, Obj_t& obj )\n-    {\n-        obj.clear();\n-\n-        for( typename Map_t::const_iterator i = mp_obj.begin(); i != mp_obj.end(); ++i )\n-        {\n-            obj.push_back( typename Obj_t::value_type( i->first, i->second ) );\n-        }\n-    }\n-\n-    typedef std::map< std::string, Value > Mapped_obj;\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-    typedef std::map< std::wstring, wValue > wMapped_obj;\n-#endif\n-\n-    template< class Object_type, class String_type >\n-    const typename Object_type::value_type::Value_type& find_value( const Object_type& obj, const String_type& name )\n-    {\n-        for( typename Object_type::const_iterator i = obj.begin(); i != obj.end(); ++i )\n-        {\n-            if( i->name_ == name )\n-            {\n-                return i->value_;\n-            }\n-        }\n-\n-        return Object_type::value_type::Value_type::null;\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "44d2f06a01443627d1e7c7f15669301555ce894e",
        "filename": "src/json/json_spirit_value.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_value.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_value.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_value.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,8 +0,0 @@\n-/* Copyright (c) 2007 John W Wilkinson\n-\n-   This source code can be used for any purpose as long as\n-   this comment is retained. */\n-\n-// json spirit version 2.00\n-\n-#include \"json_spirit_value.h\""
      },
      {
        "sha": "13cc89210c6f643185e7690b50d3a1f0a18a37de",
        "filename": "src/json/json_spirit_value.h",
        "status": "removed",
        "additions": 0,
        "deletions": 534,
        "changes": 534,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_value.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_value.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_value.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,534 +0,0 @@\n-#ifndef JSON_SPIRIT_VALUE\n-#define JSON_SPIRIT_VALUE\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include <vector>\n-#include <map>\n-#include <string>\n-#include <cassert>\n-#include <sstream>\n-#include <stdexcept>\n-#include <stdint.h>\n-#include <boost/config.hpp> \n-#include <boost/shared_ptr.hpp> \n-#include <boost/variant.hpp> \n-\n-namespace json_spirit\n-{\n-    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };\n-    static const char* Value_type_name[]={\"obj\", \"array\", \"str\", \"bool\", \"int\", \"real\", \"null\"};\n-\n-    template< class Config >    // Config determines whether the value uses std::string or std::wstring and\n-                                // whether JSON Objects are represented as vectors or maps\n-    class Value_impl\n-    {\n-    public:\n-\n-        typedef Config Config_type;\n-        typedef typename Config::String_type String_type;\n-        typedef typename Config::Object_type Object;\n-        typedef typename Config::Array_type Array;\n-        typedef typename String_type::const_pointer Const_str_ptr;  // eg const char*\n-\n-        Value_impl();  // creates null value\n-        Value_impl( Const_str_ptr      value ); \n-        Value_impl( const String_type& value );\n-        Value_impl( const Object&      value );\n-        Value_impl( const Array&       value );\n-        Value_impl( bool               value );\n-        Value_impl( int                value );\n-        Value_impl( int64_t     value );\n-        Value_impl( uint64_t    value );\n-        Value_impl( double             value );\n-\n-        Value_impl( const Value_impl& other );\n-\n-        bool operator==( const Value_impl& lhs ) const;\n-\n-        Value_impl& operator=( const Value_impl& lhs );\n-\n-        Value_type type() const;\n-\n-        bool is_uint64() const;\n-        bool is_null() const;\n-\n-        const String_type& get_str()    const;\n-        const Object&      get_obj()    const;\n-        const Array&       get_array()  const;\n-        bool               get_bool()   const;\n-        int                get_int()    const;\n-        int64_t     get_int64()  const;\n-        uint64_t    get_uint64() const;\n-        double             get_real()   const;\n-\n-        Object& get_obj();\n-        Array&  get_array();\n-\n-        template< typename T > T get_value() const;  // example usage: int    i = value.get_value< int >();\n-                                                     // or             double d = value.get_value< double >();\n-\n-        static const Value_impl null;\n-\n-    private:\n-\n-        void check_type( const Value_type vtype ) const;\n-\n-        typedef boost::variant< String_type, \n-                                boost::recursive_wrapper< Object >, boost::recursive_wrapper< Array >, \n-                                bool, int64_t, double > Variant;\n-\n-        Value_type type_;\n-        Variant v_;\n-        bool is_uint64_;\n-    };\n-\n-    // vector objects\n-\n-    template< class Config >\n-    struct Pair_impl\n-    {\n-        typedef typename Config::String_type String_type;\n-        typedef typename Config::Value_type Value_type;\n-\n-        Pair_impl( const String_type& name, const Value_type& value );\n-\n-        bool operator==( const Pair_impl& lhs ) const;\n-\n-        String_type name_;\n-        Value_type value_;\n-    };\n-\n-    template< class String >\n-    struct Config_vector\n-    {\n-        typedef String String_type;\n-        typedef Value_impl< Config_vector > Value_type;\n-        typedef Pair_impl < Config_vector > Pair_type;\n-        typedef std::vector< Value_type > Array_type;\n-        typedef std::vector< Pair_type > Object_type;\n-\n-        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )\n-        {\n-            obj.push_back( Pair_type( name , value ) );\n-\n-            return obj.back().value_;\n-        }\n-                \n-        static String_type get_name( const Pair_type& pair )\n-        {\n-            return pair.name_;\n-        }\n-                \n-        static Value_type get_value( const Pair_type& pair )\n-        {\n-            return pair.value_;\n-        }\n-    };\n-\n-    // typedefs for ASCII\n-\n-    typedef Config_vector< std::string > Config;\n-\n-    typedef Config::Value_type  Value;\n-    typedef Config::Pair_type   Pair;\n-    typedef Config::Object_type Object;\n-    typedef Config::Array_type  Array;\n-\n-    // typedefs for Unicode\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    typedef Config_vector< std::wstring > wConfig;\n-\n-    typedef wConfig::Value_type  wValue;\n-    typedef wConfig::Pair_type   wPair;\n-    typedef wConfig::Object_type wObject;\n-    typedef wConfig::Array_type  wArray;\n-#endif\n-\n-    // map objects\n-\n-    template< class String >\n-    struct Config_map\n-    {\n-        typedef String String_type;\n-        typedef Value_impl< Config_map > Value_type;\n-        typedef std::vector< Value_type > Array_type;\n-        typedef std::map< String_type, Value_type > Object_type;\n-        typedef typename Object_type::value_type Pair_type;\n-\n-        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )\n-        {\n-            return obj[ name ] = value;\n-        }\n-                \n-        static String_type get_name( const Pair_type& pair )\n-        {\n-            return pair.first;\n-        }\n-                \n-        static Value_type get_value( const Pair_type& pair )\n-        {\n-            return pair.second;\n-        }\n-    };\n-\n-    // typedefs for ASCII\n-\n-    typedef Config_map< std::string > mConfig;\n-\n-    typedef mConfig::Value_type  mValue;\n-    typedef mConfig::Object_type mObject;\n-    typedef mConfig::Array_type  mArray;\n-\n-    // typedefs for Unicode\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    typedef Config_map< std::wstring > wmConfig;\n-\n-    typedef wmConfig::Value_type  wmValue;\n-    typedef wmConfig::Object_type wmObject;\n-    typedef wmConfig::Array_type  wmArray;\n-\n-#endif\n-\n-    ///////////////////////////////////////////////////////////////////////////////////////////////\n-    //\n-    // implementation\n-\n-    template< class Config >\n-    const Value_impl< Config > Value_impl< Config >::null;\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl()\n-    :   type_( null_type )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( const Const_str_ptr value )\n-    :   type_( str_type )\n-    ,   v_( String_type( value ) )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( const String_type& value )\n-    :   type_( str_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( const Object& value )\n-    :   type_( obj_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( const Array& value )\n-    :   type_( array_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( bool value )\n-    :   type_( bool_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( int value )\n-    :   type_( int_type )\n-    ,   v_( static_cast< int64_t >( value ) )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( int64_t value )\n-    :   type_( int_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( uint64_t value )\n-    :   type_( int_type )\n-    ,   v_( static_cast< int64_t >( value ) )\n-    ,   is_uint64_( true )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( double value )\n-    :   type_( real_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >::Value_impl( const Value_impl< Config >& other )\n-    :   type_( other.type() )\n-    ,   v_( other.v_ )\n-    ,   is_uint64_( other.is_uint64_ )\n-    {\n-    }\n-\n-    template< class Config >\n-    Value_impl< Config >& Value_impl< Config >::operator=( const Value_impl& lhs )\n-    {\n-        Value_impl tmp( lhs );\n-\n-        std::swap( type_, tmp.type_ );\n-        std::swap( v_, tmp.v_ );\n-        std::swap( is_uint64_, tmp.is_uint64_ );\n-\n-        return *this;\n-    }\n-\n-    template< class Config >\n-    bool Value_impl< Config >::operator==( const Value_impl& lhs ) const\n-    {\n-        if( this == &lhs ) return true;\n-\n-        if( type() != lhs.type() ) return false;\n-\n-        return v_ == lhs.v_; \n-    }\n-\n-    template< class Config >\n-    Value_type Value_impl< Config >::type() const\n-    {\n-        return type_;\n-    }\n-\n-    template< class Config >\n-    bool Value_impl< Config >::is_uint64() const\n-    {\n-        return is_uint64_;\n-    }\n-\n-    template< class Config >\n-    bool Value_impl< Config >::is_null() const\n-    {\n-        return type() == null_type;\n-    }\n-\n-    template< class Config >\n-    void Value_impl< Config >::check_type( const Value_type vtype ) const\n-    {\n-        if( type() != vtype ) \n-        {\n-            std::ostringstream os;\n-\n-            ///// Bitcoin: Tell the types by name instead of by number\n-            os << \"value is type \" << Value_type_name[type()] << \", expected \" << Value_type_name[vtype];\n-\n-            throw std::runtime_error( os.str() );\n-        }\n-    }\n-\n-    template< class Config >\n-    const typename Config::String_type& Value_impl< Config >::get_str() const\n-    {\n-        check_type(  str_type );\n-\n-        return *boost::get< String_type >( &v_ );\n-    }\n-\n-    template< class Config >\n-    const typename Value_impl< Config >::Object& Value_impl< Config >::get_obj() const\n-    {\n-        check_type( obj_type );\n-\n-        return *boost::get< Object >( &v_ );\n-    }\n-     \n-    template< class Config >\n-    const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const\n-    {\n-        check_type(  array_type );\n-\n-        return *boost::get< Array >( &v_ );\n-    }\n-     \n-    template< class Config >\n-    bool Value_impl< Config >::get_bool() const\n-    {\n-        check_type(  bool_type );\n-\n-        return boost::get< bool >( v_ );\n-    }\n-     \n-    template< class Config >\n-    int Value_impl< Config >::get_int() const\n-    {\n-        check_type(  int_type );\n-\n-        return static_cast< int >( get_int64() );\n-    }\n-    \n-    template< class Config >\n-    int64_t Value_impl< Config >::get_int64() const\n-    {\n-        check_type(  int_type );\n-\n-        return boost::get< int64_t >( v_ );\n-    }\n-    \n-    template< class Config >\n-    uint64_t Value_impl< Config >::get_uint64() const\n-    {\n-        check_type(  int_type );\n-\n-        return static_cast< uint64_t >( get_int64() );\n-    }\n-\n-    template< class Config >\n-    double Value_impl< Config >::get_real() const\n-    {\n-        if( type() == int_type )\n-        {\n-            return is_uint64() ? static_cast< double >( get_uint64() )\n-                               : static_cast< double >( get_int64() );\n-        }\n-\n-        check_type(  real_type );\n-\n-        return boost::get< double >( v_ );\n-    }\n-\n-    template< class Config >\n-    typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()\n-    {\n-        check_type(  obj_type );\n-\n-        return *boost::get< Object >( &v_ );\n-    }\n-\n-    template< class Config >\n-    typename Value_impl< Config >::Array& Value_impl< Config >::get_array()\n-    {\n-        check_type(  array_type );\n-\n-        return *boost::get< Array >( &v_ );\n-    }\n-\n-    template< class Config >\n-    Pair_impl< Config >::Pair_impl( const String_type& name, const Value_type& value )\n-    :   name_( name )\n-    ,   value_( value )\n-    {\n-    }\n-\n-    template< class Config >\n-    bool Pair_impl< Config >::operator==( const Pair_impl< Config >& lhs ) const\n-    {\n-        if( this == &lhs ) return true;\n-\n-        return ( name_ == lhs.name_ ) && ( value_ == lhs.value_ );\n-    }\n-\n-    // converts a C string, ie. 8 bit char array, to a string object\n-    //\n-    template < class String_type >\n-    String_type to_str( const char* c_str )\n-    {\n-        String_type result;\n-\n-        for( const char* p = c_str; *p != 0; ++p )\n-        {\n-            result += *p;\n-        }\n-\n-        return result;\n-    }\n-\n-    //\n-\n-    namespace internal_\n-    {\n-        template< typename T >\n-        struct Type_to_type\n-        {\n-        };\n-\n-        template< class Value > \n-        int get_value( const Value& value, Type_to_type< int > )\n-        {\n-            return value.get_int();\n-        }\n-       \n-        template< class Value > \n-        int64_t get_value( const Value& value, Type_to_type< int64_t > )\n-        {\n-            return value.get_int64();\n-        }\n-       \n-        template< class Value > \n-        uint64_t get_value( const Value& value, Type_to_type< uint64_t > )\n-        {\n-            return value.get_uint64();\n-        }\n-       \n-        template< class Value > \n-        double get_value( const Value& value, Type_to_type< double > )\n-        {\n-            return value.get_real();\n-        }\n-       \n-        template< class Value > \n-        typename Value::String_type get_value( const Value& value, Type_to_type< typename Value::String_type > )\n-        {\n-            return value.get_str();\n-        }\n-       \n-        template< class Value > \n-        typename Value::Array get_value( const Value& value, Type_to_type< typename Value::Array > )\n-        {\n-            return value.get_array();\n-        }\n-       \n-        template< class Value > \n-        typename Value::Object get_value( const Value& value, Type_to_type< typename Value::Object > )\n-        {\n-            return value.get_obj();\n-        }\n-       \n-        template< class Value > \n-        bool get_value( const Value& value, Type_to_type< bool > )\n-        {\n-            return value.get_bool();\n-        }\n-    }\n-\n-    template< class Config >\n-    template< typename T > \n-    T Value_impl< Config >::get_value() const\n-    {\n-        return internal_::get_value( *this, internal_::Type_to_type< T >() );\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "d24a632cf3f599097a1e1d688b7273afb2c010c4",
        "filename": "src/json/json_spirit_writer.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 95,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer.cpp?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,95 +0,0 @@\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#include \"json_spirit_writer.h\"\n-#include \"json_spirit_writer_template.h\"\n-\n-void json_spirit::write( const Value& value, std::ostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const Value& value, std::ostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::string json_spirit::write( const Value& value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::string json_spirit::write_formatted( const Value& value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-void json_spirit::write( const wValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const wValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::wstring json_spirit::write( const wValue&  value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::wstring json_spirit::write_formatted( const wValue&  value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#endif\n-\n-void json_spirit::write( const mValue& value, std::ostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const mValue& value, std::ostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::string json_spirit::write( const mValue& value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::string json_spirit::write_formatted( const mValue& value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-void json_spirit::write( const wmValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const wmValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::wstring json_spirit::write( const wmValue&  value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::wstring json_spirit::write_formatted( const wmValue&  value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#endif"
      },
      {
        "sha": "52e14068e7d2ff72452f74eb74773d1fb11f364d",
        "filename": "src/json/json_spirit_writer.h",
        "status": "removed",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,50 +0,0 @@\n-#ifndef JSON_SPIRIT_WRITER\n-#define JSON_SPIRIT_WRITER\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n-# pragma once\n-#endif\n-\n-#include \"json_spirit_value.h\"\n-#include <iostream>\n-\n-namespace json_spirit\n-{\n-    // functions to convert JSON Values to text, \n-    // the \"formatted\" versions add whitespace to format the output nicely\n-\n-    void         write          ( const Value& value, std::ostream&  os );\n-    void         write_formatted( const Value& value, std::ostream&  os );\n-    std::string  write          ( const Value& value );\n-    std::string  write_formatted( const Value& value );\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    void         write          ( const wValue& value, std::wostream& os );\n-    void         write_formatted( const wValue& value, std::wostream& os );\n-    std::wstring write          ( const wValue& value );\n-    std::wstring write_formatted( const wValue& value );\n-\n-#endif\n-\n-    void         write          ( const mValue& value, std::ostream&  os );\n-    void         write_formatted( const mValue& value, std::ostream&  os );\n-    std::string  write          ( const mValue& value );\n-    std::string  write_formatted( const mValue& value );\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    void         write          ( const wmValue& value, std::wostream& os );\n-    void         write_formatted( const wmValue& value, std::wostream& os );\n-    std::wstring write          ( const wmValue& value );\n-    std::wstring write_formatted( const wmValue& value );\n-\n-#endif\n-}\n-\n-#endif"
      },
      {
        "sha": "6b4978a1ff2480e9274a62b364d9926e577c3fb9",
        "filename": "src/json/json_spirit_writer_template.h",
        "status": "removed",
        "additions": 0,
        "deletions": 249,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer_template.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3df0411ad9fd75fb27af53e44835d41f5480fe3f/src/json/json_spirit_writer_template.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer_template.h?ref=3df0411ad9fd75fb27af53e44835d41f5480fe3f",
        "patch": "@@ -1,249 +0,0 @@\n-#ifndef JSON_SPIRIT_WRITER_TEMPLATE\n-#define JSON_SPIRIT_WRITER_TEMPLATE\n-\n-//          Copyright John W. Wilkinson 2007 - 2009.\n-// Distributed under the MIT License, see accompanying file LICENSE.txt\n-\n-// json spirit version 4.03\n-\n-#include \"json_spirit_value.h\"\n-\n-#include <cassert>\n-#include <sstream>\n-#include <iomanip>\n-\n-namespace json_spirit\n-{\n-    inline char to_hex_char( unsigned int c )\n-    {\n-        assert( c <= 0xF );\n-\n-        const char ch = static_cast< char >( c );\n-\n-        if( ch < 10 ) return '0' + ch;\n-\n-        return 'A' - 10 + ch;\n-    }\n-\n-    template< class String_type >\n-    String_type non_printable_to_string( unsigned int c )\n-    {\n-        // Silence the warning: typedef \u2018Char_type\u2019 locally defined but not used [-Wunused-local-typedefs]\n-        // typedef typename String_type::value_type Char_type;\n-\n-        String_type result( 6, '\\\\' );\n-\n-        result[1] = 'u';\n-\n-        result[ 5 ] = to_hex_char( c & 0x000F ); c >>= 4;\n-        result[ 4 ] = to_hex_char( c & 0x000F ); c >>= 4;\n-        result[ 3 ] = to_hex_char( c & 0x000F ); c >>= 4;\n-        result[ 2 ] = to_hex_char( c & 0x000F );\n-\n-        return result;\n-    }\n-\n-    template< typename Char_type, class String_type >\n-    bool add_esc_char( Char_type c, String_type& s )\n-    {\n-        switch( c )\n-        {\n-            case '\"':  s += to_str< String_type >( \"\\\\\\\"\" ); return true;\n-            case '\\\\': s += to_str< String_type >( \"\\\\\\\\\" ); return true;\n-            case '\\b': s += to_str< String_type >( \"\\\\b\"  ); return true;\n-            case '\\f': s += to_str< String_type >( \"\\\\f\"  ); return true;\n-            case '\\n': s += to_str< String_type >( \"\\\\n\"  ); return true;\n-            case '\\r': s += to_str< String_type >( \"\\\\r\"  ); return true;\n-            case '\\t': s += to_str< String_type >( \"\\\\t\"  ); return true;\n-        }\n-\n-        return false;\n-    }\n-\n-    template< class String_type >\n-    String_type add_esc_chars( const String_type& s )\n-    {\n-        typedef typename String_type::const_iterator Iter_type;\n-        typedef typename String_type::value_type     Char_type;\n-\n-        String_type result;\n-\n-        const Iter_type end( s.end() );\n-\n-        for( Iter_type i = s.begin(); i != end; ++i )\n-        {\n-            const Char_type c( *i );\n-\n-            if( add_esc_char( c, result ) ) continue;\n-\n-            const wint_t unsigned_c( ( c >= 0 ) ? c : 256 + c );\n-\n-            if( iswprint( unsigned_c ) )\n-            {\n-                result += c;\n-            }\n-            else\n-            {\n-                result += non_printable_to_string< String_type >( unsigned_c );\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    // this class generates the JSON text,\n-    // it keeps track of the indentation level etc.\n-    //\n-    template< class Value_type, class Ostream_type >\n-    class Generator\n-    {\n-        typedef typename Value_type::Config_type Config_type;\n-        typedef typename Config_type::String_type String_type;\n-        typedef typename Config_type::Object_type Object_type;\n-        typedef typename Config_type::Array_type Array_type;\n-        typedef typename String_type::value_type Char_type;\n-        typedef typename Object_type::value_type Obj_member_type;\n-\n-    public:\n-\n-        Generator( const Value_type& value, Ostream_type& os, bool pretty )\n-        :   os_( os )\n-        ,   indentation_level_( 0 )\n-        ,   pretty_( pretty )\n-        {\n-            output( value );\n-        }\n-\n-    private:\n-\n-        void output( const Value_type& value )\n-        {\n-            switch( value.type() )\n-            {\n-                case obj_type:   output( value.get_obj() );   break;\n-                case array_type: output( value.get_array() ); break;\n-                case str_type:   output( value.get_str() );   break;\n-                case bool_type:  output( value.get_bool() );  break;\n-                case int_type:   output_int( value );         break;\n-\n-                /// Bitcoin: Added std::fixed and changed precision from 16 to 8\n-                case real_type:  os_ << std::showpoint << std::fixed << std::setprecision(8)\n-                                     << value.get_real();     break;\n-\n-                case null_type:  os_ << \"null\";               break;\n-                default: assert( false );\n-            }\n-        }\n-\n-        void output( const Object_type& obj )\n-        {\n-            output_array_or_obj( obj, '{', '}' );\n-        }\n-\n-        void output( const Array_type& arr )\n-        {\n-            output_array_or_obj( arr, '[', ']' );\n-        }\n-\n-        void output( const Obj_member_type& member )\n-        {\n-            output( Config_type::get_name( member ) ); space(); \n-            os_ << ':'; space(); \n-            output( Config_type::get_value( member ) );\n-        }\n-\n-        void output_int( const Value_type& value )\n-        {\n-            if( value.is_uint64() )\n-            {\n-                os_ << value.get_uint64();\n-            }\n-            else\n-            {\n-               os_ << value.get_int64();\n-            }\n-        }\n-\n-        void output( const String_type& s )\n-        {\n-            os_ << '\"' << add_esc_chars( s ) << '\"';\n-        }\n-\n-        void output( bool b )\n-        {\n-            os_ << to_str< String_type >( b ? \"true\" : \"false\" );\n-        }\n-\n-        template< class T >\n-        void output_array_or_obj( const T& t, Char_type start_char, Char_type end_char )\n-        {\n-            os_ << start_char; new_line();\n-\n-            ++indentation_level_;\n-            \n-            for( typename T::const_iterator i = t.begin(); i != t.end(); ++i )\n-            {\n-                indent(); output( *i );\n-\n-                typename T::const_iterator next = i;\n-\n-                if( ++next != t.end())\n-                {\n-                    os_ << ',';\n-                }\n-\n-                new_line();\n-            }\n-\n-            --indentation_level_;\n-\n-            indent(); os_ << end_char;\n-        }\n-        \n-        void indent()\n-        {\n-            if( !pretty_ ) return;\n-\n-            for( int i = 0; i < indentation_level_; ++i )\n-            { \n-                os_ << \"    \";\n-            }\n-        }\n-\n-        void space()\n-        {\n-            if( pretty_ ) os_ << ' ';\n-        }\n-\n-        void new_line()\n-        {\n-            if( pretty_ ) os_ << '\\n';\n-        }\n-\n-        Generator& operator=( const Generator& ); // to prevent \"assignment operator could not be generated\" warning\n-\n-        Ostream_type& os_;\n-        int indentation_level_;\n-        bool pretty_;\n-    };\n-\n-    template< class Value_type, class Ostream_type >\n-    void write_stream( const Value_type& value, Ostream_type& os, bool pretty )\n-    {\n-        Generator< Value_type, Ostream_type >( value, os, pretty );\n-    }\n-\n-    template< class Value_type >\n-    typename Value_type::String_type write_string( const Value_type& value, bool pretty )\n-    {\n-        typedef typename Value_type::String_type::value_type Char_type;\n-\n-        std::basic_ostringstream< Char_type > os;\n-\n-        write_stream( value, os, pretty );\n-\n-        return os.str();\n-    }\n-}\n-\n-#endif"
      },
      {
        "sha": "d7be531b2d85780f1043adc32d86e95aa39d4492",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -181,11 +181,7 @@ void RPCExecutor::request(const QString &command)\n \n         emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n-<<<<<<< HEAD\n-    catch (const json_spirit::Object& objError)\n-=======\n     catch (UniValue& objError)\n->>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n     {\n         try // Nice formatting for standard-format error\n         {"
      },
      {
        "sha": "1fce7dfc9c5f6a20cb6446abdea2458e43921d74",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -16,8 +16,9 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/dynamic_bitset.hpp>\n \n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n-using namespace json_spirit;\n \n static const int MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n@@ -61,9 +62,9 @@ class RestErr\n     string message;\n };\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry);\n+extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n-extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex);\n+extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n {"
      },
      {
        "sha": "e3f17b4ae7b6ba1b860bfc00c3a07377f312caea",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -13,13 +13,12 @@\n \n #include <stdint.h>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n-using namespace json_spirit;\n using namespace std;\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry);\n-void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex);\n+extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n+void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n \n double GetDifficulty(const CBlockIndex* blockindex)\n {\n@@ -94,7 +93,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n }\n \n \n-UniValue getblockcount(const Array& params, bool fHelp)\n+UniValue getblockcount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -111,7 +110,7 @@ UniValue getblockcount(const Array& params, bool fHelp)\n     return chainActive.Height();\n }\n \n-UniValue getbestblockhash(const Array& params, bool fHelp)\n+UniValue getbestblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -128,7 +127,7 @@ UniValue getbestblockhash(const Array& params, bool fHelp)\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n-UniValue getdifficulty(const Array& params, bool fHelp)\n+UniValue getdifficulty(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -146,7 +145,7 @@ UniValue getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-UniValue getrawmempool(const Array& params, bool fHelp)\n+UniValue getrawmempool(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -231,7 +230,7 @@ UniValue getrawmempool(const Array& params, bool fHelp)\n     }\n }\n \n-UniValue getblockhash(const Array& params, bool fHelp)\n+UniValue getblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -256,7 +255,7 @@ UniValue getblockhash(const Array& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblock(const Array& params, bool fHelp)\n+UniValue getblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -324,7 +323,7 @@ UniValue getblock(const Array& params, bool fHelp)\n     return blockToJSON(block, pblockindex);\n }\n \n-UniValue gettxoutsetinfo(const Array& params, bool fHelp)\n+UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -364,7 +363,7 @@ UniValue gettxoutsetinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettxout(const Array& params, bool fHelp)\n+UniValue gettxout(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error(\n@@ -444,7 +443,7 @@ UniValue gettxout(const Array& params, bool fHelp)\n     return ret;\n }\n \n-UniValue verifychain(const Array& params, bool fHelp)\n+UniValue verifychain(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -472,7 +471,7 @@ UniValue verifychain(const Array& params, bool fHelp)\n     return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n-UniValue getblockchaininfo(const Array& params, bool fHelp)\n+UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -530,7 +529,7 @@ struct CompareBlocksByHeight\n     }\n };\n \n-UniValue getchaintips(const Array& params, bool fHelp)\n+UniValue getchaintips(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -620,7 +619,7 @@ UniValue getchaintips(const Array& params, bool fHelp)\n     return res;\n }\n \n-UniValue getmempoolinfo(const Array& params, bool fHelp)\n+UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -643,7 +642,7 @@ UniValue getmempoolinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-UniValue invalidateblock(const Array& params, bool fHelp)\n+UniValue invalidateblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -681,7 +680,7 @@ UniValue invalidateblock(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue reconsiderblock(const Array& params, bool fHelp)\n+UniValue reconsiderblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "d175db09ee30fc5f9b5b3f018fdcda04630e64d3",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -12,9 +12,9 @@\n #include <stdint.h>\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include \"univalue/univalue.h\"\n \n using namespace std;\n-using namespace json_spirit;\n \n class CRPCConvertParam\n {\n@@ -137,7 +137,7 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n         // parse string as JSON, insert bool/number/object/etc. value\n         else {\n             //according to rfc4627 null, true, false are not valid json strings\n-            Value jVal;\n+            UniValue jVal;\n             if(strVal == \"null\")\n                 jVal.setNull();\n             else if(strVal == \"true\")"
      },
      {
        "sha": "76d90a3f7e5a48686207e79421a97a80ad6b49ee",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -24,9 +24,8 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n-using namespace json_spirit;\n using namespace std;\n \n /**\n@@ -71,7 +70,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     return (int64_t)(workDiff.getdouble() / timeDiff);\n }\n \n-UniValue getnetworkhashps(const Array& params, bool fHelp)\n+UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n@@ -94,7 +93,7 @@ UniValue getnetworkhashps(const Array& params, bool fHelp)\n }\n \n #ifdef ENABLE_WALLET\n-UniValue getgenerate(const Array& params, bool fHelp)\n+UniValue getgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -113,7 +112,7 @@ UniValue getgenerate(const Array& params, bool fHelp)\n     return GetBoolArg(\"-gen\", false);\n }\n \n-UniValue generate(const Array& params, bool fHelp)\n+UniValue generate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n@@ -172,7 +171,7 @@ UniValue generate(const Array& params, bool fHelp)\n }\n \n \n-UniValue setgenerate(const Array& params, bool fHelp)\n+UniValue setgenerate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -220,7 +219,7 @@ UniValue setgenerate(const Array& params, bool fHelp)\n #endif\n \n \n-UniValue getmininginfo(const Array& params, bool fHelp)\n+UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -266,7 +265,7 @@ UniValue getmininginfo(const Array& params, bool fHelp)\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-UniValue prioritisetransaction(const Array& params, bool fHelp)\n+UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -301,7 +300,7 @@ UniValue prioritisetransaction(const Array& params, bool fHelp)\n static UniValue BIP22ValidationResult(const CValidationState& state)\n {\n     if (state.IsValid())\n-        return Value::null;\n+        return NullUniValue;\n \n     std::string strRejectReason = state.GetRejectReason();\n     if (state.IsError())\n@@ -316,7 +315,7 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     return \"valid?\";\n }\n \n-UniValue getblocktemplate(const Array& params, bool fHelp)\n+UniValue getblocktemplate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -384,8 +383,8 @@ UniValue getblocktemplate(const Array& params, bool fHelp)\n     UniValue lpval = NullUniValue;\n     if (params.size() > 0)\n     {\n-        const Object& oparam = params[0].get_obj();\n-        const Value& modeval = find_value(oparam, \"mode\");\n+        const UniValue& oparam = params[0].get_obj();\n+        const UniValue& modeval = find_value(oparam, \"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n         else if (modeval.isNull())\n@@ -398,7 +397,7 @@ UniValue getblocktemplate(const Array& params, bool fHelp)\n \n         if (strMode == \"proposal\")\n         {\n-            const Value& dataval = find_value(oparam, \"data\");\n+            const UniValue& dataval = find_value(oparam, \"data\");\n             if (dataval.isStr())\n                 throw JSONRPCError(RPC_TYPE_ERROR, \"Missing data String key for proposal\");\n \n@@ -605,7 +604,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     };\n };\n \n-UniValue submitblock(const Array& params, bool fHelp)\n+UniValue submitblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -666,7 +665,7 @@ UniValue submitblock(const Array& params, bool fHelp)\n     return BIP22ValidationResult(state);\n }\n \n-UniValue estimatefee(const Array& params, bool fHelp)\n+UniValue estimatefee(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -698,7 +697,7 @@ UniValue estimatefee(const Array& params, bool fHelp)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-UniValue estimatepriority(const Array& params, bool fHelp)\n+UniValue estimatepriority(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "f5fc22aff1b93e0d1447af2a785119f812c95e45",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -20,9 +20,9 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json_spirit_wrapper.h\"\n \n-using namespace json_spirit;\n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n \n /**\n@@ -38,7 +38,7 @@ using namespace std;\n  *\n  * Or alternatively, create a specific query method for the information.\n  **/\n-UniValue getinfo(const Array& params, bool fHelp)\n+UniValue getinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -107,15 +107,15 @@ UniValue getinfo(const Array& params, bool fHelp)\n }\n \n #ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<Object>\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n private:\n     isminetype mine;\n \n public:\n     DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n \n-    UniValue operator()(const CNoDestination &dest) const { return Object(); }\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n@@ -153,7 +153,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n };\n #endif\n \n-UniValue validateaddress(const Array& params, bool fHelp)\n+UniValue validateaddress(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -215,10 +215,10 @@ UniValue validateaddress(const Array& params, bool fHelp)\n /**\n  * Used by addmultisigaddress / createmultisig:\n  */\n-CScript _createmultisig_redeemScript(const Array& params)\n+CScript _createmultisig_redeemScript(const UniValue& params)\n {\n     int nRequired = params[0].get_int();\n-    const Array& keys = params[1].get_array();\n+    const UniValue& keys = params[1].get_array();\n \n     // Gather public keys\n     if (nRequired < 1)\n@@ -276,7 +276,7 @@ CScript _createmultisig_redeemScript(const Array& params)\n     return result;\n }\n \n-UniValue createmultisig(const Array& params, bool fHelp)\n+UniValue createmultisig(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 2)\n     {\n@@ -319,7 +319,7 @@ UniValue createmultisig(const Array& params, bool fHelp)\n     return result;\n }\n \n-UniValue verifymessage(const Array& params, bool fHelp)\n+UniValue verifymessage(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n@@ -373,7 +373,7 @@ UniValue verifymessage(const Array& params, bool fHelp)\n     return (pubkey.GetID() == keyID);\n }\n \n-UniValue setmocktime(const Array& params, bool fHelp)\n+UniValue setmocktime(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error("
      },
      {
        "sha": "59253e72afbc0d73f0865fce6555c1cbb4a15798",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -16,12 +16,11 @@\n \n #include <boost/foreach.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n-using namespace json_spirit;\n using namespace std;\n \n-UniValue getconnectioncount(const Array& params, bool fHelp)\n+UniValue getconnectioncount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -39,7 +38,7 @@ UniValue getconnectioncount(const Array& params, bool fHelp)\n     return (int)vNodes.size();\n }\n \n-UniValue ping(const Array& params, bool fHelp)\n+UniValue ping(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -75,7 +74,7 @@ static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-UniValue getpeerinfo(const Array& params, bool fHelp)\n+UniValue getpeerinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -165,7 +164,7 @@ UniValue getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-UniValue addnode(const Array& params, bool fHelp)\n+UniValue addnode(const UniValue& params, bool fHelp)\n {\n     string strCommand;\n     if (params.size() == 2)\n@@ -215,7 +214,7 @@ UniValue addnode(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue getaddednodeinfo(const Array& params, bool fHelp)\n+UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -332,7 +331,7 @@ UniValue getaddednodeinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getnettotals(const Array& params, bool fHelp)\n+UniValue getnettotals(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n@@ -378,7 +377,7 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const Array& params, bool fHelp)\n+UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error("
      },
      {
        "sha": "090e5ea7f4b366f8989a97973b9c196e6784d741",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -23,10 +23,10 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n-#include \"json_spirit_wrapper.h\"\n+\n+#include \"univalue/univalue.h\"\n \n using namespace std;\n-using namespace json_spirit;\n \n //! Number of bytes to allocate and read at most at once in post data\n const size_t POST_READ_SIZE = 256 * 1024;\n@@ -254,7 +254,7 @@ int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n  * http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx\n  */\n \n-string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)\n+string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n@@ -263,7 +263,7 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n     return request.write() + \"\\n\";\n }\n \n-Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n+UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n@@ -275,7 +275,7 @@ Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n     return reply;\n }\n \n-string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n+string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply = JSONRPCReplyObj(result, error, id);\n     return reply.write() + \"\\n\";"
      },
      {
        "sha": "b9fa091955810276865bd4f65ba9e641edee3d3e",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -15,7 +15,7 @@\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n //! HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "20394fc2c1ed1eeef5f728130b9331204954a57d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -25,12 +25,12 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json_spirit_wrapper.h\"\n \n-using namespace json_spirit;\n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n \n-void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex)\n+void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex)\n {\n     txnouttype type;\n     vector<CTxDestination> addresses;\n@@ -54,7 +54,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeH\n     out.push_back(Pair(\"addresses\", a));\n }\n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n+void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n@@ -105,7 +105,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n-UniValue getrawtransaction(const Array& params, bool fHelp)\n+UniValue getrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n@@ -195,7 +195,7 @@ UniValue getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-UniValue gettxoutproof(const Array& params, bool fHelp)\n+UniValue gettxoutproof(const UniValue& params, bool fHelp)\n {\n     if (fHelp || (params.size() != 1 && params.size() != 2))\n         throw runtime_error(\n@@ -221,7 +221,7 @@ UniValue gettxoutproof(const Array& params, bool fHelp)\n     uint256 oneTxid;\n     UniValue txids = params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n-        const Value& txid = txids[idx];\n+        const UniValue& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid txid \")+txid.get_str());\n         uint256 hash(uint256S(txid.get_str()));\n@@ -276,7 +276,7 @@ UniValue gettxoutproof(const Array& params, bool fHelp)\n     return strHex;\n }\n \n-UniValue verifytxoutproof(const Array& params, bool fHelp)\n+UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -309,7 +309,7 @@ UniValue verifytxoutproof(const Array& params, bool fHelp)\n     return res;\n }\n \n-UniValue createrawtransaction(const Array& params, bool fHelp)\n+UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n@@ -351,12 +351,12 @@ UniValue createrawtransaction(const Array& params, bool fHelp)\n     CMutableTransaction rawTx;\n \n     for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n-        const Value& input = inputs[idx];\n-        const Object& o = input.get_obj();\n+        const UniValue& input = inputs[idx];\n+        const UniValue& o = input.get_obj();\n \n         uint256 txid = ParseHashO(o, \"txid\");\n \n-        const Value& vout_v = find_value(o, \"vout\");\n+        const UniValue& vout_v = find_value(o, \"vout\");\n         if (!vout_v.isNum())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n         int nOutput = vout_v.get_int();\n@@ -388,7 +388,7 @@ UniValue createrawtransaction(const Array& params, bool fHelp)\n     return EncodeHexTx(rawTx);\n }\n \n-UniValue decoderawtransaction(const Array& params, bool fHelp)\n+UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -453,7 +453,7 @@ UniValue decoderawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-UniValue decodescript(const Array& params, bool fHelp)\n+UniValue decodescript(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n@@ -496,7 +496,7 @@ UniValue decodescript(const Array& params, bool fHelp)\n }\n \n /** Pushes a JSON object for script verification or signing errors to vErrorsRet. */\n-static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::string& strMessage)\n+static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n     entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n@@ -507,7 +507,7 @@ static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::str\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue signrawtransaction(const Array& params, bool fHelp)\n+UniValue signrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n@@ -639,7 +639,7 @@ UniValue signrawtransaction(const Array& params, bool fHelp)\n     if (params.size() > 1 && !params[1].isNull()) {\n         UniValue prevTxs = params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n-            const Value& p = prevTxs[idx];\n+            const UniValue& p = prevTxs[idx];\n             if (!p.isObject())\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n \n@@ -749,7 +749,7 @@ UniValue signrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n-UniValue sendrawtransaction(const Array& params, bool fHelp)\n+UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error("
      },
      {
        "sha": "18e74e03cf10fc9788f602cf4ac0b6be7f529cba",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -28,10 +28,9 @@\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n using namespace boost::asio;\n-using namespace json_spirit;\n using namespace RPCServer;\n using namespace std;\n \n@@ -79,17 +78,17 @@ void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)\n     g_rpcSignals.PostCommand.connect(boost::bind(slot, _1));\n }\n \n-void RPCTypeCheck(const Array& params,\n-                  const list<Value_type>& typesExpected,\n+void RPCTypeCheck(const UniValue& params,\n+                  const list<UniValue::VType>& typesExpected,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    BOOST_FOREACH(Value_type t, typesExpected)\n+    BOOST_FOREACH(UniValue::VType t, typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n \n-        const Value& v = params[i];\n+        const UniValue& v = params[i];\n         if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n         {\n             string err = strprintf(\"Expected type %s, got %s\",\n@@ -104,9 +103,9 @@ void RPCTypeCheckObj(const UniValue& o,\n                   const map<string, UniValue::VType>& typesExpected,\n                   bool fAllowNull)\n {\n-    BOOST_FOREACH(const PAIRTYPE(string, Value_type)& t, typesExpected)\n+    BOOST_FOREACH(const PAIRTYPE(string, UniValue::VType)& t, typesExpected)\n     {\n-        const Value& v = find_value(o, t.first);\n+        const UniValue& v = find_value(o, t.first);\n         if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n@@ -124,7 +123,7 @@ static inline int64_t roundint64(double d)\n     return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-CAmount AmountFromValue(const Value& value)\n+CAmount AmountFromValue(const UniValue& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n@@ -140,7 +139,7 @@ UniValue ValueFromAmount(const CAmount& amount)\n     return (double)amount / (double)COIN;\n }\n \n-uint256 ParseHashV(const Value& v, string strName)\n+uint256 ParseHashV(const UniValue& v, string strName)\n {\n     string strHex;\n     if (v.isStr())\n@@ -151,11 +150,11 @@ uint256 ParseHashV(const Value& v, string strName)\n     result.SetHex(strHex);\n     return result;\n }\n-uint256 ParseHashO(const Object& o, string strKey)\n+uint256 ParseHashO(const UniValue& o, string strKey)\n {\n     return ParseHashV(find_value(o, strKey), strKey);\n }\n-vector<unsigned char> ParseHexV(const Value& v, string strName)\n+vector<unsigned char> ParseHexV(const UniValue& v, string strName)\n {\n     string strHex;\n     if (v.isStr())\n@@ -164,7 +163,7 @@ vector<unsigned char> ParseHexV(const Value& v, string strName)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n     return ParseHex(strHex);\n }\n-vector<unsigned char> ParseHexO(const Object& o, string strKey)\n+vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n {\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n@@ -229,7 +228,7 @@ string CRPCTable::help(string strCommand) const\n     return strRet;\n }\n \n-UniValue help(const Array& params, bool fHelp)\n+UniValue help(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n@@ -249,7 +248,7 @@ UniValue help(const Array& params, bool fHelp)\n }\n \n \n-UniValue stop(const Array& params, bool fHelp)\n+UniValue stop(const UniValue& params, bool fHelp)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n     if (fHelp || params.size() > 1)\n@@ -411,7 +410,7 @@ bool HTTPAuthorized(map<string, string>& mapHeaders)\n     return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n }\n \n-void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n+void ErrorReply(std::ostream& stream, const UniValue& objError, const UniValue& id)\n {\n     // Send error reply from json-rpc error object\n     int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n@@ -830,15 +829,15 @@ class JSONRequest\n     UniValue params;\n \n     JSONRequest() { id = NullUniValue; }\n-    void parse(const Value& valRequest);\n+    void parse(const UniValue& valRequest);\n };\n \n-void JSONRequest::parse(const Value& valRequest)\n+void JSONRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n     if (!valRequest.isObject())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n-    const Object& request = valRequest.get_obj();\n+    const UniValue& request = valRequest.get_obj();\n \n     // Parse id now so errors from here on will have the id\n     id = find_value(request, \"id\");\n@@ -858,13 +857,13 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valParams.isArray())\n         params = valParams.get_array();\n     else if (valParams.isNull())\n-        params = Array();\n+        params = UniValue(UniValue::VARR);\n     else\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n }\n \n \n-static UniValue JSONRPCExecOne(const Value& req)\n+static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n@@ -875,7 +874,7 @@ static UniValue JSONRPCExecOne(const Value& req)\n         UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n-    catch (const Object& objError)\n+    catch (const UniValue& objError)\n     {\n         rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n     }\n@@ -888,7 +887,7 @@ static UniValue JSONRPCExecOne(const Value& req)\n     return rpc_result;\n }\n \n-static string JSONRPCExecBatch(const Array& vReq)\n+static string JSONRPCExecBatch(const UniValue& vReq)\n {\n     UniValue ret;\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n@@ -955,7 +954,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n \n         conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, strReply.size()) << strReply << std::flush;\n     }\n-    catch (const Object& objError)\n+    catch (const UniValue& objError)\n     {\n         ErrorReply(conn->stream(), objError, jreq.id);\n         return false;"
      },
      {
        "sha": "3f623651ccb20c5acac6d0093e78bea77fd08aa3",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -16,7 +16,8 @@\n #include <string>\n \n #include <boost/function.hpp>\n-#include \"json_spirit_wrapper.h\"\n+\n+#include \"univalue/univalue.h\"\n \n class CRPCCommand;\n "
      },
      {
        "sha": "9e74f5f4274e893980e8a9bb4f3f6ca6e2bc88a2",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -17,9 +17,9 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json_spirit_wrapper.h\"\n \n-using namespace json_spirit;\n+#include \"univalue/univalue.h\"\n+\n extern UniValue read_json(const std::string& jsondata);\n \n BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)"
      },
      {
        "sha": "8dbe37762637cf0e02460c048bfa888f2542610f",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -13,10 +13,11 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n-using namespace json_spirit;\n \n-Array\n+UniValue\n createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n {\n     UniValue result(UniValue::VARR);\n@@ -28,7 +29,7 @@ createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)\n     return result;\n }\n \n-Value CallRPC(string args)\n+UniValue CallRPC(string args)\n {\n     vector<string> vArgs;\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n@@ -38,10 +39,10 @@ Value CallRPC(string args)\n \n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        Value result = (*method)(params, false);\n+        UniValue result = (*method)(params, false);\n         return result;\n     }\n-    catch (const Object& objError) {\n+    catch (const UniValue& objError) {\n         throw runtime_error(find_value(objError, \"message\").get_str());\n     }\n }\n@@ -52,7 +53,7 @@ BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {\n     // Test raw transaction API argument handling\n-    Value r;\n+    UniValue r;\n \n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"getrawtransaction not_hex\"), runtime_error);\n@@ -92,7 +93,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n \n BOOST_AUTO_TEST_CASE(rpc_rawsign)\n {\n-    Value r;\n+    UniValue r;\n     // input is a 1-of-2 multisig (so is output):\n     string prevout =\n       \"[{\\\"txid\\\":\\\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\\\",\"\n@@ -121,7 +122,7 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n }\n \n-static Value ValueFromString(const std::string &str)\n+static UniValue ValueFromString(const std::string &str)\n {\n     UniValue value;\n     BOOST_CHECK(value.setNumStr(str));"
      },
      {
        "sha": "a72b6561004aa680890b674f2529b3eaf8963762",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -14,11 +14,12 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n+#include \"univalue/univalue.h\"\n+\n using namespace std;\n-using namespace json_spirit;\n \n extern UniValue createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n-extern Value CallRPC(string args);\n+extern UniValue CallRPC(string args);\n \n extern CWallet* pwalletMain;\n \n@@ -35,7 +36,7 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n     // new, compressed:\n     const char address2Hex[] = \"0388c2037017c62240b6b72ac1a2a5f94da790596ebd06177c8572752922165cb4\";\n \n-    Value v;\n+    UniValue v;\n     CBitcoinAddress address;\n     BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n     address.SetString(v.get_str());\n@@ -66,13 +67,13 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n-    Value r;\n+    UniValue r;\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n     CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n-    Value retValue;\n+    UniValue retValue;\n     string strAccount = \"walletDemoAccount\";\n     string strPurpose = \"receive\";\n     BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */"
      },
      {
        "sha": "373342569955b10c82175a229d084d34c8b9d4cd",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -26,10 +26,10 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json_spirit_wrapper.h\"\n+\n+#include \"univalue/univalue.h\"\n \n using namespace std;\n-using namespace json_spirit;\n \n // Uncomment if you want to output updated JSON tests.\n // #define UPDATE_JSON_TESTS\n@@ -39,15 +39,15 @@ static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n unsigned int ParseScriptFlags(string strFlags);\n string FormatScriptFlags(unsigned int flags);\n \n-Array\n+UniValue\n read_json(const std::string& jsondata)\n {\n-    Value v;\n+    UniValue v;\n \n     if (!v.read(jsondata) || !v.isArray())\n     {\n         BOOST_ERROR(\"Parse error.\");\n-        return Array();\n+        return UniValue(UniValue::VARR);\n     }\n     return v.get_array();\n }\n@@ -584,11 +584,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n         UniValue json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n-            const Value& tv = json_good[idx];\n+            const UniValue& tv = json_good[idx];\n             tests_good.insert(tv.get_array().write());\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n-            const Value& tv = json_bad[idx];\n+            const UniValue& tv = json_bad[idx];\n             tests_bad.insert(tv.get_array().write());\n         }\n     }"
      },
      {
        "sha": "a0797d5f3f0d282211d319c1e132ab9e9c591a8b",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -16,9 +16,9 @@\n #include <iostream>\n \n #include <boost/test/unit_test.hpp>\n-#include \"json_spirit_wrapper.h\"\n \n-using namespace json_spirit;\n+#include \"univalue/univalue.h\"\n+\n extern UniValue read_json(const std::string& jsondata);\n \n // Old script.cpp SignatureHash function"
      },
      {
        "sha": "4cfdec12677385154470d49d86befd6ba22d28e5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 20,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -24,10 +24,9 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n using namespace std;\n-using namespace json_spirit;\n \n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n@@ -92,19 +91,11 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n-<<<<<<< HEAD\n     ScriptError err;\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n-        if (test[0].type() == array_type)\n-=======\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test[0].isArray())\n->>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n         {\n             if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n@@ -116,7 +107,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n-\t        const Value& input = inputs[inpIdx];\n+\t        const UniValue& input = inputs[inpIdx];\n                 if (!input.isArray())\n                 {\n                     fValid = false;\n@@ -175,19 +166,11 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n-<<<<<<< HEAD\n     ScriptError err;\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n-        if (test[0].type() == array_type)\n-=======\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n         if (test[0].isArray())\n->>>>>>> Convert tree to using univalue. Eliminate all json_spirit uses.\n         {\n             if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n@@ -199,7 +182,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             UniValue inputs = test[0].get_array();\n             bool fValid = true;\n \t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n-\t        const Value& input = inputs[inpIdx];\n+\t        const UniValue& input = inputs[inpIdx];\n                 if (!input.isArray())\n                 {\n                     fValid = false;"
      },
      {
        "sha": "e8fc51343368008ed8e5554a509db8baca75c7c0",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -213,3 +213,15 @@ const char *uvTypeName(UniValue::VType t)\n     return NULL;\n }\n \n+const UniValue& find_value( const UniValue& obj, const std::string& name)\n+{\n+    for (unsigned int i = 0; i < obj.keys.size(); i++)\n+    {\n+        if( obj.keys[i] == name )\n+        {\n+            return obj.values[i];\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "57a96abe26ad9c185c5eef44e527d415e4a2d805",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -161,6 +161,7 @@ class UniValue {\n         std::istringstream(getValStr()) >> ret;\n         return ret;\n     }\n+    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };\n \n //\n@@ -248,5 +249,8 @@ extern enum jtokentype getJsonToken(std::string& tokenVal,\n extern const char *uvTypeName(UniValue::VType t);\n \n extern const UniValue NullUniValue;\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name);\n+\n #endif // BITCOIN_UNIVALUE_UNIVALUE_H\n "
      },
      {
        "sha": "b682a42e23b95283e6709869d5b1865424c73c89",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -19,9 +19,8 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n-using namespace json_spirit;\n using namespace std;\n \n void EnsureWalletIsUnlocked();\n@@ -70,7 +69,7 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-UniValue importprivkey(const Array& params, bool fHelp)\n+UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -144,7 +143,7 @@ UniValue importprivkey(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importaddress(const Array& params, bool fHelp)\n+UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -217,7 +216,7 @@ UniValue importaddress(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importwallet(const Array& params, bool fHelp)\n+UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -321,7 +320,7 @@ UniValue importwallet(const Array& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue dumpprivkey(const Array& params, bool fHelp)\n+UniValue dumpprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -359,7 +358,7 @@ UniValue dumpprivkey(const Array& params, bool fHelp)\n }\n \n \n-UniValue dumpwallet(const Array& params, bool fHelp)\n+UniValue dumpwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;"
      },
      {
        "sha": "e44940993e10bbbf623f61b08c8eb04b7c4bbef0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 47,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8897f4ac992741e153d88b54bd2cde877c713d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8897f4ac992741e153d88b54bd2cde877c713d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9a8897f4ac992741e153d88b54bd2cde877c713d",
        "patch": "@@ -21,10 +21,9 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"json_spirit_wrapper.h\"\n+#include \"univalue/univalue.h\"\n \n using namespace std;\n-using namespace json_spirit;\n \n int64_t nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n@@ -54,7 +53,7 @@ void EnsureWalletIsUnlocked()\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n+void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.push_back(Pair(\"confirmations\", confirms));\n@@ -78,15 +77,15 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n-string AccountFromValue(const Value& value)\n+string AccountFromValue(const UniValue& value)\n {\n     string strAccount = value.get_str();\n     if (strAccount == \"*\")\n         throw JSONRPCError(RPC_WALLET_INVALID_ACCOUNT_NAME, \"Invalid account name\");\n     return strAccount;\n }\n \n-Value getnewaddress(const Array& params, bool fHelp)\n+UniValue getnewaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -165,7 +164,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     return CBitcoinAddress(account.vchPubKey.GetID());\n }\n \n-Value getaccountaddress(const Array& params, bool fHelp)\n+UniValue getaccountaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -190,14 +189,14 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n \n-    Value ret;\n+    UniValue ret(UniValue::VSTR);\n \n     ret = GetAccountAddress(strAccount).ToString();\n     return ret;\n }\n \n \n-Value getrawchangeaddress(const Array& params, bool fHelp)\n+UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -232,7 +231,7 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n }\n \n \n-Value setaccount(const Array& params, bool fHelp)\n+UniValue setaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -278,7 +277,7 @@ Value setaccount(const Array& params, bool fHelp)\n }\n \n \n-Value getaccount(const Array& params, bool fHelp)\n+UniValue getaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -310,7 +309,7 @@ Value getaccount(const Array& params, bool fHelp)\n }\n \n \n-Value getaddressesbyaccount(const Array& params, bool fHelp)\n+UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -378,7 +377,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n }\n \n-Value sendtoaddress(const Array& params, bool fHelp)\n+UniValue sendtoaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -434,7 +433,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-Value listaddressgroupings(const Array& params, bool fHelp)\n+UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -486,7 +485,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-Value signmessage(const Array& params, bool fHelp)\n+UniValue signmessage(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -542,7 +541,7 @@ Value signmessage(const Array& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-Value getreceivedbyaddress(const Array& params, bool fHelp)\n+UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -600,7 +599,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-Value getreceivedbyaccount(const Array& params, bool fHelp)\n+UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -689,7 +688,7 @@ CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminef\n }\n \n \n-Value getbalance(const Array& params, bool fHelp)\n+UniValue getbalance(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -764,7 +763,7 @@ Value getbalance(const Array& params, bool fHelp)\n     return ValueFromAmount(nBalance);\n }\n \n-Value getunconfirmedbalance(const UniValue &params, bool fHelp)\n+UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -780,7 +779,7 @@ Value getunconfirmedbalance(const UniValue &params, bool fHelp)\n }\n \n \n-Value movecmd(const Array& params, bool fHelp)\n+UniValue movecmd(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -850,7 +849,7 @@ Value movecmd(const Array& params, bool fHelp)\n }\n \n \n-Value sendfrom(const Array& params, bool fHelp)\n+UniValue sendfrom(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -913,7 +912,7 @@ Value sendfrom(const Array& params, bool fHelp)\n }\n \n \n-Value sendmany(const Array& params, bool fHelp)\n+UniValue sendmany(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -992,7 +991,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         bool fSubtractFeeFromAmount = false;\n         for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n-            const Value& addr = subtractFeeFromAmount[idx];\n+            const UniValue& addr = subtractFeeFromAmount[idx];\n             if (addr.get_str() == name_)\n                 fSubtractFeeFromAmount = true;\n         }\n@@ -1023,9 +1022,9 @@ Value sendmany(const Array& params, bool fHelp)\n }\n \n // Defined in rpcmisc.cpp\n-extern CScript _createmultisig_redeemScript(const Array& params);\n+extern CScript _createmultisig_redeemScript(const UniValue& params);\n \n-Value addmultisigaddress(const Array& params, bool fHelp)\n+UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1088,7 +1087,7 @@ struct tallyitem\n     }\n };\n \n-Value ListReceived(const Array& params, bool fByAccounts)\n+UniValue ListReceived(const UniValue& params, bool fByAccounts)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1206,7 +1205,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     return ret;\n }\n \n-Value listreceivedbyaddress(const Array& params, bool fHelp)\n+UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1243,7 +1242,7 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n     return ListReceived(params, false);\n }\n \n-Value listreceivedbyaccount(const Array& params, bool fHelp)\n+UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1286,7 +1285,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)\n+void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n {\n     CAmount nFee;\n     string strSentAccount;\n@@ -1356,7 +1355,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     }\n }\n \n-void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)\n+void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, UniValue& ret)\n {\n     bool fAllAccounts = (strAccount == string(\"*\"));\n \n@@ -1373,7 +1372,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n     }\n }\n \n-Value listtransactions(const Array& params, bool fHelp)\n+UniValue listtransactions(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1494,7 +1493,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listaccounts(const Array& params, bool fHelp)\n+UniValue listaccounts(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1574,7 +1573,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value listsinceblock(const Array& params, bool fHelp)\n+UniValue listsinceblock(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1665,7 +1664,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value gettransaction(const Array& params, bool fHelp)\n+UniValue gettransaction(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1743,7 +1742,7 @@ Value gettransaction(const Array& params, bool fHelp)\n }\n \n \n-Value backupwallet(const Array& params, bool fHelp)\n+UniValue backupwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1769,7 +1768,7 @@ Value backupwallet(const Array& params, bool fHelp)\n }\n \n \n-Value keypoolrefill(const Array& params, bool fHelp)\n+UniValue keypoolrefill(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1813,7 +1812,7 @@ static void LockWallet(CWallet* pWallet)\n     pWallet->Lock();\n }\n \n-Value walletpassphrase(const Array& params, bool fHelp)\n+UniValue walletpassphrase(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1873,7 +1872,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n }\n \n \n-Value walletpassphrasechange(const Array& params, bool fHelp)\n+UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1919,7 +1918,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n }\n \n \n-Value walletlock(const Array& params, bool fHelp)\n+UniValue walletlock(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -1958,7 +1957,7 @@ Value walletlock(const Array& params, bool fHelp)\n }\n \n \n-Value encryptwallet(const Array& params, bool fHelp)\n+UniValue encryptwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2015,7 +2014,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.\";\n }\n \n-Value lockunspent(const Array& params, bool fHelp)\n+UniValue lockunspent(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2076,7 +2075,7 @@ Value lockunspent(const Array& params, bool fHelp)\n         const UniValue& output = outputs[idx];\n         if (!output.isObject())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n-        const Object& o = output.get_obj();\n+        const UniValue& o = output.get_obj();\n \n         RPCTypeCheckObj(o, boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM));\n \n@@ -2099,7 +2098,7 @@ Value lockunspent(const Array& params, bool fHelp)\n     return true;\n }\n \n-Value listlockunspent(const Array& params, bool fHelp)\n+UniValue listlockunspent(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2148,7 +2147,7 @@ Value listlockunspent(const Array& params, bool fHelp)\n     return ret;\n }\n \n-Value settxfee(const Array& params, bool fHelp)\n+UniValue settxfee(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2177,7 +2176,7 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n-Value getwalletinfo(const Array& params, bool fHelp)\n+UniValue getwalletinfo(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2217,7 +2216,7 @@ Value getwalletinfo(const Array& params, bool fHelp)\n     return obj;\n }\n \n-Value resendwallettransactions(const Array& params, bool fHelp)\n+UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2242,7 +2241,7 @@ Value resendwallettransactions(const Array& params, bool fHelp)\n     return result;\n }\n \n-Value listunspent(const Array& params, bool fHelp)\n+UniValue listunspent(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n@@ -2297,7 +2296,7 @@ Value listunspent(const Array& params, bool fHelp)\n     if (params.size() > 2) {\n         UniValue inputs = params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n-            const Value& input = inputs[idx];\n+            const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());"
      }
    ]
  },
  {
    "sha": "8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjdlNGFiYmU2ZDZjODE0ZjVmM2MwNjllNWIzMDY3OTIwNjg5ZGJl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-02T09:41:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:21Z"
      },
      "message": "fix rpc batching univalue issue",
      "tree": {
        "sha": "20db3629e6caeee3eeb3bc979dbdea78a239c55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20db3629e6caeee3eeb3bc979dbdea78a239c55c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a8897f4ac992741e153d88b54bd2cde877c713d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8897f4ac992741e153d88b54bd2cde877c713d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8897f4ac992741e153d88b54bd2cde877c713d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a92ec0b29b293ef0430122a27e4ba18f28c7b01f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
        "patch": "@@ -889,7 +889,7 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n \n static string JSONRPCExecBatch(const UniValue& vReq)\n {\n-    UniValue ret;\n+    UniValue ret(UniValue::VARR);\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n         ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n "
      }
    ]
  },
  {
    "sha": "c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2ZiYmM3ZTFkN2IwNzZmNjhmMGIyZDg3ZjdlODZmYWJhNWQzYTI2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-02T10:28:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T07:16:21Z"
      },
      "message": "fix missing univalue types during constructing",
      "tree": {
        "sha": "62e6715d00ec972f0d574bd36cc7b69e1c1e56e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62e6715d00ec972f0d574bd36cc7b69e1c1e56e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f7e4abbe6d6c814f5f3c069e5b3067920689dbe"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e45368cb97633adcb74b842d17b61de165e5f08d",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
        "patch": "@@ -206,7 +206,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n                     setDepends.insert(txin.prevout.hash.ToString());\n             }\n \n-            UniValue depends;\n+            UniValue depends(UniValue::VARR);\n             BOOST_FOREACH(const string& dep, setDepends)\n             {\n                 depends.push_back(dep);\n@@ -635,7 +635,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    UniValue ret;\n+    UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n "
      },
      {
        "sha": "fe6eb81b848cec0dbbc91a20219acee10bc63379",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
        "patch": "@@ -312,7 +312,7 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n-    UniValue result;\n+    UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"address\", address.ToString()));\n     result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n "
      }
    ]
  },
  {
    "sha": "519eedeba76a2192bbded69b3c7e7e96bfc549a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTllZWRlYmE3NmEyMTkyYmJkZWQ2OWIzYzdlN2U5NmJmYzU0OWEy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T08:35:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T08:35:36Z"
      },
      "message": "fix univalue json parse tests",
      "tree": {
        "sha": "3dc9470d90cf3aee9045cc71f4733d96d2e804ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dc9470d90cf3aee9045cc71f4733d96d2e804ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/519eedeba76a2192bbded69b3c7e7e96bfc549a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519eedeba76a2192bbded69b3c7e7e96bfc549a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/519eedeba76a2192bbded69b3c7e7e96bfc549a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519eedeba76a2192bbded69b3c7e7e96bfc549a2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7fbbc7e1d7b076f68f0b2d87f7e86faba5d3a26"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "576e62a0bbefe5d025861ec079575e82c06fba7b",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519eedeba76a2192bbded69b3c7e7e96bfc549a2/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519eedeba76a2192bbded69b3c7e7e96bfc549a2/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=519eedeba76a2192bbded69b3c7e7e96bfc549a2",
        "patch": "@@ -143,20 +143,23 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n {\n-    Value value;\n+    UniValue value;\n     // Valid\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"1.0\"), value), true);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0\")), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0]\")), true);\n     // Valid, with trailing whitespace\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"1.0 \"), value), true);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0 \")), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0 ] \")), true);\n     // Invalid, initial garbage\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"[1.0\"), value), false);\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"a1.0\"), value), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0\")), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"[a1.0]\")), false);\n+     BOOST_CHECK_EQUAL(value.read(std::string(\"[\\\"a1.0\\\"]\")), true);\n     // Invalid, trailing garbage\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"1.0sds\"), value), false);\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"1.0]\"), value), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0sds\")), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0]\")), false);\n     // BTC addresses should fail parsing\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\"), value), false);\n-    BOOST_CHECK_EQUAL(read_string(std::string(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\"), value), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\")), false);\n+    BOOST_CHECK_EQUAL(value.read(std::string(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\")), false);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)"
      }
    ]
  },
  {
    "sha": "043df2b56831bef4c4b726ae4fc761d4710b99be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDNkZjJiNTY4MzFiZWY0YzRiNzI2YWU0ZmM3NjFkNDcxMGI5OWJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-04T08:31:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T11:18:35Z"
      },
      "message": "Simplify RPCclient, adapt json_parse_error test\n\n# Conflicts:\n#\tsrc/test/rpc_tests.cpp",
      "tree": {
        "sha": "8d4dd21f5e8693a4fd793fb4daffc102da47a553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d4dd21f5e8693a4fd793fb4daffc102da47a553"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/043df2b56831bef4c4b726ae4fc761d4710b99be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/043df2b56831bef4c4b726ae4fc761d4710b99be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/043df2b56831bef4c4b726ae4fc761d4710b99be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/043df2b56831bef4c4b726ae4fc761d4710b99be/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "519eedeba76a2192bbded69b3c7e7e96bfc549a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519eedeba76a2192bbded69b3c7e7e96bfc549a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/519eedeba76a2192bbded69b3c7e7e96bfc549a2"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 30,
      "deletions": 33
    },
    "files": [
      {
        "sha": "f254da5de0146d419da8de6113a975550d341b22",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/043df2b56831bef4c4b726ae4fc761d4710b99be/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/043df2b56831bef4c4b726ae4fc761d4710b99be/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=043df2b56831bef4c4b726ae4fc761d4710b99be",
        "patch": "@@ -121,6 +121,18 @@ CRPCConvertTable::CRPCConvertTable()\n \n static CRPCConvertTable rpcCvtTable;\n \n+/** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)\n+ * as well as objects and arrays.\n+ */\n+UniValue ParseNonRFCJSONValue(const std::string& strVal)\n+{\n+    UniValue jVal;\n+    if (!jVal.read(std::string(\"[\")+strVal+std::string(\"]\")) ||\n+        !jVal.isArray() || jVal.size()!=1)\n+        throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n+    return jVal[0];\n+}\n+\n /** Convert strings to command-specific RPC representation */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n@@ -129,28 +141,12 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n     for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n         const std::string& strVal = strParams[idx];\n \n-        // insert string value directly\n         if (!rpcCvtTable.convert(strMethod, idx)) {\n+            // insert string value directly\n             params.push_back(strVal);\n-        }\n-\n-        // parse string as JSON, insert bool/number/object/etc. value\n-        else {\n-            //according to rfc4627 null, true, false are not valid json strings\n-            UniValue jVal;\n-            if(strVal == \"null\")\n-                jVal.setNull();\n-            else if(strVal == \"true\")\n-                jVal.setBool(true);\n-            else if(strVal == \"false\")\n-                jVal.setBool(false);\n-            else\n-            {\n-                if (!jVal.read(strVal) || (jVal.isNull() && strVal.size() > 0))\n-                    if(!jVal.setNumStr(strVal) || jVal.isNull())\n-                        throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n-            }\n-            params.push_back(jVal);\n+        } else {\n+            // parse string as JSON, insert bool/number/object/etc. value\n+            params.push_back(ParseNonRFCJSONValue(strVal));\n         }\n     }\n "
      },
      {
        "sha": "d68b4ed6aeca4ee7b69b8df3869e27afa9f173d1",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/043df2b56831bef4c4b726ae4fc761d4710b99be/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/043df2b56831bef4c4b726ae4fc761d4710b99be/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=043df2b56831bef4c4b726ae4fc761d4710b99be",
        "patch": "@@ -9,5 +9,9 @@\n #include \"univalue/univalue.h\"\n \n UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n+/** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)\n+ * as well as objects and arrays.\n+ */\n+UniValue ParseNonRFCJSONValue(const std::string& strVal);\n \n #endif // BITCOIN_RPCCLIENT_H"
      },
      {
        "sha": "0b33ddb0869fbcd009e530893cf45593330ceba1",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/043df2b56831bef4c4b726ae4fc761d4710b99be/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/043df2b56831bef4c4b726ae4fc761d4710b99be/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=043df2b56831bef4c4b726ae4fc761d4710b99be",
        "patch": "@@ -143,23 +143,20 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)\n {\n-    UniValue value;\n     // Valid\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0\")), false);\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0]\")), true);\n-    // Valid, with trailing whitespace\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0 \")), false);\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0 ] \")), true);\n+    BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0\").get_real(), 1.0);\n+    // Valid, with leading or trailing whitespace\n+    BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\" 1.0\").get_real(), 1.0);\n+    BOOST_CHECK_EQUAL(ParseNonRFCJSONValue(\"1.0 \").get_real(), 1.0);\n     // Invalid, initial garbage\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"[1.0\")), false);\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"[a1.0]\")), false);\n-     BOOST_CHECK_EQUAL(value.read(std::string(\"[\\\"a1.0\\\"]\")), true);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"[1.0\"), std::runtime_error);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"a1.0\"), std::runtime_error);\n     // Invalid, trailing garbage\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0sds\")), false);\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"1.0]\")), false);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"1.0sds\"), std::runtime_error);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"1.0]\"), std::runtime_error);\n     // BTC addresses should fail parsing\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\")), false);\n-    BOOST_CHECK_EQUAL(value.read(std::string(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\")), false);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\"), std::runtime_error);\n+    BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\"), std::runtime_error);\n }\n \n BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)"
      }
    ]
  },
  {
    "sha": "7e98a3c642222edc0813ced945d4b6e548cb8ca8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTk4YTNjNjQyMjIyZWRjMDgxM2NlZDk0NWQ0YjZlNTQ4Y2I4Y2E4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-04T10:03:09Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T11:18:46Z"
      },
      "message": "util: Add ParseInt64 and ParseDouble functions\n\nStrict parsing functions for other numeric types.\n\n- ParseInt64 analogous to ParseInt32, but for 64-bit values.\n- ParseDouble for doubles.\n- Make all three Parse* functions more strict (e.g. reject whitespace on\n  the inside)\n\nAlso add tests.",
      "tree": {
        "sha": "3d68ecdb7d2fe22093f7d48bd4b4eb7d8ac69f93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d68ecdb7d2fe22093f7d48bd4b4eb7d8ac69f93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e98a3c642222edc0813ced945d4b6e548cb8ca8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e98a3c642222edc0813ced945d4b6e548cb8ca8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e98a3c642222edc0813ced945d4b6e548cb8ca8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e98a3c642222edc0813ced945d4b6e548cb8ca8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "043df2b56831bef4c4b726ae4fc761d4710b99be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/043df2b56831bef4c4b726ae4fc761d4710b99be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/043df2b56831bef4c4b726ae4fc761d4710b99be"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 121,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1779bcdd952e55c6ecad6d819825d77b40a79887",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=7e98a3c642222edc0813ced945d4b6e548cb8ca8",
        "patch": "@@ -322,16 +322,81 @@ BOOST_AUTO_TEST_CASE(test_ParseInt32)\n     BOOST_CHECK(ParseInt32(\"-2147483648\", &n) && n == -2147483648);\n     BOOST_CHECK(ParseInt32(\"-1234\", &n) && n == -1234);\n     // Invalid values\n+    BOOST_CHECK(!ParseInt32(\"\", &n));\n+    BOOST_CHECK(!ParseInt32(\" 1\", &n)); // no padding inside\n+    BOOST_CHECK(!ParseInt32(\"1 \", &n));\n     BOOST_CHECK(!ParseInt32(\"1a\", &n));\n     BOOST_CHECK(!ParseInt32(\"aap\", &n));\n     BOOST_CHECK(!ParseInt32(\"0x1\", &n)); // no hex\n+    BOOST_CHECK(!ParseInt32(\"0x1\", &n)); // no hex\n+    const char test_bytes[] = {'1', 0, '1'};\n+    std::string teststr(test_bytes, sizeof(test_bytes));\n+    BOOST_CHECK(!ParseInt32(teststr, &n)); // no embedded NULs\n     // Overflow and underflow\n     BOOST_CHECK(!ParseInt32(\"-2147483649\", NULL));\n     BOOST_CHECK(!ParseInt32(\"2147483648\", NULL));\n     BOOST_CHECK(!ParseInt32(\"-32482348723847471234\", NULL));\n     BOOST_CHECK(!ParseInt32(\"32482348723847471234\", NULL));\n }\n \n+BOOST_AUTO_TEST_CASE(test_ParseInt64)\n+{\n+    int64_t n;\n+    // Valid values\n+    BOOST_CHECK(ParseInt64(\"1234\", NULL));\n+    BOOST_CHECK(ParseInt64(\"0\", &n) && n == 0LL);\n+    BOOST_CHECK(ParseInt64(\"1234\", &n) && n == 1234LL);\n+    BOOST_CHECK(ParseInt64(\"01234\", &n) && n == 1234LL); // no octal\n+    BOOST_CHECK(ParseInt64(\"2147483647\", &n) && n == 2147483647LL);\n+    BOOST_CHECK(ParseInt64(\"-2147483648\", &n) && n == -2147483648LL);\n+    BOOST_CHECK(ParseInt64(\"9223372036854775807\", &n) && n == 9223372036854775807LL);\n+    BOOST_CHECK(ParseInt64(\"-9223372036854775808\", &n) && n == 9223372036854775808LL);\n+    BOOST_CHECK(ParseInt64(\"-1234\", &n) && n == -1234LL);\n+    // Invalid values\n+    BOOST_CHECK(!ParseInt64(\"\", &n));\n+    BOOST_CHECK(!ParseInt64(\" 1\", &n)); // no padding inside\n+    BOOST_CHECK(!ParseInt64(\"1 \", &n));\n+    BOOST_CHECK(!ParseInt64(\"1a\", &n));\n+    BOOST_CHECK(!ParseInt64(\"aap\", &n));\n+    BOOST_CHECK(!ParseInt64(\"0x1\", &n)); // no hex\n+    const char test_bytes[] = {'1', 0, '1'};\n+    std::string teststr(test_bytes, sizeof(test_bytes));\n+    BOOST_CHECK(!ParseInt64(teststr, &n)); // no embedded NULs\n+    // Overflow and underflow\n+    BOOST_CHECK(!ParseInt64(\"-9223372036854775809\", NULL));\n+    BOOST_CHECK(!ParseInt64(\"9223372036854775808\", NULL));\n+    BOOST_CHECK(!ParseInt64(\"-32482348723847471234\", NULL));\n+    BOOST_CHECK(!ParseInt64(\"32482348723847471234\", NULL));\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_ParseDouble)\n+{\n+    double n;\n+    // Valid values\n+    BOOST_CHECK(ParseDouble(\"1234\", NULL));\n+    BOOST_CHECK(ParseDouble(\"0\", &n) && n == 0.0);\n+    BOOST_CHECK(ParseDouble(\"1234\", &n) && n == 1234.0);\n+    BOOST_CHECK(ParseDouble(\"01234\", &n) && n == 1234.0); // no octal\n+    BOOST_CHECK(ParseDouble(\"2147483647\", &n) && n == 2147483647.0);\n+    BOOST_CHECK(ParseDouble(\"-2147483648\", &n) && n == -2147483648.0);\n+    BOOST_CHECK(ParseDouble(\"-1234\", &n) && n == -1234.0);\n+    BOOST_CHECK(ParseDouble(\"1e6\", &n) && n == 1e6);\n+    BOOST_CHECK(ParseDouble(\"-1e6\", &n) && n == -1e6);\n+    // Invalid values\n+    BOOST_CHECK(!ParseDouble(\"\", &n));\n+    BOOST_CHECK(!ParseDouble(\" 1\", &n)); // no padding inside\n+    BOOST_CHECK(!ParseDouble(\"1 \", &n));\n+    BOOST_CHECK(!ParseDouble(\"1a\", &n));\n+    BOOST_CHECK(!ParseDouble(\"aap\", &n));\n+    BOOST_CHECK(!ParseDouble(\"0x1\", &n)); // no hex\n+    const char test_bytes[] = {'1', 0, '1'};\n+    std::string teststr(test_bytes, sizeof(test_bytes));\n+    BOOST_CHECK(!ParseDouble(teststr, &n)); // no embedded NULs\n+    // Overflow and underflow\n+    BOOST_CHECK(!ParseDouble(\"-1e10000\", NULL));\n+    BOOST_CHECK(!ParseDouble(\"1e10000\", NULL));\n+}\n+\n BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n {\n     BOOST_CHECK_EQUAL(FormatParagraph(\"\", 79, 0), \"\");"
      },
      {
        "sha": "b10f3c5903beac27c8f2a1a97e8f871ab973a8de",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 1,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=7e98a3c642222edc0813ced945d4b6e548cb8ca8",
        "patch": "@@ -416,12 +416,25 @@ string DecodeBase32(const string& str)\n     return (vchRet.size() == 0) ? string() : string((const char*)&vchRet[0], vchRet.size());\n }\n \n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n bool ParseInt32(const std::string& str, int32_t *out)\n {\n+    if (!ParsePrechecks(str))\n+        return false;\n     char *endp = NULL;\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int)n;\n+    if(out) *out = (int32_t)n;\n     // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n     // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n     // platforms the size of these types may be different.\n@@ -430,6 +443,34 @@ bool ParseInt32(const std::string& str, int32_t *out)\n         n <= std::numeric_limits<int32_t>::max();\n }\n \n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtod will not set errno if valid\n+    double n = strtod(str.c_str(), &endp);\n+    if(out) *out = n;\n+    return endp && *endp == 0 && !errno;\n+}\n+\n std::string FormatParagraph(const std::string in, size_t width, size_t indent)\n {\n     std::stringstream out;"
      },
      {
        "sha": "fb3ef0428162016d1b04d8fc23055a25731622cb",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e98a3c642222edc0813ced945d4b6e548cb8ca8/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=7e98a3c642222edc0813ced945d4b6e548cb8ca8",
        "patch": "@@ -49,6 +49,20 @@ int atoi(const std::string& str);\n  */\n bool ParseInt32(const std::string& str, int32_t *out);\n \n+/**\n+ * Convert string to signed 64-bit integer with strict parse error feedback.\n+ * @returns true if the entire string could be parsed as valid integer,\n+ *   false if not the entire string could be parsed or when overflow or underflow occurred.\n+ */\n+bool ParseInt64(const std::string& str, int64_t *out);\n+\n+/**\n+ * Convert string to double with strict parse error feedback.\n+ * @returns true if the entire string could be parsed as valid double,\n+ *   false if not the entire string could be parsed or when overflow or underflow occurred.\n+ */\n+bool ParseDouble(const std::string& str, double *out);\n+\n template<typename T>\n std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n {"
      }
    ]
  },
  {
    "sha": "c02309204b8195476945f7066e8d96c60246db08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDIzMDkyMDRiODE5NTQ3Njk0NWY3MDY2ZThkOTZjNjAyNDZkYjA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-04T09:40:03Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T11:18:57Z"
      },
      "message": "univalue: add strict type checking",
      "tree": {
        "sha": "3a550d0ff86d1bd557c793441b23df0d7725c68f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a550d0ff86d1bd557c793441b23df0d7725c68f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c02309204b8195476945f7066e8d96c60246db08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02309204b8195476945f7066e8d96c60246db08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c02309204b8195476945f7066e8d96c60246db08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02309204b8195476945f7066e8d96c60246db08/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e98a3c642222edc0813ced945d4b6e548cb8ca8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e98a3c642222edc0813ced945d4b6e548cb8ca8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e98a3c642222edc0813ced945d4b6e548cb8ca8"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 91,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6920c44c96fef3bfbd9dba0d6605a775818a46c5",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 1,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c02309204b8195476945f7066e8d96c60246db08/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c02309204b8195476945f7066e8d96c60246db08/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=c02309204b8195476945f7066e8d96c60246db08",
        "patch": "@@ -6,8 +6,12 @@\n #include <ctype.h>\n #include <iomanip>\n #include <sstream>\n+#include <stdexcept>      // std::runtime_error\n+\n #include \"univalue.h\"\n \n+#include \"utilstrencodings.h\" // ParseXX\n+\n using namespace std;\n \n const UniValue NullUniValue;\n@@ -224,4 +228,77 @@ const UniValue& find_value( const UniValue& obj, const std::string& name)\n     }\n \n     return NullUniValue;\n-}\n\\ No newline at end of file\n+}\n+\n+std::vector<std::string> UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+std::vector<UniValue> UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+std::string UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VREAL && typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "79018bb787766f86edbd85c012d93600880bdafd",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c02309204b8195476945f7066e8d96c60246db08/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c02309204b8195476945f7066e8d96c60246db08/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=c02309204b8195476945f7066e8d96c60246db08",
        "patch": "@@ -13,7 +13,6 @@\n \n #include <sstream>        // .get_int64()\n #include <utility>        // std::pair\n-#include <stdlib.h>       // atoi(), atof()   TODO: remove\n \n class UniValue {\n public:\n@@ -75,7 +74,7 @@ class UniValue {\n \n     bool isNull() const { return (typ == VNULL); }\n     bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n-    bool isFalse() const { return (!isTrue()); }\n+    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n@@ -140,27 +139,22 @@ class UniValue {\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n \n public:\n-    //\n-    // The following were added for compatibility with json_spirit.\n-    // Most duplicate other methods, and should be removed.\n-    //\n-    std::vector<std::string> getKeys() const { return keys; }\n-    std::vector<UniValue> getValues() const { return values; }\n-    bool get_bool() const { return getBool(); }\n-    std::string get_str() const { return getValStr(); }\n-    int get_int() const { return atoi(getValStr().c_str()); }\n-    double get_real() const { return atof(getValStr().c_str()); }\n-    const UniValue& get_obj() const { return *this; }\n-    const UniValue& get_array() const { return *this; }\n+    // Strict type-specific getters, these throw std::runtime_error if the\n+    // value is of unexpected type\n+    std::vector<std::string> getKeys() const;\n+    std::vector<UniValue> getValues() const;\n+    bool get_bool() const;\n+    std::string get_str() const;\n+    int get_int() const;\n+    int64_t get_int64() const;\n+    double get_real() const;\n+    const UniValue& get_obj() const;\n+    const UniValue& get_array() const;\n+\n     enum VType type() const { return getType(); }\n     bool push_back(std::pair<std::string,UniValue> pear) {\n         return pushKV(pear.first, pear.second);\n     }\n-    int64_t get_int64() const {\n-        int64_t ret;\n-        std::istringstream(getValStr()) >> ret;\n-        return ret;\n-    }\n     friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n };\n "
      }
    ]
  },
  {
    "sha": "44c7474446d5a020bc06bf2f2b87572f42e54e9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGM3NDc0NDQ2ZDVhMDIwYmMwNmJmMmYyYjg3NTcyZjQyZTU0ZTll",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T11:58:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-04T11:58:14Z"
      },
      "message": "univalue: add type check unit tests",
      "tree": {
        "sha": "e06cb762ad0fbb0b6b4c8274774d96868e416eb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e06cb762ad0fbb0b6b4c8274774d96868e416eb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44c7474446d5a020bc06bf2f2b87572f42e54e9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c7474446d5a020bc06bf2f2b87572f42e54e9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44c7474446d5a020bc06bf2f2b87572f42e54e9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c7474446d5a020bc06bf2f2b87572f42e54e9e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c02309204b8195476945f7066e8d96c60246db08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02309204b8195476945f7066e8d96c60246db08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c02309204b8195476945f7066e8d96c60246db08"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de84faca23da4f3f345dbde07cd65acc313e5d5c",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44c7474446d5a020bc06bf2f2b87572f42e54e9e/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44c7474446d5a020bc06bf2f2b87572f42e54e9e/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=44c7474446d5a020bc06bf2f2b87572f42e54e9e",
        "patch": "@@ -63,6 +63,48 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n     BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n }\n \n+BOOST_AUTO_TEST_CASE(univalue_typecheck)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.setNumStr(\"1\"));\n+    BOOST_CHECK(v1.isNum());\n+    BOOST_CHECK_THROW(v1.get_bool(), runtime_error);\n+\n+    UniValue v2;\n+    BOOST_CHECK(v2.setBool(true));\n+    BOOST_CHECK_EQUAL(v2.get_bool(), true);\n+    BOOST_CHECK_THROW(v2.get_int(), runtime_error);\n+\n+    UniValue v3;\n+    BOOST_CHECK(v3.setNumStr(\"32482348723847471234\"));\n+    BOOST_CHECK_THROW(v3.get_int64(), runtime_error);\n+    BOOST_CHECK(v3.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v3.get_int64(), 1000);\n+\n+    UniValue v4;\n+    BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_THROW(v4.get_int(), runtime_error);\n+    BOOST_CHECK(v4.setNumStr(\"1000\"));\n+    BOOST_CHECK_EQUAL(v4.get_int(), 1000);\n+    BOOST_CHECK_THROW(v4.get_str(), runtime_error);\n+    BOOST_CHECK_EQUAL(v4.get_real(), 1000);\n+    BOOST_CHECK_THROW(v4.get_array(), runtime_error);\n+    BOOST_CHECK_THROW(v4.getKeys(), runtime_error);\n+    BOOST_CHECK_THROW(v4.getValues(), runtime_error);\n+    BOOST_CHECK_THROW(v4.get_obj(), runtime_error);\n+\n+    UniValue v5;\n+    BOOST_CHECK(v5.read(\"[true, 10]\"));\n+    BOOST_CHECK_NO_THROW(v5.get_array());\n+    std::vector<UniValue> vals = v5.getValues();\n+    BOOST_CHECK_THROW(vals[0].get_int(), runtime_error);\n+    BOOST_CHECK_EQUAL(vals[0].get_bool(), true);\n+\n+    BOOST_CHECK_EQUAL(vals[1].get_int(), 10);\n+    BOOST_CHECK_THROW(vals[1].get_bool(), runtime_error);\n+}\n+\n BOOST_AUTO_TEST_CASE(univalue_set)\n {\n     UniValue v(UniValue::VSTR, \"foo\");"
      }
    ]
  }
]