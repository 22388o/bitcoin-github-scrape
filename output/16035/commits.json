[
  {
    "sha": "5935f0126ef37175a8fbfee017b470af13aad46d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTM1ZjAxMjZlZjM3MTc1YThmYmZlZTAxN2I0NzBhZjEzYWFkNDZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-08T18:28:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T14:08:58Z"
      },
      "message": "build with -fstack-reuse=none\n\nGithub-Pull: #15983\nRebased-From: faf38bc056e523485520f98f3f725c583a3b89bf",
      "tree": {
        "sha": "39b58a3165eebd09ec96cc3641536b34d92d1540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b58a3165eebd09ec96cc3641536b34d92d1540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5935f0126ef37175a8fbfee017b470af13aad46d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5935f0126ef37175a8fbfee017b470af13aad46d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5935f0126ef37175a8fbfee017b470af13aad46d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5935f0126ef37175a8fbfee017b470af13aad46d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be92be5644a763f98b6fa2de0b04ba44217dcef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be92be5644a763f98b6fa2de0b04ba44217dcef9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be92be5644a763f98b6fa2de0b04ba44217dcef9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5335a6a44659851a0b7e412164831c49c5a37d20",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5935f0126ef37175a8fbfee017b470af13aad46d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5935f0126ef37175a8fbfee017b470af13aad46d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5935f0126ef37175a8fbfee017b470af13aad46d",
        "patch": "@@ -725,6 +725,10 @@ if test x$TARGET_OS != xwindows; then\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n+# All versions of gcc that we commonly use for building are subject to bug\n+# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n+AX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n if test x$use_hardening != xno; then\n   use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])"
      }
    ]
  },
  {
    "sha": "9c1a607a092039ada85aa7a8c12c6062a8e89b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzFhNjA3YTA5MjAzOWFkYTg1YWE3YThjMTJjNjA2MmE4ZTg5Yjk0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-09T13:16:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T20:15:47Z"
      },
      "message": "net: Rename ::fRelayTxes to ::g_relay_txes\n\nThis helps to distinguish it from CNode::fRelayTxes and avoid bugs like\n425278d17bd0edf8a3a7cc81e55016f7fd8e7726\n\nGithub-Pull: #15990\nRebased-From: fa1dce7329d3e74d46ab98b93772b1832a3f1819",
      "tree": {
        "sha": "e06bcc6b08aef6f4e5909b94868f84ae517bbe22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e06bcc6b08aef6f4e5909b94868f84ae517bbe22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c1a607a092039ada85aa7a8c12c6062a8e89b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c1a607a092039ada85aa7a8c12c6062a8e89b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c1a607a092039ada85aa7a8c12c6062a8e89b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c1a607a092039ada85aa7a8c12c6062a8e89b94/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5935f0126ef37175a8fbfee017b470af13aad46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5935f0126ef37175a8fbfee017b470af13aad46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5935f0126ef37175a8fbfee017b470af13aad46d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "52f1f0d84f621ffb859d681d93494f529f07e718",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "patch": "@@ -1411,7 +1411,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // see Step 2: parameter interactions for more information about these\n     fListen = gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n-    fRelayTxes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+    g_relay_txes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;"
      },
      {
        "sha": "a3bca8d1131f6714e32c3e7ecc09de3dfa0a039e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "patch": "@@ -79,7 +79,7 @@ static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // S\n //\n bool fDiscover = true;\n bool fListen = true;\n-bool fRelayTxes = true;\n+bool g_relay_txes = !DEFAULT_BLOCKSONLY;\n CCriticalSection cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};"
      },
      {
        "sha": "6cae35e8e0980f2b210410bdae279344e366d6a7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "patch": "@@ -523,7 +523,7 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n \n extern bool fDiscover;\n extern bool fListen;\n-extern bool fRelayTxes;\n+extern bool g_relay_txes;\n \n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n "
      },
      {
        "sha": "550be5f7ca7b700b243048a5422bdf7575828ff1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "patch": "@@ -336,7 +336,7 @@ static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n \n     connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n-            nonce, strSubVersion, nNodeStartingHeight, ::fRelayTxes));\n+            nonce, strSubVersion, nNodeStartingHeight, ::g_relay_txes));\n \n     if (fLogIPs) {\n         LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), addrYou.ToString(), nodeid);\n@@ -2011,7 +2011,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n-        bool fBlocksOnly = !fRelayTxes;\n+        bool fBlocksOnly = !g_relay_txes;\n \n         // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistrelay is true\n         if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY))\n@@ -2266,7 +2266,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     if (strCommand == NetMsgType::TX) {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n-        if (!fRelayTxes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n+        if (!g_relay_txes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom->GetId());\n             return true;"
      },
      {
        "sha": "a5f590757d2767c0a25f786cf7fd9add8365e6ea",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c1a607a092039ada85aa7a8c12c6062a8e89b94/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "patch": "@@ -495,7 +495,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n-    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"localrelay\", g_relay_txes);\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n         obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());"
      }
    ]
  },
  {
    "sha": "8f215c7a270066b315060a112fe69d968ab8b292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjIxNWM3YTI3MDA2NmIzMTUwNjBhMTEyZmU2OWQ5NjhhYjhiMjky",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-09T14:36:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T20:15:49Z"
      },
      "message": "test: Format predicate source as multiline on error\n\nGithub-Pull: #15990\nRebased-From: fa3872e7b4540857261aed948b94b6b2bfdbc3d1",
      "tree": {
        "sha": "83e825f1a531058ac79125b142969346f8bcef40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83e825f1a531058ac79125b142969346f8bcef40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f215c7a270066b315060a112fe69d968ab8b292",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f215c7a270066b315060a112fe69d968ab8b292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f215c7a270066b315060a112fe69d968ab8b292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f215c7a270066b315060a112fe69d968ab8b292/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c1a607a092039ada85aa7a8c12c6062a8e89b94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c1a607a092039ada85aa7a8c12c6062a8e89b94"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87e2dbaf16324d4a1903436ca378917127d0e990",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f215c7a270066b315060a112fe69d968ab8b292/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f215c7a270066b315060a112fe69d968ab8b292/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8f215c7a270066b315060a112fe69d968ab8b292",
        "patch": "@@ -219,7 +219,7 @@ def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=N\n         time.sleep(0.05)\n \n     # Print the cause of the timeout\n-    predicate_source = inspect.getsourcelines(predicate)\n+    predicate_source = \"''''\\n\" + inspect.getsource(predicate) + \"'''\"\n     logger.error(\"wait_until() failed. Predicate: {}\".format(predicate_source))\n     if attempt >= attempts:\n         raise AssertionError(\"Predicate {} not true after {} attempts\".format(predicate_source, attempts))"
      }
    ]
  },
  {
    "sha": "3460555f4711fc9d2ac3d783e30fae00c052b179",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDYwNTU1ZjQ3MTFmYzlkMmFjM2Q3ODNlMzBmYWUwMGMwNTJiMTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-09T14:42:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T20:15:51Z"
      },
      "message": "test: Add test for p2p_blocksonly\n\nGithub-Pull: #15990\nRebased-From: fa320de79faaca2b088fcbe7f76701faa9bff236",
      "tree": {
        "sha": "a0f26a26ac7c2ce23e815f58508c53db667adc15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0f26a26ac7c2ce23e815f58508c53db667adc15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3460555f4711fc9d2ac3d783e30fae00c052b179",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3460555f4711fc9d2ac3d783e30fae00c052b179",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3460555f4711fc9d2ac3d783e30fae00c052b179",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3460555f4711fc9d2ac3d783e30fae00c052b179/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f215c7a270066b315060a112fe69d968ab8b292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f215c7a270066b315060a112fe69d968ab8b292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f215c7a270066b315060a112fe69d968ab8b292"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12cb06a4079aad15df04b43d9c713c086c0799ef",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=3460555f4711fc9d2ac3d783e30fae00c052b179",
        "patch": "@@ -0,0 +1,58 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test p2p blocksonly\"\"\"\n+\n+from test_framework.messages import msg_tx, CTransaction, FromHex\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class P2PBlocksOnly(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-blocksonly\"]]\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        self.log.info('Check that txs from p2p are rejected')\n+        prevtx = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]\n+        rawtx = self.nodes[0].createrawtransaction(\n+            inputs=[{\n+                'txid': prevtx['txid'],\n+                'vout': 0\n+            }],\n+            outputs=[{\n+                self.nodes[0].get_deterministic_priv_key().address: 50 - 0.00125\n+            }],\n+        )\n+        sigtx = self.nodes[0].signrawtransactionwithkey(\n+            hexstring=rawtx,\n+            privkeys=[self.nodes[0].get_deterministic_priv_key().key],\n+            prevtxs=[{\n+                'txid': prevtx['txid'],\n+                'vout': 0,\n+                'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+            }],\n+        )['hex']\n+        assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n+        with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n+            self.nodes[0].p2p.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.nodes[0].p2p.sync_with_ping()\n+            assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n+\n+        self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n+        txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n+        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=0'.format(txid)]):\n+            self.nodes[0].sendrawtransaction(sigtx)\n+            self.nodes[0].p2p.wait_for_tx(txid)\n+            assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)\n+\n+\n+if __name__ == '__main__':\n+    P2PBlocksOnly().main()"
      },
      {
        "sha": "6afdd5017621697a642afc0ad885d4d711b71fec",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3460555f4711fc9d2ac3d783e30fae00c052b179",
        "patch": "@@ -364,6 +364,14 @@ def wait_for_disconnect(self, timeout=60):\n \n     # Message receiving helper methods\n \n+    def wait_for_tx(self, txid, timeout=60):\n+        def test_function():\n+            if not self.last_message.get('tx'):\n+                return False\n+            return self.last_message['tx'].tx.rehash() == txid\n+\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+\n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)"
      },
      {
        "sha": "06d3552195f13a327eb296abf64fa0b830baa748",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3460555f4711fc9d2ac3d783e30fae00c052b179/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3460555f4711fc9d2ac3d783e30fae00c052b179",
        "patch": "@@ -134,6 +134,7 @@\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'p2p_mempool.py',\n+    'p2p_blocksonly.py',\n     'mining_prioritisetransaction.py',\n     'p2p_invalid_locator.py',\n     'p2p_invalid_block.py',"
      }
    ]
  },
  {
    "sha": "890a92eba819763a4dd182245cc7daddacec2ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTBhOTJlYmE4MTk3NjNhNGRkMTgyMjQ1Y2M3ZGFkZGFjZWMyZWY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-09T13:29:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T20:15:54Z"
      },
      "message": "doc: Mention blocksonly in reduce-traffic.md, unhide option\n\nGithub-Pull: #15990\nRebased-From: fa8ced32a60dea37ac169241cf9a1f708ef46c4b",
      "tree": {
        "sha": "45d0b9ce8953b3eb1dda8e9896138f0824743281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45d0b9ce8953b3eb1dda8e9896138f0824743281"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/890a92eba819763a4dd182245cc7daddacec2ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890a92eba819763a4dd182245cc7daddacec2ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/890a92eba819763a4dd182245cc7daddacec2ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890a92eba819763a4dd182245cc7daddacec2ef4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3460555f4711fc9d2ac3d783e30fae00c052b179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3460555f4711fc9d2ac3d783e30fae00c052b179",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3460555f4711fc9d2ac3d783e30fae00c052b179"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5a71f62e0f8971c2e0f85f639a27c9096383334b",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890a92eba819763a4dd182245cc7daddacec2ef4/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890a92eba819763a4dd182245cc7daddacec2ef4/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=890a92eba819763a4dd182245cc7daddacec2ef4",
        "patch": "@@ -35,3 +35,16 @@ blocks and transactions to fewer nodes.\n Reducing the maximum connected nodes to a minimum could be desirable if traffic\n limits are tiny. Keep in mind that bitcoin's trustless model works best if you are\n connected to a handful of nodes.\n+\n+## 4. Turn off transaction relay (`-blocksonly`)\n+\n+Forwarding transactions to peers increases the P2P traffic. To only sync blocks\n+with other peers, you can disable transaction relay.\n+\n+Be reminded of the effects of this setting.\n+\n+- Fee estimation will no longer work.\n+- Not relaying other's transactions could hurt your privacy if used while a\n+  wallet is loaded or if you use the node to broadcast transactions.\n+- It makes block propagation slower because compact block relay can only be\n+  used when transaction relay is enabled."
      },
      {
        "sha": "7cb709225447c5f6f22a6f8b84b4a39d60b18070",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/890a92eba819763a4dd182245cc7daddacec2ef4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/890a92eba819763a4dd182245cc7daddacec2ef4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=890a92eba819763a4dd182245cc7daddacec2ef4",
        "patch": "@@ -376,7 +376,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify blocks directory (default: <datadir>/blocks)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to operate in a blocks only mode (default: %u)\", DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);"
      }
    ]
  },
  {
    "sha": "eb85ee62b35c160be10487faa566ca36b5d1a19c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjg1ZWU2MmIzNWMxNjBiZTEwNDg3ZmFhNTY2Y2EzNmI1ZDFhMTlj",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2019-04-25T12:53:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-17T11:35:48Z"
      },
      "message": "Doc: remove text about txes always relayed from -whitelist\n\nUpdates text since -whitelistforcerelay was set to false by default in\nPR #15193.\n\nGithub-Pull: #15890\nRebased-From: e0bb2799992afe88e6f4efc6d90ed82ddf1ec5ec",
      "tree": {
        "sha": "ce900383bd462a16b9ae82aeec3102f423b0124f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce900383bd462a16b9ae82aeec3102f423b0124f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb85ee62b35c160be10487faa566ca36b5d1a19c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb85ee62b35c160be10487faa566ca36b5d1a19c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb85ee62b35c160be10487faa566ca36b5d1a19c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb85ee62b35c160be10487faa566ca36b5d1a19c/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "890a92eba819763a4dd182245cc7daddacec2ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/890a92eba819763a4dd182245cc7daddacec2ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/890a92eba819763a4dd182245cc7daddacec2ef4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ed44821e6b7d125407de14990a3845e5e3fcb51",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb85ee62b35c160be10487faa566ca36b5d1a19c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb85ee62b35c160be10487faa566ca36b5d1a19c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eb85ee62b35c160be10487faa566ca36b5d1a19c",
        "patch": "@@ -446,7 +446,7 @@ void SetupServerArgs()\n #endif\n     gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n-        \" Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\", false, OptionsCategory::CONNECTION);\n+        \" Whitelisted peers cannot be DoS banned\", false, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n@@ -518,7 +518,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-mempoolreplacement\", strprintf(\"Enable transaction replacement in the memory pool (default: %u)\", DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n \n "
      }
    ]
  },
  {
    "sha": "a635377b625f6e29c4d66939641a7c1fc27e5eb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjM1Mzc3YjYyNWY2ZTI5YzRkNjY5Mzk2NDFhN2MxZmMyN2U1ZWI5",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-05-03T13:10:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-17T11:36:18Z"
      },
      "message": "Install bitcoin-wallet manpage.\n\nThis change marks the already-existing bitcoin-wallet.1 manpage file for\ninstallation together with the others.  Previously, only bitcoind.1,\nbitcoin-cli.1, bitcoin-tx.1 and bitcoin-qt.1 would be installed.\n\nGithub-Pull: #15947\nRebased-From: 00d110463aed12ecdc6e9c2bf47d9ef61d19fa9d",
      "tree": {
        "sha": "6cccb5f069fb5a7f5aabde9d981615ad19aff9c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cccb5f069fb5a7f5aabde9d981615ad19aff9c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a635377b625f6e29c4d66939641a7c1fc27e5eb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a635377b625f6e29c4d66939641a7c1fc27e5eb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a635377b625f6e29c4d66939641a7c1fc27e5eb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a635377b625f6e29c4d66939641a7c1fc27e5eb9/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb85ee62b35c160be10487faa566ca36b5d1a19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb85ee62b35c160be10487faa566ca36b5d1a19c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb85ee62b35c160be10487faa566ca36b5d1a19c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "edbc0911a16772d4a1b23645795f9f7b4185aecb",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a635377b625f6e29c4d66939641a7c1fc27e5eb9/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a635377b625f6e29c4d66939641a7c1fc27e5eb9/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=a635377b625f6e29c4d66939641a7c1fc27e5eb9",
        "patch": "@@ -15,3 +15,9 @@ endif\n if BUILD_BITCOIN_TX\n   dist_man1_MANS+=bitcoin-tx.1\n endif\n+\n+if ENABLE_WALLET\n+if BUILD_BITCOIN_WALLET\n+  dist_man1_MANS+=bitcoin-wallet.1\n+endif\n+endif"
      }
    ]
  },
  {
    "sha": "3dbc7def0f12257918b87e6abd6432d40d3e59f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGJjN2RlZjBmMTIyNTc5MThiODdlNmFiZDY0MzJkNDBkM2U1OWY5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-05-06T07:49:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-18T13:40:46Z"
      },
      "message": "Show loaded wallets as disabled in open menu instead of nothing\n\nGithub-Pull: #15957\nRebased-From: c3ef63a52f304a600fff1f9c7caa5cb804d41d43",
      "tree": {
        "sha": "e6ff30e455c203998470772d4c355adfaab168f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6ff30e455c203998470772d4c355adfaab168f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dbc7def0f12257918b87e6abd6432d40d3e59f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbc7def0f12257918b87e6abd6432d40d3e59f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbc7def0f12257918b87e6abd6432d40d3e59f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbc7def0f12257918b87e6abd6432d40d3e59f9/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a635377b625f6e29c4d66939641a7c1fc27e5eb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a635377b625f6e29c4d66939641a7c1fc27e5eb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a635377b625f6e29c4d66939641a7c1fc27e5eb9"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ff66df376b1487f02e18c90d612bc066b81babb2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dbc7def0f12257918b87e6abd6432d40d3e59f9/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dbc7def0f12257918b87e6abd6432d40d3e59f9/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3dbc7def0f12257918b87e6abd6432d40d3e59f9",
        "patch": "@@ -370,9 +370,18 @@ void BitcoinGUI::createActions()\n         connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n         connect(m_open_wallet_action->menu(), &QMenu::aboutToShow, [this] {\n             m_open_wallet_action->menu()->clear();\n-            for (std::string path : m_wallet_controller->getWalletsAvailableToOpen()) {\n+            std::vector<std::string> available_wallets = m_wallet_controller->getWalletsAvailableToOpen();\n+            std::vector<std::string> wallets = m_node.listWalletDir();\n+            for (const auto& path : wallets) {\n                 QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n                 QAction* action = m_open_wallet_action->menu()->addAction(name);\n+\n+                if (std::find(available_wallets.begin(), available_wallets.end(), path) == available_wallets.end()) {\n+                    // This wallet is already loaded\n+                    action->setEnabled(false);\n+                    continue;\n+                }\n+\n                 connect(action, &QAction::triggered, [this, name, path] {\n                     OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n \n@@ -400,6 +409,10 @@ void BitcoinGUI::createActions()\n                     assert(invoked);\n                 });\n             }\n+            if (wallets.empty()) {\n+                QAction* action = m_open_wallet_action->menu()->addAction(tr(\"No wallets available\"));\n+                action->setEnabled(false);\n+            }\n         });\n         connect(m_close_wallet_action, &QAction::triggered, [this] {\n             m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);"
      }
    ]
  },
  {
    "sha": "206f5ee87576d619ea9d09380cc4d205989c7885",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDZmNWVlODc1NzZkNjE5ZWE5ZDA5MzgwY2M0ZDIwNTk4OWM3ODg1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-24T00:01:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T16:23:45Z"
      },
      "message": "Disallow extended encoding for non-witness transactions\n\nGithub-Pull: #14039\nRebased-From: bb530efa1872ec963417f61da9a95185c7a7a7d6",
      "tree": {
        "sha": "272c136d537766293c4f3ead6a1158407b169b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/272c136d537766293c4f3ead6a1158407b169b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/206f5ee87576d619ea9d09380cc4d205989c7885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206f5ee87576d619ea9d09380cc4d205989c7885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/206f5ee87576d619ea9d09380cc4d205989c7885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206f5ee87576d619ea9d09380cc4d205989c7885/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dbc7def0f12257918b87e6abd6432d40d3e59f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dbc7def0f12257918b87e6abd6432d40d3e59f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dbc7def0f12257918b87e6abd6432d40d3e59f9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aad991e2f156e447bb63c732393f042278f2c520",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/206f5ee87576d619ea9d09380cc4d205989c7885/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/206f5ee87576d619ea9d09380cc4d205989c7885/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=206f5ee87576d619ea9d09380cc4d205989c7885",
        "patch": "@@ -222,6 +222,10 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n         for (size_t i = 0; i < tx.vin.size(); i++) {\n             s >> tx.vin[i].scriptWitness.stack;\n         }\n+        if (!tx.HasWitness()) {\n+            /* It's illegal to encode witnesses when all witness stacks are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n     }\n     if (flags) {\n         /* Unknown flag in the serialization */"
      }
    ]
  },
  {
    "sha": "5a58ddb6d558514c2f48543be0760bbf22698189",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTU4ZGRiNmQ1NTg1MTRjMmY0ODU0M2JlMDc2MGJiZjIyNjk4MTg5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-25T21:01:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T16:24:03Z"
      },
      "message": "Fix missing input template by making minimal tx\n\nGithub-Pull: #15893\nRebased-From: 25b078658139c1aea58393a32ac5a79144d8d140",
      "tree": {
        "sha": "74c27045d1950b8732d5984388c1ef75b7c72607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74c27045d1950b8732d5984388c1ef75b7c72607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a58ddb6d558514c2f48543be0760bbf22698189",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a58ddb6d558514c2f48543be0760bbf22698189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a58ddb6d558514c2f48543be0760bbf22698189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a58ddb6d558514c2f48543be0760bbf22698189/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "206f5ee87576d619ea9d09380cc4d205989c7885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/206f5ee87576d619ea9d09380cc4d205989c7885",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/206f5ee87576d619ea9d09380cc4d205989c7885"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 5,
      "deletions": 15
    },
    "files": [
      {
        "sha": "d262dae5aa47b7f738f546d196c387ce868e3268",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a58ddb6d558514c2f48543be0760bbf22698189/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a58ddb6d558514c2f48543be0760bbf22698189/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=5a58ddb6d558514c2f48543be0760bbf22698189",
        "patch": "@@ -71,9 +71,13 @@ class InputMissing(BadTxTemplate):\n     reject_reason = \"bad-txns-vin-empty\"\n     expect_disconnect = False\n \n+    # We use a blank transaction here to make sure\n+    # it is interpreted as a non-witness transaction.\n+    # Otherwise the transaction will fail the\n+    # \"surpufluous witness\" check during deserialization\n+    # rather than the input count check.\n     def get_tx(self):\n         tx = CTransaction()\n-        tx.vout.append(CTxOut(0, sc.CScript([sc.OP_TRUE] * 100)))\n         tx.calc_sha256()\n         return tx\n "
      },
      {
        "sha": "c62fbb8e2bda3a6888bfd59314a51d5cf8124111",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a58ddb6d558514c2f48543be0760bbf22698189/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a58ddb6d558514c2f48543be0760bbf22698189/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=5a58ddb6d558514c2f48543be0760bbf22698189",
        "patch": "@@ -146,20 +146,6 @@ def run_test(self):\n             badtx = template.get_tx()\n             if TxTemplate != invalid_txs.InputMissing:\n                 self.sign_tx(badtx, attempt_spend_tx)\n-            else:\n-                # Segwit is active in regtest at this point, so to deserialize a\n-                # transaction without any inputs correctly, we set the outputs\n-                # to an empty list. This is a hack, as the serialization of an\n-                # empty list of outputs is deserialized as flags==0 and thus\n-                # deserialization of the outputs is skipped.\n-                # A policy check requires \"loose\" txs to be of a minimum size,\n-                # so vtx is not set to be empty in the TxTemplate class and we\n-                # only apply the workaround where txs are not \"loose\", i.e. in\n-                # blocks.\n-                #\n-                # The workaround has the purpose that both sides calculate\n-                # the same tx hash in the merkle tree\n-                badtx.vout = []\n             badtx.rehash()\n             badblock = self.update_block(blockname, [badtx])\n             self.sync_blocks("
      }
    ]
  },
  {
    "sha": "86031083c71e257778e95e21e81532b310472358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjAzMTA4M2M3MWUyNTc3NzhlOTVlMjFlODE1MzJiMzEwNDcyMzU4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-21T17:47:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T16:25:06Z"
      },
      "message": "Add test for superfluous witness record in deserialization\n\nGithub-Pull: #15893\nRebased-From: cc556e4a30b4a32eab6722f590489d89b2875de3",
      "tree": {
        "sha": "7c584af2be1f243293739dc9d6949eebff7ca314",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c584af2be1f243293739dc9d6949eebff7ca314"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86031083c71e257778e95e21e81532b310472358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86031083c71e257778e95e21e81532b310472358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86031083c71e257778e95e21e81532b310472358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86031083c71e257778e95e21e81532b310472358/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a58ddb6d558514c2f48543be0760bbf22698189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a58ddb6d558514c2f48543be0760bbf22698189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a58ddb6d558514c2f48543be0760bbf22698189"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ff7f1dd0c9e0715f3d87df9d5eb764b458ae6f3a",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86031083c71e257778e95e21e81532b310472358/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86031083c71e257778e95e21e81532b310472358/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=86031083c71e257778e95e21e81532b310472358",
        "patch": "@@ -37,6 +37,7 @@\n     ser_vector,\n     sha256,\n     uint256_from_str,\n+    FromHex,\n )\n from test_framework.mininode import (\n     P2PInterface,\n@@ -81,6 +82,7 @@\n     hex_str_to_bytes,\n     sync_blocks,\n     sync_mempools,\n+    assert_raises_rpc_error,\n )\n \n # The versionbit bit used to signal activation of SegWit\n@@ -273,6 +275,7 @@ def run_test(self):\n         self.test_non_standard_witness()\n         self.test_upgrade_after_activation()\n         self.test_witness_sigops()\n+        self.test_superfluous_witness()\n \n     # Individual tests\n \n@@ -2039,5 +2042,31 @@ def test_witness_sigops(self):\n \n         # TODO: test p2sh sigop counting\n \n+    def test_superfluous_witness(self):\n+        # Serialization of tx that puts witness flag to 1 always\n+        def serialize_with_bogus_witness(tx):\n+            flags = 1\n+            r = b\"\"\n+            r += struct.pack(\"<i\", tx.nVersion)\n+            if flags:\n+                dummy = []\n+                r += ser_vector(dummy)\n+                r += struct.pack(\"<B\", flags)\n+            r += ser_vector(tx.vin)\n+            r += ser_vector(tx.vout)\n+            if flags & 1:\n+                if (len(tx.wit.vtxinwit) != len(tx.vin)):\n+                    # vtxinwit must have the same length as vin\n+                    tx.wit.vtxinwit = tx.wit.vtxinwit[:len(tx.vin)]\n+                    for i in range(len(tx.wit.vtxinwit), len(tx.vin)):\n+                        tx.wit.vtxinwit.append(CTxInWitness())\n+                r += tx.wit.serialize()\n+            r += struct.pack(\"<I\", tx.nLockTime)\n+            return r\n+\n+        raw = self.nodes[0].createrawtransaction([{\"txid\":\"00\"*32, \"vout\":0}], {self.nodes[0].getnewaddress():1})\n+        tx = FromHex(CTransaction(), raw)\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, serialize_with_bogus_witness(tx).hex())\n+\n if __name__ == '__main__':\n     SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmMxZjk0NzhmNTJiMDFmMDg1OGM0MDJiM2U3Mzc2MWY4M2U0ZmM2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-13T19:38:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-20T16:25:27Z"
      },
      "message": "Disallow extended encoding for non-witness transactions (take 3)\n\nGithub-Pull: #16021\nRebased-From: fa2b52af32f6a4b9c22c270f36e92960c29ef364",
      "tree": {
        "sha": "3c873282948414ee212ed084af56eb386ad03605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c873282948414ee212ed084af56eb386ad03605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c1f9478f52b01f0858c402b3e73761f83e4fc6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86031083c71e257778e95e21e81532b310472358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86031083c71e257778e95e21e81532b310472358",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86031083c71e257778e95e21e81532b310472358"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ab30104c4725b9020564a61ae1390c50eeb2a13b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c1f9478f52b01f0858c402b3e73761f83e4fc6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c1f9478f52b01f0858c402b3e73761f83e4fc6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
        "patch": "@@ -3096,23 +3096,22 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         if (m_enable_bip61) {\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n         }\n-        if (strstr(e.what(), \"end of data\"))\n-        {\n+        if (strstr(e.what(), \"end of data\")) {\n             // Allow exceptions from under-length message on vRecv\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else if (strstr(e.what(), \"size too large\"))\n-        {\n+        } else if (strstr(e.what(), \"size too large\")) {\n             // Allow exceptions from over-long size\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else if (strstr(e.what(), \"non-canonical ReadCompactSize()\"))\n-        {\n+        } else if (strstr(e.what(), \"non-canonical ReadCompactSize()\")) {\n             // Allow exceptions from non-canonical encoding\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        }\n-        else\n-        {\n+        } else if (strstr(e.what(), \"Superfluous witness record\")) {\n+            // Allow exceptions from illegal witness encoding\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+        } else if (strstr(e.what(), \"Unknown transaction optional data\")) {\n+            // Allow exceptions from unknown witness encoding\n+            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n+        } else {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         }\n     }"
      },
      {
        "sha": "22d3cb1014770e8e2d0969683d5cddcd9c19f02e",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c1f9478f52b01f0858c402b3e73761f83e4fc6/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c1f9478f52b01f0858c402b3e73761f83e4fc6/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
        "patch": "@@ -2043,9 +2043,9 @@ def test_witness_sigops(self):\n         # TODO: test p2sh sigop counting\n \n     def test_superfluous_witness(self):\n-        # Serialization of tx that puts witness flag to 1 always\n+        # Serialization of tx that puts witness flag to 3 always\n         def serialize_with_bogus_witness(tx):\n-            flags = 1\n+            flags = 3\n             r = b\"\"\n             r += struct.pack(\"<i\", tx.nVersion)\n             if flags:\n@@ -2064,9 +2064,29 @@ def serialize_with_bogus_witness(tx):\n             r += struct.pack(\"<I\", tx.nLockTime)\n             return r\n \n-        raw = self.nodes[0].createrawtransaction([{\"txid\":\"00\"*32, \"vout\":0}], {self.nodes[0].getnewaddress():1})\n+        class msg_bogus_tx(msg_tx):\n+            def serialize(self):\n+                return serialize_with_bogus_witness(self.tx)\n+\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(address_type='bech32'), 5)\n+        self.nodes[0].generate(1)\n+        unspent = next(u for u in self.nodes[0].listunspent() if u['spendable'] and u['address'].startswith('bcrt'))\n+\n+        raw = self.nodes[0].createrawtransaction([{\"txid\": unspent['txid'], \"vout\": unspent['vout']}], {self.nodes[0].getnewaddress(): 1})\n         tx = FromHex(CTransaction(), raw)\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, serialize_with_bogus_witness(tx).hex())\n+        with self.nodes[0].assert_debug_log(['Superfluous witness record']):\n+            self.nodes[0].p2p.send_message(msg_bogus_tx(tx))\n+            self.nodes[0].p2p.sync_with_ping()\n+        raw = self.nodes[0].signrawtransactionwithwallet(raw)\n+        assert raw['complete']\n+        raw = raw['hex']\n+        tx = FromHex(CTransaction(), raw)\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, serialize_with_bogus_witness(tx).hex())\n+        with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n+            self.nodes[0].p2p.send_message(msg_bogus_tx(tx))\n+            self.nodes[0].p2p.sync_with_ping()\n+\n \n if __name__ == '__main__':\n     SegWitTest().main()"
      }
    ]
  },
  {
    "sha": "b55cbe82d98338c3c63770d624bda64cb0f472b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTVjYmU4MmQ5ODMzOGMzYzYzNzcwZDYyNGJkYTY0Y2IwZjQ3MmI5",
    "commit": {
      "author": {
        "name": "shannon1916",
        "email": "shannon@unita.network",
        "date": "2019-05-19T08:43:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:11:56Z"
      },
      "message": "qt: fix opening bitcoin.conf via Preferences on macOS; see #15409\n\nGithub-Pull: #16044\nRebased-From: 6e6494b3fb345848025494cb7a79c5bf8f35e417",
      "tree": {
        "sha": "0809f61a8610df6564b746d69cd3f8883aac2315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0809f61a8610df6564b746d69cd3f8883aac2315"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b55cbe82d98338c3c63770d624bda64cb0f472b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55cbe82d98338c3c63770d624bda64cb0f472b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b55cbe82d98338c3c63770d624bda64cb0f472b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55cbe82d98338c3c63770d624bda64cb0f472b9/comments",
    "author": {
      "login": "web3shannon",
      "id": 3756217,
      "node_id": "MDQ6VXNlcjM3NTYyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3756217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web3shannon",
      "html_url": "https://github.com/web3shannon",
      "followers_url": "https://api.github.com/users/web3shannon/followers",
      "following_url": "https://api.github.com/users/web3shannon/following{/other_user}",
      "gists_url": "https://api.github.com/users/web3shannon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web3shannon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web3shannon/subscriptions",
      "organizations_url": "https://api.github.com/users/web3shannon/orgs",
      "repos_url": "https://api.github.com/users/web3shannon/repos",
      "events_url": "https://api.github.com/users/web3shannon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web3shannon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c1f9478f52b01f0858c402b3e73761f83e4fc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c1f9478f52b01f0858c402b3e73761f83e4fc6"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6dba1006b9590119cbd021ec87b967dc39d9444",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b55cbe82d98338c3c63770d624bda64cb0f472b9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b55cbe82d98338c3c63770d624bda64cb0f472b9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b55cbe82d98338c3c63770d624bda64cb0f472b9",
        "patch": "@@ -60,6 +60,7 @@\n \n #include <objc/objc-runtime.h>\n #include <CoreServices/CoreServices.h>\n+#include <QProcess>\n #endif\n \n namespace GUIUtil {\n@@ -392,7 +393,15 @@ bool openBitcoinConf()\n     configFile.close();\n \n     /* Open bitcoin.conf with the associated application */\n-    return QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathConfig)));\n+    bool res = QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathConfig)));\n+#ifdef Q_OS_MAC\n+    // Workaround for macOS-specific behavior; see #15409.\n+    if (!res) {\n+        res = QProcess::startDetached(\"/usr/bin/open\", QStringList{\"-t\", boostPathToQString(pathConfig)});\n+    }\n+#endif\n+\n+    return res;\n }\n \n ToolTipToRichTextFilter::ToolTipToRichTextFilter(int _size_threshold, QObject *parent) :"
      }
    ]
  },
  {
    "sha": "7ed1a601934625a8073324da6e3ec881cec01e05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWQxYTYwMTkzNDYyNWE4MDczMzI0ZGE2ZTNlYzg4MWNlYzAxZTA1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-29T21:53:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:11:56Z"
      },
      "message": "gui: Enable console line edit on setClientModel\n\nGithub-Pull: #16122\nRebased-From: 2d8ad2f99710a8981e33fe2d6ce834b0076c4e80",
      "tree": {
        "sha": "9c72870a1a29654fcb9993888e6ceb3147be2202",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c72870a1a29654fcb9993888e6ceb3147be2202"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ed1a601934625a8073324da6e3ec881cec01e05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed1a601934625a8073324da6e3ec881cec01e05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed1a601934625a8073324da6e3ec881cec01e05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed1a601934625a8073324da6e3ec881cec01e05/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b55cbe82d98338c3c63770d624bda64cb0f472b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55cbe82d98338c3c63770d624bda64cb0f472b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b55cbe82d98338c3c63770d624bda64cb0f472b9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "70ad32752a1d4bd7bfd974353ad392ac94ff1623",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ed1a601934625a8073324da6e3ec881cec01e05/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ed1a601934625a8073324da6e3ec881cec01e05/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=7ed1a601934625a8073324da6e3ec881cec01e05",
        "patch": "@@ -636,6 +636,9 @@\n            <property name=\"placeholderText\">\n             <string/>\n            </property>\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n           </widget>\n          </item>\n         </layout>"
      },
      {
        "sha": "786e36e617b8bdb35c01ab61f1080e717671278e",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ed1a601934625a8073324da6e3ec881cec01e05/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ed1a601934625a8073324da6e3ec881cec01e05/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=7ed1a601934625a8073324da6e3ec881cec01e05",
        "patch": "@@ -680,6 +680,9 @@ void RPCConsole::setClientModel(ClientModel *model)\n         wordList.sort();\n         autoCompleter = new QCompleter(wordList, this);\n         autoCompleter->setModelSorting(QCompleter::CaseSensitivelySortedModel);\n+        // ui->lineEdit is initially disabled because running commands is only\n+        // possible from now on.\n+        ui->lineEdit->setEnabled(true);\n         ui->lineEdit->setCompleter(autoCompleter);\n         autoCompleter->popup()->installEventFilter(this);\n         // Start thread to execute RPC commands."
      }
    ]
  },
  {
    "sha": "d80c558e026a4e500d5894d0c386378ac7a4d20f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODBjNTU4ZTAyNmE0ZTUwMGQ1ODk0ZDBjMzg2Mzc4YWM3YTRkMjBm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-02T16:04:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:11:56Z"
      },
      "message": "gui: Set progressDialog to nullptr\n\nGithub-Pull: #16135\nRebased-From: d2ae6be80f6a0156021bf8c9b9d17cd4966ddffc",
      "tree": {
        "sha": "a620fbc6ee6bbf4ac0b2d344fc8517fbb1b69a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a620fbc6ee6bbf4ac0b2d344fc8517fbb1b69a40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d80c558e026a4e500d5894d0c386378ac7a4d20f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80c558e026a4e500d5894d0c386378ac7a4d20f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d80c558e026a4e500d5894d0c386378ac7a4d20f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80c558e026a4e500d5894d0c386378ac7a4d20f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ed1a601934625a8073324da6e3ec881cec01e05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed1a601934625a8073324da6e3ec881cec01e05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed1a601934625a8073324da6e3ec881cec01e05"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b5c92e10a2228bac5522337c8d89b77ba55df3fd",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d80c558e026a4e500d5894d0c386378ac7a4d20f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d80c558e026a4e500d5894d0c386378ac7a4d20f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d80c558e026a4e500d5894d0c386378ac7a4d20f",
        "patch": "@@ -1341,6 +1341,7 @@ void BitcoinGUI::showProgress(const QString &title, int nProgress)\n         if (progressDialog) {\n             progressDialog->close();\n             progressDialog->deleteLater();\n+            progressDialog = nullptr;\n         }\n     } else if (progressDialog) {\n         progressDialog->setValue(nProgress);"
      },
      {
        "sha": "be47f67f950232a5433bff500b4af7a76143d298",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d80c558e026a4e500d5894d0c386378ac7a4d20f/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d80c558e026a4e500d5894d0c386378ac7a4d20f/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=d80c558e026a4e500d5894d0c386378ac7a4d20f",
        "patch": "@@ -316,6 +316,7 @@ void WalletView::showProgress(const QString &title, int nProgress)\n         if (progressDialog) {\n             progressDialog->close();\n             progressDialog->deleteLater();\n+            progressDialog = nullptr;\n         }\n     } else if (progressDialog) {\n         if (progressDialog->wasCanceled()) {"
      }
    ]
  },
  {
    "sha": "d1f261150b49a957138ef4920203f91f5a8c01b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWYyNjExNTBiNDlhOTU3MTM4ZWY0OTIwMjAzZjkxZjVhOGMwMWI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-08T20:29:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:12:22Z"
      },
      "message": "Add test for GCC bug 90348\n\nGithub-Pull: #15985\nRebased-From: 58e291cfad12fa85af87d093acfa7b44702e3521",
      "tree": {
        "sha": "b8b3bebf44b4564cfe0eb2d5f799867150f39f4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8b3bebf44b4564cfe0eb2d5f799867150f39f4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1f261150b49a957138ef4920203f91f5a8c01b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f261150b49a957138ef4920203f91f5a8c01b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f261150b49a957138ef4920203f91f5a8c01b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f261150b49a957138ef4920203f91f5a8c01b6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d80c558e026a4e500d5894d0c386378ac7a4d20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80c558e026a4e500d5894d0c386378ac7a4d20f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d80c558e026a4e500d5894d0c386378ac7a4d20f"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0408686c176fa285c8e8f78318962c4de31e1222",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f261150b49a957138ef4920203f91f5a8c01b6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f261150b49a957138ef4920203f91f5a8c01b6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d1f261150b49a957138ef4920203f91f5a8c01b6",
        "patch": "@@ -78,6 +78,7 @@ BITCOIN_TESTS =\\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\\n   test/coins_tests.cpp \\\n+  test/compilerbug_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\\n   test/cuckoocache_tests.cpp \\"
      },
      {
        "sha": "701671314f2d5572e3fd538c4328a26928af3f84",
        "filename": "src/test/compilerbug_tests.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1f261150b49a957138ef4920203f91f5a8c01b6/src/test/compilerbug_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1f261150b49a957138ef4920203f91f5a8c01b6/src/test/compilerbug_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compilerbug_tests.cpp?ref=d1f261150b49a957138ef4920203f91f5a8c01b6",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/test_bitcoin.h>\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(compilerbug_tests, BasicTestingSetup)\n+\n+#if defined(__GNUC__)\n+// This block will also be built under clang, which is fine (as it supports noinline)\n+void __attribute__ ((noinline)) set_one(unsigned char* ptr)\n+{\n+    *ptr = 1;\n+}\n+\n+int __attribute__ ((noinline)) check_zero(unsigned char const* in, unsigned int len)\n+{\n+    for (unsigned int i = 0; i < len; ++i) {\n+        if (in[i] != 0) return 0;\n+    }\n+    return 1;\n+}\n+\n+void set_one_on_stack() {\n+    unsigned char buf[1];\n+    set_one(buf);\n+}\n+\n+BOOST_AUTO_TEST_CASE(gccbug_90348) {\n+    // Test for GCC bug 90348. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348\n+    for (int i = 0; i <= 4; ++i) {\n+        unsigned char in[4];\n+        for (int j = 0; j < i; ++j) {\n+            in[j] = 0;\n+            set_one_on_stack(); // Apparently modifies in[0]\n+        }\n+        BOOST_CHECK(check_zero(in, i));\n+    }\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "b2398240ff901715dab39a98b04d4eb9e0a462ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjM5ODI0MGZmOTAxNzE1ZGFiMzlhOThiMDRkNGViOWUwYTQ2MmFl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-29T13:20:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T10:46:19Z"
      },
      "message": "gui: Enable open wallet menu on setWalletController\n\nGithub-Pull: #16118\nRebased-From: 75485ef0962a53946f17b761c4445627b07e6eff",
      "tree": {
        "sha": "1695817aa844eed24f5351d2bfa9fcb195a63a43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1695817aa844eed24f5351d2bfa9fcb195a63a43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2398240ff901715dab39a98b04d4eb9e0a462ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2398240ff901715dab39a98b04d4eb9e0a462ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2398240ff901715dab39a98b04d4eb9e0a462ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2398240ff901715dab39a98b04d4eb9e0a462ae/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1f261150b49a957138ef4920203f91f5a8c01b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1f261150b49a957138ef4920203f91f5a8c01b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1f261150b49a957138ef4920203f91f5a8c01b6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1444dddeb19760df61a632f9f331be73f09c127f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2398240ff901715dab39a98b04d4eb9e0a462ae/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2398240ff901715dab39a98b04d4eb9e0a462ae/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b2398240ff901715dab39a98b04d4eb9e0a462ae",
        "patch": "@@ -335,7 +335,7 @@ void BitcoinGUI::createActions()\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n     m_open_wallet_action = new QAction(tr(\"Open Wallet\"), this);\n-    m_open_wallet_action->setMenu(new QMenu(this));\n+    m_open_wallet_action->setEnabled(false);\n     m_open_wallet_action->setStatusTip(tr(\"Open a wallet\"));\n \n     m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n@@ -633,6 +633,9 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n \n     m_wallet_controller = wallet_controller;\n \n+    m_open_wallet_action->setEnabled(true);\n+    m_open_wallet_action->setMenu(new QMenu(this));\n+\n     connect(wallet_controller, &WalletController::walletAdded, this, &BitcoinGUI::addWallet);\n     connect(wallet_controller, &WalletController::walletRemoved, this, &BitcoinGUI::removeWallet);\n "
      }
    ]
  },
  {
    "sha": "c80a498ae532ad4a8e8027cd8f1057785608b3fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODBhNDk4YWU1MzJhZDRhOGU4MDI3Y2Q4ZjEwNTc3ODU2MDhiM2Zj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-09T11:56:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-14T20:01:37Z"
      },
      "message": "Fix RPC/pruneblockchain returned prune height\n\nGithub-Pull: #15991\nRebased-From: 97f517dd851450b1ede1eb6b20f77691883a7737",
      "tree": {
        "sha": "fb9b85687191364e81b43deb6bb41ae3a01f146b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb9b85687191364e81b43deb6bb41ae3a01f146b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c80a498ae532ad4a8e8027cd8f1057785608b3fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80a498ae532ad4a8e8027cd8f1057785608b3fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c80a498ae532ad4a8e8027cd8f1057785608b3fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80a498ae532ad4a8e8027cd8f1057785608b3fc/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2398240ff901715dab39a98b04d4eb9e0a462ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2398240ff901715dab39a98b04d4eb9e0a462ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2398240ff901715dab39a98b04d4eb9e0a462ae"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd351630748896c9b1e30dffc339be64fbe8a063",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80a498ae532ad4a8e8027cd8f1057785608b3fc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80a498ae532ad4a8e8027cd8f1057785608b3fc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c80a498ae532ad4a8e8027cd8f1057785608b3fc",
        "patch": "@@ -1030,7 +1030,12 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n     }\n \n     PruneBlockFilesManual(height);\n-    return uint64_t(height);\n+    const CBlockIndex* block = ::chainActive.Tip();\n+    assert(block);\n+    while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+        block = block->pprev;\n+    }\n+    return uint64_t(block->nHeight);\n }\n \n static UniValue gettxoutsetinfo(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "592016ba18f2fbcb382ac0306ae89aba1b4be843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTIwMTZiYTE4ZjJmYmNiMzgyYWMwMzA2YWU4OWFiYTFiNGJlODQz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-25T09:59:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-14T20:01:37Z"
      },
      "message": "fixup: Fix prunning test\n\nGithub-Pull: #15991\nRebased-From: f402012ccfc596d7d94851dabbf386c278ff5335",
      "tree": {
        "sha": "cf9835797e83d0abf1898afd6993fdd2f982ee15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf9835797e83d0abf1898afd6993fdd2f982ee15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/592016ba18f2fbcb382ac0306ae89aba1b4be843",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/592016ba18f2fbcb382ac0306ae89aba1b4be843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/592016ba18f2fbcb382ac0306ae89aba1b4be843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/592016ba18f2fbcb382ac0306ae89aba1b4be843/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c80a498ae532ad4a8e8027cd8f1057785608b3fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80a498ae532ad4a8e8027cd8f1057785608b3fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c80a498ae532ad4a8e8027cd8f1057785608b3fc"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 4,
      "deletions": 17
    },
    "files": [
      {
        "sha": "b3dd699fda920c11292c8b4ba6ca903136df6ac2",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 17,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592016ba18f2fbcb382ac0306ae89aba1b4be843/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592016ba18f2fbcb382ac0306ae89aba1b4be843/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=592016ba18f2fbcb382ac0306ae89aba1b4be843",
        "patch": "@@ -10,12 +10,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes, mine_large_block, sync_blocks, wait_until\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, mine_large_block, sync_blocks, wait_until\n \n import os\n \n-MIN_BLOCKS_TO_KEEP = 288\n-\n # Rescans start at the earliest block up to 2 hours before a key timestamp, so\n # the manual prune RPC avoids pruning blocks in the same window to be\n # compatible with pruning based on key creation time.\n@@ -250,20 +248,9 @@ def height(index):\n             else:\n                 return index\n \n-        def prune(index, expected_ret=None):\n+        def prune(index):\n             ret = node.pruneblockchain(height=height(index))\n-            # Check the return value. When use_timestamp is True, just check\n-            # that the return value is less than or equal to the expected\n-            # value, because when more than one block is generated per second,\n-            # a timestamp will not be granular enough to uniquely identify an\n-            # individual block.\n-            if expected_ret is None:\n-                expected_ret = index\n-            if use_timestamp:\n-                assert_greater_than(ret, 0)\n-                assert_greater_than(expected_ret + 1, ret)\n-            else:\n-                assert_equal(ret, expected_ret)\n+            assert_equal(ret, node.getblockchaininfo()['pruneheight'])\n \n         def has_block(index):\n             return os.path.isfile(os.path.join(self.nodes[node_number].datadir, \"regtest\", \"blocks\", \"blk{:05}.dat\".format(index)))\n@@ -308,7 +295,7 @@ def has_block(index):\n             raise AssertionError(\"blk00001.dat is still there, should be pruned by now\")\n \n         # height=1000 should not prune anything more, because tip-288 is in blk00002.dat.\n-        prune(1000, 1001 - MIN_BLOCKS_TO_KEEP)\n+        prune(1000)\n         if not has_block(2):\n             raise AssertionError(\"blk00002.dat is still there, should be pruned by now\")\n "
      }
    ]
  },
  {
    "sha": "d24d0ec056b05a0791e6befc8b02e680187b0ce1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjRkMGVjMDU2YjA1YTA3OTFlNmJlZmM4YjAyZTY4MDE4N2IwY2Ux",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2019-06-14T02:33:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-17T17:06:19Z"
      },
      "message": "Add example 2nd arg to signrawtransactionwithkey\n\nThe RPC examples for signrawtransactionwithkey are missing the 2nd parameter.\n\nGithub-Pull: #16210\nRebased-From: 71fd628adafdeb2a4b343e0d51d7168cdb186312",
      "tree": {
        "sha": "14a41c990ef740a97982036d91e77996654ce3b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14a41c990ef740a97982036d91e77996654ce3b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d24d0ec056b05a0791e6befc8b02e680187b0ce1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24d0ec056b05a0791e6befc8b02e680187b0ce1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d24d0ec056b05a0791e6befc8b02e680187b0ce1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24d0ec056b05a0791e6befc8b02e680187b0ce1/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "592016ba18f2fbcb382ac0306ae89aba1b4be843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/592016ba18f2fbcb382ac0306ae89aba1b4be843",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/592016ba18f2fbcb382ac0306ae89aba1b4be843"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "19ec6f1abe649c67e326cca3da806c39a4185919",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d24d0ec056b05a0791e6befc8b02e680187b0ce1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d24d0ec056b05a0791e6befc8b02e680187b0ce1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d24d0ec056b05a0791e6befc8b02e680187b0ce1",
        "patch": "@@ -996,8 +996,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+                    HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\" \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\", \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n                 },\n             }.ToString());\n "
      }
    ]
  },
  {
    "sha": "bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjM2YWM4MmVmYjU3NmQxMmI3ZGRhYzJjM2Y5Mjc3YmU5YTc0YzJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-26T13:09:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T13:32:17Z"
      },
      "message": "rpc: Switch touched RPCs to IsValidNumArgs\n\nGithub-Pull: #15899\nRebased-From: fa5c5cd141f0265a5693234690ac757b811157d8",
      "tree": {
        "sha": "0ce843228c426ff3963e756e02f13dffc595bc64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ce843228c426ff3963e756e02f13dffc595bc64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d24d0ec056b05a0791e6befc8b02e680187b0ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24d0ec056b05a0791e6befc8b02e680187b0ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d24d0ec056b05a0791e6befc8b02e680187b0ce1"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "fdd4accacfb12c922848b10bc2bbf85768ecf1a1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
        "patch": "@@ -535,9 +535,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n \n static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"decoderawtransaction\",\n+    const RPCHelpMan help{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n@@ -589,7 +587,11 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -1643,9 +1645,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n \n UniValue converttopsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"converttopsbt\",\n+    const RPCHelpMan help{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n@@ -1666,7 +1666,11 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);"
      },
      {
        "sha": "14c06624afef1948559ddf0437ded954bd577d25",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
        "patch": "@@ -3040,9 +3040,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"fundrawtransaction\",\n+    const RPCHelpMan help{\"fundrawtransaction\",\n                 \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                 \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -3101,7 +3099,11 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                                 },\n-                            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n "
      }
    ]
  },
  {
    "sha": "966d8d08425cce597c8429754a668d2f556870d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjZkOGQwODQyNWNjZTU5N2M4NDI5NzU0YTY2OGQyZjU1Njg3MGQy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-27T17:43:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T13:34:04Z"
      },
      "message": "Bugfix: test/functional/rpc_psbt: Remove check for specific error message that depends on uncertain assumptions\n\nWhen converttopsbt is called with a signed transaction, it either fails with \"TX decode failed\" if one or more inputs were segwit, or \"Inputs must not have scriptSigs and scriptWitnesses\" otherwise.\nSince no effort is made by the test to ensure the inputs are segwit or not, avoid checking the exact message used.\nThe error code is still checked to ensure it is of the correct kind of failure.\n\nGithub-Pull: #14818\nRebased-From: 097c4aa379f255639ce0084702693fa72a595d6b",
      "tree": {
        "sha": "bee0cdeafa4456339c166527c9ba4073637f959b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bee0cdeafa4456339c166527c9ba4073637f959b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/966d8d08425cce597c8429754a668d2f556870d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d8d08425cce597c8429754a668d2f556870d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/966d8d08425cce597c8429754a668d2f556870d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d8d08425cce597c8429754a668d2f556870d2/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb36ac82efb576d12b7ddac2c3f9277be9a74c2e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b0480bf12ab06b94f679914c1a990a3f3ad5980",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966d8d08425cce597c8429754a668d2f556870d2/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966d8d08425cce597c8429754a668d2f556870d2/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=966d8d08425cce597c8429754a668d2f556870d2",
        "patch": "@@ -145,9 +145,10 @@ def run_test(self):\n         self.nodes[0].decodepsbt(new_psbt)\n \n         # Make sure that a psbt with signatures cannot be converted\n+        # Error could be either \"TX decode failed\" (segwit inputs causes parsing to fail) or \"Inputs must not have scriptSigs and scriptWitnesses\"\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n-        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'])\n-        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'])\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n         # Unless we allow it to convert and strip signatures\n         self.nodes[0].converttopsbt(signedtx['hex'], True)\n "
      }
    ]
  },
  {
    "sha": "832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzJlYjRmZjU0YWViZjg2ZTVlMGE0Nzk0ZWU0NmNmM2Y4YjQ3MGFl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-27T17:46:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T13:34:06Z"
      },
      "message": "Bugfix: test/functional/rpc_psbt: Correct test description comment\n\nGithub-Pull: #14818\nRebased-From: c87fc71f7e9316bcc0653cd86c50177424b5b1f9",
      "tree": {
        "sha": "cd2b5b623200eced7332b3966373eb16df0bd341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd2b5b623200eced7332b3966373eb16df0bd341"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "966d8d08425cce597c8429754a668d2f556870d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d8d08425cce597c8429754a668d2f556870d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/966d8d08425cce597c8429754a668d2f556870d2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "84acd9c8250e34ae3bd0a62c344db3801a33bf27",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
        "patch": "@@ -144,7 +144,7 @@ def run_test(self):\n         new_psbt = self.nodes[0].converttopsbt(rawtx['hex'])\n         self.nodes[0].decodepsbt(new_psbt)\n \n-        # Make sure that a psbt with signatures cannot be converted\n+        # Make sure that a non-psbt with signatures cannot be converted\n         # Error could be either \"TX decode failed\" (segwit inputs causes parsing to fail) or \"Inputs must not have scriptSigs and scriptWitnesses\"\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n         assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'])"
      }
    ]
  },
  {
    "sha": "0023c978905b462e614872a7674d4225e1cf7007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDIzYzk3ODkwNWI0NjJlNjE0ODcyYTc2NzRkNDIyNWUxY2Y3MDA3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-26T13:04:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T13:34:10Z"
      },
      "message": "rpc: bugfix: Properly use iswitness in converttopsbt\n\nAlso explain the param in all RPCs\n\nGithub-Pull: #15899\nRebased-From: fa499b5f027f77c0bf13699852c8c06f78e27bef",
      "tree": {
        "sha": "d1f0a93fce62367539440608f49ec87630fedb7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1f0a93fce62367539440608f49ec87630fedb7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0023c978905b462e614872a7674d4225e1cf7007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023c978905b462e614872a7674d4225e1cf7007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0023c978905b462e614872a7674d4225e1cf7007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023c978905b462e614872a7674d4225e1cf7007/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/832eb4ff54aebf86e5e0a4794ee46cf3f8b470ae"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ae4fed285a9db79abb0699e03cd1dff0841469e2",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0023c978905b462e614872a7674d4225e1cf7007/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0023c978905b462e614872a7674d4225e1cf7007/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0023c978905b462e614872a7674d4225e1cf7007",
        "patch": "@@ -539,8 +539,13 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n-            \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1650,12 +1655,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n-                            \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n-                            \"                              permitsigdata is true.\"},\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n@@ -1672,16 +1680,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n         throw std::runtime_error(help.ToString());\n     }\n \n-\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);\n \n     // parse hex string from parameter\n     CMutableTransaction tx;\n     bool permitsigdata = request.params[1].isNull() ? false : request.params[1].get_bool();\n     bool witness_specified = !request.params[2].isNull();\n     bool iswitness = witness_specified ? request.params[2].get_bool() : false;\n-    bool try_witness = permitsigdata ? (witness_specified ? iswitness : true) : false;\n-    bool try_no_witness = permitsigdata ? (witness_specified ? !iswitness : true) : true;\n+    const bool try_witness = witness_specified ? iswitness : true;\n+    const bool try_no_witness = witness_specified ? !iswitness : true;\n     if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }"
      },
      {
        "sha": "f535e2b36fd7482c3ad3faf36a712cf248f9cc02",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0023c978905b462e614872a7674d4225e1cf7007/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0023c978905b462e614872a7674d4225e1cf7007/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0023c978905b462e614872a7674d4225e1cf7007",
        "patch": "@@ -3079,8 +3079,13 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n                             \"{\\n\""
      },
      {
        "sha": "6c0aec922883576a80c291dcdfb4c6ca5ed56661",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0023c978905b462e614872a7674d4225e1cf7007/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0023c978905b462e614872a7674d4225e1cf7007/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=0023c978905b462e614872a7674d4225e1cf7007",
        "patch": "@@ -146,9 +146,10 @@ def run_test(self):\n \n         # Make sure that a non-psbt with signatures cannot be converted\n         # Error could be either \"TX decode failed\" (segwit inputs causes parsing to fail) or \"Inputs must not have scriptSigs and scriptWitnesses\"\n+        # We must set iswitness=True because the serialized transaction has inputs and is therefore a witness transaction\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n-        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'])\n-        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, hexstring=signedtx['hex'], iswitness=True)\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, hexstring=signedtx['hex'], permitsigdata=False, iswitness=True)\n         # Unless we allow it to convert and strip signatures\n         self.nodes[0].converttopsbt(signedtx['hex'], True)\n "
      }
    ]
  },
  {
    "sha": "f88959ba7c30d82d7fd70a399326a4347cc36911",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODg5NTliYTdjMzBkODJkN2ZkNzBhMzk5MzI2YTQzNDdjYzM2OTEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:04:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T19:48:16Z"
      },
      "message": "tinyformat: Add doc to Bitcoin Core specific strprintf\n\nGithub-Pull: #16205\nRebased-From: fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
      "tree": {
        "sha": "d2367e49a61d2cfda689ec8749a66252cd6a2971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2367e49a61d2cfda689ec8749a66252cd6a2971"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f88959ba7c30d82d7fd70a399326a4347cc36911",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88959ba7c30d82d7fd70a399326a4347cc36911",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f88959ba7c30d82d7fd70a399326a4347cc36911",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88959ba7c30d82d7fd70a399326a4347cc36911/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0023c978905b462e614872a7674d4225e1cf7007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023c978905b462e614872a7674d4225e1cf7007",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0023c978905b462e614872a7674d4225e1cf7007"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "182f518a0b526015ce01f59a4d9d5267a7e7c336",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f88959ba7c30d82d7fd70a399326a4347cc36911/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f88959ba7c30d82d7fd70a399326a4347cc36911/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=f88959ba7c30d82d7fd70a399326a4347cc36911",
        "patch": "@@ -1063,6 +1063,7 @@ std::string format(const std::string &fmt, const Args&... args)\n \n } // namespace tinyformat\n \n+/** Format arguments and return the string or write to given std::ostream (see tinyformat::format doc for details) */\n #define strprintf tfm::format\n \n #endif // TINYFORMAT_H_INCLUDED"
      }
    ]
  },
  {
    "sha": "e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjlhYTZlNzJlY2Y5ZTA1MzA3MTJiZDZjNTc5MGI3MjUyZDlhZTg0",
    "commit": {
      "author": {
        "name": "Kristaps Kaupe",
        "email": "kristaps@blogiem.lv",
        "date": "2019-05-26T15:35:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T19:49:58Z"
      },
      "message": "Exceptions should be caught by reference, not by value.\n\nGithub-Pull: #16095\nRebased-From: ae7faf20d5fb3e2415ccadc37100dfc44aa0cd94",
      "tree": {
        "sha": "c51d0367a5ed7610149ec9c72e5fe7c72c966ada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c51d0367a5ed7610149ec9c72e5fe7c72c966ada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84/comments",
    "author": {
      "login": "kristapsk",
      "id": 4500994,
      "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kristapsk",
      "html_url": "https://github.com/kristapsk",
      "followers_url": "https://api.github.com/users/kristapsk/followers",
      "following_url": "https://api.github.com/users/kristapsk/following{/other_user}",
      "gists_url": "https://api.github.com/users/kristapsk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
      "organizations_url": "https://api.github.com/users/kristapsk/orgs",
      "repos_url": "https://api.github.com/users/kristapsk/repos",
      "events_url": "https://api.github.com/users/kristapsk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kristapsk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f88959ba7c30d82d7fd70a399326a4347cc36911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f88959ba7c30d82d7fd70a399326a4347cc36911",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f88959ba7c30d82d7fd70a399326a4347cc36911"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b47195cfb658cd982b51598635c9366fe45dbe3e",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
        "patch": "@@ -62,7 +62,7 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n     try {\n         bool first_run;\n         load_wallet_ret = wallet_instance->LoadWallet(first_run);\n-    } catch (const std::runtime_error) {\n+    } catch (const std::runtime_error&) {\n         fprintf(stderr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n         return nullptr;\n     }"
      }
    ]
  },
  {
    "sha": "beb09f09b3749563126f09dba2ac9d884c587678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWIwOWYwOWIzNzQ5NTYzMTI2ZjA5ZGJhMmFjOWQ4ODRjNTg3Njc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:16:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T19:50:02Z"
      },
      "message": "scripted-diff: Replace fprintf with tfm::format\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/fprintf\\(std(err|out), /tfm::format(std::c\\1, /g' $(git grep -l 'fprintf(' -- ':(exclude)src/crypto' ':(exclude)src/leveldb' ':(exclude)src/univalue' ':(exclude)src/secp256k1')\n-END VERIFY SCRIPT-\n\nfixup! scripted-diff: Replace fprintf with tfm::format\n\nGithub-Pull: #16205\nRebased-From: fac03ec43a15ad547161e37e53ea82482cc508f9",
      "tree": {
        "sha": "cdc0e589b595fc6b82908f3b2ec251266abb2b3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdc0e589b595fc6b82908f3b2ec251266abb2b3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beb09f09b3749563126f09dba2ac9d884c587678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb09f09b3749563126f09dba2ac9d884c587678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beb09f09b3749563126f09dba2ac9d884c587678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb09f09b3749563126f09dba2ac9d884c587678/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e29aa6e72ecf9e0530712bd6c5790b7252d9ae84"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "f46c5070453d6b9e92f04b441d2d181480f10e6d",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -49,7 +49,7 @@ int main(int argc, char** argv)\n     SetupBenchArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n \n@@ -73,7 +73,7 @@ int main(int argc, char** argv)\n \n     double scaling_factor;\n     if (!ParseDouble(scaling_str, &scaling_factor)) {\n-        fprintf(stderr, \"Error parsing scaling factor as double: %s\\n\", scaling_str.c_str());\n+        tfm::format(std::cerr, \"Error parsing scaling factor as double: %s\\n\", scaling_str.c_str());\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "774a255b682a896e452194e0c3f1a036e1358a30",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -101,7 +101,7 @@ static int AppInitRPC(int argc, char* argv[])\n     SetupCliArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n     if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n@@ -115,26 +115,26 @@ static int AppInitRPC(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n         if (argc < 2) {\n-            fprintf(stderr, \"Error: too few parameters\\n\");\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n             return EXIT_FAILURE;\n         }\n         return EXIT_SUCCESS;\n     }\n     if (!fs::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }\n     if (!gArgs.ReadConfigFiles(error, true)) {\n-        fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n     return CONTINUE_EXECUTION;\n@@ -512,7 +512,7 @@ int main(int argc, char* argv[])\n #endif\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n-        fprintf(stderr, \"Error: Initializing networking failed\\n\");\n+        tfm::format(std::cerr, \"Error: Initializing networking failed\\n\");\n         return EXIT_FAILURE;\n     }\n     event_set_log_callback(&libevent_log_cb);"
      },
      {
        "sha": "6a7a22fb154dca4245a3ccdd24340bcd6519905e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -81,15 +81,15 @@ static int AppInitRawTx(int argc, char* argv[])\n     SetupBitcoinTxArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n \n@@ -103,10 +103,10 @@ static int AppInitRawTx(int argc, char* argv[])\n             \"\\n\";\n         strUsage += gArgs.GetHelpMessage();\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n \n         if (argc < 2) {\n-            fprintf(stderr, \"Error: too few parameters\\n\");\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n             return EXIT_FAILURE;\n         }\n         return EXIT_SUCCESS;\n@@ -722,21 +722,21 @@ static void OutputTxJSON(const CTransaction& tx)\n     TxToUniv(tx, uint256(), entry);\n \n     std::string jsonOutput = entry.write(4);\n-    fprintf(stdout, \"%s\\n\", jsonOutput.c_str());\n+    tfm::format(std::cout, \"%s\\n\", jsonOutput.c_str());\n }\n \n static void OutputTxHash(const CTransaction& tx)\n {\n     std::string strHexHash = tx.GetHash().GetHex(); // the hex-encoded transaction hash (aka the transaction id)\n \n-    fprintf(stdout, \"%s\\n\", strHexHash.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHexHash.c_str());\n }\n \n static void OutputTxHex(const CTransaction& tx)\n {\n     std::string strHex = EncodeHexTx(tx);\n \n-    fprintf(stdout, \"%s\\n\", strHex.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHex.c_str());\n }\n \n static void OutputTx(const CTransaction& tx)"
      },
      {
        "sha": "ea311e7cc52ccd7e7b66aa3a3bb892d4afa0fadc",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -37,7 +37,7 @@ static bool WalletAppInit(int argc, char* argv[])\n     SetupWalletToolArgs();\n     std::string error_message;\n     if (!gArgs.ParseParameters(argc, argv, error_message)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n         return false;\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n@@ -49,15 +49,15 @@ static bool WalletAppInit(int argc, char* argv[])\n                                      \"  bitcoin-wallet [options] <command>\\n\\n\" +\n                                      gArgs.GetHelpMessage();\n \n-        fprintf(stdout, \"%s\", usage.c_str());\n+        tfm::format(std::cout, \"%s\", usage.c_str());\n         return false;\n     }\n \n     // check for printtoconsole, allow -debug\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n \n     if (!fs::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n@@ -88,21 +88,21 @@ int main(int argc, char* argv[])\n     for(int i = 1; i < argc; ++i) {\n         if (!IsSwitchChar(argv[i][0])) {\n             if (!method.empty()) {\n-                fprintf(stderr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n+                tfm::format(std::cerr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n                 return EXIT_FAILURE;\n             }\n             method = argv[i];\n         }\n     }\n \n     if (method.empty()) {\n-        fprintf(stderr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n+        tfm::format(std::cerr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n         return EXIT_FAILURE;\n     }\n \n     // A name must be provided when creating a file\n     if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n-        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "22120f9cf293858e99d05b7ba1989c9954049911",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -71,7 +71,7 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return false;\n     }\n \n@@ -89,33 +89,33 @@ static bool AppInit(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n         return true;\n     }\n \n     try\n     {\n         if (!fs::is_directory(GetDataDir(false)))\n         {\n-            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+            tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n+            tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            fprintf(stderr, \"Error: %s\\n\", e.what());\n+            tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                fprintf(stderr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n+                tfm::format(std::cerr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n                 return false;\n             }\n         }\n@@ -147,18 +147,18 @@ static bool AppInit(int argc, char* argv[])\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #endif\n-            fprintf(stdout, \"Bitcoin server starting\\n\");\n+            tfm::format(std::cout, \"Bitcoin server starting\\n\");\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                fprintf(stderr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n+                tfm::format(std::cerr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n                 return false;\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            fprintf(stderr, \"Error: -daemon is not supported on this operating system\\n\");\n+            tfm::format(std::cerr, \"Error: -daemon is not supported on this operating system\\n\");\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }"
      },
      {
        "sha": "0c18b0e231c23cdf6737d6e9c9bef99d7e490ce4",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -37,7 +37,7 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n \n     if (!fSecure)\n         LogPrintf(\"%s: %s\\n\", strCaption, message);\n-    fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n+    tfm::format(std::cerr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     return false;\n }\n "
      },
      {
        "sha": "2a13c46013961f9f6a176b99c4613bdf5371a3cc",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -129,7 +129,7 @@ HelpMessageDialog::~HelpMessageDialog()\n void HelpMessageDialog::printToConsole()\n {\n     // On other operating systems, the expected action is to print the message to the console.\n-    fprintf(stdout, \"%s\\n\", qPrintable(text));\n+    tfm::format(std::cout, \"%s\\n\", qPrintable(text));\n }\n \n void HelpMessageDialog::showOrPrint()"
      },
      {
        "sha": "9c42d568af0a7ff38e9841b64d1dad4c3ccfdfcf",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -105,7 +105,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     if (g_debug_lockorder_abort) {\n-        fprintf(stderr, \"Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\\n\", __FILE__, __LINE__);\n+        tfm::format(std::cerr, \"Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\\n\", __FILE__, __LINE__);\n         abort();\n     }\n     throw std::logic_error(\"potential deadlock detected\");\n@@ -162,15 +162,15 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n         if (i.first == cs)\n             return;\n-    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n     abort();\n }\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n         if (i.first == cs) {\n-            fprintf(stderr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n             abort();\n         }\n     }"
      },
      {
        "sha": "7ccb9ef9e79f92117759d005a59e8b252eeb1979",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -675,7 +675,7 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n {\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n+    tfm::format(std::cerr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n fs::path GetDefaultDataDir()\n@@ -935,7 +935,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                 }\n             }\n             for (const std::string& to_include : includeconf) {\n-                fprintf(stderr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());\n+                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());\n             }\n         }\n     }"
      },
      {
        "sha": "d460c514e0341275042604527365bad00906e8e2",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beb09f09b3749563126f09dba2ac9d884c587678/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beb09f09b3749563126f09dba2ac9d884c587678/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=beb09f09b3749563126f09dba2ac9d884c587678",
        "patch": "@@ -24,7 +24,7 @@ static void WalletToolReleaseWallet(CWallet* wallet)\n static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n {\n     if (fs::exists(path)) {\n-        fprintf(stderr, \"Error: File exists already\\n\");\n+        tfm::format(std::cerr, \"Error: File exists already\\n\");\n         return nullptr;\n     }\n     // dummy chain interface\n@@ -33,7 +33,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n-        fprintf(stderr, \"Error creating %s\", name.c_str());\n+        tfm::format(std::cerr, \"Error creating %s\", name.c_str());\n         return nullptr;\n     }\n \n@@ -43,15 +43,15 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     CPubKey seed = wallet_instance->GenerateNewSeed();\n     wallet_instance->SetHDSeed(seed);\n \n-    fprintf(stdout, \"Topping up keypool...\\n\");\n+    tfm::format(std::cout, \"Topping up keypool...\\n\");\n     wallet_instance->TopUpKeyPool();\n     return wallet_instance;\n }\n \n static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n {\n     if (!fs::exists(path)) {\n-        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        tfm::format(std::cerr, \"Error: Wallet files does not exist\\n\");\n         return nullptr;\n     }\n \n@@ -63,28 +63,28 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n         bool first_run;\n         load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     } catch (const std::runtime_error&) {\n-        fprintf(stderr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n+        tfm::format(std::cerr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n         return nullptr;\n     }\n \n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n         wallet_instance = nullptr;\n         if (load_wallet_ret == DBErrors::CORRUPT) {\n-            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s: Wallet corrupted\", name.c_str());\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n-            fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n+            tfm::format(std::cerr, \"Error reading %s! All keys read correctly, but transaction data\"\n                             \" or address book entries might be missing or incorrect.\",\n                 name.c_str());\n         } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n-            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+            tfm::format(std::cerr, \"Error loading %s: Wallet requires newer version of %s\",\n                 name.c_str(), PACKAGE_NAME);\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n-            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            tfm::format(std::cerr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n             return nullptr;\n         } else {\n-            fprintf(stderr, \"Error loading %s\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s\", name.c_str());\n             return nullptr;\n         }\n     }\n@@ -96,12 +96,12 @@ static void WalletShowInfo(CWallet* wallet_instance)\n {\n     LOCK(wallet_instance->cs_wallet);\n \n-    fprintf(stdout, \"Wallet info\\n===========\\n\");\n-    fprintf(stdout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    fprintf(stdout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n-    fprintf(stdout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n-    fprintf(stdout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n-    fprintf(stdout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n+    tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n+    tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n+    tfm::format(std::cout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n+    tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n@@ -116,20 +116,20 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         }\n     } else if (command == \"info\") {\n         if (!fs::exists(path)) {\n-            fprintf(stderr, \"Error: no wallet file at %s\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name.c_str());\n             return false;\n         }\n         std::string error;\n         if (!WalletBatch::VerifyEnvironment(path, error)) {\n-            fprintf(stderr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n             return false;\n         }\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Flush(true);\n     } else {\n-        fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n+        tfm::format(std::cerr, \"Invalid command: %s\\n\", command.c_str());\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "79745d1752d0d1a95f073a04d6f4b9715745cf17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTc0NWQxNzUyZDBkMWE5NWYwNzNhMDRkNmY0Yjk3MTU3NDVjZjE3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:43:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-18T19:50:40Z"
      },
      "message": "Replace remaining fprintf with tfm::format manually\n\nGithub-Pull: #16205\nRebased-From: fa8f195195945ce6258199af0461e3fbfbc1236d",
      "tree": {
        "sha": "21de08b84a5a1d87ea1322a2f9e9cbec1a75e138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21de08b84a5a1d87ea1322a2f9e9cbec1a75e138"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79745d1752d0d1a95f073a04d6f4b9715745cf17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79745d1752d0d1a95f073a04d6f4b9715745cf17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79745d1752d0d1a95f073a04d6f4b9715745cf17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79745d1752d0d1a95f073a04d6f4b9715745cf17/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beb09f09b3749563126f09dba2ac9d884c587678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beb09f09b3749563126f09dba2ac9d884c587678",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beb09f09b3749563126f09dba2ac9d884c587678"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "76cc19cc881e177c85206a909e6f5ee23ae5dd06",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "patch": "@@ -499,7 +499,7 @@ static int CommandLineRPC(int argc, char *argv[])\n     }\n \n     if (strPrint != \"\") {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n     }\n     return nRet;\n }"
      },
      {
        "sha": "dcf6dddf291086ad133b0a3539d71630b6b73b7d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "patch": "@@ -827,7 +827,7 @@ static int CommandLineRawTx(int argc, char* argv[])\n     }\n \n     if (strPrint != \"\") {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n     }\n     return nRet;\n }"
      },
      {
        "sha": "557102efc4cb4becf66a39f854f510246dfa1e25",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79745d1752d0d1a95f073a04d6f4b9715745cf17/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "patch": "@@ -106,14 +106,13 @@ static fs::path GetPidFile()\n \n NODISCARD static bool CreatePidFile()\n {\n-    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n+    fsbridge::ofstream file{GetPidFile()};\n     if (file) {\n #ifdef WIN32\n-        fprintf(file, \"%d\\n\", GetCurrentProcessId());\n+        tfm::format(file, \"%d\\n\", GetCurrentProcessId());\n #else\n-        fprintf(file, \"%d\\n\", getpid());\n+        tfm::format(file, \"%d\\n\", getpid());\n #endif\n-        fclose(file);\n         return true;\n     } else {\n         return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));"
      },
      {
        "sha": "cb630c78adeba2242aa33c6ce54edc4c662c8299",
        "filename": "test/lint/lint-format-strings.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79745d1752d0d1a95f073a04d6f4b9715745cf17/test/lint/lint-format-strings.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79745d1752d0d1a95f073a04d6f4b9715745cf17/test/lint/lint-format-strings.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.sh?ref=79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "patch": "@@ -13,6 +13,7 @@ export LC_ALL=C\n FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS=(\n     \"FatalError,0\"\n     \"fprintf,1\"\n+    \"tfm::format,1\" # Assuming tfm::::format(std::ostream&, ...\n     \"LogConnectFailure,1\"\n     \"LogPrint,1\"\n     \"LogPrintf,0\""
      },
      {
        "sha": "9a1aa766f79116727692ef6c0a004960bbe75fa5",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79745d1752d0d1a95f073a04d6f4b9715745cf17/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79745d1752d0d1a95f073a04d6f4b9715745cf17/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "patch": "@@ -8,7 +8,6 @@ KNOWN_VIOLATIONS=(\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n     \"src/httprpc.cpp.*trim\"\n     \"src/init.cpp:.*atoi\"\n-    \"src/init.cpp:.*fprintf\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n@@ -85,7 +84,7 @@ LOCALE_DEPENDENT_FUNCTIONS=(\n     mbtowc       # LC_CTYPE\n     mktime\n     normalize    # boost::locale::normalize\n-#   printf       # LC_NUMERIC\n+    printf       # LC_NUMERIC\n     putwc\n     putwchar\n     scanf        # LC_NUMERIC\n@@ -189,8 +188,7 @@ GIT_GREP_OUTPUT=$(git grep -E \"[^a-zA-Z0-9_\\`'\\\"<>](${REGEXP_LOCALE_DEPENDENT_FU\n EXIT_CODE=0\n for LOCALE_DEPENDENT_FUNCTION in \"${LOCALE_DEPENDENT_FUNCTIONS[@]}\"; do\n     MATCHES=$(grep -E \"[^a-zA-Z0-9_\\`'\\\"<>]${LOCALE_DEPENDENT_FUNCTION}(_r|_s)?[^a-zA-Z0-9_\\`'\\\"<>]\" <<< \"${GIT_GREP_OUTPUT}\" | \\\n-        grep -vE \"\\.(c|cpp|h):\\s*(//|\\*|/\\*|\\\").*${LOCALE_DEPENDENT_FUNCTION}\" | \\\n-        grep -vE 'fprintf\\(.*(stdout|stderr)')\n+        grep -vE \"\\.(c|cpp|h):\\s*(//|\\*|/\\*|\\\").*${LOCALE_DEPENDENT_FUNCTION}\")\n     if [[ ${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES} != \"\" ]]; then\n         MATCHES=$(grep -vE \"${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES}\" <<< \"${MATCHES}\")\n     fi"
      }
    ]
  },
  {
    "sha": "13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2IzYmI1NjQ0ODViMjM5ODIyZmI4YmJkYWI3Y2U1MjhmMGYwZDZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-16T17:06:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-21T12:17:19Z"
      },
      "message": "test: Fixup creatmultisig documentation and whitespace\n\nGithub-Pull: #15831\nRebased-From: fad81d870aa6dd25d4fab5faad4c956ba364734a",
      "tree": {
        "sha": "9747f34ce7b16d2804d5f003dd25b064efba68e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9747f34ce7b16d2804d5f003dd25b064efba68e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b3bb564485b239822fb8bbdab7ce528f0f0d6f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79745d1752d0d1a95f073a04d6f4b9715745cf17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79745d1752d0d1a95f073a04d6f4b9715745cf17"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "553be2d2bdddf8aebaeba43ad34d570920290a24",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b3bb564485b239822fb8bbdab7ce528f0f0d6f/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b3bb564485b239822fb8bbdab7ce528f0f0d6f/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
        "patch": "@@ -1,12 +1,13 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n+\"\"\"Test multisig RPCs\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n import decimal\n \n+\n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -17,29 +18,29 @@ def skip_test_if_missing_module(self):\n \n     def get_keys(self):\n         node0, node1, node2 = self.nodes\n-        self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n-        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n-        self.priv = [node1.dumpprivkey(a) for a in self.add]\n+        add = [node1.getnewaddress() for _ in range(self.nkeys)]\n+        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in add]\n+        self.priv = [node1.dumpprivkey(a) for a in add]\n         self.final = node2.getnewaddress()\n \n     def run_test(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n \n         # 50 BTC each, rest will be 25 BTC each\n         node0.generate(149)\n         self.sync_all()\n \n         self.moved = 0\n-        for self.nkeys in [3,5]:\n-            for self.nsigs in [2,3]:\n+        for self.nkeys in [3, 5]:\n+            for self.nsigs in [2, 3]:\n                 for self.output_type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:\n                     self.get_keys()\n                     self.do_multisig()\n \n         self.checkbalances()\n \n     def checkbalances(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         node0.generate(100)\n         self.sync_all()\n \n@@ -49,13 +50,13 @@ def checkbalances(self):\n \n         height = node0.getblockchaininfo()[\"blocks\"]\n         assert 150 < height < 350\n-        total = 149*50 + (height-149-100)*25\n+        total = 149 * 50 + (height - 149 - 100) * 25\n         assert bal1 == 0\n         assert bal2 == self.moved\n-        assert bal0+bal1+bal2 == total\n+        assert bal0 + bal1 + bal2 == total\n \n     def do_multisig(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n \n         msig = node2.createmultisig(self.nsigs, self.pub, self.output_type)\n         madd = msig[\"address\"]\n@@ -74,7 +75,7 @@ def do_multisig(self):\n         txid = node0.sendtoaddress(madd, 40)\n \n         tx = node0.getrawtransaction(txid, True)\n-        vout = [v[\"n\"] for v in tx[\"vout\"] if madd in v[\"scriptPubKey\"].get(\"addresses\",[])]\n+        vout = [v[\"n\"] for v in tx[\"vout\"] if madd in v[\"scriptPubKey\"].get(\"addresses\", [])]\n         assert len(vout) == 1\n         vout = vout[0]\n         scriptPubKey = tx[\"vout\"][vout][\"scriptPubKey\"][\"hex\"]\n@@ -86,7 +87,7 @@ def do_multisig(self):\n         outval = value - decimal.Decimal(\"0.00001000\")\n         rawtx = node2.createrawtransaction([{\"txid\": txid, \"vout\": vout}], [{self.final: outval}])\n \n-        rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], prevtxs)\n+        rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs - 1], prevtxs)\n         rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n \n         self.moved += outval\n@@ -97,5 +98,6 @@ def do_multisig(self):\n         txinfo = node0.getrawtransaction(tx, True, blk)\n         self.log.info(\"n/m=%d/%d %s size=%d vsize=%d weight=%d\" % (self.nsigs, self.nkeys, self.output_type, txinfo[\"size\"], txinfo[\"vsize\"], txinfo[\"weight\"]))\n \n+\n if __name__ == '__main__':\n     RpcCreateMultiSigTest().main()"
      }
    ]
  },
  {
    "sha": "23ba460c1abe1e089c64e87abe919e87a320b32d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2JhNDYwYzFhYmUxZTA4OWM2NGU4N2FiZTkxOWU4N2EzMjBiMzJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-16T17:12:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-21T12:17:20Z"
      },
      "message": "test: Add test that addmultisigaddress fails for watchonly addresses\n\nGithub-Pull: #15831\nRebased-From: fab6a0a659bb856e4598af3e0679fc37d5239478",
      "tree": {
        "sha": "3a047435bd171f428597c58ef8940da991686cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a047435bd171f428597c58ef8940da991686cc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23ba460c1abe1e089c64e87abe919e87a320b32d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ba460c1abe1e089c64e87abe919e87a320b32d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23ba460c1abe1e089c64e87abe919e87a320b32d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ba460c1abe1e089c64e87abe919e87a320b32d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b3bb564485b239822fb8bbdab7ce528f0f0d6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13b3bb564485b239822fb8bbdab7ce528f0f0d6f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6411b0e2853088c33584335ac9cdf6c013ca9a86",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23ba460c1abe1e089c64e87abe919e87a320b32d/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23ba460c1abe1e089c64e87abe919e87a320b32d/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=23ba460c1abe1e089c64e87abe919e87a320b32d",
        "patch": "@@ -5,6 +5,9 @@\n \"\"\"Test multisig RPCs\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n import decimal\n \n \n@@ -26,7 +29,9 @@ def get_keys(self):\n     def run_test(self):\n         node0, node1, node2 = self.nodes\n \n-        # 50 BTC each, rest will be 25 BTC each\n+        self.check_addmultisigaddress_errors()\n+\n+        self.log.info('Generating blocks ...')\n         node0.generate(149)\n         self.sync_all()\n \n@@ -39,6 +44,15 @@ def run_test(self):\n \n         self.checkbalances()\n \n+    def check_addmultisigaddress_errors(self):\n+        self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n+        addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]\n+        assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n+        for a in addresses:\n+            # Importing all addresses should not change the result\n+            self.nodes[0].importaddress(a)\n+        assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n+\n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n         node0.generate(100)"
      }
    ]
  },
  {
    "sha": "d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWZjOTY5ZTcxYzFmMGYwYTI0MDRjM2JiMDhhYWQ3OGI2YWM3YTM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-04-15T23:49:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-21T12:51:41Z"
      },
      "message": "Pure python EC\n\nThis removes the dependency on OpenSSL for the interaction tests, by providing a pure-Python\ntoy implementation of secp256k1.\n\nGithub-Pull: #15826\nRebased-From: 8c7b9324ca3f3ffb178bea56a96ea23f7e0383cb",
      "tree": {
        "sha": "15be22d14365e5bd4cec98d34c9586d56df52615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15be22d14365e5bd4cec98d34c9586d56df52615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23ba460c1abe1e089c64e87abe919e87a320b32d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23ba460c1abe1e089c64e87abe919e87a320b32d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23ba460c1abe1e089c64e87abe919e87a320b32d"
      }
    ],
    "stats": {
      "total": 573,
      "additions": 346,
      "deletions": 227
    },
    "files": [
      {
        "sha": "7d6a56919d13b84d3c16fc86714ee8f1ead98144",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "patch": "@@ -32,7 +32,7 @@\n import time\n \n from test_framework.blocktools import (create_block, create_coinbase)\n-from test_framework.key import CECKey\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     CBlockHeader,\n     COutPoint,\n@@ -104,9 +104,9 @@ def run_test(self):\n         self.blocks = []\n \n         # Get a pubkey for the coinbase TXO\n-        coinbase_key = CECKey()\n-        coinbase_key.set_secretbytes(b\"horsebattery\")\n-        coinbase_pubkey = coinbase_key.get_pubkey()\n+        coinbase_key = ECKey()\n+        coinbase_key.generate()\n+        coinbase_pubkey = coinbase_key.get_pubkey().get_bytes()\n \n         # Create the first block with a coinbase output to our key\n         height = 1"
      },
      {
        "sha": "1aa5ae1423ee9533812f81ac9ed86d195f9d6cd4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "patch": "@@ -14,7 +14,7 @@\n     get_legacy_sigopcount_block,\n     MAX_BLOCK_SIGOPS,\n )\n-from test_framework.key import CECKey\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     CBlock,\n     COIN,\n@@ -86,9 +86,9 @@ def run_test(self):\n         self.bootstrap_p2p()  # Add one p2p connection to the node\n \n         self.block_heights = {}\n-        self.coinbase_key = CECKey()\n-        self.coinbase_key.set_secretbytes(b\"horsebattery\")\n-        self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n+        self.coinbase_key = ECKey()\n+        self.coinbase_key.generate()\n+        self.coinbase_pubkey = self.coinbase_key.get_pubkey().get_bytes()\n         self.tip = None\n         self.blocks = {}\n         self.genesis_hash = int(self.nodes[0].getbestblockhash(), 16)\n@@ -514,7 +514,7 @@ def run_test(self):\n             tx.vin.append(CTxIn(COutPoint(b39.vtx[i].sha256, 0), b''))\n             # Note: must pass the redeem_script (not p2sh_script) to the signature hash function\n             (sighash, err) = SignatureHash(redeem_script, tx, 1, SIGHASH_ALL)\n-            sig = self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))\n+            sig = self.coinbase_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))\n             scriptSig = CScript([sig, redeem_script])\n \n             tx.vin[1].scriptSig = scriptSig\n@@ -1270,7 +1270,7 @@ def sign_tx(self, tx, spend_tx):\n             tx.vin[0].scriptSig = CScript()\n             return\n         (sighash, err) = SignatureHash(spend_tx.vout[0].scriptPubKey, tx, 0, SIGHASH_ALL)\n-        tx.vin[0].scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+        tx.vin[0].scriptSig = CScript([self.coinbase_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n \n     def create_and_sign_transaction(self, spend_tx, value, script=CScript([OP_TRUE])):\n         tx = self.create_tx(spend_tx, 0, value, script)"
      },
      {
        "sha": "62b12507ed3710e5cf4c8c7dc898a98d1d5aae9d",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "patch": "@@ -10,7 +10,7 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n     CBlock,\n@@ -106,7 +106,7 @@ def get_p2pkh_script(pubkeyhash):\n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness program.\"\"\"\n     tx_hash = SegwitVersion1SignatureHash(script, tx_to, in_idx, hashtype, value)\n-    signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n+    signature = key.sign_ecdsa(tx_hash) + chr(hashtype).encode('latin-1')\n     tx_to.wit.vtxinwit[in_idx].scriptWitness.stack = [signature, script]\n     tx_to.rehash()\n \n@@ -1486,10 +1486,9 @@ def test_uncompressed_pubkey(self):\n \n         # Segwit transactions using uncompressed pubkeys are not accepted\n         # under default policy, but should still pass consensus.\n-        key = CECKey()\n-        key.set_secretbytes(b\"9\")\n-        key.set_compressed(False)\n-        pubkey = CPubKey(key.get_pubkey())\n+        key = ECKey()\n+        key.generate(False)\n+        pubkey = key.get_pubkey().get_bytes()\n         assert_equal(len(pubkey), 65)  # This should be an uncompressed pubkey\n \n         utxo = self.utxo.pop(0)\n@@ -1519,7 +1518,7 @@ def test_uncompressed_pubkey(self):\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_wsh))\n         script = get_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n-        signature = key.sign(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n+        signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n         tx2.rehash()\n@@ -1573,7 +1572,7 @@ def test_uncompressed_pubkey(self):\n         tx5.vin.append(CTxIn(COutPoint(tx4.sha256, 0), b\"\"))\n         tx5.vout.append(CTxOut(tx4.vout[0].nValue - 1000, CScript([OP_TRUE])))\n         (sig_hash, err) = SignatureHash(script_pubkey, tx5, 0, SIGHASH_ALL)\n-        signature = key.sign(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n+        signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n@@ -1586,9 +1585,9 @@ def test_uncompressed_pubkey(self):\n     @subtest\n     def test_signature_version_1(self):\n \n-        key = CECKey()\n-        key.set_secretbytes(b\"9\")\n-        pubkey = CPubKey(key.get_pubkey())\n+        key = ECKey()\n+        key.generate()\n+        pubkey = key.get_pubkey().get_bytes()\n \n         witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n         witness_hash = sha256(witness_program)\n@@ -1723,7 +1722,7 @@ def test_signature_version_1(self):\n \n         script = get_p2pkh_script(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n-        signature = key.sign(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n+        signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n \n         # Check that we can't have a scriptSig\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])"
      },
      {
        "sha": "996de5f94fbf02b501c776f04a4bd49479a2922f",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 324,
        "deletions": 204,
        "changes": 528,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "patch": "@@ -1,226 +1,346 @@\n-# Copyright (c) 2011 Sam Rushing\n-\"\"\"ECC secp256k1 OpenSSL wrapper.\n+# Copyright (c) 2019 Pieter Wuille\n \n-WARNING: This module does not mlock() secrets; your private keys may end up on\n-disk in swap! Use with caution!\n+\"\"\"Test-only secp256k1 elliptic curve implementation\n \n-This file is modified from python-bitcoinlib.\n+WARNING: This code is slow, uses bad randomness, does not properly protect\n+keys, and is trivially vulnerable to side channel attacks. Do not use for\n+anything but tests.\n \"\"\"\n \n-import ctypes\n-import ctypes.util\n-import hashlib\n+import random\n \n-ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n-\n-ssl.BN_new.restype = ctypes.c_void_p\n-ssl.BN_new.argtypes = []\n-\n-ssl.BN_bin2bn.restype = ctypes.c_void_p\n-ssl.BN_bin2bn.argtypes = [ctypes.c_char_p, ctypes.c_int, ctypes.c_void_p]\n-\n-ssl.BN_CTX_free.restype = None\n-ssl.BN_CTX_free.argtypes = [ctypes.c_void_p]\n-\n-ssl.BN_CTX_new.restype = ctypes.c_void_p\n-ssl.BN_CTX_new.argtypes = []\n-\n-ssl.ECDH_compute_key.restype = ctypes.c_int\n-ssl.ECDH_compute_key.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p]\n-\n-ssl.ECDSA_sign.restype = ctypes.c_int\n-ssl.ECDSA_sign.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n-\n-ssl.ECDSA_verify.restype = ctypes.c_int\n-ssl.ECDSA_verify.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]\n-\n-ssl.EC_KEY_free.restype = None\n-ssl.EC_KEY_free.argtypes = [ctypes.c_void_p]\n-\n-ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n-ssl.EC_KEY_new_by_curve_name.argtypes = [ctypes.c_int]\n-\n-ssl.EC_KEY_get0_group.restype = ctypes.c_void_p\n-ssl.EC_KEY_get0_group.argtypes = [ctypes.c_void_p]\n-\n-ssl.EC_KEY_get0_public_key.restype = ctypes.c_void_p\n-ssl.EC_KEY_get0_public_key.argtypes = [ctypes.c_void_p]\n-\n-ssl.EC_KEY_set_private_key.restype = ctypes.c_int\n-ssl.EC_KEY_set_private_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n-\n-ssl.EC_KEY_set_conv_form.restype = None\n-ssl.EC_KEY_set_conv_form.argtypes = [ctypes.c_void_p, ctypes.c_int]\n-\n-ssl.EC_KEY_set_public_key.restype = ctypes.c_int\n-ssl.EC_KEY_set_public_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n-\n-ssl.i2o_ECPublicKey.restype = ctypes.c_void_p\n-ssl.i2o_ECPublicKey.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n-\n-ssl.EC_POINT_new.restype = ctypes.c_void_p\n-ssl.EC_POINT_new.argtypes = [ctypes.c_void_p]\n-\n-ssl.EC_POINT_free.restype = None\n-ssl.EC_POINT_free.argtypes = [ctypes.c_void_p]\n-\n-ssl.EC_POINT_mul.restype = ctypes.c_int\n-ssl.EC_POINT_mul.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n-\n-# this specifies the curve used with ECDSA.\n-NID_secp256k1 = 714 # from openssl/obj_mac.h\n+def modinv(a, n):\n+    \"\"\"Compute the modular inverse of a modulo n\n \n+    See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\n+    \"\"\"\n+    t1, t2 = 0, 1\n+    r1, r2 = n, a\n+    while r2 != 0:\n+        q = r1 // r2\n+        t1, t2 = t2, t1 - q * t2\n+        r1, r2 = r2, r1 - q * r2\n+    if r1 > 1:\n+        return None\n+    if t1 < 0:\n+        t1 += n\n+    return t1\n+\n+def jacobi_symbol(n, k):\n+    \"\"\"Compute the Jacobi symbol of n modulo k\n+\n+    See http://en.wikipedia.org/wiki/Jacobi_symbol\n+    \"\"\"\n+    assert k > 0 and k & 1\n+    n %= k\n+    t = 0\n+    while n != 0:\n+        while n & 1 == 0:\n+            n >>= 1\n+            r = k & 7\n+            t ^= (r == 3 or r == 5)\n+        n, k = k, n\n+        t ^= (n & k & 3 == 3)\n+        n = n % k\n+    if k == 1:\n+        return -1 if t else 1\n+    return 0\n+\n+def modsqrt(a, p):\n+    \"\"\"Compute the square root of a modulo p\n+\n+    For p = 3 mod 4, if a square root exists, it is equal to a**((p+1)/4) mod p.\n+    \"\"\"\n+    assert(p % 4 == 3) # Only p = 3 mod 4 is implemented\n+    sqrt = pow(a, (p + 1)//4, p)\n+    if pow(sqrt, 2, p) == a % p:\n+        return sqrt\n+    return None\n+\n+class EllipticCurve:\n+    def __init__(self, p, a, b):\n+        \"\"\"Initialize elliptic curve y^2 = x^3 + a*x + b over GF(p).\"\"\"\n+        self.p = p\n+        self.a = a % p\n+        self.b = b % p\n+\n+    def affine(self, p1):\n+        \"\"\"Convert a Jacobian point tuple p1 to affine form, or None if at infinity.\"\"\"\n+        x1, y1, z1 = p1\n+        if z1 == 0:\n+            return None\n+        inv = modinv(z1, self.p)\n+        inv_2 = (inv**2) % self.p\n+        inv_3 = (inv_2 * inv) % self.p\n+        return ((inv_2 * x1) % self.p, (inv_3 * y1) % self.p, 1)\n+\n+    def negate(self, p1):\n+        \"\"\"Negate a Jacobian point tuple p1.\"\"\"\n+        x1, y1, z1 = p1\n+        return (x1, (self.p - y1) % self.p, z1)\n+\n+    def on_curve(self, p1):\n+        \"\"\"Determine whether a Jacobian tuple p is on the curve (and not infinity)\"\"\"\n+        x1, y1, z1 = p1\n+        z2 = pow(z1, 2, self.p)\n+        z4 = pow(z2, 2, self.p)\n+        return z1 != 0 and (pow(x1, 3, self.p) + self.a * x1 * z4 + self.b * z2 * z4 - pow(y1, 2, self.p)) % self.p == 0\n+\n+    def is_x_coord(self, x):\n+        \"\"\"Test whether x is a valid X coordinate on the curve.\"\"\"\n+        x_3 = pow(x, 3, self.p)\n+        return jacobi_symbol(x_3 + self.a * x + self.b, self.p) != -1\n+\n+    def lift_x(self, x):\n+        \"\"\"Given an X coordinate on the curve, return a corresponding affine point.\"\"\"\n+        x_3 = pow(x, 3, self.p)\n+        v = x_3 + self.a * x + self.b\n+        y = modsqrt(v, self.p)\n+        if y is None:\n+            return None\n+        return (x, y, 1)\n+\n+    def double(self, p1):\n+        \"\"\"Double a Jacobian tuple p1\"\"\"\n+        x1, y1, z1 = p1\n+        if z1 == 0:\n+            return (0, 1, 0)\n+        y1_2 = (y1**2) % self.p\n+        y1_4 = (y1_2**2) % self.p\n+        x1_2 = (x1**2) % self.p\n+        s = (4*x1*y1_2) % self.p\n+        m = 3*x1_2\n+        if self.a:\n+            m += self.a * pow(z1, 4, self.p)\n+        m = m % self.p\n+        x2 = (m**2 - 2*s) % self.p\n+        y2 = (m*(s - x2) - 8*y1_4) % self.p\n+        z2 = (2*y1*z1) % self.p\n+        return (x2, y2, z2)\n+\n+    def add_mixed(self, p1, p2):\n+        \"\"\"Add a Jacobian tuple p1 and an affine tuple p2\"\"\"\n+        x1, y1, z1 = p1\n+        x2, y2, z2 = p2\n+        assert(z2 == 1)\n+        if z1 == 0:\n+            return p2\n+        z1_2 = (z1**2) % self.p\n+        z1_3 = (z1_2 * z1) % self.p\n+        u2 = (x2 * z1_2) % self.p\n+        s2 = (y2 * z1_3) % self.p\n+        if x1 == u2:\n+            if (y1 != s2):\n+                return (0, 1, 0)\n+            return self.double(p1)\n+        h = u2 - x1\n+        r = s2 - y1\n+        h_2 = (h**2) % self.p\n+        h_3 = (h_2 * h) % self.p\n+        u1_h_2 = (x1 * h_2) % self.p\n+        x3 = (r**2 - h_3 - 2*u1_h_2) % self.p\n+        y3 = (r*(u1_h_2 - x3) - y1*h_3) % self.p\n+        z3 = (h*z1) % self.p\n+        return (x3, y3, z3)\n+\n+    def add(self, p1, p2):\n+        \"\"\"Add two Jacobian tuples p1 and p2\"\"\"\n+        x1, y1, z1 = p1\n+        x2, y2, z2 = p2\n+        if z1 == 0:\n+            return p2\n+        if z2 == 0:\n+            return p1\n+        if z1 == 1:\n+            return self.add_mixed(p2, p1)\n+        if z2 == 1:\n+            return self.add_mixed(p1, p2)\n+        z1_2 = (z1**2) % self.p\n+        z1_3 = (z1_2 * z1) % self.p\n+        z2_2 = (z2**2) % self.p\n+        z2_3 = (z2_2 * z2) % self.p\n+        u1 = (x1 * z2_2) % self.p\n+        u2 = (x2 * z1_2) % self.p\n+        s1 = (y1 * z2_3) % self.p\n+        s2 = (y2 * z1_3) % self.p\n+        if u1 == u2:\n+            if (s1 != s2):\n+                return (0, 1, 0)\n+            return self.double(p1)\n+        h = u2 - u1\n+        r = s2 - s1\n+        h_2 = (h**2) % self.p\n+        h_3 = (h_2 * h) % self.p\n+        u1_h_2 = (u1 * h_2) % self.p\n+        x3 = (r**2 - h_3 - 2*u1_h_2) % self.p\n+        y3 = (r*(u1_h_2 - x3) - s1*h_3) % self.p\n+        z3 = (h*z1*z2) % self.p\n+        return (x3, y3, z3)\n+\n+    def mul(self, ps):\n+        \"\"\"Compute a (multi) point multiplication\n+\n+        ps is a list of (Jacobian tuple, scalar) pairs.\n+        \"\"\"\n+        r = (0, 1, 0)\n+        for i in range(255, -1, -1):\n+            r = self.double(r)\n+            for (p, n) in ps:\n+                if ((n >> i) & 1):\n+                    r = self.add(r, p)\n+        return r\n+\n+SECP256K1 = EllipticCurve(2**256 - 2**32 - 977, 0, 7)\n+SECP256K1_G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8, 1)\n SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n SECP256K1_ORDER_HALF = SECP256K1_ORDER // 2\n \n-# Thx to Sam Devlin for the ctypes magic 64-bit fix.\n-def _check_result(val, func, args):\n-    if val == 0:\n-        raise ValueError\n-    else:\n-        return ctypes.c_void_p (val)\n-\n-ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n-ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n-\n-class CECKey():\n-    \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n-\n-    POINT_CONVERSION_COMPRESSED = 2\n-    POINT_CONVERSION_UNCOMPRESSED = 4\n+class ECPubKey():\n+    \"\"\"A secp256k1 public key\"\"\"\n \n     def __init__(self):\n-        self.k = ssl.EC_KEY_new_by_curve_name(NID_secp256k1)\n-\n-    def __del__(self):\n-        if ssl:\n-            ssl.EC_KEY_free(self.k)\n-        self.k = None\n-\n-    def set_secretbytes(self, secret):\n-        priv_key = ssl.BN_bin2bn(secret, 32, ssl.BN_new())\n-        group = ssl.EC_KEY_get0_group(self.k)\n-        pub_key = ssl.EC_POINT_new(group)\n-        ctx = ssl.BN_CTX_new()\n-        if not ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx):\n-            raise ValueError(\"Could not derive public key from the supplied secret.\")\n-        ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx)\n-        ssl.EC_KEY_set_private_key(self.k, priv_key)\n-        ssl.EC_KEY_set_public_key(self.k, pub_key)\n-        ssl.EC_POINT_free(pub_key)\n-        ssl.BN_CTX_free(ctx)\n-        return self.k\n-\n-    def set_privkey(self, key):\n-        self.mb = ctypes.create_string_buffer(key)\n-        return ssl.d2i_ECPrivateKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n-\n-    def set_pubkey(self, key):\n-        self.mb = ctypes.create_string_buffer(key)\n-        return ssl.o2i_ECPublicKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n-\n-    def get_privkey(self):\n-        size = ssl.i2d_ECPrivateKey(self.k, 0)\n-        mb_pri = ctypes.create_string_buffer(size)\n-        ssl.i2d_ECPrivateKey(self.k, ctypes.byref(ctypes.pointer(mb_pri)))\n-        return mb_pri.raw\n-\n-    def get_pubkey(self):\n-        size = ssl.i2o_ECPublicKey(self.k, 0)\n-        mb = ctypes.create_string_buffer(size)\n-        ssl.i2o_ECPublicKey(self.k, ctypes.byref(ctypes.pointer(mb)))\n-        return mb.raw\n-\n-    def get_raw_ecdh_key(self, other_pubkey):\n-        ecdh_keybuffer = ctypes.create_string_buffer(32)\n-        r = ssl.ECDH_compute_key(ctypes.pointer(ecdh_keybuffer), 32,\n-                                 ssl.EC_KEY_get0_public_key(other_pubkey.k),\n-                                 self.k, 0)\n-        if r != 32:\n-            raise Exception('CKey.get_ecdh_key(): ECDH_compute_key() failed')\n-        return ecdh_keybuffer.raw\n-\n-    def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n-        # FIXME: be warned it's not clear what the kdf should be as a default\n-        r = self.get_raw_ecdh_key(other_pubkey)\n-        return kdf(r)\n-\n-    def sign(self, hash, low_s = True):\n-        # FIXME: need unit tests for below cases\n-        if not isinstance(hash, bytes):\n-            raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n-        if len(hash) != 32:\n-            raise ValueError('Hash must be exactly 32 bytes long')\n-\n-        sig_size0 = ctypes.c_uint32()\n-        sig_size0.value = ssl.ECDSA_size(self.k)\n-        mb_sig = ctypes.create_string_buffer(sig_size0.value)\n-        result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n-        assert 1 == result\n-        assert mb_sig.raw[0] == 0x30\n-        assert mb_sig.raw[1] == sig_size0.value - 2\n-        total_size = mb_sig.raw[1]\n-        assert mb_sig.raw[2] == 2\n-        r_size = mb_sig.raw[3]\n-        assert mb_sig.raw[4 + r_size] == 2\n-        s_size = mb_sig.raw[5 + r_size]\n-        s_value = int.from_bytes(mb_sig.raw[6+r_size:6+r_size+s_size], byteorder='big')\n-        if (not low_s) or s_value <= SECP256K1_ORDER_HALF:\n-            return mb_sig.raw[:sig_size0.value]\n-        else:\n-            low_s_value = SECP256K1_ORDER - s_value\n-            low_s_bytes = (low_s_value).to_bytes(33, byteorder='big')\n-            while len(low_s_bytes) > 1 and low_s_bytes[0] == 0 and low_s_bytes[1] < 0x80:\n-                low_s_bytes = low_s_bytes[1:]\n-            new_s_size = len(low_s_bytes)\n-            new_total_size_byte = (total_size + new_s_size - s_size).to_bytes(1,byteorder='big')\n-            new_s_size_byte = (new_s_size).to_bytes(1,byteorder='big')\n-            return b'\\x30' + new_total_size_byte + mb_sig.raw[2:5+r_size] + new_s_size_byte + low_s_bytes\n-\n-    def verify(self, hash, sig):\n-        \"\"\"Verify a DER signature\"\"\"\n-        return ssl.ECDSA_verify(0, hash, len(hash), sig, len(sig), self.k) == 1\n-\n-    def set_compressed(self, compressed):\n-        if compressed:\n-            form = self.POINT_CONVERSION_COMPRESSED\n+        \"\"\"Construct an uninitialized public key\"\"\"\n+        self.valid = False\n+\n+    def set(self, data):\n+        \"\"\"Construct a public key from a serialization in compressed or uncompressed format\"\"\"\n+        if (len(data) == 65 and data[0] == 0x04):\n+            p = (int.from_bytes(data[1:33], 'big'), int.from_bytes(data[33:65], 'big'), 1)\n+            self.valid = SECP256K1.on_curve(p)\n+            if self.valid:\n+                self.p = p\n+                self.compressed = False\n+        elif (len(data) == 33 and (data[0] == 0x02 or data[0] == 0x03)):\n+            x = int.from_bytes(data[1:33], 'big')\n+            if SECP256K1.is_x_coord(x):\n+                p = SECP256K1.lift_x(x)\n+                if (p[1] & 1) != (data[0] & 1):\n+                    p = SECP256K1.negate(p)\n+                self.p = p\n+                self.valid = True\n+                self.compressed = True\n+            else:\n+                self.valid = False\n         else:\n-            form = self.POINT_CONVERSION_UNCOMPRESSED\n-        ssl.EC_KEY_set_conv_form(self.k, form)\n-\n+            self.valid = False\n \n-class CPubKey(bytes):\n-    \"\"\"An encapsulated public key\n-\n-    Attributes:\n+    @property\n+    def is_compressed(self):\n+        return self.compressed\n \n-    is_valid      - Corresponds to CPubKey.IsValid()\n-    is_fullyvalid - Corresponds to CPubKey.IsFullyValid()\n-    is_compressed - Corresponds to CPubKey.IsCompressed()\n-    \"\"\"\n+    @property\n+    def is_valid(self):\n+        return self.valid\n+\n+    def get_bytes(self):\n+        assert(self.valid)\n+        p = SECP256K1.affine(self.p)\n+        if p is None:\n+            return None\n+        if self.compressed:\n+            return bytes([0x02 + (p[1] & 1)]) + p[0].to_bytes(32, 'big')\n+        else:\n+            return bytes([0x04]) + p[0].to_bytes(32, 'big') + p[1].to_bytes(32, 'big')\n+\n+    def verify_ecdsa(self, sig, msg, low_s=True):\n+        \"\"\"Verify a strictly DER-encoded ECDSA signature against this pubkey.\"\"\"\n+        assert(self.valid)\n+        if (sig[1] + 2 != len(sig)):\n+            return False\n+        if (len(sig) < 4):\n+            return False\n+        if (sig[0] != 0x30):\n+            return False\n+        if (sig[2] != 0x02):\n+            return False\n+        rlen = sig[3]\n+        if (len(sig) < 6 + rlen):\n+            return False\n+        if rlen < 1 or rlen > 33:\n+            return False\n+        if sig[4] >= 0x80:\n+            return False\n+        if (rlen > 1 and (sig[4] == 0) and not (sig[5] & 0x80)):\n+            return False\n+        r = int.from_bytes(sig[4:4+rlen], 'big')\n+        if (sig[4+rlen] != 0x02):\n+            return False\n+        slen = sig[5+rlen]\n+        if slen < 1 or slen > 33:\n+            return False\n+        if (len(sig) != 6 + rlen + slen):\n+            return False\n+        if sig[6+rlen] >= 0x80:\n+            return False\n+        if (slen > 1 and (sig[6+rlen] == 0) and not (sig[7+rlen] & 0x80)):\n+            return False\n+        s = int.from_bytes(sig[6+rlen:6+rlen+slen], 'big')\n+        if r < 1 or s < 1 or r >= SECP256K1_ORDER or s >= SECP256K1_ORDER:\n+            return False\n+        if low_s and s >= SECP256K1_ORDER_HALF:\n+            return False\n+        z = int.from_bytes(msg, 'big')\n+        w = modinv(s, SECP256K1_ORDER)\n+        u1 = z*w % SECP256K1_ORDER\n+        u2 = r*w % SECP256K1_ORDER\n+        R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, u1), (self.p, u2)]))\n+        if R is None or R[0] != r:\n+            return False\n+        return True\n+\n+class ECKey():\n+    \"\"\"A secp256k1 private key\"\"\"\n \n-    def __new__(cls, buf, _cec_key=None):\n-        self = super(CPubKey, cls).__new__(cls, buf)\n-        if _cec_key is None:\n-            _cec_key = CECKey()\n-        self._cec_key = _cec_key\n-        self.is_fullyvalid = _cec_key.set_pubkey(self) != 0\n-        return self\n+    def __init__(self):\n+        self.valid = False\n+\n+    def set(self, secret, compressed):\n+        \"\"\"Construct a private key object with given 32-byte secret and compressed flag.\"\"\"\n+        assert(len(secret) == 32)\n+        secret = int.from_bytes(secret, 'big')\n+        self.valid = (secret > 0 and secret < SECP256K1_ORDER)\n+        if self.valid:\n+            self.secret = secret\n+            self.compressed = compressed\n+\n+    def generate(self, compressed=True):\n+        \"\"\"Generate a random private key (compressed or uncompressed).\"\"\"\n+        self.set(random.randrange(1, SECP256K1_ORDER).to_bytes(32, 'big'), compressed)\n+\n+    def get_bytes(self):\n+        \"\"\"Retrieve the 32-byte representation of this key.\"\"\"\n+        assert(self.valid)\n+        return self.secret.to_bytes(32, 'big')\n \n     @property\n     def is_valid(self):\n-        return len(self) > 0\n+        return self.valid\n \n     @property\n     def is_compressed(self):\n-        return len(self) == 33\n-\n-    def verify(self, hash, sig):\n-        return self._cec_key.verify(hash, sig)\n-\n-    def __str__(self):\n-        return repr(self)\n-\n-    def __repr__(self):\n-        return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+        return self.compressed\n \n+    def get_pubkey(self):\n+        \"\"\"Compute an ECPubKey object for this secret key.\"\"\"\n+        assert(self.valid)\n+        ret = ECPubKey()\n+        p = SECP256K1.mul([(SECP256K1_G, self.secret)])\n+        ret.p = p\n+        ret.valid = True\n+        ret.compressed = self.compressed\n+        return ret\n+\n+    def sign_ecdsa(self, msg, low_s=True):\n+        \"\"\"Construct a DER-encoded ECDSA signature with this key.\"\"\"\n+        assert(self.valid)\n+        z = int.from_bytes(msg, 'big')\n+        # Note: no RFC6979, but a simple random nonce (some tests rely on distinct transactions for the same operation)\n+        k = random.randrange(1, SECP256K1_ORDER)\n+        R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, k)]))\n+        r = R[0] % SECP256K1_ORDER\n+        s = (modinv(k, SECP256K1_ORDER) * (z + self.secret * r)) % SECP256K1_ORDER\n+        if low_s and s > SECP256K1_ORDER_HALF:\n+            s = SECP256K1_ORDER - s\n+        rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n+        sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n+        return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb"
      },
      {
        "sha": "588ba428d755d737bb4039b00b4223ad364a8d67",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n+    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,is_compressed,is_valid,verify_ecdsa,msg_generic,on_*,optionxform,restype,profile_with_perf\" \\\n     $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  },
  {
    "sha": "e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgwMDdmYzFhOGYxODkxMDc4ZDRmNmJmZTc1ODNhNzdkZGE3ZWU5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-15T04:21:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-21T12:51:41Z"
      },
      "message": "Make and get the multisig redeemscript and destination in one function instead of two\n\nInstead of creating a redeemScript with CreateMultisigRedeemscript and\nthen getting the destination with AddAndGetDestinationForScript, do\nboth in the same function.\n\nCreateMultisigRedeemscript is changed to AddAndGetMultisigDestination.\nIt creates the redeemScript and returns it via an output parameter. Then\nit calls AddAndGetDestinationForScript to add the destination to the\nkeystore and get the proper destination.\n\nThis allows us to inspect the public keys in the redeemScript before creating\nthe destination so that the correct destination is used when uncompressed\npubkeys are in the multisig.\n\nGithub-Pull: #16026\nRebased-From: a49503402b6bc21e3878e151c07529941d36aed0",
      "tree": {
        "sha": "bea46e6894944b19345b65b06af182b44ca1d5a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bea46e6894944b19345b65b06af182b44ca1d5a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9fc969e71c1f0f0a2404c3bb08aad78b6ac7a39"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 53,
      "deletions": 12
    },
    "files": [
      {
        "sha": "780a10e03ff47df1a60d7b6bff35e5ff5dd27a57",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "patch": "@@ -128,9 +128,9 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    const CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n     CBasicKeyStore keystore;\n-    const CTxDestination dest = AddAndGetDestinationForScript(keystore, inner, output_type);\n+    CScript inner;\n+    const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));"
      },
      {
        "sha": "ff832810bcfa71319836ce329652804f483915e6",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <policy/fees.h>\n+#include <outputtype.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n@@ -46,8 +47,8 @@ CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n     return vchPubKey;\n }\n \n-// Creates a multisig redeemscript from a given list of public keys and number required.\n-CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys)\n+// Creates a multisig address from a given list of public keys, number of signatures required, and the address type\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out)\n {\n     // Gather public keys\n     if (required < 1) {\n@@ -60,13 +61,24 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Number of keys involved in the multisignature address creation > 16\\nReduce the number\");\n     }\n \n-    CScript result = GetScriptForMultisig(required, pubkeys);\n+    script_out = GetScriptForMultisig(required, pubkeys);\n \n-    if (result.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, (strprintf(\"redeemScript exceeds size limit: %d > %d\", result.size(), MAX_SCRIPT_ELEMENT_SIZE)));\n+    if (script_out.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, (strprintf(\"redeemScript exceeds size limit: %d > %d\", script_out.size(), MAX_SCRIPT_ELEMENT_SIZE)));\n     }\n \n-    return result;\n+    // Check if any keys are uncompressed. If so, the type is legacy\n+    for (const CPubKey& pk : pubkeys) {\n+        if (!pk.IsCompressed()) {\n+            type = OutputType::LEGACY;\n+            break;\n+        }\n+    }\n+\n+    // Make the address\n+    CTxDestination dest = AddAndGetDestinationForScript(keystore, script_out, type);\n+\n+    return dest;\n }\n \n class DescribeAddressVisitor : public boost::static_visitor<UniValue>"
      },
      {
        "sha": "d4d8694053a10e3cfe33562283dacf6bfc76cbe1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_UTIL_H\n \n #include <node/transaction.h>\n+#include <outputtype.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n #include <script/standard.h>\n@@ -28,7 +29,7 @@ extern InitInterfaces* g_rpc_interfaces;\n \n CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n-CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);\n "
      },
      {
        "sha": "a9a8c2e18557afd75d7211b7d13429f82c1b3fbd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "patch": "@@ -1028,8 +1028,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n-    CTxDestination dest = AddAndGetDestinationForScript(*pwallet, inner, output_type);\n+    CScript inner;\n+    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, *pwallet, inner);\n     pwallet->SetAddressBook(dest, label, \"send\");\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "1f717f59d0d96f03c7a3d9b555918eff1d50231e",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "patch": "@@ -7,9 +7,13 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n+    assert_equal,\n )\n-import decimal\n+from test_framework.key import ECPubKey\n \n+import binascii\n+import decimal\n+import itertools\n \n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -44,6 +48,30 @@ def run_test(self):\n \n         self.checkbalances()\n \n+        # Test mixed compressed and uncompressed pubkeys\n+        self.log.info('Mixed compressed and uncompressed multisigs are not allowed')\n+        pk0 = node0.getaddressinfo(node0.getnewaddress())['pubkey']\n+        pk1 = node1.getaddressinfo(node1.getnewaddress())['pubkey']\n+        pk2 = node2.getaddressinfo(node2.getnewaddress())['pubkey']\n+\n+        # decompress pk2\n+        pk_obj = ECPubKey()\n+        pk_obj.set(binascii.unhexlify(pk2))\n+        pk_obj.compressed = False\n+        pk2 = binascii.hexlify(pk_obj.get_bytes()).decode()\n+\n+        # Check all permutations of keys because order matters apparently\n+        for keys in itertools.permutations([pk0, pk1, pk2]):\n+            # Results should be the same as this legacy one\n+            legacy_addr = node0.createmultisig(2, keys, 'legacy')['address']\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'legacy')['address'])\n+\n+            # Generate addresses with the segwit types. These should all make legacy addresses\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'p2sh-segwit')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'p2sh-segwit')['address'])\n+\n     def check_addmultisigaddress_errors(self):\n         self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n         addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]"
      }
    ]
  },
  {
    "sha": "2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODAwYjNkNWMxNGE5ZTU0MzdiN2U4ODM4YzY5ZmRkNjcxMDkwOGJi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-18T13:13:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-23T16:00:46Z"
      },
      "message": "gui: Fix open wallet menu initialization order\n\nThe menu must be created before connecting to aboutToShow signal.\n\nGithub-Pull: #16231\nRebased-From: 5224be5a3354e1a22ea4d7f0e40aadfccdf67064",
      "tree": {
        "sha": "7f464857e79411cf67a5537f5701195d19f0bf60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f464857e79411cf67a5537f5701195d19f0bf60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800b3d5c14a9e5437b7e8838c69fdd6710908bb/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e78007fc1a8f1891078d4f6bfe7583a77dda7ee9"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8388e8d36e5b572bc71c0f8286e08fea260b726a",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2800b3d5c14a9e5437b7e8838c69fdd6710908bb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2800b3d5c14a9e5437b7e8838c69fdd6710908bb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
        "patch": "@@ -337,6 +337,7 @@ void BitcoinGUI::createActions()\n     m_open_wallet_action = new QAction(tr(\"Open Wallet\"), this);\n     m_open_wallet_action->setEnabled(false);\n     m_open_wallet_action->setStatusTip(tr(\"Open a wallet\"));\n+    m_open_wallet_menu = new QMenu(this);\n \n     m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n@@ -368,13 +369,13 @@ void BitcoinGUI::createActions()\n         connect(usedSendingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedSendingAddresses);\n         connect(usedReceivingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedReceivingAddresses);\n         connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n-        connect(m_open_wallet_action->menu(), &QMenu::aboutToShow, [this] {\n-            m_open_wallet_action->menu()->clear();\n+        connect(m_open_wallet_menu, &QMenu::aboutToShow, [this] {\n+            m_open_wallet_menu->clear();\n             std::vector<std::string> available_wallets = m_wallet_controller->getWalletsAvailableToOpen();\n             std::vector<std::string> wallets = m_node.listWalletDir();\n             for (const auto& path : wallets) {\n                 QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n-                QAction* action = m_open_wallet_action->menu()->addAction(name);\n+                QAction* action = m_open_wallet_menu->addAction(name);\n \n                 if (std::find(available_wallets.begin(), available_wallets.end(), path) == available_wallets.end()) {\n                     // This wallet is already loaded\n@@ -410,7 +411,7 @@ void BitcoinGUI::createActions()\n                 });\n             }\n             if (wallets.empty()) {\n-                QAction* action = m_open_wallet_action->menu()->addAction(tr(\"No wallets available\"));\n+                QAction* action = m_open_wallet_menu->addAction(tr(\"No wallets available\"));\n                 action->setEnabled(false);\n             }\n         });\n@@ -634,7 +635,7 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n     m_wallet_controller = wallet_controller;\n \n     m_open_wallet_action->setEnabled(true);\n-    m_open_wallet_action->setMenu(new QMenu(this));\n+    m_open_wallet_action->setMenu(m_open_wallet_menu);\n \n     connect(wallet_controller, &WalletController::walletAdded, this, &BitcoinGUI::addWallet);\n     connect(wallet_controller, &WalletController::walletRemoved, this, &BitcoinGUI::removeWallet);"
      },
      {
        "sha": "608f10750aff4f7d50959a73db7c5406b315a6de",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2800b3d5c14a9e5437b7e8838c69fdd6710908bb/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2800b3d5c14a9e5437b7e8838c69fdd6710908bb/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
        "patch": "@@ -148,6 +148,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n     QAction* m_open_wallet_action{nullptr};\n+    QMenu* m_open_wallet_menu{nullptr};\n     QAction* m_close_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;\n     QAction* m_wallet_selector_action = nullptr;"
      }
    ]
  },
  {
    "sha": "715da91e917af106d8d77fb6240f2adf84bca292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTVkYTkxZTkxN2FmMTA2ZDhkNzdmYjYyNDBmMmFkZjg0YmNhMjky",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-20T18:24:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-24T13:02:05Z"
      },
      "message": "Set AA_EnableHighDpiScaling attribute early\n\nQt docs: This attribute must be set before QGuiApplication is\nconstructed.\n\nGithub-Pull: #16254\nRebased-From: 099e4b9ad3d9967051d5c3d45c6315d1b30fea05",
      "tree": {
        "sha": "e3aece7a6a6d8e9a1bf80c506707f39ac8870f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3aece7a6a6d8e9a1bf80c506707f39ac8870f2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/715da91e917af106d8d77fb6240f2adf84bca292",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/715da91e917af106d8d77fb6240f2adf84bca292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/715da91e917af106d8d77fb6240f2adf84bca292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/715da91e917af106d8d77fb6240f2adf84bca292/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2800b3d5c14a9e5437b7e8838c69fdd6710908bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2800b3d5c14a9e5437b7e8838c69fdd6710908bb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d2ac18f5a726c3a0b8b6cfdca20b541e160019f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/715da91e917af106d8d77fb6240f2adf84bca292/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/715da91e917af106d8d77fb6240f2adf84bca292/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=715da91e917af106d8d77fb6240f2adf84bca292",
        "patch": "@@ -437,16 +437,17 @@ int GuiMain(int argc, char* argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n-    BitcoinApplication app(*node, argc, argv);\n     // Generate high-dpi pixmaps\n     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n #if QT_VERSION >= 0x050600\n-    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n+    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n #endif\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n \n+    BitcoinApplication app(*node, argc, argv);\n+\n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)"
      }
    ]
  },
  {
    "sha": "af25a757e077f907a8ce1cb676bd4908ed638e14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjI1YTc1N2UwNzdmOTA3YThjZTFjYjY3NmJkNDkwOGVkNjM4ZTE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-18T17:47:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-26T13:25:13Z"
      },
      "message": "Add comments to Python ECDSA implementation\n\nGithub-Pull: #15826\nRebased-From: b67978529ad02fc2665f2362418dc53db2e25e17",
      "tree": {
        "sha": "791915049376938a40619a65664635a01815fce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/791915049376938a40619a65664635a01815fce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af25a757e077f907a8ce1cb676bd4908ed638e14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af25a757e077f907a8ce1cb676bd4908ed638e14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af25a757e077f907a8ce1cb676bd4908ed638e14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af25a757e077f907a8ce1cb676bd4908ed638e14/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "715da91e917af106d8d77fb6240f2adf84bca292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/715da91e917af106d8d77fb6240f2adf84bca292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/715da91e917af106d8d77fb6240f2adf84bca292"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 56,
      "deletions": 16
    },
    "files": [
      {
        "sha": "912c0ca978e31dc0fb70593240f6dd2f2a00c482",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 56,
        "deletions": 16,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af25a757e077f907a8ce1cb676bd4908ed638e14/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af25a757e077f907a8ce1cb676bd4908ed638e14/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=af25a757e077f907a8ce1cb676bd4908ed638e14",
        "patch": "@@ -1,18 +1,17 @@\n # Copyright (c) 2019 Pieter Wuille\n-\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test-only secp256k1 elliptic curve implementation\n \n WARNING: This code is slow, uses bad randomness, does not properly protect\n keys, and is trivially vulnerable to side channel attacks. Do not use for\n-anything but tests.\n-\"\"\"\n-\n+anything but tests.\"\"\"\n import random\n \n def modinv(a, n):\n     \"\"\"Compute the modular inverse of a modulo n\n \n-    See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\n+    See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers.\n     \"\"\"\n     t1, t2 = 0, 1\n     r1, r2 = n, a\n@@ -30,8 +29,9 @@ def jacobi_symbol(n, k):\n     \"\"\"Compute the Jacobi symbol of n modulo k\n \n     See http://en.wikipedia.org/wiki/Jacobi_symbol\n-    \"\"\"\n-    assert k > 0 and k & 1\n+\n+    For our application k is always prime, so this is the same as the Legendre symbol.\"\"\"\n+    assert k > 0 and k & 1, \"jacobi symbol is only defined for positive odd k\"\n     n %= k\n     t = 0\n     while n != 0:\n@@ -47,11 +47,18 @@ def jacobi_symbol(n, k):\n     return 0\n \n def modsqrt(a, p):\n-    \"\"\"Compute the square root of a modulo p\n+    \"\"\"Compute the square root of a modulo p when p % 4 = 3.\n \n-    For p = 3 mod 4, if a square root exists, it is equal to a**((p+1)/4) mod p.\n+    The Tonelli-Shanks algorithm can be used. See https://en.wikipedia.org/wiki/Tonelli-Shanks_algorithm\n+\n+    Limiting this function to only work for p % 4 = 3 means we don't need to\n+    iterate through the loop. The highest n such that p - 1 = 2^n Q with Q odd\n+    is n = 1. Therefore Q = (p-1)/2 and sqrt = a^((Q+1)/2) = a^((p+1)/4)\n+\n+    secp256k1's is defined over field of size 2**256 - 2**32 - 977, which is 3 mod 4.\n     \"\"\"\n-    assert(p % 4 == 3) # Only p = 3 mod 4 is implemented\n+    if p % 4 != 3:\n+        raise NotImplementedError(\"modsqrt only implemented for p % 4 = 3\")\n     sqrt = pow(a, (p + 1)//4, p)\n     if pow(sqrt, 2, p) == a % p:\n         return sqrt\n@@ -65,7 +72,9 @@ def __init__(self, p, a, b):\n         self.b = b % p\n \n     def affine(self, p1):\n-        \"\"\"Convert a Jacobian point tuple p1 to affine form, or None if at infinity.\"\"\"\n+        \"\"\"Convert a Jacobian point tuple p1 to affine form, or None if at infinity.\n+\n+        An affine point is represented as the Jacobian (x, y, 1)\"\"\"\n         x1, y1, z1 = p1\n         if z1 == 0:\n             return None\n@@ -101,7 +110,9 @@ def lift_x(self, x):\n         return (x, y, 1)\n \n     def double(self, p1):\n-        \"\"\"Double a Jacobian tuple p1\"\"\"\n+        \"\"\"Double a Jacobian tuple p1\n+\n+        See https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates - Point Doubling\"\"\"\n         x1, y1, z1 = p1\n         if z1 == 0:\n             return (0, 1, 0)\n@@ -119,10 +130,13 @@ def double(self, p1):\n         return (x2, y2, z2)\n \n     def add_mixed(self, p1, p2):\n-        \"\"\"Add a Jacobian tuple p1 and an affine tuple p2\"\"\"\n+        \"\"\"Add a Jacobian tuple p1 and an affine tuple p2\n+\n+        See https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates - Point Addition (with affine point)\"\"\"\n         x1, y1, z1 = p1\n         x2, y2, z2 = p2\n         assert(z2 == 1)\n+        # Adding to the point at infinity is a no-op\n         if z1 == 0:\n             return p2\n         z1_2 = (z1**2) % self.p\n@@ -131,7 +145,9 @@ def add_mixed(self, p1, p2):\n         s2 = (y2 * z1_3) % self.p\n         if x1 == u2:\n             if (y1 != s2):\n+                # p1 and p2 are inverses. Return the point at infinity.\n                 return (0, 1, 0)\n+            # p1 == p2. The formulas below fail when the two points are equal.\n             return self.double(p1)\n         h = u2 - x1\n         r = s2 - y1\n@@ -144,13 +160,17 @@ def add_mixed(self, p1, p2):\n         return (x3, y3, z3)\n \n     def add(self, p1, p2):\n-        \"\"\"Add two Jacobian tuples p1 and p2\"\"\"\n+        \"\"\"Add two Jacobian tuples p1 and p2\n+\n+        See https://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates - Point Addition\"\"\"\n         x1, y1, z1 = p1\n         x2, y2, z2 = p2\n+        # Adding the point at infinity is a no-op\n         if z1 == 0:\n             return p2\n         if z2 == 0:\n             return p1\n+        # Adding an Affine to a Jacobian is more efficient since we save field multiplications and squarings when z = 1\n         if z1 == 1:\n             return self.add_mixed(p2, p1)\n         if z2 == 1:\n@@ -165,7 +185,9 @@ def add(self, p1, p2):\n         s2 = (y2 * z1_3) % self.p\n         if u1 == u2:\n             if (s1 != s2):\n+                # p1 and p2 are inverses. Return the point at infinity.\n                 return (0, 1, 0)\n+            # p1 == p2. The formulas below fail when the two points are equal.\n             return self.double(p1)\n         h = u2 - u1\n         r = s2 - s1\n@@ -214,6 +236,8 @@ def set(self, data):\n             x = int.from_bytes(data[1:33], 'big')\n             if SECP256K1.is_x_coord(x):\n                 p = SECP256K1.lift_x(x)\n+                # if the oddness of the y co-ord isn't correct, find the other\n+                # valid y\n                 if (p[1] & 1) != (data[0] & 1):\n                     p = SECP256K1.negate(p)\n                 self.p = p\n@@ -243,8 +267,14 @@ def get_bytes(self):\n             return bytes([0x04]) + p[0].to_bytes(32, 'big') + p[1].to_bytes(32, 'big')\n \n     def verify_ecdsa(self, sig, msg, low_s=True):\n-        \"\"\"Verify a strictly DER-encoded ECDSA signature against this pubkey.\"\"\"\n+        \"\"\"Verify a strictly DER-encoded ECDSA signature against this pubkey.\n+\n+        See https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm for the\n+        ECDSA verifier algorithm\"\"\"\n         assert(self.valid)\n+\n+        # Extract r and s from the DER formatted signature. Return false for\n+        # any DER encoding errors.\n         if (sig[1] + 2 != len(sig)):\n             return False\n         if (len(sig) < 4):\n@@ -275,11 +305,15 @@ def verify_ecdsa(self, sig, msg, low_s=True):\n         if (slen > 1 and (sig[6+rlen] == 0) and not (sig[7+rlen] & 0x80)):\n             return False\n         s = int.from_bytes(sig[6+rlen:6+rlen+slen], 'big')\n+\n+        # Verify that r and s are within the group order\n         if r < 1 or s < 1 or r >= SECP256K1_ORDER or s >= SECP256K1_ORDER:\n             return False\n         if low_s and s >= SECP256K1_ORDER_HALF:\n             return False\n         z = int.from_bytes(msg, 'big')\n+\n+        # Run verifier algorithm on r, s\n         w = modinv(s, SECP256K1_ORDER)\n         u1 = z*w % SECP256K1_ORDER\n         u2 = r*w % SECP256K1_ORDER\n@@ -331,7 +365,10 @@ def get_pubkey(self):\n         return ret\n \n     def sign_ecdsa(self, msg, low_s=True):\n-        \"\"\"Construct a DER-encoded ECDSA signature with this key.\"\"\"\n+        \"\"\"Construct a DER-encoded ECDSA signature with this key.\n+\n+        See https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm for the\n+        ECDSA signer algorithm.\"\"\"\n         assert(self.valid)\n         z = int.from_bytes(msg, 'big')\n         # Note: no RFC6979, but a simple random nonce (some tests rely on distinct transactions for the same operation)\n@@ -341,6 +378,9 @@ def sign_ecdsa(self, msg, low_s=True):\n         s = (modinv(k, SECP256K1_ORDER) * (z + self.secret * r)) % SECP256K1_ORDER\n         if low_s and s > SECP256K1_ORDER_HALF:\n             s = SECP256K1_ORDER - s\n+        # Represent in DER format. The byte representations of r and s have\n+        # length rounded up (255 bits becomes 32 bytes and 256 bits becomes 33\n+        # bytes).\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb"
      }
    ]
  },
  {
    "sha": "bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2IyN2Q3YjAzZDFlN2E0NDA0YzA0ODU5ZjgxNDZkOGJjN2MzNjBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T17:08:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-26T13:31:08Z"
      },
      "message": ".python-version: Bump to 3.5.6\n\nSee also: dddd1d05d3df06865f5e0b1442d7425c0955de4e",
      "tree": {
        "sha": "e9a2d5eb34ebe4610ff552fb4c14ac9546cf2c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9a2d5eb34ebe4610ff552fb4c14ac9546cf2c09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af25a757e077f907a8ce1cb676bd4908ed638e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af25a757e077f907a8ce1cb676bd4908ed638e14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af25a757e077f907a8ce1cb676bd4908ed638e14"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c49282585a030b902316d2b71a73b15b5840aaa2",
        "filename": ".python-version",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
        "patch": "@@ -1 +1 @@\n-3.4.9\n+3.5.6"
      },
      {
        "sha": "1b3df62867a35fa92d96844d01712b5ad0c95bc4",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcb27d7b03d1e7a4404c04859f8146d8bc7c360a/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=bcb27d7b03d1e7a4404c04859f8146d8bc7c360a",
        "patch": "@@ -22,7 +22,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L66) |\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n-| Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n+| Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |"
      }
    ]
  }
]