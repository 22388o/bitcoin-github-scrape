[
  {
    "sha": "7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmRmZmZiZTBiOWE0MTE0ZmU2NjZmNjQzOGJhMGI2ZDM2NWEyMTFj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T17:27:54Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T17:27:54Z"
      },
      "message": "allow blockToJSON to have null blockindex",
      "tree": {
        "sha": "d2e99fd8fabf9fcb4585de04a0df55a732f3ebab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2e99fd8fabf9fcb4585de04a0df55a732f3ebab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13c842e02816e5bdd7e6dd4d3a60482d9f272708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c842e02816e5bdd7e6dd4d3a60482d9f272708",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13c842e02816e5bdd7e6dd4d3a60482d9f272708"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0ec58fc52aa1d9b99b1e6fa2d077c1999552eec4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
        "patch": "@@ -115,16 +115,16 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n+    if (blockindex) result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n-    if (chainActive.Contains(blockindex))\n+    if (blockindex && chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n-    result.pushKV(\"height\", blockindex->nHeight);\n+    if (blockindex) result.pushKV(\"height\", blockindex->nHeight);\n     result.pushKV(\"version\", block.nVersion);\n     result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n     result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n@@ -142,16 +142,16 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     }\n     result.pushKV(\"tx\", txs);\n     result.pushKV(\"time\", block.GetBlockTime());\n-    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    if (blockindex) result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n     result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n     result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n-    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n-    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n-    result.pushKV(\"nTx\", (uint64_t)blockindex->nTx);\n+    if (blockindex) result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    if (blockindex) result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n+    if (blockindex) result.pushKV(\"nTx\", (uint64_t)blockindex->nTx);\n \n-    if (blockindex->pprev)\n+    if (blockindex && blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    CBlockIndex *pnext = blockindex ? chainActive.Next(blockindex) : nullptr;\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;"
      }
    ]
  },
  {
    "sha": "6cab6f89e677adc0c184e3dc091e7de237b30470",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2FiNmY4OWU2NzdhZGMwYzE4NGUzZGMwOTFlN2RlMjM3YjMwNDcw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T17:52:37Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T18:38:28Z"
      },
      "message": "blockToJSON less dependent on blockindex since block is present",
      "tree": {
        "sha": "f9c1c795f9f9d31db1aa5c775f2cb51100aaa065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9c1c795f9f9d31db1aa5c775f2cb51100aaa065"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cab6f89e677adc0c184e3dc091e7de237b30470",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab6f89e677adc0c184e3dc091e7de237b30470",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab6f89e677adc0c184e3dc091e7de237b30470",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab6f89e677adc0c184e3dc091e7de237b30470/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdfffbe0b9a4114fe666f6438ba0b6d365a211c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "51b8b341eaca78abbeea45c7573fa3606d3224a2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cab6f89e677adc0c184e3dc091e7de237b30470/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cab6f89e677adc0c184e3dc091e7de237b30470/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6cab6f89e677adc0c184e3dc091e7de237b30470",
        "patch": "@@ -115,12 +115,14 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n+    result.pushKV(\"hash\", block.GetHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n-    if (blockindex && chainActive.Contains(blockindex))\n+    if (blockindex && chainActive.Contains(blockindex)) {\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.pushKV(\"confirmations\", confirmations);\n+    }\n+    // Confirmations still reported as -1 otherwise\n+    if (blockindex) result.pushKV(\"confirmations\", confirmations);\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n@@ -147,10 +149,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n     if (blockindex) result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n     if (blockindex) result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n-    if (blockindex) result.pushKV(\"nTx\", (uint64_t)blockindex->nTx);\n+    result.pushKV(\"nTx\", (uint64_t)block.vtx.size());\n \n-    if (blockindex && blockindex->pprev)\n-        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n+    result.pushKV(\"previousblockhash\", block.hashPrevBlock.GetHex());\n     CBlockIndex *pnext = blockindex ? chainActive.Next(blockindex) : nullptr;\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());"
      }
    ]
  },
  {
    "sha": "6fea07f283042a4bc8f1c00554d6df510499c4b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmVhMDdmMjgzMDQyYTRiYzhmMWMwMDU1NGQ2ZGY1MTA0OTljNGIw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T17:31:11Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T18:38:28Z"
      },
      "message": "add decodeblock rpc",
      "tree": {
        "sha": "a5d96b63fac6402c70eb834c65cd5b7ac06ee0c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5d96b63fac6402c70eb834c65cd5b7ac06ee0c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fea07f283042a4bc8f1c00554d6df510499c4b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fea07f283042a4bc8f1c00554d6df510499c4b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fea07f283042a4bc8f1c00554d6df510499c4b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fea07f283042a4bc8f1c00554d6df510499c4b0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cab6f89e677adc0c184e3dc091e7de237b30470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab6f89e677adc0c184e3dc091e7de237b30470",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab6f89e677adc0c184e3dc091e7de237b30470"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "efc2ca74daba829f0fbee42d47834e4961a55966",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fea07f283042a4bc8f1c00554d6df510499c4b0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fea07f283042a4bc8f1c00554d6df510499c4b0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6fea07f283042a4bc8f1c00554d6df510499c4b0",
        "patch": "@@ -770,6 +770,70 @@ static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n     return block;\n }\n \n+static UniValue decodeblock(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"decodeblock \\\"block\\\" ( verbosity ) \\n\"\n+            \"If verbosity is 1, returns an Object with information about <block>.\\n\"\n+            \"If verbosity is 2, returns an Object with information about <block> and information about each transaction. \\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"block\\\"          (string, required) The block in hex\\n\"\n+            \"2. verbosity              (numeric, optional, default=1) 1 for a json object, and 2 for json object with transaction data\\n\"\n+            \"\\nResult (for verbosity = 1):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"}\\n\"\n+            \"\\nResult (for verbosity = 2):\\n\"\n+            \"{\\n\"\n+            \"  ...,                     Same output as verbosity = 1.\\n\"\n+            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+            \"         ,...\\n\"\n+            \"  ],\\n\"\n+            \"  ,...                     Same output as verbosity = 1.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"decodeblock\", \"\\\"<block hex>\\\"\")\n+            + HelpExampleRpc(\"decodeblock\", \"\\\"<block hex>\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n+    CBlock& block = *blockptr;\n+    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n+    }\n+\n+    int verbosity = 1;\n+    if (!request.params[1].isNull()) {\n+        verbosity = request.params[1].get_int();\n+    }\n+\n+    return blockToJSON(block, nullptr, verbosity >= 2);\n+\n+}\n+\n static UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2197,6 +2261,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n+    { \"blockchain\",         \"decodeblock\",            &decodeblock,            {\"block\",\"verbosity\"} },\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      {} },\n     { \"blockchain\",         \"getchaintxstats\",        &getchaintxstats,        {\"nblocks\", \"blockhash\"} },\n     { \"blockchain\",         \"getblockstats\",          &getblockstats,          {\"hash_or_height\", \"stats\"} },"
      }
    ]
  },
  {
    "sha": "1aecb69d7faa9e10ce5feda97d2709057cb9b3e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWVjYjY5ZDdmYWE5ZTEwY2U1ZmVkYTk3ZDI3MDkwNTdjYjliM2Uz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T18:23:43Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-10T18:38:28Z"
      },
      "message": "add getblock/decodeblock verbosity checks",
      "tree": {
        "sha": "8f063d681b2730cc175df2dbc6435b3aa040fc1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f063d681b2730cc175df2dbc6435b3aa040fc1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fea07f283042a4bc8f1c00554d6df510499c4b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fea07f283042a4bc8f1c00554d6df510499c4b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fea07f283042a4bc8f1c00554d6df510499c4b0"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cd63315e5fba8b1963ae75b9360c79c1e3a49425",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aecb69d7faa9e10ce5feda97d2709057cb9b3e3/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=1aecb69d7faa9e10ce5feda97d2709057cb9b3e3",
        "patch": "@@ -58,6 +58,7 @@ def run_test(self):\n         self._test_getnetworkhashps()\n         self._test_stopatheight()\n         self._test_waitforblockheight()\n+        self._test_getblock_decodeblock()\n         assert self.nodes[0].verifychain(4, 0)\n \n     def _test_getblockchaininfo(self):\n@@ -290,6 +291,55 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblock_decodeblock(self):\n+        self.log.info(\"Test decodeblock and getblock args\")\n+\n+        self.restart_node(0, [])\n+\n+        # Ensure mempool is clear, make 2 empty blocks after\n+        # We are looking at one buried by one confirmation\n+        empty_block = self.nodes[0].generate(3)[-2]\n+        block_hex = self.nodes[0].getblock(empty_block, 0) # no verbose\n+        assert(isinstance(block_hex, str)) # Not json obj\n+        block_details_1 = self.nodes[0].getblock(empty_block) # default of 1\n+        block_details_2 = self.nodes[0].getblock(empty_block, 2)\n+        raw_details_1 = self.nodes[0].decodeblock(block_hex) # default of 1\n+        raw_details_2 = self.nodes[0].decodeblock(block_hex, 2)\n+\n+        assert_equal(block_details_1[\"hash\"], raw_details_1[\"hash\"])\n+        assert_equal(block_details_1[\"size\"], raw_details_1[\"size\"])\n+        assert_equal(block_details_1[\"weight\"], raw_details_1[\"weight\"])\n+        assert_equal(block_details_1[\"strippedsize\"], raw_details_1[\"strippedsize\"])\n+        assert_equal(block_details_1[\"version\"], raw_details_1[\"version\"])\n+        assert_equal(block_details_1[\"versionHex\"], raw_details_1[\"versionHex\"])\n+        assert_equal(block_details_1[\"merkleroot\"], raw_details_1[\"merkleroot\"])\n+\n+        # Tx list is identical(only coinbase)\n+        assert_equal(len(block_details_1[\"tx\"]), 1)\n+        assert_equal(len(raw_details_2[\"tx\"]), 1)\n+        assert_equal(block_details_2[\"tx\"], raw_details_2[\"tx\"])\n+        assert_equal(block_details_1[\"tx\"], raw_details_1[\"tx\"])\n+\n+        # Contextual chain fields missing from raw decode\n+        assert(\"confirmations\" not in raw_details_1)\n+        assert(\"height\" not in raw_details_1)\n+        assert(\"mediantime\" not in raw_details_1)\n+        assert(\"nextblockhash\" not in raw_details_1)\n+        assert(\"difficulty\" not in raw_details_1)\n+        assert(\"chainwork\" not in raw_details_1)\n+\n+        assert(\"confirmations\" in block_details_1)\n+        assert(\"height\" in block_details_1)\n+        assert(\"mediantime\" in block_details_1)\n+        assert(\"nextblockhash\" in block_details_1)\n+        assert(\"difficulty\" in block_details_1)\n+        assert(\"chainwork\" in block_details_1)\n+\n+        # Only high-verbosity calls have full tx\n+        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, block_details_1[\"tx\"][0])\n+        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, raw_details_1[\"tx\"][0])\n+        self.nodes[0].decoderawtransaction(block_details_2[\"tx\"][0][\"hex\"])\n+        self.nodes[0].decoderawtransaction(raw_details_2[\"tx\"][0][\"hex\"])\n \n if __name__ == '__main__':\n     BlockchainTest().main()"
      }
    ]
  }
]