[
  {
    "sha": "1111bb91f517838e5b9f778bf6b5a9c8d561e857",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTExYmI5MWY1MTc4MzhlNWI5Zjc3OGJmNmI1YTljOGQ1NjFlODU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-27T19:28:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-17T16:56:56Z"
      },
      "message": "test: Reformat python imports to aid scripted diff",
      "tree": {
        "sha": "589e39af94499db93e270403867e9783cca63a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/589e39af94499db93e270403867e9783cca63a8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1111bb91f517838e5b9f778bf6b5a9c8d561e857",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj4+Av/VosVIZ95Q6Rnfq+e5NUBl8s8MFtTCUXvVaHtllTk2LnEP2DUHQvt/HC2\n7srAjzb4i4a7PyczbBjDzRlpsPJPX3Ow9LYM/jblsaJvVGIWjh6+fweZNdq4SlwB\nR8D2kjI1H5xGF3CK7qoIEp8G7r0SUJPUWfT18jpv9/bSaYlYppexCPVACId/+sY4\nImXTiGZVS/J/RZFbj4kXqOFEZonIneVKb65y+4L0FgXp1r2lIjQAQvugYCr7vi6/\nzy+vHuEEL59cq5IWXnAxX46x+KL1W8kjq/7w2iuBpqrP/jBQVov/MyFx1YOBz/jP\ntqlazvRZHR3O9kkoMhtPIjmkl6lYsQBjTYYSNsL41wcV7SedlhN7YpJ1sSlG2fej\nvRBwSu4xzFLt2SjbO7qW1RC/LCrDI4C7n3qREoxwTQlpoUalGlQEhVATy/K7Fse2\nYYewkh7wRiQ5Qb3fbYyTtLavTR2RfiaPIRzGcaOugywwDfzoVRGJEg6+mtu0POJS\nJTzrvOlC\n=LNDt\n-----END PGP SIGNATURE-----",
        "payload": "tree 589e39af94499db93e270403867e9783cca63a8f\nparent cd737214ced756898883c8d940d353f0a1c4f4b9\nauthor MarcoFalke <falke.marco@gmail.com> 1566934136 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568739416 -0400\n\ntest: Reformat python imports to aid scripted diff\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111bb91f517838e5b9f778bf6b5a9c8d561e857",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1111bb91f517838e5b9f778bf6b5a9c8d561e857",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111bb91f517838e5b9f778bf6b5a9c8d561e857/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd737214ced756898883c8d940d353f0a1c4f4b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd737214ced756898883c8d940d353f0a1c4f4b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd737214ced756898883c8d940d353f0a1c4f4b9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e6e298a980ac18b983f113ffd30ed9a5a293916d",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111bb91f517838e5b9f778bf6b5a9c8d561e857/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111bb91f517838e5b9f778bf6b5a9c8d561e857/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=1111bb91f517838e5b9f778bf6b5a9c8d561e857",
        "patch": "@@ -7,7 +7,11 @@\n \n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until,\n+    connect_nodes_bi,\n+)\n \n \n class NotificationsTest(BitcoinTestFramework):"
      },
      {
        "sha": "33f44b0e07c222b1ec7c07a566e46d8aaab612eb",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111bb91f517838e5b9f778bf6b5a9c8d561e857/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111bb91f517838e5b9f778bf6b5a9c8d561e857/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=1111bb91f517838e5b9f778bf6b5a9c8d561e857",
        "patch": "@@ -17,7 +17,13 @@\n from io import BytesIO\n from test_framework.messages import CTransaction, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+    hex_str_to_bytes,\n+)\n+\n \n class multidict(dict):\n     \"\"\"Dictionary that allows duplicate keys."
      }
    ]
  },
  {
    "sha": "faaee1e39a91b3f603881655d3980c29af09852b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFlZTFlMzlhOTFiM2Y2MDM4ODE2NTVkMzk4MGMyOWFmMDk4NTJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-16T13:22:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-17T17:08:17Z"
      },
      "message": "test: Use connect_nodes when connecting nodes in the test_framework",
      "tree": {
        "sha": "902cf7b6a2756ee81681e8a2c6b6084ee6e24b1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/902cf7b6a2756ee81681e8a2c6b6084ee6e24b1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaee1e39a91b3f603881655d3980c29af09852b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgKeQwAuXAkOkvS2ePVSdlXBkX7YcHwWhzRpFEYuQNifUoNSE3nhtIdaDVT2c8B\nyOTAWv7gFNsp0nh2JZCpz79Y58WExyybSH5NTQPTLWSCtoSPDdx5ZslktVvBlVgs\nwN4aFGG8O0tuUbwdpDdbA2iCMyN9g4UzZeIWokkDy9ShCpJk8elDVGvNmY3cDrVY\ntWEa27VJal5bVG9denAVCYNGVcbFT/WehJ+ao4+kmS7S9s81m1RohW6l8ryRLpIC\ni64XoXaoZoq8cmhRex4NjIQUxir9x9fuT3yqXovZZ+9q5YeN9GdUJDKniYwtafCb\noxgsiQNm5gBikNNQLWki+Yg18SOIMYeOyZzT8ezRpXWzV0eOBz+QsjpPDAvJ7XaC\nkmunUlmu4SmAMgaPhtBozhpAqvpWPDM7fDmGAM4BE1pC128LKTrYoBeK+sCB9LHC\n5HwRL/s6NdwBU4uNP2vmchRxUzjkQTNHkCOM7JVvho9FxycO0KPkqlGXxIca9JuG\nTP+gRfFA\n=OxAO\n-----END PGP SIGNATURE-----",
        "payload": "tree 902cf7b6a2756ee81681e8a2c6b6084ee6e24b1f\nparent 1111bb91f517838e5b9f778bf6b5a9c8d561e857\nauthor MarcoFalke <falke.marco@gmail.com> 1568640169 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568740097 -0400\n\ntest: Use connect_nodes when connecting nodes in the test_framework\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaee1e39a91b3f603881655d3980c29af09852b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaee1e39a91b3f603881655d3980c29af09852b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaee1e39a91b3f603881655d3980c29af09852b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1111bb91f517838e5b9f778bf6b5a9c8d561e857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111bb91f517838e5b9f778bf6b5a9c8d561e857",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1111bb91f517838e5b9f778bf6b5a9c8d561e857"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 38,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f05a3e026c3ee80915d6324aee91861de62769bb",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=faaee1e39a91b3f603881655d3980c29af09852b",
        "patch": "@@ -18,6 +18,10 @@ def set_test_params(self):\n         self.num_nodes = 2\n \n     def run_test(self):\n+        self.log.info(\"Connect nodes both way\")\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         self.log.info(\"Test setban and listbanned RPCs\")\n \n         self.log.info(\"setban: successfully ban single IP address\")\n@@ -74,7 +78,9 @@ def run_test(self):\n \n         # Clear ban lists\n         self.nodes[1].clearbanned()\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        self.log.info(\"Connect nodes both way\")\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n \n         self.log.info(\"Test disconnectnode RPCs\")\n "
      },
      {
        "sha": "aada04f66f686398fd9d085fa91a9b8e327c5fff",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=faaee1e39a91b3f603881655d3980c29af09852b",
        "patch": "@@ -121,6 +121,7 @@ def test_inv_block(self):\n         #   peer, plus\n         # * the first time it is re-requested from the outbound peer, plus\n         # * 2 seconds to avoid races\n+        assert self.nodes[1].getpeerinfo()[0]['inbound'] == False\n         timeout = 2 + (MAX_GETDATA_RANDOM_DELAY + INBOUND_PEER_TX_DELAY) + (\n             GETDATA_TX_INTERVAL + MAX_GETDATA_RANDOM_DELAY)\n         self.log.info(\"Tx should be received at node 1 after {} seconds\".format(timeout))"
      },
      {
        "sha": "fde96146214e52cfa142b1422e37a181c201c0b8",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=faaee1e39a91b3f603881655d3980c29af09852b",
        "patch": "@@ -54,6 +54,10 @@ def set_test_params(self):\n         self.extra_args = [[\"-minrelaytxfee=0.00001000\"],[\"-minrelaytxfee=0.00000500\"]]\n \n     def run_test(self):\n+        self.log.info('Connect nodes both way')\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         self._test_connection_count()\n         self._test_getnettotals()\n         self._test_getnetworkinfo()\n@@ -105,7 +109,10 @@ def _test_getnetworkinfo(self):\n         wait_until(lambda: self.nodes[0].getnetworkinfo()['connections'] == 0, timeout=3)\n \n         self.nodes[0].setnetworkactive(state=True)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        self.log.info('Connect nodes both way')\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n "
      },
      {
        "sha": "68df238c9247ef5e494b984e51f218acd65657b6",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faaee1e39a91b3f603881655d3980c29af09852b",
        "patch": "@@ -281,8 +281,18 @@ def setup_network(self):\n         # Connect the nodes as a \"chain\".  This allows us\n         # to split the network between nodes 1 and 2 to get\n         # two halves that can work on competing chains.\n+        #\n+        # Topology looks like this:\n+        # node0 <-- node1 <-- node2 <-- node3\n+        #\n+        # If all nodes are in IBD (clean chain from genesis), node0 is assumed to be the source of blocks (miner). To\n+        # ensure block propagation, all nodes will establish outgoing connections toward node0.\n+        # See fPreferredDownload in net_processing.\n+        #\n+        # If further outbound connections are needed, they can be added at the beginning of the test with e.g.\n+        # connect_nodes(self.nodes[1], 2)\n         for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n+            connect_nodes(self.nodes[i + 1], i)\n         self.sync_all()\n \n     def setup_nodes(self):"
      },
      {
        "sha": "4aeb3932557c7d04280de8b6c0bc77f28e3ca5fa",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaee1e39a91b3f603881655d3980c29af09852b/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=faaee1e39a91b3f603881655d3980c29af09852b",
        "patch": "@@ -5,9 +5,15 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_array_result,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+)\n \n-class ListSinceBlockTest (BitcoinTestFramework):\n+\n+class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n@@ -16,6 +22,9 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        # All nodes are in IBD from genesis, so they'll need the miner (node2) to be an outbound connection, or have\n+        # only one connection. (See fPreferredDownload in net_processing)\n+        connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(101)\n         self.sync_all()\n "
      }
    ]
  },
  {
    "sha": "fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNiOWVlOGIyMjgwYWY0YmNiY2ZmZmZmMjc1YWFmOGRkMTI1OTI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-27T19:13:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-17T17:08:21Z"
      },
      "message": "scripted-diff: test: Replace connect_nodes_bi with connect_nodes\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/connect_nodes_bi\\(self.nodes,\\s*(.),\\s*/connect_nodes(self.nodes[\\1], /g' $(git grep -l connect_nodes_bi)\nsed -i --regexp-extended -e 's/connect_nodes_bi(,| )/connect_nodes\\1/g'                                  $(git grep -l connect_nodes_bi)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "15e23a581577d0d98723a9f1c290c77732b72e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e23a581577d0d98723a9f1c290c77732b72e2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhBFwv/XFCrwGjcw/1bXiTZOfkvY5VNDMufTuZt7HwApYN5BjWdaa/gSqMZQjF4\nREmUWCx3kd39C5p/mj4z4/LcZzO7QTX/SLb+JYn2rN7LsqOcAAOM4W7hcTIFgaLO\nn6/A4C93DN8A4Nv2qlABGZELq9r8Pf0SlF/qneUidUzbz8zueP9Pno3yiUDUpk/L\naP/idIvpiqkFpLQsa+PG8c+fXq34UCtekMg+sTLOKXB9qL5tvo8RDHLTMszj00pW\nJFwW+7DR/6+TMa5HPIUC1zMNRTGw5IJpsACJQ14paYL+oGsTrUTMrLpTKgDA2z1m\nKpsdytmS4NoBqHrgHIqnS3+UWbyMPSYtsKfBWT9Dvoo8dszC6YMWbPH7n6F1qsKc\n88TwC4XPLWjg7GNfnOztC8dXmpc9TcqFXM+PjXoltA+8+nZjLlZ4ZMYUBf80d9s/\n1BP+oFMtAcyACe/Kk6lFmY/hCGNcOm+OYmBU1MBP1SDXjGH0b/o7mLwRv8rm95ah\nFCKySNOL\n=sQth\n-----END PGP SIGNATURE-----",
        "payload": "tree 15e23a581577d0d98723a9f1c290c77732b72e2c\nparent faaee1e39a91b3f603881655d3980c29af09852b\nauthor MarcoFalke <falke.marco@gmail.com> 1566933236 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568740101 -0400\n\nscripted-diff: test: Replace connect_nodes_bi with connect_nodes\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/connect_nodes_bi\\(self.nodes,\\s*(.),\\s*/connect_nodes(self.nodes[\\1], /g' $(git grep -l connect_nodes_bi)\nsed -i --regexp-extended -e 's/connect_nodes_bi(,| )/connect_nodes\\1/g'                                  $(git grep -l connect_nodes_bi)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faaee1e39a91b3f603881655d3980c29af09852b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaee1e39a91b3f603881655d3980c29af09852b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaee1e39a91b3f603881655d3980c29af09852b"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "da00b773ad1517477760e4d00a86f1cea717c5c5",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.util import (\n     assert_equal,\n     wait_until,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n \n@@ -62,7 +62,7 @@ def run_test(self):\n             self.log.info(\"test -walletnotify after rescan\")\n             # restart node to rescan to force wallet notifications\n             self.start_node(1)\n-            connect_nodes_bi(self.nodes, 0, 1)\n+            connect_nodes(self.nodes[0], 1)\n \n             wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n "
      },
      {
        "sha": "f9231614ce04ca56fcea2eb414131eb6109c16e8",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n from test_framework.script import CScriptNum\n \n@@ -54,7 +54,7 @@ def mine_chain(self):\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 4000)\n         self.restart_node(0)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "23dea4b7299b3eb39930ed1976b99e5394fb6901",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -99,7 +99,7 @@ def run_test(self):\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n-        connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n+        connect_nodes(self.nodes[0], 1)  # reconnect the node\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n "
      },
      {
        "sha": "e6451d9f18c7b820ecde199aeb36bef95e195e50",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.util import (\n     assert_equal,\n     disconnect_nodes,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -64,7 +64,7 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n@@ -90,7 +90,7 @@ def run_test(self):\n \n         # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 2)\n         try:\n             self.sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n@@ -99,7 +99,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n \n         # now connect also to node 1 (non pruned)\n-        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes(self.nodes[1], 2)\n \n         # sync must be possible\n         self.sync_blocks()\n@@ -111,7 +111,7 @@ def run_test(self):\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n         # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])"
      },
      {
        "sha": "c956af1cbe22ecd3890abdf1920e6b4d6d675457",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -12,7 +12,7 @@\n     assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     count_bytes,\n     find_vout_for_address,\n )\n@@ -35,10 +35,10 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n \n     def run_test(self):\n         self.min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -508,10 +508,10 @@ def test_locked_wallet(self):\n         for node in self.nodes:\n             node.settxfee(self.min_relay_tx_fee)\n \n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-        connect_nodes_bi(self.nodes,0,3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n         # Again lock the watchonly UTXO or nodes[0] may spend it, because\n         # lockunspent is memory-only and thus lost on restart\n         self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])"
      },
      {
        "sha": "e24bf3111be254b88b23d225864b95a82b0a161f",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -15,7 +15,7 @@\n     assert_greater_than_or_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     p2p_port,\n     wait_until,\n )\n@@ -66,7 +66,7 @@ def run_test(self):\n         self._test_getnodeaddresses()\n \n     def _test_connection_count(self):\n-        # connect_nodes_bi connects each node to the other\n+        # connect_nodes connects each node to the other\n         assert_equal(self.nodes[0].getconnectioncount(), 2)\n \n     def _test_getnettotals(self):"
      },
      {
        "sha": "0663ffdf5b1c5fab9acdbe58903734a2cd4a4467",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):\n@@ -60,7 +60,7 @@ def run_test(self):\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes(self.nodes[0], 1)\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         self.log.info(\"Make Node0 prefer block G\")\n@@ -97,8 +97,8 @@ def run_test(self):\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         node_sync_via_rpc(self.nodes[1:3])\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         assert_equal(self.nodes[2].getbestblockhash(), hashL)"
      },
      {
        "sha": "590b2564ff2c07a92e21c16bcf30a751b0ff5d8b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -11,7 +11,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     disconnect_nodes,\n     find_output,\n )\n@@ -72,8 +72,8 @@ def test_utxo_conversion(self):\n         assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n \n         # Reconnect\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC"
      },
      {
        "sha": "52a4feea33651a6d5d33fa4ade8e24e605fdb813",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -20,7 +20,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -59,7 +59,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 2)\n \n     def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')"
      },
      {
        "sha": "780aa5fe03ebd5a2c9cd844714c1c035a3ae4691",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -25,7 +25,7 @@\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n-    connect_nodes_bi,\n+    connect_nodes,\n     disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n@@ -433,7 +433,7 @@ def join_network(self):\n         \"\"\"\n         Join the (previously split) network halves together.\n         \"\"\"\n-        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes(self.nodes[1], 2)\n         self.sync_all()\n \n     def sync_blocks(self, nodes=None, **kwargs):"
      },
      {
        "sha": "dd9a68351882144f8916397a861d72cc39f83e45",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -62,7 +62,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n \n@@ -87,7 +87,7 @@ def setup_network(self):\n         # Fully mesh-connect nodes for faster mempool sync\n         for i, j in itertools.product(range(self.num_nodes), repeat=2):\n             if i > j:\n-                connect_nodes_bi(self.nodes, i, j)\n+                connect_nodes(self.nodes[i], j)\n         self.sync_all()\n \n     def get_balances(self, confirmed=True):"
      },
      {
        "sha": "e3aa6705e5c90dcd2c3d95cab0e1af287c0c4e63",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n # TODO: Copied from wallet_groups.py -- should perhaps move into util.py\n@@ -103,7 +103,7 @@ def test_persistence(self):\n         # Stop and restart node 1\n         self.stop_node(1)\n         self.start_node(1)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n         # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true\n         assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)"
      },
      {
        "sha": "c50dcd987a896fc5e8cbf1fcf73f83e176e998a9",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     sync_blocks,\n )\n \n@@ -211,7 +211,7 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_orig\n         self.restart_node(1, ['-persistmempool=0'])\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         sync_blocks(self.nodes)\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)"
      },
      {
        "sha": "d8f90532ebc408c1216d8c625737456512c15b9f",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -12,7 +12,7 @@\n     assert_equal,\n     assert_fee_amount,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -32,9 +32,9 @@ def setup_network(self):\n         self.setup_nodes()\n         # Only need nodes 0-2 running at start of test\n         self.stop_node(3)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_all(self.nodes[0:3])\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n@@ -218,7 +218,7 @@ def run_test(self):\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n         self.start_node(3)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n \n         # check if we can list zero value tx as available coins\n@@ -253,9 +253,9 @@ def run_test(self):\n         self.start_node(0, [\"-walletbroadcast=0\"])\n         self.start_node(1, [\"-walletbroadcast=0\"])\n         self.start_node(2, [\"-walletbroadcast=0\"])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_all(self.nodes[0:3])\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n@@ -280,9 +280,9 @@ def run_test(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)"
      },
      {
        "sha": "a7c79ec9166d28a129b16203a73c4df99249d2fb",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -23,7 +23,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -48,7 +48,7 @@ def run_test(self):\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n \n         peer_node, rbf_node = self.nodes"
      },
      {
        "sha": "fa5d5a887856b7e56893ccea484cd2daa7ccf231",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n     assert_raises_rpc_error\n )\n \n@@ -82,7 +82,7 @@ def run_test(self):\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n \n         # Needs rescan\n@@ -96,7 +96,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n         shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n         self.start_node(1, extra_args=self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n         # Wallet automatically scans blocks older than key on startup\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)"
      },
      {
        "sha": "2e70a9e0a510d119544a8625c93f70fc05af5ed1",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "patch": "@@ -16,7 +16,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n \n@@ -38,9 +38,9 @@ def run_test(self):\n         self.stop_node(1)\n         shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n \n         for i, output_type in enumerate([\"legacy\", \"p2sh-segwit\", \"bech32\"]):\n \n@@ -72,7 +72,7 @@ def run_test(self):\n             self.stop_node(idx)\n             shutil.copyfile(wallet_backup_path, wallet_path)\n             self.start_node(idx, self.extra_args[idx])\n-            connect_nodes_bi(self.nodes, 0, idx)\n+            connect_nodes(self.nodes[0], idx)\n             self.sync_all()\n \n             self.log.info(\"Verify keypool is restored and balance is correct\")"
      }
    ]
  },
  {
    "sha": "fadfd844de8c53034a97dfa6f771ffe9f523fba2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRmZDg0NGRlOGM1MzAzNGE5N2RmYTZmNzcxZmZlOWY1MjNmYmEy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-27T19:31:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-17T17:09:33Z"
      },
      "message": "test: Remove unused connect_nodes_bi",
      "tree": {
        "sha": "4de832cd959407fb0c1a9cd36c06b0f74c6b03dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4de832cd959407fb0c1a9cd36c06b0f74c6b03dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadfd844de8c53034a97dfa6f771ffe9f523fba2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiHjAv+LvitQLUfa9OG8mDgKHjxh9cY/nGRJ2qN6VRWpA1l4ob5hBzncuMvp7uu\njgwA9PnXcT4WZf7X7bbpr6W2C85/N0LgBothdxschzEVUCMwStJfFQECQIp7MzyZ\nt243c+hVK9oaa2X76H9/6PyyFXZ2P21KiJz7Eq7iCIE3YpSN43ryj+vM9TqdJB1G\nyTJCvdGe8nk+Y6p0uzqQrgPEkyQcDpDPxSua3dcIOU5yd4A8s4kahHglyielo2J/\nx0oVcqlWtDEpLz+Q90Xh0w9joPV9D+y9xw8RT7TGfjLl7YBAqnkUkTj2McFfcbw4\nJNBDqUvX2MzAJOncENRp6BoJxvm0lMqfeQA+l1pp6mwhrOEMEO0aXnrA4ZC01QyZ\nhhJuREdpEt8JVdM8RGdmNrHpInkgv1ps7M0w75ooDnuTEu5lnYu9K7obPkfuYHiU\n+76l1RQvOuupkhTm0ze8sU65i6YtqfqKapAAytdr73+GTjAR7NuS54ZEzCNWuDwP\nACA1RGnq\n=mY1L\n-----END PGP SIGNATURE-----",
        "payload": "tree 4de832cd959407fb0c1a9cd36c06b0f74c6b03dd\nparent fa3b9ee8b2280af4bcbcfffff275aaf8dd125929\nauthor MarcoFalke <falke.marco@gmail.com> 1566934311 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568740173 -0400\n\ntest: Remove unused connect_nodes_bi\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadfd844de8c53034a97dfa6f771ffe9f523fba2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadfd844de8c53034a97dfa6f771ffe9f523fba2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadfd844de8c53034a97dfa6f771ffe9f523fba2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3b9ee8b2280af4bcbcfffff275aaf8dd125929"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3175872b005c4d5437a243e275f7671035a3fb6c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadfd844de8c53034a97dfa6f771ffe9f523fba2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadfd844de8c53034a97dfa6f771ffe9f523fba2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fadfd844de8c53034a97dfa6f771ffe9f523fba2",
        "patch": "@@ -377,10 +377,6 @@ def connect_nodes(from_connection, node_num):\n     # with transaction relaying\n     wait_until(lambda:  all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n \n-def connect_nodes_bi(nodes, a, b):\n-    connect_nodes(nodes[a], b)\n-    connect_nodes(nodes[b], a)\n-\n def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same tip."
      }
    ]
  }
]