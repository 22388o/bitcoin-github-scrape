[
  {
    "sha": "67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzIyNWUyZmQ3ZjFlNjI1ODZhYTdiYjdiZDJjZTI2NWUyNDlmMjk1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-29T18:30:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T16:25:20Z"
      },
      "message": "[tests] Add wallet_balance.py\n\nAdds a test specifically to test the wallet's getbalance and\ngetunconfirmedbalance RPCs.\n\nGithub-Pull: #14845\nRebased-From: c1825b9d398b31967887c459c0fad9cf56cf95c6",
      "tree": {
        "sha": "08d42d23f54398033c5a299063472549f3775cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08d42d23f54398033c5a299063472549f3775cad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 134,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0befab6c64a5fa312fbfccc8e9f26bbc666eba0e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -124,6 +124,7 @@\n     'wallet_importprunedfunds.py',\n     'rpc_zmq.py',\n     'rpc_signmessage.py',\n+    'wallet_balance.py',\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',"
      },
      {
        "sha": "05c97e03405bb56e5e6b091f3d7f6cc21c7e62c2",
        "filename": "test/functional/wallet_balance.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the wallet balance RPC methods.\"\"\"\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+RANDOM_COINBASE_ADDRESS = 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ'\n+\n+def create_transactions(node, address, amt, fees):\n+    # Create and sign raw transactions from node to address for amt.\n+    # Creates a transaction for each fee and returns an array\n+    # of the raw transactions.\n+    utxos = node.listunspent(0)\n+\n+    # Create transactions\n+    inputs = []\n+    ins_total = 0\n+    for utxo in utxos:\n+        inputs.append({\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]})\n+        ins_total += utxo['amount']\n+        if ins_total > amt:\n+            break\n+\n+    txs = []\n+    for fee in fees:\n+        outputs = {address: amt, node.getrawchangeaddress(): ins_total - amt - fee}\n+        raw_tx = node.createrawtransaction(inputs, outputs, 0, True)\n+        raw_tx = node.signrawtransactionwithwallet(raw_tx)\n+        txs.append(raw_tx)\n+\n+    return txs\n+\n+class WalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Check that nodes don't own any UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+\n+        self.log.info(\"Mining one block for each node\")\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.nodes[1].generatetoaddress(100, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+\n+        self.log.info(\"Test getbalance with different arguments\")\n+        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n+        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n+\n+        # Send 40 BTC from 0 to 1 and 60 BTC from 1 to 0.\n+        txs = create_transactions(self.nodes[0], self.nodes[1].getnewaddress(), 40, [Decimal('0.01')])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+\n+        self.sync_all()\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), 60, [Decimal('0.01'), Decimal('0.02')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+        self.sync_all()\n+\n+        # First argument of getbalance must be set to \"*\"\n+        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[1].getbalance, \"\")\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with unconfirmed inputs\")\n+\n+        # getbalance without any arguments includes unconfirmed transactions, but not untrusted transactions\n+        assert_equal(self.nodes[0].getbalance(), Decimal('9.99'))  # change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.99'))  # change from node 1's send\n+        # Same with minconf=0\n+        assert_equal(self.nodes[0].getbalance(minconf=0), Decimal('9.99'))\n+        assert_equal(self.nodes[1].getbalance(minconf=0), Decimal('29.99'))\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        assert_equal(self.nodes[0].getbalance(minconf=1), Decimal('0'))\n+        assert_equal(self.nodes[1].getbalance(minconf=1), Decimal('0'))\n+        # getunconfirmedbalance\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))  # output of node 1's spend\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+\n+        # Node 1 bumps the transaction fee and resends\n+        self.nodes[1].sendrawtransaction(txs[1]['hex'])\n+        self.sync_all()\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with conflicted unconfirmed inputs\")\n+\n+        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], Decimal('60'))  # output of node 1's send\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))\n+        assert_equal(self.nodes[1].getwalletinfo()[\"unconfirmed_balance\"], Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))\n+\n+        self.nodes[1].generatetoaddress(1, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # balances are correct after the transactions are confirmed\n+        assert_equal(self.nodes[0].getbalance(), Decimal('69.99'))  # node 1's send plus change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.98'))  # change from node 0's send\n+\n+        # Send total balance away from node 1\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), Decimal('29.97'), [Decimal('0.01')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].generatetoaddress(2, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        # getbalance with minconf=3 should still show the old balance\n+        assert_equal(self.nodes[1].getbalance(minconf=3), Decimal('0'))\n+\n+        # getbalance with minconf=2 will show the new balance.\n+        assert_equal(self.nodes[1].getbalance(minconf=2), Decimal('0'))\n+\n+if __name__ == '__main__':\n+    WalletTest().main()"
      },
      {
        "sha": "d8ab390afa621c9ee0003744eb7249b65dd5a5e8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -67,15 +67,6 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n-        # Check getbalance with different arguments\n-        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n-        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n-\n-        # first argument of getbalance must be excluded or set to \"*\"\n-        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[0].getbalance, \"\")\n-\n         # Check that only first and second nodes have UTXOs\n         utxos = self.nodes[0].listunspent()\n         assert_equal(len(utxos), 1)\n@@ -242,10 +233,6 @@ def run_test(self):\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n \n-        # Exercise balance rpcs\n-        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], 1)\n-        assert_equal(self.nodes[0].getunconfirmedbalance(), 1)\n-\n         # check if we can list zero value tx as available coins\n         # 1. create raw_tx\n         # 2. hex-changed one output to 0.0"
      }
    ]
  }
]