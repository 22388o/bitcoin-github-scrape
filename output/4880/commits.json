[
  {
    "sha": "b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWQ0NThjNzkxYTc1NTlmYjg5YTlhNjQ1OGIxNTIyY2Y1MGI1YmQy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-08-28T17:23:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-09T07:57:44Z"
      },
      "message": "Remove peer's orphan transactions if they are banned\n\nProperly clean up after banned connections.",
      "tree": {
        "sha": "2ce73518c357290b6fb0f4bae5fe64ffb9ed794a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ce73518c357290b6fb0f4bae5fe64ffb9ed794a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d458c791a7559fb89a9a6458b1522cf50b5bd2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc0a0173e885a5b60e12d3769604236967c262e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc0a0173e885a5b60e12d3769604236967c262e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc0a0173e885a5b60e12d3769604236967c262e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 54,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ea5f0cf1dd7019dd5bd82ae3afa0103a4a0fd0c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 8,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5d458c791a7559fb89a9a6458b1522cf50b5bd2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5d458c791a7559fb89a9a6458b1522cf50b5bd2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
        "patch": "@@ -63,7 +63,11 @@ struct COrphanBlock {\n map<uint256, COrphanBlock*> mapOrphanBlocks;\n multimap<uint256, COrphanBlock*> mapOrphanBlocksByPrev;\n \n-map<uint256, CTransaction> mapOrphanTransactions;\n+struct COrphanTx {\n+    CTransaction tx;\n+    NodeId fromPeer;\n+};\n+map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n // Constant stuff for coinbase transactions we create:\n@@ -461,7 +465,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -481,7 +485,8 @@ bool AddOrphanTx(const CTransaction& tx)\n         return false;\n     }\n \n-    mapOrphanTransactions[hash] = tx;\n+    mapOrphanTransactions[hash].tx = tx;\n+    mapOrphanTransactions[hash].fromPeer = peer;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n@@ -492,10 +497,10 @@ bool AddOrphanTx(const CTransaction& tx)\n \n void static EraseOrphanTx(uint256 hash)\n {\n-    map<uint256, CTransaction>::iterator it = mapOrphanTransactions.find(hash);\n+    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.vin)\n+    BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n     {\n         map<uint256, set<uint256> >::iterator itPrev = mapOrphanTransactionsByPrev.find(txin.prevout.hash);\n         itPrev->second.erase(hash);\n@@ -505,14 +510,31 @@ void static EraseOrphanTx(uint256 hash)\n     mapOrphanTransactions.erase(it);\n }\n \n+void EraseOrphansFor(NodeId peer)\n+{\n+    int nErased = 0;\n+    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    while (iter != mapOrphanTransactions.end())\n+    {\n+        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            EraseOrphanTx(maybeErase->second.tx.GetHash());\n+            ++nErased;\n+        }\n+    }\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+}\n+\n+\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -3778,7 +3800,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                      ++mi)\n                 {\n                     const uint256& orphanHash = *mi;\n-                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n+                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash].tx;\n                     bool fMissingInputs2 = false;\n                     // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n                     // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n@@ -3795,6 +3817,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     }\n                     else if (!fMissingInputs2)\n                     {\n+                        int nDos = 0;\n+                        if (stateDummy.IsInvalid(nDos) && nDos > 0)\n+                        {\n+                            // Punish peer that gave us an invalid orphan tx\n+                            Misbehaving(mapOrphanTransactions[orphanHash].fromPeer, nDos);\n+                        }\n+\n                         // invalid or too-little-fee orphan\n                         vEraseQueue.push_back(orphanHash);\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n@@ -3808,7 +3837,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(tx);\n+            AddOrphanTx(tx, pfrom->GetId());\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n@@ -4315,7 +4344,10 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 if (pto->addr.IsLocal())\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n+                {\n                     CNode::Ban(pto->addr);\n+                    EraseOrphansFor(pto->GetId());\n+                }\n             }\n             state.fShouldBan = false;\n         }\n@@ -4529,5 +4561,6 @@ class CMainCleanup\n \n         // orphan transactions\n         mapOrphanTransactions.clear();\n+        mapOrphanTransactionsByPrev.clear();\n     }\n } instance_of_cmaincleanup;"
      },
      {
        "sha": "e0196748168687edae5c7707df5f8b48a596bf16",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5d458c791a7559fb89a9a6458b1522cf50b5bd2/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5d458c791a7559fb89a9a6458b1522cf50b5bd2/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=b5d458c791a7559fb89a9a6458b1522cf50b5bd2",
        "patch": "@@ -24,7 +24,8 @@\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CTransaction& tx);\n+extern bool AddOrphanTx(const CTransaction& tx, NodeId peer);\n+extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n extern std::map<uint256, CTransaction> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n@@ -174,7 +175,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        AddOrphanTx(tx);\n+        AddOrphanTx(tx, i);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -191,7 +192,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n-        AddOrphanTx(tx);\n+        AddOrphanTx(tx, i);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -215,7 +216,15 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        BOOST_CHECK(!AddOrphanTx(tx));\n+        BOOST_CHECK(!AddOrphanTx(tx, i));\n+    }\n+\n+    // Test EraseOrphansFor:\n+    for (NodeId i = 0; i < 3; i++)\n+    {\n+        size_t sizeBefore = mapOrphanTransactions.size();\n+        EraseOrphansFor(i);\n+        BOOST_CHECK(mapOrphanTransactions.size() < sizeBefore);\n     }\n \n     // Test LimitOrphanTxSize() function:"
      }
    ]
  }
]