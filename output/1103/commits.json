[
  {
    "sha": "95413cfff07f4317a06d6ee4fc34be64d7b05c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTQxM2NmZmYwN2Y0MzE3YTA2ZDZlZTRmYzM0YmU2NGQ3YjA1YzY2",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T03:55:05Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T03:55:05Z"
      },
      "message": "Encapsulate RPC command dispatch in an array of CRPCCommand's",
      "tree": {
        "sha": "0fa0f4d81fdb1ab8e42a50b3bc716ad882cc11ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fa0f4d81fdb1ab8e42a50b3bc716ad882cc11ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95413cfff07f4317a06d6ee4fc34be64d7b05c66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95413cfff07f4317a06d6ee4fc34be64d7b05c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95413cfff07f4317a06d6ee4fc34be64d7b05c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95413cfff07f4317a06d6ee4fc34be64d7b05c66/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6f6f524f1a916f9aefe5e1ab102efebdab007530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6f524f1a916f9aefe5e1ab102efebdab007530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f6f524f1a916f9aefe5e1ab102efebdab007530"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 89,
      "deletions": 84
    },
    "files": [
      {
        "sha": "44f9cd760cb2e66ebff4af0c2576f2bfdd7a723d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 84,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95413cfff07f4317a06d6ee4fc34be64d7b05c66/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95413cfff07f4317a06d6ee4fc34be64d7b05c66/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=95413cfff07f4317a06d6ee4fc34be64d7b05c66",
        "patch": "@@ -34,7 +34,16 @@ using namespace json_spirit;\n \n void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n-extern map<string, rpcfn_type> mapCallTable;\n+\n+class CRPCCommand\n+{\n+public:\n+    string name;\n+    rpcfn_type actor;\n+    bool okSafeMode;\n+};\n+\n+extern map<string, CRPCCommand*> mapCommands;\n \n static std::string strRPCUserColonPass;\n \n@@ -178,9 +187,10 @@ Value help(const Array& params, bool fHelp)\n \n     string strRet;\n     set<rpcfn_type> setDone;\n-    for (map<string, rpcfn_type>::iterator mi = mapCallTable.begin(); mi != mapCallTable.end(); ++mi)\n+    for (map<string, CRPCCommand*>::iterator mi = mapCommands.begin(); mi != mapCommands.end(); ++mi)\n     {\n-        string strMethod = (*mi).first;\n+        CRPCCommand *pcmd = mi->second;\n+        string strMethod = mi->first;\n         // We already filter duplicates, but these deprecated screw up the sort order\n         if (strMethod == \"getamountreceived\" ||\n             strMethod == \"getallreceived\" ||\n@@ -192,7 +202,7 @@ Value help(const Array& params, bool fHelp)\n         try\n         {\n             Array params;\n-            rpcfn_type pfn = (*mi).second;\n+            rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n                 (*pfn)(params, true);\n         }\n@@ -1995,85 +2005,76 @@ Value getblock(const Array& params, bool fHelp)\n // Call Table\n //\n \n-pair<string, rpcfn_type> pCallTable[] =\n-{\n-    make_pair(\"help\",                   &help),\n-    make_pair(\"stop\",                   &stop),\n-    make_pair(\"getblockcount\",          &getblockcount),\n-    make_pair(\"getblocknumber\",         &getblocknumber),\n-    make_pair(\"getconnectioncount\",     &getconnectioncount),\n-    make_pair(\"getdifficulty\",          &getdifficulty),\n-    make_pair(\"getgenerate\",            &getgenerate),\n-    make_pair(\"setgenerate\",            &setgenerate),\n-    make_pair(\"gethashespersec\",        &gethashespersec),\n-    make_pair(\"getinfo\",                &getinfo),\n-    make_pair(\"getmininginfo\",          &getmininginfo),\n-    make_pair(\"getnewaddress\",          &getnewaddress),\n-    make_pair(\"getaccountaddress\",      &getaccountaddress),\n-    make_pair(\"setaccount\",             &setaccount),\n-    make_pair(\"getaccount\",             &getaccount),\n-    make_pair(\"getaddressesbyaccount\",  &getaddressesbyaccount),\n-    make_pair(\"sendtoaddress\",          &sendtoaddress),\n-    make_pair(\"getreceivedbyaddress\",   &getreceivedbyaddress),\n-    make_pair(\"getreceivedbyaccount\",   &getreceivedbyaccount),\n-    make_pair(\"listreceivedbyaddress\",  &listreceivedbyaddress),\n-    make_pair(\"listreceivedbyaccount\",  &listreceivedbyaccount),\n-    make_pair(\"backupwallet\",           &backupwallet),\n-    make_pair(\"keypoolrefill\",          &keypoolrefill),\n-    make_pair(\"walletpassphrase\",       &walletpassphrase),\n-    make_pair(\"walletpassphrasechange\", &walletpassphrasechange),\n-    make_pair(\"walletlock\",             &walletlock),\n-    make_pair(\"encryptwallet\",          &encryptwallet),\n-    make_pair(\"validateaddress\",        &validateaddress),\n-    make_pair(\"getbalance\",             &getbalance),\n-    make_pair(\"move\",                   &movecmd),\n-    make_pair(\"sendfrom\",               &sendfrom),\n-    make_pair(\"sendmany\",               &sendmany),\n-    make_pair(\"addmultisigaddress\",     &addmultisigaddress),\n-    make_pair(\"getblock\",               &getblock),\n-    make_pair(\"getblockhash\",           &getblockhash),\n-    make_pair(\"gettransaction\",         &gettransaction),\n-    make_pair(\"listtransactions\",       &listtransactions),\n-    make_pair(\"signmessage\",            &signmessage),\n-    make_pair(\"verifymessage\",          &verifymessage),\n-    make_pair(\"getwork\",                &getwork),\n-    make_pair(\"listaccounts\",           &listaccounts),\n-    make_pair(\"settxfee\",               &settxfee),\n-    make_pair(\"getmemorypool\",          &getmemorypool),\n-    make_pair(\"listsinceblock\",         &listsinceblock),\n-    make_pair(\"dumpprivkey\",            &dumpprivkey),\n-    make_pair(\"importprivkey\",          &importprivkey)\n-};\n-map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n-\n-string pAllowInSafeMode[] =\n-{\n-    \"help\",\n-    \"stop\",\n-    \"getblockcount\",\n-    \"getblocknumber\",  // deprecated\n-    \"getconnectioncount\",\n-    \"getdifficulty\",\n-    \"getgenerate\",\n-    \"setgenerate\",\n-    \"gethashespersec\",\n-    \"getinfo\",\n-    \"getmininginfo\",\n-    \"getnewaddress\",\n-    \"getaccountaddress\",\n-    \"getaccount\",\n-    \"getaddressesbyaccount\",\n-    \"backupwallet\",\n-    \"keypoolrefill\",\n-    \"walletpassphrase\",\n-    \"walletlock\",\n-    \"validateaddress\",\n-    \"getwork\",\n-    \"getmemorypool\",\n+\n+static CRPCCommand vRPCCommands[] =\n+{ //  name                      function                 safe mode?\n+  //  ------------------------  -----------------------  ----------\n+    { \"help\",                   &help,                   true },\n+    { \"stop\",                   &stop,                   true },\n+    { \"getblockcount\",          &getblockcount,          true },\n+    { \"getblocknumber\",         &getblocknumber,         true },\n+    { \"getconnectioncount\",     &getconnectioncount,     true },\n+    { \"getdifficulty\",          &getdifficulty,          true },\n+    { \"getgenerate\",            &getgenerate,            true },\n+    { \"setgenerate\",            &setgenerate,            true },\n+    { \"gethashespersec\",        &gethashespersec,        true },\n+    { \"getinfo\",                &getinfo,                true },\n+    { \"getmininginfo\",          &getmininginfo,          true },\n+    { \"getnewaddress\",          &getnewaddress,          true },\n+    { \"getaccountaddress\",      &getaccountaddress,      true },\n+    { \"setaccount\",             &setaccount,             true },\n+    { \"getaccount\",             &getaccount,             false },\n+    { \"getaddressesbyaccount\",  &getaddressesbyaccount,  true },\n+    { \"sendtoaddress\",          &sendtoaddress,          false },\n+    { \"getreceivedbyaddress\",   &getreceivedbyaddress,   false },\n+    { \"getreceivedbyaccount\",   &getreceivedbyaccount,   false },\n+    { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false },\n+    { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false },\n+    { \"backupwallet\",           &backupwallet,           true },\n+    { \"keypoolrefill\",          &keypoolrefill,          true },\n+    { \"walletpassphrase\",       &walletpassphrase,       true },\n+    { \"walletpassphrasechange\", &walletpassphrasechange, false },\n+    { \"walletlock\",             &walletlock,             true },\n+    { \"encryptwallet\",          &encryptwallet,          false },\n+    { \"validateaddress\",        &validateaddress,        true },\n+    { \"getbalance\",             &getbalance,             false },\n+    { \"move\",                   &movecmd,                false },\n+    { \"sendfrom\",               &sendfrom,               false },\n+    { \"sendmany\",               &sendmany,               false },\n+    { \"addmultisigaddress\",     &addmultisigaddress,     false },\n+    { \"getblock\",               &getblock,               false },\n+    { \"getblockhash\",           &getblockhash,           false },\n+    { \"gettransaction\",         &gettransaction,         false },\n+    { \"listtransactions\",       &listtransactions,       false },\n+    { \"signmessage\",            &signmessage,            false },\n+    { \"verifymessage\",          &verifymessage,          false },\n+    { \"getwork\",                &getwork,                true },\n+    { \"listaccounts\",           &listaccounts,           false },\n+    { \"settxfee\",               &settxfee,               false },\n+    { \"getmemorypool\",          &getmemorypool,          true },\n+    { \"listsinceblock\",         &listsinceblock,         false },\n+    { \"dumpprivkey\",            &dumpprivkey,            false },\n+    { \"importprivkey\",          &importprivkey,          false },\n };\n-set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n \n+map<string, CRPCCommand*> mapCommands;\n+\n+static void RegisterRPCCommands()\n+{\n+    static bool registered = false;\n+    if (registered)\n+        return;\n+    registered = true;\n+\n+    unsigned int vcidx;\n+    for (vcidx = 0; vcidx < (sizeof(vRPCCommands) / sizeof(vRPCCommands[0])); vcidx++)\n+    {\n+        CRPCCommand *pcmd;\n \n+        pcmd = &vRPCCommands[vcidx];\n+        mapCommands[pcmd->name] = pcmd;\n+    }\n+}\n \n \n //\n@@ -2354,6 +2355,8 @@ void ThreadRPCServer2(void* parg)\n {\n     printf(\"ThreadRPCServer started\\n\");\n \n+    RegisterRPCCommands();\n+\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     if (mapArgs[\"-rpcpassword\"] == \"\")\n     {\n@@ -2505,13 +2508,15 @@ void ThreadRPCServer2(void* parg)\n                 throw JSONRPCError(-32600, \"Params must be an array\");\n \n             // Find method\n-            map<string, rpcfn_type>::iterator mi = mapCallTable.find(strMethod);\n-            if (mi == mapCallTable.end())\n+            if (!mapCommands.count(strMethod))\n                 throw JSONRPCError(-32601, \"Method not found\");\n \n+            CRPCCommand *pcmd = mapCommands[strMethod];\n+\n             // Observe safe mode\n             string strWarning = GetWarnings(\"rpc\");\n-            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") && !setAllowInSafeMode.count(strMethod))\n+            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n+                !pcmd->okSafeMode)\n                 throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n \n             try\n@@ -2520,7 +2525,7 @@ void ThreadRPCServer2(void* parg)\n                 Value result;\n                 {\n                     LOCK2(cs_main, pwalletMain->cs_wallet);\n-                    result = (*(*mi).second)(params, false);\n+                    result = pcmd->actor(params, false);\n                 }\n \n                 // Send reply"
      }
    ]
  }
]