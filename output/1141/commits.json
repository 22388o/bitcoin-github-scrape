[
  {
    "sha": "60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGE4N2JjZTg3M2NlMWY3NmE4MGI3Yjg1NDZlODNhMGNkNGUwN2E1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-01T18:25:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:11:54Z"
      },
      "message": "SOCKS5 support by default\n\nAdd -socks=<n> to select SOCKS version to use. 4 and 5 are supported,\n5 is default.",
      "tree": {
        "sha": "524dc5f42db387f3916c2d3240defe2cf78373c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/524dc5f42db387f3916c2d3240defe2cf78373c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1210aa435f3518080e1b5e2f79397ff68c4978d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1210aa435f3518080e1b5e2f79397ff68c4978d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1210aa435f3518080e1b5e2f79397ff68c4978d0"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 169,
      "deletions": 29
    },
    "files": [
      {
        "sha": "aa1399f81389dca71b6d4c60fa1325e1b2bf8ae5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
        "patch": "@@ -178,7 +178,8 @@ bool AppInit2(int argc, char* argv[])\n             \"  -dbcache=<n>     \\t\\t  \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n             \"  -dblogsize=<n>   \\t\\t  \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +\n             \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n-            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\") + \"\\n\" +\n+            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks proxy\") + \"\\n\" +\n+            \"  -socks=<n>       \\t  \"   + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n             \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\") + \"\\n\" +\n             \"  -port=<port>     \\t\\t  \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n             \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +"
      },
      {
        "sha": "3c818f76f5e3ba1709dd5b7ebab1e086c992d4b4",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 167,
        "deletions": 28,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
        "patch": "@@ -156,6 +156,161 @@ bool LookupNumeric(const char *pszName, CService& addr, int portDefault)\n     return Lookup(pszName, addr, portDefault, false);\n }\n \n+bool static Socks4(const CService &addrDest, SOCKET& hSocket)\n+{\n+    printf(\"SOCKS4 connecting %s\\n\", addrDest.ToString().c_str());\n+    if (!addrDest.IsIPv4())\n+    {\n+        closesocket(hSocket);\n+        return error(\"Proxy destination is not IPv4\");\n+    }\n+    char pszSocks4IP[] = \"\\4\\1\\0\\0\\0\\0\\0\\0user\";\n+    struct sockaddr_in addr;\n+    addrDest.GetSockAddr(&addr);\n+    memcpy(pszSocks4IP + 2, &addr.sin_port, 2);\n+    memcpy(pszSocks4IP + 4, &addr.sin_addr, 4);\n+    char* pszSocks4 = pszSocks4IP;\n+    int nSize = sizeof(pszSocks4IP);\n+\n+    int ret = send(hSocket, pszSocks4, nSize, MSG_NOSIGNAL);\n+    if (ret != nSize)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error sending to proxy\");\n+    }\n+    char pchRet[8];\n+    if (recv(hSocket, pchRet, 8, 0) != 8)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error reading proxy response\");\n+    }\n+    if (pchRet[1] != 0x5a)\n+    {\n+        closesocket(hSocket);\n+        if (pchRet[1] != 0x5b)\n+            printf(\"ERROR: Proxy returned error %d\\n\", pchRet[1]);\n+        return false;\n+    }\n+    printf(\"SOCKS4 connected %s\\n\", addrDest.ToString().c_str());\n+    return true;\n+}\n+\n+bool static Socks5(const CService &addrDest, SOCKET& hSocket)\n+{\n+    printf(\"SOCKS5 connecting %s\\n\", addrDest.ToString().c_str());\n+    char pszSocks5Init[] = \"\\5\\1\\0\";\n+    char *pszSocks5 = pszSocks5Init;\n+    int nSize = sizeof(pszSocks5Init);\n+\n+    int ret = send(hSocket, pszSocks5, nSize, MSG_NOSIGNAL);\n+    if (ret != nSize)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error sending to proxy\");\n+    }\n+    char pchRet1[2];\n+    if (recv(hSocket, pchRet1, 2, 0) != 2)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error reading proxy response\");\n+    }\n+    if (pchRet1[0] != 0x05 || pchRet1[1] != 0x00)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Proxy failed to initialize\");\n+    }\n+    char pszSocks5IPv4[] = \"\\5\\1\\0\\1\\0\\0\\0\\0\\0\\0\";\n+    char pszSocks5IPv6[] = \"\\5\\1\\0\\4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n+    if (addrDest.IsIPv4())\n+    {\n+        struct sockaddr_in addr;\n+        addrDest.GetSockAddr(&addr);\n+        memcpy(pszSocks5IPv4 + 4, &addr.sin_addr, 4);\n+        memcpy(pszSocks5IPv4 + 8, &addr.sin_port, 2);\n+        pszSocks5 = pszSocks5IPv4;\n+        nSize = sizeof(pszSocks5IPv4);\n+    }\n+    else\n+    {\n+#ifdef USE_IPV6\n+        struct sockaddr_in6 addr;\n+        addrDest.GetSockAddr6(&addr);\n+        memcpy(pszSocks5IPv6 + 4, &addr.sin6_addr, 16);\n+        memcpy(pszSocks5IPv6 + 20, &addr.sin6_port, 2);\n+        pszSocks5 = pszSocks5IPv6;\n+        nSize = sizeof(pszSocks5IPv6);\n+#else\n+        return error(\"IPv6 support is not compiled in\");\n+#endif\n+    }\n+    ret = send(hSocket, pszSocks5, nSize, MSG_NOSIGNAL);\n+    if (ret != nSize)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error sending to proxy\");\n+    }\n+    char pchRet2[4];\n+    if (recv(hSocket, pchRet2, 4, 0) != 4)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error reading proxy response\");\n+    }\n+    if (pchRet2[0] != 0x05)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Proxy failed to accept request\");\n+    }\n+    if (pchRet2[1] != 0x00)\n+    {\n+        closesocket(hSocket);\n+        switch (pchRet2[1])\n+        {\n+            case 0x01: return error(\"Proxy error: general failure\");\n+            case 0x02: return error(\"Proxy error: connection not allowed\");\n+            case 0x03: return error(\"Proxy error: network unreachable\");\n+            case 0x04: return error(\"Proxy error: host unreachable\");\n+            case 0x05: return error(\"Proxy error: connection refused\");\n+            case 0x06: return error(\"Proxy error: TTL expired\");\n+            case 0x07: return error(\"Proxy error: protocol error\");\n+            case 0x08: return error(\"Proxy error: address type not supported\");\n+            default:   return error(\"Proxy error: unknown\");\n+        }\n+    }\n+    if (pchRet2[2] != 0x00)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error: malformed proxy response\");\n+    }\n+    char pchRet3[256];\n+    switch (pchRet2[3])\n+    {\n+        case 0x01: ret = recv(hSocket, pchRet3, 4, 0) != 4; break;\n+        case 0x04: ret = recv(hSocket, pchRet3, 16, 0) != 16; break;\n+        case 0x03:\n+        {\n+            ret = recv(hSocket, pchRet3, 1, 0) != 1;\n+            if (ret)\n+                return error(\"Error reading from proxy\");\n+            int nRecv = pchRet3[0];\n+            ret = recv(hSocket, pchRet3, nRecv, 0) != nRecv;\n+            break;\n+        }\n+        default: closesocket(hSocket); return error(\"Error: malformed proxy response\");\n+    }\n+    if (ret)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error reading from proxy\");\n+    }\n+    if (recv(hSocket, pchRet3, 2, 0) != 2)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Error reading from proxy\");\n+    }\n+    printf(\"SOCKS5 connected %s\\n\", addrDest.ToString().c_str());\n+    return true;\n+}\n+\n bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n {\n     hSocketRet = INVALID_SOCKET;\n@@ -260,35 +415,19 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n \n     if (fProxy)\n     {\n-        printf(\"proxy connecting %s\\n\", addrDest.ToString().c_str());\n-        char pszSocks4IP[] = \"\\4\\1\\0\\0\\0\\0\\0\\0user\";\n-        struct sockaddr_in addr;\n-        addrDest.GetSockAddr(&addr);\n-        memcpy(pszSocks4IP + 2, &addr.sin_port, 2);\n-        memcpy(pszSocks4IP + 4, &addr.sin_addr, 4);\n-        char* pszSocks4 = pszSocks4IP;\n-        int nSize = sizeof(pszSocks4IP);\n-\n-        int ret = send(hSocket, pszSocks4, nSize, MSG_NOSIGNAL);\n-        if (ret != nSize)\n-        {\n-            closesocket(hSocket);\n-            return error(\"Error sending to proxy\");\n-        }\n-        char pchRet[8];\n-        if (recv(hSocket, pchRet, 8, 0) != 8)\n-        {\n-            closesocket(hSocket);\n-            return error(\"Error reading proxy response\");\n-        }\n-        if (pchRet[1] != 0x5a)\n+        switch(GetArg(\"-socks\", 5))\n         {\n-            closesocket(hSocket);\n-            if (pchRet[1] != 0x5b)\n-                printf(\"ERROR: Proxy returned error %d\\n\", pchRet[1]);\n-            return false;\n-        }\n-        printf(\"proxy connected %s\\n\", addrDest.ToString().c_str());\n+            case 4:\n+                if (!Socks4(addrDest, hSocket))\n+                    return false;\n+                break;\n+\n+            case 5:\n+            default:\n+                if (!Socks5(addrDest, hSocket))\n+                    return false;\n+                break;\n+        } \n     }\n \n     hSocketRet = hSocket;"
      }
    ]
  },
  {
    "sha": "933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzNmMjcxNWQ4ZmY5NTQ4Y2RmOTBjZDNjZGVjM2JkYTc5Yjg5OGMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-19T14:13:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:11:54Z"
      },
      "message": "SOCKS5 connect via hostname",
      "tree": {
        "sha": "f52e3f91176e743a40f28117dbf4b5bc15b359c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f52e3f91176e743a40f28117dbf4b5bc15b359c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/933f2715d8ff9548cdf90cd3cdec3bda79b898c2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60a87bce873ce1f76a80b7b8546e83a0cd4e07a5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 9,
      "deletions": 26
    },
    "files": [
      {
        "sha": "2c131947bb7867c9837e5fb6eabd5a2b35fbe797",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 26,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/933f2715d8ff9548cdf90cd3cdec3bda79b898c2/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/933f2715d8ff9548cdf90cd3cdec3bda79b898c2/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
        "patch": "@@ -219,32 +219,15 @@ bool static Socks5(const CService &addrDest, SOCKET& hSocket)\n         closesocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    char pszSocks5IPv4[] = \"\\5\\1\\0\\1\\0\\0\\0\\0\\0\\0\";\n-    char pszSocks5IPv6[] = \"\\5\\1\\0\\4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n-    if (addrDest.IsIPv4())\n-    {\n-        struct sockaddr_in addr;\n-        addrDest.GetSockAddr(&addr);\n-        memcpy(pszSocks5IPv4 + 4, &addr.sin_addr, 4);\n-        memcpy(pszSocks5IPv4 + 8, &addr.sin_port, 2);\n-        pszSocks5 = pszSocks5IPv4;\n-        nSize = sizeof(pszSocks5IPv4);\n-    }\n-    else\n-    {\n-#ifdef USE_IPV6\n-        struct sockaddr_in6 addr;\n-        addrDest.GetSockAddr6(&addr);\n-        memcpy(pszSocks5IPv6 + 4, &addr.sin6_addr, 16);\n-        memcpy(pszSocks5IPv6 + 20, &addr.sin6_port, 2);\n-        pszSocks5 = pszSocks5IPv6;\n-        nSize = sizeof(pszSocks5IPv6);\n-#else\n-        return error(\"IPv6 support is not compiled in\");\n-#endif\n-    }\n-    ret = send(hSocket, pszSocks5, nSize, MSG_NOSIGNAL);\n-    if (ret != nSize)\n+    string strSocks5(\"\\5\\1\");\n+    strSocks5 += '\\000'; strSocks5 += '\\003';\n+    string strDest = addrDest.ToStringIP();\n+    strSocks5 += static_cast<char>(std::min((int)strDest.size(), 255));\n+    strSocks5 += strDest;\n+    strSocks5 += static_cast<char>((addrDest.GetPort() >> 8) & 0xFF);\n+    strSocks5 += static_cast<char>((addrDest.GetPort() >> 0) & 0xFF);\n+    ret = send(hSocket, strSocks5.c_str(), strSocks5.size(), MSG_NOSIGNAL);\n+    if (ret != strSocks5.size())\n     {\n         closesocket(hSocket);\n         return error(\"Error sending to proxy\");"
      }
    ]
  },
  {
    "sha": "a012e2db59585bfa1978615aacade281053e0ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDEyZTJkYjU5NTg1YmZhMTk3ODYxNWFhY2FkZTI4MTA1M2UwYWU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-19T15:02:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:11:54Z"
      },
      "message": "refactor ConnectSocket",
      "tree": {
        "sha": "493b338772afb63091f61ed87b2cfde1e16d3c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/493b338772afb63091f61ed87b2cfde1e16d3c6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a012e2db59585bfa1978615aacade281053e0ae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012e2db59585bfa1978615aacade281053e0ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a012e2db59585bfa1978615aacade281053e0ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012e2db59585bfa1978615aacade281053e0ae5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/933f2715d8ff9548cdf90cd3cdec3bda79b898c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/933f2715d8ff9548cdf90cd3cdec3bda79b898c2"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 25,
      "deletions": 9
    },
    "files": [
      {
        "sha": "60f34bbd300433d0fb9e7dc2922a0c6c41b1cc8d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a012e2db59585bfa1978615aacade281053e0ae5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a012e2db59585bfa1978615aacade281053e0ae5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a012e2db59585bfa1978615aacade281053e0ae5",
        "patch": "@@ -195,9 +195,14 @@ bool static Socks4(const CService &addrDest, SOCKET& hSocket)\n     return true;\n }\n \n-bool static Socks5(const CService &addrDest, SOCKET& hSocket)\n+bool static Socks5(string strDest, int port, SOCKET& hSocket)\n {\n-    printf(\"SOCKS5 connecting %s\\n\", addrDest.ToString().c_str());\n+    printf(\"SOCKS5 connecting %s\\n\", strDest.c_str());\n+    if (strDest.size() > 255)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Hostname too long\");\n+    }\n     char pszSocks5Init[] = \"\\5\\1\\0\";\n     char *pszSocks5 = pszSocks5Init;\n     int nSize = sizeof(pszSocks5Init);\n@@ -221,11 +226,10 @@ bool static Socks5(const CService &addrDest, SOCKET& hSocket)\n     }\n     string strSocks5(\"\\5\\1\");\n     strSocks5 += '\\000'; strSocks5 += '\\003';\n-    string strDest = addrDest.ToStringIP();\n     strSocks5 += static_cast<char>(std::min((int)strDest.size(), 255));\n-    strSocks5 += strDest;\n-    strSocks5 += static_cast<char>((addrDest.GetPort() >> 8) & 0xFF);\n-    strSocks5 += static_cast<char>((addrDest.GetPort() >> 0) & 0xFF);\n+    strSocks5 += strDest; \n+    strSocks5 += static_cast<char>((port >> 8) & 0xFF);\n+    strSocks5 += static_cast<char>((port >> 0) & 0xFF);\n     ret = send(hSocket, strSocks5.c_str(), strSocks5.size(), MSG_NOSIGNAL);\n     if (ret != strSocks5.size())\n     {\n@@ -290,11 +294,11 @@ bool static Socks5(const CService &addrDest, SOCKET& hSocket)\n         closesocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n-    printf(\"SOCKS5 connected %s\\n\", addrDest.ToString().c_str());\n+    printf(\"SOCKS5 connected %s\\n\", strDest.c_str());\n     return true;\n }\n \n-bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n+bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -396,6 +400,18 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n         return false;\n     }\n \n+    hSocketRet = hSocket;\n+    return true;\n+}\n+\n+bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n+{\n+    SOCKET hSocket = INVALID_SOCKET;\n+    bool fProxy = (fUseProxy && addrDest.IsRoutable());\n+\n+    if (!ConnectSocketDirectly(fProxy ? addrProxy : addrDest, hSocket, nTimeout))\n+        return false;\n+\n     if (fProxy)\n     {\n         switch(GetArg(\"-socks\", 5))\n@@ -407,7 +423,7 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n \n             case 5:\n             default:\n-                if (!Socks5(addrDest, hSocket))\n+                if (!Socks5(addrDest.ToStringIP(), addrDest.GetPort(), hSocket))\n                     return false;\n                 break;\n         } "
      }
    ]
  },
  {
    "sha": "9bab521df895c149579b9e64931405c56b008afb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmFiNTIxZGY4OTVjMTQ5NTc5YjllNjQ5MzE0MDVjNTZiMDA4YWZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-19T15:38:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:11:54Z"
      },
      "message": "Support connecting by hostnames passed to proxy (-proxydns)",
      "tree": {
        "sha": "18177aabb6eb11265e3500a75abcdd6bf1150c86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18177aabb6eb11265e3500a75abcdd6bf1150c86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bab521df895c149579b9e64931405c56b008afb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bab521df895c149579b9e64931405c56b008afb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bab521df895c149579b9e64931405c56b008afb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bab521df895c149579b9e64931405c56b008afb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a012e2db59585bfa1978615aacade281053e0ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012e2db59585bfa1978615aacade281053e0ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a012e2db59585bfa1978615aacade281053e0ae5"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 145,
      "deletions": 69
    },
    "files": [
      {
        "sha": "35da20336c1397697d851227c9d2eca0f7f0c3c8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bab521df895c149579b9e64931405c56b008afb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bab521df895c149579b9e64931405c56b008afb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9bab521df895c149579b9e64931405c56b008afb",
        "patch": "@@ -181,6 +181,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks proxy\") + \"\\n\" +\n             \"  -socks=<n>       \\t  \"   + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n             \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\") + \"\\n\" +\n+            \"  -proxydns        \\t  \"   + _(\"Pass DNS requests to (SOCKS5) proxy\") + \"\\n\" +\n             \"  -port=<port>     \\t\\t  \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n             \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n@@ -524,13 +525,16 @@ bool AppInit2(int argc, char* argv[])\n         // Note: the GetBoolArg() calls for all of these must happen later.\n         SoftSetBoolArg(\"-listen\", false);\n         SoftSetBoolArg(\"-irc\", false);\n-        SoftSetBoolArg(\"-dnsseed\", false);\n+        SoftSetBoolArg(\"-proxydns\", true);\n         SoftSetBoolArg(\"-upnp\", false);\n-        SoftSetBoolArg(\"-dns\", false);\n     }\n \n-    fAllowDNS = GetBoolArg(\"-dns\");\n+    fNameLookup = GetBoolArg(\"-dns\");\n+    fProxyNameLookup = GetBoolArg(\"-proxydns\");\n+    if (fProxyNameLookup)\n+        fNameLookup = true;\n     fNoListen = !GetBoolArg(\"-listen\", true);\n+    nSocksVersion = GetArg(\"-socks\", 5);\n \n     // Continue to put \"/P2SH/\" in the coinbase to monitor\n     // BIP16 support.\n@@ -548,17 +552,6 @@ bool AppInit2(int argc, char* argv[])\n         }\n     }\n \n-    if (mapArgs.count(\"-addnode\"))\n-    {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n-        {\n-            CAddress addr(CService(strAddr, GetDefaultPort(), fAllowDNS));\n-            addr.nTime = 0; // so it won't relay unless successfully connected\n-            if (addr.IsValid())\n-                addrman.Add(addr, CNetAddr(\"127.0.0.1\"));\n-        }\n-    }\n-\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))"
      },
      {
        "sha": "ca137b70fafa950af4d68cc2b0f03cc4a765b3b0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 45,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bab521df895c149579b9e64931405c56b008afb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bab521df895c149579b9e64931405c56b008afb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9bab521df895c149579b9e64931405c56b008afb",
        "patch": "@@ -35,15 +35,14 @@ void ThreadOpenAddedConnections2(void* parg);\n void ThreadMapPort2(void* parg);\n #endif\n void ThreadDNSAddressSeed2(void* parg);\n-bool OpenNetworkConnection(const CAddress& addrConnect);\n+bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest = NULL);\n \n \n \n //\n // Global state variables\n //\n bool fClient = false;\n-bool fAllowDNS = false;\n static bool fUseUPnP = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(CService(\"0.0.0.0\", 0), nLocalServices);\n@@ -307,6 +306,15 @@ CNode* FindNode(const CNetAddr& ip)\n     return NULL;\n }\n \n+CNode* FindNode(std::string addrName)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+        if (pnode->addrName == addrName)\n+            return (pnode);\n+    return NULL;\n+}\n+\n CNode* FindNode(const CService& addr)\n {\n     {\n@@ -318,35 +326,38 @@ CNode* FindNode(const CService& addr)\n     return NULL;\n }\n \n-CNode* ConnectNode(CAddress addrConnect, int64 nTimeout)\n+CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n {\n-    if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost)\n-        return NULL;\n+    if (pszDest != NULL) {\n+        if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost)\n+            return NULL;\n \n-    // Look for an existing connection\n-    CNode* pnode = FindNode((CService)addrConnect);\n-    if (pnode)\n-    {\n-        if (nTimeout != 0)\n-            pnode->AddRef(nTimeout);\n-        else\n-            pnode->AddRef();\n-        return pnode;\n+        // Look for an existing connection\n+        CNode* pnode = FindNode((CService)addrConnect);\n+        if (pnode)\n+        {\n+            if (nTimeout != 0)\n+                pnode->AddRef(nTimeout);\n+            else\n+                pnode->AddRef();\n+            return pnode;\n+        }\n     }\n \n+\n     /// debug print\n     printf(\"trying connection %s lastseen=%.1fhrs\\n\",\n-        addrConnect.ToString().c_str(),\n-        (double)(addrConnect.nTime - GetAdjustedTime())/3600.0);\n-\n-    addrman.Attempt(addrConnect);\n+        pszDest ? pszDest : addrConnect.ToString().c_str(),\n+        pszDest ? 0 : (double)(addrConnect.nTime - GetAdjustedTime())/3600.0);\n \n     // Connect\n     SOCKET hSocket;\n-    if (ConnectSocket(addrConnect, hSocket))\n+    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, GetDefaultPort()) : ConnectSocket(addrConnect, hSocket))\n     {\n+        addrman.Attempt(addrConnect);\n+\n         /// debug print\n-        printf(\"connected %s\\n\", addrConnect.ToString().c_str());\n+        printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n \n         // Set to nonblocking\n #ifdef WIN32\n@@ -359,11 +370,12 @@ CNode* ConnectNode(CAddress addrConnect, int64 nTimeout)\n #endif\n \n         // Add node\n-        CNode* pnode = new CNode(hSocket, addrConnect, false);\n+        CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n         if (nTimeout != 0)\n             pnode->AddRef(nTimeout);\n         else\n             pnode->AddRef();\n+\n         {\n             LOCK(cs_vNodes);\n             vNodes.push_back(pnode);\n@@ -389,7 +401,7 @@ void CNode::CloseSocketDisconnect()\n     {\n         if (fDebug)\n             printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n-        printf(\"disconnecting node %s\\n\", addr.ToString().c_str());\n+        printf(\"disconnecting node %s\\n\", addrName.c_str());\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n         vRecv.clear();\n@@ -444,7 +456,7 @@ bool CNode::Misbehaving(int howmuch)\n {\n     if (addr.IsLocal())\n     {\n-        printf(\"Warning: local node %s misbehaving\\n\", addr.ToString().c_str());\n+        printf(\"Warning: local node %s misbehaving\\n\", addrName.c_str());\n         return false;\n     }\n \n@@ -458,7 +470,7 @@ bool CNode::Misbehaving(int howmuch)\n                 setBanned[addr] = banTime;\n         }\n         CloseSocketDisconnect();\n-        printf(\"Disconnected %s for misbehavior (score=%d)\\n\", addr.ToString().c_str(), nMisbehavior);\n+        printf(\"Disconnected %s for misbehavior (score=%d)\\n\", addrName.c_str(), nMisbehavior);\n         return true;\n     }\n     return false;\n@@ -675,7 +687,7 @@ void ThreadSocketHandler2(void* parg)\n             else\n             {\n                 printf(\"accepted connection %s\\n\", addr.ToString().c_str());\n-                CNode* pnode = new CNode(hSocket, addr, true);\n+                CNode* pnode = new CNode(hSocket, addr, \"\", true);\n                 pnode->AddRef();\n                 {\n                     LOCK(cs_vNodes);\n@@ -1025,20 +1037,25 @@ void ThreadDNSAddressSeed2(void* parg)\n         printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n         for (unsigned int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n-            vector<CNetAddr> vaddr;\n-            vector<CAddress> vAdd;\n-            if (LookupHost(strDNSSeed[seed_idx][1], vaddr))\n-            {\n-                BOOST_FOREACH(CNetAddr& ip, vaddr)\n+            if (fProxyNameLookup) {\n+                CAddress addr;\n+                OpenNetworkConnection(addr, strDNSSeed[seed_idx][1]);\n+            } else {\n+                vector<CNetAddr> vaddr;\n+                vector<CAddress> vAdd;\n+                if (LookupHost(strDNSSeed[seed_idx][1], vaddr))\n                 {\n-                    int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, GetDefaultPort()));\n-                    addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n-                    vAdd.push_back(addr);\n-                    found++;\n+                    BOOST_FOREACH(CNetAddr& ip, vaddr)\n+                    {\n+                        int nOneDay = 24*3600;\n+                        CAddress addr = CAddress(CService(ip, GetDefaultPort()));\n+                        addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n+                        vAdd.push_back(addr);\n+                        found++;\n+                    }\n                 }\n+                addrman.Add(vAdd, CNetAddr(strDNSSeed[seed_idx][0], true));\n             }\n-            addrman.Add(vAdd, CNetAddr(strDNSSeed[seed_idx][0], true));\n         }\n     }\n \n@@ -1199,9 +1216,8 @@ void ThreadOpenConnections2(void* parg)\n         {\n             BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n             {\n-                CAddress addr(CService(strAddr, GetDefaultPort(), fAllowDNS));\n-                if (addr.IsValid())\n-                    OpenNetworkConnection(addr);\n+                CAddress addr(CService(\"0.0.0.0:0\"));\n+                OpenNetworkConnection(addr, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     Sleep(500);\n@@ -1325,11 +1341,25 @@ void ThreadOpenAddedConnections2(void* parg)\n     if (mapArgs.count(\"-addnode\") == 0)\n         return;\n \n+    if (fProxyNameLookup) {\n+        while(!fShutdown) {\n+            BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"]) {\n+                CAddress addr;\n+                OpenNetworkConnection(addr, strAddNode.c_str());\n+                Sleep(500);\n+            }\n+            vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n+            Sleep(120000); // Retry every 2 minutes\n+            vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n+        }\n+        return;\n+    }\n+\n     vector<vector<CService> > vservAddressesToAdd(0);\n     BOOST_FOREACH(string& strAddNode, mapMultiArgs[\"-addnode\"])\n     {\n         vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fAllowDNS, 0))\n+        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n         {\n             vservAddressesToAdd.push_back(vservNode);\n             {\n@@ -1343,7 +1373,7 @@ void ThreadOpenAddedConnections2(void* parg)\n     {\n         vector<vector<CService> > vservConnectAddresses = vservAddressesToAdd;\n         // Attempt to connect to each IP for each addnode entry until at least one is successful per addnode entry\n-        // (keeping in mind that addnode entries can have many IPs if fAllowDNS)\n+        // (keeping in mind that addnode entries can have many IPs if fNameLookup)\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -1373,19 +1403,23 @@ void ThreadOpenAddedConnections2(void* parg)\n     }\n }\n \n-bool OpenNetworkConnection(const CAddress& addrConnect)\n+bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest)\n {\n     //\n     // Initiate outbound network connection\n     //\n     if (fShutdown)\n         return false;\n-    if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost || !addrConnect.IsIPv4() ||\n-        FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect))\n+    if (!strDest)\n+        if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost || !addrConnect.IsIPv4() ||\n+            FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect) || \n+            FindNode(addrConnect.ToStringIPPort().c_str()))\n+            return false;\n+    if (strDest && FindNode(strDest))\n         return false;\n \n     vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-    CNode* pnode = ConnectNode(addrConnect);\n+    CNode* pnode = ConnectNode(addrConnect, strDest);\n     vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n     if (fShutdown)\n         return false;"
      },
      {
        "sha": "0f48c515b0287d5414736ec8b428a0b45d7c469b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bab521df895c149579b9e64931405c56b008afb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bab521df895c149579b9e64931405c56b008afb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9bab521df895c149579b9e64931405c56b008afb",
        "patch": "@@ -35,7 +35,7 @@ bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n-CNode* ConnectNode(CAddress addrConnect, int64 nTimeout=0);\n+CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTimeout=0);\n void MapPort(bool fMapPort);\n bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n@@ -83,7 +83,6 @@ enum threadId\n };\n \n extern bool fClient;\n-extern bool fAllowDNS;\n extern uint64 nLocalServices;\n extern CAddress addrLocalHost;\n extern uint64 nLocalHostNonce;\n@@ -120,6 +119,7 @@ class CNode\n     int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n+    std::string addrName;\n     int nVersion;\n     std::string strSubVer;\n     bool fClient;\n@@ -157,7 +157,7 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n \n-    CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)\n+    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)\n     {\n         nServices = 0;\n         hSocket = hSocketIn;\n@@ -168,6 +168,7 @@ class CNode\n         nHeaderStart = -1;\n         nMessageStart = -1;\n         addr = addrIn;\n+        addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n         strSubVer = \"\";\n         fClient = false; // set by version message"
      },
      {
        "sha": "a9cc0cf4d35ff83feb11783df0ef9f64a40717f0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 7,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bab521df895c149579b9e64931405c56b008afb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bab521df895c149579b9e64931405c56b008afb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9bab521df895c149579b9e64931405c56b008afb",
        "patch": "@@ -15,7 +15,10 @@\n using namespace std;\n \n // Settings\n+int nSocksVersion = 5;\n int fUseProxy = false;\n+bool fProxyNameLookup = false;\n+bool fNameLookup = false;\n CService addrProxy(\"127.0.0.1\",9050);\n int nConnectTimeout = 5000;\n \n@@ -310,12 +313,12 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n-    bool fProxy = (fUseProxy && addrDest.IsRoutable());\n     struct sockaddr_in sockaddr;\n-    if (fProxy)\n-        addrProxy.GetSockAddr(&sockaddr);\n-    else\n-        addrDest.GetSockAddr(&sockaddr);\n+    if (!addrConnect.GetSockAddr(&sockaddr))\n+    {\n+        closesocket(hSocket);\n+        return false;\n+    }\n \n #ifdef WIN32\n     u_long fNonblock = 1;\n@@ -329,7 +332,6 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         return false;\n     }\n \n-\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)\n     {\n         // WSAEINVAL is here because some legacy version of winsock uses it\n@@ -414,7 +416,7 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n \n     if (fProxy)\n     {\n-        switch(GetArg(\"-socks\", 5))\n+        switch(nSocksVersion)\n         {\n             case 4:\n                 if (!Socks4(addrDest, hSocket))\n@@ -433,6 +435,48 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n     return true;\n }\n \n+bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout)\n+{\n+    string strDest(pszDest);\n+    int port = portDefault;\n+\n+    size_t colon = strDest.find_last_of(':');\n+    char *endp = NULL;\n+    int n = strtol(pszDest + colon + 1, &endp, 10);\n+    if (endp && *endp == 0 && n >= 0) {\n+        strDest = strDest.substr(0, colon);\n+        if (n > 0 && n < 0x10000)\n+            port = n;\n+    }\n+    if (strDest[0] == '[' && strDest[strDest.size()-1] == ']')\n+        strDest = strDest.substr(1, strDest.size()-2);\n+\n+    SOCKET hSocket = INVALID_SOCKET;\n+    CService addrResolved(CNetAddr(strDest, fNameLookup && !fProxyNameLookup), port);\n+    if (addrResolved.IsValid()) {\n+        addr = addrResolved;\n+        return ConnectSocket(addr, hSocketRet, nTimeout);\n+    }\n+    addr = CService(\"0.0.0.0:0\");\n+    if (!fNameLookup)\n+        return false;\n+    if (!ConnectSocketDirectly(addrProxy, hSocket, nTimeout))\n+        return false;\n+\n+    switch(nSocksVersion)\n+        {\n+            case 4: return false;\n+            case 5:\n+            default:\n+                if (!Socks5(strDest, port, hSocket))\n+                    return false;\n+                break;\n+        }\n+\n+    hSocketRet = hSocket;\n+    return true;\n+}\n+\n void CNetAddr::Init()\n {\n     memset(ip, 0, 16);"
      },
      {
        "sha": "3d29569069037c55dbce0d41efa0b019e74b55e5",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bab521df895c149579b9e64931405c56b008afb/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bab521df895c149579b9e64931405c56b008afb/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=9bab521df895c149579b9e64931405c56b008afb",
        "patch": "@@ -119,9 +119,13 @@ bool Lookup(const char *pszName, CService& addr, int portDefault = 0, bool fAllo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault = 0, bool fAllowLookup = true, unsigned int nMaxSolutions = 0);\n bool LookupNumeric(const char *pszName, CService& addr, int portDefault = 0);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout = nConnectTimeout);\n+bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault = 0, int nTimeout = nConnectTimeout);\n \n // Settings\n+extern int nSocksVersion;\n extern int fUseProxy;\n+extern bool fProxyNameLookup;\n+extern bool fNameLookup;\n extern CService addrProxy;\n \n #endif"
      }
    ]
  },
  {
    "sha": "478b01d9a797f3ea41cca141992b161867a5996d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzhiMDFkOWE3OTdmM2VhNDFjY2ExNDE5OTJiMTYxODY3YTU5OTZk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-24T00:15:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:11:54Z"
      },
      "message": "Add -seednode connections, and use this for -dnsseed + -proxydns",
      "tree": {
        "sha": "7f560844e88896a190718e3b953a8cfbd4a0b02c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f560844e88896a190718e3b953a8cfbd4a0b02c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478b01d9a797f3ea41cca141992b161867a5996d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478b01d9a797f3ea41cca141992b161867a5996d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/478b01d9a797f3ea41cca141992b161867a5996d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478b01d9a797f3ea41cca141992b161867a5996d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bab521df895c149579b9e64931405c56b008afb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bab521df895c149579b9e64931405c56b008afb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bab521df895c149579b9e64931405c56b008afb"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 45,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f9ea998cee9500ea616c85b667d317a479823644",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478b01d9a797f3ea41cca141992b161867a5996d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478b01d9a797f3ea41cca141992b161867a5996d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=478b01d9a797f3ea41cca141992b161867a5996d",
        "patch": "@@ -180,12 +180,13 @@ bool AppInit2(int argc, char* argv[])\n             \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks proxy\") + \"\\n\" +\n             \"  -socks=<n>       \\t  \"   + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n-            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\") + \"\\n\" +\n+            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n             \"  -proxydns        \\t  \"   + _(\"Pass DNS requests to (SOCKS5) proxy\") + \"\\n\" +\n             \"  -port=<port>     \\t\\t  \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n             \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\") + \"\\n\" +\n+            \"  -seednode=<ip>   \\t\\t  \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n             \"  -irc             \\t  \"   + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n             \"  -listen          \\t  \"   + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n #ifdef QT_GUI\n@@ -536,6 +537,9 @@ bool AppInit2(int argc, char* argv[])\n     fNoListen = !GetBoolArg(\"-listen\", true);\n     nSocksVersion = GetArg(\"-socks\", 5);\n \n+    BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n+        AddOneShot(strDest);\n+\n     // Continue to put \"/P2SH/\" in the coinbase to monitor\n     // BIP16 support.\n     // This can be removed eventually..."
      },
      {
        "sha": "6a3cbe710d91f94cba5be26aa5cbf2c8bbbfdd3f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478b01d9a797f3ea41cca141992b161867a5996d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478b01d9a797f3ea41cca141992b161867a5996d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=478b01d9a797f3ea41cca141992b161867a5996d",
        "patch": "@@ -2264,7 +2264,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n \n             // Get recent addresses\n-            if (pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n+            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n             {\n                 pfrom->PushMessage(\"getaddr\");\n                 pfrom->fGetAddr = true;\n@@ -2280,7 +2280,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Ask the first connected node for block updates\n         static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient &&\n+        if (!pfrom->fClient && !pfrom->fOneShot &&\n             (pfrom->nVersion < NOBLKS_VERSION_START ||\n              pfrom->nVersion >= NOBLKS_VERSION_END) &&\n              (nAskedForBlocks < 1 || vNodes.size() <= 1))\n@@ -2378,6 +2378,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         addrman.Add(vAddr, pfrom->addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n+        if (pfrom->fOneShot)\n+            pfrom->fDisconnect = true;\n     }\n \n "
      },
      {
        "sha": "048320696931d45e489052c9f589d28a823cb13e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 6,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478b01d9a797f3ea41cca141992b161867a5996d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478b01d9a797f3ea41cca141992b161867a5996d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=478b01d9a797f3ea41cca141992b161867a5996d",
        "patch": "@@ -35,7 +35,7 @@ void ThreadOpenAddedConnections2(void* parg);\n void ThreadMapPort2(void* parg);\n #endif\n void ThreadDNSAddressSeed2(void* parg);\n-bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest = NULL);\n+bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest = NULL, bool fOneShot = false);\n \n \n \n@@ -59,6 +59,8 @@ deque<pair<int64, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n map<CInv, int64> mapAlreadyAskedFor;\n \n+static deque<string> vOneShots;\n+CCriticalSection cs_vOneShots;\n \n set<CNetAddr> setservAddNodeAddresses;\n CCriticalSection cs_setservAddNodeAddresses;\n@@ -68,6 +70,12 @@ static int nOutbound = 0;\n static CConditionVariable condOutbound;\n \n \n+void AddOneShot(string strDest)\n+{\n+    LOCK(cs_vOneShots);\n+    vOneShots.push_back(strDest);\n+}\n+\n unsigned short GetListenPort()\n {\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n@@ -328,7 +336,7 @@ CNode* FindNode(const CService& addr)\n \n CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n {\n-    if (pszDest != NULL) {\n+    if (pszDest == NULL) {\n         if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost)\n             return NULL;\n \n@@ -1038,8 +1046,7 @@ void ThreadDNSAddressSeed2(void* parg)\n \n         for (unsigned int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n             if (fProxyNameLookup) {\n-                CAddress addr;\n-                OpenNetworkConnection(addr, strDNSSeed[seed_idx][1]);\n+                AddOneShot(strDNSSeed[seed_idx][1]);\n             } else {\n                 vector<CNetAddr> vaddr;\n                 vector<CAddress> vAdd;\n@@ -1205,6 +1212,21 @@ void ThreadOpenConnections(void* parg)\n     printf(\"ThreadOpenConnections exiting\\n\");\n }\n \n+void static ProcessOneShot()\n+{\n+    string strDest;\n+    {\n+        LOCK(cs_vOneShots);\n+        if (vOneShots.empty())\n+            return;\n+        strDest = vOneShots.front();\n+        vOneShots.pop_front();\n+    }\n+    CAddress addr;\n+    if (!OpenNetworkConnection(addr, strDest.c_str(), true))\n+        AddOneShot(strDest);\n+}\n+\n void ThreadOpenConnections2(void* parg)\n {\n     printf(\"ThreadOpenConnections started\\n\");\n@@ -1214,9 +1236,10 @@ void ThreadOpenConnections2(void* parg)\n     {\n         for (int64 nLoop = 0;; nLoop++)\n         {\n+            ProcessOneShot();\n             BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n             {\n-                CAddress addr(CService(\"0.0.0.0:0\"));\n+                CAddress addr;\n                 OpenNetworkConnection(addr, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n@@ -1232,6 +1255,8 @@ void ThreadOpenConnections2(void* parg)\n     int64 nStart = GetTime();\n     loop\n     {\n+        ProcessOneShot();\n+\n         vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         Sleep(500);\n         vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n@@ -1403,7 +1428,7 @@ void ThreadOpenAddedConnections2(void* parg)\n     }\n }\n \n-bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest)\n+bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest, bool fOneShot)\n {\n     //\n     // Initiate outbound network connection\n@@ -1426,6 +1451,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest)\n     if (!pnode)\n         return false;\n     pnode->fNetworkNode = true;\n+    if (fOneShot)\n+        pnode->fOneShot = true;\n \n     return true;\n }"
      },
      {
        "sha": "d48512a5dcf125161c73f1f726ae4f72a8f59ea8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478b01d9a797f3ea41cca141992b161867a5996d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478b01d9a797f3ea41cca141992b161867a5996d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=478b01d9a797f3ea41cca141992b161867a5996d",
        "patch": "@@ -30,6 +30,7 @@ extern int nBestHeight;\n inline unsigned int ReceiveBufferSize() { return 1000*GetArg(\"-maxreceivebuffer\", 10*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 10*1000); }\n \n+void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n@@ -122,6 +123,7 @@ class CNode\n     std::string addrName;\n     int nVersion;\n     std::string strSubVer;\n+    bool fOneShot;\n     bool fClient;\n     bool fInbound;\n     bool fNetworkNode;\n@@ -171,6 +173,7 @@ class CNode\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n         strSubVer = \"\";\n+        fOneShot = false;\n         fClient = false; // set by version message\n         fInbound = fInboundIn;\n         fNetworkNode = false;"
      }
    ]
  }
]