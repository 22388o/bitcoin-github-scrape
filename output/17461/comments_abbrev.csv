JeremyRubin,2020-02-24 18:21:40,"Review notes:\n\n1) Don't love -- self.assert_mempool_unchanged(self.nodes[1], waitingtime=5). Long timeouts which return early are OK, but short-er timeouts which always wait for the whole timeout are riskier IMO especially when we don't control the runtime.\n2) The test doesn't check that the descendants limit is actually enforced, e.g., that MAX_CUSTOM_DESCDENDANTS+1 is *not* in the mempool",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-590476635,590476635,
theStack,2020-02-25 09:35:51,"@JeremyRubin: Thanks for your review notes! I fully agree to your points 1 and 2 (can't say anything about point 3 yet), they both actually stem from the fact that I can't find a concrete way to express the event of ""_node1 has received all txs from node0_"". As long as I don't know that all txs from node0 have been broadcasted, it is impossible to check that something is _not_ in the mempool on no",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-590772489,590772489,
JeremyRubin,2020-02-26 20:35:50,You could expose the CNodeState via an RPC enabled just for testing. That's probably the most robust for what you want to test.,https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591630302,591630302,
MarcoFalke,2020-02-26 22:01:50,It is possible to set the poisson delay to 0 with `-whitelist=noban@127.0.0.1`. Not sure if that solves your problem and it might even interact with other functionality of the test.,https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591666926,591666926,
theStack,2020-02-26 22:30:45,"Turns out that I thought *way* too complicated when working in this originally, as the solution is really as simple as just activating the immediate tx relay through `-whitelist=127.0.0.1`. Magically the minute while I was trying this out @MarcoFalke suggested the same (with `noban@` though). :smile: \nAs far as I can see the other functionality of the test is not affected by tx relay/timing, so ",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591678172,591678172,
JeremyRubin,2020-02-26 22:54:04,"Also endorse using a whitelist -- I wasn't sure if you wanted all of the whitelist behaviors, such as re-relay and others, but if it works for this test then that's perfect.\n\nYou may still need some sync to wait until the mempool is the expected size (e.g., \n```python\nstart = now()\nwhile len(mempool1) != MAX_ANCESTORS_CUSTOM + 1 + MAX_DESCENDANTS_CUSTOM:\n   if now() > start + 60 second",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591686257,591686257,
theStack,2020-02-26 23:25:36,"@JeremyRubin: Agreed, makes absolute sense to be cautious and wait for the (unlikely, but possible) case that node1 has not been synced. Luckily there exists already a function `wait_until` in the test framework util that contains pretty much exactly your suggested waiting loop, where the condition is passed in form of a lambda function, leading to:\n`wait_until(lambda: len(self.nodes[1].getrawme",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591696522,591696522,
JeremyRubin,2020-02-27 04:23:32,"Excellent. utACK b902bd6 \n\nfailures look unrelated?",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591773148,591773148,
theStack,2020-02-27 12:24:48,"> failures look unrelated?\n\nYes, the Travis failure is unrelated, a unit test is causing the trouble (named `mockforward`, see https://travis-ci.org/bitcoin/bitcoin/jobs/655587226#L3004)\n\nWhere can I find more informations about your mentioned ""Lightning carve out"" that also needs a test? Does this have to do with this: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-591943814,591943814,
MarcoFalke,2020-02-27 19:26:03,For that there are some tests in `test/functional/mempool_package_onemore.py`,https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-592134757,592134757,
instagibbs,2020-02-27 20:13:15,"post-hom concept ACK, thanks for putting in the test writing effort!",https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-592155407,592155407,
