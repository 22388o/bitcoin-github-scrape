[
  {
    "sha": "b902bd66b0f35c5016dc5d7aaf501940935edd62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTAyYmQ2NmIwZjM1YzUwMTZkYzVkN2FhZjUwMTk0MDkzNWVkZDYy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-13T02:55:48Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-26T23:24:33Z"
      },
      "message": "test: check custom descendant limit in mempool_packages.py\n\nTo test the custom descendant limit on node1 (passed by the argument\n-limitdescendantcount), we check for four conditions:\n    -> the # of txs in the node1 mempool is equal to the limit\n       (plus 1 for the parent tx, plus the # txs from the previous ancestor\n        test which are still in)\n    -> all txs in node1 mempool are a subset of txs in node0 mempool\n    -> part of the constructed descendant-chain (the first ones up to the\n       limit) are contained in node1 mempool\n    -> the remaining part of the constructed descendant-chain (all after the\n       first ones up to the limit) is *not* contained in node1 mempool",
      "tree": {
        "sha": "939b654848aa24ad9cc53ab826f28a4328ca356f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/939b654848aa24ad9cc53ab826f28a4328ca356f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b902bd66b0f35c5016dc5d7aaf501940935edd62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b902bd66b0f35c5016dc5d7aaf501940935edd62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b902bd66b0f35c5016dc5d7aaf501940935edd62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b902bd66b0f35c5016dc5d7aaf501940935edd62/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5d47ed8fd3724cc5295fca70573f1edf552ff62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d47ed8fd3724cc5295fca70573f1edf552ff62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d47ed8fd3724cc5295fca70573f1edf552ff62"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a07dad18d61eef32697cf43dc22bdf35f758f62a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b902bd66b0f35c5016dc5d7aaf501940935edd62/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b902bd66b0f35c5016dc5d7aaf501940935edd62/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=b902bd66b0f35c5016dc5d7aaf501940935edd62",
        "patch": "@@ -12,20 +12,30 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     satoshi_round,\n+    wait_until,\n )\n \n # default limits\n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n # custom limits for node1\n MAX_ANCESTORS_CUSTOM = 5\n+MAX_DESCENDANTS_CUSTOM = 10\n+assert MAX_DESCENDANTS_CUSTOM >= MAX_ANCESTORS_CUSTOM\n \n class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [\n-            [\"-maxorphantx=1000\"],\n-            [\"-maxorphantx=1000\", \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM)],\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+            ],\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-limitancestorcount={}\".format(MAX_ANCESTORS_CUSTOM),\n+                \"-limitdescendantcount={}\".format(MAX_DESCENDANTS_CUSTOM),\n+            ],\n         ]\n \n     def skip_test_if_missing_module(self):\n@@ -219,9 +229,11 @@ def run_test(self):\n             transaction_package.append({'txid': txid, 'vout': i, 'amount': sent_value})\n \n         # Sign and send up to MAX_DESCENDANT transactions chained off the parent tx\n+        chain = [] # save sent txs for the purpose of checking node1's mempool later (see below)\n         for i in range(MAX_DESCENDANTS - 1):\n             utxo = transaction_package.pop(0)\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+            chain.append(txid)\n             if utxo['txid'] is parent_transaction:\n                 tx_children.append(txid)\n             for j in range(10):\n@@ -238,7 +250,21 @@ def run_test(self):\n         utxo = transaction_package.pop(0)\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n-        # TODO: check that node1's mempool is as expected\n+        # Check that node1's mempool is as expected, containing:\n+        # - txs from previous ancestor test (-> custom ancestor limit)\n+        # - parent tx for descendant test\n+        # - txs chained off parent tx (-> custom descendant limit)\n+        wait_until(lambda: len(self.nodes[1].getrawmempool(False)) ==\n+                           MAX_ANCESTORS_CUSTOM + 1 + MAX_DESCENDANTS_CUSTOM, timeout=10)\n+        mempool0 = self.nodes[0].getrawmempool(False)\n+        mempool1 = self.nodes[1].getrawmempool(False)\n+        assert set(mempool1).issubset(set(mempool0))\n+        assert parent_transaction in mempool1\n+        for tx in chain[:MAX_DESCENDANTS_CUSTOM]:\n+            assert tx in mempool1\n+        for tx in chain[MAX_DESCENDANTS_CUSTOM:]:\n+            assert tx not in mempool1\n+        # TODO: more detailed check of node1's mempool (fees etc.)\n \n         # TODO: test descendant size limits\n "
      }
    ]
  }
]