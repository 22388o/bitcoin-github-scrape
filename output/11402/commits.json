[
  {
    "sha": "3191f8421489176a706ecf2eb4dee50dd0b91933",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTkxZjg0MjE0ODkxNzZhNzA2ZWNmMmViNGRlZTUwZGQwYjkxOTMz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-25T22:49:01Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-25T23:14:49Z"
      },
      "message": "[wallet] Use shared pointer for wallet instances",
      "tree": {
        "sha": "d01ea19d5299e846a895d1a40bba90002865c4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d01ea19d5299e846a895d1a40bba90002865c4dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3191f8421489176a706ecf2eb4dee50dd0b91933",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3191f8421489176a706ecf2eb4dee50dd0b91933",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3191f8421489176a706ecf2eb4dee50dd0b91933",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3191f8421489176a706ecf2eb4dee50dd0b91933/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf88b4aaeaf4f7446fea6dc6d2402a9cc9368eb"
      }
    ],
    "stats": {
      "total": 431,
      "additions": 230,
      "deletions": 201
    },
    "files": [
      {
        "sha": "02394d9716c706e5ff44dac1af40c6186ec24ce8",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -485,9 +485,9 @@ void BitcoinApplication::initializeResult(bool success)\n \n #ifdef ENABLE_WALLET\n         // TODO: Expose secondary wallets\n-        if (!vpwallets.empty())\n-        {\n-            walletModel = new WalletModel(platformStyle, vpwallets[0], optionsModel);\n+        auto wallets = GetWallets();\n+        if (!wallets.empty()) {\n+            walletModel = new WalletModel(platformStyle, wallets[0].get(), optionsModel);\n \n             window->addWallet(BitcoinGUI::DEFAULT_WALLET, walletModel);\n             window->setCurrentWallet(BitcoinGUI::DEFAULT_WALLET);"
      },
      {
        "sha": "687a6c157df42d07c3d94f1159e7ca4471851ce0",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -305,9 +305,10 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n                             req.strMethod = stack.back()[0];\n #ifdef ENABLE_WALLET\n                             // TODO: Move this logic to WalletModel\n-                            if (!vpwallets.empty()) {\n+                            auto wallets = GetWallets();\n+                            if (!wallets.empty()) {\n                                 // in Qt, use always the wallet with index 0 when running with multiple wallets\n-                                QByteArray encodedName = QUrl::toPercentEncoding(QString::fromStdString(vpwallets[0]->GetName()));\n+                                QByteArray encodedName = QUrl::toPercentEncoding(QString::fromStdString(wallets[0]->GetName()));\n                                 req.URI = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n                             }\n #endif"
      },
      {
        "sha": "879c310c82179747583734595e28604b57e1425e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -113,7 +113,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n \n     LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n #else\n@@ -137,7 +137,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet.get()), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n@@ -231,9 +231,9 @@ CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& pa\n UniValue createmultisig(const JSONRPCRequest& request)\n {\n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n #else\n-    CWallet * const pwallet = nullptr;\n+    auto const pwallet = nullptr;\n #endif\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n@@ -266,7 +266,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n+    CScript inner = _createmultisig_redeemScript(pwallet.get(), request.params);\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "21291065114835f6e71cb467e1fa0843bfe5188f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -643,7 +643,7 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n #endif\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n@@ -655,7 +655,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n #ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet.get()) + \"\\n\"\n #endif\n \n             \"\\nArguments:\\n\"\n@@ -752,7 +752,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     }\n #ifdef ENABLE_WALLET\n     else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(pwallet.get());\n     }\n #endif\n "
      },
      {
        "sha": "1d2ae14184741d8451b0564951a29b40f9858a72",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -242,38 +242,35 @@ bool OpenWallets()\n         return true;\n     }\n \n-    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n+    for (const std::string& wallet_file : gArgs.GetArgs(\"-wallet\")) {\n+        auto pwallet = CWallet::CreateWalletFromFile(wallet_file);\n         if (!pwallet) {\n             return false;\n         }\n-        vpwallets.push_back(pwallet);\n+        AddWallet(pwallet);\n     }\n \n     return true;\n }\n \n void StartWallets(CScheduler& scheduler) {\n-    for (CWalletRef pwallet : vpwallets) {\n+    for (auto pwallet : GetWallets()) {\n         pwallet->postInitProcess(scheduler);\n     }\n }\n \n void FlushWallets() {\n-    for (CWalletRef pwallet : vpwallets) {\n+    for (auto pwallet : GetWallets()) {\n         pwallet->Flush(false);\n     }\n }\n \n void StopWallets() {\n-    for (CWalletRef pwallet : vpwallets) {\n+    for (auto pwallet : GetWallets()) {\n         pwallet->Flush(true);\n     }\n }\n \n void CloseWallets() {\n-    for (CWalletRef pwallet : vpwallets) {\n-        delete pwallet;\n-    }\n-    vpwallets.clear();\n+    ClearWallets();\n }"
      },
      {
        "sha": "a564a6c8eeebc92b95be486693cc75423cf1c86a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -73,8 +73,8 @@ std::string DecodeDumpString(const std::string &str) {\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -103,7 +103,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     std::string strSecret = request.params[0].get_str();\n     std::string strLabel = \"\";\n@@ -157,8 +157,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n UniValue abortrescan(const JSONRPCRequest& request)\n {\n-    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -218,8 +218,8 @@ void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -270,10 +270,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n         if (fP2SH) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         }\n-        ImportAddress(pwallet, dest, strLabel);\n+        ImportAddress(pwallet.get(), dest, strLabel);\n     } else if (IsHex(request.params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n-        ImportScript(pwallet, CScript(data.begin(), data.end()), strLabel, fP2SH);\n+        ImportScript(pwallet.get(), CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n@@ -289,8 +289,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -307,7 +307,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n-    CWalletTx wtx(pwallet, MakeTransactionRef(std::move(tx)));\n+    CWalletTx wtx(pwallet.get(), MakeTransactionRef(std::move(tx)));\n \n     CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n@@ -350,8 +350,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -388,8 +388,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -433,8 +433,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    ImportAddress(pwallet, pubKey.GetID(), strLabel);\n-    ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);\n+    ImportAddress(pwallet.get(), pubKey.GetID(), strLabel);\n+    ImportScript(pwallet.get(), GetScriptForRawPubKey(pubKey), strLabel, false);\n \n     if (fRescan)\n     {\n@@ -448,8 +448,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -473,7 +473,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     std::ifstream file;\n     file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n@@ -549,8 +549,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -571,7 +571,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     std::string strAddress = request.params[0].get_str();\n     CTxDestination dest = DecodeDestination(strAddress);\n@@ -592,8 +592,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -614,7 +614,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     std::ofstream file;\n     boost::filesystem::path filepath = request.params[0].get_str();\n@@ -691,7 +691,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n {\n     try {\n         bool success = false;\n@@ -1020,8 +1020,8 @@ int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n-    if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), mainRequest.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1080,7 +1080,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     // Verify all timestamps are present before importing any keys.\n     const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n@@ -1102,7 +1102,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     for (const UniValue& data : requests.getValues()) {\n         const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-        const UniValue result = ProcessImport(pwallet, data, timestamp);\n+        const UniValue result = ProcessImport(pwallet.get(), data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {"
      },
      {
        "sha": "530ee148d27b3b79b9b3f703d8684ca9e61205f2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 118,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -35,19 +35,20 @@\n \n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n+    auto wallets = GetWallets();\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n         // wallet endpoint was used\n         std::string requestedWallet = urlDecode(request.URI.substr(WALLET_ENDPOINT_BASE.size()));\n-        for (CWalletRef pwallet : ::vpwallets) {\n+        for (auto pwallet : GetWallets()) {\n             if (pwallet->GetName() == requestedWallet) {\n                 return pwallet;\n             }\n         }\n         throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n     }\n-    return ::vpwallets.size() == 1 || (request.fHelp && ::vpwallets.size() > 0) ? ::vpwallets[0] : nullptr;\n+    return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n }\n \n std::string HelpRequiringPassphrase(CWallet * const pwallet)\n@@ -61,7 +62,7 @@ bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)\n {\n     if (pwallet) return true;\n     if (avoidException) return false;\n-    if (::vpwallets.empty()) {\n+    if (GetWallets().empty()) {\n         // Note: It isn't currently possible to trigger this error because\n         // wallet RPC methods aren't registered unless a wallet is loaded. But\n         // this error is being kept as a precaution, because it's possible in\n@@ -130,8 +131,8 @@ std::string AccountFromValue(const UniValue& value)\n \n UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -186,8 +187,8 @@ CTxDestination GetAccountAddress(CWallet* const pwallet, std::string strAccount,\n \n UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -213,15 +214,15 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VSTR);\n \n-    ret = EncodeDestination(GetAccountAddress(pwallet, strAccount));\n+    ret = EncodeDestination(GetAccountAddress(pwallet.get(), strAccount));\n     return ret;\n }\n \n \n UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -243,7 +244,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n-    CReserveKey reservekey(pwallet);\n+    CReserveKey reservekey(pwallet.get());\n     CPubKey vchPubKey;\n     if (!reservekey.GetReservedKey(vchPubKey, true))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n@@ -258,8 +259,8 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n UniValue setaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -291,8 +292,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n         if (pwallet->mapAddressBook.count(dest)) {\n             std::string strOldAccount = pwallet->mapAddressBook[dest].name;\n-            if (dest == GetAccountAddress(pwallet, strOldAccount)) {\n-                GetAccountAddress(pwallet, strOldAccount, true);\n+            if (dest == GetAccountAddress(pwallet.get(), strOldAccount)) {\n+                GetAccountAddress(pwallet.get(), strOldAccount, true);\n             }\n         }\n         pwallet->SetAddressBook(dest, strAccount, \"receive\");\n@@ -306,8 +307,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n \n UniValue getaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -342,8 +343,8 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -419,16 +420,16 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n             \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n-            + HelpRequiringPassphrase(pwallet) +\n+            + HelpRequiringPassphrase(pwallet.get()) +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n@@ -495,17 +496,17 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n-    SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n+    SendMoney(pwallet.get(), dest, nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n \n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -558,16 +559,16 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n UniValue signmessage(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet.get()) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n@@ -586,7 +587,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     std::string strAddress = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -619,8 +620,8 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -681,8 +682,8 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -741,8 +742,8 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n UniValue getbalance(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -814,8 +815,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -833,8 +834,8 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n UniValue movecmd(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -884,16 +885,16 @@ UniValue movecmd(const JSONRPCRequest& request)\n \n UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw std::runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet.get()) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n@@ -940,32 +941,32 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (!request.params[5].isNull() && !request.params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     // Check funds\n     CAmount nBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     CCoinControl no_coin_control; // This is a deprecated API\n-    SendMoney(pwallet, dest, nAmount, false, wtx, no_coin_control);\n+    SendMoney(pwallet.get(), dest, nAmount, false, wtx, no_coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n UniValue sendmany(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet.get()) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n@@ -1073,15 +1074,15 @@ UniValue sendmany(const JSONRPCRequest& request)\n         vecSend.push_back(recipient);\n     }\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n     // Check funds\n     CAmount nBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    CReserveKey keyChange(pwallet);\n+    CReserveKey keyChange(pwallet.get());\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n@@ -1098,12 +1099,12 @@ UniValue sendmany(const JSONRPCRequest& request)\n }\n \n // Defined in rpc/misc.cpp\n-extern CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& params);\n+extern CScript _createmultisig_redeemScript(CWallet* const pwallet, const UniValue& params);\n \n UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1142,7 +1143,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n+    CScript inner = _createmultisig_redeemScript(pwallet.get(), request.params);\n     CScriptID innerID(inner);\n     pwallet->AddCScript(inner);\n \n@@ -1207,8 +1208,8 @@ class Witnessifier : public boost::static_visitor<bool>\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1240,7 +1241,7 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n-    Witnessifier w(pwallet);\n+    Witnessifier w(pwallet.get());\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n@@ -1385,8 +1386,8 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1425,13 +1426,13 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     ObserveSafeMode();\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, false);\n+    return ListReceived(pwallet.get(), request.params, false);\n }\n \n UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1465,7 +1466,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n     ObserveSafeMode();\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, true);\n+    return ListReceived(pwallet.get(), request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1585,8 +1586,8 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1681,7 +1682,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != nullptr)\n-            ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n+            ListTransactions(pwallet.get(), *pwtx, strAccount, 0, true, ret, filter);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != nullptr)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1716,8 +1717,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1799,8 +1800,8 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1899,7 +1900,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n-            ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n+            ListTransactions(pwallet.get(), tx, \"*\", 0, true, transactions, filter);\n         }\n     }\n \n@@ -1916,7 +1917,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, it->second, \"*\", -100000000, true, removed, filter);\n+                ListTransactions(pwallet.get(), it->second, \"*\", -100000000, true, removed, filter);\n             }\n         }\n         paltindex = paltindex->pprev;\n@@ -1935,8 +1936,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2015,7 +2016,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n+    ListTransactions(pwallet.get(), wtx, \"*\", 0, false, details, filter);\n     entry.push_back(Pair(\"details\", details));\n \n     std::string strHex = EncodeHexTx(static_cast<CTransaction>(wtx), RPCSerializationFlags());\n@@ -2026,8 +2027,8 @@ UniValue gettransaction(const JSONRPCRequest& request)\n \n UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2066,8 +2067,8 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n \n UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2095,16 +2096,16 @@ UniValue backupwallet(const JSONRPCRequest& request)\n \n UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet.get()) + \"\\n\"\n             \"\\nArguments\\n\"\n             \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n             \"\\nExamples:\\n\"\n@@ -2122,7 +2123,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n         kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n     pwallet->TopUpKeyPool(kpSize);\n \n     if (pwallet->GetKeyPoolSize() < kpSize) {\n@@ -2142,8 +2143,8 @@ static void LockWallet(CWallet* pWallet)\n \n UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2198,16 +2199,16 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     int64_t nSleepTime = request.params[1].get_int64();\n     pwallet->nRelockTime = GetTime() + nSleepTime;\n-    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), boost::bind(LockWallet, pwallet), nSleepTime);\n+    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), boost::bind(LockWallet, pwallet.get()), nSleepTime);\n \n     return NullUniValue;\n }\n \n \n UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2257,8 +2258,8 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n UniValue walletlock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2297,8 +2298,8 @@ UniValue walletlock(const JSONRPCRequest& request)\n \n UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2359,8 +2360,8 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n \n UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2449,8 +2450,8 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2501,8 +2502,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n UniValue settxfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2530,8 +2531,8 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2605,9 +2606,9 @@ UniValue listwallets(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VARR);\n \n-    for (CWalletRef pwallet : vpwallets) {\n+    for (auto pwallet : GetWallets()) {\n \n-        if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n             return NullUniValue;\n         }\n \n@@ -2621,8 +2622,8 @@ UniValue listwallets(const JSONRPCRequest& request)\n \n UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2656,8 +2657,8 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n UniValue listunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2817,8 +2818,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -2997,9 +2998,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n@@ -3090,9 +3090,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(pwallet.get());\n \n-    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n+    CFeeBumper feeBump(pwallet.get(), hash, coin_control, totalFee);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {\n@@ -3116,11 +3116,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     // sign bumped transaction\n-    if (!feeBump.signTransaction(pwallet)) {\n+    if (!feeBump.signTransaction(pwallet.get())) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n     // commit the bumped transaction\n-    if(!feeBump.commit(pwallet)) {\n+    if(!feeBump.commit(pwallet.get())) {\n         throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n@@ -3137,9 +3137,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n UniValue generate(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    auto const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "37815fe615167c24bbcb05edf8a8b7c2862ba901",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -19,10 +19,10 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n  * @return nullptr if no wallet should be used, or a pointer to the CWallet\n  */\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n+std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n-std::string HelpRequiringPassphrase(CWallet *);\n-void EnsureWalletIsUnlocked(CWallet *);\n-bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n+std::string HelpRequiringPassphrase(CWallet* const);\n+void EnsureWalletIsUnlocked(CWallet* const);\n+bool EnsureWalletIsAvailable(CWallet* const, bool avoidException);\n \n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "644ce5ea1ecf2982010569bd4e1f8db0acf9a0db",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -407,8 +407,8 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        CWallet wallet;\n-        vpwallets.insert(vpwallets.begin(), &wallet);\n+        auto wallet = std::make_shared<CWallet>();\n+        assert(AddWallet(wallet));\n         UniValue keys;\n         keys.setArray();\n         UniValue key;\n@@ -439,7 +439,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        vpwallets.erase(vpwallets.begin());\n+        assert(RemoveWallet(wallet));\n     }\n }\n \n@@ -466,40 +466,41 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        auto wallet = std::make_shared<CWallet>();\n+        LOCK(wallet->cs_wallet);\n+        wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n+        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        vpwallets.insert(vpwallets.begin(), &wallet);\n+        assert(AddWallet(wallet));\n         ::dumpwallet(request);\n+        assert(RemoveWallet(wallet));\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        CWallet wallet;\n+        auto wallet = std::make_shared<CWallet>();\n \n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back((pathTemp / \"wallet.backup\").string());\n-        vpwallets[0] = &wallet;\n+        assert(AddWallet(wallet));\n         ::importwallet(request);\n+        assert(RemoveWallet(wallet));\n \n-        BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3);\n         BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n         for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n-            bool found = wallet.GetWalletTx(coinbaseTxns[i].GetHash());\n+            bool found = wallet->GetWalletTx(coinbaseTxns[i].GetHash());\n             bool expected = i >= 100;\n             BOOST_CHECK_EQUAL(found, expected);\n         }\n     }\n \n     SetMockTime(0);\n-    vpwallets.erase(vpwallets.begin());\n }\n \n // Check that GetImmatureCredit() returns a newly calculated value instead of"
      },
      {
        "sha": "cc4fb5fe07c3b7d5dca05202e51f19222402ab81",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -37,7 +37,36 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n \n-std::vector<CWalletRef> vpwallets;\n+static std::vector<std::shared_ptr<CWallet>> vpwallets;\n+\n+bool AddWallet(std::shared_ptr<CWallet> pwallet)\n+{\n+    vpwallets.push_back(pwallet);\n+    return true;\n+}\n+\n+bool RemoveWallet(std::shared_ptr<CWallet> pwallet)\n+{\n+    for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n+        if (*it == pwallet) {\n+            vpwallets.erase(it);\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+std::vector<std::shared_ptr<CWallet>> GetWallets()\n+{\n+    return vpwallets;\n+}\n+\n+bool ClearWallets()\n+{\n+    vpwallets.clear();\n+    return true;\n+}\n+\n /** Transaction fee set by the user */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n@@ -3755,7 +3784,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string walletFile)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n@@ -3777,7 +3806,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    std::shared_ptr<CWallet> walletInstance = std::make_shared<CWallet>(std::move(dbw));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n@@ -3861,7 +3890,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterValidationInterface(walletInstance);\n+    RegisterValidationInterface(walletInstance.get());\n \n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();"
      },
      {
        "sha": "d4b43c9138845aeb173e7d021de194a6c2aca25d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -29,8 +29,10 @@\n #include <utility>\n #include <vector>\n \n-typedef CWallet* CWalletRef;\n-extern std::vector<CWalletRef> vpwallets;\n+bool AddWallet(std::shared_ptr<CWallet> pwallet);\n+bool RemoveWallet(std::shared_ptr<CWallet> pwallet);\n+std::vector<std::shared_ptr<CWallet>> GetWallets();\n+bool ClearWallets();\n \n /**\n  * Settings\n@@ -1081,7 +1083,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string walletFile);\n \n     /**\n      * Wallet post-init setup\n@@ -1112,15 +1114,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n class CReserveKey final : public CReserveScript\n {\n protected:\n-    CWallet* pwallet;\n+    CWallet* const pwallet;\n     int64_t nIndex;\n     CPubKey vchPubKey;\n     bool fInternal;\n public:\n-    explicit CReserveKey(CWallet* pwalletIn)\n+    explicit CReserveKey(CWallet* pwalletIn) : pwallet(pwalletIn)\n     {\n         nIndex = -1;\n-        pwallet = pwalletIn;\n         fInternal = false;\n     }\n "
      },
      {
        "sha": "3870aaf46046c82024b73d334162db09c025ac8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3191f8421489176a706ecf2eb4dee50dd0b91933/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3191f8421489176a706ecf2eb4dee50dd0b91933",
        "patch": "@@ -756,7 +756,7 @@ void MaybeCompactWalletDB()\n         return;\n     }\n \n-    for (CWalletRef pwallet : vpwallets) {\n+    for (auto pwallet : GetWallets()) {\n         CWalletDBWrapper& dbh = pwallet->GetDBHandle();\n \n         unsigned int nUpdateCounter = dbh.nUpdateCounter;"
      }
    ]
  },
  {
    "sha": "7ff54b680ef38e18837d4c874b620fd604e173c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmY1NGI2ODBlZjM4ZTE4ODM3ZDRjODc0YjYyMGZkNjA0ZTE3M2M4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:18:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:23:48Z"
      },
      "message": "Squash me [wallet] Prevent adding the same wallet",
      "tree": {
        "sha": "0fac52283ce1f27875acad73c159990fa26fddd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fac52283ce1f27875acad73c159990fa26fddd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff54b680ef38e18837d4c874b620fd604e173c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff54b680ef38e18837d4c874b620fd604e173c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff54b680ef38e18837d4c874b620fd604e173c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff54b680ef38e18837d4c874b620fd604e173c8/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3191f8421489176a706ecf2eb4dee50dd0b91933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3191f8421489176a706ecf2eb4dee50dd0b91933",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3191f8421489176a706ecf2eb4dee50dd0b91933"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8024b4cdacadb77e85bfa146f1d22dffc1a8cd9f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff54b680ef38e18837d4c874b620fd604e173c8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff54b680ef38e18837d4c874b620fd604e173c8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ff54b680ef38e18837d4c874b620fd604e173c8",
        "patch": "@@ -41,6 +41,11 @@ static std::vector<std::shared_ptr<CWallet>> vpwallets;\n \n bool AddWallet(std::shared_ptr<CWallet> pwallet)\n {\n+    for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n+        if (*it == pwallet) {\n+            return false;\n+        }\n+    }\n     vpwallets.push_back(pwallet);\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "1a5bd9c7623c539e053d87a1594fc75b69a42daa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTViZDljNzYyM2M1MzllMDUzZDg3YTE1OTRmYzc1YjY5YTQyZGFh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:22:07Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:35:06Z"
      },
      "message": "[wallet] Make multi-wallet management thread safe",
      "tree": {
        "sha": "35065bad01965c6683671334333a93d3b9ed2c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35065bad01965c6683671334333a93d3b9ed2c48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a5bd9c7623c539e053d87a1594fc75b69a42daa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5bd9c7623c539e053d87a1594fc75b69a42daa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a5bd9c7623c539e053d87a1594fc75b69a42daa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5bd9c7623c539e053d87a1594fc75b69a42daa/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff54b680ef38e18837d4c874b620fd604e173c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff54b680ef38e18837d4c874b620fd604e173c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff54b680ef38e18837d4c874b620fd604e173c8"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "131d7935c7947ebf91ff90245b555bd6aa4937b7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a5bd9c7623c539e053d87a1594fc75b69a42daa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a5bd9c7623c539e053d87a1594fc75b69a42daa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1a5bd9c7623c539e053d87a1594fc75b69a42daa",
        "patch": "@@ -37,10 +37,12 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n \n-static std::vector<std::shared_ptr<CWallet>> vpwallets;\n+static CCriticalSection cs_wallets;\n+static std::vector<CWalletRef> wallets;\n \n bool AddWallet(std::shared_ptr<CWallet> pwallet)\n {\n+    LOCK(cs_wallets);\n     for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n         if (*it == pwallet) {\n             return false;\n@@ -52,6 +54,7 @@ bool AddWallet(std::shared_ptr<CWallet> pwallet)\n \n bool RemoveWallet(std::shared_ptr<CWallet> pwallet)\n {\n+    LOCK(cs_wallets);\n     for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n         if (*it == pwallet) {\n             vpwallets.erase(it);\n@@ -63,11 +66,13 @@ bool RemoveWallet(std::shared_ptr<CWallet> pwallet)\n \n std::vector<std::shared_ptr<CWallet>> GetWallets()\n {\n+    LOCK(cs_wallets);\n     return vpwallets;\n }\n \n bool ClearWallets()\n {\n+    LOCK(cs_wallets);\n     vpwallets.clear();\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "85b2b4f91d60ab90e12c15ac1d4cefc690286829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWIyYjRmOTFkNjBhYjkwZTEyYzE1YWMxZDRjZWZjNjkwMjg2ODI5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:31:58Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-26T13:35:36Z"
      },
      "message": "Squash me [wallet] Use CWalletRef type",
      "tree": {
        "sha": "8909155f60d2573c2a80205d13038810e6f3f056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8909155f60d2573c2a80205d13038810e6f3f056"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b2b4f91d60ab90e12c15ac1d4cefc690286829",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b2b4f91d60ab90e12c15ac1d4cefc690286829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85b2b4f91d60ab90e12c15ac1d4cefc690286829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b2b4f91d60ab90e12c15ac1d4cefc690286829/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a5bd9c7623c539e053d87a1594fc75b69a42daa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5bd9c7623c539e053d87a1594fc75b69a42daa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a5bd9c7623c539e053d87a1594fc75b69a42daa"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e180921151db8b3d4fb87dcdaf623803e8d46c7f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=85b2b4f91d60ab90e12c15ac1d4cefc690286829",
        "patch": "@@ -35,7 +35,7 @@\n \n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n-std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+CWalletRef GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n     auto wallets = GetWallets();\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {"
      },
      {
        "sha": "430dd6efe532026494d6ef8f19bb2d1de970d5de",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=85b2b4f91d60ab90e12c15ac1d4cefc690286829",
        "patch": "@@ -19,7 +19,7 @@ void RegisterWalletRPCCommands(CRPCTable &t);\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n  * @return nullptr if no wallet should be used, or a pointer to the CWallet\n  */\n-std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n+CWalletRef GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n std::string HelpRequiringPassphrase(CWallet* const);\n void EnsureWalletIsUnlocked(CWallet* const);"
      },
      {
        "sha": "7cc981d54ccab80be8eb3e1fa9159f04934ed5d0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=85b2b4f91d60ab90e12c15ac1d4cefc690286829",
        "patch": "@@ -40,40 +40,40 @@\n static CCriticalSection cs_wallets;\n static std::vector<CWalletRef> wallets;\n \n-bool AddWallet(std::shared_ptr<CWallet> pwallet)\n+bool AddWallet(CWalletRef wallet)\n {\n     LOCK(cs_wallets);\n-    for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n-        if (*it == pwallet) {\n+    for (auto it = wallets.begin(); it != wallets.end(); ++it) {\n+        if (*it == wallet) {\n             return false;\n         }\n     }\n-    vpwallets.push_back(pwallet);\n+    wallets.push_back(wallet);\n     return true;\n }\n \n-bool RemoveWallet(std::shared_ptr<CWallet> pwallet)\n+bool RemoveWallet(CWalletRef wallet)\n {\n     LOCK(cs_wallets);\n-    for (auto it = vpwallets.begin(); it != vpwallets.end(); ++it) {\n-        if (*it == pwallet) {\n-            vpwallets.erase(it);\n+    for (auto it = wallets.begin(); it != wallets.end(); ++it) {\n+        if (*it == wallet) {\n+            wallets.erase(it);\n             return true;\n         }\n     }\n     return false;\n }\n \n-std::vector<std::shared_ptr<CWallet>> GetWallets()\n+std::vector<CWalletRef> GetWallets()\n {\n     LOCK(cs_wallets);\n-    return vpwallets;\n+    return wallets;\n }\n \n bool ClearWallets()\n {\n     LOCK(cs_wallets);\n-    vpwallets.clear();\n+    wallets.clear();\n     return true;\n }\n \n@@ -3794,7 +3794,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWalletRef CWallet::CreateWalletFromFile(const std::string walletFile)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n@@ -3816,7 +3816,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string walletF\n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-    std::shared_ptr<CWallet> walletInstance = std::make_shared<CWallet>(std::move(dbw));\n+    CWalletRef walletInstance = std::make_shared<CWallet>(std::move(dbw));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {"
      },
      {
        "sha": "d8a71d2ba136c56794a959fbe3388648a765d91a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b2b4f91d60ab90e12c15ac1d4cefc690286829/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=85b2b4f91d60ab90e12c15ac1d4cefc690286829",
        "patch": "@@ -22,16 +22,19 @@\n #include <algorithm>\n #include <atomic>\n #include <map>\n+#include <memory>\n #include <set>\n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n #include <utility>\n #include <vector>\n \n-bool AddWallet(std::shared_ptr<CWallet> pwallet);\n-bool RemoveWallet(std::shared_ptr<CWallet> pwallet);\n-std::vector<std::shared_ptr<CWallet>> GetWallets();\n+typedef std::shared<CWallet> CWalletRef;\n+\n+bool AddWallet(CWalletRef wallet);\n+bool RemoveWallet(CWalletRef wallet);\n+std::vector<CWalletRef> GetWallets();\n bool ClearWallets();\n \n /**\n@@ -1083,7 +1086,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string walletFile);\n+    static CWalletRef CreateWalletFromFile(const std::string walletFile);\n \n     /**\n      * Wallet post-init setup"
      }
    ]
  }
]