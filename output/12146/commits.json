[
  {
    "sha": "cc78a984177644bfed77246d69f85c9562d5abf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzc4YTk4NDE3NzY0NGJmZWQ3NzI0NmQ2OWY4NWM5NTYyZDVhYmY2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-01-11T10:44:25Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-03-31T19:06:39Z"
      },
      "message": "Wallet: Support disabling implicit Segwit operation",
      "tree": {
        "sha": "56342b84fda7075a86466e5bae325e190b752e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56342b84fda7075a86466e5bae325e190b752e45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc78a984177644bfed77246d69f85c9562d5abf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc78a984177644bfed77246d69f85c9562d5abf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc78a984177644bfed77246d69f85c9562d5abf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc78a984177644bfed77246d69f85c9562d5abf6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "243c9bb79a3ce81532d6ec884012728669aa40b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243c9bb79a3ce81532d6ec884012728669aa40b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/243c9bb79a3ce81532d6ec884012728669aa40b3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 22,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1f18f471b4513170a78f4517d58ef0ded3546346",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -24,7 +24,7 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     // \"Implicitly\" refers to fact that scripts are derived automatically from\n     // existing keys, and are present in memory, even without being explicitly\n     // loaded (e.g. from a file).\n-    if (pubkey.IsCompressed()) {\n+    if (pubkey.IsCompressed() && m_implicit_segwit) {\n         CScript script = GetScriptForDestination(WitnessV0KeyHash(key_id));\n         // This does not use AddCScript, as it may be overridden.\n         CScriptID id(script);"
      },
      {
        "sha": "5c841ec5873cae8bc3d1574fbdd2fa8248eb48c2",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -54,9 +54,15 @@ class CBasicKeyStore : public CKeyStore\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n+    bool m_implicit_segwit;\n+\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey);\n \n public:\n+    CBasicKeyStore() : m_implicit_segwit(false) { }\n+\n+    bool HasImplicitSegwit() const { return m_implicit_segwit; }\n+\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;"
      },
      {
        "sha": "65ae7e5df6d58c4b558d6d68d94ca9ca7d707527",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -38,6 +38,7 @@ std::string WalletInit::GetHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n+    strUsage += HelpMessageOpt(\"-walletimplicitsegwit\", strprintf(_(\"Support segwit when restoring wallet backups and importing keys (default: %u)\"), DEFAULT_WALLET_IMPLICIT_SEGWIT));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +"
      },
      {
        "sha": "65bb26a1be04429ee6fe152f09d49c680b76fea8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -72,7 +72,7 @@ bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std:\n     bool fLabelFound = false;\n     CKey key;\n     pwallet->GetKey(keyid, key);\n-    for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n+    for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey(), true)) {\n         if (pwallet->mapAddressBook.count(dest)) {\n             if (!strAddr.empty()) {\n                 strAddr += \",\";\n@@ -152,7 +152,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         {\n             pwallet->MarkDirty();\n             // We don't know which corresponding address will be used; label them all\n-            for (const auto& dest : GetAllDestinationsForKey(pubkey)) {\n+            for (const auto& dest : GetAllDestinationsForKey(pubkey, pwallet->HasImplicitSegwit())) {\n                 pwallet->SetAddressBook(dest, strLabel, \"receive\");\n             }\n \n@@ -471,7 +471,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     {\n         LOCK2(cs_main, pwallet->cs_wallet);\n \n-        for (const auto& dest : GetAllDestinationsForKey(pubKey)) {\n+        for (const auto& dest : GetAllDestinationsForKey(pubKey, pwallet->HasImplicitSegwit())) {\n             ImportAddress(pwallet, dest, strLabel);\n         }\n         ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);"
      },
      {
        "sha": "66d88df7330fb1dccfcb2beb9603ef3dcf091c37",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -3942,6 +3942,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     CWallet *walletInstance = new CWallet(name, CWalletDBWrapper::Create(path));\n+    walletInstance->m_implicit_segwit = gArgs.GetBoolArg(\"-walletimplicitsegwit\", DEFAULT_WALLET_IMPLICIT_SEGWIT);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n@@ -4022,7 +4023,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n     }\n \n-    walletInstance->m_default_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), DEFAULT_ADDRESS_TYPE);\n+    walletInstance->m_default_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), (walletInstance->m_implicit_segwit ? DEFAULT_ADDRESS_TYPE : OutputType::LEGACY));\n     if (walletInstance->m_default_address_type == OutputType::NONE) {\n         InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n@@ -4257,8 +4258,10 @@ void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n \n void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n {\n-    // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n-    LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n+    if (m_implicit_segwit) {\n+        // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n+        LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n+    }\n }\n \n CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n@@ -4280,10 +4283,10 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n     }\n }\n \n-std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key, const bool include_segwit)\n {\n     CKeyID keyid = key.GetID();\n-    if (key.IsCompressed()) {\n+    if (key.IsCompressed() && include_segwit) {\n         CTxDestination segwit = WitnessV0KeyHash(keyid);\n         CTxDestination p2sh = CScriptID(GetScriptForDestination(segwit));\n         return std::vector<CTxDestination>{std::move(keyid), std::move(p2sh), std::move(segwit)};"
      },
      {
        "sha": "30417fbef92f89f4e9c6e3cf1e0d0e27276b6fba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -64,6 +64,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n+static const bool DEFAULT_WALLET_IMPLICIT_SEGWIT = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n static const int64_t TIMESTAMP_MIN = 0;\n@@ -1241,7 +1242,7 @@ const std::string& FormatOutputType(OutputType type);\n CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n \n /** Get all destinations (potentially) supported by the wallet for the given key. */\n-std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key, bool include_segwit);\n \n /** RAII object to check and reserve a wallet rescan */\n class WalletRescanReserver"
      },
      {
        "sha": "67508572e6243911769abc0df80758e68414b3f9",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc78a984177644bfed77246d69f85c9562d5abf6/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc78a984177644bfed77246d69f85c9562d5abf6/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=cc78a984177644bfed77246d69f85c9562d5abf6",
        "patch": "@@ -42,7 +42,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\", \"-walletimplicitsegwit\"],\n                            [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n                            [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n "
      }
    ]
  }
]