DrahtBot,2020-06-08 11:50:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19268 (refactor: Make FeeFilterRounder thread safe by hebasto)\n* #19184 (Overhaul transaction request logic by sipa)\n\n",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-640555300,640555300,
naumenkogs,2020-06-10 13:06:52,"Good observation. Concept ACK on solving this inefficiency.\nI'm not sure this is an adequate solution.\n\nWhy we don't pretend it's a blocks-only connection at the beginning?  I guess maybe because it's unknown before handshake.\n\nMaybe we can have a new message for this, but that's too much of an overkill...\n\nDo you have any thoughts?",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-641993798,641993798,
MarcoFalke,2020-06-10 13:27:45,I'd feel uncomfortable using bip37 for this. bloomfilters have been hidden behind a run time flag. It seems fragile to assume that full node implementations in the future are more likely to support bip37 message types than the feefilter message type.,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642009022,642009022,
hebasto,2020-06-11 06:10:06,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642430639,642430639,
sipa,2020-06-11 07:21:30,utACK fa78c686ca5bcafa153d2f3813b77449fa31bb89. Nice idea.,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642462448,642462448,
practicalswift,2020-06-11 08:17:48,Concept ACK: neat idea! :),https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642490170,642490170,
MarcoFalke,2020-06-11 13:11:55,"Thanks for the review so far! The latest force push comes with those changes:\n\n* Fix typo and global variable naming\n* Document why one of the functional tests needs to change\n* Add a new refactoring cleanup commit, removing three global symbols and replacing them with one local",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642638466,642638466,
laanwj,2020-06-11 17:48:43,"Concept ACK\n\n> Why we don't pretend it's a blocks-only connection at the beginning? I guess maybe because it's unknown before handshake.\n\nOne problem with that is that it's impossible to switch a blocks-only connection to a full connection. So it'd require dropping and reconnecting *all* connections after IBD. I'm not sure that's a good idea.\n\n> I'd feel uncomfortable using bip37 for t",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642835471,642835471,
MarcoFalke,2020-06-11 17:53:25,"Jup, fRelay can't be changed while keeping the connection because subsequent version messages are ignored. Recycling the connection seems overly complex and potentially fragile.",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642837961,642837961,
MarcoFalke,2020-06-11 20:21:14,"A new message type wouldn't be understood by old nodes, making it less effective than the `feefilter` approach. Also, it wouldn't be more flexible, because `feefilter` can already be used to effectively turn off and on transaction relay at any time.",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642907279,642907279,
naumenkogs,2020-06-12 06:39:09,utACK fa8a66cf7e255884cb5cf061f43f42a7371e7ff4,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-643095294,643095294,
ajtowns,2020-06-15 06:05:31,utACK fa8a66cf7e255884cb5cf061f43f42a7371e7ff4,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-643922196,643922196,
MarcoFalke,2020-06-15 10:17:34,"If someone wants to write a functional test for this, I am happy to review. Otherwise, I will write one myself after merge.",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-644040070,644040070,
jamesob,2020-06-19 15:17:24,"ACK fa525e4d1cfda8c1924d2c69f43bd7ae3b98fb72 ([`jamesob/ackr/19204.1.MarcoFalke.p2p_reduce_inv_traffic_d`](https://github.com/jamesob/bitcoin/tree/ackr/19204.1.MarcoFalke.p2p_reduce_inv_traffic_d))\n\nHaven't tested. Tried to build locally, but got a linker failure (which sounds\nlike is not unique to this branch): \n```\n/usr/bin/ld: bitcoin_wallet-bitcoin-wallet.o:(.data.rel.ro+0x8): undefi",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-646692569,646692569,
MarcoFalke,2020-06-19 16:12:40,"Jup, the gcc bug is unrelated and tracked in #19309 ",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-646723248,646723248,
MarcoFalke,2020-06-19 17:02:46,"For anyone who reviewed before the rebase, it should be trivial to re-ACK with `git range-diff bitcoin-core/master A B`",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-646758568,646758568,
naumenkogs,2020-06-20 07:03:59,utACK fa525e4,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-646955047,646955047,
rebroad,2020-08-20 14:31:58,"Wouldn't the filterclear message be better to use for when tx invs are desired? I could be wrong, but I think this would (or should) request tx invs even if the connection was made with relay=0 (in the version message).",https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-677702185,677702185,
MarcoFalke,2020-08-20 15:34:42,Have you seen https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-642009022 and #19260 ?,https://github.com/bitcoin/bitcoin/pull/19204#issuecomment-677738778,677738778,
sipa,2020-06-11 07:17:52,"Nit: as you're touching all places where this variable is used, convert it to current naming style?\n\nAlso: can this be `const`?",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438589353,438589353,src/net_processing.cpp
sipa,2020-06-11 07:18:03,Typo: reveived,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438589441,438589441,src/net_processing.cpp
sipa,2020-06-11 07:19:32,Unrelated change?,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438590106,438590106,test/functional/rpc_net.py
hebasto,2020-06-11 07:37:57,"If `ActiveChain()` definition is placed in header, why `ActiveChainstate()` definition is not placed here too?",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438599015,438599015,src/validation.h
hebasto,2020-06-11 08:18:44,"The code that actually rejects tx-inv messages https://github.com/bitcoin/bitcoin/blob/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/src/net_processing.cpp#L2584-L2586\n\ncontains `fImporting` and `fReindex`.\n\nShould block importing and reindexing be considered as well here?",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438620003,438620003,src/net_processing.cpp
MarcoFalke,2020-06-11 10:52:14,"`filterRounder` has a fast random context, which is not const. Calling `round` on it will change the state.",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438701542,438701542,src/net_processing.cpp
MarcoFalke,2020-06-11 11:03:35,To minimize the diff and aid review,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438706865,438706865,src/validation.h
MarcoFalke,2020-06-11 11:11:43,`IsInitialBlockDownload` *does* consider when blocks are imported,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438710354,438710354,src/net_processing.cpp
rajarshimaitra,2020-06-11 12:55:26,What is the purpose of fee rounder and why it will return 974 and 1071? ,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438760419,438760419,src/test/policy_fee_tests.cpp
MarcoFalke,2020-06-11 13:09:16,"There are privacy concerns with deanonymizing a node by the fact that it is broadcasting identifying information about its mempool min fee. To help ameliorate this concern, the implementation quantizes the filter value broadcast with a small amount of randomness, in addition, the messages are broadcast to different peers at individually randomly distributed times.\n\nSource: https://github.com/b",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438768358,438768358,src/test/policy_fee_tests.cpp
sipa,2020-06-11 18:17:52,"Uh, that means it needs a mutex (or very clearly stated assumptions that no two PeerLogicValidation objects can exist that could be accessed from separate threads).",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r438983005,438983005,src/net_processing.cpp
MarcoFalke,2020-06-11 18:52:22,This seems unrelated to the changes here. Filed under a new issue: #19254,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r439001147,439001147,src/net_processing.cpp
sipa,2020-06-11 18:53:48,"Cool, thanks. It's indeed unrelated; no need to address it here.",https://github.com/bitcoin/bitcoin/pull/19204#discussion_r439001901,439001901,src/net_processing.cpp
jonatack,2020-06-15 08:41:06,fa3b6974 I think the commit message would be clearer if it stated that `!fImporting && !fReindex` can be removed here because they are checked in `IsInitialBlockDownload` which returns true if `fImporting || fReindex`,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r440018606,440018606,src/net_processing.cpp
MarcoFalke,2020-06-15 10:21:27,I keep my commit messages as brief as possible and try to only include meta information that can not be derived from the raw source code. My goal is to encourage reviewers to give closer looks instead of trusting the commit message.,https://github.com/bitcoin/bitcoin/pull/19204#discussion_r440076762,440076762,src/net_processing.cpp
