DrahtBot,2021-08-08 23:14:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22798](https://github.com/bitcoin/bitcoin/pull/22798) (doc: Fix RPC result documentation by MarcoFalke)\n* [#22796](http",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-894870725,894870725,
darosior,2021-08-09 08:32:44,"> my main concern is that existing applications/users might currently rely on bip125-replaceable for this type of behavior\n\nIf they rely on this, then they are already broken (as demonstrated by CVE-2021-31876). This is the point of this PR actually, and i would argue it is actually a bugfix.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-895044235,895044235,
mjdietzx,2021-08-11 03:38:31,">If they rely on this, then they are already broken (as demonstrated by CVE-2021-31876). This is the point of this PR actually, and i would argue it is actually a bugfix.\n\nI'm specifically referring to this comment in `MemPoolAccept::PreChecks`:\n> // Applications relying on first-seen mempool behavior should\n   // check all unconfirmed ancestors; otherwise an opt-in ancestor\n   // might ",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-896474627,896474627,
Talkless,2021-08-11 14:16:01,Is this commit message: `since we don't need the mempool anymore since we don't need the mempool anymore..` OK..?,https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-896865164,896865164,
darosior,2021-08-20 09:44:04,"> I think it would be better to add a new RPC field ""replaceable"" (since it's not really BIP125) to return this as a bool result\n\nGood call. Done in a50a332921c74a0f1fc51b097f8b5beca09a1b07.\n\nAlso applied your and @Talkless 's comments.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-902572294,902572294,
darosior,2021-08-21 22:15:40,"@glozow thanks for the test, included it. Also addressed (2 of) your nits.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-903182666,903182666,
mjdietzx,2021-08-25 15:52:15,"+1 to @rajarshimaitra - I think this approach has merit, but wouldn't we want to update the BIP (and have a review/discussion there) before we make this implementation change (which in my view cements Bitcoin core's current behavior that is inconsistent with BIP 125)? To me it seems we need to establish if RBF inherited signaling is a worthwhile feature - if it's not why wouldn't we update the BIP",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-905642614,905642614,
jnewbery,2021-08-26 13:43:23,"> The purpose of having a standard is that everybody can follow same behavior. So why not just fix the behaviour instead of trying to fix the reporting?\n\n@rajarshimaitra - as discussed in PR review club yesterday (https://bitcoincore.reviews/22665), BIP125 is not a ""standard"". It was intended to document the implemented behaviour in Bitcoin Core, but that behaviour was misdocumented and review",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906426413,906426413,
MarcoFalke,2021-08-26 13:58:12,"> Keep in mind, we also have the option of supporting inherited signaling and making bitcoin core adhere to BIP 125 exactly, which I do in #22698\n\nI think long term there is no prospect that BIP 125 will be adhered to exactly, so I think removing the `replacable-125` field (replacing it with a `replaceable` field) is the right move regardless.\n\nLonger term we can hopefully do full-rbf or a",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906438450,906438450,
MarcoFalke,2021-08-26 13:59:42,nit: Maybe remove the 125 line from https://github.com/bitcoin/bitcoin/blob/master/doc/bips.md in this pr?,https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906439660,906439660,
darosior,2021-08-26 14:06:21,"Addressed the documentation comment to say that the two fields return exactly the same info, and removed BIP125 from the list of implemented BIPs.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906445130,906445130,
michaelfolkson,2021-08-26 14:39:28,"> BIP125 is not a ""standard""\n\nThe [BIP](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki) type is ""Type: Standards Track"". So to say the BIP was not intended as a ""standard"" is dubious. Removing references to BIP125 in Core makes sense if BIP125 is considered final and Core comes to the collective judgement that not following the wording of the BIP is the optimal path.\n\n> If ",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906472426,906472426,
michaelfolkson,2021-08-26 15:03:32,"> If Core doesn't follow BIP125, I think that can cause downstream trouble for wallets (especially LN) who rely on core's result on transaction replacements.\n\nPerhaps worth informing the bitcoin-dev mailing list before this or #22698 is merged? Either Core isn't following the BIP (this PR) or the behavior within Core is going to change (#22698).\n\nInteresting observation from @pinheadmz on ",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906492407,906492407,
MarcoFalke,2021-08-26 15:16:43,"> Perhaps worth informing the bitcoin-dev mailing list\n\nThis was already done as part of announcing the CVE",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906503716,906503716,
michaelfolkson,2021-08-26 15:24:34,"> This was already done as part of announcing the CVE\n\nThe approach that Core would be taking to address the discrepancy between the BIP and the Core implementation surely wasn't?",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906510212,906510212,
michaelfolkson,2021-08-26 16:54:22,"> I don't think this is tricky at all.\n\nUnder the assumption that Core will maintain its current mempool behavior (versus changing it to meet the BIP wording because that is deemed superior logic) I agree it isn't tricky. But making that assumption in the first place seems tricky to me. A short term stopgap with minimal code changes in anticipation of full RBF or a more invasive code change fo",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906579175,906579175,
MarcoFalke,2021-08-26 18:06:30,"> Fixes #22209, kinda followup of #21946.\n\nDoes it really fix #22209? The new `replacable` field still doesn't accurately reflect whether a transaction can be replaced by a higher fee tx. See #22809. Both fields (the newly added one and the removed one in this pull) are needed to say that. And for users to interpret the fields for practical purposes, they will also need to know who controls th",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-906627875,906627875,
darosior,2021-08-27 11:28:16,"> Does it really fix #22209? The new replacable field still doesn't accurately reflect whether a transaction can be replaced by a higher fee tx.\n\nThe `replaceable` field does reflect whether a transaction signals for RBF. Maybe it'd be wiser that I update the documentation to explicitly state it, rather than maybe implying (i don't parse it like that but maybe it could be confused as such, idk",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-907133507,907133507,
MarcoFalke,2021-08-27 11:55:08,"> !replaceable is an assurance that ""your transaction won't be evicted not matter what"" which we of course can't provide.\n\nI know that the new field doesn't do that. My point was that with the old field, you could see `!bip125-replaceable` and deduce that with the state of the blockchain at the time of the call and the policy rules of your node, the tx won't be replaced by another transaction ",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-907146504,907146504,
MarcoFalke,2021-08-27 12:00:49,"> However i'm curious what should be done to fix #22209.\n\nI have no idea what is needed to fix the issue. Maybe the reason should be reported as an enum? #16490?\n\nThe states could be:\n* opt-in-signal\n* rbf-inheritance\n* (full-rbf)\n* (timeout-rbf)\n* ...\n\nThe ones in braces are for not-(yet) Bitcoin Core policies.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-907149423,907149423,
darosior,2021-08-29 12:40:16,Fixed the bad english in the `bip125-replaceable` doc and removed needless includes in the fuzz target after @jnewbery 's review. Thanks!,https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-907785127,907785127,
michaelfolkson,2021-08-30 10:23:17,"I think the discussion on the Approach (N)ACK part of this PR and comparing the approaches of #22665 versus #22698 has been weak and almost dismissive (the BIP isn't a standard etc). In my view @mjdietzx  @rajarshimaitra have a valid perspective including in @mjdietzx's case coding up and opening an alternative PR. \n\n@laanwj said on IRC:\n\n> There are no other mempool policy implementations",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-908226961,908226961,
michaelfolkson,2021-08-30 10:36:18,"Great comment too earlier from @glozow on this PR (which was deleted but I don't think it should have been)\n\n> I don't think this is tricky at all. Not thinking about the BIP while reviewing this PR:\n>\n> In our mempool code, a transaction that doesn't signal RBF is not opting in. IsRBFOptIn returns a result that is inconsistent with what our mempool will do. Since the RPC code uses IsRBFOp",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-908234548,908234548,
darosior,2021-09-01 07:30:10,Rebased after #22796 merge.,https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910016744,910016744,
MarcoFalke,2021-09-01 14:28:25,"I think there is a difference between ""This tx can be evicted due to mempool size if there are 300 MB worth of txs on top of it"" and ""This tx can be replaced by a single tx that pays a higher fee than the tx(s) it evicts"".\n\nI think it makes sense to distinguish the mempool removal reasons, as it is done internally in the code as well:\n\n```cpp\nenum class MemPoolRemovalReason {\n    EXPIR",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910341097,910341097,
darosior,2021-09-01 14:35:32,"Sigh. Removal reason has *nothing* to do with this PR.\n\nI have no intention to continue tweaking the RPC code nor keeping up with your nitpicks, i initially picked this up because the current interface is *wrong* and *misleading* hence potentially dangerous for downstream users. But as you wish, i guess.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910347497,910347497,
darosior,2021-09-01 14:40:53,"Thanks to everyone who helped moving this forward. This is up for grabs, i guess.",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910352212,910352212,
MarcoFalke,2021-09-01 14:59:42,"> Sigh. Removal reason has nothing to do with this PR.\n\nThis was a reply to the previous comment (https://github.com/bitcoin/bitcoin/pull/22665#pullrequestreview-743825789), which mentioned that txs can be evicted from the mempool for reaching the size limit.\n\n> But as you wish, i guess.\n\nI hope you didn't close this pull request because *I* left a comment with a concern (which is not ",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910369529,910369529,
darosior,2021-09-02 12:17:03,"@MarcoFalke sorry for overreacting.\n\n> I also think that the interface proposed in this pull request isn't crystal clear about the fee replacability status of the tx\n\nOk, then we could go for the minimal fix (which i initially proposed, to stop returning `""yes""`  or `""unknown""` if the transaction is not replaceable), and introduce the new interface in a following PR?\n\nRegarding the int",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-911610362,911610362,
MarcoFalke,2021-09-02 13:17:30,">  reporting that it signals by inheritance while we don't implement this rule sounds confusing to me.\n\nThe rule isn't implemented *fully*, but surely is implemented *partially* in Bitcoin Core. Bitcoin Core simply has the additional requirement that an rbf-signalling parent must be replaced in the same instance.\n\nNot implementing the rule (or rather implementing the inverse of the rule) w",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-911672532,911672532,
michaelfolkson,2021-11-29 13:02:00,"For the benefit of reviewers this PR was [NACKed](https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-910341097) by @MarcoFalke and it appears that @glozow is now [comfortable](https://github.com/bitcoin/bitcoin/pull/22698#issuecomment-975848860) with the approach taken in #22698 which was earlier seen as a competing PR.\n\nThis PR is currently closed but I think it is more important we g",https://github.com/bitcoin/bitcoin/pull/22665#issuecomment-981612792,981612792,
mjdietzx,2021-08-08 18:41:58,"Note: because `bip125-replaceable` can no longer be ""unknown"", we can probably improve the api here in a later PR by changing the type of this field from `STR` to `BOOL`",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r684813415,684813415,src/wallet/rpcwallet.cpp
mjdietzx,2021-08-08 19:43:39,"On second thought, I think we should change the type of this ret val in this PR. Because the underlying behavior changes introduced warrant a deprecation process imo, and changing the type here will have the added benefit of forcing any applications/users affected by this change to at least look at it (instead of having something change beneath their feet w out knowing it)",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r684820246,684820246,src/wallet/rpcwallet.cpp
darosior,2021-08-09 08:35:04,"It could be improved, but would be a breaking change. I'd like to keep this PR only a bugfix and not break the API there.",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r685007476,685007476,src/wallet/rpcwallet.cpp
glozow,2021-08-11 13:00:45,Don't think this needs to be included?,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r686807271,686807271,src/node/interfaces.cpp
Talkless,2021-08-11 14:23:45,nit: `rbfStatus` now can be const due to PR changes.,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r686882470,686882470,src/wallet/rpcwallet.cpp
glozow,2021-08-20 10:37:44,"Include PR number?\n```suggestion\n  sticking to what is currently enforced by the mempool. (#22665)\n```",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r692847226,692847226,doc/release-notes.md
glozow,2021-08-20 10:40:37,"```suggestion\n           {RPCResult::Type::BOOL, ""replaceable"", ""Whether this transaction could be replaced by a conflicting one using replace-by-fee""}};\n```",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r692848867,692848867,src/wallet/rpcwallet.cpp
glozow,2021-08-20 10:42:06,nit in a50a332921: perhaps calling it `bip125-signaling` would be clearer,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r692849632,692849632,src/wallet/rpcwallet.cpp
MarcoFalke,2021-08-20 13:21:33,This is no longer true?!,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r692941139,692941139,src/wallet/rpcwallet.cpp
darosior,2021-08-21 22:15:47,"Wow, thanks. Should have paid more attention to the other part of the help line..",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693407591,693407591,src/wallet/rpcwallet.cpp
darosior,2021-08-21 22:15:49,"I prefer `bip125`, it's shorter and i think clear enough: `bip125` is only about signaling (it's even in the title) so it seems redundant",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693407593,693407593,src/wallet/rpcwallet.cpp
MarcoFalke,2021-08-22 07:19:32,"```suggestion\n    RPCResult{RPCResult::Type::BOOL, ""bip125-replaceable"", ""Identical to 'replacable' field. Does *not* return the BIP125 (replace-by-fee) status (DEPRECATED. Returned only if config option 'deprecatedrpc=bip125' is set)""},\n```\nthe field does *not* return the bip125 status, so at least the docs should say that (or maybe the field be removed completely)\n",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693456234,693456234,src/rpc/blockchain.cpp
darosior,2021-08-22 08:33:59,"Removed the mention in the doc, i think we should still keep the deprecation period.\n```diff\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\nindex 337a10294b..18ab787f46 100644\n--- a/src/rpc/blockchain.cpp\n+++ b/src/rpc/blockchain.cpp\n@@ -477,7 +477,7 @@ static std::vector<RPCResult> MempoolEntryDescription() { return {\n         {RPCResult{RPCResult::Type::STR_HEX, ""tran",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693465648,693465648,src/rpc/blockchain.cpp
glozow,2021-08-23 11:49:03,Is it worth keeping `bip125-replaceable` returning the correct bip125 status for 1 release and then removing all the logic later?,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693900860,693900860,src/rpc/blockchain.cpp
glozow,2021-08-23 11:49:22,Fair!,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693901062,693901062,src/wallet/rpcwallet.cpp
darosior,2021-08-23 11:51:03,I think we should get rid of the misleading logic as soon as possible.,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r693902144,693902144,src/rpc/blockchain.cpp
glozow,2021-08-25 11:33:40,"Nit: it would be nice if e4c04c0409cd734d5b02997cb190e6c383d39f11 were split into 2 commits (1) eliminate ""unknown"" and (2) refactor to remove `RBFTransactionState`.",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r695664078,695664078,src/policy/rbf.h
MarcoFalke,2021-08-25 12:20:53,"I'd still prefer if this said that the two fields return exactly the same info. This will hopefully encourage users to use the non-deprecated without using `deprecatedrpc` at all.\n\nAlso, it will avoid confusion as to what the difference is between the two fields.",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r695696530,695696530,src/rpc/blockchain.cpp
darosior,2021-08-26 14:02:16,I tried to do that in the first place but it's messy and makes both commits non-atomics :/,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696661923,696661923,src/policy/rbf.h
jnewbery,2021-08-26 14:28:17,"lots more unused includes here:\n\n```diff\ndiff --git a/src/test/fuzz/rbf.cpp b/src/test/fuzz/rbf.cpp\nindex 7c5d9bb95d..dcc1d23b8a 100644\n--- a/src/test/fuzz/rbf.cpp\n+++ b/src/test/fuzz/rbf.cpp\n@@ -3,17 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <primitives/transaction.h>\n-#include <sync.h>\n #include <test/fuzz/FuzzedDataProvi",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696686488,696686488,src/test/fuzz/rbf.cpp
jnewbery,2021-08-26 14:31:41,"> returns the same value as 'replaceable'\n\nThis isn't true. `bip125-replaceable` returns ""yes""/""no"". `replaceable` returns ""true""/""false"".",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696689754,696689754,src/wallet/rpcwallet.cpp
jnewbery,2021-08-26 14:34:19,"Would it be better to document the difference between the implementation and BIP125, rather than remove this entirely?",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696692155,696692155,doc/bips.md
MarcoFalke,2021-08-26 14:46:48,Maybe a separate `doc/transaction-relay-policy.md` would be better suited?,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696704048,696704048,doc/bips.md
MarcoFalke,2021-08-26 14:47:53,`#include <test/fuzz/fuzz.h>` is needed for `FUZZ_TARGET`,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696705075,696705075,src/test/fuzz/rbf.cpp
jnewbery,2021-08-26 14:52:08,ah oops. Thanks @MarcoFalke.,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696709049,696709049,src/test/fuzz/rbf.cpp
jnewbery,2021-08-26 15:25:48,"I think it'd be better to have it outside the main bitcoin core repository, since the review/maintenance of documentation is different from code. https://github.com/bitcoin-core/bitcoin-devwiki/wiki seems like the right place to me.",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696739975,696739975,doc/bips.md
MarcoFalke,2021-08-26 15:38:00,"Policy is versioned, as each major version of Bitcoin Core ships with different policy rules, so it would be good to also see how policy changed over time. Obviously this is also possible in the wiki, but doing it in source code would make it possible to atomically update the docs with the code changes.",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696751153,696751153,doc/bips.md
glozow,2021-08-26 15:51:27,"> doing it in source code would make it possible to atomically update the docs with the code changes.\n\nOh good point :O",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696763034,696763034,doc/bips.md
jnewbery,2021-08-26 16:11:23,Let's take the discussion elsewhere. It seems quite tangential to this PR.,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696779814,696779814,doc/bips.md
MarcoFalke,2021-08-26 16:29:53,#22806,https://github.com/bitcoin/bitcoin/pull/22665#discussion_r696794420,696794420,doc/bips.md
glozow,2021-09-01 11:52:59,"in ca54223954a190590455d50ddfceeb59cdfbf33c _rbf: remove RBFTransactionState enum_:\n\nI can see why you're removing these lines, but I'm not really sure if we need to fuzz a function that just iterates through the nSequences of a transaction... maybe it'd be better to delete src/test/fuzz/rbf.cpp? If we want a test for `SignalsOptInRBF()`, perhaps a unit test would suffice?",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r700139628,700139628,src/test/fuzz/rbf.cpp
glozow,2021-09-01 12:07:59,"In 26c7fc0c38 _rpc: deprecate 'bip125-replaceable' in favour of 'replaceable'_\n\nCould you grab this via the `Chain` interface, i.e. call `chain.rpcEnableDeprecated(""bip125"")` instead of moving `IsDeprecatedRPCEnabled()` to util? Or is it better to do it this way and take the opportunity to remove `rpcEnableDeprecated` by changing [this one](https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879d",https://github.com/bitcoin/bitcoin/pull/22665#discussion_r700149463,700149463,src/wallet/rpcwallet.cpp
