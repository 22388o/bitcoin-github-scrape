[
  {
    "sha": "d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDI1YmMwMDZmYzQ4NTMxNGI3YmE0YzNlZTlmYzBkNDZjYzc2MGI0",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-07-19T09:30:31Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T06:23:29Z"
      },
      "message": "rbf: don't report txs that don't explicitly signal replaceability\n\nAs disclosed by CVE-2021-31876, the mempool acceptance logic doesn't\nimplement BIP125's inheritance rule.\nHowever, we were still mistakenly reporting transactions that don't\nexplicitly signal for RBF as being replaceable.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "2d4d40cb6447fb72ded418cc67062a770a6fd962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d4d40cb6447fb72ded418cc67062a770a6fd962"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvHGEACgkQ4T/BRc0/\nQwSLvQv/aThXS2iI184WMUsZ0G1QBvfHA0OgLPp50pqx9jJSvQ3DfPOLwJXsV87t\n6+0iadBRQ+54QBpR4k4rKaByxjRydkE/IjA1ozRQcwOU6gf/r5ua/BrJi89hNiRH\nh6hvyL762hKuLvTegmVcDSA0fcuNXn9p1URAE3lBlr48YdVaATITztUGDbxe6O24\nAlTJMzpF4UAa1dfBKldNd1znicLcUOdZNHBYctshcFt8Ihyd+K2TBGunYrWtwGG7\n+yV8mF9j0gfYkLYLj8RzMXM3Huo9eI5Ns/X/CV8X2yYdkIsszogEjMPFOZB1YXPB\nSSuACAfwsBnXxLnl3KMZ5/dhmmOeexj8m8KXREMMVxVWOppsdV572o1KMehosiqk\nWEk44vpFzlcWhGZxy9mVLP9sXyfuW6OKC6QmdP3k3pFXlrYDypGxIEBmxwMi4LqD\nrogOZaF3s15Ft82U7XnzYqrkWTkEDSrLeVVgHS6RJS7J7nUd5bVBTxxescLMnvXz\nCBeba8by\n=baDc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d4d40cb6447fb72ded418cc67062a770a6fd962\nparent 81f4a3e84d6f30e7b12a9605dabc3359f614da93\nauthor Antoine Poinsot <darosior@protonmail.com> 1626687031 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630477409 +0200\n\nrbf: don't report txs that don't explicitly signal replaceability\n\nAs disclosed by CVE-2021-31876, the mempool acceptance logic doesn't\nimplement BIP125's inheritance rule.\nHowever, we were still mistakenly reporting transactions that don't\nexplicitly signal for RBF as being replaceable.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81f4a3e84d6f30e7b12a9605dabc3359f614da93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81f4a3e84d6f30e7b12a9605dabc3359f614da93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81f4a3e84d6f30e7b12a9605dabc3359f614da93"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 5,
      "deletions": 17
    },
    "files": [
      {
        "sha": "45e8c24ac3bc60e96f9661d90a1ea408572aec0c",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
        "patch": "@@ -26,18 +26,6 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n         return RBFTransactionState::UNKNOWN;\n     }\n \n-    // If all the inputs have nSequence >= maxint-1, it still might be\n-    // signaled for RBF if any unconfirmed parents have signaled.\n-    uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n-    std::string dummy;\n-    CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n-    pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n-\n-    for (CTxMemPool::txiter it : setAncestors) {\n-        if (SignalsOptInRBF(it->GetTx())) {\n-            return RBFTransactionState::REPLACEABLE_BIP125;\n-        }\n-    }\n     return RBFTransactionState::FINAL;\n }\n "
      },
      {
        "sha": "5da1a2c3e0fb13034ca6a42ef0c61a1fd57555dd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
        "patch": "@@ -597,8 +597,8 @@ def test_no_inherited_signaling(self):\n             fee_rate=Decimal('0.01'),\n         )\n \n-        # Reports true due to inheritance\n-        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+        # Reports false due to inheritance not being implemented\n+        assert_equal(False, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n \n         replacement_child_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],"
      },
      {
        "sha": "0ba7f7a6e34e958144006df923e9d7756fadf9c4",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
        "patch": "@@ -170,7 +170,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n-        # that does.\n+        # that does. It does not inherit signaling.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_3)\n         inputs = [{\"txid\": txid_3, \"vout\": utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n@@ -179,9 +179,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert not is_opt_in(self.nodes[1], txid_4)\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"no\"})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"no\"})\n \n         self.log.info(\"Test tx with unknown RBF state (bip125-replaceable=unknown)\")\n         # Replace tx3, and check that tx4 becomes unknown"
      }
    ]
  },
  {
    "sha": "ca54223954a190590455d50ddfceeb59cdfbf33c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTU0MjIzOTU0YTE5MDU5MDQ1NWQ1MGRkZmNlZWI1OWNkZmJmMzNj",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-07-19T13:00:41Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T07:21:22Z"
      },
      "message": "rbf: remove RBFTransactionState enum\n\nThe enum was only needed for the \"unknown\" RBF state of a transaction\nwhen we can't fetch its ancestors. Since we don't actually implement\ninherited RBF signaling, the replaceability of a transaction is only a\nfunction of itself and cannot be unknown.\n\nThis also does a bit of cleanup, as there is no need for the RBF check\nto be part of the node interface since we don't need the mempool anymore..\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "5993ee492f99fd0603639813bfa6735f989fadae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5993ee492f99fd0603639813bfa6735f989fadae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca54223954a190590455d50ddfceeb59cdfbf33c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvKfQACgkQ4T/BRc0/\nQwQIzQv+P6wSK+zPpXyS7UbxUkYjlLcN5QVq+g7bnNnvK3+ZHH4PEUNWjOSxtAo7\nhorOhPhuxqUwdRQCbxr3F0Xw5becQKhp34owd9uoGOeymkKiPybR5mPE8olWJirK\nsR7o3odQuPJGgQ/+Sn0i8DH6QcnOUkYiJ62EK1u8Y2VWzpgCcCZ7CkFhGOXjr6Pv\nUzCGRhYJxMxVGWqd+YQpFsWGaUjcdNxszP4n0ktfrYOUilfvMlZXtAXbUgOrVPMC\nZhf4IY4zGlcexjmuwvIK0YbhoMwk4wWF53Dz9Foe++/D+I0ZkjEh3Xi4bn5ndQ0J\n0WMZLzLTYjd/Sp7MLkK4EHaa+cFkhcpUs7azJdwoEJMn/BhHcYRdMhjP0CM4vdc2\ndz4cBghlTqD+fasCrd8Q2ughIp44DxlJzli10taB6yyrPZirmd9zUv1aerFTneQB\nk2X/qYcyOyt/97dSScP7scuVpdxssTkEAEbgByLIuC2SokPzskto6hIuFI4/wIRF\nihGlwJyj\n=v1M7\n-----END PGP SIGNATURE-----",
        "payload": "tree 5993ee492f99fd0603639813bfa6735f989fadae\nparent d425bc006fc485314b7ba4c3ee9fc0d46cc760b4\nauthor Antoine Poinsot <darosior@protonmail.com> 1626699641 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630480882 +0200\n\nrbf: remove RBFTransactionState enum\n\nThe enum was only needed for the \"unknown\" RBF state of a transaction\nwhen we can't fetch its ancestors. Since we don't actually implement\ninherited RBF signaling, the replaceability of a transaction is only a\nfunction of itself and cannot be unknown.\n\nThis also does a bit of cleanup, as there is no need for the RBF check\nto be part of the node interface since we don't need the mempool anymore..\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca54223954a190590455d50ddfceeb59cdfbf33c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca54223954a190590455d50ddfceeb59cdfbf33c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca54223954a190590455d50ddfceeb59cdfbf33c/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d425bc006fc485314b7ba4c3ee9fc0d46cc760b4"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 10,
      "deletions": 118
    },
    "files": [
      {
        "sha": "235f67d3665a9005d64b2f9ee36861e9858a122b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -12,7 +12,6 @@\n #include <core_io.h>\n #include <key_io.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/sign.h>"
      },
      {
        "sha": "e08316beaabc44b3c6b641c48516acabdfbbf85b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -159,9 +159,6 @@ class Chain\n     //! the height range from min_height to max_height, inclusive.\n     virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, std::optional<int> max_height = {}) = 0;\n \n-    //! Check if transaction is RBF opt in.\n-    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n-\n     //! Check if transaction is in mempool.\n     virtual bool isInMempool(const uint256& txid) = 0;\n "
      },
      {
        "sha": "2afb2a4d1e63814adfe96a8fb9623a57685d1a9b",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -26,7 +26,6 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <policy/settings.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n@@ -545,12 +544,6 @@ class ChainImpl : public Chain\n         }\n         return false;\n     }\n-    RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n-    {\n-        if (!m_node.mempool) return IsRBFOptInEmptyMempool(tx);\n-        LOCK(m_node.mempool->cs);\n-        return IsRBFOptIn(tx, *m_node.mempool);\n-    }\n     bool isInMempool(const uint256& txid) override\n     {\n         if (!m_node.mempool) return false;"
      },
      {
        "sha": "7fd6ef2925b00fd42211fea31b88ffd6fc76c6c5",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -6,34 +6,6 @@\n \n #include <policy/settings.h>\n #include <tinyformat.h>\n-#include <util/moneystr.h>\n-#include <util/rbf.h>\n-\n-RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n-{\n-    AssertLockHeld(pool.cs);\n-\n-    CTxMemPool::setEntries setAncestors;\n-\n-    // First check the transaction itself.\n-    if (SignalsOptInRBF(tx)) {\n-        return RBFTransactionState::REPLACEABLE_BIP125;\n-    }\n-\n-    // If this transaction is not in our mempool, then we can't be sure\n-    // we will know about all its inputs.\n-    if (!pool.exists(tx.GetHash())) {\n-        return RBFTransactionState::UNKNOWN;\n-    }\n-\n-    return RBFTransactionState::FINAL;\n-}\n-\n-RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n-{\n-    // If we don't have a local mempool we can only check the transaction itself.\n-    return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n-}\n \n bool GetEntriesForConflicts(const CTransaction& tx,\n                             CTxMemPool& m_pool,"
      },
      {
        "sha": "46327b64854c30385985e531eb09877f47be2b0e",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -11,30 +11,6 @@\n  * mempool conflicts and their descendants. */\n static constexpr uint32_t MAX_BIP125_REPLACEMENT_CANDIDATES{100};\n \n-/** The rbf state of unconfirmed transactions */\n-enum class RBFTransactionState {\n-    /** Unconfirmed tx that does not signal rbf and is not in the mempool */\n-    UNKNOWN,\n-    /** Either this tx or a mempool ancestor signals rbf */\n-    REPLACEABLE_BIP125,\n-    /** Neither this tx nor a mempool ancestor signals rbf */\n-    FINAL,\n-};\n-\n-/**\n- * Determine whether an unconfirmed transaction is signaling opt-in to RBF\n- * according to BIP 125\n- * This involves checking sequence numbers of the transaction, as well\n- * as the sequence numbers of all in-mempool ancestors.\n- *\n- * @param tx   The unconfirmed transaction\n- * @param pool The mempool, which may contain the tx\n- *\n- * @return     The rbf state\n- */\n-RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n-RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n-\n /** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be"
      },
      {
        "sha": "0c049ad9576158ebf2f5b006463f70c980715634",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -25,7 +25,6 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -35,6 +34,7 @@\n #include <txdb.h>\n #include <txmempool.h>\n #include <undo.h>\n+#include <util/rbf.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -531,15 +531,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     info.pushKV(\"spentby\", spent);\n \n     // Add opt-in RBF status\n-    bool rbfStatus = false;\n-    RBFTransactionState rbfState = IsRBFOptIn(tx, pool);\n-    if (rbfState == RBFTransactionState::UNKNOWN) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction is not in mempool\");\n-    } else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125) {\n-        rbfStatus = true;\n-    }\n-\n-    info.pushKV(\"bip125-replaceable\", rbfStatus);\n+    info.pushKV(\"bip125-replaceable\", SignalsOptInRBF(tx));\n     info.pushKV(\"unbroadcast\", pool.IsUnbroadcastTx(tx.GetHash()));\n }\n "
      },
      {
        "sha": "baf096cb404e07ba431ee791b6a8a7515096474e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -17,7 +17,6 @@\n #include <node/transaction.h>\n #include <policy/packages.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <psbt.h>\n #include <random.h>"
      },
      {
        "sha": "d229414958e801fe1c91966e75f809ad6d1936b9",
        "filename": "src/test/fuzz/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 28,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/test/fuzz/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/test/fuzz/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rbf.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -2,47 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <policy/rbf.h>\n #include <primitives/transaction.h>\n-#include <sync.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n-#include <txmempool.h>\n+#include <util/rbf.h>\n \n-#include <cstdint>\n #include <optional>\n-#include <string>\n-#include <vector>\n \n FUZZ_TARGET(rbf)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    SetMockTime(ConsumeTime(fuzzed_data_provider));\n     std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n     if (!mtx) {\n         return;\n     }\n-    CTxMemPool pool;\n-    while (fuzzed_data_provider.ConsumeBool()) {\n-        const std::optional<CMutableTransaction> another_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n-        if (!another_mtx) {\n-            break;\n-        }\n-        const CTransaction another_tx{*another_mtx};\n-        if (fuzzed_data_provider.ConsumeBool() && !mtx->vin.empty()) {\n-            mtx->vin[0].prevout = COutPoint{another_tx.GetHash(), 0};\n-        }\n-        LOCK2(cs_main, pool.cs);\n-        pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, another_tx));\n-    }\n     const CTransaction tx{*mtx};\n-    if (fuzzed_data_provider.ConsumeBool()) {\n-        LOCK2(cs_main, pool.cs);\n-        pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx));\n-    }\n-    {\n-        LOCK(pool.cs);\n-        (void)IsRBFOptIn(tx, pool);\n-    }\n+    (void)SignalsOptInRBF(tx);\n }"
      },
      {
        "sha": "688ee8573cd0a122e1e959036b7ddc747d35db6b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -12,7 +12,6 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -22,6 +21,7 @@\n #include <util/fees.h>\n #include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -174,14 +174,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniVa\n     entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n-    std::string rbfStatus = \"no\";\n-    if (confirms <= 0) {\n-        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n-        if (rbfState == RBFTransactionState::UNKNOWN)\n-            rbfStatus = \"unknown\";\n-        else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n-            rbfStatus = \"yes\";\n-    }\n+    const std::string rbfStatus = confirms <= 0 && SignalsOptInRBF(*wtx.tx) ? \"yes\" : \"no\";\n     entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n@@ -1399,7 +1392,7 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n            {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::STR, \"comment\", \"If a comment is associated with the transaction, only present if not empty.\"},\n-           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n                \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n "
      },
      {
        "sha": "03fef4fa38de01cca25034b778a67c9552072b63",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca54223954a190590455d50ddfceeb59cdfbf33c/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca54223954a190590455d50ddfceeb59cdfbf33c/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=ca54223954a190590455d50ddfceeb59cdfbf33c",
        "patch": "@@ -183,32 +183,29 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         self.sync_mempools()\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"no\"})\n \n-        self.log.info(\"Test tx with unknown RBF state (bip125-replaceable=unknown)\")\n-        # Replace tx3, and check that tx4 becomes unknown\n+        # Replace tx3\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN)  # bump the fee\n         tx3_b = tx3_b.serialize().hex()\n         tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, 0)\n         assert is_opt_in(self.nodes[0], txid_3b)\n \n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n \n         self.log.info(\"Test bip125-replaceable status with gettransaction RPC\")\n         for n in self.nodes[0:2]:\n             assert_equal(n.gettransaction(txid_1)[\"bip125-replaceable\"], \"no\")\n             assert_equal(n.gettransaction(txid_2)[\"bip125-replaceable\"], \"no\")\n             assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"yes\")\n             assert_equal(n.gettransaction(txid_3b)[\"bip125-replaceable\"], \"yes\")\n-            assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n+            assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"no\")\n \n         self.log.info(\"Test mined transactions are no longer bip125-replaceable\")\n         self.nodes[0].generate(1)\n         assert txid_3b not in self.nodes[0].getrawmempool()\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n-        assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n+        assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"no\")\n \n if __name__ == '__main__':\n     ListTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "27103f577da50f81b2b85e8eee08929edbf07a94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzEwM2Y1NzdkYTUwZjgxYjJiODVlOGVlZTA4OTI5ZWRiZjA3YTk0",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-08-20T07:52:53Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T07:21:24Z"
      },
      "message": "rpc: move IsDeprecatedRPCEnabled to util/\n\nTo avoid linking against server. For example, using it to deprecate an\nRPC in wallet/rpcwallet would require libbitcoin_wallet to link against\nrpc/server and all its dependencies.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "1026a47d394bb13c089b8886597f3c3e86b830a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1026a47d394bb13c089b8886597f3c3e86b830a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27103f577da50f81b2b85e8eee08929edbf07a94",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvKfQACgkQ4T/BRc0/\nQwRnjgv/SsGH1rSq0KZTIwJvjfUG8ysAy1NubX5+Z3wsFpNB5afMFGiCmoSx8Eot\nWD2jBcbA4OH1IADiS/CftB8Paw8OmBR+li+l0k4Mama8BraOmvA/bANbPF14j9tN\ny2ieyniWNtaurdyAskdh3qC9RXXgxtxsPfPa7qCkVAJdOQgI3YK/Mvb8Xj0fwy4U\nHKVJv7pnQjrE1ZZyAAK+qR0qUO4qOCPTwE81P0mhOZXCIt9HQBoKLnTn5ZTu6BXK\nzsB1EdHGGQxJWvTME/ckVA+ucpDFZXRb1MvpafXpHN0/+u3ZtAFxh4PYSrYMQeIT\ng33KI4SfZ/nn4NcNTt2ol20F5uUUoIMgvswg19e6XZmtnGH3nGTc3HESKdleV7D4\nxyvFP+bVxbENSxXc3vfRx+dwx5Vc4WjnnVdKkR+4SAWm77UHP0HvfzLlNtGgVj6B\namxVa+VxwT6KIUFQ6Kr33EIys4Dfl2YBgvgADNr7d4Bd0yz5k9OEMB9GGWgRZkgb\ns9GMNe80\n=cG+3\n-----END PGP SIGNATURE-----",
        "payload": "tree 1026a47d394bb13c089b8886597f3c3e86b830a7\nparent ca54223954a190590455d50ddfceeb59cdfbf33c\nauthor Antoine Poinsot <darosior@protonmail.com> 1629445973 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630480884 +0200\n\nrpc: move IsDeprecatedRPCEnabled to util/\n\nTo avoid linking against server. For example, using it to deprecate an\nRPC in wallet/rpcwallet would require libbitcoin_wallet to link against\nrpc/server and all its dependencies.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27103f577da50f81b2b85e8eee08929edbf07a94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27103f577da50f81b2b85e8eee08929edbf07a94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27103f577da50f81b2b85e8eee08929edbf07a94/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca54223954a190590455d50ddfceeb59cdfbf33c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca54223954a190590455d50ddfceeb59cdfbf33c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca54223954a190590455d50ddfceeb59cdfbf33c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "cb4413802d4d5db6372d8df889891956b25d7647",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=27103f577da50f81b2b85e8eee08929edbf07a94",
        "patch": "@@ -349,13 +349,6 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-bool IsDeprecatedRPCEnabled(const std::string& method)\n-{\n-    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n-\n-    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n-}\n-\n static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);"
      },
      {
        "sha": "a0d19f5a1fa8a1c04056a289a7714401c8278285",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=27103f577da50f81b2b85e8eee08929edbf07a94",
        "patch": "@@ -166,8 +166,6 @@ class CRPCTable\n     bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n \n-bool IsDeprecatedRPCEnabled(const std::string& method);\n-\n extern CRPCTable tableRPC;\n \n void StartRPC();"
      },
      {
        "sha": "b0e29c0b07bf224148e6036cf9729ec3f53b600d",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=27103f577da50f81b2b85e8eee08929edbf07a94",
        "patch": "@@ -10,6 +10,7 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/system.h>\n #include <util/translation.h>\n \n #include <tuple>\n@@ -20,6 +21,13 @@\n const std::string UNIX_EPOCH_TIME = \"UNIX epoch time\";\n const std::string EXAMPLE_ADDRESS[2] = {\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\"};\n \n+bool IsDeprecatedRPCEnabled(const std::string& method)\n+{\n+    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n+\n+    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n+}\n+\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)"
      },
      {
        "sha": "cd523e8636df728f8a97e882a18bafcbc51d7bd2",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27103f577da50f81b2b85e8eee08929edbf07a94/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=27103f577da50f81b2b85e8eee08929edbf07a94",
        "patch": "@@ -48,6 +48,8 @@ struct UniValueType {\n     UniValue::VType type;\n };\n \n+bool IsDeprecatedRPCEnabled(const std::string& method);\n+\n /**\n  * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n  * the right number of arguments are passed, just that any passed are the correct type."
      }
    ]
  },
  {
    "sha": "26c7fc0c3879da366128195feff1e8b0112c35db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmM3ZmMwYzM4NzlkYTM2NjEyODE5NWZlZmYxZThiMDExMmMzNWRi",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-08-20T09:23:28Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T07:21:25Z"
      },
      "message": "rpc: deprecate 'bip125-replaceable' in favour of 'replaceable'\n\nThis doesn't need to be a string anymore. And mentioning BIP125 is\nconfusing, as we technically don't return the replaceability as defined\nby BIP125 (which includes the inheritance rule).\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "f50ef1f7537bd01aa14d4bbf740b849f8da04f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f50ef1f7537bd01aa14d4bbf740b849f8da04f80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c7fc0c3879da366128195feff1e8b0112c35db",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvKfUACgkQ4T/BRc0/\nQwTOOAwAhGRpIzirJl1iBS6opMhAXIkTbKDiBZsoXJ6cIbSOJpKHuT3jR5jbG7w8\nUFAxqYHc0fso0vRLXU0ifhRPFEki2YLSy6QfhAtJiN2cJNBK7ZuH/ZQV+72wS2Qn\n/KBT5AZo4fLIsrNyWMDYppgvC2Iva/BpnMmG+hRW1Byq5I8Z2GUqp8n1ysYXMjD4\n5D2bzrwGuN0q1CtfyJ0oBUu/Gq5Iqti58VM47U+edAH6iSgVsM37NNOA+JrnKimg\ngKio+mO1RUiaR1DrRI4G33f3WE4cd40lAf10d0pqPHNqqMFKmsmyfYIU3LF+kTNH\nm8q0BhZo7hLe6VdveR9My7DmqEgYijLL1yaDhsiVNGBPziPL6SmRHoFLFEhVO3iO\nr1WzeuSNRQsXe5fgutMSuFhrXN/TuG1ca8pUbgFtOZrjaiH51RgUzWXZ/aeq8WrW\n4KmMg3UWFykQUY8S1s+w7de4VVKpaI7o+yKgIXNn8GucwGORUYuuT2l1bFwPif/m\ncf13kJH5\n=+16d\n-----END PGP SIGNATURE-----",
        "payload": "tree f50ef1f7537bd01aa14d4bbf740b849f8da04f80\nparent 27103f577da50f81b2b85e8eee08929edbf07a94\nauthor Antoine Poinsot <darosior@protonmail.com> 1629451408 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630480885 +0200\n\nrpc: deprecate 'bip125-replaceable' in favour of 'replaceable'\n\nThis doesn't need to be a string anymore. And mentioning BIP125 is\nconfusing, as we technically don't return the replaceability as defined\nby BIP125 (which includes the inheritance rule).\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c7fc0c3879da366128195feff1e8b0112c35db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c7fc0c3879da366128195feff1e8b0112c35db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c7fc0c3879da366128195feff1e8b0112c35db/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27103f577da50f81b2b85e8eee08929edbf07a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27103f577da50f81b2b85e8eee08929edbf07a94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27103f577da50f81b2b85e8eee08929edbf07a94"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 46,
      "deletions": 34
    },
    "files": [
      {
        "sha": "0caaf79106a31886fc2e528af55e130218580b2d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -64,6 +64,11 @@ P2P and network changes\n Updated RPCs\n ------------\n \n+- The `bip125_replaceable` field output by mempool and wallet RPC commands was\n+  misleading (see CVE-2021-31876). It was deprecated in favour of a `replaceable`\n+  boolean field which does not check for the inheritance rule defined by BIP125,\n+  sticking to what is currently enforced by the mempool. (#22665)\n+\n New RPCs\n --------\n "
      },
      {
        "sha": "d208babaa26ec2fb1a86d8bd9444e32779fef2b2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -477,7 +477,8 @@ static std::vector<RPCResult> MempoolEntryDescription() { return {\n         {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"parent transaction id\"}}},\n     RPCResult{RPCResult::Type::ARR, \"spentby\", \"unconfirmed transactions spending outputs from this transaction\",\n         {RPCResult{RPCResult::Type::STR_HEX, \"transactionid\", \"child transaction id\"}}},\n-    RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction could be replaced due to BIP125 (replace-by-fee)\"},\n+    RPCResult{RPCResult::Type::BOOL, \"bip125-replaceable\", \"Whether this transaction could be replaced due to replace-by-fee (DEPRECATED, returns the same value as 'replaceable'. Use this field instead. Returned only if config option 'deprecatedrpc=bip125' is set)\"},\n+    RPCResult{RPCResult::Type::BOOL, \"replaceable\", \"Whether this transaction could be replaced by a conflicting one using replace-by-fee\"},\n     RPCResult{RPCResult::Type::BOOL, \"unbroadcast\", \"Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\"},\n };}\n \n@@ -531,7 +532,9 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     info.pushKV(\"spentby\", spent);\n \n     // Add opt-in RBF status\n-    info.pushKV(\"bip125-replaceable\", SignalsOptInRBF(tx));\n+    const bool rbf_status = SignalsOptInRBF(tx);\n+    info.pushKV(\"replaceable\", rbf_status);\n+    if (IsDeprecatedRPCEnabled(\"bip125\")) info.pushKV(\"bip125-replaceable\", rbf_status);\n     info.pushKV(\"unbroadcast\", pool.IsUnbroadcastTx(tx.GetHash()));\n }\n "
      },
      {
        "sha": "a6fdfdda66d462e40df3522655bc1089b2d6bd52",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -174,8 +174,12 @@ static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniVa\n     entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n-    const std::string rbfStatus = confirms <= 0 && SignalsOptInRBF(*wtx.tx) ? \"yes\" : \"no\";\n-    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n+    const bool signals_rbf = confirms <= 0 && SignalsOptInRBF(*wtx.tx);\n+    entry.pushKV(\"replaceable\", signals_rbf);\n+    if (IsDeprecatedRPCEnabled(\"bip125\")) {\n+        const std::string rbfStatus = signals_rbf ? \"yes\" : \"no\";\n+        entry.pushKV(\"bip125-replaceable\", rbfStatus);\n+    }\n \n     for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n         entry.pushKV(item.first, item.second);\n@@ -1392,8 +1396,8 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n            {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n            {RPCResult::Type::STR, \"comment\", \"If a comment is associated with the transaction, only present if not empty.\"},\n-           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n-               \"may be unknown for unconfirmed transactions not in the mempool\"}};\n+           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no\\\") Whether this transaction could be replaced due to replace-by-fee (DEPRECATED, returns \\\"yes\\\" when 'replaceable' is 'true', \\\"no\\\" when 'replaceable' is false. Use this field instead. Returned only if config option 'deprecatedrpc=bip125' is set)\"},\n+           {RPCResult::Type::BOOL, \"replaceable\", \"Whether this transaction could be replaced by a conflicting one using replace-by-fee\"}};\n }\n \n static RPCHelpMan listtransactions()"
      },
      {
        "sha": "0c8a3870484d9330aabd0367138ba33b081071e8",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -424,7 +424,7 @@ def test_opt_in(self):\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # This transaction isn't shown as replaceable\n-        assert_equal(self.nodes[0].getmempoolentry(tx1a_txid)['bip125-replaceable'], False)\n+        assert_equal(self.nodes[0].getmempoolentry(tx1a_txid)['replaceable'], False)\n \n         # Shouldn't be able to double-spend\n         tx1b = CTransaction()\n@@ -469,7 +469,7 @@ def test_opt_in(self):\n         tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n \n         # This transaction is shown as replaceable\n-        assert_equal(self.nodes[0].getmempoolentry(tx3a_txid)['bip125-replaceable'], True)\n+        assert_equal(self.nodes[0].getmempoolentry(tx3a_txid)['replaceable'], True)\n \n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n@@ -573,7 +573,7 @@ def test_no_inherited_signaling(self):\n             sequence=BIP125_SEQUENCE_NUMBER,\n             fee_rate=Decimal('0.01'),\n         )\n-        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['replaceable'])\n \n         replacement_parent_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n@@ -598,7 +598,7 @@ def test_no_inherited_signaling(self):\n         )\n \n         # Reports false due to inheritance not being implemented\n-        assert_equal(False, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n+        assert_equal(False, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['replaceable'])\n \n         replacement_child_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n@@ -615,7 +615,7 @@ def test_no_inherited_signaling(self):\n         # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n         # See CVE-2021-31876 for further explanations.\n-        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['replaceable'])\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n     def test_replacement_relay_fee(self):"
      },
      {
        "sha": "abcb1970be0e427037efeb9b4c7699be671ac6c5",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -652,7 +652,7 @@ def run_test(self):\n                                  \"amount\":   baz[\"amount\"],\n                                  \"category\": baz[\"category\"],\n                                  \"vout\":     baz[\"vout\"]}\n-        expected_fields = frozenset({'amount', 'bip125-replaceable', 'confirmations', 'details', 'fee',\n+        expected_fields = frozenset({'amount', 'replaceable', 'confirmations', 'details', 'fee',\n                                      'hex', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n         verbose_field = \"decoded\"\n         expected_verbose_fields = expected_fields | {verbose_field}"
      },
      {
        "sha": "72822ca1608783ed5788cc340008f40fc9b3ffa8",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -125,13 +125,13 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n                     return i\n             return None\n \n-        self.log.info(\"Test txs w/o opt-in RBF (bip125-replaceable=no)\")\n+        self.log.info(\"Test txs w/o opt-in RBF (replaceable=false)\")\n         # Chain a few transactions that don't opt in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert not is_opt_in(self.nodes[0], txid_1)\n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"replaceable\": False})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"replaceable\": False})\n \n         # Tx2 will build off tx1, still not opting in to RBF.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_1)\n@@ -148,11 +148,11 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # ...and check the result\n         assert not is_opt_in(self.nodes[1], txid_2)\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"replaceable\": False})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"replaceable\": False})\n \n-        self.log.info(\"Test txs with opt-in RBF (bip125-replaceable=yes)\")\n+        self.log.info(\"Test txs with opt-in RBF (replaceable=true)\")\n         # Tx3 will opt-in to RBF\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n         inputs = [{\"txid\": txid_2, \"vout\": utxo_to_use[\"vout\"]}]\n@@ -165,9 +165,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert is_opt_in(self.nodes[0], txid_3)\n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"replaceable\": True})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"replaceable\": True})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n         # that does. It does not inherit signaling.\n@@ -179,9 +179,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert not is_opt_in(self.nodes[1], txid_4)\n-        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"replaceable\": False})\n         self.sync_mempools()\n-        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"replaceable\": False})\n \n         # Replace tx3\n         tx3_b = tx3_modified\n@@ -193,19 +193,19 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         self.sync_mempools()\n \n-        self.log.info(\"Test bip125-replaceable status with gettransaction RPC\")\n+        self.log.info(\"Test replaceable status with gettransaction RPC\")\n         for n in self.nodes[0:2]:\n-            assert_equal(n.gettransaction(txid_1)[\"bip125-replaceable\"], \"no\")\n-            assert_equal(n.gettransaction(txid_2)[\"bip125-replaceable\"], \"no\")\n-            assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"yes\")\n-            assert_equal(n.gettransaction(txid_3b)[\"bip125-replaceable\"], \"yes\")\n-            assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"no\")\n+            assert_equal(n.gettransaction(txid_1)[\"replaceable\"], False)\n+            assert_equal(n.gettransaction(txid_2)[\"replaceable\"], False)\n+            assert_equal(n.gettransaction(txid_3)[\"replaceable\"], True)\n+            assert_equal(n.gettransaction(txid_3b)[\"replaceable\"], True)\n+            assert_equal(n.gettransaction(txid_4)[\"replaceable\"], False)\n \n-        self.log.info(\"Test mined transactions are no longer bip125-replaceable\")\n+        self.log.info(\"Test mined transactions are no longer replaceable\")\n         self.nodes[0].generate(1)\n         assert txid_3b not in self.nodes[0].getrawmempool()\n-        assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n-        assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"no\")\n+        assert_equal(self.nodes[0].gettransaction(txid_3b)[\"replaceable\"], False)\n+        assert_equal(self.nodes[0].gettransaction(txid_4)[\"replaceable\"], False)\n \n if __name__ == '__main__':\n     ListTransactionsTest().main()"
      },
      {
        "sha": "d3a9dff6ec4b8be93b3e5194e55af4c19cc5d3fa",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c7fc0c3879da366128195feff1e8b0112c35db/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=26c7fc0c3879da366128195feff1e8b0112c35db",
        "patch": "@@ -146,7 +146,7 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             # Ensure transaction exists in the wallet:\n             tx = from_wallet.gettransaction(res[\"txid\"])\n             assert tx\n-            assert_equal(tx[\"bip125-replaceable\"], \"yes\" if replaceable else \"no\")\n+            assert_equal(tx[\"replaceable\"], replaceable)\n             # Ensure transaction exists in the mempool:\n             tx = from_wallet.getrawtransaction(res[\"txid\"], True)\n             assert tx\n@@ -460,10 +460,10 @@ def run_test(self):\n         self.log.info(\"Replaceable...\")\n         res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True, replaceable=True)\n         assert res[\"complete\"]\n-        assert_equal(self.nodes[0].gettransaction(res[\"txid\"])[\"bip125-replaceable\"], \"yes\")\n+        assert_equal(self.nodes[0].gettransaction(res[\"txid\"])[\"replaceable\"], True)\n         res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=True, replaceable=False)\n         assert res[\"complete\"]\n-        assert_equal(self.nodes[0].gettransaction(res[\"txid\"])[\"bip125-replaceable\"], \"no\")\n+        assert_equal(self.nodes[0].gettransaction(res[\"txid\"])[\"replaceable\"], False)\n \n         self.log.info(\"Subtract fee from output\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, subtract_fee_from_outputs=[0])"
      }
    ]
  },
  {
    "sha": "0220b8275f38afa16a5467f15ded317599fdd7f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjIwYjgyNzVmMzhhZmExNmE1NDY3ZjE1ZGVkMzE3NTk5ZmRkN2Yx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-20T10:50:10Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T07:21:25Z"
      },
      "message": "[functional test] deprecated bip125-replaceable field",
      "tree": {
        "sha": "343e6f1324c9a4c4b2f4a2e9d089ddec85dc666a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/343e6f1324c9a4c4b2f4a2e9d089ddec85dc666a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0220b8275f38afa16a5467f15ded317599fdd7f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvKfUACgkQ4T/BRc0/\nQwS6dgv+OzNKoUvR9kc9CX+7fpXAhgoz8BKjq6Fe04MQBcjfpCiZiIcIVohCrmB0\n+MFt/vHUtX17Iuk51jYzGEeLeECzHsPE++yLcOOdsJUP4CMJzsRLxFtlSP3IwMVD\nIvuanuIN2xuPla7SPr85rkfdmJm/PPOibBQ3JHyMnZu6aBGSbOiyBukIW6HM2tbn\nen9pqlSGj6+5EFhQZTYaXToOCKBU6wy3EPlWGI6j8hFQOrh6T1NYRbpw1nWBuA5I\n6epoQ+XCOfrB1PMa4BrqTCHVr9aT5N5fICQhR6G0wgW6QOzeGhvRtCmbcYBRODBR\nQ7ahb4escG0Xe69v33wyK8PwsP3sGGSiIqywMFy83AvIK41fqaH36wlHj7Qkw9gV\nQ1ouktO8WKu06zunWi4xcXDJJJR0idFb4hHW71LCXGYQis9UBQtQrrS7oaGFIHhu\nHkk4chx86yC1usbW+g4RdU/FYIDBWyc9d/Rt5JiTQev2PleLGYgvtyJ5tsrPZ5U0\nE/pbNaQc\n=dZ75\n-----END PGP SIGNATURE-----",
        "payload": "tree 343e6f1324c9a4c4b2f4a2e9d089ddec85dc666a\nparent 26c7fc0c3879da366128195feff1e8b0112c35db\nauthor glozow <gloriajzhao@gmail.com> 1629456610 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630480885 +0200\n\n[functional test] deprecated bip125-replaceable field\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b8275f38afa16a5467f15ded317599fdd7f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0220b8275f38afa16a5467f15ded317599fdd7f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b8275f38afa16a5467f15ded317599fdd7f1/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c7fc0c3879da366128195feff1e8b0112c35db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c7fc0c3879da366128195feff1e8b0112c35db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c7fc0c3879da366128195feff1e8b0112c35db"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 16,
      "deletions": 3
    },
    "files": [
      {
        "sha": "aed3e9758ecdf3d7f0fc9e5ae1241807f99051a3",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0220b8275f38afa16a5467f15ded317599fdd7f1/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0220b8275f38afa16a5467f15ded317599fdd7f1/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=0220b8275f38afa16a5467f15ded317599fdd7f1",
        "patch": "@@ -4,12 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = True\n-        self.extra_args = [[], ['-deprecatedrpc=bumpfee']]\n+        self.extra_args = [[], ['-deprecatedrpc=bip125']]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -23,7 +24,19 @@ def run_test(self):\n         # assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n         # self.nodes[1].generate(1)\n \n-        self.log.info(\"No tested deprecated RPC methods\")\n+        self.log.info(\"Test deprecated fields for RBF signaling\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.wallet.scan_blocks(start=76, num=1)\n+        txid = self.wallet.send_self_transfer(from_node=self.nodes[0])[\"txid\"]\n+        self.sync_all()\n+        node0_entry = self.nodes[0].getmempoolentry(txid)\n+        assert \"replaceable\" in node0_entry\n+        assert \"bip125-replaceable\" not in node0_entry\n+        node1_entry = self.nodes[1].getmempoolentry(txid)\n+        assert \"replaceable\" in node1_entry\n+        assert \"bip125-replaceable\" in node1_entry\n+        assert_equal(node1_entry[\"replaceable\"], node1_entry[\"bip125-replaceable\"])\n+\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzA5MWZhMmUyZjZiYjEwMGQ4YTljNmEwMjA3ZjJmM2Y2MzgyNmI4",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-08-26T14:05:13Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-01T07:21:26Z"
      },
      "message": "doc: remove BIP125 from the list of implemented BIPs\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "eba7eeda50b9df70c5265c7ee36af6a50e69602d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eba7eeda50b9df70c5265c7ee36af6a50e69602d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmEvKfYACgkQ4T/BRc0/\nQwSVYAv/RBc6Tw/oNDs0CGGRVnKE0mQ2c5gJdaBthz5RJvyfXnJ8v6UdFozdFC7z\nR+nt5AUYHKPBsDsuvmAxqr/ys4MwTZ9aP4VbyzUKw/XaqaaETUNMGfgVKZch0z13\n+t+YZYVT+X/eMM7oZ4ca6Io+ZGz4zQjRnCRcPU/bXgM5sKD6niZ+zIZGRXXlNdUq\nuF4yr4W5V+8GwwAhl/fEW+iP0DhaEPEJdAnQFnPrf9jneK3FCW8h4qEL4UuB3jkz\n6m/sjTpQ8vDQ9LgDR2IRp7JpBGbDrZYzFfu53dRdJalFP+Sld+k8DJrr8WgeHEVM\nejWwoyBaWzvN5C0hLMJJi2CfF2zLXAqI1vdkJKctSdbKQWemXAoSlhMRoa3y6/4W\ntflCHHBzU3hjyXHHXFMw5bMH2vSXCq+g+sKOIJfIaP2elpG8oJwk3TVww0JrgAh+\n3D4NX7fwN7ojm+J9MJd+TxYVoShlUCnKfJj01wyLAiPjczQILK7D0XASeEuuTyiG\nCFwqhhUN\n=fhhu\n-----END PGP SIGNATURE-----",
        "payload": "tree eba7eeda50b9df70c5265c7ee36af6a50e69602d\nparent 0220b8275f38afa16a5467f15ded317599fdd7f1\nauthor Antoine Poinsot <darosior@protonmail.com> 1629986713 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1630480886 +0200\n\ndoc: remove BIP125 from the list of implemented BIPs\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0220b8275f38afa16a5467f15ded317599fdd7f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0220b8275f38afa16a5467f15ded317599fdd7f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0220b8275f38afa16a5467f15ded317599fdd7f1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "18406a678bb6d9a6022c78b65fae64dcaddc04c9",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=cc091fa2e2f6bb100d8a9c6a0207f2f3f63826b8",
        "patch": "@@ -32,7 +32,6 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v22.0**):\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n * [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)), and has been *buried* since **v0.19.0** ([PR #16060](https://github.com/bitcoin/bitcoin/pull/16060)).\n * [`BIP 113`](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki): Median time past lock-time calculations have been implemented since **v0.12.1** ([PR #6566](https://github.com/bitcoin/bitcoin/pull/6566)), and has been *buried* since **v0.19.0** ([PR #16060](https://github.com/bitcoin/bitcoin/pull/16060)).\n-* [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)). Enabled by default in the wallet GUI as of **v0.18.1** ([PR #11605](https://github.com/bitcoin/bitcoin/pull/11605))\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n * [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)), defined for mainnet as of **v0.13.1** ([PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)), and *buried* since **v0.19.0** ([PR #16060](https://github.com/bitcoin/bitcoin/pull/16060))."
      }
    ]
  }
]