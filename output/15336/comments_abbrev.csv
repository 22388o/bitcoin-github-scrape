fanquake,2019-02-04T09:51:20Z,"This is currently failing 7/10 of the [Travis tests](https://travis-ci.org/bitcoin/bitcoin/builds/488390905).\n\n> Overall this patch tends to make improvements in speed and memory overhead.\n\nCan you please post your speed and memory benchmarking results.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460187280,460187280,
DrahtBot,2019-02-04T10:48:58Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15294](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15294.html) ([moveonly] wallet: Extract RipeMd160 by Emp",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460203679,460203679,
bvbfan,2019-02-04T15:48:22Z,"> This is currently failing 7/10 of the [Travis tests](https://travis-ci.org/bitcoin/bitcoin/builds/488390905).\n\nCan you check what the problem is, it looks like some cache issue?\n\n> Can you please post your speed and memory benchmarking results.\n\nWhat results you expects, running bench or perf with / without patch ?",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460298260,460298260,
sipa,2019-02-04T18:38:34Z,None of these classes have dynamically allocated memory. A move for them should be identical to a copy. How do you expect that there could be any performance gains?,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460361575,460361575,
bvbfan,2019-02-04T18:58:18Z,"It shouldn't be copy, about me, as i read http://timepp.github.io/doc/cpp14/array.cons.html",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460368437,460368437,
sipa,2019-02-04T19:20:58Z,"@bvbfan Yes, std::array supports moving, but if the contained type cannot be moved more efficiently than copying, moving the array won't be more efficient than copying it either.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460376374,460376374,
bvbfan,2019-02-04T19:55:26Z,"It should use less memory, you have right on that integers have practically no difference on copy vs move, but optimization is still relevant to me, since it's base classes which impact on derived one as well.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460389327,460389327,
sipa,2019-02-04T19:56:22Z,@bvbfan I don't see why the compiled code would be different in any way with this change. ,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460389685,460389685,
practicalswift,2019-02-04T21:37:29Z,"This PR contains a lot of `std::move`:s on trivially-copyable types (`uint256`, `uint160` and `COutPoint`) which don't have any effect.\n\nSame goes for `std::move`:s on const reference arguments.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-460422777,460422777,
bvbfan,2019-02-06T17:29:39Z,"I agree, i use to make it by unique_ptr but in many places it's used like\n```\nmemcpy(&hash, data, sizeof(hash))\n```\nI found some places but not all, some tests segfaults.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-461112150,461112150,
gmaxwell,2019-02-06T21:08:00Z,It isn't obvious to me how this PR makes a material improvement either to the runtime behaviour or the long term maintenance of the codebase.,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-461187785,461187785,
bvbfan,2019-02-07T16:25:22Z,"PR aims to optimize hashes, uints and outpoints by moving. I resolve remaining problems of expecting continuous bytes, in ComputeMerkleRoot double hashing is make by SHA256D64 but in new implementation bytes are not continuous anymore, so i replace it by\n```\n for (std::size_t i = 0, j = 0; i < hashes.size(); i += 2) {\n    hashes[j++] = Hash(hashes[i].begin(), hashes[i].end(),\n             ",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-461497195,461497195,
bvbfan,2019-02-09T07:00:21Z,Rebase to master,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-462020252,462020252,
bvbfan,2019-02-10T07:45:01Z,"Sorry for the flood but some tests fails without a reason, it looks like.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-462111137,462111137,
gmaxwell,2019-02-11T20:36:58Z,NAK. I'm just not seeing a material benefit justifying the expenditure of review efforts.,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-462484676,462484676,
MarcoFalke,2019-02-11T21:19:25Z,Closing for now. This doesn't compile on appveyor and there seems to be disagreement about whether to do this at all. Probably not worth to put in further effort.,https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-462498490,462498490,
bvbfan,2019-02-12T06:30:41Z,"@MarcoFalke, you can see at Travis it compile and most tests pass (some weird) not. I'm not familiar with appveyor but it should be something trivial.\nEdit: I understand that patch became huge, but that was side effect of using memcpy + sizeof + & on object. Also it tries to fix that as well.",https://github.com/bitcoin/bitcoin/pull/15336#issuecomment-462633859,462633859,
