[
  {
    "sha": "bfabb166543e1071747dd1fd85e89f81a49b32b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmFiYjE2NjU0M2UxMDcxNzQ3ZGQxZmQ4NWU4OWY4MWE0OWIzMmIx",
    "commit": {
      "author": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2019-02-04T07:44:23Z"
      },
      "committer": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2019-02-10T06:56:49Z"
      },
      "message": "Enable moving of hashes, uints, outpoints\n\nSigned-off-by: Anthony Fieroni <bvbfan@abv.bg>",
      "tree": {
        "sha": "a232f0a4d2e5b6ab13371c74c6fb773c5ed70b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a232f0a4d2e5b6ab13371c74c6fb773c5ed70b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfabb166543e1071747dd1fd85e89f81a49b32b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfabb166543e1071747dd1fd85e89f81a49b32b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfabb166543e1071747dd1fd85e89f81a49b32b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfabb166543e1071747dd1fd85e89f81a49b32b1/comments",
    "author": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2945492424934fa360f86b116184ee8e34f19d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2945492424934fa360f86b116184ee8e34f19d0a"
      }
    ],
    "stats": {
      "total": 693,
      "additions": 401,
      "deletions": 292
    },
    "files": [
      {
        "sha": "d62940d73107d962826c0fe1ec1d68f2781bad78",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 18,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -13,50 +13,54 @@\n #include <string.h>\n \n template <unsigned int BITS>\n-base_uint<BITS>::base_uint(const std::string& str)\n+base_uint<BITS>::base_uint(const std::string& str) : data(std::make_shared<data_type>())\n {\n-    static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+    static_assert(WIDTH > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n \n     SetHex(str);\n }\n \n template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n {\n-    base_uint<BITS> a(*this);\n-    for (int i = 0; i < WIDTH; i++)\n-        pn[i] = 0;\n+    const base_uint<BITS> a(*this);\n+    auto& an = *a.data;\n+    *this = 0;\n+    auto& pn = *data;\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n         if (i + k + 1 < WIDTH && shift != 0)\n-            pn[i + k + 1] |= (a.pn[i] >> (32 - shift));\n+            pn[i + k + 1] |= (an[i] >> (32 - shift));\n         if (i + k < WIDTH)\n-            pn[i + k] |= (a.pn[i] << shift);\n+            pn[i + k] |= (an[i] << shift);\n     }\n     return *this;\n }\n \n template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n {\n-    base_uint<BITS> a(*this);\n-    for (int i = 0; i < WIDTH; i++)\n-        pn[i] = 0;\n+    const base_uint<BITS> a(*this);\n+    auto& an = *a.data;\n+    *this = 0;\n+    auto& pn = *data;\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n         if (i - k - 1 >= 0 && shift != 0)\n-            pn[i - k - 1] |= (a.pn[i] << (32 - shift));\n+            pn[i - k - 1] |= (an[i] << (32 - shift));\n         if (i - k >= 0)\n-            pn[i - k] |= (a.pn[i] >> shift);\n+            pn[i - k] |= (an[i] >> shift);\n     }\n     return *this;\n }\n \n template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n {\n+    copy();\n+    auto& pn = *data;\n     uint64_t carry = 0;\n     for (int i = 0; i < WIDTH; i++) {\n         uint64_t n = carry + (uint64_t)b32 * pn[i];\n@@ -69,12 +73,14 @@ base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n {\n+    auto& pn = *data;\n     base_uint<BITS> a;\n+    auto& an = *a.data;\n     for (int j = 0; j < WIDTH; j++) {\n         uint64_t carry = 0;\n         for (int i = 0; i + j < WIDTH; i++) {\n-            uint64_t n = carry + a.pn[i + j] + (uint64_t)pn[j] * b.pn[i];\n-            a.pn[i + j] = n & 0xffffffff;\n+            uint64_t n = carry + an[i + j] + (uint64_t)pn[j] * (*b.data)[i];\n+            an[i + j] = n & 0xffffffff;\n             carry = n >> 32;\n         }\n     }\n@@ -88,6 +94,7 @@ base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n     base_uint<BITS> div = b;     // make a copy, so we can shift.\n     base_uint<BITS> num = *this; // make a copy, so we can subtract.\n     *this = 0;                   // the quotient.\n+    auto& pn = *data;\n     int num_bits = num.bits();\n     int div_bits = div.bits();\n     if (div_bits == 0)\n@@ -111,10 +118,11 @@ base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n template <unsigned int BITS>\n int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n {\n+    auto& pn = *data;\n     for (int i = WIDTH - 1; i >= 0; i--) {\n-        if (pn[i] < b.pn[i])\n+        if (pn[i] < (*b.data)[i])\n             return -1;\n-        if (pn[i] > b.pn[i])\n+        if (pn[i] > (*b.data)[i])\n             return 1;\n     }\n     return 0;\n@@ -123,6 +131,7 @@ int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n template <unsigned int BITS>\n bool base_uint<BITS>::EqualTo(uint64_t b) const\n {\n+    auto& pn = *data;\n     for (int i = WIDTH - 1; i >= 2; i--) {\n         if (pn[i])\n             return false;\n@@ -137,6 +146,7 @@ bool base_uint<BITS>::EqualTo(uint64_t b) const\n template <unsigned int BITS>\n double base_uint<BITS>::getdouble() const\n {\n+    auto& pn = *data;\n     double ret = 0.0;\n     double fact = 1.0;\n     for (int i = 0; i < WIDTH; i++) {\n@@ -173,6 +183,7 @@ std::string base_uint<BITS>::ToString() const\n template <unsigned int BITS>\n unsigned int base_uint<BITS>::bits() const\n {\n+    auto& pn = *data;\n     for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n             for (int nbits = 31; nbits > 0; nbits--) {\n@@ -249,14 +260,16 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n+    auto& pn = *a.data;\n     for(int x=0; x<a.WIDTH; ++x)\n-        WriteLE32(b.begin() + x*4, a.pn[x]);\n+        WriteLE32(b.begin() + x*4, pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n+    auto& pn = *b.data;\n     for(int x=0; x<b.WIDTH; ++x)\n-        b.pn[x] = ReadLE32(a.begin() + x*4);\n+        pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      },
      {
        "sha": "e3ddbd0310ea77508f173cffbe5cfc8f98ee7be5",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 64,
        "deletions": 42,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -6,9 +6,11 @@\n #ifndef BITCOIN_ARITH_UINT256_H\n #define BITCOIN_ARITH_UINT256_H\n \n+#include <array>\n #include <assert.h>\n #include <cstring>\n #include <limits>\n+#include <memory>\n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n@@ -27,36 +29,37 @@ class base_uint\n {\n protected:\n     static constexpr int WIDTH = BITS / 32;\n-    uint32_t pn[WIDTH];\n-public:\n-\n-    base_uint()\n+    using data_type = std::array<uint32_t, WIDTH>;\n+    std::shared_ptr<data_type> data;\n+private:\n+    void copy()\n     {\n-        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n-\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = 0;\n+        if (data.use_count() > 1) {\n+            auto tmp = data;\n+            data = std::make_shared<data_type>();\n+            std::copy(tmp->begin(), tmp->end(), data->begin());\n+        }\n     }\n+public:\n \n-    base_uint(const base_uint& b)\n+    base_uint() : data(std::make_shared<data_type>())\n     {\n-        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+        static_assert(WIDTH > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n \n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n+        data->fill(0);\n     }\n \n-    base_uint& operator=(const base_uint& b)\n-    {\n-        for (int i = 0; i < WIDTH; i++)\n-            pn[i] = b.pn[i];\n-        return *this;\n-    }\n+    base_uint(base_uint&&) = default;\n+    base_uint(const base_uint&) = default;\n \n-    base_uint(uint64_t b)\n+    base_uint& operator=(base_uint&&) = default;\n+    base_uint& operator=(const base_uint&) = default;\n+\n+    base_uint(uint64_t b) : data(std::make_shared<data_type>())\n     {\n-        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+        static_assert(WIDTH > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n \n+        auto& pn = *data;\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n@@ -68,16 +71,15 @@ class base_uint\n     const base_uint operator~() const\n     {\n         base_uint ret;\n+        auto& pn = *data;\n         for (int i = 0; i < WIDTH; i++)\n-            ret.pn[i] = ~pn[i];\n+            (*ret.data)[i] = ~pn[i];\n         return ret;\n     }\n \n     const base_uint operator-() const\n     {\n-        base_uint ret;\n-        for (int i = 0; i < WIDTH; i++)\n-            ret.pn[i] = ~pn[i];\n+        base_uint ret = ~(*this);\n         ++ret;\n         return ret;\n     }\n@@ -86,6 +88,8 @@ class base_uint\n \n     base_uint& operator=(uint64_t b)\n     {\n+        copy();\n+        auto& pn = *data;\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n@@ -95,34 +99,44 @@ class base_uint\n \n     base_uint& operator^=(const base_uint& b)\n     {\n+        copy();\n+        auto& pn = *data;\n         for (int i = 0; i < WIDTH; i++)\n-            pn[i] ^= b.pn[i];\n+            pn[i] ^= (*b.data)[i];\n         return *this;\n     }\n \n     base_uint& operator&=(const base_uint& b)\n     {\n+        copy();\n+        auto& pn = *data;\n         for (int i = 0; i < WIDTH; i++)\n-            pn[i] &= b.pn[i];\n+            pn[i] &= (*b.data)[i];\n         return *this;\n     }\n \n     base_uint& operator|=(const base_uint& b)\n     {\n+        copy();\n+        auto& pn = *data;\n         for (int i = 0; i < WIDTH; i++)\n-            pn[i] |= b.pn[i];\n+            pn[i] |= (*b.data)[i];\n         return *this;\n     }\n \n     base_uint& operator^=(uint64_t b)\n     {\n+        copy();\n+        auto& pn = *data;\n         pn[0] ^= (unsigned int)b;\n         pn[1] ^= (unsigned int)(b >> 32);\n         return *this;\n     }\n \n     base_uint& operator|=(uint64_t b)\n     {\n+        copy();\n+        auto& pn = *data;\n         pn[0] |= (unsigned int)b;\n         pn[1] |= (unsigned int)(b >> 32);\n         return *this;\n@@ -133,10 +147,12 @@ class base_uint\n \n     base_uint& operator+=(const base_uint& b)\n     {\n+        copy();\n+        auto& pn = *data;\n         uint64_t carry = 0;\n         for (int i = 0; i < WIDTH; i++)\n         {\n-            uint64_t n = carry + pn[i] + b.pn[i];\n+            uint64_t n = carry + pn[i] + (*b.data)[i];\n             pn[i] = n & 0xffffffff;\n             carry = n >> 32;\n         }\n@@ -151,17 +167,13 @@ class base_uint\n \n     base_uint& operator+=(uint64_t b64)\n     {\n-        base_uint b;\n-        b = b64;\n-        *this += b;\n+        *this += base_uint(b64);\n         return *this;\n     }\n \n     base_uint& operator-=(uint64_t b64)\n     {\n-        base_uint b;\n-        b = b64;\n-        *this += -b;\n+        *this += -base_uint(b64);\n         return *this;\n     }\n \n@@ -172,7 +184,9 @@ class base_uint\n     base_uint& operator++()\n     {\n         // prefix operator\n+        copy();\n         int i = 0;\n+        auto& pn = *data;\n         while (i < WIDTH && ++pn[i] == 0)\n             i++;\n         return *this;\n@@ -189,7 +203,9 @@ class base_uint\n     base_uint& operator--()\n     {\n         // prefix operator\n+        copy();\n         int i = 0;\n+        auto& pn = *data;\n         while (i < WIDTH && --pn[i] == std::numeric_limits<uint32_t>::max())\n             i++;\n         return *this;\n@@ -216,8 +232,8 @@ class base_uint\n     friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n     friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n-    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n+    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.data->begin(), b.data->begin(), a.size()) == 0; }\n+    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return !(a == b); }\n     friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n     friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n     friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n@@ -230,9 +246,9 @@ class base_uint\n     void SetHex(const std::string& str);\n     std::string ToString() const;\n \n-    unsigned int size() const\n+    constexpr std::size_t size() const\n     {\n-        return sizeof(pn);\n+        return WIDTH * sizeof(uint32_t);\n     }\n \n     /**\n@@ -243,18 +259,24 @@ class base_uint\n \n     uint64_t GetLow64() const\n     {\n-        static_assert(WIDTH >= 2, \"Assertion WIDTH >= 2 failed (WIDTH = BITS / 32). BITS is a template parameter.\");\n+        auto& pn = *data;\n+        static_assert(WIDTH >= 2, \"Assertion size >= 2 failed (size = BITS / 32). BITS is a template parameter.\");\n         return pn[0] | (uint64_t)pn[1] << 32;\n     }\n };\n \n /** 256-bit unsigned big integer. */\n class arith_uint256 : public base_uint<256> {\n public:\n-    arith_uint256() {}\n+    arith_uint256() = default;\n+    using base_uint<256>::base_uint;\n+    arith_uint256(arith_uint256&&) = default;\n+    arith_uint256(const arith_uint256&) = default;\n+    arith_uint256& operator=(arith_uint256&&) = default;\n+    arith_uint256& operator=(const arith_uint256&) = default;\n+\n+    arith_uint256(base_uint<256>&& b) : base_uint<256>(std::move(b)) {}\n     arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n-    arith_uint256(uint64_t b) : base_uint<256>(b) {}\n-    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}\n \n     /**\n      * The \"compact\" format is a representation of a whole"
      },
      {
        "sha": "afc576e99c9209e70d6684330d014a5f6f84c4e8",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -136,7 +136,7 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     // add 4-byte hash check to the end\n     std::vector<unsigned char> vch(vchIn);\n     uint256 hash = Hash(vch.begin(), vch.end());\n-    vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n+    vch.insert(vch.end(), hash.begin(), hash.begin() + 4);\n     return EncodeBase58(vch);\n }\n \n@@ -149,7 +149,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n     }\n     // re-calculate the checksum, ensure it matches the included 4-byte checksum\n     uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n-    if (memcmp(&hash, &vchRet[vchRet.size() - 4], 4) != 0) {\n+    if (memcmp(hash.begin(), &vchRet[vchRet.size() - 4], 4) != 0) {\n         vchRet.clear();\n         return false;\n     }"
      },
      {
        "sha": "789557abd796486726512ec58861edf04de330eb",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -260,8 +260,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         nSequenceIn = std::stoul(vStrInputParts[2]);\n \n     // append to transaction input list\n-    CTxIn txin(txid, vout, CScript(), nSequenceIn);\n-    tx.vin.push_back(txin);\n+    tx.vin.emplace_back(std::move(txid), vout, CScript(), nSequenceIn);\n }\n \n static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)\n@@ -599,7 +598,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (nOut < 0)\n                 throw std::runtime_error(\"vout must be positive\");\n \n-            COutPoint out(txid, nOut);\n+            COutPoint out(std::move(txid), nOut);\n             std::vector<unsigned char> pkData(ParseHexUV(prevOut[\"scriptPubKey\"], \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n "
      },
      {
        "sha": "d095ab3d3a3b65d9a20ce2c8cb6b8c3e5b8e7d1f",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -126,6 +126,7 @@ class CCoinsViewCursor\n {\n public:\n     CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}\n+    CCoinsViewCursor(uint256&& hashBlockIn): hashBlock(std::move(hashBlockIn)) {}\n     virtual ~CCoinsViewCursor() {}\n \n     virtual bool GetKey(COutPoint &key) const = 0;"
      },
      {
        "sha": "8fd3ef960cb4f13b20f267f7ca5f3aae6f2194ef",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -22,7 +22,7 @@ static bool IsToKeyID(const CScript& script, CKeyID &hash)\n     if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160\n                             && script[2] == 20 && script[23] == OP_EQUALVERIFY\n                             && script[24] == OP_CHECKSIG) {\n-        memcpy(&hash, &script[3], 20);\n+        memcpy(hash.begin(), &script[3], 20);\n         return true;\n     }\n     return false;\n@@ -32,7 +32,7 @@ static bool IsToScriptID(const CScript& script, CScriptID &hash)\n {\n     if (script.size() == 23 && script[0] == OP_HASH160 && script[1] == 20\n                             && script[22] == OP_EQUAL) {\n-        memcpy(&hash, &script[2], 20);\n+        memcpy(hash.begin(), &script[2], 20);\n         return true;\n     }\n     return false;\n@@ -59,14 +59,14 @@ bool CompressScript(const CScript& script, std::vector<unsigned char> &out)\n     if (IsToKeyID(script, keyID)) {\n         out.resize(21);\n         out[0] = 0x00;\n-        memcpy(&out[1], &keyID, 20);\n+        memcpy(&out[1], keyID.begin(), 20);\n         return true;\n     }\n     CScriptID scriptID;\n     if (IsToScriptID(script, scriptID)) {\n         out.resize(21);\n         out[0] = 0x01;\n-        memcpy(&out[1], &scriptID, 20);\n+        memcpy(&out[1], scriptID.begin(), 20);\n         return true;\n     }\n     CPubKey pubkey;"
      },
      {
        "sha": "a6951d3468397d81876bd2e72e8af1ffb099b9d8",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -54,7 +54,10 @@ uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\n         if (hashes.size() & 1) {\n             hashes.push_back(hashes.back());\n         }\n-        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\n+        for (std::size_t i = 0, j = 0; i < hashes.size(); i += 2) {\n+            hashes[j++] = Hash(hashes[i].begin(), hashes[i].end(),\n+                             hashes[i+1].begin(), hashes[i+1].end());\n+        }\n         hashes.resize(hashes.size() / 2);\n     }\n     if (mutated) *mutated = mutation;"
      },
      {
        "sha": "5175a3f73fb0f8f6a79fe949a8ac81f4a05f7894",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -73,7 +73,7 @@ inline uint256 Hash(const T1 pbegin, const T1 pend)\n     static const unsigned char pblank[1] = {};\n     uint256 result;\n     CHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result.begin());\n     return result;\n }\n \n@@ -85,7 +85,7 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n     uint256 result;\n     CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n               .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result.begin());\n     return result;\n }\n \n@@ -96,7 +96,7 @@ inline uint160 Hash160(const T1 pbegin, const T1 pend)\n     static unsigned char pblank[1] = {};\n     uint160 result;\n     CHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result.begin());\n     return result;\n }\n \n@@ -135,7 +135,7 @@ class CHashWriter\n     // invalidates the object\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n "
      },
      {
        "sha": "6a586bb086d1bc6ed5b27defec752de2c3879a22",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -288,7 +288,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = key.GetPubKey().GetID();\n-    memcpy(&out.vchFingerprint[0], &id, 4);\n+    memcpy(&out.vchFingerprint[0], id.begin(), 4);\n     out.nChild = _nChild;\n     return key.Derive(out.key, out.chaincode, _nChild, chaincode);\n }"
      },
      {
        "sha": "6aa9498d1aa1af67a25433bd394394b42290d3bc",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -81,14 +81,14 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n         if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n             std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n-            return CKeyID(hash);\n+            return CKeyID(std::move(hash));\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n         // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n         if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n             std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n-            return CScriptID(hash);\n+            return CScriptID(std::move(hash));\n         }\n     }\n     data.clear();"
      },
      {
        "sha": "e78ca5f26116e57224ce7079dc2b775b1617991e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -850,7 +850,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n     return true;\n }\n \n-int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+int static EraseOrphanTx(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n {\n     std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n@@ -1004,8 +1004,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n             if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+                vOrphanErase.push_back(orphanTx.GetHash());\n             }\n         }\n     }"
      },
      {
        "sha": "9ac5f5c4c631e8846ec6b87d019d76f956f9ca2a",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -395,7 +395,7 @@ uint64_t CNetAddr::GetHash() const\n {\n     uint256 hash = Hash(&ip[0], &ip[16]);\n     uint64_t nRet;\n-    memcpy(&nRet, &hash, sizeof(nRet));\n+    memcpy(&nRet, hash.begin(), sizeof(nRet));\n     return nRet;\n }\n "
      },
      {
        "sha": "d4f112d8c9bac1399fb403a54b2c3a25f3707832",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -33,6 +33,12 @@ class CBlockHeader\n         SetNull();\n     }\n \n+    CBlockHeader(CBlockHeader&&) = default;\n+    CBlockHeader(const CBlockHeader&) = default;\n+\n+    CBlockHeader& operator=(CBlockHeader&&) = default;\n+    CBlockHeader& operator=(const CBlockHeader&) = default;\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -130,6 +136,7 @@ struct CBlockLocator\n     CBlockLocator() {}\n \n     explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n+    explicit CBlockLocator(std::vector<uint256>&& vHaveIn) : vHave(std::move(vHaveIn)) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "eccbd902636e89310ec008c7f344af90e763cd2b",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -14,14 +14,28 @@ std::string COutPoint::ToString() const\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n }\n \n-CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n+CTxIn::CTxIn(COutPoint&& prevoutIn, const CScript& scriptSigIn, uint32_t nSequenceIn)\n+{\n+    prevout = std::move(prevoutIn);\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+CTxIn::CTxIn(const COutPoint& prevoutIn, const CScript& scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = prevoutIn;\n     scriptSig = scriptSigIn;\n     nSequence = nSequenceIn;\n }\n \n-CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n+CTxIn::CTxIn(uint256&& hashPrevTx, uint32_t nOut, const CScript& scriptSigIn, uint32_t nSequenceIn)\n+{\n+    prevout = COutPoint(std::move(hashPrevTx), nOut);\n+    scriptSig = scriptSigIn;\n+    nSequence = nSequenceIn;\n+}\n+\n+CTxIn::CTxIn(const uint256& hashPrevTx, uint32_t nOut, const CScript& scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = COutPoint(hashPrevTx, nOut);\n     scriptSig = scriptSigIn;"
      },
      {
        "sha": "896858ff9475395c335e5d73af01e8f73f8e0055",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -24,7 +24,13 @@ class COutPoint\n     static constexpr uint32_t NULL_INDEX = std::numeric_limits<uint32_t>::max();\n \n     COutPoint(): n(NULL_INDEX) { }\n+    COutPoint(COutPoint&&) = default;\n+    COutPoint(const COutPoint&) = default;\n     COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }\n+    COutPoint(uint256&& hashIn, uint32_t nIn): hash(std::move(hashIn)), n(nIn) { }\n+\n+    COutPoint& operator=(COutPoint&&) = default;\n+    COutPoint& operator=(const COutPoint&) = default;\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -39,8 +45,7 @@ class COutPoint\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {\n-        int cmp = a.hash.Compare(b.hash);\n-        return cmp < 0 || (cmp == 0 && a.n < b.n);\n+        return a.hash < b.hash || (a.hash == b.hash && a.n < b.n);\n     }\n \n     friend bool operator==(const COutPoint& a, const COutPoint& b)\n@@ -100,8 +105,16 @@ class CTxIn\n         nSequence = SEQUENCE_FINAL;\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(CTxIn&&) = default;\n+    CTxIn(const CTxIn&) = default;\n+\n+    explicit CTxIn(const COutPoint& prevoutIn, const CScript& scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    explicit CTxIn(COutPoint&& prevoutIn, const CScript& scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(uint256&& hashPrevTx, uint32_t nOut, const CScript& scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(const uint256& hashPrevTx, uint32_t nOut, const CScript& scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+\n+    CTxIn& operator=(CTxIn&&) = default;\n+    CTxIn& operator=(const CTxIn&) = default;\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "29af1238a2791a6fe0462711f3ee06c51df703ef",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -164,6 +164,7 @@ CInv::CInv()\n     hash.SetNull();\n }\n \n+CInv::CInv(int typeIn, uint256&& hashIn) : type(typeIn), hash(std::move(hashIn)) {}\n CInv::CInv(int typeIn, const uint256& hashIn) : type(typeIn), hash(hashIn) {}\n \n bool operator<(const CInv& a, const CInv& b)"
      },
      {
        "sha": "7b8a298a29f6dad72ebc3382c7c7f8dcd762aae9",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -386,6 +386,7 @@ class CInv\n {\n public:\n     CInv();\n+    CInv(int typeIn, uint256&& hashIn);\n     CInv(int typeIn, const uint256& hashIn);\n \n     ADD_SERIALIZE_METHODS;"
      },
      {
        "sha": "cfeb69f30a10f6d154ab0428250265bb60dbf8da",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -266,7 +266,7 @@ void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = pubkey.GetID();\n-    memcpy(&out.vchFingerprint[0], &id, 4);\n+    memcpy(&out.vchFingerprint[0], id.begin(), 4);\n     out.nChild = _nChild;\n     return pubkey.Derive(out.pubkey, out.chaincode, _nChild, chaincode);\n }"
      },
      {
        "sha": "8f75dba2267e80e8d3109421cc2143b9744635d4",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -22,6 +22,7 @@ class CKeyID : public uint160\n public:\n     CKeyID() : uint160() {}\n     explicit CKeyID(const uint160& in) : uint160(in) {}\n+    explicit CKeyID(uint160&& in) : uint160(std::move(in)) {}\n };\n \n typedef uint256 ChainCode;"
      },
      {
        "sha": "f810597d66c0cf0d31ce1d588d399dc752cffcb4",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -685,7 +685,7 @@ struct TransactionNotification\n public:\n     TransactionNotification() {}\n     TransactionNotification(uint256 _hash, ChangeType _status, bool _showTransaction):\n-        hash(_hash), status(_status), showTransaction(_showTransaction) {}\n+        hash(std::move(_hash)), status(_status), showTransaction(_showTransaction) {}\n \n     void invoke(QObject *ttm)\n     {"
      },
      {
        "sha": "f50621b5b9888a92fcec709f3c4c1c6ea6dddbb3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -508,7 +508,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n         return m_wallet->addDestData(dest, key, sRequest);\n }\n \n-bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n+bool WalletModel::bumpFee(const uint256& hash, uint256& new_hash)\n {\n     CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;"
      },
      {
        "sha": "67be5399a426202e310b9d4c112bfa2a9f9740f9",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -210,7 +210,7 @@ class WalletModel : public QObject\n     void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n     bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n \n-    bool bumpFee(uint256 hash, uint256& new_hash);\n+    bool bumpFee(const uint256& hash, uint256& new_hash);\n \n     static bool isWalletEnabled();\n     bool privateKeysDisabled() const;"
      },
      {
        "sha": "d171cd1bd57dd0b75b877df13f20bcc012e8716f",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -529,7 +529,7 @@ int GetRandInt(int nMax) noexcept\n uint256 GetRandHash() noexcept\n {\n     uint256 hash;\n-    GetRandBytes((unsigned char*)&hash, sizeof(hash));\n+    GetRandBytes(hash.begin(), hash.size());\n     return hash;\n }\n "
      },
      {
        "sha": "f7f3fee0ffb284c9c292b6e07355e97e8578bdd3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -36,7 +36,7 @@\n #include <univalue.h>\n \n \n-static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+static void TxToJSON(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //"
      },
      {
        "sha": "e6661900286fdc538dfe9eadf7202d0cee49aaab",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -708,16 +708,14 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n         }\n     }\n     if (txntype == TX_PUBKEYHASH) {\n-        uint160 hash(data[0]);\n-        CKeyID keyid(hash);\n+        CKeyID keyid = CKeyID(uint160(data[0]));\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return MakeUnique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TX_WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n-        uint160 hash(data[0]);\n-        CKeyID keyid(hash);\n+        CKeyID keyid = CKeyID(uint160(data[0]));\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return MakeUnique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n@@ -732,8 +730,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n         return MakeUnique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n     }\n     if (txntype == TX_SCRIPTHASH && ctx == ParseScriptContext::TOP) {\n-        uint160 hash(data[0]);\n-        CScriptID scriptid(hash);\n+        CScriptID scriptid = CScriptID(uint160(data[0]));\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2SH, provider);"
      },
      {
        "sha": "92dffa32b62e3be1c918c2faccb20f6084ded082",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -129,7 +129,7 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n         }\n         uint160 hash;\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n-        CScriptID scriptID = CScriptID(hash);\n+        CScriptID scriptID = CScriptID(std::move(hash));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));"
      },
      {
        "sha": "53b63fe9cddf79f99f9a7e530a774a7819890c0a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -24,6 +24,7 @@ class CScriptID : public uint160\n public:\n     CScriptID() : uint160() {}\n     explicit CScriptID(const CScript& in);\n+    CScriptID(uint160&& in) : uint160(std::move(in)) {}\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n@@ -76,6 +77,7 @@ class CNoDestination {\n struct WitnessV0ScriptHash : public uint256\n {\n     WitnessV0ScriptHash() : uint256() {}\n+    explicit WitnessV0ScriptHash(uint256&& hash) : uint256(std::move(hash)) {}\n     explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}\n     explicit WitnessV0ScriptHash(const CScript& script);\n     using uint256::uint256;\n@@ -84,6 +86,7 @@ struct WitnessV0ScriptHash : public uint256\n struct WitnessV0KeyHash : public uint160\n {\n     WitnessV0KeyHash() : uint160() {}\n+    explicit WitnessV0KeyHash(uint160&& hash) : uint160(std::move(hash)) {}\n     explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}\n     using uint160::uint160;\n };"
      },
      {
        "sha": "6a8149c6585cae2003387e2b1673231a203c764b",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -173,8 +173,6 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(memcmp(R2L.begin(), R2Array, 32)==0);\n     BOOST_CHECK(memcmp(ZeroL.begin(), ZeroArray, 32)==0);\n     BOOST_CHECK(memcmp(OneL.begin(), OneArray, 32)==0);\n-    BOOST_CHECK(R1L.size() == sizeof(R1L));\n-    BOOST_CHECK(sizeof(R1L) == 32);\n     BOOST_CHECK(R1L.size() == 32);\n     BOOST_CHECK(R2L.size() == 32);\n     BOOST_CHECK(ZeroL.size() == 32);\n@@ -219,8 +217,6 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(memcmp(R2S.begin(), R2Array, 20)==0);\n     BOOST_CHECK(memcmp(ZeroS.begin(), ZeroArray, 20)==0);\n     BOOST_CHECK(memcmp(OneS.begin(), OneArray, 20)==0);\n-    BOOST_CHECK(R1S.size() == sizeof(R1S));\n-    BOOST_CHECK(sizeof(R1S) == 20);\n     BOOST_CHECK(R1S.size() == 20);\n     BOOST_CHECK(R2S.size() == 20);\n     BOOST_CHECK(ZeroS.size() == 20);"
      },
      {
        "sha": "2196beeb1dc3ae643f126754f3a77fddd6fb7d54",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -74,6 +74,8 @@ class CCoinsViewDBCursor: public CCoinsViewCursor\n     void Next() override;\n \n private:\n+    CCoinsViewDBCursor(CDBIterator* pcursorIn, uint256&& hashBlockIn):\n+        CCoinsViewCursor(std::move(hashBlockIn)), pcursor(pcursorIn) {}\n     CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):\n         CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n     std::unique_ptr<CDBIterator> pcursor;"
      },
      {
        "sha": "b0dec3f30c20c1a3bed6455699488720534dadb5",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -11,22 +11,22 @@\n #include <string.h>\n \n template <unsigned int BITS>\n-base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n+base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch) : data(new data_type)\n {\n-    assert(vch.size() == sizeof(data));\n-    memcpy(data, vch.data(), sizeof(data));\n+    assert(vch.size() == size());\n+    std::copy(vch.begin(), vch.end(), begin());\n }\n \n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    return HexStr(std::reverse_iterator<const uint8_t*>(data + sizeof(data)), std::reverse_iterator<const uint8_t*>(data));\n+    return HexStr(data->rbegin(), data->rend());\n }\n \n template <unsigned int BITS>\n void base_blob<BITS>::SetHex(const char* psz)\n {\n-    memset(data, 0, sizeof(data));\n+    SetNull();\n \n     // skip leading spaces\n     while (IsSpace(*psz))\n@@ -41,13 +41,13 @@ void base_blob<BITS>::SetHex(const char* psz)\n     while (::HexDigit(*psz) != -1)\n         psz++;\n     psz--;\n-    unsigned char* p1 = (unsigned char*)data;\n-    unsigned char* pend = p1 + WIDTH;\n+    auto p1 = begin();\n+    auto pend = end();\n     while (psz >= pbegin && p1 < pend) {\n         *p1 = ::HexDigit(*psz--);\n         if (psz >= pbegin) {\n             *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\n-            p1++;\n+            ++p1;\n         }\n     }\n }"
      },
      {
        "sha": "64b5d422960207085c1fb04cf13b056efa0e1c9e",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 49,
        "deletions": 26,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -6,7 +6,9 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n+#include <array>\n #include <assert.h>\n+#include <memory>\n #include <cstring>\n #include <stdexcept>\n #include <stdint.h>\n@@ -17,31 +19,44 @@\n template<unsigned int BITS>\n class base_blob\n {\n-protected:\n-    static constexpr int WIDTH = BITS / 8;\n-    uint8_t data[WIDTH];\n+    using data_type = std::array<uint8_t, BITS / 8>;\n+    std::unique_ptr<data_type> data;\n public:\n-    base_blob()\n+    base_blob() : data(new data_type)\n     {\n-        memset(data, 0, sizeof(data));\n+        SetNull();\n+    }\n+\n+    base_blob(base_blob&&) = default;\n+    base_blob(const base_blob& other) : data(new data_type)\n+    {\n+        std::copy(other.begin(), other.end(), begin());\n     }\n \n     explicit base_blob(const std::vector<unsigned char>& vch);\n \n+    base_blob& operator=(base_blob&&) = default;\n+    base_blob& operator=(const base_blob& other)\n+    {\n+        if (this != &other)\n+            std::copy(other.begin(), other.end(), begin());\n+        return *this;\n+    }\n+\n     bool IsNull() const\n     {\n-        for (int i = 0; i < WIDTH; i++)\n-            if (data[i] != 0)\n+        for (auto i: *data)\n+            if (i != 0)\n                 return false;\n         return true;\n     }\n \n     void SetNull()\n     {\n-        memset(data, 0, sizeof(data));\n+        data->fill(0);\n     }\n \n-    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }\n+    inline int Compare(const base_blob& other) const { return memcmp(begin(), other.begin(), size()); }\n \n     friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }\n     friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }\n@@ -52,34 +67,34 @@ class base_blob\n     void SetHex(const std::string& str);\n     std::string ToString() const;\n \n-    unsigned char* begin()\n+    uint8_t* begin()\n     {\n-        return &data[0];\n+        return data->begin();\n     }\n \n-    unsigned char* end()\n+    uint8_t* end()\n     {\n-        return &data[WIDTH];\n+        return data->end();\n     }\n \n-    const unsigned char* begin() const\n+    const uint8_t* begin() const\n     {\n-        return &data[0];\n+        return data->begin();\n     }\n \n-    const unsigned char* end() const\n+    const uint8_t* end() const\n     {\n-        return &data[WIDTH];\n+        return data->end();\n     }\n \n-    unsigned int size() const\n+    constexpr std::size_t size() const\n     {\n-        return sizeof(data);\n+        return data->size();\n     }\n \n     uint64_t GetUint64(int pos) const\n     {\n-        const uint8_t* ptr = data + pos * 8;\n+        const uint8_t* ptr = begin() + pos * 8;\n         return ((uint64_t)ptr[0]) | \\\n                ((uint64_t)ptr[1]) << 8 | \\\n                ((uint64_t)ptr[2]) << 16 | \\\n@@ -93,13 +108,13 @@ class base_blob\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write((char*)data, sizeof(data));\n+        s.write((const char*)begin(), size());\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read((char*)data, sizeof(data));\n+        s.read((char*)begin(), size());\n     }\n };\n \n@@ -109,8 +124,12 @@ class base_blob\n  */\n class uint160 : public base_blob<160> {\n public:\n-    uint160() {}\n-    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n+    uint160() = default;\n+    using base_blob<160>::base_blob;\n+    uint160(uint160&&) = default;\n+    uint160(const uint160&) = default;\n+    uint160& operator=(uint160&&) = default;\n+    uint160& operator=(const uint160&) = default;\n };\n \n /** 256-bit opaque blob.\n@@ -120,8 +139,12 @@ class uint160 : public base_blob<160> {\n  */\n class uint256 : public base_blob<256> {\n public:\n-    uint256() {}\n-    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n+    uint256() = default;\n+    using base_blob<256>::base_blob;\n+    uint256(uint256&&) = default;\n+    uint256(const uint256&) = default;\n+    uint256& operator=(uint256&&) = default;\n+    uint256& operator=(const uint256&) = default;\n };\n \n /* uint256 from const char *."
      },
      {
        "sha": "f53203ca4cbfade635cb3998d941d2badb861a1d",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -42,6 +42,11 @@ class CCoinControl\n         SetNull();\n     }\n \n+    CCoinControl(CCoinControl&&) = default;\n+    CCoinControl(const CCoinControl&) = default;\n+    CCoinControl& operator=(CCoinControl&&) = default;\n+    CCoinControl& operator=(const CCoinControl&) = default;\n+\n     void SetNull();\n \n     bool HasSelected() const"
      },
      {
        "sha": "d25023b8eea499a7108884ebcc7935be8712539f",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -28,6 +28,12 @@ class CInputCoin {\n         effective_value = txout.nValue;\n     }\n \n+    CInputCoin(CInputCoin&&) = default;\n+    CInputCoin(const CInputCoin&) = default;\n+\n+    CInputCoin& operator=(CInputCoin&&) = default;\n+    CInputCoin& operator=(const CInputCoin&) = default;\n+\n     CInputCoin(const CTransactionRef& tx, unsigned int i, int input_bytes) : CInputCoin(tx, i)\n     {\n         m_input_bytes = input_bytes;"
      },
      {
        "sha": "be542b4a67e7a0ed775d7224fd97e0ae081109d7",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -112,7 +112,7 @@ static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMateri\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n+    memcpy(chIV.data(), nIV.begin(), WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n@@ -122,7 +122,7 @@ static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<u\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n+    memcpy(chIV.data(), nIV.begin(), WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));"
      },
      {
        "sha": "0e16c195c9aa42d54e28de2fbda956964f8a8269",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -1626,7 +1626,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     UniValue transactions(UniValue::VARR);\n \n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-        CWalletTx tx = pairWtx.second;\n+        const CWalletTx& tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain(*locked_chain) < depth) {\n             ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n@@ -3007,7 +3007,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, fee_out, change_position, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n+    if (!pwallet->FundTransaction(tx, fee_out, change_position, strFailReason, lockUnspents, setSubtractFeeFromOutputs, std::move(coinControl))) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n }\n@@ -3578,7 +3578,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+        if (pwallet && pwallet->GetCScript(CScriptID(std::move(hash)), subscript)) {\n             ProcessSubScript(subscript, obj);\n         }\n         return obj;"
      },
      {
        "sha": "5454204978fc7654e6655e55c8c3e53eb98f724c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -258,6 +258,9 @@ class CMerkleTx\n         Init();\n     }\n \n+    CMerkleTx(CMerkleTx&&) = default;\n+    CMerkleTx(const CMerkleTx&) = default;\n+\n     explicit CMerkleTx(CTransactionRef arg)\n     {\n         SetTx(std::move(arg));"
      },
      {
        "sha": "292b9d418963234255e37c10c64d71a4f5251785",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -52,7 +52,7 @@ bool WalletBatch::WriteTx(const CWalletTx& wtx)\n     return WriteIC(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n-bool WalletBatch::EraseTx(uint256 hash)\n+bool WalletBatch::EraseTx(const uint256& hash)\n {\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n@@ -575,8 +575,8 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n                 CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n                 ssValue >> wtx;\n \n-                vTxHash.push_back(hash);\n-                vWtx.push_back(wtx);\n+                vTxHash.push_back(std::move(hash));\n+                vWtx.push_back(std::move(wtx));\n             }\n         }\n         pcursor->close();"
      },
      {
        "sha": "3346b14c1f4eeca9c9291566c128ca723220aa63",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1",
        "patch": "@@ -175,7 +175,7 @@ class WalletBatch\n     bool ErasePurpose(const std::string& strAddress);\n \n     bool WriteTx(const CWalletTx& wtx);\n-    bool EraseTx(uint256 hash);\n+    bool EraseTx(const uint256& hash);\n \n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);"
      },
      {
        "sha": "2eab07c35d7099c3d680f91e8b8dbb0f372be373",
        "filename": "test/functional/data/rpc_getblockstats.json",
        "status": "modified",
        "additions": 145,
        "deletions": 145,
        "changes": 290,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfabb166543e1071747dd1fd85e89f81a49b32b1/test/functional/data/rpc_getblockstats.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfabb166543e1071747dd1fd85e89f81a49b32b1/test/functional/data/rpc_getblockstats.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_getblockstats.json?ref=bfabb166543e1071747dd1fd85e89f81a49b32b1"
      }
    ]
  }
]