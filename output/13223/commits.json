[
  {
    "sha": "c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWU0OGVjZDBjMDA2NTdkYjE1YzRlNjg3MTUzZGQ1ZTMzYmQ4YzAy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-12T23:51:44Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-13T04:47:00Z"
      },
      "message": "refactor: Extract BnB-specific data from CInputCoin\n\nThis separates the fee-specific info of CInputCoin that are only used by\nSelectCoinsBnB into a separate wrapper class. This makes CInputCoin small and\nallows for isolation and expression of BnB-specific concepts like waste.\n\nThis also calls attention to the fact that there is no fee-specific testing of\nSelectCoinsBnB currently. Could be worthy to visit for greater coverage.",
      "tree": {
        "sha": "c303d1a7bb480fab034c886409b6b679d6cb638e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c303d1a7bb480fab034c886409b6b679d6cb638e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJa98NFAAoJEG7l83hfeLNF+dIH/0e63U89f7B4FpOA/eXCoZoN\nCE51b3jBrxHdtCaokj7E0tZuzw6ieUn02V5SWc+cq/HA9MVNl5enOsSw1PxWHkpE\nz4HINSnsRMHpS2LtyCTf88MuGilLWkf7RpxuYsnivBrf/dsctf+/45tbO/q+Qg2f\nBs4mS0Nt9YHjJhe61CAd8zCi3cVdcv+WVrnQQ0NNkFX4npU5jwgT5m+7VyN0/vy3\nlwmmcPgToI3vmoaiLwOXJeYSSYT7BeUCkaqtD9dN17/9atVmcxJ/G2HHtF0uDYN+\nZGmG0XRLjgLy1eM5kzsXcoBWku7UssHy0/c42sKBL3pba6NGIc1nTiJxA3Nq1iE=\n=atve\n-----END PGP SIGNATURE-----",
        "payload": "tree c303d1a7bb480fab034c886409b6b679d6cb638e\nparent 418ae49ee1eac2c9d6cd4ba83c036a41f1afe922\nauthor Ben Woosley <ben.woosley@gmail.com> 1526169104 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1526186820 -0700\n\nrefactor: Extract BnB-specific data from CInputCoin\n\nThis separates the fee-specific info of CInputCoin that are only used by\nSelectCoinsBnB into a separate wrapper class. This makes CInputCoin small and\nallows for isolation and expression of BnB-specific concepts like waste.\n\nThis also calls attention to the fact that there is no fee-specific testing of\nSelectCoinsBnB currently. Could be worthy to visit for greater coverage.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "418ae49ee1eac2c9d6cd4ba83c036a41f1afe922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/418ae49ee1eac2c9d6cd4ba83c036a41f1afe922",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/418ae49ee1eac2c9d6cd4ba83c036a41f1afe922"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 46,
      "deletions": 29
    },
    "files": [
      {
        "sha": "91203cf97268ca62bec1e3617cc3d0fa4c21445b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
        "patch": "@@ -65,15 +65,15 @@ static void CoinSelection(benchmark::State& state)\n typedef std::set<CInputCoin> CoinSet;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n-static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<InputCoinWithFee>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    set.emplace_back(MakeTransactionRef(tx), nInput);\n+    set.emplace_back(CInputCoin(MakeTransactionRef(tx), nInput), 0, 0);\n }\n // Copied from src/wallet/test/coinselector_tests.cpp\n-static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+static CAmount make_hard_case(int utxos, std::vector<InputCoinWithFee>& utxo_pool)\n {\n     utxo_pool.clear();\n     CAmount target = 0;\n@@ -88,7 +88,7 @@ static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n static void BnBExhaustion(benchmark::State& state)\n {\n     // Setup\n-    std::vector<CInputCoin> utxo_pool;\n+    std::vector<InputCoinWithFee> utxo_pool;\n     CoinSet selection;\n     CAmount value_ret = 0;\n     CAmount not_input_fees = 0;"
      },
      {
        "sha": "3474654f110f741e253d4804b964e6aab4d38d6e",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
        "patch": "@@ -9,6 +9,11 @@\n // Descending order comparator\n struct {\n     bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+\n+    bool operator()(const InputCoinWithFee& a, const InputCoinWithFee& b) const\n     {\n         return a.effective_value > b.effective_value;\n     }\n@@ -59,7 +64,7 @@ struct {\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+bool SelectCoinsBnB(std::vector<InputCoinWithFee>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n {\n     out_set.clear();\n     CAmount curr_value = 0;\n@@ -70,7 +75,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n     // Calculate curr_available_value\n     CAmount curr_available_value = 0;\n-    for (const CInputCoin& utxo : utxo_pool) {\n+    for (const InputCoinWithFee& utxo : utxo_pool) {\n         // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n         assert(utxo.effective_value > 0);\n         curr_available_value += utxo.effective_value;\n@@ -92,7 +97,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         bool backtrack = false;\n         if (curr_value + curr_available_value < actual_target ||                // Cannot possibly reach target with the amount remaining in the curr_available_value.\n             curr_value > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n-            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            (curr_waste > best_waste && utxo_pool.at(0).waste > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n             backtrack = true;\n         } else if (curr_value >= actual_target) {       // Selected value is within range\n             curr_waste += (curr_value - actual_target); // This is the excess value which is added to the waste for the below comparison\n@@ -123,11 +128,11 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n             // Output was included on previous iterations, try excluding now.\n             curr_selection.back() = false;\n-            CInputCoin& utxo = utxo_pool.at(curr_selection.size() - 1);\n+            InputCoinWithFee& utxo = utxo_pool.at(curr_selection.size() - 1);\n             curr_value -= utxo.effective_value;\n-            curr_waste -= utxo.fee - utxo.long_term_fee;\n+            curr_waste -= utxo.waste;\n         } else { // Moving forwards, continuing down this branch\n-            CInputCoin& utxo = utxo_pool.at(curr_selection.size());\n+            InputCoinWithFee& utxo = utxo_pool.at(curr_selection.size());\n \n             // Remove this utxo from the curr_available_value utxo amount\n             curr_available_value -= utxo.effective_value;\n@@ -142,7 +147,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n                 // Inclusion branch first (Largest First Exploration)\n                 curr_selection.push_back(true);\n                 curr_value += utxo.effective_value;\n-                curr_waste += utxo.fee - utxo.long_term_fee;\n+                curr_waste += utxo.waste;\n             }\n         }\n     }\n@@ -156,8 +161,8 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n     value_ret = 0;\n     for (size_t i = 0; i < best_selection.size(); ++i) {\n         if (best_selection.at(i)) {\n-            out_set.insert(utxo_pool.at(i));\n-            value_ret += utxo_pool.at(i).txout.nValue;\n+            out_set.insert(utxo_pool.at(i).coin);\n+            value_ret += utxo_pool.at(i).coin.txout.nValue;\n         }\n     }\n "
      },
      {
        "sha": "9877645316a688597d0e63e735ce32c4279a8675",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
        "patch": "@@ -16,6 +16,7 @@ static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE/2;\n \n class CInputCoin {\n public:\n+    CInputCoin() = delete;\n     CInputCoin(const CTransactionRef& tx, unsigned int i)\n     {\n         if (!tx)\n@@ -25,14 +26,10 @@ class CInputCoin {\n \n         outpoint = COutPoint(tx->GetHash(), i);\n         txout = tx->vout[i];\n-        effective_value = txout.nValue;\n     }\n \n     COutPoint outpoint;\n     CTxOut txout;\n-    CAmount effective_value;\n-    CAmount fee = 0;\n-    CAmount long_term_fee = 0;\n \n     bool operator<(const CInputCoin& rhs) const {\n         return outpoint < rhs.outpoint;\n@@ -47,7 +44,22 @@ class CInputCoin {\n     }\n };\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+class InputCoinWithFee\n+{\n+public:\n+    InputCoinWithFee() = delete;\n+    InputCoinWithFee(const CInputCoin&& coin_in, const CAmount& fee_in, const CAmount& long_term_fee)\n+        : coin(coin_in), fee(fee_in), effective_value(coin.txout.nValue - fee), waste(fee - long_term_fee)\n+    {\n+    }\n+\n+    CInputCoin coin;\n+    CAmount fee;\n+    CAmount effective_value;\n+    CAmount waste;\n+};\n+\n+bool SelectCoinsBnB(std::vector<InputCoinWithFee>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n \n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);"
      },
      {
        "sha": "36a41b827d7aafc0868e7359ff789cfface029b6",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
        "patch": "@@ -36,12 +36,12 @@ CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0);\n \n-static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<InputCoinWithFee>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    set.emplace_back(MakeTransactionRef(tx), nInput);\n+    set.emplace_back(CInputCoin(MakeTransactionRef(tx), nInput), 0, 0);\n }\n \n static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n@@ -90,7 +90,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n     return ret.first == a.end() && ret.second == b.end();\n }\n \n-static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+static CAmount make_hard_case(int utxos, std::vector<InputCoinWithFee>& utxo_pool)\n {\n     utxo_pool.clear();\n     CAmount target = 0;\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     LOCK(testWallet.cs_wallet);\n \n     // Setup\n-    std::vector<CInputCoin> utxo_pool;\n+    std::vector<InputCoinWithFee> utxo_pool;\n     CoinSet selection;\n     CoinSet actual_selection;\n     CAmount value_ret = 0;"
      },
      {
        "sha": "a21711af6873d6040cd7da38f145aac77716b0ad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e48ecd0c00657db15c4e687153dd5e33bd8c02/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c9e48ecd0c00657db15c4e687153dd5e33bd8c02",
        "patch": "@@ -2475,7 +2475,6 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<CInputCoin> utxo_pool;\n     if (coin_selection_params.use_bnb) {\n \n         // Get long term estimate\n@@ -2487,33 +2486,34 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // Calculate cost of change\n         CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n+        std::vector<InputCoinWithFee> utxo_pool;\n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (const COutput &output : vCoins)\n         {\n             if (!OutputEligibleForSpending(output, eligibility_filter))\n                 continue;\n \n+            CAmount fee = (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n             CInputCoin coin(output.tx->tx, output.i);\n-            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n             // Only include outputs that are positive effective value (i.e. not dust)\n-            if (coin.effective_value > 0) {\n-                coin.fee = output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes);\n-                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n-                utxo_pool.push_back(coin);\n+            if (coin.txout.nValue > fee) {\n+                CAmount long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                utxo_pool.push_back(InputCoinWithFee(std::move(coin), fee, long_term_fee));\n             }\n         }\n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n         return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n+        std::vector<CInputCoin> utxo_pool;\n         // Filter by the min conf specs and add to utxo_pool\n         for (const COutput &output : vCoins)\n         {\n             if (!OutputEligibleForSpending(output, eligibility_filter))\n                 continue;\n \n-            CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n+            CInputCoin coin(output.tx->tx, output.i);\n             utxo_pool.push_back(coin);\n         }\n         bnb_used = false;"
      }
    ]
  }
]