ajweiss,2015-05-04T16:07:14Z,Are you planning on supplying an RPC/regression test for this?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-98767292,98767292,
promag,2015-05-04T16:10:19Z,"That work was in previous PR. I can't see a use case where this is useful. Maybe @jmcorgan have something to say about that, otherwise I would remove this RPC call.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-98768493,98768493,
ajweiss,2015-05-04T16:22:32Z,"As far as I know, no RPC tests for ZMQ support have yet been PR'd.\n\nI think there might be some confusion here.  When I say RPC tests, I mean the Python regression tests that live qa/rpc-tests tree.  They're pretty much only called RPC tests because of history and the primary way they interface with bitcoind.  They exercise and verify many large bits of functionality and are always useful!  Case",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-98771316,98771316,
jonasschnelli,2015-05-04T18:38:38Z,@promag Nice that you have started recycle/update/rebase this!\nI have plans to test this during this week and therefore would be willing to write some RPC'like tests.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-98808690,98808690,
promag,2015-05-05T10:37:13Z,I'm planning to add the option -zmqformat=raw|json. This way a subscriber doesn't need to rely on 3rd libs to process the messages. What do you think?\nPending on #6108\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99028978,99028978,
jonasschnelli,2015-05-05T11:40:26Z,Would be nice if you could cherry-pick / pull-in this RPC/ZMQ test case:\nhttps://github.com/jonasschnelli/bitcoin/commit/91334e70ee5b2713ebbb7d5dbd6a5a29936aba66\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99052323,99052323,
jonasschnelli,2015-05-05T12:03:33Z,@promag: I would not add JSON support and keep ZMQ as clean and low-level as possible. Keeping it bin only can make things faster and with JSON there is always a risks of things get handled different during enc-/decoding of JSON streams depending on the library you use.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99060018,99060018,
jonasschnelli,2015-05-05T12:07:12Z,"Tested reviewed leak-checked ACK.\nnits: usage of `uiInterface` as ""signal layer""\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99061930,99061930,
jonasschnelli,2015-05-05T12:39:23Z,"nit:\nsignaling disconnect is missing\n\n``` diff\ndiff --git a/src/zmqports.cpp b/src/zmqports.cpp\nindex d083292..bd1229c 100644\n--- a/src/zmqports.cpp\n+++ b/src/zmqports.cpp\n@@ -155,6 +155,9 @@ void ZMQShutdown()\n\n         zmq_ctx_destroy(zmqContext);\n         zmqContext = 0;\n+\n+        uiInterface.NotifyBlockTip.disconnect(ZMQPublishBlock);\n+        uiInterface.NotifyRelayTx.disconnec",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99067391,99067391,
promag,2015-05-05T13:15:20Z,"@jonasschnelli Regarding the output formats, I don't think having JSON is that bad, it is just an option.\nActually I think we could support 3 formats for now:\n- network: currently supported\n- json: needs BlockToUni to convert to JSON (similar to RPC getblock)\n- hash: just send the block hash or txid (this allows a subscriber to queue the notification to process it later)\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99074984,99074984,
jonasschnelli,2015-05-05T13:21:06Z,"@promag I agree with 1 (p2p) and 3 (hash). IMO the ZMQ interface is a push/notify interface (for now). If someone like to get JSON output he could do a RPC request with received data. Adding JSON format over ZMQ level would just encourage user ""to go the wrong way"".\nAdding a way of only receiving hashes over ZMQ would be good.\nBut i'm ready to hear other opinions.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99076113,99076113,
sipa,2015-05-05T13:23:46Z,"Specifically for blocks, I'm not sure that pushing full blocks is even useful, unless we make it push all new blocks (including intermediary reorged ones). The interesting information is ""there is a new block chain tip, and this is it"".\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99076584,99076584,
promag,2015-05-05T13:27:37Z,@sipa consider the following use case: a subscriber wants to know if there are transactions (in the new block chain tip) with outputs targeting a set of addresses.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99077359,99077359,
promag,2015-05-05T13:37:28Z,I'm not sure if publishing a block of 20MB is problematic.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99079734,99079734,
sipa,2015-05-05T13:52:55Z,"That use case would not be covered, as the current code only reports the\nnew tip, not potential intermediate blocks that were connected as part of a\nreorganization.\n\nA possibility is reporting all new chain blocks, but what if this (due to a\nfork bug, perhaps) ends up reporting 100s of megabytes?\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99083743,99083743,
promag,2015-05-05T13:54:50Z,"@sipa right, so publishing the new tip hash and having the consumer walk the block chain would be more appropriate/secure.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99084210,99084210,
jonasschnelli,2015-05-05T13:59:29Z,For now i see the ZMQ extension as a notification-only one-way interface. I guess it's more optimized if a user gets informed about a new block **hash** (or new mempool tx **hash**) and then he decides if he likes to load the block with or without tx details over REST or RPC.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99085599,99085599,
promag,2015-05-05T14:04:25Z,Agree on network binary format and hash format? Other publish strategies can be discussed later after this PR.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99086882,99086882,
jonasschnelli,2015-05-05T14:05:11Z,@promag: i think you need to get rid of commit 454285518915d73e55674cf702bd0372a2da266e\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99087164,99087164,
promag,2015-05-05T14:31:37Z,@jonasschnelli rebased\nmissing updated doc and test to reflect multipart message\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99095760,99095760,
promag,2015-05-05T14:39:06Z,Should we use CValidationInterface instead of CClientUIInterface?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99098817,99098817,
sipa,2015-05-05T14:45:07Z,Yes.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99100905,99100905,
promag,2015-05-05T15:57:08Z,Pending questions:\n1. support network binary format and hash format?\n2. class name CZMQPublisher : public CValidationInterface?\n3. use CValidationInterface::SetBestChain instead of CClientUIInterface::NotifyBlockTip?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99123650,99123650,
sipa,2015-05-05T16:00:00Z,"1. Hash is enough for me. Binary makes sense if we make sure the full set of newly accepted blocks is announced.\n2. Sounds good.\n3. SetBestChain won't work, as it is only called after the best chain on disk is changed (which is infrequently). I'll write a patch to add the signals you need to CValidationInterface.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99124284,99124284,
promag,2015-05-05T16:03:07Z,"@sipa At the moment CValidationInterface is very related to CWallet, but it shouldn't right?\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99125552,99125552,
sipa,2015-05-05T16:03:41Z,@promag It used to be called CWalletInterface. We renamed it because it shouldn't be used exclusively for wallets.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99125730,99125730,
promag,2015-05-05T17:44:51Z,Later will address https://github.com/bitcoin/bitcoin/pull/5303#discussion-diff-26264618\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99155906,99155906,
jonasschnelli,2015-05-05T18:42:20Z,Will do additional tests when `UpdatedBlockTip` is ready.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99175489,99175489,
promag,2015-05-05T21:29:59Z,It seems Travis is not building with zeromq. Can this be addressed?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99228868,99228868,
theuni,2015-05-06T00:33:07Z,"@promag Yes. You'll need to add the dependency. You can pull this commit: https://github.com/theuni/bitcoin/commit/3661302abfca852a871b8b3cb406d5d10dfc33ae to get travis to test.\nEdit: Updated version: https://github.com/theuni/bitcoin/commit/eda02cf35626a6bc988aa9bd6df217df2a23c7ae\n\nNote, however, that the windows build currently fails because zeromq refuses to static-link with mingw. I chose ",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99272898,99272898,
promag,2015-05-06T09:09:53Z,@sipa if you like I can add the new signal to CValidationInterface. I suppose I can emit it before the NotifyBlockTip.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99391865,99391865,
promag,2015-05-06T10:07:39Z,@theuni BTW why static linking? and why not dynamic linking on travis because of http://docs.travis-ci.com/user/ci-environment/#Messaging-Technology\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99405316,99405316,
theuni,2015-05-06T17:41:30Z,"@promag Travis builds exactly as we build for release. The current build failure means that we wouldn't be able to package zeromq into a windows binary. Until that's fixed, failing is the right thing to do imo. The question is: is it worth it to try to work around their mingw situation, or just disable it for windows.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99548504,99548504,
jonasschnelli,2015-05-07T06:47:30Z,Having ZMQ for windows as well would be nice in near future. With ZMQ we could place a (daemon)script into the /contrib folder and deprecate the -notify features. IIRC there where serval issues with the -notify commands on windows.\n\n@promag: I think it would be nice if you could complete this and try to add the new signal to `CValidationInterface()`\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-99744736,99744736,
promag,2015-05-18T14:44:05Z,@theuni should we disable zmq in windows?\nping @sipa \n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-103083194,103083194,
promag,2015-05-20T15:41:48Z,Disabled zeromq in windows because zmq fails to build as a static lib in mingw.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-103931954,103931954,
jtimon,2015-05-22T06:32:10Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-104537176,104537176,
luke-jr,2015-05-23T20:03:42Z,Why not publish both formats and let clients choose which to subscribe to?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-104940082,104940082,
theuni,2015-05-23T21:41:31Z,"@promag That only disables the windows build for travis, not for anyone actually building for windows.\n\nPlease instead use something like:\n\n```\npackages:=boost openssl\npackages_darwin:=zeromq\npackages_linux:=zeromq\n```\n\nPlease also document the fact that it's unusable for Windows due to upstream build issues.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-104946990,104946990,
promag,2015-05-23T22:13:28Z,"@luke-jr you mean one address per format?\n@theuni right, will do.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-104950869,104950869,
luke-jr,2015-05-23T23:26:09Z,@promag I mean using ZeroMQ's topics so clients can filter which they want.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-104954799,104954799,
promag,2015-05-25T08:52:11Z,"@luke-jr Actually I was thinking removing the option to publish the entire transaction/block. The block will have a maximum size of 20mb. And writing all formats to the socket sequentially can cause some lag each time there is a new block. Also, at the moment, writing to the socket happens in the main thread, and the publisher should be as fast as possible.\n\nAt the moment we use the hash format,",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-105170976,105170976,
jtimon,2015-05-28T16:01:45Z,"In fact, apart from several formats and topics for PUB, we could allow the option of using either PUB or PUSH instead of forcing it to be PUB?\nPUSH should be much faster than PUB, for big things like blocks (both with 1 MB and 20 MB blocks, which is something completely orthogonal to this PR).\n\nEDIT: I think the option for a topic could be useful for smaller things like transactions, for exampl",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106444601,106444601,
promag,2015-05-29T09:01:49Z,"@jtimon IMHO this notification mechanism should be as simple as possible. Just publishing the event/hash is enough for the downstream to make RPC calls to get more information about blocks/transactions, including computed data which is not in the raw data, for instance, confirmations etc.\n\nIn our use case we tried to avoid RPC calls upstream, but ended giving up because we didn't want to miss th",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106750622,106750622,
jtimon,2015-05-29T10:06:18Z,"> @jtimon IMHO this notification mechanism should be as simple as possible. \n\nIMO it should be as flexible as possible. That's what I love most about zmq, anyway.\n\n> In our use case we tried to avoid RPC calls upstream, but ended giving up because we didn't want to miss the blockchain maintenance of bitcoind, ie, handling forks, double spends, etc. So, with this notifications we just avoid not",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106763520,106763520,
promag,2015-05-29T10:25:50Z,"@jtimon From http://api.zeromq.org/4-0:zmq-socket\n\n> When a ZMQ_PUSH socket enters the mute state due to having reached the high water mark for all downstream nodes, or if there are no downstream nodes at all, then any zmq_send(3) operations on the socket shall block until the mute state ends or at least one downstream node becomes available for sending; messages are not discarded.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106767109,106767109,
promag,2015-05-29T10:45:26Z,IMHO the true purpose of this PR is to eventually avoid/deprecate notify scripts. It should provide the CValidationInterface signals to the outside world. I agree with all that flexibility/options but for me it is out of scope of this PR.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106771184,106771184,
jtimon,2015-05-29T11:22:38Z,"Oh I see, of course, push is blocking when you don't have ready pullers...that has a simple solution: have pullers. That's a problem for the user to solve. IMO not a good reason not to support PUSH ( which is so similar to PUB in all other things).\n\nAbout the scope of this PR, sure, this doesn't have to do everything, but for example supporting PUB/SUB topics definitely seems within scope.\n\nIf",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106778056,106778056,
jtimon,2015-05-29T11:26:11Z,"So in summary, I would separate zmqpub into zmqpubtx and zmqpubblock or something similar, and I would add support for topics, everything else can be left for later.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106778450,106778450,
promag,2015-05-29T11:49:20Z,What you mean by zmqpubtx and zmqpubblock? Two pub sockets binded to different addresses?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106781668,106781668,
jmcorgan,2015-05-29T16:24:57Z,"On Fri, May 29, 2015 at 2:02 AM, João Barbosa notifications@github.com\nwrote:\n\n> Regarding the socket type, I wouldn't choose a socket where the send\n> operation is blocking as this could lead to, either internal queue in a\n> separate thread, or making bitcoind malfunction. Therefore, IIRC PUB/SUB is\n> the only type that has non-blocking send.\n\nThis is precisely the reason PUB was chosen w",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106863530,106863530,
ajweiss,2015-05-29T19:27:50Z,"This pull already implements topics via construction of multipart messages.  They are ""BLK"" and ""TXN"".  If the zmq library on the publisher side is recent enough, it will filter on the publisher side as per the subscriber's topic preferences.  \n\nThis, however, doesn't help all that much as ideally you'd want something that can tell whether or not anyone is subscribed to a topic so you can save t",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-106909421,106909421,
jtimon,2015-06-01T06:23:43Z,"> What you mean by zmqpubtx and zmqpubblock? Two pub sockets binded to different addresses?\n\nYes. well in fact maybe you want to connect both to the same socket, but yes the goal would be that you are able to configure them independently (maybe you confiure blocks but not transactions or viceversa).\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107320983,107320983,
luke-jr,2015-06-02T03:21:54Z,"If the goal is to merely notify of hashes, I suggest an external program triggered by -*notify may be better.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107786003,107786003,
promag,2015-06-02T09:59:06Z,"@luke-jr notify scripts only support wallet transactions and blocks. There is no support for mempool notifications (#6072).\n\nBeside that, executing a script for each hash is overkill, specially when lots of transactions change state like when the blockchain is incremented. Also, notify scripts execute in the same machine the bitcoind runs whereas sockets provide much more flexibility.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107904017,107904017,
jtimon,2015-06-02T10:37:25Z,"So does it make sense to be able to configure independent sockets for transactions and blocks?\nYou could still connect both to the same port instead of binding them, presumably used in combination of a zmq Forwarder or binding a single subscriber.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107912213,107912213,
luke-jr,2015-06-02T10:49:32Z,"@promag Ok, you've made your point. I suggest at least offering RPC over ZMQ though, but that's I guess out of scope here.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107914471,107914471,
jmcorgan,2015-06-02T13:37:16Z,"RPC over ZMQ is indeed out of scope on this pull request, but definitely worth considering.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-107955489,107955489,
promag,2015-06-03T16:27:42Z,Agree on discarding RPC for now.\n\nSo I think we could allow arguments -zmq{type}{format}{object}={address} where\n- type = pub (push in the future)\n- format = hash | raw\n- object = transaction | block\n- address = a valid zmq socket address\n\nExample:\n`-zmqpubhashblock=ipc:///tmp/bitcoin.block.hash -zmqpubrawtransaction=ipc:///tmp/bitcoin.transaction.raw`\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-108510944,108510944,
jtimon,2015-06-03T16:51:35Z,> Agree on discarding RPC for now.\n> \n> So I think we could allow arguments -zmq{type}{format}{object}={address} where\n> \n> type = pub (push in the future)\n> format = hash | raw\n> object = transaction | block\n> address = a valid zmq socket address\n\nSounds great to me.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-108521083,108521083,
promag,2015-06-03T17:27:38Z,"Ops, forgot to add the topic option, which is important if an address is shared. Unless topic is the same as the object.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-108535849,108535849,
promag,2015-06-05T17:28:40Z,"@jonasschnelli @jgarzik please review the refactor, still wip\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-109370385,109370385,
jonasschnelli,2015-06-05T20:09:19Z,"**This PR needs some love.**\n1. documentation out of date (or lets say out of sync because it's not yet available)\n2. `./contrib/zmq/zmq_sub.py` out of date, doesn't run.\n3. `./contrib/zmq/zmq_sub.py` as no `+x` (executable) flag like `linearize.py`, etc.\n4. zmq rpc test does not run, out of date\n5. the factory thing as well as the flexible `-zmq<pub><...>` feels over the top and should throw",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-109424805,109424805,
promag,2015-06-05T20:40:24Z,Agree but before polishing and squash I want to be sure that the refactor is acceptable.\n\nInstead of having lots of switch/ifs I added a notifier type for each type of notification. Later other types of notifications can be added easilly. If it's OK then I'll update everything.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-109433295,109433295,
jonasschnelli,2015-06-06T08:10:07Z,Another thing:\nIf i add `-zmqpubhashblock=tcp://127.0.0.1:28332 -zmqpubhashtransaction=tcp://127.0.0.1:2833` (both notification types) it won't send blockhashes through zmq (didn't analyze in detail).\n\nConceptual:\nI'm not sure if the flexible cmd arg is the right thing. It is like settings config values within a config arg key which feels somehow strange.\nAlso unsure why lots of things are co,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-109550770,109550770,
promag,2015-06-08T09:31:08Z,"@jonasschnelli Flexible command args is just a way to explain it here because of the multiple combinations. At then end the usage help will have listed just the notifiers supported. So, for instance, if command argument `-zmqpubhashblock` is defined then it will enable publishing hash blocks.\n\nI'll follow https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50356713 to avoid compiling zmq n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-109928485,109928485,
jonasschnelli,2015-06-11T19:37:50Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-111255244,111255244,
promag,2015-06-12T13:33:06Z,@jonasschnelli @wozz done\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-111494071,111494071,
nunofgs,2015-06-16T17:25:49Z,"@jtimon, @sipa, @jonasschnelli: is there a timeframe for merging this? Would love to see this in 0.12!\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-112504788,112504788,
rebroad,2015-06-16T18:56:30Z,"I don't see that anyone has asked this, and it doesn't seem to be mentioned, but: who would use this? Is it a majority or a small minority that would? If the latter, can this functionality be added with some sort of 3rd party utility instead? If so, then I don't think it ought to be included in Bitcoin Core as it would add bloat and reduce security.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-112528391,112528391,
jonasschnelli,2015-06-16T19:04:06Z,"@rebroad: I think consensus is that ZMQ (0mq) is desirable within bitcoin core (https://github.com/bitcoin/bitcoin/pull/2415, https://github.com/bitcoin/bitcoin/pull/5303) . At the moment, bitcoin-core users (including merchants, etc.) need to use `-blocknotify` and co. to get informed when a new block is available.\n\nZMQ would potential also allow to separate the wallet from the core and let the",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-112530220,112530220,
promag,2015-06-17T10:11:43Z,"@rebroad If you follow the discussion, and related pull requests, you will find enough arguments to deprecate notify scripts and have a non-intrusive notification interface.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-112744961,112744961,
jtimon,2015-06-17T16:51:50Z,"@nunofgs I don't know, whenever is merged? I already ut ACKedm I had some nits that go resolved... re ut ACK.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-112874951,112874951,
jonasschnelli,2015-06-18T19:22:28Z,"Hmm.. can't compile this PR.\n\nOSX:\n\n```\n  ""CZMQNotificationInterface::Initialize()"", referenced from:\n      AppInit2(boost::thread_group&, CScheduler&) in libbitcoin_server.a(libbitcoin_server_a-init.o)\n  ""CZMQNotificationInterface::CreateWithArguments(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-113264484,113264484,
promag,2015-06-19T00:48:05Z,@D9B4BEF9 what's the platform and zmq version?\n@jonasschnelli what's the zmq version?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-113331412,113331412,
jonasschnelli,2015-06-19T11:57:20Z,@promag: \nlinux: libzmq1 2.2.0+dfsg-2 (debian)\nosx: zeromq/4.0.5_2\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-113489408,113489408,
luke-jr,2015-06-24T07:07:19Z,zmqnotificationinterface.cpp and zmqpublishnotifier.cpp are missing #include <zmq.h>\n\nzmqpublishnotifier.cpp is missing copyright headers\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-114754466,114754466,
luke-jr,2015-07-03T03:35:59Z,Please cherry-pick and squash 5b2845feabe01f5b671c87bdb909b5b05202d068 and 52396aa65b9e2da7f82e5fd12d87b7a614493ca0\n\nThen you just need to make sure copyright headers are on all new files.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-118222253,118222253,
promag,2015-07-09T08:59:48Z,"@luke-jr done, thanks!\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-119880455,119880455,
D9B4BEF9,2015-07-17T05:00:12Z,"@jonasschnelli A clean build environment seems to have sorted out my problem of bitcoind just pegging a core, don't know what was going on there. \n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-122176238,122176238,
promag,2015-07-20T21:05:41Z,"@Diapolo thanks, fixed.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-123038892,123038892,
jgarzik,2015-07-23T19:35:15Z,"""it works"" lightly tested ACK.  Needs additional testing to make sure it builds/works on a few platforms.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-124219493,124219493,
promag,2015-07-25T08:13:48Z,@venzen Please update and try again.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-124819620,124819620,
venzen,2015-07-29T04:21:27Z,"@promag  thanks, now compiles and my SUB receives blocks and transactions. However, after an initial one minute spurt of PUBs, Core apparently stops sending `getdata` requests (peer connection activity continues but no new blocks or txns arrive), and an RPC `getrawmempool` shows the mempool is now empty. `bitcoind` process doesn't TERM and has to be KILLed .\n\nIf `bitcoind` is started without spe",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-125834591,125834591,
venzen,2015-07-30T06:59:45Z,"@promag OK, I've found the reason why I was getting the behavior mentioned above. It has to do with which notifiers one specifies on the commandline, and also on the combination of notifiers. Some combinations work, others don't. There are similar errors for different combinations.\n\nFirstly, these combinations work as expected:\n- hashblock + hashtx\n- rawblock + rawtx \n- rawblock + hashtx \n- ",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-126205016,126205016,
promag,2015-07-30T09:04:13Z,@venzen Thanks for the detailed report. Will look into it.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-126233626,126233626,
promag,2015-08-25T10:18:51Z,@venzen can you specify the zmq addresses for each case? Were you using the same address for multiple topics? tpc or ipc?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-134547613,134547613,
promag,2015-08-25T11:25:16Z,@venzen Fixed and rebased. Tested your combinations and it's working. Please test again.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-134558726,134558726,
promag,2015-08-26T22:53:16Z,@jonasschnelli @jgarzik @luke-jr @theuni @sipa do you want to review/test?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135199496,135199496,
jtimon,2015-08-27T00:09:21Z,Untested re-ACK. I'm looking forward to this being finally merged.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135212498,135212498,
promag,2015-08-27T10:15:49Z,@jonasschnelli by default if libzmq is found then it will enabled zmq unless it's disabled on configure. That was discussed: \nhttps://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50409819.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135371638,135371638,
promag,2015-08-27T15:29:40Z,@jonasschnelli fixed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135469674,135469674,
jonasschnelli,2015-08-27T15:36:29Z,"Did some testing.\n\nRPC Test is broken, please cherry pick: https://github.com/jonasschnelli/bitcoin/commit/4e1859a0a55291e67bb8acf3028039668ecfd32b\n\nRPC test sometimes fail (not always).\nWhen calling `generate(10)` sometimes it will result in:\n(11 transactions but only 9 blocks)\n\n```\nhashtx\nhashtx\nhashtx\nhashblock\nhashtx\nhashblock\nhashtx\nhashblock\nhashtx\nhashblock\nhashtx\nhashbl",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135471393,135471393,
dcousens,2015-08-28T01:13:08Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135596462,135596462,
promag,2015-08-28T14:26:50Z,"@jonasschnelli thanks! However the problem is in the test, see https://github.com/jonasschnelli/bitcoin/commit/4e1859a0a55291e67bb8acf3028039668ecfd32b#commitcomment-12948902.\nFixed your commit and eventually will squash. Please check again.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135787947,135787947,
promag,2015-08-28T15:23:14Z,FYI how I run the test: `python qa/rpc-tests/zmq_test.py --srcdir src/`\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135805134,135805134,
jonasschnelli,2015-08-28T15:33:01Z,@promag: Yes. Thats right. The `rpc-tests.sh` will get called during travis CI builds.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135807711,135807711,
theuni,2015-08-28T16:15:53Z,"Travis will support it as long as it's installed via depends. However Windows isn't using it right now.\n\nWe'll need to add a variable to qa/pull-tester/tests-config.sh.in similar to the ENABLE_WALLET case. \n\nThere are a few other issues I noticed in the configure.ac changes, I'll fix those things up and provide a patch.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-135822630,135822630,
promag,2015-09-01T09:09:56Z,@theuni just bumping in case you forgot.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-136643464,136643464,
theuni,2015-09-02T03:18:44Z,"@promag Thanks, indeed I did. I'll get to this asap.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-136923055,136923055,
theuni,2015-09-02T21:27:50Z,"@promag it's going to be a few days before I can get to the configure changes, but the rpc-tests should be pretty trivial:\n\n``` patch\ndiff --git a/qa/pull-tester/tests-config.sh.in b/qa/pull-tester/tests-config.sh.in\nindex 10f4d33..e881a95 100755\n--- a/qa/pull-tester/tests-config.sh.in\n+++ b/qa/pull-tester/tests-config.sh.in\n@@ -10,6 +10,7 @@ EXEEXT=""@EXEEXT@""\n @ENABLE_WALLET_TRUE@ENABLE_W",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-137249512,137249512,
jtimon,2015-09-04T15:24:31Z,Needs rebase (I'm asuming after #5677 ).\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-137765561,137765561,
theuni,2015-09-09T16:30:31Z,"@promag looks great, assuming it works as intended\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-138964466,138964466,
promag,2015-09-10T15:03:07Z,@laanwj @sipa any chance this feature be in the next release? \n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139273453,139273453,
sipa,2015-09-10T15:20:36Z,"I'm not convinced that the current implementation of sending a full block (""rawblock"") makes sense.\n\nThe hashes published by UpdatedBlockTip indicate a new block tip, which in the case of a reorganization from chain A-B to A-C-D, will only notify for B and for D, but not for C. This is useful - it's an indication that you need to go query block D, and if you don't have its ancestor, query that t",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139277661,139277661,
promag,2015-09-10T16:13:31Z,"@sipa \n\n> I'm not convinced that the current implementation of sending a full block (""rawblock"") makes sense. The hashes published by UpdatedBlockTip indicate a new block tip, which in the case of a reorganization from chain A-B to A-C-D, will only notify for B and for D, but not for C. This is useful - it's an indication that you need to go query block D, and if you don't have its ancestor, que",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139297519,139297519,
promag,2015-09-10T19:44:27Z,"@sipa \n\n> Code looks good, but as mentioned elsewhere, I don't think this is useful\n> in its current form. If the receiver only receives the blocks that happen\n> to be at the tip after a reorg, they need a separate mechanism to fetch the\n> potential unannounced ancestors anyway, making the ability to receive full\n> blocks immediately unnecessary and confusing.\n\nThe subscriber must always q",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139358156,139358156,
sipa,2015-09-10T19:51:28Z,"I'm just questioning what relaying full blocks adds (as opposed to just\nhashes), because the receiver should still have logic to fetch missing\nblocks in between the previous tip and the new tip.\n\nAgain: if you switch from a branch A-B-C-D for example to A-B-C'-D'-E, the\ncurrent code will only publish E, and not C' or D'. The publisher still\nneeds to fetch E's ancestors one by one with the cu",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139361434,139361434,
jtimon,2015-09-10T20:38:25Z,"Those 2 things are unrelated, full blocks are only allowed optionally to maintain a consistent interface with the transactions (and other types that may be supported un the future). It may be the case that nobody subscribes to raw blocks (and I believe @promag didn't wanted to support full blocks). Take into account that we may add push/pull and/or req/rep in the future (let's finally do this firs",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139372313,139372313,
promag,2015-09-10T20:39:57Z,+1 what @jtimon said.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139372689,139372689,
sipa,2015-09-10T21:04:18Z,"I disagree. What you're publishing is not blocks. It is updates to the chain tip. Sure, there is an actual block associated with that tip, but it's not a natural mapping. You could as well give the chainwork of that tip, or the time.\n\nThe documentation is equally confusing: ""As transactions and blocks arrive via the P2P network, Bitcoin Core will apply all the validation and standardization rule",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139378234,139378234,
jtimon,2015-09-10T21:20:18Z,"> Only publish the chain tip updates as hashes. That's exactly what -blocknotify does. The subscriber is expected to fetch the actual blocks whenever a notification happens.\n\nI believe this is the expected usage rigt now (even if it full blocks don't make much sense with this).\n\n> After a reorg, publish all blocks that were activated through ZMQ. That will allow a subscriber who is already up-",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139382482,139382482,
promag,2015-09-10T21:31:43Z,"Sure, the doc needs fixing. The option `-blocknotify` states\n\n```\n -blocknotify=<cmd>\n       Execute command when the best block changes (%s in cmd is replaced by\n       block hash)\n```\n\nAnd I would go for something like that.\n\n2nd is not viable, since the publisher should not assume the subscriber is up to date. The subscriber should have the option to not receive the (all supposed) mis",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139385314,139385314,
sipa,2015-09-10T21:32:31Z,"I think that supporting full blocks encourages people to use it in an\nincorrect way, by only using those blocks and not taking reorganizations\ninto account.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139385449,139385449,
promag,2015-09-10T21:35:43Z,How does just the hash encourages to take reorganizations into account?\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139386041,139386041,
sipa,2015-09-10T21:38:22Z,Just the hash is perfectly fine. That's what blocknotify does.\n\nSending the full block corresponding to the new tip encourages bad\npractice. People may not realize that it does not relay all blocks.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139386537,139386537,
promag,2015-09-10T21:40:00Z,"I still don't see how just the hash solves that problem. People will get the hash, query the block and then it's the same as receiving the full block.\nEdit: and again, it's just an option, and I believe we could just add remarks in the documentation.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139386878,139386878,
sipa,2015-09-10T21:46:56Z,"No, they need to get the hash, query the block, see if they have the\nancestor of the block, if not, query that, etc.\n\nIf you give them the blocks already, it will look like they don't need this\nrecursive fetch logic for ancestors. And it will work fine, except when\nthere is a reorg, in which they only receive the new tip, and not the block\nbefore.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139388147,139388147,
jgarzik,2015-09-10T21:53:51Z,"In general, agree w/ @sipa, just the hash on the first iteration.\n\nLonger term, it is forseeable that some folks looking for low latency may prefer full blocks versus added round-trips.  Such solutions would have a fast path - zero round trip - and a slower path fallback in case the full block was insufficient, and further block-locator style queries are needed.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139391295,139391295,
promag,2015-09-10T21:54:35Z,"So it's the same: a client gets the full block, check if the parent is there, if not retrieve and repeat.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139391691,139391691,
promag,2015-09-10T21:56:59Z,"@jgarzik also agree. I just don't agree that having just the hash option leads the subscriber to take reorgs into account.\nEdit: with just the hash, the subscriber could as well retrieve the tip and miss some blocks without recognising it.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139392466,139392466,
jtimon,2015-09-10T21:57:02Z,"Yes, I fail to see the difference as well.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139392485,139392485,
sipa,2015-09-10T22:01:35Z,"@promag If implemented correctly, there is no difference. You can present it as an optimization: ""This informs you about the new chain tip, and as courtesy, we already give you the last block immediately so you don't need to fetch it"". But I think the current interface gives the impression that it will relay all validated blocks, which is wrong and leads to incorrect understanding. The documentati",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139394307,139394307,
jtimon,2015-09-10T22:09:23Z,"Then only the documentation needs to be fixed?\nOn Sep 10, 2015 6:02 PM, ""Pieter Wuille"" notifications@github.com wrote:\n\n> @promag https://github.com/promag If implemented correctly, there is no\n> difference. You can present it as an optimization: ""This informs you about\n> the new chain tip, and as courtesy, we already give you the last block\n> immediately so you don't need to fetch it"". But",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139396764,139396764,
sipa,2015-09-10T22:11:20Z,"I think many people don't grasp the difference between relaying blocks and chain tip updates, and the fact that this pull request was written with documentation that confuses the two is an indication of that. Don't make the simplest way of using it the wrong one.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139397086,139397086,
sipa,2015-09-10T22:14:16Z,"Anyway, it seems my opinion is controversial here. I'm fine with merging if the documentation is fixed, but I would really prefer to not have a mechanism that makes it this easy to misunderstand.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139397609,139397609,
sipa,2015-09-10T22:18:19Z,"Also, sorry for hammering on this one detail. I'm very happy with the pull request overall and would like to see it merged soon.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139398271,139398271,
promag,2015-09-10T22:19:01Z,"My point is that even `-blocknotify` leads to that problem, and it should be noted elsewhere that a reorg may not call the script for some blocks.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139398397,139398397,
jtimon,2015-09-10T22:20:12Z,"> Anyway, it seems my opinion is controversial here. I'm fine with merging\n> if the documentation is fixed, but I would really prefer a mechanism that\n> doesn't make it this easy to misunderstand.\n\nAssuming users read the updated docs, I don't see how offering noth\nonly-hash or full blocks is more confusing than only offering hash-only.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139398591,139398591,
sipa,2015-09-10T22:21:06Z,"@jtimon Assuming users read the updated docs...\n\n@promag Agree, it could be clearer there too.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139398744,139398744,
promag,2015-09-11T00:39:36Z,@jonasschnelli @jgarzik @jtimon please review the documentation change.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139419149,139419149,
jonasschnelli,2015-09-11T07:15:48Z,"Just git a build error on debian:\n\n```\n./configure --enable-debug --with-gui=no\n[...]\nchecking whether to build ZMQ support... yes\nchecking for ZMQ... yes\n[...]\nmake -j5\n[...]\n  CXX      wallet/libbitcoin_wallet_a-walletdb.o\nzmq/zmqpublishnotifier.cpp: In function ‘int zmq_send_multipart(void*, const void*, size_t, ...)’:\nzmq/zmqpublishnotifier.cpp:36:61: error: ‘zmq_msg_send’ was not ",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139470309,139470309,
jonasschnelli,2015-09-11T07:20:30Z,"Using `libzmq3` solved the problem. But IIRC, Debian 7 (wheezy) does not support libzmq3 out of the standard repository. A tiny check during `./configure` would be nice.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139470828,139470828,
promag,2015-09-11T09:08:24Z,"> Using libzmq3 solved the problem. But IIRC, Debian 7 (wheezy) does not support libzmq3 out of the standard repository. A tiny check during ./configure would be nice.\n\n@theuni can you take a look?\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-139494230,139494230,
jgarzik,2015-09-15T16:09:54Z,"In general, this appears merge-ready once\n- travis is happy\n- the @sipa lock comment is addressed.\n\nWe can iterate further once it's in-tree.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-140446419,140446419,
jonasschnelli,2015-09-15T16:16:44Z,"Agree with @jgarzik. There are serval proposal for improvements (autodetect libzmq3, avoid locking by passing `CBlockIndex*`, minor cleanups), but shouldn't hold back the merge.\nThe only thing that might should be looked at is the travis issue: https://travis-ci.org/bitcoin/bitcoin/jobs/79866093. Maybe its not related to this PR. Maybe a rebase&force-push solves that issue.\n",https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-140448404,140448404,
promag,2015-09-16T10:33:03Z,@jonasschnelli rebase@force-push solved.\n@laanwj @sipa I believe it's all in place to merge.\n,https://github.com/bitcoin/bitcoin/pull/6103#issuecomment-140700241,140700241,
ajweiss,2015-05-04T16:01:02Z,This entire file needs to be retabbed.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29596655,29596655,src/zmqports.cpp
sipa,2015-05-04T16:13:07Z,"As mentioned in one of the previous PRs, block acceptance is really not interesting or useful. It does not mean the block is part of the best chain, or even that it is valid. Use the NotifyBlockTip signal place, which indicates a new tip of the best chain was accepted.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29597688,29597688,src/ui_interface.h
jonasschnelli,2015-05-05T06:52:56Z,"L39: s/`LogPrint`/`LogPrintf` otherwise you start introducing a debug category with string identifier `""ZMQ error: %s, errno=%s\n""`.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29646858,29646858,src/zmqports.cpp
jonasschnelli,2015-05-05T06:57:15Z,this should be: `bitcoind -zmqpub=tcp://127.0.0.1:28332` (~~dash~~ colon instead slash before port)\nEdit: dash / colon\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29646980,29646980,doc/zmq.md
jonasschnelli,2015-05-05T07:00:54Z,Does it make sense to use the uiInterface `CClientUIInterface` as signaling layer for zmq? Or would it be better to introduce a custom signaling class/struct?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29647082,29647082,src/zmqports.cpp
jonasschnelli,2015-05-05T07:27:29Z,What's the use case of `getzmqurl`? Why should someone need to get the ZMQ URL over RPC?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29648007,29648007,src/rpcserver.cpp
jonasschnelli,2015-05-05T07:59:11Z,I think this line can be removed. Also L112.\nSee also: https://github.com/bitcoin/bitcoin/blob/master/src/rpcblockchain.cpp#L308 and https://github.com/bitcoin/bitcoin/blob/master/src/rest.cpp#L182\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29649282,29649282,src/zmqports.cpp
promag,2015-05-05T09:53:56Z,fixed in upcoming commit\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655661,29655661,doc/zmq.md
promag,2015-05-05T09:54:53Z,I've changed this to use zeromq multipart messages. Changed in upcoming commit\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655725,29655725,src/zmqports.cpp
promag,2015-05-05T09:55:00Z,Removed in upcoming commit\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655732,29655732,src/rpcserver.cpp
promag,2015-05-05T09:55:43Z,I believe this discussion should happen in a different PR.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655767,29655767,src/zmqports.cpp
promag,2015-05-05T09:56:01Z,Fixed in upcoming commit\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655781,29655781,src/ui_interface.h
promag,2015-05-05T09:56:36Z,Fixed in upcoming commit\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29655814,29655814,src/zmqports.cpp
promag,2015-05-05T10:29:54Z,I believe this is the right way of getting a block.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29657727,29657727,src/zmqports.cpp
jonasschnelli,2015-05-05T11:21:33Z,I didn't say it has to be removed. I just don't see a usecase for this. Maybe @jgarzik can roll this up?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29660299,29660299,src/rpcserver.cpp
jonasschnelli,2015-05-05T11:28:05Z,Is the reason why the `#ifdefs` are here instead of wrapping the code-part in `init.cpp` to lower the #ifdef in `init.cpp`? Maybe also something for @jgarzik to answer.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29660573,29660573,src/zmqports.h
promag,2015-05-05T11:37:06Z,FYI https://github.com/bitcoin/bitcoin/pull/4594#issuecomment-50352710\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29661012,29661012,src/zmqports.h
jonasschnelli,2015-05-05T11:42:19Z,@promag: Thanks. Yes this makes sense.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29661290,29661290,src/zmqports.h
jonasschnelli,2015-05-05T11:42:49Z,Or maybe something for @jmcorgan\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29661313,29661313,src/rpcserver.cpp
jonasschnelli,2015-05-05T11:47:33Z,"typo: should be `ZMQInitialize(mapArgs[""-zmqpub""]);` (mind the dash)\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29661529,29661529,src/init.cpp
jonasschnelli,2015-05-05T12:32:00Z,nit: L128 has whitespace.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29663747,29663747,src/zmqports.cpp
promag,2015-05-05T17:12:25Z,"waiting @sipa patch, for now assuming UpdatedBlockTip exists in CValidationInterface.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29690327,29690327,src/zmqports.h
promag,2015-05-05T17:13:06Z,Not sure if this is OK or NETWORK_FORMAT. Same for HashFormat.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29690371,29690371,src/zmqports.h
promag,2015-05-05T17:13:45Z,@jonasschnelli is this OK?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29690427,29690427,src/zmqports.cpp
jonasschnelli,2015-05-05T18:41:59Z,LGTM.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r29699244,29699244,src/zmqports.cpp
jonasschnelli,2015-05-19T15:44:04Z,s/-zmqformat=hash|network**>**/-zmqformat=**<**hash|network**>**/\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r30613243,30613243,src/init.cpp
jonasschnelli,2015-06-05T19:58:08Z,It looks like that this is not implemented like that. Example: `zmqpubrawblock` is not supported. Only `zmqpubhashblock` and `zmqpubhashtransaction` is supported IMO. At least the should be a warning or error if you try to add a zmq channel which is not supported.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r31846217,31846217,src/init.cpp
promag,2015-06-05T20:35:07Z,As stated it's just an initial version to ask for comments. The usage help will havê the supported options.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r31849061,31849061,src/init.cpp
wozz,2015-06-12T12:45:41Z,extra port\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r32312285,32312285,contrib/zmq/zmq_sub.py
wozz,2015-06-12T12:45:59Z,this is out of sync\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r32312302,32312302,doc/zmq.md
jonasschnelli,2015-06-18T18:39:38Z,Linebreak is wrong.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r32763544,32763544,doc/zmq.md
jonasschnelli,2015-06-18T18:43:11Z,IMO better mention `contrib/zmq/zmq_sub.py` here. Otherwise we have to maintain two python examples.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r32763968,32763968,doc/zmq.md
promag,2015-06-19T00:49:00Z,"@jonasschnelli I had the same feeling, will do it.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r32793673,32793673,doc/zmq.md
Diapolo,2015-07-17T07:33:06Z,"Nit: IMHO the ZMQ header stuff should go below std headers and below boost, openssl etc (header group ordering). And I'm talking about all includes, not just this one.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34867886,34867886,src/init.cpp
Diapolo,2015-07-17T07:35:11Z,Nit: `if (pzmqNotificationInterface) {` as sometime in the future this will be the default code formatting (clang cleanup).\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34867989,34867989,src/init.cpp
Diapolo,2015-07-17T07:36:05Z,Nit: Misses a `:` at the end.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868047,34868047,src/init.cpp
Diapolo,2015-07-17T07:38:05Z,This needs to be `BITCOIN_ZMQ_ZMQCONFIG_H` also don't forget the header end comment.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868133,34868133,src/zmq/zmqconfig.h
Diapolo,2015-07-17T07:38:48Z,"This is duplicated and also the includes look weird, perhaps some merge-conflict-leftover?\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868167,34868167,src/zmq/zmqconfig.h
Diapolo,2015-07-17T07:39:18Z,Needs to be `BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H` also as header end comment.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868194,34868194,src/zmq/zmqabstractnotifier.h
Diapolo,2015-07-17T07:40:03Z,"Is this needed, seems it's coming from the custom zmq headers.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868229,34868229,src/zmq/zmqnotificationinterface.cpp
Diapolo,2015-07-17T07:42:04Z,Unneeded `.c_str()` and there are some more in here.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868295,34868295,src/zmq/zmqpublishnotifier.cpp
Diapolo,2015-07-17T07:44:51Z,Needs to be `BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H` also at the header end comment.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r34868403,34868403,src/zmq/zmqpublishnotifier.h
promag,2015-08-25T11:07:22Z,"Found bug here: 3rd statement `++i` shouldn't be there.\n@venzen I believe this is related to you problem, because with only one publisher the loop doesn't ends.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r37853617,37853617,src/zmq/zmqnotificationinterface.cpp
jonasschnelli,2015-08-27T08:09:57Z,I think this should be `--enable-zqm` (@theuni?)\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38071295,38071295,configure.ac
jonasschnelli,2015-08-27T14:39:01Z,nit: Remove this line?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38102514,38102514,src/main.cpp
jonasschnelli,2015-08-27T14:40:56Z,nit: s/i ++/i++?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38102760,38102760,src/zmq/zmqnotificationinterface.cpp
jonasschnelli,2015-08-27T14:51:58Z,nit: HASH BLOK  (missing C)\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38104172,38104172,contrib/zmq/zmq_sub.py
jonasschnelli,2015-08-28T14:41:12Z,I think we need to move the `zmq_test.py` to the `testScriptsExt` list otherwise travis cannot find the zmq python module. Maybe there is also a way to make travis support python/zmq.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38206505,38206505,qa/pull-tester/rpc-tests.sh
promag,2015-08-28T15:00:57Z,"I'll remove for now, waiting @theuni feedback. \n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r38208834,38208834,qa/pull-tester/rpc-tests.sh
sipa,2015-09-10T15:12:07Z,s/BLOK/BLOCK/\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39171541,39171541,contrib/zmq/zmq_sub.py
sipa,2015-09-10T15:14:10Z,You need a cs_main lock here.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39171763,39171763,src/zmq/zmqpublishnotifier.cpp
sipa,2015-09-10T15:23:28Z,"Alternatively, if you send CBlockIndex\* pointers in the signal rather than the hash, you don't need to. It's the access to mapBlockIndex that's problematic.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39172953,39172953,src/zmq/zmqpublishnotifier.cpp
sipa,2015-09-10T15:25:28Z,"This does not seem to contain any code written by Satoshi, or before 2014 :)\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39173246,39173246,src/zmq/zmqpublishnotifier.h
sipa,2015-09-10T15:26:40Z,You duplicated UpdatedTransaction here.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39173399,39173399,src/validationinterface.cpp
sipa,2015-09-10T15:32:25Z,"This is not actually correct in the current implementation. You'd need to use CValidationInterface's BlockChecked signal if you want that (see an example in rpcmining.cpp for submitblock).\n\nI think it's very important to make this distinction: what does the ZMQ block interface notify you about? Validated blocks or the accepted block chain? The first can include things like orphaned blocks, does ",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39174238,39174238,doc/zmq.md
promag,2015-09-10T15:55:48Z,Replace with just `// Copyright (c) 2015 The Bitcoin Core developers`?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39177157,39177157,src/zmq/zmqpublishnotifier.h
sipa,2015-09-10T16:06:56Z,Or your own name.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39178507,39178507,src/zmq/zmqpublishnotifier.h
promag,2015-09-10T16:13:46Z,Will review this.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39179299,39179299,doc/zmq.md
sipa,2015-09-10T22:05:28Z,"The subscriber has no way to verify that the published block is invalid - it would need a full node for that, and that's exactly what the ZMQ interface is for.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39220397,39220397,doc/zmq.md
promag,2015-09-10T22:16:21Z,"Yeah, reviewing and updating the doc.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39221461,39221461,doc/zmq.md
sipa,2015-09-10T22:17:52Z,Thanks!\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39221579,39221579,doc/zmq.md
jonasschnelli,2015-09-11T06:35:32Z,"nit: still think we we should use `--enable-zmq` with a default `yes`. This would conform with `--enable-wallet`, etc.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39244609,39244609,configure.ac
jonasschnelli,2015-09-11T06:58:44Z,"If I'm right and understand @sipa idea correct, `ReadBlockFromDisk()` not requires a `cs_main` lock. Passing a `CBlockIndex*` would make `CBlockIndex* pblockindex = mapBlockIndex[hash];` at L153 no longer required.\nThe whole cs_main LOCK could then be removed.\n\nWe should definitively do this to keep bitcoin-core more responsive and lock free.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39245516,39245516,src/zmq/zmqpublishnotifier.cpp
jonasschnelli,2015-09-11T07:03:54Z,nit: remove `L1` AND `s/2009-2014/2015`?\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39245793,39245793,src/zmq/zmqpublishnotifier.cpp
jonasschnelli,2015-09-11T07:22:38Z,nit: i think this include can be removed. Compiles fine on OSX/Debian without this include.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39246806,39246806,src/zmq/zmqnotificationinterface.cpp
jonasschnelli,2015-09-11T07:22:51Z,nit: I think this include can be removed. Compiles fine on OSX/Debian without this include.\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39246816,39246816,src/zmq/zmqpublishnotifier.cpp
jtimon,2015-09-11T16:29:17Z,Are you sure this is not because net.h is included in main.h? The same goes for the other removed include [ie netbase.h is included in net.h iirc].\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39289113,39289113,src/zmq/zmqpublishnotifier.cpp
sipa,2015-09-11T19:16:14Z,"Whenever you use something defined by a header H in X.c, H needs to be\n#included by either X.c or X.h.\n\nYou should not remove #includes because they're already included by one of\nthe dependencies. That leads to unclear dependency graphs, and may cause\nbreakage when dependencies change.\n",https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39306734,39306734,src/zmq/zmqpublishnotifier.cpp
jgarzik,2015-09-15T16:06:47Z,Agree with the nit (though it's not a merge blocker)\n,https://github.com/bitcoin/bitcoin/pull/6103#discussion_r39529608,39529608,configure.ac
