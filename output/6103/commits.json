[
  {
    "sha": "5624e055b310284e8dfd68833eea7f7246316354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjI0ZTA1NWIzMTAyODRlOGRmZDY4ODMzZWVhN2Y3MjQ2MzE2MzU0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-05-07T14:49:00Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-09-16T09:59:32Z"
      },
      "message": "Add UpdatedBlockTip signal to CMainSignals and CValidationInterface",
      "tree": {
        "sha": "9cae42ce1aaac7a71583db94134db33f80906d66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cae42ce1aaac7a71583db94134db33f80906d66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5624e055b310284e8dfd68833eea7f7246316354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5624e055b310284e8dfd68833eea7f7246316354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5624e055b310284e8dfd68833eea7f7246316354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5624e055b310284e8dfd68833eea7f7246316354/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9733bc99a0b967522ff47e00f4d8e408e6ee5c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9733bc99a0b967522ff47e00f4d8e408e6ee5c4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9733bc99a0b967522ff47e00f4d8e408e6ee5c4f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "27278b977aa529b602d91e579f3a7a10d352e474",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5624e055b310284e8dfd68833eea7f7246316354/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5624e055b310284e8dfd68833eea7f7246316354/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5624e055b310284e8dfd68833eea7f7246316354",
        "patch": "@@ -2303,6 +2303,7 @@ bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n                         pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n             }\n             // Notify external listeners about the new tip.\n+            GetMainSignals().UpdatedBlockTip(hashNewTip);\n             uiInterface.NotifyBlockTip(hashNewTip);\n         }\n     } while(pindexMostWork != chainActive.Tip());"
      },
      {
        "sha": "bdb7069071aec150e9eeb4e824bead4a5894b280",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5624e055b310284e8dfd68833eea7f7246316354/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5624e055b310284e8dfd68833eea7f7246316354/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=5624e055b310284e8dfd68833eea7f7246316354",
        "patch": "@@ -13,6 +13,7 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n@@ -32,6 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n }\n \n void UnregisterAllValidationInterfaces() {\n@@ -43,6 +45,8 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.SyncTransaction.disconnect_all_slots();\n+    g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n \n void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {"
      },
      {
        "sha": "6f95ad74eb30800541acaba5aae6db891e7d7c81",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5624e055b310284e8dfd68833eea7f7246316354/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5624e055b310284e8dfd68833eea7f7246316354/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=5624e055b310284e8dfd68833eea7f7246316354",
        "patch": "@@ -30,6 +30,7 @@ void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n \n class CValidationInterface {\n protected:\n+    virtual void UpdatedBlockTip(const uint256 &newHashTip) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n@@ -44,6 +45,8 @@ class CValidationInterface {\n };\n \n struct CMainSignals {\n+    /** Notifies listeners of updated block chain tip */\n+    boost::signals2::signal<void (const uint256 &)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      }
    ]
  },
  {
    "sha": "1136879df8af2358efb706c5af886778fbd94989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM2ODc5ZGY4YWYyMzU4ZWZiNzA2YzVhZjg4Njc3OGZiZDk0OTg5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-05-06T00:30:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-09-16T09:59:32Z"
      },
      "message": "Depends: Add ZeroMQ package",
      "tree": {
        "sha": "a4082a5dbd33bc7373055989902ada818172a038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4082a5dbd33bc7373055989902ada818172a038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1136879df8af2358efb706c5af886778fbd94989",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1136879df8af2358efb706c5af886778fbd94989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1136879df8af2358efb706c5af886778fbd94989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1136879df8af2358efb706c5af886778fbd94989/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5624e055b310284e8dfd68833eea7f7246316354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5624e055b310284e8dfd68833eea7f7246316354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5624e055b310284e8dfd68833eea7f7246316354"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc1e5f0b684a988a76562fa8beece8e2ccdcf8ff",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1136879df8af2358efb706c5af886778fbd94989/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1136879df8af2358efb706c5af886778fbd94989/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=1136879df8af2358efb706c5af886778fbd94989",
        "patch": "@@ -1,4 +1,6 @@\n packages:=boost openssl libevent\n+packages_darwin:=zeromq\n+packages_linux:=zeromq\n native_packages := native_ccache native_comparisontool\n \n qt_native_packages = native_protobuf"
      },
      {
        "sha": "24e8e5f1c910aa33271436a20e2f00bb8097dad7",
        "filename": "depends/packages/zeromq.mk",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1136879df8af2358efb706c5af886778fbd94989/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1136879df8af2358efb706c5af886778fbd94989/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=1136879df8af2358efb706c5af886778fbd94989",
        "patch": "@@ -0,0 +1,26 @@\n+package=zeromq\n+$(package)_version=4.0.4\n+$(package)_download_path=http://download.zeromq.org\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=1ef71d46e94f33e27dd5a1661ed626cd39be4d2d6967792a275040e34457d399\n+\n+define $(package)_set_vars\n+  $(package)_config_opts=--without-documentation --disable-shared\n+  $(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) -C src\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) -C src DESTDIR=$($(package)_staging_dir) install\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf bin share\n+endef"
      },
      {
        "sha": "c6181c48ca836d3c93d696bb4a89d9610983ef65",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1136879df8af2358efb706c5af886778fbd94989/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1136879df8af2358efb706c5af886778fbd94989/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=1136879df8af2358efb706c5af886778fbd94989",
        "patch": "@@ -59,6 +59,10 @@ testScriptsExt=(\n     'p2p-acceptblock.py'\n );\n \n+if [ \"x$ENABLE_ZMQ\" = \"x1\" ]; then\n+  testScripts=( ${testScripts[@]} 'zmq_test.py' )\n+fi\n+\n extArg=\"-extended\"\n passOn=${@#$extArg}\n "
      },
      {
        "sha": "e881a95110487649cdac258ea7e6fe6fdce457d8",
        "filename": "qa/pull-tester/tests-config.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1136879df8af2358efb706c5af886778fbd94989/qa/pull-tester/tests-config.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1136879df8af2358efb706c5af886778fbd94989/qa/pull-tester/tests-config.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests-config.sh.in?ref=1136879df8af2358efb706c5af886778fbd94989",
        "patch": "@@ -10,6 +10,7 @@ EXEEXT=\"@EXEEXT@\"\n @ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n @BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n \n REAL_BITCOIND=\"$BUILDDIR/src/bitcoind${EXEEXT}\"\n REAL_BITCOINCLI=\"$BUILDDIR/src/bitcoin-cli${EXEEXT}\""
      }
    ]
  },
  {
    "sha": "e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmExNGI2NGQ2NjVlYjFmYWZkMDNhNmJiYzhkMTQ1OTdjZTFjODNj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-11-18T17:06:32Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-09-16T10:01:35Z"
      },
      "message": "Add ZeroMQ support. Notify blocks and transactions via ZeroMQ\n\nContinues Johnathan Corgan's work.\nPublishing multipart messages\n\nBugfix: Add missing zmq header includes\n\nBugfix: Adjust build system to link ZeroMQ code for Qt binaries",
      "tree": {
        "sha": "bfefc581188fb56413c6d29cde625b0395faebc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfefc581188fb56413c6d29cde625b0395faebc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/comments",
    "author": null,
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1136879df8af2358efb706c5af886778fbd94989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1136879df8af2358efb706c5af886778fbd94989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1136879df8af2358efb706c5af886778fbd94989"
      }
    ],
    "stats": {
      "total": 721,
      "additions": 717,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9955ab9bf786c69befce67a5243374888ebe9d8b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -137,6 +137,12 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([zmq],\n+  [AC_HELP_STRING([--disable-zmq],\n+  [Disable ZMQ notifications])],\n+  [use_zmq=$enableval],\n+  [use_zmq=yes])\n+\n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n # Enable debug \n@@ -833,6 +839,22 @@ if test x$bitcoin_enable_qt != xno; then\n   fi\n fi\n \n+# conditional search for and use libzmq\n+AC_MSG_CHECKING([whether to build ZMQ support])\n+if test \"x$use_zmq\" = \"xyes\"; then\n+  AC_MSG_RESULT([yes])\n+  PKG_CHECK_MODULES([ZMQ],[libzmq],\n+    [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+    [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+     AC_MSG_WARN([libzmq not found, disabling])\n+     use_zmq=no])\n+else\n+  AC_MSG_RESULT([no, --disable-zmq used])\n+  AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+fi\n+\n+AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n+\n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n   AC_MSG_RESULT([yes])"
      },
      {
        "sha": "decf29d42a4c11b8c6f60a32829e9e040d4b6aa0",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,37 @@\n+#!/usr/bin/env python2\n+\n+import array\n+import binascii\n+import zmq\n+\n+port = 28332\n+\n+zmqContext = zmq.Context()\n+zmqSubSocket = zmqContext.socket(zmq.SUB)\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawblock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawtx\")\n+zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+try:\n+    while True:\n+        msg = zmqSubSocket.recv_multipart()\n+        topic = str(msg[0])\n+        body = msg[1]\n+\n+        if topic == \"hashblock\":\n+            print \"- HASH BLOCK -\"\n+            print binascii.hexlify(body)\n+        elif topic == \"hashtx\":\n+            print '- HASH TX -'\n+            print binascii.hexlify(body)\n+        elif topic == \"rawblock\":\n+            print \"- RAW BLOCK HEADER -\"\n+            print binascii.hexlify(body[:80])\n+        elif topic == \"rawtx\":\n+            print '- RAW TX -'\n+            print binascii.hexlify(body)\n+\n+except KeyboardInterrupt:\n+    zmqContext.destroy()"
      },
      {
        "sha": "fd04f6d9f0c95f0f7d58953f7d016039188de790",
        "filename": "doc/zmq.md",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,98 @@\n+# Block and Transaction Broadcasting With ZeroMQ\n+\n+[ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n+connections, inter-process communications, and shared-memory,\n+providing various message-oriented semantics such as publish/subcribe,\n+request/reply, and push/pull.\n+\n+The Bitcoin Core daemon can be configured to act as a trusted \"border\n+router\", implementing the bitcoin wire protocol and relay, making\n+consensus decisions, maintaining the local blockchain database,\n+broadcasting locally generated transactions into the network, and\n+providing a queryable RPC interface to interact on a polled basis for\n+requesting blockchain related data. However, there exists only a\n+limited service to notify external software of events like the arrival\n+of new blocks or transactions.\n+\n+The ZeroMQ facility implements a notification interface through a\n+set of specific notifiers. Currently there are notifiers that publish\n+blocks and transactions. This read-only facility requires only the\n+connection of a corresponding ZeroMQ subscriber port in receiving \n+software; it is not authenticated nor is there any two-way protocol\n+involvement. Therefore, subscribers should validate the received data\n+since it may be out of date, incomplete or even invalid.\n+\n+ZeroMQ sockets are self-connecting and self-healing; that is, connects\n+made between two endpoints will be automatically restored after an\n+outage, and either end may be freely started or stopped in any order.\n+\n+Because ZeroMQ is message oriented, subscribers receive transactions\n+and blocks all-at-once and do not need to implement any sort of\n+buffering or reassembly.\n+\n+## Prerequisites\n+\n+The ZeroMQ feature in Bitcoin Core uses only a very small part of the\n+ZeroMQ C API, and is thus compatible with any version of ZeroMQ\n+from 2.1 onward, including all versions in the 3.x and 4.x release\n+series. Typically, it is packaged by distributions as something like\n+*libzmq-dev*.\n+\n+The C++ wrapper for ZeroMQ is *not* needed.\n+\n+## Enabling\n+\n+By default, the ZeroMQ port functionality is enabled. Two steps are\n+required to enable--compiling in the ZeroMQ code, and configuring\n+runtime operation on the command-line or configuration file.\n+\n+    $ ./configure --enable-zmq (other options)\n+\n+This will produce a binary that is capable of providing the ZeroMQ\n+facility, but will not do so until also configured properly.\n+\n+## Usage\n+\n+Currently, the following notifications are supported:\n+\n+    -zmqpubhashtx=address\n+    -zmqpubhashblock=address\n+    -zmqpubrawblock=address\n+    -zmqpubrawtx=address\n+\n+The socket type is PUB and the address must be a valid ZeroMQ\n+socket address. The same address can be used in more than one notification.\n+\n+For instance:\n+\n+    $ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw\n+\n+Each PUB notification has a topic and body, where the header\n+corresponds to the notification type. For instance, for the notification\n+`-zmqpubhashtx` the topic is `hashtx` (no null terminator) and the body is the\n+hexadecimal transaction hash (32 bytes).\n+\n+These options can also be provided in bitcoin.conf.\n+\n+ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n+[ZeroMQ API](http://api.zeromq.org).\n+\n+Client side, then, the ZeroMQ subscriber socket must have the\n+ZMQ_SUBSCRIBE option set to one or either of these prefixes (for instance, just `hash`); without\n+doing so will result in no messages arriving. Please see `contrib/zmq/zmq_sub.py`\n+for a working example.\n+\n+## Remarks\n+\n+From the perspective of bitcoind, the ZeroMQ socket is write-only; PUB\n+sockets don't even have a read function. Thus, there is no state\n+introduced into bitcoind directly. Furthermore, no information is\n+broadcast that wasn't already received from the public P2P network.\n+\n+No authentication or authorization is done on connecting clients; it\n+is assumed that the ZeroMQ port is exposed only to trusted entities,\n+using other means such as firewalling.\n+\n+Note that when the block chain tip changes, a reorganisation may occur and just\n+the tip will be notified. It is up to the subscriber to retrieve the chain\n+from the last known block to the new tip."
      },
      {
        "sha": "67e848be39d4bb1bd4400fd61ddcfdf4aa39a61d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -48,6 +48,9 @@ if ENABLE_WALLET\n BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n EXTRA_LIBRARIES += libbitcoin_wallet.a\n endif\n+if ENABLE_ZMQ\n+EXTRA_LIBRARIES += libbitcoin_zmq.a\n+endif\n \n if BUILD_BITCOIN_LIBS\n lib_LTLIBRARIES = libbitcoinconsensus.la\n@@ -157,7 +160,12 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n-  wallet/walletdb.h\n+  wallet/walletdb.h \\\n+  zmq/zmqabstractnotifier.h \\\n+  zmq/zmqconfig.h\\\n+  zmq/zmqnotificationinterface.h \\\n+  zmq/zmqpublishnotifier.h\n+\n \n obj/build.h: FORCE\n \t@$(MKDIR_P) $(builddir)/obj\n@@ -199,6 +207,17 @@ libbitcoin_server_a_SOURCES = \\\n   validationinterface.cpp \\\n   $(BITCOIN_CORE_H)\n \n+if ENABLE_ZMQ\n+LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n+\n+libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_zmq_a_SOURCES = \\\n+  zmq/zmqabstractnotifier.cpp \\\n+  zmq/zmqnotificationinterface.cpp \\\n+  zmq/zmqpublishnotifier.cpp\n+endif\n+\n+\n # wallet: shared between bitcoind and bitcoin-qt, but only linked\n # when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n@@ -320,12 +339,15 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n+if ENABLE_ZMQ\n+bitcoind_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+endif\n+\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n \n bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n-#\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp"
      },
      {
        "sha": "3e8eda17824c73bc9534377087f5a4c10e18844a",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -361,6 +361,9 @@ qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+if ENABLE_ZMQ\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "6554580beab44a07ac719c21a8bee63e88fc43f4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -30,6 +30,9 @@ qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+if ENABLE_ZMQ\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\"
      },
      {
        "sha": "cee35926a5d752c8217eaf6156b74390f656a6e7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -100,6 +100,10 @@ endif\n test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n+if ENABLE_ZMQ\n+test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n+endif\n+\n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n \n $(BITCOIN_TESTS): $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "f03388120cdc6bc3f74bfdeb34e0f5d2c9f1082a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 1,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -38,7 +38,6 @@\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n-\n #include <stdint.h>\n #include <stdio.h>\n \n@@ -55,13 +54,21 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n+#if ENABLE_ZMQ\n+#include \"zmq/zmqnotificationinterface.h\"\n+#endif\n+\n using namespace std;\n \n #ifdef ENABLE_WALLET\n CWallet* pwalletMain = NULL;\n #endif\n bool fFeeEstimatesInitialized = false;\n \n+#if ENABLE_ZMQ\n+static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n+#endif\n+\n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n // accessing block files don't count towards the fd_set size limit\n@@ -211,6 +218,16 @@ void Shutdown()\n     if (pwalletMain)\n         pwalletMain->Flush(true);\n #endif\n+\n+#if ENABLE_ZMQ\n+    if (pzmqNotificationInterface) {\n+        UnregisterValidationInterface(pzmqNotificationInterface);\n+        pzmqNotificationInterface->Shutdown();\n+        delete pzmqNotificationInterface;\n+        pzmqNotificationInterface = NULL;\n+    }\n+#endif\n+\n #ifndef WIN32\n     try {\n         boost::filesystem::remove(GetPidFile());\n@@ -375,6 +392,14 @@ std::string HelpMessage(HelpMessageMode mode)\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n #endif\n \n+#if ENABLE_ZMQ\n+    strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubhashtransaction=<address>\", _(\"Enable publish hash transaction in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n+    strUsage += HelpMessageOpt(\"-zmqpubrawtransaction=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+#endif\n+\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n@@ -1125,6 +1150,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n         AddOneShot(strDest);\n \n+#if ENABLE_ZMQ\n+    pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);\n+\n+    if (pzmqNotificationInterface) {\n+        pzmqNotificationInterface->Initialize();\n+        RegisterValidationInterface(pzmqNotificationInterface);\n+    }\n+#endif\n+\n     // ********************************************************* Step 7: load block chain\n \n     fReindex = GetBoolArg(\"-reindex\", false);"
      },
      {
        "sha": "81f3b775f48a541fa5eda7963ba3272f34043e93",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -45,7 +45,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.SyncTransaction.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n "
      },
      {
        "sha": "744ec59234d56cbe0ce2bc836135baa0edc9dfa5",
        "filename": "src/zmq/zmqabstractnotifier.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqabstractnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqabstractnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.cpp?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"zmqabstractnotifier.h\"\n+#include \"util.h\"\n+\n+\n+CZMQAbstractNotifier::~CZMQAbstractNotifier()\n+{\n+    assert(!psocket);\n+}\n+\n+bool CZMQAbstractNotifier::NotifyBlock(const uint256 &/*hash*/)\n+{\n+    return true;\n+}\n+\n+bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction &/*transaction*/)\n+{\n+    return true;\n+}"
      },
      {
        "sha": "626d1ddf926c17d6f1c595353115a0366c377e95",
        "filename": "src/zmq/zmqabstractnotifier.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqabstractnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqabstractnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqabstractnotifier.h?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H\n+#define BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H\n+\n+#include \"zmqconfig.h\"\n+\n+class CZMQAbstractNotifier;\n+typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();\n+\n+class CZMQAbstractNotifier\n+{\n+public:\n+    CZMQAbstractNotifier() : psocket(0) { }\n+    virtual ~CZMQAbstractNotifier();\n+\n+    template <typename T>\n+    static CZMQAbstractNotifier* Create()\n+    {\n+        return new T();\n+    }\n+\n+    std::string GetType() const { return type; }\n+    void SetType(const std::string &t) { type = t; }\n+    std::string GetAddress() const { return address; }\n+    void SetAddress(const std::string &a) { address = a; }\n+\n+    virtual bool Initialize(void *pcontext) = 0;\n+    virtual void Shutdown() = 0;\n+\n+    virtual bool NotifyBlock(const uint256 &hash);\n+    virtual bool NotifyTransaction(const CTransaction &transaction);\n+\n+protected:\n+    void *psocket;\n+    std::string type;\n+    std::string address;\n+};\n+\n+#endif // BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H"
      },
      {
        "sha": "6057f5d1a0e928e7a24c15917513cfb5bcb7c178",
        "filename": "src/zmq/zmqconfig.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqconfig.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqconfig.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqconfig.h?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ZMQ_ZMQCONFIG_H\n+#define BITCOIN_ZMQ_ZMQCONFIG_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdarg.h>\n+#include <string>\n+\n+#if ENABLE_ZMQ\n+#include <zmq.h>\n+#endif\n+\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+\n+void zmqError(const char *str);\n+\n+#endif // BITCOIN_ZMQ_ZMQCONFIG_H"
      },
      {
        "sha": "71ccb59a4a729aa9655e3d6caec810d3e2d8badc",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "added",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"zmqnotificationinterface.h\"\n+#include \"zmqpublishnotifier.h\"\n+\n+#include \"version.h\"\n+#include \"main.h\"\n+#include \"streams.h\"\n+#include \"util.h\"\n+\n+void zmqError(const char *str)\n+{\n+    LogPrint(\"zmq\", \"Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n+}\n+\n+CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(NULL)\n+{\n+}\n+\n+CZMQNotificationInterface::~CZMQNotificationInterface()\n+{\n+    // ensure Shutdown if Initialize is called\n+    assert(!pcontext);\n+\n+    for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n+    {\n+        delete *i;\n+    }\n+}\n+\n+CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const std::map<std::string, std::string> &args)\n+{\n+    CZMQNotificationInterface* notificationInterface = NULL;\n+    std::map<std::string, CZMQNotifierFactory> factories;\n+    std::list<CZMQAbstractNotifier*> notifiers;\n+\n+    factories[\"pubhashblock\"] = CZMQAbstractNotifier::Create<CZMQPublishHashBlockNotifier>;\n+    factories[\"pubhashtx\"] = CZMQAbstractNotifier::Create<CZMQPublishHashTransactionNotifier>;\n+    factories[\"pubrawblock\"] = CZMQAbstractNotifier::Create<CZMQPublishRawBlockNotifier>;\n+    factories[\"pubrawtx\"] = CZMQAbstractNotifier::Create<CZMQPublishRawTransactionNotifier>;\n+\n+    for (std::map<std::string, CZMQNotifierFactory>::const_iterator i=factories.begin(); i!=factories.end(); ++i)\n+    {\n+        std::map<std::string, std::string>::const_iterator j = args.find(\"-zmq\" + i->first);\n+        if (j!=args.end())\n+        {\n+            CZMQNotifierFactory factory = i->second;\n+            std::string address = j->second;\n+            CZMQAbstractNotifier *notifier = factory();\n+            notifier->SetType(i->first);\n+            notifier->SetAddress(address);\n+            notifiers.push_back(notifier);\n+        }\n+    }\n+\n+    if (!notifiers.empty())\n+    {\n+        notificationInterface = new CZMQNotificationInterface();\n+        notificationInterface->notifiers = notifiers;\n+    }\n+\n+    return notificationInterface;\n+}\n+\n+// Called at startup to conditionally set up ZMQ socket(s)\n+bool CZMQNotificationInterface::Initialize()\n+{\n+    LogPrint(\"zmq\", \"Initialize notification interface\\n\");\n+    assert(!pcontext);\n+\n+    pcontext = zmq_init(1);\n+\n+    if (!pcontext)\n+    {\n+        zmqError(\"Unable to initialize context\");\n+        return false;\n+    }\n+\n+    std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin();\n+    for (; i!=notifiers.end(); ++i)\n+    {\n+        CZMQAbstractNotifier *notifier = *i;\n+        if (notifier->Initialize(pcontext))\n+        {\n+            LogPrint(\"zmq\", \"  Notifier %s ready (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n+        }\n+        else\n+        {\n+            LogPrint(\"zmq\", \"  Notifier %s failed (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n+            break;\n+        }\n+    }\n+\n+    if (i!=notifiers.end())\n+    {\n+        Shutdown();\n+        return false;\n+    }\n+\n+    return false;\n+}\n+\n+// Called during shutdown sequence\n+void CZMQNotificationInterface::Shutdown()\n+{\n+    LogPrint(\"zmq\", \"Shutdown notification interface\\n\");\n+    if (pcontext)\n+    {\n+        for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n+        {\n+            CZMQAbstractNotifier *notifier = *i;\n+            LogPrint(\"zmq\", \"   Shutdown notifier %s at %s\\n\", notifier->GetType(), notifier->GetAddress());\n+            notifier->Shutdown();\n+        }\n+        zmq_ctx_destroy(pcontext);\n+\n+        pcontext = 0;\n+    }\n+}\n+\n+void CZMQNotificationInterface::UpdatedBlockTip(const uint256 &hash)\n+{\n+    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n+    {\n+        CZMQAbstractNotifier *notifier = *i;\n+        if (notifier->NotifyBlock(hash))\n+        {\n+            i++;\n+        }\n+        else\n+        {\n+            notifier->Shutdown();\n+            i = notifiers.erase(i);\n+        }\n+    }\n+}\n+\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlock *pblock)\n+{\n+    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n+    {\n+        CZMQAbstractNotifier *notifier = *i;\n+        if (notifier->NotifyTransaction(tx))\n+        {\n+            i++;\n+        }\n+        else\n+        {\n+            notifier->Shutdown();\n+            i = notifiers.erase(i);\n+        }\n+    }\n+}"
      },
      {
        "sha": "afc0b8d24e51466174e14a91eeca853f961108c4",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H\n+#define BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H\n+\n+#include \"validationinterface.h\"\n+#include <string>\n+#include <map>\n+\n+class CZMQAbstractNotifier;\n+\n+class CZMQNotificationInterface : public CValidationInterface\n+{\n+public:\n+    virtual ~CZMQNotificationInterface();\n+\n+    static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string> &args);\n+\n+    bool Initialize();\n+    void Shutdown();\n+\n+protected: // CValidationInterface\n+    void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n+    void UpdatedBlockTip(const uint256 &newHashTip);\n+\n+private:\n+    CZMQNotificationInterface();\n+\n+    void *pcontext;\n+    std::list<CZMQAbstractNotifier*> notifiers;\n+};\n+\n+#endif // BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H"
      },
      {
        "sha": "0a6d7d0dbc57d94d73888abeea332b10ac94aca0",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"zmqpublishnotifier.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n+\n+// Internal function to send multipart message\n+static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)\n+{\n+    va_list args;\n+    va_start(args, size);\n+\n+    while (1)\n+    {\n+        zmq_msg_t msg;\n+\n+        int rc = zmq_msg_init_size(&msg, size);\n+        if (rc != 0)\n+        {\n+            zmqError(\"Unable to initialize ZMQ msg\");\n+            return -1;\n+        }\n+\n+        void *buf = zmq_msg_data(&msg);\n+        memcpy(buf, data, size);\n+\n+        data = va_arg(args, const void*);\n+\n+        rc = zmq_msg_send(&msg, sock, data ? ZMQ_SNDMORE : 0);\n+        if (rc == -1)\n+        {\n+            zmqError(\"Unable to send ZMQ msg\");\n+            zmq_msg_close(&msg);\n+            return -1;\n+        }\n+\n+        zmq_msg_close(&msg);\n+\n+        if (!data)\n+            break;\n+\n+        size = va_arg(args, size_t);\n+    }\n+    return 0;\n+}\n+\n+bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n+{\n+    assert(!psocket);\n+\n+    // check if address is being used by other publish notifier\n+    std::multimap<std::string, CZMQAbstractPublishNotifier*>::iterator i = mapPublishNotifiers.find(address);\n+\n+    if (i==mapPublishNotifiers.end())\n+    {\n+        psocket = zmq_socket(pcontext, ZMQ_PUB);\n+        if (!psocket)\n+        {\n+            zmqError(\"Failed to create socket\");\n+            return false;\n+        }\n+\n+        int rc = zmq_bind(psocket, address.c_str());\n+        if (rc!=0)\n+        {\n+            zmqError(\"Failed to bind address\");\n+            return false;\n+        }\n+\n+        // register this notifier for the address, so it can be reused for other publish notifier\n+        mapPublishNotifiers.insert(std::make_pair(address, this));\n+        return true;\n+    }\n+    else\n+    {\n+        LogPrint(\"zmq\", \"  Reuse socket for address %s\\n\", address);\n+\n+        psocket = i->second->psocket;\n+        mapPublishNotifiers.insert(std::make_pair(address, this));\n+\n+        return true;\n+    }\n+}\n+\n+void CZMQAbstractPublishNotifier::Shutdown()\n+{\n+    assert(psocket);\n+\n+    int count = mapPublishNotifiers.count(address);\n+\n+    // remove this notifier from the list of publishers using this address\n+    typedef std::multimap<std::string, CZMQAbstractPublishNotifier*>::iterator iterator;\n+    std::pair<iterator, iterator> iterpair = mapPublishNotifiers.equal_range(address);\n+\n+    for (iterator it = iterpair.first; it != iterpair.second; ++it)\n+    {\n+        if (it->second==this)\n+        {\n+            mapPublishNotifiers.erase(it);\n+            break;\n+        }\n+    }\n+\n+    if (count == 1)\n+    {\n+        LogPrint(\"zmq\", \"Close socket at address %s\\n\", address);\n+        int linger = 0;\n+        zmq_setsockopt(psocket, ZMQ_LINGER, &linger, sizeof(linger));\n+        zmq_close(psocket);\n+    }\n+\n+    psocket = 0;\n+}\n+\n+bool CZMQPublishHashBlockNotifier::NotifyBlock(const uint256 &hash)\n+{\n+    LogPrint(\"zmq\", \"Publish hash block %s\\n\", hash.GetHex());\n+    char data[32];\n+    for (unsigned int i = 0; i < 32; i++)\n+        data[31 - i] = hash.begin()[i];\n+    int rc = zmq_send_multipart(psocket, \"hashblock\", 9, data, 32, 0);\n+    return rc == 0;\n+}\n+\n+bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n+{\n+    uint256 hash = transaction.GetHash();\n+    LogPrint(\"zmq\", \"Publish hash transaction %s\\n\", hash.GetHex());\n+    char data[32];\n+    for (unsigned int i = 0; i < 32; i++)\n+        data[31 - i] = hash.begin()[i];\n+    int rc = zmq_send_multipart(psocket, \"hashtx\", 6, data, 32, 0);\n+    return rc == 0;\n+}\n+\n+bool CZMQPublishRawBlockNotifier::NotifyBlock(const uint256 &hash)\n+{\n+    LogPrint(\"zmq\", \"Publish raw block %s\\n\", hash.GetHex());\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    {\n+        LOCK(cs_main);\n+\n+        CBlock block;\n+        CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+        if(!ReadBlockFromDisk(block, pblockindex))\n+        {\n+            zmqError(\"Can't read block from disk\");\n+            return false;\n+        }\n+\n+        ss << block;\n+    }\n+\n+    int rc = zmq_send_multipart(psocket, \"rawblock\", 8, &(*ss.begin()), ss.size(), 0);\n+    return rc == 0;\n+}\n+\n+bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n+{\n+    uint256 hash = transaction.GetHash();\n+    LogPrint(\"zmq\", \"Publish raw transaction %s\\n\", hash.GetHex());\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << transaction;\n+    int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);\n+    return rc == 0;\n+}"
      },
      {
        "sha": "a0eb26f5e268ad4bbd007e665a48d76e94d419b5",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H\n+#define BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H\n+\n+#include \"zmqabstractnotifier.h\"\n+\n+class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n+{\n+public:\n+    bool Initialize(void *pcontext);\n+    void Shutdown();\n+};\n+\n+class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier\n+{\n+public:\n+    bool NotifyBlock(const uint256 &hash);\n+};\n+\n+class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier\n+{\n+public:\n+    bool NotifyTransaction(const CTransaction &transaction);\n+};\n+\n+class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier\n+{\n+public:\n+    bool NotifyBlock(const uint256 &hash);\n+};\n+\n+class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier\n+{\n+public:\n+    bool NotifyTransaction(const CTransaction &transaction);\n+};\n+\n+#endif // BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H"
      }
    ]
  },
  {
    "sha": "029e278286cb861901c9cb8e1b84855ec1640aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjllMjc4Mjg2Y2I4NjE5MDFjOWNiOGUxYjg0ODU1ZWMxNjQwYWFj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-05T11:19:19Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-09-16T10:01:35Z"
      },
      "message": "QA: Add ZeroMQ RPC test",
      "tree": {
        "sha": "1c39d082db96075c308b470852e761086ff8fc65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c39d082db96075c308b470852e761086ff8fc65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/029e278286cb861901c9cb8e1b84855ec1640aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029e278286cb861901c9cb8e1b84855ec1640aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/029e278286cb861901c9cb8e1b84855ec1640aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029e278286cb861901c9cb8e1b84855ec1640aac/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a14b64d665eb1fafd03a6bbc8d14597ce1c83c"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 93,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fffaf677d68ad6a00e78651c3c5a65112e8bb59d",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/029e278286cb861901c9cb8e1b84855ec1640aac/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/029e278286cb861901c9cb8e1b84855ec1640aac/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=029e278286cb861901c9cb8e1b84855ec1640aac",
        "patch": "@@ -0,0 +1,93 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test ZMQ interface\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import zmq\n+import binascii\n+from test_framework.mininode import hash256\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class ZMQTest (BitcoinTestFramework):\n+\n+    port = 28332\n+\n+    def setup_nodes(self):\n+        self.zmqContext = zmq.Context()\n+        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n+        # Note: proxies are not used to connect to local nodes\n+        # this is because the proxy to use is based on CService.GetNetwork(), which return NET_UNROUTABLE for localhost\n+        return start_nodes(4, self.options.tmpdir, extra_args=[\n+            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n+            [],\n+            [],\n+            []\n+            ])\n+\n+    def run_test(self):\n+        self.sync_all()\n+\n+        genhashes = self.nodes[0].generate(1);\n+        self.sync_all()\n+\n+        print \"listen...\"\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = str(msg[0])\n+        body = msg[1]\n+\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = str(msg[0])\n+        body = msg[1]\n+        blkhash = binascii.hexlify(body)\n+\n+        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+\n+        n = 10\n+        genhashes = self.nodes[1].generate(n);\n+        self.sync_all()\n+\n+        zmqHashes = []\n+        for x in range(0,n*2):\n+            msg = self.zmqSubSocket.recv_multipart()\n+            topic = str(msg[0])\n+            body = msg[1]\n+            if topic == \"hashblock\":\n+                zmqHashes.append(binascii.hexlify(body))\n+\n+        for x in range(0,n):\n+            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+\n+        #test tx from a second node\n+        hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n+        self.sync_all()\n+\n+        #now we should receive a zmq msg because the tx was broadcastet\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = str(msg[0])\n+        body = msg[1]\n+        hashZMQ = \"\"\n+        if topic == \"hashtx\":\n+            hashZMQ = binascii.hexlify(body)\n+\n+        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+\n+\n+if __name__ == '__main__':\n+    ZMQTest ().main ()"
      }
    ]
  }
]