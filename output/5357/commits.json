[
  {
    "sha": "9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGNkNTI0ZjMyNDhjYjRmY2E1NjEzYTNjMTFkZGRjYzdhMGVmYmQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-24T13:51:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-11T16:39:09Z"
      },
      "message": "Make IsSuperMajority a standalone function",
      "tree": {
        "sha": "4a1cc77279d96c8b11e59367758c8aac99fb27c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a1cc77279d96c8b11e59367758c8aac99fb27c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb29a3e13f78f534d96b71048a128843f3bab85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb29a3e13f78f534d96b71048a128843f3bab85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb29a3e13f78f534d96b71048a128843f3bab85"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a8a6b4dd64736b5d3b19cf618530b28d1b0860a2",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
        "patch": "@@ -236,14 +236,6 @@ class CBlockIndex\n         return pbegin[(pend - pbegin)/2];\n     }\n \n-    /**\n-     * Returns true if there are nRequired or more blocks of minVersion or above\n-     * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n-     * and going backwards.\n-     */\n-    static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart,\n-                                unsigned int nRequired);\n-\n     std::string ToString() const\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\","
      },
      {
        "sha": "bc08c3ea29d5d6f0f4117a5617ae7ef72b3575da",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
        "patch": "@@ -67,6 +67,13 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n+ * and going backwards.\n+ */\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired);\n+\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n@@ -2479,8 +2486,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && \n-        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n         return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n@@ -2501,8 +2507,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && \n-        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2600,7 +2605,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n {\n     unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;"
      }
    ]
  },
  {
    "sha": "5ea3bc06d501594a36c97e20df2d446e87956aed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWEzYmMwNmQ1MDE1OTRhMzZjOTdlMjBkZjJkNDQ2ZTg3OTU2YWVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-23T13:07:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-11T16:39:10Z"
      },
      "message": "Move remaining CBlockIndex methods to chain.cpp",
      "tree": {
        "sha": "9f23ca25180a0be3d7b001e5dc2451f948643180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f23ca25180a0be3d7b001e5dc2451f948643180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ea3bc06d501594a36c97e20df2d446e87956aed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea3bc06d501594a36c97e20df2d446e87956aed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea3bc06d501594a36c97e20df2d446e87956aed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea3bc06d501594a36c97e20df2d446e87956aed/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcd524f3248cb4fca5613a3c11dddcc7a0efbd7"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 49,
      "deletions": 48
    },
    "files": [
      {
        "sha": "3dbaf5a36a43458e64238b237b8b06a94b3f0616",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ea3bc06d501594a36c97e20df2d446e87956aed/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ea3bc06d501594a36c97e20df2d446e87956aed/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=5ea3bc06d501594a36c97e20df2d446e87956aed",
        "patch": "@@ -57,3 +57,52 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n         pindex = pindex->pprev;\n     return pindex;\n }\n+\n+/** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n+int static inline InvertLowestOne(int n) { return n & (n - 1); }\n+\n+/** Compute what height to jump back to with the CBlockIndex::pskip pointer. */\n+int static inline GetSkipHeight(int height) {\n+    if (height < 2)\n+        return 0;\n+\n+    // Determine which height to jump back to. Any number strictly lower than height is acceptable,\n+    // but the following expression seems to perform well in simulations (max 110 steps to go back\n+    // up to 2**18 blocks).\n+    return (height & 1) ? InvertLowestOne(InvertLowestOne(height - 1)) + 1 : InvertLowestOne(height);\n+}\n+\n+CBlockIndex* CBlockIndex::GetAncestor(int height)\n+{\n+    if (height > nHeight || height < 0)\n+        return NULL;\n+\n+    CBlockIndex* pindexWalk = this;\n+    int heightWalk = nHeight;\n+    while (heightWalk > height) {\n+        int heightSkip = GetSkipHeight(heightWalk);\n+        int heightSkipPrev = GetSkipHeight(heightWalk - 1);\n+        if (heightSkip == height ||\n+            (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n+                                      heightSkipPrev >= height))) {\n+            // Only follow pskip if pprev->pskip isn't better than pskip->pprev.\n+            pindexWalk = pindexWalk->pskip;\n+            heightWalk = heightSkip;\n+        } else {\n+            pindexWalk = pindexWalk->pprev;\n+            heightWalk--;\n+        }\n+    }\n+    return pindexWalk;\n+}\n+\n+const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n+{\n+    return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n+}\n+\n+void CBlockIndex::BuildSkip()\n+{\n+    if (pprev)\n+        pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n+}"
      },
      {
        "sha": "7533c32614bd3b01c738f0f60d37b7779aabb4de",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ea3bc06d501594a36c97e20df2d446e87956aed/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ea3bc06d501594a36c97e20df2d446e87956aed/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5ea3bc06d501594a36c97e20df2d446e87956aed",
        "patch": "@@ -2618,54 +2618,6 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n     return (nFound >= nRequired);\n }\n \n-/** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n-int static inline InvertLowestOne(int n) { return n & (n - 1); }\n-\n-/** Compute what height to jump back to with the CBlockIndex::pskip pointer. */\n-int static inline GetSkipHeight(int height) {\n-    if (height < 2)\n-        return 0;\n-\n-    // Determine which height to jump back to. Any number strictly lower than height is acceptable,\n-    // but the following expression seems to perform well in simulations (max 110 steps to go back\n-    // up to 2**18 blocks).\n-    return (height & 1) ? InvertLowestOne(InvertLowestOne(height - 1)) + 1 : InvertLowestOne(height);\n-}\n-\n-CBlockIndex* CBlockIndex::GetAncestor(int height)\n-{\n-    if (height > nHeight || height < 0)\n-        return NULL;\n-\n-    CBlockIndex* pindexWalk = this;\n-    int heightWalk = nHeight;\n-    while (heightWalk > height) {\n-        int heightSkip = GetSkipHeight(heightWalk);\n-        int heightSkipPrev = GetSkipHeight(heightWalk - 1);\n-        if (heightSkip == height ||\n-            (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n-                                      heightSkipPrev >= height))) {\n-            // Only follow pskip if pprev->pskip isn't better than pskip->pprev.\n-            pindexWalk = pindexWalk->pskip;\n-            heightWalk = heightSkip;\n-        } else {\n-            pindexWalk = pindexWalk->pprev;\n-            heightWalk--;\n-        }\n-    }\n-    return pindexWalk;\n-}\n-\n-const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n-{\n-    return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n-}\n-\n-void CBlockIndex::BuildSkip()\n-{\n-    if (pprev)\n-        pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n-}\n \n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {"
      }
    ]
  }
]