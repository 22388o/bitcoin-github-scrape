[
  {
    "sha": "90c0f267bdedc261d8fdab188e96ca58c206652a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGMwZjI2N2JkZWRjMjYxZDhmZGFiMTg4ZTk2Y2E1OGMyMDY2NTJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-08T16:08:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-08T16:08:07Z"
      },
      "message": "Squashed 'src/crc32c/' changes from 224988680f..b5ef9be675\n\nb5ef9be675 Merge #1: Merge changes from upstream\n9e7f512430 Merge remote-tracking branch 'origin/master' into bitcoin-fork\n1f85030246 Add support for ARM64 darwin (#43)\n3bb959c982 Remove unnecessary reinterpret_cast (#42)\n2e97ab26b1 Fix (unused) ReadUint64LE for BE machines (#41)\n47b40d2209 Bump dependencies. (#40)\nba74185625 Move CI to Visual Studio 2019.\nefa301a7e5 Allow different C/C++ standards when this is used as a subproject.\ncc6d71465e CMake: Use configure_package_config_file()\n\ngit-subtree-dir: src/crc32c\ngit-subtree-split: b5ef9be6755a2e61e2988bb238f13d1c0ee1fa0a",
      "tree": {
        "sha": "26c84a4d3078067b015064080032e30f3bd94e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26c84a4d3078067b015064080032e30f3bd94e1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c0f267bdedc261d8fdab188e96ca58c206652a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c0f267bdedc261d8fdab188e96ca58c206652a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90c0f267bdedc261d8fdab188e96ca58c206652a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c0f267bdedc261d8fdab188e96ca58c206652a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e1819311a59fb5cb26e3ca50a510bfe01358350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1819311a59fb5cb26e3ca50a510bfe01358350",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1819311a59fb5cb26e3ca50a510bfe01358350"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 88,
      "deletions": 61
    },
    "files": [
      {
        "sha": "b23e02e88a32a217286a9734cfadcb9035fad784",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -8,9 +8,9 @@ environment:\n   matrix:\n     # AppVeyor currently has no custom job name feature.\n     # http://help.appveyor.com/discussions/questions/1623-can-i-provide-a-friendly-name-for-jobs\n-    - JOB: Visual Studio 2017\n-      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n-      CMAKE_GENERATOR: Visual Studio 15 2017\n+    - JOB: Visual Studio 2019\n+      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n+      CMAKE_GENERATOR: Visual Studio 16 2019\n \n platform:\n   - x86\n@@ -24,10 +24,11 @@ build_script:\n   - git submodule update --init --recursive\n   - mkdir build\n   - cd build\n-  - if \"%platform%\"==\"x64\" set CMAKE_GENERATOR=%CMAKE_GENERATOR% Win64\n+  - if \"%platform%\"==\"x86\" (set CMAKE_GENERATOR_PLATFORM=\"Win32\")\n+      else (set CMAKE_GENERATOR_PLATFORM=\"%platform%\")\n   - cmake --version\n-  - cmake .. -G \"%CMAKE_GENERATOR%\" -DCRC32C_USE_GLOG=0\n-      -DCMAKE_CONFIGURATION_TYPES=\"%CONFIGURATION%\"\n+  - cmake .. -G \"%CMAKE_GENERATOR%\" -A \"%CMAKE_GENERATOR_PLATFORM%\"\n+      -DCMAKE_CONFIGURATION_TYPES=\"%CONFIGURATION%\" -DCRC32C_USE_GLOG=0\n   - cmake --build . --config \"%CONFIGURATION%\"\n   - cd ..\n "
      },
      {
        "sha": "ef9b4ea933e05e51decd7bb721e392256a5cf487",
        "filename": "AUTHORS",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/AUTHORS?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -7,3 +7,5 @@ Google Inc.\n \n Fangming Fang <Fangming.Fang@arm.com>\n Vadim Skipin <vadim.skipin@gmail.com>\n+Rodrigo Tobar <rtobar@icrar.org>\n+Harry Mallon <hjmallon@gmail.com>"
      },
      {
        "sha": "71692d5796160f14ad6ea77b627427bbb4315f20",
        "filename": "CMakeLists.txt",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -5,15 +5,21 @@\n cmake_minimum_required(VERSION 3.1)\n project(Crc32c VERSION 1.1.0 LANGUAGES C CXX)\n \n-# This project can use C11, but will gracefully decay down to C89.\n-set(CMAKE_C_STANDARD 11)\n-set(CMAKE_C_STANDARD_REQUIRED OFF)\n-set(CMAKE_C_EXTENSIONS OFF)\n-\n-# This project requires C++11.\n-set(CMAKE_CXX_STANDARD 11)\n-set(CMAKE_CXX_STANDARD_REQUIRED ON)\n-set(CMAKE_CXX_EXTENSIONS OFF)\n+# C standard can be overridden when this is used as a sub-project.\n+if(NOT CMAKE_C_STANDARD)\n+  # This project can use C11, but will gracefully decay down to C89.\n+  set(CMAKE_C_STANDARD 11)\n+  set(CMAKE_C_STANDARD_REQUIRED OFF)\n+  set(CMAKE_C_EXTENSIONS OFF)\n+endif(NOT CMAKE_C_STANDARD)\n+\n+# C++ standard can be overridden when this is used as a sub-project.\n+if(NOT CMAKE_CXX_STANDARD)\n+  # This project requires C++11.\n+  set(CMAKE_CXX_STANDARD 11)\n+  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+  set(CMAKE_CXX_EXTENSIONS OFF)\n+endif(NOT CMAKE_CXX_STANDARD)\n \n # https://github.com/izenecloud/cmake/blob/master/SetCompilerWarningAll.cmake\n if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n@@ -269,7 +275,7 @@ target_sources(crc32c\n   PRIVATE\n     \"${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h\"\n     \"src/crc32c_arm64.h\"\n-    \"src/crc32c_arm64_linux_check.h\"\n+    \"src/crc32c_arm64_check.h\"\n     \"src/crc32c_internal.h\"\n     \"src/crc32c_portable.cc\"\n     \"src/crc32c_prefetch.h\"\n@@ -405,19 +411,24 @@ if(CRC32C_INSTALL)\n   )\n \n   include(CMakePackageConfigHelpers)\n+  configure_package_config_file(\n+    \"${PROJECT_NAME}Config.cmake.in\"\n+    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n+    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n+  )\n   write_basic_package_version_file(\n-      \"${PROJECT_BINARY_DIR}/Crc32cConfigVersion.cmake\"\n-      COMPATIBILITY SameMajorVersion\n+    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n+    COMPATIBILITY SameMajorVersion\n   )\n   install(\n     EXPORT Crc32cTargets\n     NAMESPACE Crc32c::\n-    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Crc32c\"\n+    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n   )\n   install(\n     FILES\n-      \"Crc32cConfig.cmake\"\n-      \"${PROJECT_BINARY_DIR}/Crc32cConfigVersion.cmake\"\n-    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Crc32c\"\n+      \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n+      \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n+    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n   )\n endif(CRC32C_INSTALL)"
      },
      {
        "sha": "c6b8fc791348f95e7f37b5120cc85aa0ea4de17c",
        "filename": "Crc32cConfig.cmake.in",
        "status": "renamed",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/Crc32cConfig.cmake.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/Crc32cConfig.cmake.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Crc32cConfig.cmake.in?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -2,4 +2,8 @@\n # Use of this source code is governed by a BSD-style license that can be\n # found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n+@PACKAGE_INIT@\n+\n include(\"${CMAKE_CURRENT_LIST_DIR}/Crc32cTargets.cmake\")\n+\n+check_required_components(Crc32c)",
        "previous_filename": "Crc32cConfig.cmake"
      },
      {
        "sha": "804133bc17293ebd7e426c4af43dbb44d2a0eb6a",
        "filename": "src/crc32c.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c.cc?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -8,7 +8,7 @@\n #include <cstdint>\n \n #include \"./crc32c_arm64.h\"\n-#include \"./crc32c_arm64_linux_check.h\"\n+#include \"./crc32c_arm64_check.h\"\n #include \"./crc32c_internal.h\"\n #include \"./crc32c_sse42.h\"\n #include \"./crc32c_sse42_check.h\"\n@@ -20,8 +20,8 @@ uint32_t Extend(uint32_t crc, const uint8_t* data, size_t count) {\n   static bool can_use_sse42 = CanUseSse42();\n   if (can_use_sse42) return ExtendSse42(crc, data, count);\n #elif HAVE_ARM64_CRC32C\n-  static bool can_use_arm_linux = CanUseArm64Linux();\n-  if (can_use_arm_linux) return ExtendArm64(crc, data, count);\n+  static bool can_use_arm64_crc32 = CanUseArm64Crc32();\n+  if (can_use_arm64_crc32) return ExtendArm64(crc, data, count);\n #endif  // HAVE_SSE42 && (defined(_M_X64) || defined(__x86_64__))\n \n   return ExtendPortable(crc, data, count);"
      },
      {
        "sha": "1da04ed34a3c9f61e28524fc0be8927b8a8d6a11",
        "filename": "src/crc32c_arm64.cc",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c_arm64.cc?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -64,7 +64,7 @@\n \n namespace crc32c {\n \n-uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n+uint32_t ExtendArm64(uint32_t crc, const uint8_t *data, size_t size) {\n   int64_t length = size;\n   uint32_t crc0, crc1, crc2, crc3;\n   uint64_t t0, t1, t2;\n@@ -74,7 +74,6 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n   const poly64_t k0 = 0x8d96551c, k1 = 0xbd6f81f8, k2 = 0xdcb17aa4;\n \n   crc = crc ^ kCRC32Xor;\n-  const uint8_t *p = reinterpret_cast<const uint8_t *>(buf);\n \n   while (length >= KBYTES) {\n     crc0 = crc;\n@@ -83,14 +82,14 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n     crc3 = 0;\n \n     // Process 1024 bytes in parallel.\n-    CRC32C1024BYTES(p);\n+    CRC32C1024BYTES(data);\n \n     // Merge the 4 partial CRC32C values.\n     t2 = (uint64_t)vmull_p64(crc2, k2);\n     t1 = (uint64_t)vmull_p64(crc1, k1);\n     t0 = (uint64_t)vmull_p64(crc0, k0);\n-    crc = __crc32cd(crc3, *(uint64_t *)p);\n-    p += sizeof(uint64_t);\n+    crc = __crc32cd(crc3, *(uint64_t *)data);\n+    data += sizeof(uint64_t);\n     crc ^= __crc32cd(0, t2);\n     crc ^= __crc32cd(0, t1);\n     crc ^= __crc32cd(0, t0);\n@@ -99,23 +98,23 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n   }\n \n   while (length >= 8) {\n-    crc = __crc32cd(crc, *(uint64_t *)p);\n-    p += 8;\n+    crc = __crc32cd(crc, *(uint64_t *)data);\n+    data += 8;\n     length -= 8;\n   }\n \n   if (length & 4) {\n-    crc = __crc32cw(crc, *(uint32_t *)p);\n-    p += 4;\n+    crc = __crc32cw(crc, *(uint32_t *)data);\n+    data += 4;\n   }\n \n   if (length & 2) {\n-    crc = __crc32ch(crc, *(uint16_t *)p);\n-    p += 2;\n+    crc = __crc32ch(crc, *(uint16_t *)data);\n+    data += 2;\n   }\n \n   if (length & 1) {\n-    crc = __crc32cb(crc, *p);\n+    crc = __crc32cb(crc, *data);\n   }\n \n   return crc ^ kCRC32Xor;"
      },
      {
        "sha": "e093687ddc1025429708a32be7bdef9875c4f340",
        "filename": "src/crc32c_arm64.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c_arm64.h?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -2,10 +2,10 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-// Linux-specific code checking the availability for ARM CRC32C instructions.\n+// ARM-specific code\n \n-#ifndef CRC32C_CRC32C_ARM_LINUX_H_\n-#define CRC32C_CRC32C_ARM_LINUX_H_\n+#ifndef CRC32C_CRC32C_ARM_H_\n+#define CRC32C_CRC32C_ARM_H_\n \n #include <cstddef>\n #include <cstdint>\n@@ -24,4 +24,4 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t* data, size_t count);\n \n #endif  // HAVE_ARM64_CRC32C\n \n-#endif  // CRC32C_CRC32C_ARM_LINUX_H_\n+#endif  // CRC32C_CRC32C_ARM_H_"
      },
      {
        "sha": "62a07aba09c6b07fb134e5ef3f27830f3ec8e9cb",
        "filename": "src/crc32c_arm64_check.h",
        "status": "renamed",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_arm64_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c_arm64_check.h?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -2,12 +2,10 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-// ARM Linux-specific code checking for the availability of CRC32C instructions.\n+// ARM-specific code checking for the availability of CRC32C instructions.\n \n-#ifndef CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n-#define CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n-\n-// X86-specific code checking for the availability of SSE4.2 instructions.\n+#ifndef CRC32C_CRC32C_ARM_CHECK_H_\n+#define CRC32C_CRC32C_ARM_CHECK_H_\n \n #include <cstddef>\n #include <cstdint>\n@@ -18,6 +16,7 @@\n \n #if HAVE_ARM64_CRC32C\n \n+#ifdef __linux__\n #if HAVE_STRONG_GETAUXVAL\n #include <sys/auxv.h>\n #elif HAVE_WEAK_GETAUXVAL\n@@ -27,17 +26,28 @@ extern \"C\" unsigned long getauxval(unsigned long type) __attribute__((weak));\n \n #define AT_HWCAP 16\n #endif  // HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n+#endif  // defined (__linux__)\n+\n+#ifdef __APPLE__\n+#include <sys/types.h>\n+#include <sys/sysctl.h>\n+#endif  // defined (__APPLE__)\n \n namespace crc32c {\n \n-inline bool CanUseArm64Linux() {\n-#if HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n+inline bool CanUseArm64Crc32() {\n+#if defined (__linux__) && (HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL)\n   // From 'arch/arm64/include/uapi/asm/hwcap.h' in Linux kernel source code.\n   constexpr unsigned long kHWCAP_PMULL = 1 << 4;\n   constexpr unsigned long kHWCAP_CRC32 = 1 << 7;\n   unsigned long hwcap = (&getauxval != nullptr) ? getauxval(AT_HWCAP) : 0;\n   return (hwcap & (kHWCAP_PMULL | kHWCAP_CRC32)) ==\n          (kHWCAP_PMULL | kHWCAP_CRC32);\n+#elif defined(__APPLE__)\n+  int val = 0;\n+  size_t len = sizeof(val);\n+  return sysctlbyname(\"hw.optional.armv8_crc32\", &val, &len, nullptr, 0) == 0\n+             && val != 0;\n #else\n   return false;\n #endif  // HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n@@ -47,4 +57,4 @@ inline bool CanUseArm64Linux() {\n \n #endif  // HAVE_ARM64_CRC32C\n \n-#endif  // CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n+#endif  // CRC32C_CRC32C_ARM_CHECK_H_",
        "previous_filename": "src/crc32c_arm64_linux_check.h"
      },
      {
        "sha": "51194b370ac9e2be1126fcedb14a6ef5bf729058",
        "filename": "src/crc32c_benchmark.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_benchmark.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_benchmark.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c_benchmark.cc?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -16,7 +16,7 @@\n #endif  // CRC32C_TESTS_BUILT_WITH_GLOG\n \n #include \"./crc32c_arm64.h\"\n-#include \"./crc32c_arm64_linux_check.h\"\n+#include \"./crc32c_arm64_check.h\"\n #include \"./crc32c_internal.h\"\n #include \"./crc32c_sse42.h\"\n #include \"./crc32c_sse42_check.h\"\n@@ -58,8 +58,8 @@ BENCHMARK_REGISTER_F(CRC32CBenchmark, Portable)\n \n #if HAVE_ARM64_CRC32C\n \n-BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmLinux)(benchmark::State& state) {\n-  if (!crc32c::CanUseArm64Linux()) {\n+BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmCRC32C)(benchmark::State& state) {\n+  if (!crc32c::CanUseArm64Crc32()) {\n     state.SkipWithError(\"ARM CRC32C instructions not available or not enabled\");\n     return;\n   }\n@@ -69,7 +69,7 @@ BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmLinux)(benchmark::State& state) {\n     crc = crc32c::ExtendArm64(crc, block_buffer_, block_size_);\n   state.SetBytesProcessed(state.iterations() * block_size_);\n }\n-BENCHMARK_REGISTER_F(CRC32CBenchmark, ArmLinux)\n+BENCHMARK_REGISTER_F(CRC32CBenchmark, ArmCRC32C)\n     ->RangeMultiplier(16)\n     ->Range(256, 16777216);  // Block size.\n "
      },
      {
        "sha": "673a2a0db77d2f867a41306d0a64debf81e74b04",
        "filename": "src/crc32c_read_le.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_read_le.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c0f267bdedc261d8fdab188e96ca58c206652a/src/crc32c_read_le.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c_read_le.h?ref=90c0f267bdedc261d8fdab188e96ca58c206652a",
        "patch": "@@ -32,14 +32,14 @@ inline uint32_t ReadUint32LE(const uint8_t* buffer) {\n // Reads a little-endian 64-bit integer from a 64-bit-aligned buffer.\n inline uint64_t ReadUint64LE(const uint8_t* buffer) {\n #if BYTE_ORDER_BIG_ENDIAN\n-  return ((static_cast<uint32_t>(static_cast<uint8_t>(buffer[0]))) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[1])) << 8) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[2])) << 16) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[3])) << 24) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[4])) << 32) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[5])) << 40) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[6])) << 48) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[7])) << 56));\n+  return ((static_cast<uint64_t>(static_cast<uint8_t>(buffer[0]))) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[1])) << 8) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[2])) << 16) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[3])) << 24) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[4])) << 32) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[5])) << 40) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[6])) << 48) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[7])) << 56));\n #else   // !BYTE_ORDER_BIG_ENDIAN\n   uint64_t result;\n   // This should be optimized to a single instruction."
      }
    ]
  },
  {
    "sha": "fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdjOGQxMzZmNjU5MGU1NGQ2MGMzN2ZiMzRlYmVjOGRhODRlYmJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-08T16:27:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-08T18:26:30Z"
      },
      "message": "build: Update crc32c subtree",
      "tree": {
        "sha": "de2d6ac5a8b07a1e69e6fdf86d6e71c1eb9f5ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2d6ac5a8b07a1e69e6fdf86d6e71c1eb9f5ec3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiTFQv9EAXB2S/f9a9WGcotPGx4MOJ/Rzr9QtuehuzyP/vCCm9qOPO4QCETfQMZ\n3B445IGbNUgLROSGmQ8J72Y+uaSUhvv0arVKIm8kr56RZNK/P2br5clW7/38Y4NX\neDbcTRxf3Q3JyiO3EOW20WbAh7otQg2k6+f3Q+OIR0/sOVFqVT10sIDZBIdxp3P5\nDm9uGxA8MOk97IhISrmN+VBf/FGejPQwENRPm7Y1CrlTKwf2Jk69TDwiH/kuwJQp\nAAkO7ysfIDl9d95nw+m2BPBuT7JQrA1pzIoP02unxqVBXZACz8v7yc9D26zjt6YK\nXb1JNMr7Aw52Fb6ICp323EOmhUMhmaHu4VEbmzn/rNo81co8arFO4hKQaH3IAwWh\nkC1IpEQczusoMQvf1kRKoM4n2iQfd/s8qQPuH8IyHump4psW1A0P6bU8nnLEE48j\nYyeuFex5HghlA5w9hHvZNEecw0EHFzl96Tpvwnc+dY6vYy0yScnQ/duvRZnRyIsj\nW5R5eOvQ\n=liG3\n-----END PGP SIGNATURE-----",
        "payload": "tree de2d6ac5a8b07a1e69e6fdf86d6e71c1eb9f5ec3\nparent 1a9fa4c5ba27f5e32b547a77264ca0d4462bd168\nparent 90c0f267bdedc261d8fdab188e96ca58c206652a\nauthor MarcoFalke <falke.marco@gmail.com> 1607444829 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1607451990 +0100\n\nbuild: Update crc32c subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a9fa4c5ba27f5e32b547a77264ca0d4462bd168",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9fa4c5ba27f5e32b547a77264ca0d4462bd168",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9fa4c5ba27f5e32b547a77264ca0d4462bd168"
      },
      {
        "sha": "90c0f267bdedc261d8fdab188e96ca58c206652a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c0f267bdedc261d8fdab188e96ca58c206652a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c0f267bdedc261d8fdab188e96ca58c206652a"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 89,
      "deletions": 62
    },
    "files": [
      {
        "sha": "113272e65e89efff5d271ca1ba5567f39de6588f",
        "filename": "src/Makefile.crc32c.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/Makefile.crc32c.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/Makefile.crc32c.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.crc32c.include?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -41,7 +41,7 @@ crc32c_libcrc32c_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crc32c_libcrc32c_a_SOURCES =\n crc32c_libcrc32c_a_SOURCES += crc32c/include/crc32c/crc32c.h\n crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_arm64.h\n-crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_arm64_linux_check.h\n+crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_arm64_check.h\n crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_internal.h\n crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_prefetch.h\n crc32c_libcrc32c_a_SOURCES += crc32c/src/crc32c_read_le.h"
      },
      {
        "sha": "b23e02e88a32a217286a9734cfadcb9035fad784",
        "filename": "src/crc32c/.appveyor.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/.appveyor.yml?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -8,9 +8,9 @@ environment:\n   matrix:\n     # AppVeyor currently has no custom job name feature.\n     # http://help.appveyor.com/discussions/questions/1623-can-i-provide-a-friendly-name-for-jobs\n-    - JOB: Visual Studio 2017\n-      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n-      CMAKE_GENERATOR: Visual Studio 15 2017\n+    - JOB: Visual Studio 2019\n+      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n+      CMAKE_GENERATOR: Visual Studio 16 2019\n \n platform:\n   - x86\n@@ -24,10 +24,11 @@ build_script:\n   - git submodule update --init --recursive\n   - mkdir build\n   - cd build\n-  - if \"%platform%\"==\"x64\" set CMAKE_GENERATOR=%CMAKE_GENERATOR% Win64\n+  - if \"%platform%\"==\"x86\" (set CMAKE_GENERATOR_PLATFORM=\"Win32\")\n+      else (set CMAKE_GENERATOR_PLATFORM=\"%platform%\")\n   - cmake --version\n-  - cmake .. -G \"%CMAKE_GENERATOR%\" -DCRC32C_USE_GLOG=0\n-      -DCMAKE_CONFIGURATION_TYPES=\"%CONFIGURATION%\"\n+  - cmake .. -G \"%CMAKE_GENERATOR%\" -A \"%CMAKE_GENERATOR_PLATFORM%\"\n+      -DCMAKE_CONFIGURATION_TYPES=\"%CONFIGURATION%\" -DCRC32C_USE_GLOG=0\n   - cmake --build . --config \"%CONFIGURATION%\"\n   - cd ..\n "
      },
      {
        "sha": "ef9b4ea933e05e51decd7bb721e392256a5cf487",
        "filename": "src/crc32c/AUTHORS",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/AUTHORS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/AUTHORS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/AUTHORS?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -7,3 +7,5 @@ Google Inc.\n \n Fangming Fang <Fangming.Fang@arm.com>\n Vadim Skipin <vadim.skipin@gmail.com>\n+Rodrigo Tobar <rtobar@icrar.org>\n+Harry Mallon <hjmallon@gmail.com>"
      },
      {
        "sha": "71692d5796160f14ad6ea77b627427bbb4315f20",
        "filename": "src/crc32c/CMakeLists.txt",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/CMakeLists.txt?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -5,15 +5,21 @@\n cmake_minimum_required(VERSION 3.1)\n project(Crc32c VERSION 1.1.0 LANGUAGES C CXX)\n \n-# This project can use C11, but will gracefully decay down to C89.\n-set(CMAKE_C_STANDARD 11)\n-set(CMAKE_C_STANDARD_REQUIRED OFF)\n-set(CMAKE_C_EXTENSIONS OFF)\n-\n-# This project requires C++11.\n-set(CMAKE_CXX_STANDARD 11)\n-set(CMAKE_CXX_STANDARD_REQUIRED ON)\n-set(CMAKE_CXX_EXTENSIONS OFF)\n+# C standard can be overridden when this is used as a sub-project.\n+if(NOT CMAKE_C_STANDARD)\n+  # This project can use C11, but will gracefully decay down to C89.\n+  set(CMAKE_C_STANDARD 11)\n+  set(CMAKE_C_STANDARD_REQUIRED OFF)\n+  set(CMAKE_C_EXTENSIONS OFF)\n+endif(NOT CMAKE_C_STANDARD)\n+\n+# C++ standard can be overridden when this is used as a sub-project.\n+if(NOT CMAKE_CXX_STANDARD)\n+  # This project requires C++11.\n+  set(CMAKE_CXX_STANDARD 11)\n+  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+  set(CMAKE_CXX_EXTENSIONS OFF)\n+endif(NOT CMAKE_CXX_STANDARD)\n \n # https://github.com/izenecloud/cmake/blob/master/SetCompilerWarningAll.cmake\n if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n@@ -269,7 +275,7 @@ target_sources(crc32c\n   PRIVATE\n     \"${PROJECT_BINARY_DIR}/include/crc32c/crc32c_config.h\"\n     \"src/crc32c_arm64.h\"\n-    \"src/crc32c_arm64_linux_check.h\"\n+    \"src/crc32c_arm64_check.h\"\n     \"src/crc32c_internal.h\"\n     \"src/crc32c_portable.cc\"\n     \"src/crc32c_prefetch.h\"\n@@ -405,19 +411,24 @@ if(CRC32C_INSTALL)\n   )\n \n   include(CMakePackageConfigHelpers)\n+  configure_package_config_file(\n+    \"${PROJECT_NAME}Config.cmake.in\"\n+    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n+    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n+  )\n   write_basic_package_version_file(\n-      \"${PROJECT_BINARY_DIR}/Crc32cConfigVersion.cmake\"\n-      COMPATIBILITY SameMajorVersion\n+    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n+    COMPATIBILITY SameMajorVersion\n   )\n   install(\n     EXPORT Crc32cTargets\n     NAMESPACE Crc32c::\n-    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Crc32c\"\n+    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n   )\n   install(\n     FILES\n-      \"Crc32cConfig.cmake\"\n-      \"${PROJECT_BINARY_DIR}/Crc32cConfigVersion.cmake\"\n-    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Crc32c\"\n+      \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n+      \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n+    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n   )\n endif(CRC32C_INSTALL)"
      },
      {
        "sha": "c6b8fc791348f95e7f37b5120cc85aa0ea4de17c",
        "filename": "src/crc32c/Crc32cConfig.cmake.in",
        "status": "renamed",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/Crc32cConfig.cmake.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/Crc32cConfig.cmake.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/Crc32cConfig.cmake.in?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -2,4 +2,8 @@\n # Use of this source code is governed by a BSD-style license that can be\n # found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n+@PACKAGE_INIT@\n+\n include(\"${CMAKE_CURRENT_LIST_DIR}/Crc32cTargets.cmake\")\n+\n+check_required_components(Crc32c)",
        "previous_filename": "src/crc32c/Crc32cConfig.cmake"
      },
      {
        "sha": "804133bc17293ebd7e426c4af43dbb44d2a0eb6a",
        "filename": "src/crc32c/src/crc32c.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c.cc?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -8,7 +8,7 @@\n #include <cstdint>\n \n #include \"./crc32c_arm64.h\"\n-#include \"./crc32c_arm64_linux_check.h\"\n+#include \"./crc32c_arm64_check.h\"\n #include \"./crc32c_internal.h\"\n #include \"./crc32c_sse42.h\"\n #include \"./crc32c_sse42_check.h\"\n@@ -20,8 +20,8 @@ uint32_t Extend(uint32_t crc, const uint8_t* data, size_t count) {\n   static bool can_use_sse42 = CanUseSse42();\n   if (can_use_sse42) return ExtendSse42(crc, data, count);\n #elif HAVE_ARM64_CRC32C\n-  static bool can_use_arm_linux = CanUseArm64Linux();\n-  if (can_use_arm_linux) return ExtendArm64(crc, data, count);\n+  static bool can_use_arm64_crc32 = CanUseArm64Crc32();\n+  if (can_use_arm64_crc32) return ExtendArm64(crc, data, count);\n #endif  // HAVE_SSE42 && (defined(_M_X64) || defined(__x86_64__))\n \n   return ExtendPortable(crc, data, count);"
      },
      {
        "sha": "1da04ed34a3c9f61e28524fc0be8927b8a8d6a11",
        "filename": "src/crc32c/src/crc32c_arm64.cc",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_arm64.cc?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -64,7 +64,7 @@\n \n namespace crc32c {\n \n-uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n+uint32_t ExtendArm64(uint32_t crc, const uint8_t *data, size_t size) {\n   int64_t length = size;\n   uint32_t crc0, crc1, crc2, crc3;\n   uint64_t t0, t1, t2;\n@@ -74,7 +74,6 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n   const poly64_t k0 = 0x8d96551c, k1 = 0xbd6f81f8, k2 = 0xdcb17aa4;\n \n   crc = crc ^ kCRC32Xor;\n-  const uint8_t *p = reinterpret_cast<const uint8_t *>(buf);\n \n   while (length >= KBYTES) {\n     crc0 = crc;\n@@ -83,14 +82,14 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n     crc3 = 0;\n \n     // Process 1024 bytes in parallel.\n-    CRC32C1024BYTES(p);\n+    CRC32C1024BYTES(data);\n \n     // Merge the 4 partial CRC32C values.\n     t2 = (uint64_t)vmull_p64(crc2, k2);\n     t1 = (uint64_t)vmull_p64(crc1, k1);\n     t0 = (uint64_t)vmull_p64(crc0, k0);\n-    crc = __crc32cd(crc3, *(uint64_t *)p);\n-    p += sizeof(uint64_t);\n+    crc = __crc32cd(crc3, *(uint64_t *)data);\n+    data += sizeof(uint64_t);\n     crc ^= __crc32cd(0, t2);\n     crc ^= __crc32cd(0, t1);\n     crc ^= __crc32cd(0, t0);\n@@ -99,23 +98,23 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t *buf, size_t size) {\n   }\n \n   while (length >= 8) {\n-    crc = __crc32cd(crc, *(uint64_t *)p);\n-    p += 8;\n+    crc = __crc32cd(crc, *(uint64_t *)data);\n+    data += 8;\n     length -= 8;\n   }\n \n   if (length & 4) {\n-    crc = __crc32cw(crc, *(uint32_t *)p);\n-    p += 4;\n+    crc = __crc32cw(crc, *(uint32_t *)data);\n+    data += 4;\n   }\n \n   if (length & 2) {\n-    crc = __crc32ch(crc, *(uint16_t *)p);\n-    p += 2;\n+    crc = __crc32ch(crc, *(uint16_t *)data);\n+    data += 2;\n   }\n \n   if (length & 1) {\n-    crc = __crc32cb(crc, *p);\n+    crc = __crc32cb(crc, *data);\n   }\n \n   return crc ^ kCRC32Xor;"
      },
      {
        "sha": "e093687ddc1025429708a32be7bdef9875c4f340",
        "filename": "src/crc32c/src/crc32c_arm64.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_arm64.h?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -2,10 +2,10 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-// Linux-specific code checking the availability for ARM CRC32C instructions.\n+// ARM-specific code\n \n-#ifndef CRC32C_CRC32C_ARM_LINUX_H_\n-#define CRC32C_CRC32C_ARM_LINUX_H_\n+#ifndef CRC32C_CRC32C_ARM_H_\n+#define CRC32C_CRC32C_ARM_H_\n \n #include <cstddef>\n #include <cstdint>\n@@ -24,4 +24,4 @@ uint32_t ExtendArm64(uint32_t crc, const uint8_t* data, size_t count);\n \n #endif  // HAVE_ARM64_CRC32C\n \n-#endif  // CRC32C_CRC32C_ARM_LINUX_H_\n+#endif  // CRC32C_CRC32C_ARM_H_"
      },
      {
        "sha": "62a07aba09c6b07fb134e5ef3f27830f3ec8e9cb",
        "filename": "src/crc32c/src/crc32c_arm64_check.h",
        "status": "renamed",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_arm64_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_arm64_check.h?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -2,12 +2,10 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-// ARM Linux-specific code checking for the availability of CRC32C instructions.\n+// ARM-specific code checking for the availability of CRC32C instructions.\n \n-#ifndef CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n-#define CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n-\n-// X86-specific code checking for the availability of SSE4.2 instructions.\n+#ifndef CRC32C_CRC32C_ARM_CHECK_H_\n+#define CRC32C_CRC32C_ARM_CHECK_H_\n \n #include <cstddef>\n #include <cstdint>\n@@ -18,6 +16,7 @@\n \n #if HAVE_ARM64_CRC32C\n \n+#ifdef __linux__\n #if HAVE_STRONG_GETAUXVAL\n #include <sys/auxv.h>\n #elif HAVE_WEAK_GETAUXVAL\n@@ -27,17 +26,28 @@ extern \"C\" unsigned long getauxval(unsigned long type) __attribute__((weak));\n \n #define AT_HWCAP 16\n #endif  // HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n+#endif  // defined (__linux__)\n+\n+#ifdef __APPLE__\n+#include <sys/types.h>\n+#include <sys/sysctl.h>\n+#endif  // defined (__APPLE__)\n \n namespace crc32c {\n \n-inline bool CanUseArm64Linux() {\n-#if HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n+inline bool CanUseArm64Crc32() {\n+#if defined (__linux__) && (HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL)\n   // From 'arch/arm64/include/uapi/asm/hwcap.h' in Linux kernel source code.\n   constexpr unsigned long kHWCAP_PMULL = 1 << 4;\n   constexpr unsigned long kHWCAP_CRC32 = 1 << 7;\n   unsigned long hwcap = (&getauxval != nullptr) ? getauxval(AT_HWCAP) : 0;\n   return (hwcap & (kHWCAP_PMULL | kHWCAP_CRC32)) ==\n          (kHWCAP_PMULL | kHWCAP_CRC32);\n+#elif defined(__APPLE__)\n+  int val = 0;\n+  size_t len = sizeof(val);\n+  return sysctlbyname(\"hw.optional.armv8_crc32\", &val, &len, nullptr, 0) == 0\n+             && val != 0;\n #else\n   return false;\n #endif  // HAVE_STRONG_GETAUXVAL || HAVE_WEAK_GETAUXVAL\n@@ -47,4 +57,4 @@ inline bool CanUseArm64Linux() {\n \n #endif  // HAVE_ARM64_CRC32C\n \n-#endif  // CRC32C_CRC32C_ARM_LINUX_CHECK_H_\n+#endif  // CRC32C_CRC32C_ARM_CHECK_H_",
        "previous_filename": "src/crc32c/src/crc32c_arm64_linux_check.h"
      },
      {
        "sha": "51194b370ac9e2be1126fcedb14a6ef5bf729058",
        "filename": "src/crc32c/src/crc32c_benchmark.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_benchmark.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_benchmark.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_benchmark.cc?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -16,7 +16,7 @@\n #endif  // CRC32C_TESTS_BUILT_WITH_GLOG\n \n #include \"./crc32c_arm64.h\"\n-#include \"./crc32c_arm64_linux_check.h\"\n+#include \"./crc32c_arm64_check.h\"\n #include \"./crc32c_internal.h\"\n #include \"./crc32c_sse42.h\"\n #include \"./crc32c_sse42_check.h\"\n@@ -58,8 +58,8 @@ BENCHMARK_REGISTER_F(CRC32CBenchmark, Portable)\n \n #if HAVE_ARM64_CRC32C\n \n-BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmLinux)(benchmark::State& state) {\n-  if (!crc32c::CanUseArm64Linux()) {\n+BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmCRC32C)(benchmark::State& state) {\n+  if (!crc32c::CanUseArm64Crc32()) {\n     state.SkipWithError(\"ARM CRC32C instructions not available or not enabled\");\n     return;\n   }\n@@ -69,7 +69,7 @@ BENCHMARK_DEFINE_F(CRC32CBenchmark, ArmLinux)(benchmark::State& state) {\n     crc = crc32c::ExtendArm64(crc, block_buffer_, block_size_);\n   state.SetBytesProcessed(state.iterations() * block_size_);\n }\n-BENCHMARK_REGISTER_F(CRC32CBenchmark, ArmLinux)\n+BENCHMARK_REGISTER_F(CRC32CBenchmark, ArmCRC32C)\n     ->RangeMultiplier(16)\n     ->Range(256, 16777216);  // Block size.\n "
      },
      {
        "sha": "673a2a0db77d2f867a41306d0a64debf81e74b04",
        "filename": "src/crc32c/src/crc32c_read_le.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_read_le.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c8d136f6590e54d60c37fb34ebec8da84ebbb/src/crc32c/src/crc32c_read_le.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/src/crc32c_read_le.h?ref=fa7c8d136f6590e54d60c37fb34ebec8da84ebbb",
        "patch": "@@ -32,14 +32,14 @@ inline uint32_t ReadUint32LE(const uint8_t* buffer) {\n // Reads a little-endian 64-bit integer from a 64-bit-aligned buffer.\n inline uint64_t ReadUint64LE(const uint8_t* buffer) {\n #if BYTE_ORDER_BIG_ENDIAN\n-  return ((static_cast<uint32_t>(static_cast<uint8_t>(buffer[0]))) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[1])) << 8) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[2])) << 16) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[3])) << 24) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[4])) << 32) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[5])) << 40) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[6])) << 48) |\n-          (static_cast<uint32_t>(static_cast<uint8_t>(buffer[7])) << 56));\n+  return ((static_cast<uint64_t>(static_cast<uint8_t>(buffer[0]))) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[1])) << 8) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[2])) << 16) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[3])) << 24) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[4])) << 32) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[5])) << 40) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[6])) << 48) |\n+          (static_cast<uint64_t>(static_cast<uint8_t>(buffer[7])) << 56));\n #else   // !BYTE_ORDER_BIG_ENDIAN\n   uint64_t result;\n   // This should be optimized to a single instruction."
      }
    ]
  }
]