[
  {
    "sha": "19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWUzNmJiZWY2MGJmZWQzNjk1NGZhNTE1ZTU3ZGZiMDc0ZDdhM2Rh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T15:53:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Add fs.cpp/h",
      "tree": {
        "sha": "bf957da20730fb6a2e83871fe2e7bbcbba543e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf957da20730fb6a2e83871fe2e7bbcbba543e43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8680546b995b983589fa58b52d6f6381c247ded0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n   indirectmap.h \\\n@@ -326,6 +327,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n+  fs.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\"
      },
      {
        "sha": "6f2b768de322f4c1de51ae8ada66955fcec5faad",
        "filename": "src/fs.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -0,0 +1,17 @@\n+#include \"fs.h\"\n+\n+#include <boost/filesystem.hpp>\n+\n+namespace fsbridge {\n+\n+FILE *fopen(const fs::path& p, const char *mode)\n+{\n+    return ::fopen(p.string().c_str(), mode);\n+}\n+\n+FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n+{\n+    return ::freopen(p.string().c_str(), mode, stream);\n+}\n+\n+} // fsbridge"
      },
      {
        "sha": "585cbf9c38254fc3cf1e0ffd5a779eb15ee28be5",
        "filename": "src/fs.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FS_H\n+#define BITCOIN_FS_H\n+\n+#include <stdio.h>\n+#include <string>\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n+\n+/** Filesystem operations and types */\n+namespace fs = boost::filesystem;\n+\n+/** Bridge operations to C stdio */\n+namespace fsbridge {\n+    FILE *fopen(const fs::path& p, const char *mode);\n+    FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDUxNzJkMzU0MzlhMGNjZDQ4Y2ZkZDkyYWEwYjZiY2E5YTNiZWU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T15:54:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Replace includes of boost/filesystem.h with fs.h\n\nThis is step one in abstracting the use of boost::filesystem.",
      "tree": {
        "sha": "3a3362fac876fdd076c6da47e3c4dfe8693f6590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a3362fac876fdd076c6da47e3c4dfe8693f6590"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19e36bbef60bfed36954fa515e57dfb074d7a3da"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 28,
      "deletions": 37
    },
    "files": [
      {
        "sha": "2c242538537b9e27dd7cb462ea1a11e3c672e986",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,13 +8,13 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"random.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n \n CBanDB::CBanDB()\n {"
      },
      {
        "sha": "f68845f879fa0a007a6c5555781ca0d15303e483",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_ADDRDB_H\n #define BITCOIN_ADDRDB_H\n \n+#include \"fs.h\"\n #include \"serialize.h\"\n \n #include <string>\n #include <map>\n-#include <boost/filesystem/path.hpp>\n \n class CSubNet;\n class CAddrMan;"
      },
      {
        "sha": "4d81ae62d0b481ccbe286216a9bb9422bb550ab2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -9,12 +9,12 @@\n \n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/filesystem/operations.hpp>\n #include <stdio.h>\n \n #include <event2/buffer.h>"
      },
      {
        "sha": "45502e02ee6d7aad747fa3d024a1f97d9f4fc6d2",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"rpc/server.h\"\n #include \"init.h\"\n #include \"noui.h\"\n@@ -20,7 +21,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n #include <stdio.h>"
      },
      {
        "sha": "d2acfe241677de5af10bd79da3312ec1498838ef",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -4,11 +4,10 @@\n \n #include \"dbwrapper.h\"\n \n+#include \"fs.h\"\n #include \"util.h\"\n #include \"random.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>"
      },
      {
        "sha": "a6e3ba1656c871853561ac9728148d5318085e29",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,14 +6,13 @@\n #define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n "
      },
      {
        "sha": "39cff2316f1705caf91a8ff44042abeb69665f72",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -16,6 +16,7 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"httpserver.h\"\n #include \"httprpc.h\"\n #include \"key.h\"\n@@ -56,7 +57,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/function.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "0fb0ad5039636c324a1562f9e7c406c5dd71e453",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"netaddress.h\"\n@@ -32,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "c0cdad3b1e010d317bc72942b733877d2d2e7c61",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"chainparams.h\"\n #include \"clientmodel.h\"\n+#include \"fs.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n@@ -38,7 +39,6 @@\n \n #include <stdint.h>\n \n-#include <boost/filesystem/operations.hpp>\n #include <boost/thread.hpp>\n \n #include <QApplication>"
      },
      {
        "sha": "bebba259d0d9669513661935826f4e2b03dbc6d7",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -9,6 +9,7 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n+#include \"fs.h\"\n #include \"primitives/transaction.h\"\n #include \"init.h\"\n #include \"policy/policy.h\"\n@@ -35,9 +36,6 @@\n #include \"shlwapi.h\"\n #endif\n \n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>"
      },
      {
        "sha": "afe216615431cb651e7ccd3cf3e8035b4275256c",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_GUIUTIL_H\n \n #include \"amount.h\"\n+#include \"fs.h\"\n \n #include <QEvent>\n #include <QHeaderView>\n@@ -16,8 +17,6 @@\n #include <QTableView>\n #include <QLabel>\n \n-#include <boost/filesystem.hpp>\n-\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n "
      },
      {
        "sha": "bafdfc917e8aa90cffac21908e50061417dcc5a3",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,15 +6,14 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"fs.h\"\n #include \"intro.h\"\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n \n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <QFileDialog>\n #include <QSettings>\n #include <QMessageBox>"
      },
      {
        "sha": "965f98db33e91699a8d9509a36259d089e7bcb31",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"chainparams.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\"\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n@@ -17,8 +18,6 @@\n #include <QDir>\n #include <QtGlobal>\n \n-#include <boost/filesystem.hpp>\n-\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {"
      },
      {
        "sha": "fa1d8042bcf5914d35c11947c2e1ff9d7b688c86",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_RPCPROTOCOL_H\n #define BITCOIN_RPCPROTOCOL_H\n \n+#include \"fs.h\"\n+\n #include <list>\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <boost/filesystem.hpp>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "4032c5163c87d2db2ecb3d1cd3994d8e963ebb13",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpc/server.h\"\n \n #include \"base58.h\"\n+#include \"fs.h\"\n #include \"init.h\"\n #include \"random.h\"\n #include \"sync.h\"\n@@ -16,7 +17,6 @@\n #include <univalue.h>\n \n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>"
      },
      {
        "sha": "4a12277a3644f365bbc9361e4a0d90bd2d023b9a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n@@ -24,7 +25,6 @@\n \n #include <memory>\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n FastRandomContext insecure_rand_ctx(true);"
      },
      {
        "sha": "d67d35a37013104594330c40ff3c0a0e8145cb73",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n /** Basic testing setup."
      },
      {
        "sha": "96ce4db2fe6a754192c57ea5c994abb283f5a811",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,7 +8,7 @@\n #include <shlobj.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n+#include \"fs.h\"\n \n boost::filesystem::path GetTempPath() {\n     return boost::filesystem::temp_directory_path();"
      },
      {
        "sha": "e2d0de0e26b7b2ac4264ca15713467080fb3d72f",
        "filename": "src/test/testutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,7 +8,7 @@\n #ifndef BITCOIN_TEST_TESTUTIL_H\n #define BITCOIN_TEST_TESTUTIL_H\n \n-#include <boost/filesystem/path.hpp>\n+#include \"fs.h\"\n \n boost::filesystem::path GetTempPath();\n "
      },
      {
        "sha": "600036eab0169cb608213516253b942dfde3a7c8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -79,8 +80,6 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/join.hpp>\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>"
      },
      {
        "sha": "1dbf044105b510fc94e7e9cfb1a912d5af486731",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -25,7 +26,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n "
      },
      {
        "sha": "df6b8e41e750ce89eaf7562f0468c76449fa3171",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"init.h\"\n #include \"policy/fees.h\"\n@@ -41,8 +42,6 @@\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/join.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "0d0bf66ab5e5bb6500b91c7b7f4be22835f3e10b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n+#include \"fs.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n #include \"script/script_error.h\"\n #include \"sync.h\"\n@@ -30,7 +31,6 @@\n #include <atomic>\n \n #include <boost/unordered_map.hpp>\n-#include <boost/filesystem/path.hpp>\n \n class CBlockIndex;\n class CBlockTreeDB;"
      },
      {
        "sha": "825e233b9885a13f377e9069c9ad72578a2b8c26",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #include \"db.h\"\n \n #include \"addrman.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n@@ -17,7 +18,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n #include <boost/version.hpp>"
      },
      {
        "sha": "b99c3156d63081a23e500619a5f2c59acc64933f",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_DB_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n@@ -16,8 +17,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;"
      },
      {
        "sha": "ec0432f9cfc335c1abca13dc24ada09f8a83ed01",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -30,7 +31,6 @@\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n CWallet* pwalletMain = NULL;"
      },
      {
        "sha": "a04e35046de302c2482eb08784708d9c351dae00",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n@@ -18,7 +19,6 @@\n #include <atomic>\n \n #include <boost/version.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n "
      }
    ]
  },
  {
    "sha": "bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWM1YzljZjY0M2U5MzMzNDc5YWM2Njc0MjZkMGI3MGY4ZjNhYTdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T16:05:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Replace uses of boost::filesystem with fs\n\nStep two in abstracting away boost::filesystem.\n\nTo repeat this, simply run:\n```\ngit ls-files \\*.cpp \\*.h | xargs sed -i 's/boost::filesystem/fs/g'\n```",
      "tree": {
        "sha": "5fc0eac69ace5d21c1a1b40e6b610058b92a4bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fc0eac69ace5d21c1a1b40e6b610058b92a4bd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 139,
      "deletions": 139
    },
    "files": [
      {
        "sha": "5f203c8f75b473d060dca7755371c57f95031c5c",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -36,7 +36,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n     ssBanlist << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n@@ -68,7 +68,7 @@ bool CBanDB::Read(banmap_t& banSet)\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t fileSize = fs::file_size(pathBanlist);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n@@ -133,7 +133,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     ssPeers << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n@@ -165,7 +165,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t fileSize = fs::file_size(pathAddr);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))"
      },
      {
        "sha": "c3d509bd3a7a653353d00b0c9c7a5eb776fbd9dc",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -80,7 +80,7 @@ typedef std::map<CSubNet, CBanEntry> banmap_t;\n class CAddrDB\n {\n private:\n-    boost::filesystem::path pathAddr;\n+    fs::path pathAddr;\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n@@ -92,7 +92,7 @@ class CAddrDB\n class CBanDB\n {\n private:\n-    boost::filesystem::path pathBanlist;\n+    fs::path pathBanlist;\n public:\n     CBanDB();\n     bool Write(const banmap_t& banSet);"
      },
      {
        "sha": "5edd43d41e0f81c88e7fc8e5cd879bfa9a51a930",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -96,7 +96,7 @@ static int AppInitRPC(int argc, char* argv[])\n         }\n         return EXIT_SUCCESS;\n     }\n-    if (!boost::filesystem::is_directory(GetDataDir(false))) {\n+    if (!fs::is_directory(GetDataDir(false))) {\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }"
      },
      {
        "sha": "31680a8ec765ca85916f66df1e97ba567aaca72f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -97,7 +97,7 @@ bool AppInit(int argc, char* argv[])\n \n     try\n     {\n-        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        if (!fs::is_directory(GetDataDir(false)))\n         {\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n             return false;"
      },
      {
        "sha": "3d2098c05927cceb8c41184536f77ab87cbe1230",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -90,7 +90,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;"
      },
      {
        "sha": "b13e98b7a4b5cbbcdf90abc869e2f1305785127a",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -194,7 +194,7 @@ class CDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CDBWrapper();\n \n     template <typename K, typename V>"
      },
      {
        "sha": "808cc64f707a16078935ae95ffd449aedb134b1a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -212,7 +212,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+        fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             mempool.WriteFeeEstimates(est_fileout);\n@@ -250,8 +250,8 @@ void Shutdown()\n \n #ifndef WIN32\n     try {\n-        boost::filesystem::remove(GetPidFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetPidFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n     }\n #endif\n@@ -578,14 +578,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n+    std::map<std::string, fs::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n-    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n+    fs::path blocksdir = GetDataDir() / \"blocks\";\n+    for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -602,7 +602,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, fs::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     }\n }\n \n-void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n+void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n@@ -624,7 +624,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n-            if (!boost::filesystem::exists(GetBlockPosFilename(pos, \"blk\")))\n+            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -641,11 +641,11 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    boost::filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (boost::filesystem::exists(pathBootstrap)) {\n+    fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (fs::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n-            boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -655,7 +655,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n+    BOOST_FOREACH(const fs::path& path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1123,7 +1123,7 @@ static bool LockDataDirectory(bool probeOnly)\n     std::string strDataDir = GetDataDir().string();\n \n     // Make sure only a single Bitcoin process is using the data directory.\n-    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n+    fs::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n@@ -1388,7 +1388,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fReindex = GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n-    boost::filesystem::create_directories(GetDataDir() / \"blocks\");\n+    fs::create_directories(GetDataDir() / \"blocks\");\n \n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n@@ -1534,7 +1534,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n \n-    boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n@@ -1590,7 +1590,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    std::vector<boost::filesystem::path> vImportFiles;\n+    std::vector<fs::path> vImportFiles;\n     if (mapMultiArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))"
      },
      {
        "sha": "23ec3ab434fa5b4ca221b809680b0c6cd92f86f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -608,7 +608,7 @@ int main(int argc, char *argv[])\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n+    if (!fs::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(GetArg(\"-datadir\", \"\"))));"
      },
      {
        "sha": "3a1f9b8e04892bd26c25f30b5cde44f3020fd69d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -63,7 +63,7 @@\n #include <QFontDatabase>\n #endif\n \n-static boost::filesystem::detail::utf8_codecvt_facet utf8;\n+static fs::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n@@ -408,10 +408,10 @@ bool isObscured(QWidget *w)\n \n void openDebugLogfile()\n {\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n-    if (boost::filesystem::exists(pathDebug))\n+    if (fs::exists(pathDebug))\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n@@ -595,7 +595,7 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n }\n \n #ifdef WIN32\n-boost::filesystem::path static StartupShortcutPath()\n+fs::path static StartupShortcutPath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -608,13 +608,13 @@ boost::filesystem::path static StartupShortcutPath()\n bool GetStartOnSystemStartup()\n {\n     // check for Bitcoin*.lnk\n-    return boost::filesystem::exists(StartupShortcutPath());\n+    return fs::exists(StartupShortcutPath());\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n+    fs::remove(StartupShortcutPath());\n \n     if (fAutoStart)\n     {\n@@ -684,9 +684,9 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n // Follow the Desktop Application Autostart Spec:\n // http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n-boost::filesystem::path static GetAutostartDir()\n+fs::path static GetAutostartDir()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n     if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n@@ -695,7 +695,7 @@ boost::filesystem::path static GetAutostartDir()\n     return fs::path();\n }\n \n-boost::filesystem::path static GetAutostartFilePath()\n+fs::path static GetAutostartFilePath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -705,7 +705,7 @@ boost::filesystem::path static GetAutostartFilePath()\n \n bool GetStartOnSystemStartup()\n {\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    fs::ifstream optionFile(GetAutostartFilePath());\n     if (!optionFile.good())\n         return false;\n     // Scan through file for \"Hidden=true\":\n@@ -725,17 +725,17 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n+        fs::remove(GetAutostartFilePath());\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n         memset(pszExePath, 0, sizeof(pszExePath));\n         if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n             return false;\n \n-        boost::filesystem::create_directories(GetAutostartDir());\n+        fs::create_directories(GetAutostartDir());\n \n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n+        fs::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n         std::string chain = ChainNameFromCommandLine();\n@@ -857,12 +857,12 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-boost::filesystem::path qstringToBoostPath(const QString &path)\n+fs::path qstringToBoostPath(const QString &path)\n {\n-    return boost::filesystem::path(path.toStdString(), utf8);\n+    return fs::path(path.toStdString(), utf8);\n }\n \n-QString boostPathToQString(const boost::filesystem::path &path)\n+QString boostPathToQString(const fs::path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }"
      },
      {
        "sha": "f95677015641c235c0461c985fde96eeb364aca0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -182,10 +182,10 @@ namespace GUIUtil\n     void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n \n     /* Convert QString to OS specific boost path through UTF-8 */\n-    boost::filesystem::path qstringToBoostPath(const QString &path);\n+    fs::path qstringToBoostPath(const QString &path);\n \n     /* Convert OS specific boost path to QString through UTF-8 */\n-    QString boostPathToQString(const boost::filesystem::path &path);\n+    QString boostPathToQString(const fs::path &path);\n \n     /* Convert seconds into a QString with days, hours, mins, secs */\n     QString formatDurationStr(int secs);"
      },
      {
        "sha": "2a7ea0ff657b8a8d305f5e718e29287e44589486",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -69,7 +69,7 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n \n void FreespaceChecker::check()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n@@ -189,7 +189,7 @@ QString Intro::getDefaultDataDirectory()\n \n bool Intro::pickDataDirectory()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "dada689731094611f23f562a289138bf3842364b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -155,5 +155,5 @@ void RPCNestedTests::rpcNestedTests()\n     delete pblocktree;\n     pblocktree = nullptr;\n \n-    boost::filesystem::remove_all(boost::filesystem::path(path));\n+    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "823a5775f6dc3b2b4680e5df981cc09d9be18269",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -66,9 +66,9 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n /** Default name for auth cookie file */\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n-boost::filesystem::path GetAuthCookieFile()\n+fs::path GetAuthCookieFile()\n {\n-    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    fs::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }\n@@ -84,7 +84,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open()) {\n         LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n@@ -103,7 +103,7 @@ bool GetAuthCookie(std::string *cookie_out)\n {\n     std::ifstream file;\n     std::string cookie;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         return false;\n@@ -118,8 +118,8 @@ bool GetAuthCookie(std::string *cookie_out)\n void DeleteAuthCookie()\n {\n     try {\n-        boost::filesystem::remove(GetAuthCookieFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetAuthCookieFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n     }\n }"
      },
      {
        "sha": "70f7092cfeb659d8c870d02d4142c308c9768402",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -90,7 +90,7 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message);\n \n /** Get name of RPC authentication cookie file */\n-boost::filesystem::path GetAuthCookieFile();\n+fs::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */\n bool GenerateAuthCookie(std::string *cookie_out);\n /** Read the RPC authentication cookie from disk */"
      },
      {
        "sha": "c9d9849ada071ca27b169f707627c931f58475f3",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -125,8 +125,8 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -167,8 +167,8 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "bda38196622773e8c0ea4fe87fc5af119970ca2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -59,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-        boost::filesystem::create_directories(pathTemp);\n+        fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n@@ -91,7 +91,7 @@ TestingSetup::~TestingSetup()\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n-        boost::filesystem::remove_all(pathTemp);\n+        fs::remove_all(pathTemp);\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "60a86d8c4839093962bec59d817a31b38ded2e15",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -30,7 +30,7 @@ struct BasicTestingSetup {\n class CConnman;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n+    fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -10,6 +10,6 @@\n \n #include \"fs.h\"\n \n-boost::filesystem::path GetTempPath() {\n-    return boost::filesystem::temp_directory_path();\n+fs::path GetTempPath() {\n+    return fs::temp_directory_path();\n }"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -10,6 +10,6 @@\n \n #include \"fs.h\"\n \n-boost::filesystem::path GetTempPath();\n+fs::path GetTempPath();\n \n #endif // BITCOIN_TEST_TESTUTIL_H"
      },
      {
        "sha": "49f4c2bc9a29224332adf3360d03d47543a4e548",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -214,7 +214,7 @@ void OpenDebugLog()\n \n     assert(fileout == NULL);\n     assert(vMsgsBeforeOpenLog);\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) {\n         setbuf(fileout, NULL); // unbuffered\n@@ -353,7 +353,7 @@ int LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n-                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                fs::path pathDebug = GetDataDir() / \"debug.log\";\n                 if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n                     setbuf(fileout, NULL); // unbuffered\n             }\n@@ -511,9 +511,9 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n-boost::filesystem::path GetDefaultDataDir()\n+fs::path GetDefaultDataDir()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n@@ -538,13 +538,13 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n-static boost::filesystem::path pathCached;\n-static boost::filesystem::path pathCachedNetSpecific;\n+static fs::path pathCached;\n+static fs::path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n \n-const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n+const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     LOCK(csPathCached);\n \n@@ -576,13 +576,13 @@ void ClearDatadirCache()\n {\n     LOCK(csPathCached);\n \n-    pathCached = boost::filesystem::path();\n-    pathCachedNetSpecific = boost::filesystem::path();\n+    pathCached = fs::path();\n+    pathCachedNetSpecific = fs::path();\n }\n \n-boost::filesystem::path GetConfigFile(const std::string& confPath)\n+fs::path GetConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::path pathConfigFile(confPath);\n+    fs::path pathConfigFile(confPath);\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -591,7 +591,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath)\n \n void ReadConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n+    fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n@@ -616,14 +616,14 @@ void ReadConfigFile(const std::string& confPath)\n }\n \n #ifndef WIN32\n-boost::filesystem::path GetPidFile()\n+fs::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n+    fs::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n+void CreatePidFile(const fs::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");\n     if (file)\n@@ -634,7 +634,7 @@ void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n }\n #endif\n \n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n+bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32\n     return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n@@ -650,13 +650,13 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n  * Specifically handles case where path p exists, but it wasn't possible for the user to\n  * write to the parent directory.\n  */\n-bool TryCreateDirectory(const boost::filesystem::path& p)\n+bool TryCreateDirectory(const fs::path& p)\n {\n     try\n     {\n-        return boost::filesystem::create_directory(p);\n-    } catch (const boost::filesystem::filesystem_error&) {\n-        if (!boost::filesystem::exists(p) || !boost::filesystem::is_directory(p))\n+        return fs::create_directory(p);\n+    } catch (const fs::filesystem_error&) {\n+        if (!fs::exists(p) || !fs::is_directory(p))\n             throw;\n     }\n \n@@ -763,11 +763,11 @@ void ShrinkDebugFile()\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n-    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n+    fs::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n-    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n+    if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n         std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n@@ -787,9 +787,9 @@ void ShrinkDebugFile()\n }\n \n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     char pszPath[MAX_PATH] = \"\";\n \n@@ -850,9 +850,9 @@ void SetupEnvironment()\n     // The path locale is lazy initialized and to avoid deinitialization errors\n     // in multithreading environments, it is set explicitly by the main thread.\n     // A dummy locale is used to extract the internal default locale, used by\n-    // boost::filesystem::path, which is then used to explicitly imbue the path.\n-    std::locale loc = boost::filesystem::path::imbue(std::locale::classic());\n-    boost::filesystem::path::imbue(loc);\n+    // fs::path, which is then used to explicitly imbue the path.\n+    std::locale loc = fs::path::imbue(std::locale::classic());\n+    fs::path::imbue(loc);\n }\n \n bool SetupNetworking()"
      },
      {
        "sha": "7998449feebc26e62133bb5865621fe9afe28728",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -144,19 +144,19 @@ void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n-bool TryCreateDirectory(const boost::filesystem::path& p);\n-boost::filesystem::path GetDefaultDataDir();\n-const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+bool RenameOver(fs::path src, fs::path dest);\n+bool TryCreateDirectory(const fs::path& p);\n+fs::path GetDefaultDataDir();\n+const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-boost::filesystem::path GetConfigFile(const std::string& confPath);\n+fs::path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n-boost::filesystem::path GetPidFile();\n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n+fs::path GetPidFile();\n+void CreatePidFile(const fs::path &path, pid_t pid);\n #endif\n void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n void OpenDebugLog();\n void ShrinkDebugFile();"
      },
      {
        "sha": "0b55e1db1bba56c1e253aae26a99ab0b43697bad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -3314,8 +3314,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n+        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n+        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3399,7 +3399,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = fs::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n@@ -3412,8 +3412,8 @@ FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())\n         return NULL;\n-    boost::filesystem::path path = GetBlockPosFilename(pos, prefix);\n-    boost::filesystem::create_directories(path.parent_path());\n+    fs::path path = GetBlockPosFilename(pos, prefix);\n+    fs::create_directories(path.parent_path());\n     FILE* file = fopen(path.string().c_str(), \"rb+\");\n     if (!file && !fReadOnly)\n         file = fopen(path.string().c_str(), \"wb+\");\n@@ -3439,7 +3439,7 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n {\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }"
      },
      {
        "sha": "4aa10cbb0bdc5e26058dd5e128c3b278910df0f8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -250,7 +250,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Open an undo file (rev?????.dat) */\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */"
      },
      {
        "sha": "050450247fcb248fdb9edef799befa5ea5e09bf2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -66,17 +66,17 @@ void CDBEnv::Close()\n     EnvShutdown();\n }\n \n-bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n+bool CDBEnv::Open(const fs::path& pathIn)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n     strPath = pathIn.string();\n-    boost::filesystem::path pathLogDir = pathIn / \"database\";\n+    fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    boost::filesystem::path pathErrorFile = pathIn / \"db.log\";\n+    fs::path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -227,13 +227,13 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n-    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n+    if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n         errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n         return false;\n@@ -242,12 +242,12 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     if (!bitdb.Open(dataDir))\n     {\n         // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = dataDir / \"database\";\n-        boost::filesystem::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = dataDir / \"database\";\n+        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-        } catch (const boost::filesystem::filesystem_error&) {\n+        } catch (const fs::filesystem_error&) {\n             // failure is ok (well, not really, but it's not worse than what we started with)\n         }\n \n@@ -261,9 +261,9 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n {\n-    if (boost::filesystem::exists(dataDir / walletFile))\n+    if (fs::exists(dataDir / walletFile))\n     {\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc);\n         if (r == CDBEnv::RECOVER_OK)\n@@ -590,7 +590,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    boost::filesystem::remove_all(boost::filesystem::path(strPath) / \"database\");\n+                    fs::remove_all(fs::path(strPath) / \"database\");\n             }\n         }\n     }"
      },
      {
        "sha": "9f912f9a1a4f14ceebcfa46c458bc7e48a777b92",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -27,7 +27,7 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    // Don't change into boost::filesystem::path, as that can result in\n+    // Don't change into fs::path, as that can result in\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n@@ -66,7 +66,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const boost::filesystem::path& path);\n+    bool Open(const fs::path& path);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -109,9 +109,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(std::string strFile);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n \n private:\n     CDB(const CDB&);"
      },
      {
        "sha": "55d81daab426ec52b9ba2a5c3cd599781d894888",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -3945,16 +3945,16 @@ bool CWallet::BackupWallet(const std::string& strDest)\n                 bitdb.mapFileUseCount.erase(strWalletFile);\n \n                 // Copy wallet file\n-                boost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n-                boost::filesystem::path pathDest(strDest);\n-                if (boost::filesystem::is_directory(pathDest))\n+                fs::path pathSrc = GetDataDir() / strWalletFile;\n+                fs::path pathDest(strDest);\n+                if (fs::is_directory(pathDest))\n                     pathDest /= strWalletFile;\n \n                 try {\n-                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n+                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n                     return true;\n-                } catch (const boost::filesystem::filesystem_error& e) {\n+                } catch (const fs::filesystem_error& e) {\n                     LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n                     return false;\n                 }"
      },
      {
        "sha": "ceff2d36e35938588d136e87a06c03b4285f943b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -842,12 +842,12 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n {\n     return CDB::VerifyDatabaseFile(walletFile, dataDir, errorStr, warningStr, CWalletDB::Recover);\n }"
      },
      {
        "sha": "b94f341b2edb722d25824aaa5517642072f38428",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -185,9 +185,9 @@ class CWalletDB : public CDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "2a5f574762614b74dee738392057200dd28c64fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTVmNTc0NzYyNjE0Yjc0ZGVlNzM4MzkyMDU3MjAwZGQyOGM2NGZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T16:28:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Use fsbridge for fopen and freopen\n\nAbstracts away how a path is opened to a `FILE*`.\n\nReduces the number of places where path is converted to a string\nfor anything else but printing.",
      "tree": {
        "sha": "7b47462778a6dd5964eb0c2cc332276581b2615e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b47462778a6dd5964eb0c2cc332276581b2615e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a5f574762614b74dee738392057200dd28c64fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5f574762614b74dee738392057200dd28c64fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bac5c9cf643e9333479ac667426d0b70f8f3aa7f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a3743cd0d4dee3fb069e952bd847e2d59c46d607",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -37,7 +37,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n \n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -62,7 +62,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n bool CBanDB::Read(banmap_t& banSet)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathBanlist, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n@@ -134,7 +134,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n \n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -159,7 +159,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n bool CAddrDB::Read(CAddrMan& addr)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathAddr, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());"
      },
      {
        "sha": "06e657abee37e6ced34e141e4b36fed68e86278c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -213,7 +213,7 @@ void Shutdown()\n     if (fFeeEstimatesInitialized)\n     {\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-        CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n+        CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n@@ -643,7 +643,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     // hardcoded $DATADIR/bootstrap.dat\n     fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n     if (fs::exists(pathBootstrap)) {\n-        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n+        FILE *file = fsbridge::fopen(pathBootstrap, \"rb\");\n         if (file) {\n             fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n@@ -656,7 +656,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n \n     // -loadblock=\n     BOOST_FOREACH(const fs::path& path, vImportFiles) {\n-        FILE *file = fopen(path.string().c_str(), \"rb\");\n+        FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n@@ -1124,7 +1124,7 @@ static bool LockDataDirectory(bool probeOnly)\n \n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path pathLockFile = GetDataDir() / \".lock\";\n-    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n     try {\n@@ -1535,7 +1535,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n \n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n+    CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n         mempool.ReadFeeEstimates(est_filein);"
      },
      {
        "sha": "aa5d57c413f2dfb6088a6fdfdbc7c2db7960ebad",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -215,7 +215,7 @@ void OpenDebugLog()\n     assert(fileout == NULL);\n     assert(vMsgsBeforeOpenLog);\n     fs::path pathDebug = GetDataDir() / \"debug.log\";\n-    fileout = fopen(pathDebug.string().c_str(), \"a\");\n+    fileout = fsbridge::fopen(pathDebug, \"a\");\n     if (fileout) {\n         setbuf(fileout, NULL); // unbuffered\n         // dump buffered messages from before we opened the log\n@@ -354,7 +354,7 @@ int LogPrintStr(const std::string &str)\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n                 fs::path pathDebug = GetDataDir() / \"debug.log\";\n-                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                if (fsbridge::freopen(pathDebug,\"a\",fileout) != NULL)\n                     setbuf(fileout, NULL); // unbuffered\n             }\n \n@@ -625,7 +625,7 @@ fs::path GetPidFile()\n \n void CreatePidFile(const fs::path &path, pid_t pid)\n {\n-    FILE* file = fopen(path.string().c_str(), \"w\");\n+    FILE* file = fsbridge::fopen(path, \"w\");\n     if (file)\n     {\n         fprintf(file, \"%d\\n\", pid);\n@@ -764,7 +764,7 @@ void ShrinkDebugFile()\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n     fs::path pathLog = GetDataDir() / \"debug.log\";\n-    FILE* file = fopen(pathLog.string().c_str(), \"r\");\n+    FILE* file = fsbridge::fopen(pathLog, \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n     if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n@@ -775,7 +775,7 @@ void ShrinkDebugFile()\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);\n \n-        file = fopen(pathLog.string().c_str(), \"w\");\n+        file = fsbridge::fopen(pathLog, \"w\");\n         if (file)\n         {\n             fwrite(vch.data(), 1, nBytes, file);"
      },
      {
        "sha": "03bae31d9ee3eb27084f4a698c1730a4a8aa8eef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -3414,9 +3414,9 @@ FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n         return NULL;\n     fs::path path = GetBlockPosFilename(pos, prefix);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fopen(path.string().c_str(), \"rb+\");\n+    FILE* file = fsbridge::fopen(path, \"rb+\");\n     if (!file && !fReadOnly)\n-        file = fopen(path.string().c_str(), \"wb+\");\n+        file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n         LogPrintf(\"Unable to open file %s\\n\", path.string());\n         return NULL;\n@@ -4164,7 +4164,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"rb\");\n+    FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4244,7 +4244,7 @@ void DumpMempool(void)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"wb\");\n+        FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n         if (!filestr) {\n             return;\n         }"
      },
      {
        "sha": "f47fc92b5758ae8b62e548fc7dc8b7f5a9342a08",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -89,7 +89,7 @@ bool CDBEnv::Open(const fs::path& pathIn)\n     dbenv->set_lg_max(1048576);\n     dbenv->set_lk_max_locks(40000);\n     dbenv->set_lk_max_objects(40000);\n-    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);"
      }
    ]
  },
  {
    "sha": "75594bd7f26b8c3842d399deec2321886b9e75ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTU5NGJkN2YyNmI4YzM4NDJkMzk5ZGVlYzIzMjE4ODZiOWU3NWVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-02T06:25:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:33:14Z"
      },
      "message": "torcontrol: Use fs::path instead of std::string for private key path",
      "tree": {
        "sha": "7c495cdd596d6d20a3a82f1c83ef603f179e418b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c495cdd596d6d20a3a82f1c83ef603f179e418b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75594bd7f26b8c3842d399deec2321886b9e75ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a5f574762614b74dee738392057200dd28c64fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5f574762614b74dee738392057200dd28c64fb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c1bd95b00f22526063045a2be4b49bee3bd451e0",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75594bd7f26b8c3842d399deec2321886b9e75ef/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75594bd7f26b8c3842d399deec2321886b9e75ef/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=75594bd7f26b8c3842d399deec2321886b9e75ef",
        "patch": "@@ -314,9 +314,9 @@ static std::map<std::string,std::string> ParseTorReplyMapping(const std::string\n  * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n  *         (with len > maxsize) will be returned.\n  */\n-static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n+static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n {\n-    FILE *f = fopen(filename.c_str(), \"rb\");\n+    FILE *f = fsbridge::fopen(filename, \"rb\");\n     if (f == NULL)\n         return std::make_pair(false,\"\");\n     std::string retval;\n@@ -334,9 +334,9 @@ static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, s\n /** Write contents of std::string to a file.\n  * @return true on success.\n  */\n-static bool WriteBinaryFile(const std::string &filename, const std::string &data)\n+static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n {\n-    FILE *f = fopen(filename.c_str(), \"wb\");\n+    FILE *f = fsbridge::fopen(filename, \"wb\");\n     if (f == NULL)\n         return false;\n     if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n@@ -359,7 +359,7 @@ class TorController\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n-    std::string GetPrivateKeyFile();\n+    fs::path GetPrivateKeyFile();\n \n     /** Reconnect, after getting disconnected */\n     void Reconnect();\n@@ -411,7 +411,7 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n         private_key = pkf.second;\n     }\n }\n@@ -442,9 +442,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open\n@@ -651,9 +651,9 @@ void TorController::Reconnect()\n     }\n }\n \n-std::string TorController::GetPrivateKeyFile()\n+fs::path TorController::GetPrivateKeyFile()\n {\n-    return (GetDataDir() / \"onion_private_key\").string();\n+    return GetDataDir() / \"onion_private_key\";\n }\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)"
      }
    ]
  },
  {
    "sha": "f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTEwMjcyZGM5MGNkODcwYmZmZjQ4YzlhNjFlMDkxZTY3ZGJiMmU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-02T08:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:33:14Z"
      },
      "message": "Remove `namespace fs=fs`\n\nHaving these inside functions is silly and redundant now.",
      "tree": {
        "sha": "2c385efd61a2888c83cb0e0730a35913f6a707af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c385efd61a2888c83cb0e0730a35913f6a707af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75594bd7f26b8c3842d399deec2321886b9e75ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75594bd7f26b8c3842d399deec2321886b9e75ef"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a2699d374a45af5bcb91f10a2692d29d37658b2b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -686,8 +686,6 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n fs::path static GetAutostartDir()\n {\n-    namespace fs = fs;\n-\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n     if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");"
      },
      {
        "sha": "2460a59109c505e5ab9dd187a9ee9cb0b5233c92",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -69,7 +69,6 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n \n void FreespaceChecker::check()\n {\n-    namespace fs = fs;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n@@ -189,7 +188,6 @@ QString Intro::getDefaultDataDirectory()\n \n bool Intro::pickDataDirectory()\n {\n-    namespace fs = fs;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "54737992891414b8fd45feebf84bdd59c0941226",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -513,7 +513,6 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n \n fs::path GetDefaultDataDir()\n {\n-    namespace fs = fs;\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n@@ -544,7 +543,6 @@ static CCriticalSection csPathCached;\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = fs;\n \n     LOCK(csPathCached);\n \n@@ -789,8 +787,6 @@ void ShrinkDebugFile()\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = fs;\n-\n     char pszPath[MAX_PATH] = \"\";\n \n     if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))"
      }
    ]
  }
]