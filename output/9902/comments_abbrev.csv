theuni,2017-03-02T20:05:29Z,"Nice! Concept and utACK. Not tested much, but I don't think behavior should differ at all.\n\nI wanted to see how compatible this would be to working with the std::filesystem spec, so I tried it out. It's pretty close. The changes needed are here: https://github.com/theuni/bitcoin/commits/filesystem (I didn't attempt to build qt, though). The one outlier is boost::filesystem::path::imbue(). I'm ",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-283764371,283764371,
laanwj,2017-03-02T20:39:59Z,"> The one outlier is boost::filesystem::path::imbue(). I'm not sure what to do about that, so I left it alone.\n\nFor boost that imbue hack is necessary to get paths with international characters working (on Windows, I believe). Hopefully std will have some other (possibly saner!) way to achieve the same. \n\n> When we do our own implementation, it'd be really nice if we could be strictly comp",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-283773336,283773336,
fanquake,2017-03-03T20:14:39Z,Concept ACK. Added to the Boost migration project.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-284058899,284058899,
gmaxwell,2017-03-06T23:25:45Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-284568467,284568467,
laanwj,2017-03-07T15:50:33Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-284761185,284761185,
TheBlueMatt,2017-03-08T20:21:52Z,"I'm not really convinced its worth having our own namespace just to mirror boost::filesystem. If we want to start supporting systems that dont have a concept of a filesystem, sure, but going out of our way to effectively just rename boost::filesystem so that its less work in 3/5 years when there is a useable std::filesystem seems like overkill (and more Bitcoin Core-specific things) to me.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-285157356,285157356,
laanwj,2017-03-08T20:48:02Z,"> If we want to start supporting systems that dont have a concept of a filesystem, sure\n\nThat happens to be exactly what I'm doing. At the least this reduces the size of the patch set I need to support that. It's a minimal and effectively risk-free change.\nDo you really need to start an argument about this?",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-285164238,285164238,
TheBlueMatt,2017-03-08T20:52:49Z,"@laanwj ahh, ok, I misunderstood your work with cloudabi as testing to see what it would take, instead of a serious effort. I withdraw my complaint.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-285165500,285165500,
laanwj,2017-03-08T21:07:06Z,Not sure this is worth doing anymore.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-285169351,285169351,
fanquake,2017-03-22T23:04:19Z,Needs a rebase. @laanwj do you want to continue with this? I think it's worth having in 0.15.0.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-288566738,288566738,
theuni,2017-03-24T19:07:12Z,This is very straightforward and ropes off the dependency. I don't see any downside. +1 for 0.15.,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-289117131,289117131,
laanwj,2017-03-27T08:49:47Z,Rebased,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-289391878,289391878,
jonasschnelli,2017-03-27T12:22:14Z,"~~The QT tests won't compile here. I don't know why the even ~~run~~compile on master.\nLDADD misses `$(BOOST_UNIT_TEST_FRAMEWORK_LIB)`.~~\n\n~~This diff seems to be required:~~\n\n```diff\ndiff --git a/src/Makefile.qttest.include b/src/Makefile.qttest.include\nindex 948e13a..f0aac5e 100644\n--- a/src/Makefile.qttest.include\n+++ b/src/Makefile.qttest.include\n@@ -59,7 +59,7 @@ if ENABLE",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-289437353,289437353,
jonasschnelli,2017-03-27T13:25:00Z,"The LDADD patch above was incorrect. There was an accidental `include <boost/test/unit_test.hpp>` in this PR.\nAll good.\n\nTested ACK 462119817ae41313c3285d57e6adf67f4595b81a",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-289452167,289452167,
laanwj,2017-03-27T13:29:29Z,"> The LDADD patch above was incorrect. There was an accidental include <boost/test/unit_test.hpp> in this PR.\n\nYes, thanks for noticing the issue. I didn't have the problem locally for some reason.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-289453372,289453372,
laanwj,2017-04-03T10:34:01Z,Rebased for #9424,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-291106528,291106528,
JeremyRubin,2017-04-05T19:53:59Z,"utACK f110272.\n\nBecause only a few calls are actually used, it might be good to explicitly wrap those so you can pull the boost #includes out of the fs.h header and into fs.cpp.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-291977901,291977901,
sipa,2017-04-06T08:10:48Z,utACK f110272dc90cd870bfff48c9a61e091e67dbb2e9,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-292100969,292100969,
theuni,2017-04-06T17:56:40Z,"utACK f110272dc90cd870bfff48c9a61e091e67dbb2e9. +1 for @JeremyRubin's wrapper idea as well, though not for this PR. That has the side-effect of creating a whitelist of allowed boost::filesystem functions.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-292256154,292256154,
laanwj,2017-04-06T18:08:31Z,"I started out with the wrapper idea, but it grew large and hard to review quite quickly. We use more than one'd expect on first sight. I think I stopped at `boost::filesystem::[io]fstream`. But we absolutely could do that in a later pull.",https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-292259577,292259577,
jtimon,2017-04-06T21:04:00Z,posthumous Concept ACK,https://github.com/bitcoin/bitcoin/pull/9902#issuecomment-292319810,292319810,
