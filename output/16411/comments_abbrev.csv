junderw,2019-07-18 05:49:56,"Brainstorming some things we should consider:\n\n```\n1. Does adding this put anyone at risk?\n2. Does adding this somehow hurt Bitcoin's code base?\n3. Does adding this require some long term maintenance / increase the weight on devs for support in the future?\n```\n\n1. Since Testnet has been used at some points to scam people out of money, I could see how this could be used in a similar",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512674355,512674355,
kallewoof,2019-07-18 05:57:45,"@junderw\n\nThanks for feedback, comments below:\n\n>     1. Does adding this put anyone at risk?\n\nExample?\n\n>     2. Does adding this somehow hurt Bitcoin's code base?\n\nThere is a tiny amount of risk involved as it touches consensus validation code, but this is a tiny code change.\n\nIf for some reason someone managed to flip the ""signet"" flag on a running node, for example, tha",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512675963,512675963,
junderw,2019-07-18 06:22:47,"> People can already copy the codebase and tweak it to make a new coin, or start up a regtest and ask their victim to connect to it using This Special Bitcoin.conf File [tm] which so happens to have regtest=1 in it.\n\nWhich is why I am mostly leaning toward concept ACK.\n\nBut tbh, if someone said ""hey, we have a 7-of-13 multisig based faster Bitcoin!"" as compared to ""hey use this regtest thi",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512681583,512681583,
kallewoof,2019-07-18 06:35:05,"Yep, I see what you're saying. Ultimately both cases require a conf tweak, though (regtest or testnet scam vs signet scam), and signet case requires them to give you a big ugly signet challenge and signet seed node(s), so I'm not sure how viable the attack really is in the end.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512684725,512684725,
NicolasDorier,2019-07-18 08:01:08,"Concept ACK, though I am unsure if signet should be configurable at all. (via `signet_blockscript` for example)\n\nIt should just be a shared public network, an alternative (or replacement) of testnet.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512709547,512709547,
DrahtBot,2019-07-18 08:03:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18002 (Abstract out script execution out of VerifyWitnessProgram() b",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512710369,512710369,
NicolasDorier,2019-07-18 08:04:13,"The code does not seems to be that much to maintain, I would advise though to open a separate pull requests for most changes in `validation.cpp/h`.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-512710459,512710459,
MarcoFalke,2019-07-19 15:40:43,Would be nice to have a `contrib/signet/README.md` to explain what those sh scripts are supposed to be doing,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-513277035,513277035,
kallewoof,2019-07-20 03:25:31,"@MarcoFalke Added README file. Also missing release notes. Since it is Needs Concept Review stage, I am not gonna rush that just yet.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-513431472,513431472,
kallewoof,2019-07-20 03:32:58,"I added a ""noteworthy"" section to the OP of this PR, which points out a number of changes to existing functionality.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-513431929,513431929,
practicalswift,2019-07-20 11:41:31,"Concept ACK\n\nThanks for doing this - would be very useful for testing.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-513460520,513460520,
kallewoof,2019-08-05 15:03:51,"Refactored now that #16509 is in (one less commit, and fewer (test) code lines touched!).",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-518271962,518271962,
michaelfolkson,2019-08-08 14:01:43,"Is there a resource online discussing the difference(s) between regtest and (proposed) signet? I found this on the [bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016742.html) but it doesn't go into much detail. Is unvetted ""people rewriting the blockchain at their whim by mining a ton of blocks"" a common problem? It wouldn't be a problem for a trainin",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-519531178,519531178,
kallewoof,2019-08-09 01:36:36,"@michaelfolkson I already replied on Twitter, but there is a [Bitcoin Wiki entry](https://en.bitcoin.it/wiki/Signet) and also a [Bitcoin Stack Exchange page](https://bitcoin.stackexchange.com/questions/89640/what-are-the-key-differences-between-regtest-and-the-proposed-signet?stw=2) (made by you).",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-519744924,519744924,
kallewoof,2019-08-19 04:24:27,"The proof of work changes were removed; Signet now requires a POW-valid genesis block, which is generated using `grindblock <challenge>` and which is provided to nodes using `-signet_genesisnonce`.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522406446,522406446,
NicolasDorier,2019-08-19 04:44:32,"> Update: proof of work check is back in place; instead, Signet now requires an additional `-signet_genesisnonce`\n\nIt should not require. If I want to use signet, I want to do `bitcoind -signet` without any more obscure parameter.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522409485,522409485,
kallewoof,2019-08-19 04:50:51,"@NicolasDorier The default parameters include a genesis nonce value. It's only for custom signets, where you provide your own `-signet_blockscript` as well.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522410562,522410562,
NicolasDorier,2019-08-19 08:24:35,"So I discussed with @kallewoof I don't like the fact that `generatetoaddress` does not work on custom signets.\nThe reason why `generatetoaddress` does not work on signet is that signet need blocks to be signed, and right now it uses the bitcoin wallet to find the keys. However `generatetoaddress` can't depends on wallet code.\n\nNow we have three ways of fixing the problem:\n1. Passing the ke",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522466194,522466194,
Sjors,2019-08-19 08:37:55,@NicolasDorier or create `generatetodescriptor` which uses the block height as the index. ,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522470900,522470900,
practicalswift,2019-08-19 08:57:59,@NicolasDorier @kallewoof Is the risk scenario that the signet private key would leak via process listings? If that it deemed a problem then it could perhaps be passed as an environment variable?,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522478256,522478256,
NicolasDorier,2019-08-19 09:19:41,"@Sjors I don't really understand what you mean, but anyway there should not have ""special way of doing same thing"" in RPC depending if you are on custom signet or regtest.\n\n@practicalswift it feel a bit weird to use environment variable when everything else is not.\nI don't think that the key leaking is in anyway a problem that need to be solved.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522486276,522486276,
Sjors,2019-08-19 09:32:01,"@NicolasDorier instead of providing a single address or private key, you provide a [descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md) so that each block will have a unique payout address. E.g. if you pass `wpkh(xpub/0/*)` it could replace `*` with the block height. You can use `importmulti` with the private key `wpkh(xpriv/0/*)` to import that descriptor in any wallet,",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522490898,522490898,
practicalswift,2019-08-19 15:56:18,"> it feel a bit weird to use environment variable when everything else is not.\n\nYes, that's a good point.\n\nPerhaps I'm missing something but wouldn't setting `signet_privatekey` in the config file solve the key-leak-via-process-listing issue (assuming it is an issue)?",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522640360,522640360,
kallewoof,2019-08-20 06:12:08,"I don't agree with the premise that the RPC `generatetoaddress` must be possible under Signet. If you are generating the blocks yourself, use regtest, or use the Signet solution available. Signet is for more global testing where you often are not the miner.\n\nI'm neutral on the private key juggling, as long as we don't teach people bad habits for valuable private keys.\n\np.s. I think you guy",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-522869010,522869010,
NicolasDorier,2019-08-22 11:50:22,"@Sjors I see, well my complaint is generally about, as a RPC user, I expect that RPC works as it would with regtest. If I need to make an if/else in my code to specifically handle the case of a custom signet this would really suck.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-523871601,523871601,
kallewoof,2019-08-23 05:15:18,"Moved `g_signet_blocks` bool into consensus parameters.\n\nHowever, moving `g_signet_blockscript` would require the `params.h` file to now `#include <script/script.h>` to get the `CScript`, which seems wasteful.\n\nAlternatively I could make it a `std::vector<unsigned char>` in the consensus params, but then every time it's used, it would have to be converted, so you'd get `CScript(consensus.s",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-524175320,524175320,
jtimon,2019-08-28 15:53:17,"I think including script in consensus/params.h should be fine. I'm not sure\nI understand ""wasteful"" in this context. Is going to ""waste"" exactly the\nsame memory.\n\nBut, if not, can we at least put it in chainparams?\n\nOn Fri, Aug 23, 2019, 07:18 kallewoof <notifications@github.com> wrote:\n\n> Moved g_signet_blocks bool into consensus parameters.\n>\n> However, moving g_signet_blockscript woul",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-525807714,525807714,
kallewoof,2019-08-29 06:45:00,"@jtimon \n\n> But, if not, can we at least put it in chainparams?\n\nI mean, yes, we could totally do that, but I'm not sure which is better here to be honest. Putting it in chainparams means it's close to the other stuff, which is good. But keeping it in signet.h means isolating signet stuff more from the rest of the code, which is *also* good.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-526048514,526048514,
jtimon,2019-09-07 18:19:48,"I think it's more consistent in chainparams, but I can see your point. Both options are valid, that's just what I prefer.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-529133412,529133412,
jtimon,2019-09-08 17:35:30,"Created https://github.com/kallewoof/bitcoin/pull/9 with code solving most nits if not all.\nAlso created https://github.com/jtimon/bitcoin/pull/12 to see how signet and custom chains could be combined best.\nComments welcomed on any of them, and hopefully you will pick things from 9.\nThe last commit requires a restart of the default network for it changes its genesis block.\n",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-529224742,529224742,
kallewoof,2019-09-10 11:07:46,@jtimon Sorry for lack of responsiveness. I've addressed your nits separately and will compare to your branch.,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-529886172,529886172,
jtimon,2019-09-10 19:43:28,"No worries, most of the commits in the branch are fixes to my own nits any way in case you find it convenient to squash them or something.\n\nRegarding https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521988316 \n@MarcoFalke I strongly disagree. the only reason we need to have rpc functionality to grind genesis blocks and the only reason this patch needs the signet_nonce parameter is ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-530090019,530090019,
carnhofdaki,2019-10-08 14:34:17,"No matter how far in syncing signet, it always says `progress=1.000000`.\n\n```\n...\n2019-10-08T14:32:08Z UpdateTip: new best=00000098714cd57f96b1bb4bdec02a869cb3269351bb2e110d56ea480e9a9e41 height=3140 version=0x30000000 log2_work=32.087826 tx=3152 date='2019-09-09T00:13:04Z' progress=1.000000 cache=0.4MiB(3155txo)\n2019-10-08T14:32:08Z UpdateTip: new best=0000014e412d4d959c4d397cdd685d66cd",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-539543087,539543087,
carnhofdaki,2019-10-08 15:20:36,"Also, errors like this are being shown on the console (yes, I am not running as daemon, but rather in `tmux`):\n\n```\n2019-10-08T15:13:23Z ERROR: AcceptBlockHeader: prev block not found\n2019-10-08T15:13:26Z ERROR: AcceptBlockHeader: prev block not found\n```\n\nLet me know if it is proper that I am writing it here in this pull request.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-539564737,539564737,
carnhofdaki,2019-10-09 13:05:24,@kallewoof is signet meant to overwrite file `blk00000.dat` and not have any index? How is the explorer at https://explorer.bc-2.jp possible then?,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-539991911,539991911,
kallewoof,2019-10-10 05:10:46,"@carnhofdaki Thanks for testing! Comments below.\n\n> No matter how far in syncing signet, it always says `progress=1.000000`.\n\nI'm confused. My bitcoin full node running on mainnet has this\n```\n2019-10-10T04:59:39Z UpdateTip: new best=0000000000000000000c41823b84f6273e2bf59648cfa7187eb2919213643a3d height=598693 version=0x20800000 log2_work=91.193405 tx=463424821 date='2019-10-10T04:58:",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-540367001,540367001,
kallewoof,2019-10-10 05:11:26,"@jtimon Thanks for all the feedback/suggestions. I'm trying to work through them, but am a bit swamped at work right now so it may be a bit slower than normal. Will get back to you though.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-540367293,540367293,
carnhofdaki,2019-10-10 07:30:58,"@kallewoof You are welcome! See my comments below.\n\n> I'm confused. My bitcoin full node running on mainnet has this\n> \n> ```\n> 2019-10-10T04:59:39Z UpdateTip: new best=0000000000000000000c41823b84f6273e2bf59648cfa7187eb2919213643a3d height=598693 version=0x20800000 log2_work=91.193405 tx=463424821 date='2019-10-10T04:58:54Z' progress=1.000000 cache=21.4MiB(60544txo) warning='45 of last ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-540434205,540434205,
carnhofdaki,2019-10-10 18:37:22,"@kallewoof So I was playing more.\n\nSee this anomaly - it does not add up: https://explorer.bc-2.jp/tx/7bc98cb0298233bbeb8d43deebc879626c3403add1ebbf443c44a31576283aff\n\nEdit: Shortened. Sorry for spam.\n\nSee block [8174](https://explorer.bc-2.jp/block/0000021f73ceda899d47c05288e2dbab83d6a79b3ec15f3f24730bf8075ad184)\n\nEdit: Finally I see the last zero in `8.999978` is omitted and that",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-540717225,540717225,
carnhofdaki,2019-10-11 12:08:48,"Testing c584956573b553f33771b7d853e2ccf8f033d29a ([`kallewoof/bitcoin@signet`]()) and 5cced1d78ee96b597dce23cff81f3ca991671fdf ([`kallewoof/bitcoin@signet-0.18`](https://github.com/kallewoof/bitcoin/tree/signet-0.18)) on ARM, Ubuntu 19.04, but berkleydb and boost are built from `bitcoin/depends` and installed to `/usr` (though not related to my issues).\n\nI have issues with running a [custom si",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-541037408,541037408,
carnhofdaki,2019-10-15 10:58:34,"> Concept ACK, though I am unsure if signet should be configurable at all. (via `signet_blockscript` for example)\n> \n> It should just be a shared public network, an alternative (or replacement) of testnet.\n\n@NicolasDorier as of my testing, the configurable signet currently does not work. I will be happy if someone can prove me wrong, but the steps at [Signet - Bitcoin Wiki](https://en.bitc",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-542157098,542157098,
kallewoof,2019-10-24 00:20:46,@carnhofdaki Can you make a log file showing all the steps of you setting up a custom signet to you getting the error? (and accompanying debug.log file would be helpful too),https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-545689045,545689045,
carnhofdaki,2019-10-29 18:12:03,"@kallewoof See log and the script which produced it at https://gist.github.com/carnhofdaki/60edef577f637ef2dbf4d244e4e279c2\n\nFeel free to ask any questions if you wonder about the commands in the script. Generally it is just following the [wiki article](https://en.bitcoin.it/wiki/Signet#Custom_Signet) but fully automated.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-547558988,547558988,
kallewoof,2019-11-04 02:18:35,"@carnhofdaki Sorry for late response. Tried your script and, yeah, that looks off. Will have to look closer into what might be causing it. ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-549206775,549206775,
carnhofdaki,2019-11-10 17:41:22,"> @carnhofdaki Sorry for late response. Tried your script and, yeah, that looks off. Will have to look closer into what might be causing it.\n\nThank you for having a look at the script!",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-552216376,552216376,
kallewoof,2019-12-09 01:33:40,"@carnesen Sorry for delay on looking at that script, work is keeping me away from everything atm. Hoping to get back into things in a week or two, though. Will look then.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-563026092,563026092,
carnesen,2019-12-09 03:06:50,"> @carnesen Sorry for delay on looking at that script, work is keeping me away from everything atm. Hoping to get back into things in a week or two, though. Will look then.\n\n@carnhofdaki I think this was meant for you (cc @kallewoof) ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-563043393,563043393,
kallewoof,2019-12-09 03:24:34,"@carnesen Thanks. Yeah, it was.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-563046605,563046605,
fjahr,2019-12-27 12:24:10,"Concept ACK\n\nGreat work! I set up a custom signet a few months ago and found it very easy to do and it was running smoothly (followed the wiki article, not a review, code has changed a lot since then). However, I also discovered that (as is usually the case) coordinating other participants in that Signet was the hard part. So, I now think the main contribution of Signet will be the global sign",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569259536,569259536,
practicalswift,2019-12-27 21:13:06,"This PR has gotten four Concept ACKs and zero Concept NACKs if I'm counting correctly.\n\nPlease chime in: more Concept ACKs or Concept NACKs?\n\nThe benefits have been discussed extensively: what costs can we see?\n\nPersonally I think signet would be very valuable to have when testing.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569346579,569346579,
kallewoof,2019-12-29 07:46:45,"@carnhofdaki \n\n> @kallewoof See log and the script which produced it at https://gist.github.com/carnhofdaki/60edef577f637ef2dbf4d244e4e279c2\n> \n> Feel free to ask any questions if you wonder about the commands in the script. Generally it is just following the [wiki article](https://en.bitcoin.it/wiki/Signet#Custom_Signet) but fully automated.\n\nSorry for the extremely late reply. I foun",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569483123,569483123,
kallewoof,2019-12-29 07:49:48,"@fjahr Thanks for the feedback! I was honestly dragged away from everything for the last couple of months, and am finally getting back to things now. Scheduling events on the global running signet is something I've been meaning to do for a long time. The code to do things like intentional reorgs and such is in place, but lacking a UI right now.\n\nIf you have any concrete ideas I'd love to hear ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569483275,569483275,
fjahr,2019-12-31 12:17:40,"> If you have any concrete ideas I'd love to hear them :)\n\nI am not sure about priorities as I am not working on something where I need it right now, but some ideas could be interesting:\n- ""larger"" re-orgs\n- large numbers of transactions with rising fee rate, so that default sized mempools start evicting transactions\n- mining empty blocks\n- full blocks but transactions were not in the ",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569920143,569920143,
kallewoof,2020-01-03 13:05:37,"I have no idea why tests are failing... they aren't, locally.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-570566733,570566733,
MarcoFalke,2020-01-03 13:15:30,re-run ci,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-570568871,570568871,
carnhofdaki,2020-01-06 13:51:45,"@kallewoof Thank you! https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-569483123\nIt works well now!",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-571145312,571145312,
kallewoof,2020-01-07 08:32:44,"I think we can remove ""Needs Conceptual Review"" tag as well.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-571487855,571487855,
kallewoof,2020-01-15 08:02:56,"Bumped copyright year. Note that Travis tests did not run, only Appveyor.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-574542278,574542278,
jtimon,2020-01-15 19:12:34,"Can we have the discussion on not checking the genesis' block pow vs needing grind the genesis block again?\nCan anybody remind me what are the main arguments in favor of having to grind the genesis block?\n",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-574811270,574811270,
kallewoof,2020-01-18 03:36:00,"@jtimon I think we should discuss on the mailing list. I'll send an email listing pros and cons.\n\nEdit: Actually, I think this is contentious enough that I'd rather just get signet v 1.0 in as it is with the genesis nonce, and then later see about a signet 2.0 which shortcuts the genesis POW.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-575862493,575862493,
NicolasDorier,2020-01-24 05:45:26,"I started talking with @kallewoof about signet, and I thought of something.\n\n## Problem\n\nSoftware built on top of bitcoin core very often hard code and rely on the genesis block hash.\nHowever it seems that because of [this](https://github.com/bitcoin/bitcoin/pull/16411/files#diff-64cbe1ad5465e13bc59ee8bb6f3de2e7L26), each signet will have a different genesis block. \nThis mean that ever",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-577999888,577999888,
kallewoof,2020-01-24 06:11:44,"It would definitely simplify software since most stuff I've found has a hard coded genesis block.\n\nThe downside is that most light clients (anything that *doesn't* also check the block signature) will run the risk of switching to the wrong chain!",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-578005031,578005031,
kallewoof,2020-01-24 06:37:22,"One partial solution to the problem would be to set the magic number (`pchMessageStart`) to be e.g. the first 4 bytes of `sha256d(signet_challenge)`. There would be a 1 in 2^32 chance that two signets' magic numbers would collide, but I think this is acceptable, as most SPV nodes will have trusted nodes they connect to for signet testing anyway.\n\nInterested to hear people's thoughts!",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-578010261,578010261,
Sjors,2020-01-24 08:45:21,"It sounds reasonable to have a fixed genesis block for all signets, with differentiation happening in the first block. Taking the thought a bit further, could you have an arbitrary height where the signet constraint activates (default 1)? That might make it easier to fork signets, so you can try new consensus features on an existing UTXO set.\n\nThe `sha256d(signet_challenge)` also sounds reason",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-578042043,578042043,
jtimon,2020-01-24 20:54:59,"> Instead of putting the challenge scriptPubKey in the genesis block, it should be put in the block just after.\n\nBut you need them to have different genesis blocks. For example, the genesis block is the chain_id in lightning networks.\nSee, for example, my project in which I use 3 different regtest chains for lightning.\nI'm not using signet there, but it would be similar.\n\nhttps://githu",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-578297985,578297985,
0xB10C,2020-02-07 11:04:00,"Syncing signet (both the default one and a custom one) reports an incorrect IBD _progress_ while in IBD and after the IBD. The wrong progress can be seen in the debug.log and via `getblockchaininfo` and potentially causes confusion. Haven't looked into why the calculation is wrong.\n\n```bash\n./bitcoin-cli -signet getblockchaininfo\n{\n  ""chain"": ""signet"",\n  ""blocks"": 27004,\n  ""headers"":",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-583342863,583342863,
kallewoof,2020-02-07 11:54:31,"@0xB10C Unfortunately this is not trivial to fix, because it depends on statistics manually put into the chainparams file (see e.g. the mainnet class a few pages up, where it has info about the number of transactions and such in the network). For a very-long-term signet, it might make sense to start adding those, but whenever the signet network switches to a new one, all of that would become redun",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-583359493,583359493,
ajtowns,2020-03-05 05:31:07,"> > \n> \n> But you need them to have different genesis blocks. For example, the genesis block is the chain_id in lightning networks.\n\n@jtimon per [bolt-00](https://github.com/lightningnetwork/lightning-rfc/blob/master/00-introduction.md#glossary-and-terminology-guide) you don't have to use the genesis block as the chain id, so I think it should be fine to use block 1 as the chain id for tes",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-595036647,595036647,
DrahtBot,2020-03-11 19:07:04,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-597815073,597815073,
jtimon,2020-03-11 21:43:01,"> > > \n> > \n> > \n> > But you need them to have different genesis blocks. For example, the genesis block is the chain_id in lightning networks.\n> \n> @jtimon per [bolt-00](https://github.com/lightningnetwork/lightning-rfc/blob/master/00-introduction.md#glossary-and-terminology-guide) you don't have to use the genesis block as the chain id, so I think it should be fine to use block 1 as the",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-597892804,597892804,
kallewoof,2020-03-12 06:09:54,"I just want to add to this that, with the hard coded genesis block, all software will still need to re-generate the magic number (message header / message start / whatever you wanna call it) when they switch signets. I think this is significantly easier than a dynamic genesis block hash, but it's still not ""plug-and-play"" to switch to a different signet. Ping @NicolasDorier.",https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-598023388,598023388,
kallewoof,2020-03-24 03:39:30,Closing in favor of #18267.,https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-602995351,602995351,
NicolasDorier,2019-07-19 07:42:44,I would move this test inside `CheckProofOfWork`,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305236543,305236543,src/validation.cpp
NicolasDorier,2019-07-19 07:43:06,I would move this test inside `CheckBlockHeader`,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305236661,305236661,src/validation.cpp
kallewoof,2019-07-19 08:26:38,"I need this if block for `CheckBlockSolution` too, though.\n\nhttps://github.com/bitcoin/bitcoin/blob/587526d21850e71bf7c7685a6c40e4084b4d894a/src/validation.cpp#L945-L952",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305251449,305251449,src/validation.cpp
kallewoof,2019-07-19 08:27:37,"I need this if block for `CheckBlockSolution` too, though.\n\nhttps://github.com/bitcoin/bitcoin/blob/587526d21850e71bf7c7685a6c40e4084b4d894a/src/validation.cpp#L2974-L2982",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305251888,305251888,src/validation.cpp
NicolasDorier,2019-07-19 11:45:19,`CheckBlockSolution` could also return true if  `block.GetHash() == consensusParams.hashGenesisBlock`,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305320988,305320988,src/validation.cpp
kallewoof,2019-07-19 12:32:20,"That's fair. But the check appears in 3 places instead of 2. Not sure why that is better, tbh.\n\nEdit: to clarify, moving the check to the three called-to functions means the check will happen 3 times in 3 different places, compared to 2 times in 2 places, as is the case right now.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r305335726,305335726,src/validation.cpp
MarcoFalke,2019-07-30 17:23:26,"How is this supposed to work? It looks like the chainparams are setting the pow to the pow of mainnet. This script calls `grindblock`, which is a non-optimized while loop on a single CPU core. Could this lead to the chain stalling?",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r308844811,308844811,contrib/signet/README.md
junderw,2019-07-30 23:33:43,"If the signers compete with each other, or frequently change their hashpower, yes.\n\nI think the idea is that signatures limit the miner pool to a few people, then those people each pledge a consistent low hashpower to the network.\n\nPrevents people from hopping on with ASICs, driving up difficulty and then disappearing.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r308986219,308986219,contrib/signet/README.md
kallewoof,2019-07-31 00:17:37,"The pow is not really the pow of mainnet unless you don't pass `-signet` or don't use a `-datadir` with signet in bitcoin.conf.\n\n`grindblock` is basically equivalent to `generate*`. You can use other miners like existing CPU miners or even ASICs (though you can't use the extra nonce so you'd have to resign the block instead).\n",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r308994818,308994818,contrib/signet/README.md
NicolasDorier,2019-08-19 07:20:05,I think you are not using this one in this file.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315067388,315067388,src/chainparams.cpp
NicolasDorier,2019-08-19 07:25:26,why do you need this?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315069080,315069080,src/core_read.cpp
NicolasDorier,2019-08-19 07:27:57,"is there really no way to make it works, can't you call `getnewblockhex`? ",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315069923,315069923,src/rpc/mining.cpp
NicolasDorier,2019-08-19 07:29:29,comments about the purpose of this would be nice,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315070529,315070529,src/script/sign.h
kallewoof,2019-08-19 07:48:22,"Juggling block hex values in Bash is very fragile. If a block gets too big, bash scripts start breaking. To avoid, the issuer script redirects output to files during the signing/grinding process.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315076959,315076959,src/core_read.cpp
kallewoof,2019-08-19 07:49:54,"Recently, the wallet code and the rest of the code have been separated. Unfortunately this means the mining part and the signing part have to be separated as well.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315077473,315077473,src/rpc/mining.cpp
kallewoof,2019-08-19 07:50:53,"I do; I reference `g_signet_blocks`, for example.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315077802,315077802,src/chainparams.cpp
NicolasDorier,2019-08-19 07:53:30,I don't understand. Why are you talking about wallet code? `generatetoaddress` does touch only mining code and `getnewblockhex` is in the scope of this function.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315078684,315078684,src/rpc/mining.cpp
kallewoof,2019-08-19 07:54:03,Added a few words to describe what it is. :),https://github.com/bitcoin/bitcoin/pull/16411#discussion_r315078869,315078869,src/script/sign.h
jtimon,2019-08-22 14:39:01,instead of g_signet_blocks we could use consensusParams.signet_blocks or similar.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316715474,316715474,src/validation.cpp
jtimon,2019-08-22 14:42:57,"Perhaps do this in CheckBlockHeader?\nThat way unsigned blocks would be detected faster.\nAlso, I think the return false in a new line would be more readable.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316717834,316717834,src/validation.cpp
jtimon,2019-08-22 14:45:13,Likewise this can be in consensus params instead of being a new global.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316719229,316719229,src/signet.cpp
jtimon,2019-08-22 14:51:54,it would be nice to also show the challenge in getblockchaininfo.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316723055,316723055,src/rpc/blockchain.cpp
kallewoof,2019-08-23 04:56:46,"Did this, but did not move `blockscript` - see detached comment.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316974164,316974164,src/validation.cpp
kallewoof,2019-08-23 04:57:44,"`CheckBlockSolution` requires the block, not just the header.\n\nMoving return to own line for readability.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316974346,316974346,src/validation.cpp
kallewoof,2019-08-23 04:59:24,"It can, but it would be wasteful; see detached comment.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316974675,316974675,src/signet.cpp
kallewoof,2019-08-23 04:59:52,True! Adding.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r316974754,316974754,src/rpc/blockchain.cpp
jtimon,2019-09-07 18:18:09,"Why do we need to mine the genesis block, isn't it easier to just not validate the genesis block beyond its hash defined in chainparams?\n",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r321978663,321978663,src/rpc/mining.cpp
jtimon,2019-09-07 20:07:44,This will never trigger as it has already been checked and handled. It can be removed.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r321981871,321981871,src/chainparams.cpp
jtimon,2019-09-07 20:08:41,Why not just get the arg as a string?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r321981901,321981901,src/chainparams.cpp
jtimon,2019-09-07 21:35:40,Can you set it to false in the others like regtest does with fPowNoRetargeting ?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r321984085,321984085,src/chainparams.cpp
kallewoof,2019-09-08 05:39:03,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521988316,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r321992333,321992333,src/rpc/mining.cpp
kallewoof,2019-09-10 11:01:43,I figured it was good to check there weren't multiple blockscripts provided.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322679080,322679080,src/chainparams.cpp
kallewoof,2019-09-10 11:04:09,OK!,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322680003,322680003,src/chainparams.cpp
MarcoFalke,2019-09-10 11:23:40,"in commit 93dd0a1e62b019a72657f2abd60a2afc3d0702ba:\n\nCan be removed, as this is redundant to `-chain=signet`",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322687302,322687302,src/chainparamsbase.cpp
kallewoof,2019-09-10 11:31:16,Isn't it good to be able to do just -signet?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322690086,322690086,src/chainparamsbase.cpp
jtimon,2019-09-10 22:41:45,"I think it's only for that, right? Perhaps a small reason to put the global here instead of there.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322993291,322993291,src/chainparams.cpp
jtimon,2019-09-10 22:44:57,"This function is only called from the next one and can be inlined. The change in the previous one is, I think all you need for your own CreateSignetGenesisBlock, which I would also prefer at the top (or at least before SigNetParams) in case it  turns into a static function in the future.\nReally small nits.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r322994160,322994160,src/chainparams.cpp
kallewoof,2019-09-11 04:42:27,"I don't think `CreateSignetGenesisBlock` will be static anytime soon, since it is also used in `mining.cpp` but I can definitely inline this one.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r323056709,323056709,src/chainparams.cpp
kallewoof,2019-09-11 05:04:45,"I think we discussed this outside of here, but basically, you don't have the private keys associated with any addresses, so you'd have to provide those every time here. I don't think we should encourage systems that behave in that manner (""bitcoin core does it so it must be safe"").",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r323060254,323060254,src/rpc/mining.cpp
jtimon,2019-09-11 12:59:03,"Well, it can only be static if we stop supporting grinding the genesis block because the genesis block's pow is not checked anymore and we don't need it.\nSo I guess it depends on the other discussion. If we end up doing that, we won't need to move the function later. But it's a very minor nit, feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r323225533,323225533,src/chainparams.cpp
practicalswift,2019-09-29 15:20:19,`data` could be const ref?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357742,329357742,src/primitives/block.h
practicalswift,2019-09-29 15:20:30,`data` could be const ref?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357747,329357747,src/primitives/block.h
practicalswift,2019-09-29 15:21:00,Single parameter ctor could be `explicit`?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357763,329357763,src/chainparams.cpp
practicalswift,2019-09-29 15:21:22,`data` const ref?,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357777,329357777,src/primitives/block.cpp
practicalswift,2019-09-29 15:21:35,Same here :),https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357786,329357786,src/primitives/block.cpp
practicalswift,2019-09-29 15:22:16,The scope for `extra_nonce` could be reduced.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357827,329357827,src/rpc/mining.cpp
practicalswift,2019-09-29 15:22:31,`sigdata` not used? :),https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357838,329357838,src/wallet/rpcwallet.cpp
practicalswift,2019-09-29 15:25:36,"Idiomatic alternative which signals that `args` is intentionally unused: `_, unknown_args = parser.parse_known_args()` :)",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357959,329357959,contrib/signet/addtxtoblock.py
practicalswift,2019-09-29 15:26:20,Nit: Same here: could use `_`.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329357989,329357989,test/functional/mining_signet.py
practicalswift,2019-09-29 15:27:09,Nit: This could be a function instead of a method.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329358007,329358007,test/functional/mining_signet.py
practicalswift,2019-09-29 15:28:15,Instead of string format arguments use logging function parameters when using `self.log.info` :),https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329358041,329358041,test/functional/mining_signet.py
kallewoof,2019-10-01 02:14:40,Good point. If we end up reversing the grinding approach I will try to remember to address this.,https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329856560,329856560,src/chainparams.cpp
kallewoof,2019-10-01 02:16:26,"I think I meant to do that, yeah. Thanks, fixed!",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329856859,329856859,src/primitives/block.h
kallewoof,2019-10-01 02:31:32,"It doesn't feel cleaner to put it inside the lock brackets as those are meant to do the lock, not limit scope.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329858936,329858936,src/rpc/mining.cpp
kallewoof,2019-10-01 02:38:56,"You mean ` % (...)` → `, ...`? OK.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329859849,329859849,test/functional/mining_signet.py
kallewoof,2019-10-01 09:11:26,"One part about skipping genesis PoW that shouldn't be forgotten is that this doesn't just mean code changes in Bitcoin Core, but in every other software that checks the blockchain POW, e.g. btcd.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r329953129,329953129,src/chainparams.cpp
jtimon,2019-10-08 20:49:12,"well, they will need changes to support chains whose genesis block doesn't passs pow anyway, but yeah",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332726189,332726189,src/chainparams.cpp
jtimon,2019-10-08 21:00:31,"This is only called from the next CreateGenesisBlock, there's no need for a new function.\n",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332730947,332730947,src/chainparams.cpp
jtimon,2019-10-08 21:05:56,"Sorry to reiterate this. If it was answered elsewhere I missed it.\nCould we add the following?\n\n```\n    h << strNetworkID;\n```\n\nI know it requires a network restart for the current signet network, but I think that should be alright to restart the network until the PR is merged.\nEven if we keep mining genesis blocks, this should make it easier to create a new signet chain with a dif",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332733307,332733307,src/chainparams.cpp
jtimon,2019-10-08 21:18:36,"The hrp and seeds arguments aren't signet specific necessarily. You could drop the 'signet' prefix and make them configurable for regtest too.\nSee https://github.com/bitcoin/bitcoin/pull/17037 for potential synergies.\nYou could also make SigNetParams extend CRegTestParams for more code reusability.\n",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332738312,332738312,src/chainparamsbase.cpp
jtimon,2019-10-08 21:20:06,"I forgot this ```,```, this +1-1 is my fault. My apologies.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332738891,332738891,src/qt/networkstyle.cpp
jtimon,2019-10-08 21:24:06,"With https://github.com/bitcoin/bitcoin/pull/17037 we wouldn't need to grind the genesis block, and it is smaller than #8994 .",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332740382,332740382,src/rpc/mining.cpp
jtimon,2019-10-09 00:06:27,"why not add the following here?\n```\n        consensus.hashGenesisBlock = genesis.GetHash();\n        checkpointData = {\n            {\n                {0, consensus.hashGenesisBlock},\n            }\n        };\n\n```",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r332784076,332784076,src/chainparams.cpp
kallewoof,2019-10-10 05:02:48,"I agree adding network ID is a good idea. I'd like to not restart the network until things are more finalized, but I will put this on the list of things to change for the next reset.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r333330707,333330707,src/chainparams.cpp
kallewoof,2019-10-10 05:05:26,"That seems sensible in #17037, but there is literally no reason outside signet for these, here. I don't think people will be too upset if we rename these a few months after merge, if worse comes to worst.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r333331147,333331147,src/chainparamsbase.cpp
kallewoof,2019-10-10 05:06:24,"Does it change anything? (Actual question; I assumed it didn't, except for blocks > height 0)",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r333331303,333331303,src/chainparams.cpp
MarcoFalke,2019-10-15 15:18:48,"Why is this moved? I think the goal for `primitives` is to be data-only and don't contain any helper logic, especially if they are consensus critical.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r335017902,335017902,src/primitives/block.h
jtimon,2019-10-23 23:24:49,"Well, I was thinking more on consistency with regtest, but functionally, I'm actually not sure it does anything (here or in regtest) either.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r338323361,338323361,src/chainparams.cpp
kallewoof,2019-10-24 00:19:41,"It seems very weird to keep this obviously `CBlock`-related functionality in some completely different place. I'm not sure about primitives and data-only logic. If people feel strongly, I can restore this. Should the other stuff (witness commitment section stuff) follow along into validation.cpp then, you think?",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r338334621,338334621,src/primitives/block.h
kallewoof,2020-03-05 13:18:03,"Belated, but I am removing this and adding an `extern CScript g_signet_blockscript` in the signet chainparams class.",https://github.com/bitcoin/bitcoin/pull/16411#discussion_r388286223,388286223,src/chainparams.cpp
