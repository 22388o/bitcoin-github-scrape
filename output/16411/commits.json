[
  {
    "sha": "aeb3cd5647162242fe181245a8a300d36e7ebd93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWIzY2Q1NjQ3MTYyMjQyZmUxODEyNDVhOGEzMDBkMzZlN2ViZDkz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:33:25Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T03:24:03Z"
      },
      "message": "add witness commitment section support to primitive/block\n\nThis also moves GetWitnessCommitmentIndex out of validation.cpp into CBlock, with 3 lines affected (GetWitnessCommitmentIndex(block) -> block.GetWitnessCommitmentIndex()).",
      "tree": {
        "sha": "652f29672ebaf590550ee944b1afb46b82a12625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/652f29672ebaf590550ee944b1afb46b82a12625"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeb3cd5647162242fe181245a8a300d36e7ebd93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5hwlMACgkQV692LbM1\nMyJkmw//aFwI4ukzo+a0hCzhaOGxzgXtQPAVsagr6Sg9wsv0+5A1kFq5sXDpFQ5R\nbOy5iohVSOPcV7Ak4zco4EaMsMYDCYd6vTOWUquQDpQmTg4GtOuK6Kz354jdjF7w\nudfTtBaoIdVAYCaxArFrOWAPTHVZxNIzi7tIj2QQecrwuiDURpjRMeUfEpGrIoPK\n8+g7S5Qf//NdCt/HGxnObgZljz1qx/YBHSiMV+o8HtJAmukNdLKeI7zl7BHSqLrA\nu1AS6JC+H+FvSunLZ5FZ8vhoxYckb4KNcvmIKO+uvksEWyXpQotJH7MtbHCMgQWh\nqZoXy/tGVfEu/yfEcQNIMi26beVlzAN3Yo4VhjHtzERghvTyXcmFMZtJVv5plWNM\nK71SPf4vEG3uh3F6Lvo+HcGLXaroxcPYDekr7ID7TICMxydagQ7jl1+t5BCzEwe/\nDFuCLPdvSfO4sXLas0JsJrl41ocr3q2yatbfcsGomp1mSBJ0zE3NT+V+11evJjC7\nSk0yFBmzZtYQrj6Kl8A20oZWGwT1QQu+LLupG4Srk7xr5zF8inDC+YCDCeXLzMCT\nqiClpG7Db+xkCa3uRpTyEekjAaH2CHMakDCSAyzUvhp7Kl81qDDO+7GU2KRQYFYN\nz/VuyFf+iP9QO2LDUeCypFQSQnH0TkJgG4EGE7/fyDicA2wf/d4=\n=eiP8\n-----END PGP SIGNATURE-----",
        "payload": "tree 652f29672ebaf590550ee944b1afb46b82a12625\nparent 3f826598a42dcc707b58224e94c394e30a42ceee\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563352405 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583465043 +0900\n\nadd witness commitment section support to primitive/block\n\nThis also moves GetWitnessCommitmentIndex out of validation.cpp into CBlock, with 3 lines affected (GetWitnessCommitmentIndex(block) -> block.GetWitnessCommitmentIndex()).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb3cd5647162242fe181245a8a300d36e7ebd93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb3cd5647162242fe181245a8a300d36e7ebd93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb3cd5647162242fe181245a8a300d36e7ebd93/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f826598a42dcc707b58224e94c394e30a42ceee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f826598a42dcc707b58224e94c394e30a42ceee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f826598a42dcc707b58224e94c394e30a42ceee"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 110,
      "deletions": 20
    },
    "files": [
      {
        "sha": "2d3fa2df7294fa35b941eb25142e437ea32e2776",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "patch": "@@ -28,3 +28,65 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+\n+bool CBlock::GetWitnessCommitmentSection(const uint8_t header[4], std::vector<uint8_t>& result) const\n+{\n+    int cidx = GetWitnessCommitmentIndex();\n+    if (cidx == -1) return false;\n+    auto script = vtx.at(0)->vout.at(cidx).scriptPubKey;\n+    opcodetype opcode;\n+    CScript::const_iterator pc = script.begin();\n+    ++pc; // move beyond initial OP_RETURN\n+    while (script.GetOp(pc, opcode, result)) {\n+        if (result.size() > 3 && !memcmp(result.data(), header, 4)) {\n+            result.erase(result.begin(), result.begin() + 4);\n+            return true;\n+        }\n+    }\n+    result.clear();\n+    return false;\n+}\n+\n+bool CBlock::SetWitnessCommitmentSection(CMutableTransaction& mtx, const uint8_t header[4], const std::vector<uint8_t>& data)\n+{\n+    int cidx = GetWitnessCommitmentIndex(mtx);\n+    if (cidx == -1) return false;\n+\n+    CScript result;\n+    std::vector<uint8_t> pushdata;\n+    auto script = mtx.vout[cidx].scriptPubKey;\n+    opcodetype opcode;\n+    CScript::const_iterator pc = script.begin();\n+    result.push_back(*pc++);\n+    bool found = false;\n+    while (script.GetOp(pc, opcode, pushdata)) {\n+        if (pushdata.size() > 0) {\n+            if (pushdata.size() > 3 && !memcmp(pushdata.data(), header, 4)) {\n+                // replace pushdata\n+                found = true;\n+                pushdata.erase(pushdata.begin() + 4, pushdata.end());\n+                pushdata.insert(pushdata.end(), data.begin(), data.end());\n+            }\n+            result << pushdata;\n+        } else {\n+            result << opcode;\n+        }\n+    }\n+    if (!found) {\n+        // append section as it did not exist\n+        pushdata.clear();\n+        pushdata.insert(pushdata.end(), header, header + 4);\n+        pushdata.insert(pushdata.end(), data.begin(), data.end());\n+        result << pushdata;\n+    }\n+    mtx.vout[cidx].scriptPubKey = result;\n+    return true;\n+}\n+\n+bool CBlock::SetWitnessCommitmentSection(const uint8_t header[4], const std::vector<uint8_t>& data)\n+{\n+    auto mtx = CMutableTransaction(*vtx[0]);\n+    if (!SetWitnessCommitmentSection(mtx, header, data)) return false;\n+    vtx[0] = std::make_shared<CTransaction>(mtx);\n+    return true;\n+}"
      },
      {
        "sha": "23a375556502da40a380069f1daeabd98aeaa36b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "patch": "@@ -116,6 +116,50 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n+    /**\n+     * Get the vout index of the segwit commitment in the coinbase transaction of this block.\n+     *\n+     * Returns -1 if no witness commitment was found.\n+     */\n+    inline int GetWitnessCommitmentIndex() const\n+    {\n+        return vtx.empty() ? -1 : GetWitnessCommitmentIndex(*vtx.at(0));\n+    }\n+\n+    /**\n+     * Get the vout index of the segwit commitment in the given coinbase transaction.\n+     *\n+     * Returns -1 if no witness commitment was found.\n+     */\n+    template<typename T> static inline int GetWitnessCommitmentIndex(const T& coinbase) {\n+        for (int64_t o = coinbase.vout.size() - 1; o > -1; --o) {\n+            auto vospk = coinbase.vout[o].scriptPubKey;\n+            if (vospk.size() >= 38 && vospk[0] == OP_RETURN && vospk[1] == 0x24 && vospk[2] == 0xaa && vospk[3] == 0x21 && vospk[4] == 0xa9 && vospk[5] == 0xed) {\n+                return o;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempt to get the data for the section with the given header in the witness commitment of this block.\n+     *\n+     * Returns false if header was not found. The data (excluding the 4 byte header) is written into result if found.\n+     */\n+    bool GetWitnessCommitmentSection(const uint8_t header[4], std::vector<uint8_t>& result) const;\n+\n+    /**\n+     * Attempt to add or update the data for the section with the given header in the witness commitment of this block.\n+     *\n+     * This operation may fail and return false, if no witness commitment exists upon call time. Returns true on success.\n+     */\n+    bool SetWitnessCommitmentSection(const uint8_t header[4], const std::vector<uint8_t>& data);\n+\n+    /**\n+     * The tx based equivalent of the above.\n+     */\n+    static bool SetWitnessCommitmentSection(CMutableTransaction& tx, const uint8_t header[4], const std::vector<uint8_t>& data);\n+\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "693ff064d11dd14954f88b6906528f99c5cdebac",
        "filename": "src/test/fuzz/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/test/fuzz/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/test/fuzz/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block.cpp?ref=aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "patch": "@@ -58,6 +58,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         (void)BlockWitnessMerkleRoot(block);\n     }\n     (void)GetBlockWeight(block);\n-    (void)GetWitnessCommitmentIndex(block);\n+    (void)block.GetWitnessCommitmentIndex();\n     (void)RecursiveDynamicUsage(block);\n }"
      },
      {
        "sha": "2e98a96ec32acc50a6807c102d9a1b7805a74bbb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "patch": "@@ -3371,22 +3371,9 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (height >= params.SegwitHeight);\n }\n \n-int GetWitnessCommitmentIndex(const CBlock& block)\n-{\n-    int commitpos = -1;\n-    if (!block.vtx.empty()) {\n-        for (size_t o = 0; o < block.vtx[0]->vout.size(); o++) {\n-            if (block.vtx[0]->vout[o].scriptPubKey.size() >= 38 && block.vtx[0]->vout[o].scriptPubKey[0] == OP_RETURN && block.vtx[0]->vout[o].scriptPubKey[1] == 0x24 && block.vtx[0]->vout[o].scriptPubKey[2] == 0xaa && block.vtx[0]->vout[o].scriptPubKey[3] == 0x21 && block.vtx[0]->vout[o].scriptPubKey[4] == 0xa9 && block.vtx[0]->vout[o].scriptPubKey[5] == 0xed) {\n-                commitpos = o;\n-            }\n-        }\n-    }\n-    return commitpos;\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n-    int commitpos = GetWitnessCommitmentIndex(block);\n+    int commitpos = block.GetWitnessCommitmentIndex();\n     static const std::vector<unsigned char> nonce(32, 0x00);\n     if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n@@ -3399,7 +3386,7 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     std::vector<unsigned char> commitment;\n-    int commitpos = GetWitnessCommitmentIndex(block);\n+    int commitpos = block.GetWitnessCommitmentIndex();\n     std::vector<unsigned char> ret(32, 0x00);\n     if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n@@ -3539,7 +3526,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (nHeight >= consensusParams.SegwitHeight) {\n-        int commitpos = GetWitnessCommitmentIndex(block);\n+        int commitpos = block.GetWitnessCommitmentIndex();\n         if (commitpos != -1) {\n             bool malleated = false;\n             uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);"
      },
      {
        "sha": "41420072d719d7fc2655cc63714c0d317fdb7026",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb3cd5647162242fe181245a8a300d36e7ebd93/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "patch": "@@ -382,9 +382,6 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n \n-/** Compute at which vout of the block's coinbase transaction the witness commitment occurs, or -1 if not found */\n-int GetWitnessCommitmentIndex(const CBlock& block);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGNkOTVhODgxMTlmMGQ3ZWUzNGEzZmU3NTJhNzllNWVhOTRjZmI2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T08:04:49Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:47Z"
      },
      "message": "add simple signature support (checker)",
      "tree": {
        "sha": "9c69e97f22ae845d212cd4ebc71d5a0a3324f652",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c69e97f22ae845d212cd4ebc71d5a0a3324f652"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1E8ACgkQV692LbM1\nMyLJig//dSe6XSTV9RgYnqd48jc+6e4SIeGUjioN4jVG2ici+iQJMdzdIGJykl3B\n0tgSEspyJlOGw4B3xVOGNJ7IshZ47QqsvM49G2/dHgJOlMMEFK/g+NpiJ/QYxblO\n62oX35eEesk5soDS7aIJjsRK/NGCwiRNAYQdqydHAYyHZPqXh6VaYCCReN6yQXUG\nLlNKqz7562QFsn1698ZB5xZ+AXGcHKct2oRaX28YxCazX3VbQRAgE6ufzEPGDXye\nYfJnF2CqFyJdFjGSI7oflIY1tJHRELt8WXqAdytlcK2ot1EjlrLF6A3GQxKNSeup\nhB2aSEgbY8JlvxTmPaTUTvU16n2osGijK+edopCw+GUV7UNHrJ03RHIgMw49nMYD\nHzCrejn2q5tztgWEwAO/8lynW1YPpRZeHJBwCuzFcl157bhM3XVsfEkhEVSrwhwe\n/mLIwz4ybeqaBtTtDqD6izQ/lbsRA8deimfm7Kf1Xlka8EMH4g5qZrTeM6OxUmVH\nQ9UOrJuDkF/CdKYiSBgs0CFUYP91wtArdpFxUzEoZ2KVmoeB1+94RTdO0sFb2QQt\nGJTRC7ps9mj2kiCiXzZrgSE4zhR+e3MF+vJhYkYzCoIjyYs3UEOtQ8N/E2qKCd0b\n8tG6Q5hEHWHo94gwaIT40CPUS1u7ExIEFTTPr2e34235wMqh5YE=\n=RzOL\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c69e97f22ae845d212cd4ebc71d5a0a3324f652\nparent aeb3cd5647162242fe181245a8a300d36e7ebd93\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583395489 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469647 +0900\n\nadd simple signature support (checker)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb3cd5647162242fe181245a8a300d36e7ebd93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb3cd5647162242fe181245a8a300d36e7ebd93"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "84fb8fba4c06cc18d3477ef3e14e2d84daeb8edf",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
        "patch": "@@ -1414,6 +1414,18 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+bool SimpleSignatureChecker::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CPubKey pubkey(vchPubKey);\n+    if (!pubkey.IsValid()) return false;\n+\n+    std::vector<unsigned char> vchSig(vchSigIn);\n+    if (vchSig.empty()) return false;\n+    vchSig.pop_back();\n+\n+    return pubkey.Verify(m_hash, vchSig);\n+}\n+\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "38620dfc7db8fe93056a32a73dfe22a19c46879b",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
        "patch": "@@ -161,6 +161,17 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n+/** A general purpose signature checker. */\n+class SimpleSignatureChecker : public BaseSignatureChecker\n+{\n+private:\n+    uint256 m_hash;\n+public:\n+    const uint256& GetHash() const { return m_hash; }\n+    explicit SimpleSignatureChecker(const uint256& hash) : m_hash(hash) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {"
      }
    ]
  },
  {
    "sha": "dff9e488cf1df6b1c32e9b689616581d89927d36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmY5ZTQ4OGNmMWRmNmIxYzMyZTliNjg5NjE2NTgxZDg5OTI3ZDM2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T08:05:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:47Z"
      },
      "message": "add simple signature support (creator)",
      "tree": {
        "sha": "b597f2955e5f6c6cfe204f605e11617adf29153a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b597f2955e5f6c6cfe204f605e11617adf29153a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dff9e488cf1df6b1c32e9b689616581d89927d36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1E8ACgkQV692LbM1\nMyKmXg//XPntJKY2oseKupcx1WKO/eaEwryg4jGpQEj1OtrhB/yKQn2IMX5u2+rZ\nbGEisdhxBwQXTZX6NdrsuID47KkUjxXyM2G7UicJ5F2EvzRhTZD2r9zdsapIVMfu\nuUkbLJ0qb7E+ZsfXCvqaMx5hgG7+yR2bvv4dTd1wtL+yGgO6uH1OUx6ggjOmuUYj\nKJPOUnHKj6kAJbxzPTs6OkRDu0H+Beb3GMFViTMNLCOBJVdQX8BfUBmLhSp4zj7I\nuxZ8dZ7rLGswXvJfzU6v6R6y7u14RgGKkXhs1BBtX25WNpATzvY69rtQPp8vahU/\nas77G5tAb+65W+Atk3yhk8rNF7SDsASJvfItpC80M2vQvsTrtP3mOrZg/kZLlQnS\n9lqpVPehJr1A9W4IkXX7R3+AQekzlMX4UvwCbDccpt2onLWTbu6cP3jlDM6T1fWZ\nv+gglQGC4ISsBKkq313FF/CgPWInAXkoyraQXaMQyUwQwwUohQg8MQxc0IPt6p1l\nvCCO+6wmzQYD52zjdeS1TntRGwr36ESfT2jbbRGQ61+UcnXk44ZYReY2gyhbj1ks\n7+8FBP8hx7njjluEqWF0iRShirdCVmbrsrvQJDqlgM46qFIz/ODtqewKv+sayrck\nWCOhL72nTOnCPYNrh7NYg49ImkVnw6OkJXuG9qgn5OopW+e4NTE=\n=AJBJ\n-----END PGP SIGNATURE-----",
        "payload": "tree b597f2955e5f6c6cfe204f605e11617adf29153a\nparent 68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583395506 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469647 +0900\n\nadd simple signature support (creator)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff9e488cf1df6b1c32e9b689616581d89927d36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dff9e488cf1df6b1c32e9b689616581d89927d36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff9e488cf1df6b1c32e9b689616581d89927d36/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68cd95a88119f0d7ee34a3fe752a79e5ea94cfb6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0fedc62fc62c055902de9326aa7858a94de3e4f1",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff9e488cf1df6b1c32e9b689616581d89927d36/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff9e488cf1df6b1c32e9b689616581d89927d36/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=dff9e488cf1df6b1c32e9b689616581d89927d36",
        "patch": "@@ -33,6 +33,15 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n+bool SimpleSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CKey key;\n+    if (!provider.GetKey(keyid, key)) return false;\n+    if (!key.Sign(checker.GetHash(), vchSig)) return false;\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    return true;\n+}\n+\n static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\n {\n     if (provider.GetCScript(scriptid, script)) {"
      },
      {
        "sha": "5e164475666631cb0fdc705f8a1be7faceb2659b",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff9e488cf1df6b1c32e9b689616581d89927d36/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff9e488cf1df6b1c32e9b689616581d89927d36/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=dff9e488cf1df6b1c32e9b689616581d89927d36",
        "patch": "@@ -31,6 +31,17 @@ class BaseSignatureCreator {\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n };\n \n+/** A general purpose signature creator. */\n+class SimpleSignatureCreator : public BaseSignatureCreator\n+{\n+    SimpleSignatureChecker checker;\n+\n+public:\n+    explicit SimpleSignatureCreator(const uint256& hashIn) : BaseSignatureCreator(), checker(hashIn) {};\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n /** A signature creator for transactions. */\n class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     const CMutableTransaction* txTo;"
      }
    ]
  },
  {
    "sha": "b90cfc0570c2386a14174a20fb098c7d2614f083",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTBjZmMwNTcwYzIzODZhMTQxNzRhMjBmYjA5OGM3ZDI2MTRmMDgz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:41:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:47Z"
      },
      "message": "add signet basic support (signet.cpp)",
      "tree": {
        "sha": "b289d1b6e993e6e390de6553c43fd9a01e2d476e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b289d1b6e993e6e390de6553c43fd9a01e2d476e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b90cfc0570c2386a14174a20fb098c7d2614f083",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1E8ACgkQV692LbM1\nMyL09Q/+JPCLfuKz5q1aJBHZack6FuDBBpAKo+i7V7wcEWCB63B/reZeXDiy3azt\npFYGvC3VELqp70bMFOY4EgaZtROF3FPrMIDA8RRSGuFE66qc6P0k6bdClnGa8wzP\ngbdPbuMDdw/xtWjfcY5Sp6AOKf73jJ8QkLY7OMvJetBth2RL26nVob/evTi/Tj+X\nk/pq+WBHVpdZF78YOrPoAhQosCyYSSnbXJxlNmlrk5rgpKi74Pxx8YG8hqa9TUSe\no3Z6AsPpdqXpS8ayW6btJHzlsS+XxSVuL266pR/ISxQuXd92vFzGZxbHTDApUm/1\n1VqgSaH4sF083bYewd7LgOchr+Nf0YGw10LKY0fQJT+DWPAyr8w02Qy2+7bXBrGv\nT+1VzC7eE4IXEIe/j11UY7O3T6xtQMDshzNct6OsVMn3tsDrQz+Efb24e3eRHFId\n+RJUSGN4YJTnVhtwvfX0ERQkdAzjzQtD+1hrmnYm6ZDMbzXoG24Om7U+JaoQVEE2\n3b5j92iq9qVVa2ySzpYXu+O2m8d0XaRbS8ROU7NuBVjsnAMkgkiRn5o+Bd0Xuc0l\nqNCHY7lAVNqy9+cDysBqDbwhPCHwI27T8c1qOQjArkUjoEdOn+kcjfo7GMerTIWW\ng8sUKKYxPIVAG/xiFqgBLUTn5oxS86/jXyvyNYK1EX2EHCBM3M8=\n=+5EC\n-----END PGP SIGNATURE-----",
        "payload": "tree b289d1b6e993e6e390de6553c43fd9a01e2d476e\nparent dff9e488cf1df6b1c32e9b689616581d89927d36\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563352892 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469647 +0900\n\nadd signet basic support (signet.cpp)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90cfc0570c2386a14174a20fb098c7d2614f083",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b90cfc0570c2386a14174a20fb098c7d2614f083",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90cfc0570c2386a14174a20fb098c7d2614f083/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dff9e488cf1df6b1c32e9b689616581d89927d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff9e488cf1df6b1c32e9b689616581d89927d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dff9e488cf1df6b1c32e9b689616581d89927d36"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "945934caa7dfcf28bef31100c443ffc386b7c3b6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90cfc0570c2386a14174a20fb098c7d2614f083/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90cfc0570c2386a14174a20fb098c7d2614f083/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b90cfc0570c2386a14174a20fb098c7d2614f083",
        "patch": "@@ -195,6 +195,7 @@ BITCOIN_CORE_H = \\\n   script/signingprovider.h \\\n   script/standard.h \\\n   shutdown.h \\\n+  signet.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -485,6 +486,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n+  signet.cpp \\\n   versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "9dad3c9602612b442e98582f5df83d9976668933",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90cfc0570c2386a14174a20fb098c7d2614f083/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90cfc0570c2386a14174a20fb098c7d2614f083/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b90cfc0570c2386a14174a20fb098c7d2614f083",
        "patch": "@@ -80,6 +80,12 @@ struct Params {\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n+\n+    /**\n+     * If true, witness commitments contain a payload equal to a Bitcoin Script solution\n+     * to a signet challenge as defined in the chain params.\n+     */\n+    bool signet_blocks{false};\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "614ac1ee643df97e16e94d3a7d00873c01d98581",
        "filename": "src/signet.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90cfc0570c2386a14174a20fb098c7d2614f083/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90cfc0570c2386a14174a20fb098c7d2614f083/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=b90cfc0570c2386a14174a20fb098c7d2614f083",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <signet.h>\n+\n+#include <consensus/merkle.h>\n+#include <consensus/params.h>\n+#include <hash.h>\n+#include <primitives/block.h>\n+#include <script/interpreter.h>\n+#include <script/standard.h>        // MANDATORY_SCRIPT_VERIFY_FLAGS\n+#include <util/system.h>\n+\n+CScript g_signet_blockscript;\n+\n+// Signet block solution checker\n+bool CheckBlockSolution(const CBlock& block, const Consensus::Params& consensusParams)\n+{\n+    std::vector<uint8_t> signet_data;\n+    if (!block.GetWitnessCommitmentSection(SIGNET_HEADER, signet_data)) {\n+        return error(\"CheckBlockSolution: Errors in block (block solution missing)\");\n+    }\n+    if (!CheckBlockSolution(GetSignetHash(block), signet_data, consensusParams)) {\n+        return error(\"CheckBlockSolution: Errors in block (block solution invalid)\");\n+    }\n+    return true;\n+}\n+\n+bool CheckBlockSolution(const uint256& signet_hash, const std::vector<uint8_t>& signature, const Consensus::Params& params)\n+{\n+    SimpleSignatureChecker bsc(signet_hash);\n+    CScript solution = CScript(signature.begin(), signature.end());\n+    return VerifyScript(solution, g_signet_blockscript, nullptr, MANDATORY_SCRIPT_VERIFY_FLAGS, bsc);\n+}\n+\n+uint256 BlockSignetMerkleRoot(const CBlock& block, bool* mutated = nullptr)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    {\n+        // find and delete signet signature\n+        CMutableTransaction mtx(*block.vtx.at(0));\n+        CBlock::SetWitnessCommitmentSection(mtx, SIGNET_HEADER, std::vector<uint8_t>{});\n+        leaves[0] = mtx.GetHash();\n+    }\n+    for (size_t s = 1; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s]->GetHash();\n+    }\n+    return ComputeMerkleRoot(std::move(leaves), mutated);\n+}\n+\n+uint256 GetSignetHash(const CBlock& block)\n+{\n+    if (block.vtx.size() == 0) return block.GetHash();\n+    return (CHashWriter(SER_DISK, PROTOCOL_VERSION) << block.nVersion << block.hashPrevBlock << BlockSignetMerkleRoot(block) << block.nTime << block.nBits).GetHash();\n+}"
      },
      {
        "sha": "3012692209da52dbc05dd9f9f63bf9a69de22b2e",
        "filename": "src/signet.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90cfc0570c2386a14174a20fb098c7d2614f083/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90cfc0570c2386a14174a20fb098c7d2614f083/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=b90cfc0570c2386a14174a20fb098c7d2614f083",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SIGNET_H\n+#define BITCOIN_SIGNET_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <consensus/params.h>\n+\n+#include <stdint.h>\n+\n+class CBlock;\n+class CScript;\n+class uint256;\n+\n+extern CScript g_signet_blockscript;\n+\n+constexpr uint8_t SIGNET_HEADER[4] = {0xec, 0xc7, 0xda, 0xa2};\n+\n+/**\n+ * Check whether a block has a valid solution\n+ */\n+bool CheckBlockSolution(const uint256& signet_hash, const std::vector<uint8_t>& signature, const Consensus::Params&);\n+\n+/**\n+ * Extract signature and check whether a block has a valid solution\n+ */\n+bool CheckBlockSolution(const CBlock& block, const Consensus::Params& consensusParams);\n+\n+/**\n+ * Generate the signet hash for the given block\n+ *\n+ * The signet hash differs from the regular block hash in two places:\n+ * 1. It hashes a modified merkle root with the signet signature removed.\n+ * 2. It skips the nonce.\n+ */\n+uint256 GetSignetHash(const CBlock& block);\n+\n+#endif // BITCOIN_SIGNET_H"
      }
    ]
  },
  {
    "sha": "82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmU2OWMzY2RmOTA5NzdlNWIxNGEwY2VmNzhjZjk2NzFhZTk0MjZm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T06:58:30Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:47Z"
      },
      "message": "add signet chain and accompanying parameters",
      "tree": {
        "sha": "5d724e5f7ddb43d547d10d7bb55b67310e88360e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d724e5f7ddb43d547d10d7bb55b67310e88360e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1E8ACgkQV692LbM1\nMyIk4w//ZcBK0gmQqOxSari62st630jA94kqHY/CaVfP7LSg6aEZc44rDjQuOXPM\nC4Sg7IY+jHsOCjrYFdMsOkjLwS+xc5UylpfQH1Q65ebWFdjFJIZRCtArCBzXeAyI\ni/1PpJRhUuEevymMEfBRwGumxRjwUlgCDC5CCrFTlgUaYi1HwGLEVFhvYFMVhBdp\n9wh5F+Ay/62TjXiDTCooh7pz2Er2auCB1AfNpdru5tXhUfmI+KOsm97mHlJVCke8\naDqKjjEc69HhymFyaj0ZV+LRhpVp2Vfo2zIyBWzNHSvIWvogsY7semc2ft8ijzeK\nESm/LE+UJaOIvjHb4eV3jXY5sXCLUextdI5CgvrPhjGTJeflPDGuQbTcccoQ5IGv\nfe3GRpOq7VKH+luBkAXmytDXjiJedn/ObCvcUg6XBy20QkBQt7FmEQk5ByRyme8Y\nx5yjDge4PKkYqz4+tlz2qcpp5wB8/mLT0+EeLHqqk1pf9CgOozhvo1HfH3UDKRAw\n4A5pY3uE92ypWazFJiRcG5OAmAzWUV11RlL0etCmUp9n3fGvya9g+uwhExGF4A6d\nYzfqecCXXl5YGkS3DcByBEuJ7Q26k0+FN2Ni2o6wcB1QXRNbvp5fZNFVT2sKGTse\nWntkRWYrrOuWPB3qoh33fdQcQfs8/9WOrZT/Vw6OP04rZQNSXKg=\n=6K+k\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d724e5f7ddb43d547d10d7bb55b67310e88360e\nparent b90cfc0570c2386a14174a20fb098c7d2614f083\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583391510 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469647 +0900\n\nadd signet chain and accompanying parameters\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b90cfc0570c2386a14174a20fb098c7d2614f083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90cfc0570c2386a14174a20fb098c7d2614f083",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b90cfc0570c2386a14174a20fb098c7d2614f083"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 97,
      "deletions": 4
    },
    "files": [
      {
        "sha": "690e4a6beb93d3bd8355f104d321d16a31733b0f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <hash.h> // for signet block challenge hash\n #include <tinyformat.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -63,6 +64,7 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = CBaseChainParams::MAIN;\n+        consensus.signet_blocks = false;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\");\n         consensus.BIP34Height = 227931;\n@@ -171,6 +173,7 @@ class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = CBaseChainParams::TESTNET;\n+        consensus.signet_blocks = false;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000dd30457c001f4095d208cc1296b0eed002427aa599874af7a432b105\");\n         consensus.BIP34Height = 21111;\n@@ -249,13 +252,87 @@ class CTestNetParams : public CChainParams {\n     }\n };\n \n+/**\n+ * SigNet\n+ */\n+class SigNetParams : public CChainParams {\n+public:\n+    explicit SigNetParams(const ArgsManager& args) {\n+        extern CScript g_signet_blockscript;\n+\n+        std::vector<uint8_t> bin;\n+        vSeeds.clear();\n+\n+        if (!args.IsArgSet(\"-signet_blockscript\")) {\n+            throw std::runtime_error(strprintf(\"%s: -signet_blockscript is mandatory for signet networks\", __func__));\n+        }\n+        if (args.GetArgs(\"-signet_blockscript\").size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signet_blockscript cannot be multiple values.\", __func__));\n+        }\n+        bin = ParseHex(args.GetArgs(\"-signet_blockscript\")[0]);\n+        if (args.IsArgSet(\"-signet_seednode\")) {\n+            vSeeds = gArgs.GetArgs(\"-signet_seednode\");\n+        }\n+\n+        LogPrintf(\"SigNet with block script %s\\n\", gArgs.GetArgs(\"-signet_blockscript\")[0]);\n+\n+        strNetworkID = CBaseChainParams::SIGNET;\n+        g_signet_blockscript = CScript(bin.begin(), bin.end());\n+        consensus.signet_blocks = true;\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.BIP34Height = 1;\n+        consensus.BIP65Height = 1;\n+        consensus.BIP66Height = 1;\n+        consensus.CSVHeight = 1;\n+        consensus.SegwitHeight = 1;\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1916;\n+        consensus.nMinerConfirmationWindow = 2016;\n+        consensus.powLimit = uint256S(\"00002adc28cf53b63c82faa55d83e40ac63b5f100aa5d8df62a429192f9e8ce5\");\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1539478800;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+\n+        // message start is defined as the first 4 bytes of the sha256d of the block script\n+        CHashWriter h(SER_DISK, 0);\n+        h << g_signet_blockscript;\n+        uint256 hash = h.GetHash();\n+        memcpy(pchMessageStart, hash.begin(), 4);\n+        LogPrintf(\"SigNet message start = %02x%02x%02x%02x\\n\", pchMessageStart[0], pchMessageStart[1], pchMessageStart[2], pchMessageStart[3]);\n+\n+        nDefaultPort = 38333;\n+        nPruneAfterHeight = 1000;\n+\n+        genesis = CreateGenesisBlock(1534313275, 100123, 0x1e2adc28, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+\n+        vFixedSeeds.clear();\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>{125};\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>{87};\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>{217};\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"sb\" + args.GetArg(\"-signet_hrp\", \"\");\n+\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = true;\n+        m_is_test_chain = true;\n+    }\n+};\n+\n /**\n  * Regression test\n  */\n class CRegTestParams : public CChainParams {\n public:\n     explicit CRegTestParams(const ArgsManager& args) {\n         strNetworkID =  CBaseChainParams::REGTEST;\n+        consensus.signet_blocks = false;\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n         consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n@@ -396,6 +473,9 @@ std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n+    else if (chain == CBaseChainParams::SIGNET) {\n+        return std::unique_ptr<CChainParams>(new SigNetParams(gArgs));\n+    }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n "
      },
      {
        "sha": "31a73d43b1799cb8ac6fd4d713d44a248a046e7e",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "patch": "@@ -13,6 +13,7 @@\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::SIGNET = \"signet\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions()\n@@ -23,6 +24,10 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-signet\", \"Use the signet chain. Note that the network is defined by the signet_blockscript parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-signet_blockscript\", \"Blocks must satisfy the given script to be considered valid (only for signet networks)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-signet_hrp\", \"Human readable part of bech32 address (suffixed by \\\"sb\\\"; default = \\\"\\\")\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-signet_seednode\", \"Specify a seed node for the signet network (may be used multiple times to specify multiple seed nodes)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n@@ -41,8 +46,9 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n         return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+    else if (chain == CBaseChainParams::SIGNET)\n+        return MakeUnique<CBaseChainParams>(\"signet\", 38332);\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)"
      },
      {
        "sha": "2b44989515b3ea490ad3773f4a31f34366c21589",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n     /** Chain name strings */\n     static const std::string MAIN;\n     static const std::string TESTNET;\n+    static const std::string SIGNET;\n     static const std::string REGTEST;\n     ///@}\n "
      },
      {
        "sha": "50a49300b1a17f9ad5b37f88b3bada095d1499a6",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e69c3cdf90977e5b14a0cef78cf9671ae9426f/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "patch": "@@ -255,6 +255,7 @@ const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n {\n     // Section names to be recognized in the config file.\n     static const std::set<std::string> available_sections{\n+        CBaseChainParams::SIGNET,\n         CBaseChainParams::REGTEST,\n         CBaseChainParams::TESTNET,\n         CBaseChainParams::MAIN\n@@ -832,15 +833,20 @@ std::string ArgsManager::GetChainName() const\n \n     const bool fRegTest = get_net(\"-regtest\");\n     const bool fTestNet = get_net(\"-testnet\");\n+    const bool fSigNet  = get_net(\"-signet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");\n \n-    if ((int)is_chain_arg_set + (int)fRegTest + (int)fTestNet > 1) {\n-        throw std::runtime_error(\"Invalid combination of -regtest, -testnet and -chain. Can use at most one.\");\n+    if ((int)is_chain_arg_set + (int)fRegTest + (int)fTestNet + (int)fSigNet > 1) {\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet, -signet and -chain. Can use at most one.\");\n     }\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n+    if (fSigNet) {\n+        return CBaseChainParams::SIGNET;\n+    }\n+\n     return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n "
      }
    ]
  },
  {
    "sha": "eacb99812f87ad8052515e9883efc470e8db9e3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWNiOTk4MTJmODdhZDgwNTI1MTVlOTg4M2VmYzQ3MGU4ZGI5ZTNl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:55:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:47Z"
      },
      "message": "qt: update QT to support signet network",
      "tree": {
        "sha": "6d9ae938cd80f9cba78b5b5b9758e8c1c181ef05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d9ae938cd80f9cba78b5b5b9758e8c1c181ef05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eacb99812f87ad8052515e9883efc470e8db9e3e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyL9ww//R2glBfS6WCzkuYdHE9IXqhgUKRWHC6htKwfUZEk0zLJiewVZPXysEbKk\nVdX086vBT9hmJ8hDsn+cmcWQ1KShwpY0SX604KvEQjAFnKwQG/tkcVK4HaAxy9xT\nwyR0RLt/WxppN+JF5HOgZWU2DS32xfOR74eU37MfTtwvh8V3zfjPrqqweQ6f2bUx\nY59wroeQ92ynLfj+A7OJ44whDWiQYlJcRJLYRkLS59t5i1OlG8Aba1QJg9zhbd0B\nj7scp4D/aPZU0Qn9pyMJtCVJDF8ABGy91I2xCDaVuneQEF8GyrAuMWh1F2v88UH8\nRvFh1MjOXZY6GBzGXTTfEXabFEdmLkgT2Bhkr+rEBRQac/xzLXg19/nqkxsunakB\nSq0U4FkkaWdZDHBEDWbZhrVbB6OuQvjJYAXPDPCp4X3gqFuIg+oRYjvZDjJPdgUa\n1cc24nALwQOM7UBSZ70wd7AzrXkA+0FZQWFn77IEZBxjfWfQ4Z44EUSOWRn2QmOZ\nA1jTKh9xkIjINevcs4C+fRjlj0vmDRLxjxP4TGwjHIfp21Mf7Ct2UfjvExBmDdaf\niUPtzGRiSi8eiGETc94svd/Mgb0iGbQ4m6CwVO6ahniyEA6h9shk/m6zzjMlwQD3\neHQ8DrxjKhRA0z0cdWSSY8pPtoSv2vK2qj60cfH7SVHzsNf1aFE=\n=E562\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d9ae938cd80f9cba78b5b5b9758e8c1c181ef05\nparent 82e69c3cdf90977e5b14a0cef78cf9671ae9426f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563353713 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469647 +0900\n\nqt: update QT to support signet network\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacb99812f87ad8052515e9883efc470e8db9e3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eacb99812f87ad8052515e9883efc470e8db9e3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacb99812f87ad8052515e9883efc470e8db9e3e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e69c3cdf90977e5b14a0cef78cf9671ae9426f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82e69c3cdf90977e5b14a0cef78cf9671ae9426f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "40d36a075d63e94f31ad2754ba68b2ed4da71497",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eacb99812f87ad8052515e9883efc470e8db9e3e/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eacb99812f87ad8052515e9883efc470e8db9e3e/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=eacb99812f87ad8052515e9883efc470e8db9e3e",
        "patch": "@@ -47,6 +47,7 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n #define QAPP_APP_NAME_REGTEST \"Bitcoin-Qt-regtest\"\n+#define QAPP_APP_NAME_SIGNET \"Bitcoin-Qt-signet\"\n \n /* One gigabyte (GB) in bytes */\n static constexpr uint64_t GB_BYTES{1000000000};"
      },
      {
        "sha": "7e996d8ed412b2cda9c6276dc1c7c22f0e978454",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eacb99812f87ad8052515e9883efc470e8db9e3e/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eacb99812f87ad8052515e9883efc470e8db9e3e/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=eacb99812f87ad8052515e9883efc470e8db9e3e",
        "patch": "@@ -19,7 +19,8 @@ static const struct {\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n-    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30}\n+    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30},\n+    {\"signet\", QAPP_APP_NAME_SIGNET, 35, 15},\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n "
      }
    ]
  },
  {
    "sha": "6de22e6af575e839f4aa224a67de6666c699eee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGUyMmU2YWY1NzVlODM5ZjRhYTIyNGE2N2RlNjY2NmM2OTllZWUw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T09:40:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "consensus: add signet validation",
      "tree": {
        "sha": "7c4bd2f5533d95032778d05cbbd41d8e037d5180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c4bd2f5533d95032778d05cbbd41d8e037d5180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6de22e6af575e839f4aa224a67de6666c699eee0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyJQWxAAnhXa8kZ+VXAzz40SCnt5Ks23ktaUYiv136xUGktDCnDhoJoackucWyZQ\nJo6eMfdtCV8NeLzlVnZovkQ1bDlLaZTZsot4Tuqru+NeL6I3qzfutgEKnHGFrVaE\nhtAiXnW2ugUGeBWHRCusjEwM7kldRL8Wa8bDt8sCkFNYkwb3Xwa9QssxUJp2vadN\ntl9jXF3FmJPzIOOwGPjZJhbkPfWdvjIuBQMAEXwrEUd5lkVzjaxX92KQVJXBpKGl\nY+NCJ/A/3DLvpS2jl2YSPZtXM8KsfS3rYlDSgmvFfWu6os/u2YWhuVlGr2aVlVFO\nSkDAS2u66q6n1zZlrD28BQfVd15pStww26gqVTE9pVkdGbwahIw/OgRRLj9kCtvo\nTlVG7rDk+8/CEXWQNQ8Y+lfQHIu7fUx0x6XV7BbCV+P5c+pd7Y26wONGaEqrmKLw\n1tDXtnoF53aKUEyJoZvzQC6GkXyqXUa/jbTjbJa4VeNpmiSQk6zxbyhL3KEF1/gs\nJlvNLFyjskctFrCPo4fYM+JPRs2Bf8dWlpQIy1wRHAWt0BxpB9+UJMn5BRX2+qUa\nPb47jn1QQAaUFY2GaxzJYl0pmQaaOS9b5m20xiz00kadb7w9uyRqopLTcHtiB8ED\ncYG0Z+DE0TioezzV7As1XngsYvCbvOI2w5CAkGBg5Kc0azUMg2w=\n=C22A\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c4bd2f5533d95032778d05cbbd41d8e037d5180\nparent eacb99812f87ad8052515e9883efc470e8db9e3e\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563356434 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nconsensus: add signet validation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de22e6af575e839f4aa224a67de6666c699eee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6de22e6af575e839f4aa224a67de6666c699eee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de22e6af575e839f4aa224a67de6666c699eee0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eacb99812f87ad8052515e9883efc470e8db9e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacb99812f87ad8052515e9883efc470e8db9e3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eacb99812f87ad8052515e9883efc470e8db9e3e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b4ba6ad11ff30eefe172b30c8131d920095516d6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de22e6af575e839f4aa224a67de6666c699eee0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de22e6af575e839f4aa224a67de6666c699eee0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6de22e6af575e839f4aa224a67de6666c699eee0",
        "patch": "@@ -31,6 +31,7 @@\n #include <script/script.h>\n #include <script/sigcache.h>\n #include <shutdown.h>\n+#include <signet.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <txdb.h>\n@@ -1151,6 +1152,11 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n     if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n+    if (consensusParams.signet_blocks && block.GetHash() != consensusParams.hashGenesisBlock && !CheckBlockSolution(block, consensusParams)) {\n+        /* CheckBlockSolution() calls error(..) */\n+        return false;\n+    }\n+\n     return true;\n }\n \n@@ -3308,6 +3314,10 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n         return false;\n \n+    if (consensusParams.signet_blocks && fCheckPOW && block.GetHash() != consensusParams.hashGenesisBlock && !CheckBlockSolution(block, consensusParams)) {\n+        return false;\n+    }\n+\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;"
      }
    ]
  },
  {
    "sha": "088a5252b14bbf92414318b10deae3905bf428a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODhhNTI1MmIxNGJiZjkyNDE0MzE4YjEwZGVhZTM5MDViZjQyOGE4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-18T04:42:31Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "i/o: make DecodeHexBlk able to read block hex from file",
      "tree": {
        "sha": "5b2c6df976dd2013c496ee44bf0edc74e8d23fa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2c6df976dd2013c496ee44bf0edc74e8d23fa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/088a5252b14bbf92414318b10deae3905bf428a8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyI6fg/+OZidtyimUJ5m8ONkVHKbHWfeqRgTwTFwIEXN8/1jJW55X7Wzfo+RdILQ\nuiJg7psWQnxQDRGtoOfICBVufcYxSCmsCPwP6yKjnygzhLvHVLwbLKaIynXBkoTF\na8v6F/ZBWJMyYGuh9NriRC9h4t+5QqGIq5zv7K17vYCblI9ineBNwi2dmaLlcJgG\nbg+oBqK072XjleXLMOXdn1KBHsU6ER2MM3+suVGvMqHHz4gvqfhsMjARVkjzpfC8\nxGtrjKCYOMuFcA9xRkWFz4xDQ8DRrL38AAEOcq9l9ikwMzF9engbpGxo5G3aM8rY\nSWNMD0yNS8j82INqeCjJNWPafxMsXQ48IxSfJf1SV0JEEmpNC8JyAuWSlzyrMldV\na2M8gnK6mS7fVDLUUVParH31w6JwT4zIhjroJzNCGwRxvWOzDNVZVseDCpUKZDb1\nbRrjHocfhzAz8ev4MbEvQwWu4XjCqiXM+ITR/lTlW+juoP5mi2RaApEmlSlPepP0\nstSM/aIqR6Z/s3vLJCnZ27dCrCaFYwutwKb48pgF6jVNgmZMHu7wiu70cdJVzgzh\n1kW2p2IpNlaGO2xcBrNDlerM13FZ7MUJdHruveuoYjO/Hi81NQmJPPXPPTlyIBDg\nqIMJRKO+W/FLULeRNOZrg9CApNGKINTAUbFRKwQszxp4Yeg1Fiw=\n=hYc/\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b2c6df976dd2013c496ee44bf0edc74e8d23fa9\nparent 6de22e6af575e839f4aa224a67de6666c699eee0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563424951 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\ni/o: make DecodeHexBlk able to read block hex from file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088a5252b14bbf92414318b10deae3905bf428a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/088a5252b14bbf92414318b10deae3905bf428a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088a5252b14bbf92414318b10deae3905bf428a8/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6de22e6af575e839f4aa224a67de6666c699eee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de22e6af575e839f4aa224a67de6666c699eee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6de22e6af575e839f4aa224a67de6666c699eee0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dba2a7583cad4a3b8957d4b3477745e708dede74",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/088a5252b14bbf92414318b10deae3905bf428a8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/088a5252b14bbf92414318b10deae3905bf428a8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=088a5252b14bbf92414318b10deae3905bf428a8",
        "patch": "@@ -158,10 +158,27 @@ bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)\n     return true;\n }\n \n+inline bool ReadFromDisk(const std::string& path, std::string& output)\n+{\n+    FILE* fp = fopen(path.c_str(), \"rb\");\n+    if (!fp) return false;\n+    char buf[1025];\n+    size_t r;\n+    buf[1024] = 0;\n+    output = \"\";\n+    while (0 < (r = fread(buf, 1, 1024, fp))) { buf[r] = 0; output += buf; }\n+    while (output.size() > 0 && output[output.size() - 1] == '\\n') output = output.substr(0, output.size() - 1);\n+    fclose(fp);\n+    return true;\n+}\n+\n bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n {\n-    if (!IsHex(strHexBlk))\n+    if (!IsHex(strHexBlk)) {\n+        std::string actual;\n+        if (ReadFromDisk(strHexBlk, actual)) return DecodeHexBlk(block, actual);\n         return false;\n+    }\n \n     std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n     CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "56a373cea1007a91762e050757b5f3b165ee0978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmEzNzNjZWExMDA3YTkxNzYyZTA1MDc1N2I1ZjNiMTY1ZWUwOTc4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-18T03:25:47Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc: add getnewblockhex command for obtaining an unsigned block",
      "tree": {
        "sha": "0aa804b6a12fe8b0c1312aeb1c395f5801333970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa804b6a12fe8b0c1312aeb1c395f5801333970"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56a373cea1007a91762e050757b5f3b165ee0978",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyIJWw/+K2RgYS0s44Pnist3zm95u+dFDzoAioxEuDgPgwuBzJio0P8ugdAYqwqy\ne3XuALB1dy/w85cRNN0BMXI4kSetlxQprZXS26OWRm/N1463pLblrGaedRz0jiPn\n/qeKi4COIhTGWi8tMDXQXAasUEVz8lx7Vrn2Mc6kDnx7jESlde4M8sTrItlrrED5\nR3Zvu/pG4fkJ40vPWCwsx49NYDi/gwHzQcyQhek/+0EnU0COFkqaDqhgFOL6gfJ2\nE8Zen59fFH6pRPKrhLbibTWhPVj5eCKr8WQlR+eY5k1UHDQmaVsLr3VIJ6yOyP8f\nseBsD2T7BNhNqkt+6K2Yvzl/sheBP/0VWnaQ7cba6S3vBEjzbr8GhXdEocFAITPh\n+9wU7w8ShLH2qPuxCPLxKpWVlKtXloYj2t2TkEneiw+pRnsC9suP1wv+jQJaDEnB\nGlSaOImaBHQt5NWKAQTQ56rRC3NmkzU1gBw3FqtJqIKUHlAdijCA42lDg+dip/i5\nY5q04vewM8IyCnRHj+q/ST5i60c10u514ULWrjqb4rUrW+JMSNcHNmdPPzJzumW0\n9V7NL15Owkz0XrnhjqYs8sWHHpSjPEoWtjXqTF12P7W4Jh8QfPxSHdFFopwSkREM\nOJ5gz1Rwfn/s4y/41WaV1/BRuLJxeq3BFvS68l3fprNThlouQJI=\n=abiJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 0aa804b6a12fe8b0c1312aeb1c395f5801333970\nparent 088a5252b14bbf92414318b10deae3905bf428a8\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563420347 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc: add getnewblockhex command for obtaining an unsigned block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a373cea1007a91762e050757b5f3b165ee0978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56a373cea1007a91762e050757b5f3b165ee0978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a373cea1007a91762e050757b5f3b165ee0978/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088a5252b14bbf92414318b10deae3905bf428a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088a5252b14bbf92414318b10deae3905bf428a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088a5252b14bbf92414318b10deae3905bf428a8"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 56,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e8b0e246ce5c5c238d4dc6dfc0d9bc34588851b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56a373cea1007a91762e050757b5f3b165ee0978/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56a373cea1007a91762e050757b5f3b165ee0978/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=56a373cea1007a91762e050757b5f3b165ee0978",
        "patch": "@@ -23,6 +23,7 @@\n #include <script/script.h>\n #include <script/signingprovider.h>\n #include <shutdown.h>\n+#include <signet.h>\n #include <txmempool.h>\n #include <univalue.h>\n #include <util/fees.h>\n@@ -221,6 +222,10 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n+    if (Params().GetConsensus().signet_blocks) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Generating signet blocks require that you use getnewblockhex\");\n+    }\n+\n     const CTxMemPool& mempool = EnsureMemPool();\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n@@ -1021,6 +1026,54 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+//\n+// signet\n+//\n+\n+UniValue getnewblockhex(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"getnewblockhex\",\n+        \"\\nGets hex representation of a proposed, unmined new signet block.\\n\",\n+        {\n+            {\"coinbase_destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Pay-out destination, as an address or a custom coinbase script\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::STR_HEX, \"blockhex\", \"The block hex\"\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getnewblockhex\", \"bc1qkallealmkdwwyuc2tmf5c6hzmlaujq6jl38hpe\")\n+        }\n+    }.Check(request);\n+\n+    if (!Params().GetConsensus().signet_blocks) {\n+        throw std::runtime_error(\"getnewblockhex can only be used with signet networks\");\n+    }\n+\n+    CScript coinbase_script;\n+    auto str = request.params[0].get_str();\n+    if (IsValidDestinationString(str)) {\n+        auto dest = DecodeDestination(str);\n+        coinbase_script = GetScriptForDestination(dest);\n+    } else {\n+        util::insert(coinbase_script, ParseHexV(str, \"coinbase_script\"));\n+    }\n+\n+    const CTxMemPool& mempool = EnsureMemPool();\n+\n+    auto block = BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script)->block;\n+    unsigned int extra_nonce = 0;\n+    // we bump stuff to bop stuff, or merkle root will be 0, etc etc etc etc\n+    {\n+        LOCK(cs_main);\n+        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+    }\n+\n+    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+    ssBlock << block;\n+\n+    return HexStr(ssBlock.begin(), ssBlock.end());\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n@@ -1039,6 +1092,9 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n+\n+    /** Signet mining */\n+    { \"signet\",             \"getnewblockhex\",         &getnewblockhex,         {\"coinbase_destination\"} },\n };\n // clang-format on\n "
      }
    ]
  },
  {
    "sha": "c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGNhZDIwYTBmYTA2MGE0NDU1YWU2NjM1N2VmNDJjZGNkYjM3M2Y5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-18T03:19:35Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc: add signblock command",
      "tree": {
        "sha": "fcb91c4dffee388dbead37b2ccee3246af01f817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcb91c4dffee388dbead37b2ccee3246af01f817"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyITXA/+IS0gRqshd9I0tmOH6B72VpIOtph3TL5bx+GgADSpNESYUXHt5i+PDEaV\nWF4GRdn9ccshMpdpsqzi7BsWNnTbgzHIEPST370wayoM5hQruqPLv3GwrjwWpLyc\nC8PneWdTjDTTBwWXs+khswTPL+zK4vjPhMhxHtnZw/0H6JiEd+8NJcPj1vzB/vd8\n/3MejdNi3fntlmxyd6J3Z1oTbOTFEO6/dwHQRLXXdFxK41TbEBL2TnpICkj6eYnJ\n0ZVB28J6LJy3wjqhfw+iVfNiIItju/pTjWm7kun3/jql4psrPQHgFmvWIAEzFpnF\nNAj/jJkWyh/uugmKr1fEoHj4bRj0pvkDqFk0aVhQ8lBIWXQ574UiON+PYytZJWzt\n5xIY4rQJQGeCDSTxWkwXeSSZnu7tDiuhHyjg6FIxq/SRxQYQE+opFasYIjjA2fak\nJxaYhGROdRCU/UJbpDGvJX6VBQ6rOP2Senel8RYQOywBYEouH1DliVgg+pomMg/o\n1v149RR9pnpMeIuqJ5pSFe2Ey7OhC3fhifgR8ts0LXG7eQgrIY7URnrti1HICv6q\nh5IUp3K8eWWp6z58mvV0BOdEpVcgxw/RrDl6/n0hmsxWshkfwAhypDXlpwOMgqLz\njWt9CFV/m5CqmsFgHYAPoPlyeZa7V4xGlyEUSgH9gY69i4gvLHU=\n=DQXb\n-----END PGP SIGNATURE-----",
        "payload": "tree fcb91c4dffee388dbead37b2ccee3246af01f817\nparent 56a373cea1007a91762e050757b5f3b165ee0978\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563419975 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc: add signblock command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4cad20a0fa060a4455ae66357ef42cdcdb373f9/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56a373cea1007a91762e050757b5f3b165ee0978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a373cea1007a91762e050757b5f3b165ee0978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56a373cea1007a91762e050757b5f3b165ee0978"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe97b3d0eda6f789da721e89595142e76b04a234",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4cad20a0fa060a4455ae66357ef42cdcdb373f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4cad20a0fa060a4455ae66357ef42cdcdb373f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n+#include <consensus/merkle.h> // for BlockMerkleRoot in signblock (signet)\n #include <core_io.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n@@ -17,6 +18,7 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/sign.h>\n+#include <signet.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n #include <util/message.h> // For MessageSign()\n@@ -4280,6 +4282,83 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+void SignBlockWithWallet(CBlock& block, CWallet* const pwallet)\n+{\n+    SignatureData solution_in;\n+\n+    std::vector<uint8_t> signet_commitment;\n+    if (block.GetWitnessCommitmentSection(SIGNET_HEADER, signet_commitment) && signet_commitment.size() > 8) {\n+        solution_in = SignatureData(CScript(signet_commitment.begin() + 8, signet_commitment.end()));\n+    }\n+\n+    auto signet_hash = GetSignetHash(block);\n+\n+    CScript blockscript(g_signet_blockscript.begin(), g_signet_blockscript.end());\n+\n+    SignatureData solution(solution_in);\n+    auto provider = pwallet->GetSigningProvider(blockscript);\n+    if (!provider) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"signing provider unavailable -- do you have the private key(s)?\");\n+    }\n+    bool res = ProduceSignature(*provider, SimpleSignatureCreator(signet_hash), blockscript, solution);\n+    if (!res) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"could not produce a signature -- do you have the private key(s)?\");\n+    }\n+    signet_commitment.clear();\n+    signet_commitment.insert(signet_commitment.begin(), solution.scriptSig.begin(), solution.scriptSig.end());\n+    block.SetWitnessCommitmentSection(SIGNET_HEADER, signet_commitment);\n+}\n+\n+UniValue signblock(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"signblock\",\n+        \"\\nSigns a block proposal, checking that it would be accepted first.\\n\"\n+        \"(Note: only useable with signet networks.)\\n\",\n+        {\n+            {\"blockhex\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded block from getnewblockhex, or a filename\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::STR_HEX, \"sig\", \"The signature\"\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"signblock\", \"0000002018c6f2f913f9902aeab...5ca501f77be96de63f609010000000000000000015100000000\")\n+        },\n+    }.Check(request);\n+\n+    if (!Params().GetConsensus().signet_blocks) {\n+        throw std::runtime_error(\"signblock can only be used with signet networks\");\n+    }\n+\n+    CBlock block;\n+\n+    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n+    }\n+\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n+\n+    uint256 hash = block.GetHash();\n+    if (nullopt != locked_chain->getBlockHeight(hash)) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"already have block\");\n+    }\n+\n+    SignBlockWithWallet(block, pwallet);\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+\n+    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+    ssBlock << block;\n+\n+    return HexStr(ssBlock.begin(), ssBlock.end());\n+}\n+\n UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue importprivkey(const JSONRPCRequest& request);\n@@ -4351,6 +4430,9 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n+\n+    /** Signet mining */\n+    { \"signet\",             \"signblock\",                        &signblock,                     {\"blockhex\"} },\n };\n // clang-format on\n "
      }
    ]
  },
  {
    "sha": "3a8073f2fbaffd9d23e859d13f32f363a96596e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTgwNzNmMmZiYWZmZDlkMjNlODU5ZDEzZjMyZjM2M2E5NjU5NmUx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-18T03:21:00Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc: include signet commitment in blockToJSON dictionary results",
      "tree": {
        "sha": "9b1f91df60ebae2cb54f8c0da9c3d89d2bdfd429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b1f91df60ebae2cb54f8c0da9c3d89d2bdfd429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a8073f2fbaffd9d23e859d13f32f363a96596e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyK21g/+M6bhErRyBMyEfI4nuxWNbeegAXmYSoRd+PJtm4Qy9kAgXTfietv4Czvs\ngT2lyjLCty+Bw7YXzunHHBhJjtvWL9rIQhumsTTwRvAxwVOOZ75Hb1HDxcqnGmTR\nnIMM0XE/WaS1gAfga0UXrY/umzm69R8ZJa2b4NVxK5zlBH9TxX6WR/vTgO6myyrv\nYRWyqddvOTECe2WpMn4aMnosd6JKk5rSWfJDr+OR91K9IOVm3ZgRByfHE1TANLSQ\nXmU7S9dsMPGadtgU3IkLQaDdDZ4ZRhcjD0EyKKwU1SLYNuk1Yazfw5p//hTJ40Gi\nsg4+LNs7vneknyf5x7SdiJoCCBQH6LtTsLioLXDBuwrhDOSQN5ToQYNfSR5mFkH0\nq0pfBmf2vNTLss0pCIAkoyZDomZFtohNzSz0ZkqzYNcIUfCj8AyxGCZRhg7ZjguE\nY5Q+KfsAQihaTy21KEu0WHozEIV82/V0uZXhPOkZrDvTqnxaxUNNoMRCI1Itcvll\neVmv/moVhpYNWwvsLQ0m9hNblkrDelomSuG0czDrIRalB2J8EMrMqCsu52zgZCf2\nLCzfYVnRhLqvRf4BFjaUSIwqsu/xaxv5hq4rs1AAauxpPwZuEysPqdIK84yl0AyI\nc+nz96qXmbZOS44YizT4zsDHJ79zcNKo/iFDGHlUN5lDjBSFJOQ=\n=O3wI\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b1f91df60ebae2cb54f8c0da9c3d89d2bdfd429\nparent c4cad20a0fa060a4455ae66357ef42cdcdb373f9\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563420060 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc: include signet commitment in blockToJSON dictionary results\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8073f2fbaffd9d23e859d13f32f363a96596e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8073f2fbaffd9d23e859d13f32f363a96596e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8073f2fbaffd9d23e859d13f32f363a96596e1/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4cad20a0fa060a4455ae66357ef42cdcdb373f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4cad20a0fa060a4455ae66357ef42cdcdb373f9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da48d7f0529f01b1cd5893e878365ad681ab2cb3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a8073f2fbaffd9d23e859d13f32f363a96596e1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a8073f2fbaffd9d23e859d13f32f363a96596e1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3a8073f2fbaffd9d23e859d13f32f363a96596e1",
        "patch": "@@ -24,6 +24,7 @@\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n+#include <signet.h> // for blockToJSON signet_commitment printing\n #include <streams.h>\n #include <sync.h>\n #include <txdb.h>\n@@ -167,6 +168,12 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n+    if (Params().GetConsensus().signet_blocks) {\n+        std::vector<uint8_t> signet_commitment;\n+        if (block.GetWitnessCommitmentSection(SIGNET_HEADER, signet_commitment)) {\n+            result.pushKV(\"signet-solution\", HexStr(signet_commitment));\n+        }\n+    }\n     return result;\n }\n "
      }
    ]
  },
  {
    "sha": "81b69ab5204a1688cc980089145bd45c8453ef80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWI2OWFiNTIwNGExNjg4Y2M5ODAwODkxNDViZDQ1Yzg0NTNlZjgw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T07:08:18Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc: refactor out grindBlock part from generateBlocks",
      "tree": {
        "sha": "46bb75347f877772abbb3063b4e1043e28420499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46bb75347f877772abbb3063b4e1043e28420499"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81b69ab5204a1688cc980089145bd45c8453ef80",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyK/Lw/+ObOdBRM8mMxMKPzrTDMh3CJNNEpjOamSJVYKJVA6BmJPVxy1pEEGK74e\nY1o4WBOgNd/A1hAIPJMJrkkS9mZkBV6dWh4lg6RDoCiiXVMTXIwoVuD9nAggamYY\niKVfeJ5b64Varu344dNLGrbVJ4ZS2ATfW6wQRkvTz6aReq0sQCUsI53BgZ8c8M/2\nE5l0Y8W2LXzhEEv6UbtZ+iA2FIrSOqaWJI0VqWvd/xIKob+UJHyFlrcl+HGQpw9K\nZ+1EmbqxSlPzg4RaekX2ZIaFfqeLo92E+VYhFlhtPUs2Kf7gSs6R1y8P1kB1lAgv\nOUResBGAekjA1CmH23aV28ZH/NrwuoX20oHQffKbQ9zOelU9BDDckNijnq61TUw/\nQFWYypo1Ftmd4fwCuT3fE9TMIU43p8C5V0Q3MFA5J8nnhZ9UBy05lcQs8e7Vt3MK\n4/04bJZe098/evYUKrtuEwl6vPYsC/PxHQhG6KG1TvS710XHrValswerfsgCAfNr\nicp1/hMJGF/j/OXgIAV5oLCQNE9LimP9xJFNWBlW8idhgVrY+mE/1IQw5Mqn2yXm\niQketfB+YNJoR8W12vi3TTi5SR6EXGGvVjDfVz8c2BIWHOPNzs8sYVvRZHAXbm2j\nzonRDrA1Qo99CxlJIT8uyjxKhmkB4Y7NNxcKmMc/13ADuN7z0Y8=\n=CiYD\n-----END PGP SIGNATURE-----",
        "payload": "tree 46bb75347f877772abbb3063b4e1043e28420499\nparent 3a8073f2fbaffd9d23e859d13f32f363a96596e1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583392098 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc: refactor out grindBlock part from generateBlocks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b69ab5204a1688cc980089145bd45c8453ef80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81b69ab5204a1688cc980089145bd45c8453ef80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b69ab5204a1688cc980089145bd45c8453ef80/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a8073f2fbaffd9d23e859d13f32f363a96596e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8073f2fbaffd9d23e859d13f32f363a96596e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8073f2fbaffd9d23e859d13f32f363a96596e1"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 22,
      "deletions": 12
    },
    "files": [
      {
        "sha": "524624d07d7e9bbfd23fb4cf46b171f22c54d7e2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b69ab5204a1688cc980089145bd45c8453ef80/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b69ab5204a1688cc980089145bd45c8453ef80/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=81b69ab5204a1688cc980089145bd45c8453ef80",
        "patch": "@@ -101,6 +101,24 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n+static bool grindBlock(CBlock* pblock, uint64_t& nMaxTries, uint256& result)\n+{\n+    while (nMaxTries > 0 && pblock->nNonce < std::numeric_limits<uint32_t>::max() && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()) && !ShutdownRequested()) {\n+        ++pblock->nNonce;\n+        --nMaxTries;\n+    }\n+    if (ShutdownRequested()) {\n+        return false;\n+    }\n+    if (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) return false;\n+    result = pblock->GetHash();\n+    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n+    if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr)) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+    }\n+    return true;\n+}\n+\n static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n {\n     int nHeightEnd = 0;\n@@ -112,6 +130,7 @@ static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbas\n         nHeightEnd = nHeight+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n+    uint256 result;\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n@@ -123,21 +142,12 @@ static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbas\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, ::ChainActive().Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < std::numeric_limits<uint32_t>::max() && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()) && !ShutdownRequested()) {\n-            ++pblock->nNonce;\n-            --nMaxTries;\n-        }\n-        if (nMaxTries == 0 || ShutdownRequested()) {\n-            break;\n-        }\n-        if (pblock->nNonce == std::numeric_limits<uint32_t>::max()) {\n+        if (!grindBlock(&pblocktemplate->block, nMaxTries, result)) {\n+            if (nMaxTries == 0) break;\n             continue;\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n-        blockHashes.push_back(pblock->GetHash().GetHex());\n+        blockHashes.push_back(result.GetHex());\n     }\n     return blockHashes;\n }"
      }
    ]
  },
  {
    "sha": "a7d76a5cf4b58533621c9f9790afd199f633a939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2Q3NmE1Y2Y0YjU4NTMzNjIxYzlmOTc5MGFmZDE5OWY2MzNhOTM5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T07:05:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc: add grindblock command for generating POW on a signed signet block",
      "tree": {
        "sha": "c9f753206dbec5901dcb60d735e2f01ab0b27ac8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9f753206dbec5901dcb60d735e2f01ab0b27ac8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d76a5cf4b58533621c9f9790afd199f633a939",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyJyZw//TOeNjmkK3J/Rnu+74zwLoUloPVCYg+mK7HlCvhv9LpqrNGMKU7QUkLvV\nXZQHT1mT1iO8Dhzs42B3L/NOtVMbCeet4URtUMfaNTLaGDH6pvor1n602yvUgzFl\n4JkBQH6CyQdxnJMQpX3Yt4zwlTWF2OOYIpCo/3ZutZHNfLvh30Q0b7z4E9qTym6r\nLo2reyncXx5Ef+ZqtLENr/uXMXBp4n2pYix1GEk26p1kft2KA3ZS+gH8zl6U/FJq\ndSbBABhMXa1XycpMEAHlvJn+CfhFz6RGjz/+UVjzZ0Y9Z0XG0M6Iid92SYz+pyZL\n3do1blez308/NOty7ZqPcXq/97dCaikOPhrg44IWfHBlmQLRVl/eFln0uEGpT4Ik\niI1zq/X+fxIdfQdtRbBXZiOf+IAB8Lywvulxip28g7zexS1jdqCs+Hw/pXwQ95LB\n/R06DTNKGfwveKem/uQQkCFTZnOeHxQeCDO6BHPl+kXepBL5w2xkN3MAGx+9aWI0\ntWfEGVrGW3exeCE7j4aupgXgLiMbqFgZ94OxA2dhsBFJ8qW1wjWzbIYwQZh/RZpx\nZGBfaZ06fXcx1AabYJd5aNN8YhDJQraRhOC4vT9nh7sVvPKP8AJbE+iJCQNeDfPr\nuRJJjuv86xl8rZWBhX4+a+exx0VIbVr3CvIks8ZYdbbtOSOntOo=\n=jbqk\n-----END PGP SIGNATURE-----",
        "payload": "tree c9f753206dbec5901dcb60d735e2f01ab0b27ac8\nparent 81b69ab5204a1688cc980089145bd45c8453ef80\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583391941 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc: add grindblock command for generating POW on a signed signet block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d76a5cf4b58533621c9f9790afd199f633a939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d76a5cf4b58533621c9f9790afd199f633a939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d76a5cf4b58533621c9f9790afd199f633a939/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81b69ab5204a1688cc980089145bd45c8453ef80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b69ab5204a1688cc980089145bd45c8453ef80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81b69ab5204a1688cc980089145bd45c8453ef80"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e31d5063afae778d1902af89402f51c2efbdfb3",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d76a5cf4b58533621c9f9790afd199f633a939/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d76a5cf4b58533621c9f9790afd199f633a939/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=a7d76a5cf4b58533621c9f9790afd199f633a939",
        "patch": "@@ -54,6 +54,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getbalance\", 3, \"avoid_reuse\" },\n     { \"getblockhash\", 0, \"height\" },\n+    { \"grindblock\", 1, \"maxtries\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },\n     { \"waitforblock\", 1, \"timeout\" },"
      },
      {
        "sha": "3899f42c2f148f52d79aa107f53dc06bc2ec2601",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d76a5cf4b58533621c9f9790afd199f633a939/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d76a5cf4b58533621c9f9790afd199f633a939/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a7d76a5cf4b58533621c9f9790afd199f633a939",
        "patch": "@@ -1084,6 +1084,50 @@ UniValue getnewblockhex(const JSONRPCRequest& request)\n     return HexStr(ssBlock.begin(), ssBlock.end());\n }\n \n+static UniValue grindblock(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"grindblock\",\n+        \"\\nGrind the given signet block to find valid proof of work\\n\"\n+        \"May fail if it reaches maxtries attempts.\\n\",\n+        {\n+            {\"blockhex\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The block data\"},\n+            {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::STR_HEX, \"blockhash\", \"Resulting block hash, or null if none was found\"\n+        },\n+        RPCExamples{\n+            \"\\nGrind a block with hex $blockhex\\n\"\n+            + HelpExampleCli(\"grindblock\", \"$blockhex\")\n+        },\n+    }.Check(request);\n+\n+    CBlock block;\n+    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Failed to decode block hex\");\n+    }\n+\n+    if (!Params().GetConsensus().signet_blocks) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Grinding blocks is only possible in a signet network\");\n+    }\n+\n+    std::vector<uint8_t> signet_commitment;\n+    if (!block.GetWitnessCommitmentSection(SIGNET_HEADER, signet_commitment)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block has no signet commitment; please sign it first\");\n+    }\n+\n+    uint64_t max_tries = request.params[1].isNull() ? 1000000 : request.params[1].get_int();\n+    uint256 result;\n+    while (max_tries > 0 && !ShutdownRequested()) {\n+        if (grindBlock(&block, max_tries, result)) {\n+            return result.GetHex();\n+        }\n+        if (max_tries == 0) break;\n+    }\n+\n+    return false;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n@@ -1105,6 +1149,7 @@ static const CRPCCommand commands[] =\n \n     /** Signet mining */\n     { \"signet\",             \"getnewblockhex\",         &getnewblockhex,         {\"coinbase_destination\"} },\n+    { \"signet\",             \"grindblock\",             &grindblock,             {\"blockhex\", \"maxtries\"} },\n };\n // clang-format on\n "
      }
    ]
  },
  {
    "sha": "055047c4636d1b5fb30171013d5c09ebdd1ff67b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTUwNDdjNDYzNmQxYjVmYjMwMTcxMDEzZDVjMDllYmRkMWZmNjdi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-23T05:01:45Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:40:48Z"
      },
      "message": "rpc/signet: show signet blockscript in 'getblockchaininfo'",
      "tree": {
        "sha": "05cd14523937135d31dd75f31b3c82266fb5b0fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05cd14523937135d31dd75f31b3c82266fb5b0fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/055047c4636d1b5fb30171013d5c09ebdd1ff67b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1FAACgkQV692LbM1\nMyIKKA//ZhEmkIkuTqoI5A837SuRiJ2tfJbvq6I4xS4cgbW37zfyHUOasXjU3y46\nsyAY9bPzd4+LRXKEc+8eeeydGGl0Krlr2M7lsosm1W8YJT33V51gYdGwqSBkqIlf\nC6VDrTS13Ps5f/oLCS1E2W21hV/fXiOtT6ykDL7S5qW7xtd9hEgGs3w73jSmQlBf\n4vJprSpLFwcxD2UP2Z9DOmJEQu8OY8klZ9DvVAB14kz0uCVP3m7d+D/r6hg0osvJ\nZYrzzdgyey6KctVXkr587g6RA6HGGiVpv/C7yC35w7gDV7abJf9o6DA/CXQ9Oe5m\nITRVYO59VM6oaXqJH4Etql+1V8D9ZlID/tm3qLlVm/pjeQ+CWrcbS1OgaEGHVlKG\nLqir1VuT4uu6lrIPYg1nz52phY+NOnwyAgVf0PNIbA6bttfcJdWzo9DVh5j+abWu\n7YLl5dAA31nJr6vHmRYDnw8cUtO+Ot1GlvV/NCCaO0xEsWttUv6XNWKHnwNmAvnQ\nN9x0MrPLPZSkL6S70V1VFRGsbu9uDI4GEOS7tHs85BIHCey8Sqvp5LsKBIlVLtR7\nTdxD0BZFlJKDgjZwOROIydYmVAzvwkTtnNnXPH0XWWBm1HZZEY52XOxk1FKJt8Dm\nGwVw2Wqw81oBYDMVOMN6CwL+Aji37/WY4cI0/abOnHLobdgnsdQ=\n=Op6j\n-----END PGP SIGNATURE-----",
        "payload": "tree 05cd14523937135d31dd75f31b3c82266fb5b0fd\nparent a7d76a5cf4b58533621c9f9790afd199f633a939\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1566536505 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583469648 +0900\n\nrpc/signet: show signet blockscript in 'getblockchaininfo'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/055047c4636d1b5fb30171013d5c09ebdd1ff67b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/055047c4636d1b5fb30171013d5c09ebdd1ff67b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/055047c4636d1b5fb30171013d5c09ebdd1ff67b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d76a5cf4b58533621c9f9790afd199f633a939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d76a5cf4b58533621c9f9790afd199f633a939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d76a5cf4b58533621c9f9790afd199f633a939"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1082feeff50177b48ae43808a78683cebf5b8aab",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/055047c4636d1b5fb30171013d5c09ebdd1ff67b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/055047c4636d1b5fb30171013d5c09ebdd1ff67b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=055047c4636d1b5fb30171013d5c09ebdd1ff67b",
        "patch": "@@ -1266,6 +1266,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    if (consensusParams.signet_blocks) {\n+        obj.pushKV(\"signet-blockscript\", HexStr(g_signet_blockscript));\n+    }\n     UniValue softforks(UniValue::VOBJ);\n     BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n     BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);"
      }
    ]
  },
  {
    "sha": "37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzI2OWIxOWQyMDU4M2ZjYTNjYzNmOGQxMzg1YjE1NThiYjZmYzBl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-05T15:01:54Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:49:02Z"
      },
      "message": "test: add signet mining tests\n\nAlso adds a condition to test initialization code to not generate blocks for signet chains.",
      "tree": {
        "sha": "f35d95a3cab336ead828129bf8475d3df3c70d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f35d95a3cab336ead828129bf8475d3df3c70d93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1j4ACgkQV692LbM1\nMyISUA/+I9CdmqeQZURFYq/nBvrw4CI3yy5hQWcva/DaJ93Cbv40tPirjv5ub4Yr\nrbIT+8jRB8OBtgPsL0IINumiM5Ga24D+1M7aRJJlINMhqj/NZJt3QQ70d8WmXwZI\ncnhOxhX3Z0F641Agw5ROM8F1mZyusyemPaS6vJkWWEz1ZoK1Dyo3TiVodGHm5wwq\ntyMXZBt8WA0GWH1FisPuxRzgBf1O++94hCvao/EP0HMJuw29/IiynvX2aZRhc0sa\n4vDYzqKI/NS8X1R+COpVz/E99qYomwXW9Qe0eUSgUvxaj7f+0THEqcKKyi61FbBy\nHxKlFtbxJAqMSIXKFiJMMnb6zfKuGjIyyo59wwt9MHOp6qULSgxLwb4KONBSor9R\n4IncigD+AmM3+fbD+Wne1UeREg9L9dpK9i2uN0/FcdawrE3E5+dyeNwdbzYgJFgV\nNPfqoeTR6PylFJawf7KVgWaZ2nRnqH9NuiTntNdcUmZ+mtcqU+AuVFgnh4taZ0hf\ngVGgJ7pVZ+ucCYpcECINE71VgH+V5kFVV5YZa4rkA8RAcQcW29LNEdAnkoifQlqc\nC2j62EFmSPkqAk/imBi2PGYYUBpJj/+5TZhSse5oc+7OU8NE/bzo9TEEA3Fe4pXQ\nZT39GBDLki42wSJTBQuQ9QrIgdO0mnZC8aX1Qp9K22nAgV3WiR0=\n=QFQw\n-----END PGP SIGNATURE-----",
        "payload": "tree f35d95a3cab336ead828129bf8475d3df3c70d93\nparent 055047c4636d1b5fb30171013d5c09ebdd1ff67b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1565017314 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583470142 +0900\n\ntest: add signet mining tests\n\nAlso adds a condition to test initialization code to not generate blocks for signet chains.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "055047c4636d1b5fb30171013d5c09ebdd1ff67b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/055047c4636d1b5fb30171013d5c09ebdd1ff67b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/055047c4636d1b5fb30171013d5c09ebdd1ff67b"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 113,
      "deletions": 15
    },
    "files": [
      {
        "sha": "01dedd9e0def3e7e6beb26ba1770032694ba0e60",
        "filename": "test/functional/mining_signet.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/mining_signet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/mining_signet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_signet.py?ref=37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test signet mining RPCs\n+\n+- getmininginfo\n+- getblocktemplate proposal mode\n+- submitblock\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import (\n+    create_coinbase,\n+)\n+from test_framework.messages import (\n+    CBlock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+private_key  = \"ZFNp4W4HSatHDc4zsheMsDWgUg2uiB5PtnY2Y2hUCNCkQiF81KyV\"\n+pubkey       = \"02c72b24ae2ee333f2da24aea66ce4338c01db8f26d0cc96f586d77edcb5238a4f\"\n+address      = \"sb1qghzjzc0jvkjvvvymxnadmjjpu2tywmvagduwfj\"\n+blockscript  = \"5121\" + pubkey + \"51ae\" # 1-of-1 multisig\n+\n+def assert_template(node, block, expect, rehash=True):\n+    if rehash:\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+    rsp = node.getblocktemplate(template_request={'data': block.serialize().hex(), 'mode': 'proposal', 'rules': ['segwit']})\n+    assert_equal(rsp, expect)\n+\n+def generate(node, count):\n+    for _ in range(count):\n+        addr = node.getnewaddress()\n+        block = node.getnewblockhex(addr)\n+        signed = node.signblock(block)\n+        node.grindblock(signed)\n+\n+\n+class SigMiningTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.chain = \"signet\"\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        shared_args = [\"-signet_blockscript=\" + blockscript, \"-signet_seednode=localhost:1234\"]\n+        self.extra_args = [shared_args, shared_args]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # give the privkey to node 1 so it can sign\n+        node.importprivkey(private_key)\n+        self.log.info('Imported network private key')\n+        self.log.info('address: %s, privkey: %s', address, node.dumpprivkey(address))\n+\n+        self.log.info('getmininginfo')\n+        mining_info = node.getmininginfo()\n+        assert_equal(mining_info['blocks'], 0)\n+        assert_equal(mining_info['chain'], 'signet')\n+        assert 'currentblocktx' not in mining_info\n+        assert 'currentblockweight' not in mining_info\n+        assert_equal(mining_info['networkhashps'], Decimal('0'))\n+        assert_equal(mining_info['pooledtx'], 0)\n+\n+        # Mine a block to leave initial block download\n+        # Actually we mine 20 cause there's a bug in the coinbase height serializers\n+\n+        generate(node, 20)\n+        tmpl = node.getblocktemplate({'rules': ['segwit']})\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n+        assert 'proposal' in tmpl['capabilities']\n+        assert 'coinbasetxn' not in tmpl\n+\n+        coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]))\n+        # sequence numbers must not be max for nLockTime to have effect\n+        coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n+        coinbase_tx.rehash()\n+\n+        block = CBlock()\n+        block.nVersion = tmpl[\"version\"]\n+        block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+        block.nTime = tmpl[\"curtime\"]\n+        block.nBits = int(tmpl[\"bits\"], 16)\n+        block.nNonce = 0\n+        block.vtx = [coinbase_tx]\n+\n+if __name__ == '__main__':\n+    SigMiningTest().main()"
      },
      {
        "sha": "946c18664ac70d44775750073e08a3ca9681ab50",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "patch": "@@ -34,7 +34,7 @@ def test_categories(self):\n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n \n-        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Signet', 'Util']\n \n         if self.is_wallet_compiled():\n             components.append('Wallet')"
      },
      {
        "sha": "67c496f8622d2cb3e3c792c70a647a2de6ce0b9d",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "patch": "@@ -84,6 +84,7 @@\n     \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n     \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+    \"signet\": b\"\\xf0\\xc7\\x70\\x6a\",    # signet\n }\n \n "
      },
      {
        "sha": "72718433672102d1fd88db0033c0ad0a05d772ff",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "patch": "@@ -338,7 +338,8 @@ def setup_nodes(self):\n             extra_args = self.extra_args\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n-        self.import_deterministic_coinbase_privkeys()\n+        if self.chain != \"signet\":\n+            self.import_deterministic_coinbase_privkeys()\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n@@ -553,19 +554,20 @@ def _initialize_chain(self):\n             # Wait for RPC connections to be ready\n             self.nodes[CACHE_NODE_ID].wait_for_rpc_connection()\n \n-            # Create a 199-block-long chain; each of the 4 first nodes\n-            # gets 25 mature blocks and 25 immature.\n-            # The 4th node gets only 24 immature blocks so that the very last\n-            # block in the cache does not age too much (have an old tip age).\n-            # This is needed so that we are out of IBD when the test starts,\n-            # see the tip age check in IsInitialBlockDownload().\n-            for i in range(8):\n-                self.nodes[CACHE_NODE_ID].generatetoaddress(\n-                    nblocks=25 if i != 7 else 24,\n-                    address=TestNode.PRIV_KEYS[i % 4].address,\n-                )\n-\n-            assert_equal(self.nodes[CACHE_NODE_ID].getblockchaininfo()[\"blocks\"], 199)\n+            if self.chain != \"signet\":\n+                # Create a 199-block-long chain; each of the 4 first nodes\n+                # gets 25 mature blocks and 25 immature.\n+                # The 4th node gets only 24 immature blocks so that the very last\n+                # block in the cache does not age too much (have an old tip age).\n+                # This is needed so that we are out of IBD when the test starts,\n+                # see the tip age check in IsInitialBlockDownload().\n+                for i in range(8):\n+                    self.nodes[CACHE_NODE_ID].generatetoaddress(\n+                        nblocks=25 if i != 7 else 24,\n+                        address=TestNode.PRIV_KEYS[i % 4].address,\n+                    )\n+\n+                assert_equal(self.nodes[CACHE_NODE_ID].getblockchaininfo()[\"blocks\"], 199)\n \n             # Shut it down, and clean up cache directories:\n             self.stop_nodes()"
      },
      {
        "sha": "d09459a5052e6f82aece148fe0e73c3dd6d6c1c4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37269b19d20583fca3cc3f8d1385b1558bb6fc0e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "patch": "@@ -182,6 +182,7 @@\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',\n     'mining_basic.py',\n+    'mining_signet.py',\n     'wallet_bumpfee.py',\n     'wallet_bumpfee_totalfee_deprecation.py',\n     'wallet_implicitsegwit.py',"
      }
    ]
  },
  {
    "sha": "50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGM4MzllMWQ5MTM0ODQwOGI0MGIzZjhhNTNlMGVmMWE3ZjZkYTcy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:21:57Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:49:02Z"
      },
      "message": "contrib: add signet scripts (issuer, etc)",
      "tree": {
        "sha": "938415e8dce71fadb0133befe961f8c469621d0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/938415e8dce71fadb0133befe961f8c469621d0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1j4ACgkQV692LbM1\nMyKvZQ//ZhUUuqWAY5LX7raTNpzfRn0gFQvYEaCS/27jE6/b0+LbKtDArFg0/kLo\n3tCikkap7iGkKYAWdwVYrsP2toESakT4DX5WbZhOhaUn5odmRGVJp3KFZjhiB7VY\nlsacIg1Iuhjsc+Dm/VVqxz8vzwORVKeaCvN5O1Vfj+r/cWiFWusdVxlFPdJzB6Lp\nQaXS0XLE2pexHXk8WlB+htUsqjtK65RPqH2aCskd+L5rNuDqmZLCqvzKvFfnFmbt\nbEyfiPmi4S+LBtqVO95/D2dndxF/10kQQ7nWajck16khbekY0DHvwu6iKNUQyBFD\nr4QN7yh2/9F1ZGCWXJOEkLeAnGG7b8r/6BzAxLhXi6WQ0LHHv/ZQAR7zdpV5tc+C\nUqdVTALiGz6Qo8fN3/R+VTamN0ogCm3lti9iX6FuSHXQjEv1DvHD8tgh1LK6dFpj\n6soYZfRbya0mpXuxpxl5CVQgSN7LH+SpBAeIFaof2DvozKDMmPDzNKxaggU9GSn0\nqlvJc77esyqJ7KPCaQP0e/WG/QuX1xd1NcN780AlmV05JdeKznFCa21kY7jFgniK\nUBCprniZxttNRqi1sFhO7Q5ThpSeWCbb6cvCc4RO5p3hNrdVjIfdB+ifHtaGre7e\nRKW0umzaK30OIWijZ1NqmgzdT23A0siVwPpxfEpdj0EDfYBpmdc=\n=gMlV\n-----END PGP SIGNATURE-----",
        "payload": "tree 938415e8dce71fadb0133befe961f8c469621d0b\nparent 37269b19d20583fca3cc3f8d1385b1558bb6fc0e\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563351717 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583470142 +0900\n\ncontrib: add signet scripts (issuer, etc)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37269b19d20583fca3cc3f8d1385b1558bb6fc0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37269b19d20583fca3cc3f8d1385b1558bb6fc0e"
      }
    ],
    "stats": {
      "total": 481,
      "additions": 480,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e39327b6e5bcfe884a3f75283e9fc0fb0667ae5e",
        "filename": "contrib/signet/README.md",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/README.md?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,60 @@\n+Contents\n+========\n+This directory contains tools related to Signet, both for running a Signet yourself and for using one.\n+\n+The `args.sh` script is a helper script used by the other scripts and should not be invoked directly.\n+\n+getcoins.sh\n+===========\n+\n+A script to call a faucet to get Signet coins.\n+\n+Syntax: `getcoins.sh [--help] [--cmd=<bitcoin-cli path>] [--faucet=<faucet URL>] [--addr=<signet bech32 address>] [--password=<faucet password>] [--] [<bitcoin-cli args>]`\n+\n+* `--cmd` lets you customize the bitcoin-cli path. By default it will look for it in the PATH, then in `../../src/`\n+* `--faucet` lets you specify which faucet to use; the faucet is assumed to be compatible with https://github.com/kallewoof/bitcoin-faucet\n+* `--addr` lets you specify a Signet address; by default, the address must be a bech32 address. This and `--cmd` above complement each other (i.e. you do not need `bitcoin-cli` if you use `--addr`)\n+* `--password` lets you specify a faucet password; this is handy if you are in a classroom and set up your own faucet for your students; (above faucet does not limit by IP when password is enabled)\n+\n+If using the default network, invoking the script with no arguments should be sufficient under normal\n+circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n+accept one claim per day. See `--password` above.\n+\n+issuer.sh\n+=========\n+\n+A script to regularly issue Signet blocks.\n+\n+Syntax: `issuer.sh <idle time> [--help] [--cmd=<bitcoin-cli path>] [--] [<bitcoin-cli args>]`\n+\n+* `<idle time>` is a time in seconds to wait between each block generation\n+* `--cmd` lets you customize the bitcoin-cli path. By default it will look for it in the PATH, then in `../../src/`\n+\n+Signet, just like other bitcoin networks, uses proof of work alongside the block signature; this\n+includes the difficulty adjustment every 2016 blocks.\n+The `<idle time>` exists to allow you to maintain a relatively low difficulty over an extended period\n+of time. E.g. an idle time of 540 means your node will end up spending roughly 1 minute grinding\n+hashes for each block, and wait 9 minutes after every time.\n+\n+mkblock.sh\n+==========\n+\n+A script to generate one Signet block.\n+\n+Syntax: `mkblock.sh <bitcoin-cli path> [<bitcoin-cli args>]`\n+\n+This script is called by the other block issuing scripts, but can be invoked independently to generate\n+1 block immediately.\n+\n+secondary.sh\n+============\n+\n+A script to act as backup generator in case the primary issuer goes offline.\n+\n+Syntax: `secondary.sh <trigger time> <idle time> [--cmd=<bitcoin-cli path>] [<bitcoin-cli args>]`\n+\n+* `<trigger time>` is the time in seconds that must have passed since the last block was seen for the secondary issuer to kick into motion\n+* `<idle time>` is the time in seconds to wait after generating a block, and should preferably be the same as the idle time of the main issuer\n+\n+Running a Signet network, it is recommended to have at least one secondary running in a different\n+place, so it doesn't go down together with the main issuer."
      },
      {
        "sha": "874965c8f533bfd219203ab38930da215c1270ae",
        "filename": "contrib/signet/addtxtoblock.py",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/addtxtoblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/addtxtoblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/addtxtoblock.py?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,57 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import sys\n+import os\n+import argparse\n+\n+# dirty hack but makes CBlock etc available\n+sys.path.append('/'.join(os.getcwd().split('/')[:-2]) + '/test/functional')\n+\n+from test_framework.messages import (\n+    CBlock,\n+    CTransaction,\n+    FromHex,\n+    ToHex,\n+)\n+\n+from test_framework.blocktools import add_witness_commitment\n+\n+def main():\n+\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                        usage='%(prog)s [addtxtoblock options] [bitcoin block file] [tx file] [fee]',\n+                                        description=__doc__,\n+                                        epilog='''Help text and arguments:''',\n+                                        formatter_class=argparse.RawTextHelpFormatter)\n+    _, unknown_args = parser.parse_known_args()\n+\n+    if len(unknown_args) != 3:\n+        print(\"Need three arguments (block file, tx file, and fee)\")\n+        sys.exit(1)\n+\n+    [blockfile, txfile, feestr] = unknown_args\n+\n+    with open(blockfile, \"r\", encoding=\"utf8\") as f:\n+        blockhex = f.read().strip()\n+    with open(txfile,    \"r\", encoding=\"utf8\") as f:\n+        txhex    = f.read().strip()\n+\n+    fee = int(feestr)\n+\n+    block = CBlock()\n+    FromHex(block, blockhex)\n+\n+    tx = CTransaction()\n+    FromHex(tx, txhex)\n+\n+    block.vtx[0].vout[0].nValue += fee\n+    block.vtx.append(tx)\n+    add_witness_commitment(block)\n+    print(ToHex(block))\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "62b86eb618c51442f62ccc3d8d766d560f6830e4",
        "filename": "contrib/signet/args.sh",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/args.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/args.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/args.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,55 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+args=\"-signet\"\n+eoc=\n+\n+command -v bitcoin-cli > /dev/null \\\n+&& bcli=\"bitcoin-cli\" \\\n+|| bcli=\"$(dirname $0)/../../src/bitcoin-cli\"\n+\n+if [ \"$VARCHECKS\" = \"\" ]; then\n+    VARCHECKS='if [ \"$varname\" = \"cmd\" ]; then bcli=$value;'\n+fi\n+\n+# compatibility; previously the bitcoin-cli path was given as first argument\n+if [[ \"$1\" != \"\" && \"${1:$((${#1}-11))}\" = \"bitcoin-cli\" ]]; then\n+    echo \"using $1 as bcli\"\n+    bcli=$1\n+    shift\n+fi\n+\n+for i in \"$@\"; do\n+    if [ $eoc ]; then\n+        args=\"$args $i\"\n+    elif [ \"$i\" = \"--\" ]; then\n+        # end of commands; rest into args for bitcoin-cli\n+        eoc=1\n+        continue\n+    elif [ \"${i:0:2}\" = \"--\" ]; then\n+        # command\n+        j=${i:2}\n+        if [ \"$j\" = \"help\" ]; then\n+            >&2 echo -e $HELPSTRING\n+            exit 1\n+        fi\n+        export varname=${j%=*}\n+        export value=${j#*=}\n+        eval $VARCHECKS '\n+        else\n+            >&2 echo \"unknown parameter $varname (from \\\"$i\\\"); for help, type: $0 --help\"\n+            exit 1\n+        fi'\n+    else\n+        # arg\n+        args=\"$args $i\"\n+    fi\n+done\n+\n+if ! [ -e \"$bcli\" ]; then\n+    command -v \"$bcli\" >/dev/null 2>&1 || { echo >&2 \"error: unable to find bitcoin-cli binary: $bcli\"; exit 1; }\n+fi"
      },
      {
        "sha": "e8d2c8d55107998da1e9982623082d9b95c3736b",
        "filename": "contrib/signet/forker.sh",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/forker.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/forker.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/forker.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+#\n+# Take the hex formatted line separated transactions in reorg-list.txt where every even transaction is put into the even set, and every odd transaction is put into the odd set.\n+# That is, transactions on line 1, 3, 5, 7, ... go into the odd set, and transactions on line 2, 4, 6, 8, ... go into the even set.\n+#\n+# - Generate two blocks A and B, where A contains all or some of the odd set, and B contains the corresponding even set.\n+# - Sign, grind, and broadcast block A\n+# - Wait a random amount of time (1-10 mins)\n+# - Invalidate block A\n+# - Sign, grind, and broadcast block B\n+#\n+\n+bcli=$1\n+shift\n+\n+function log()\n+{\n+    echo \"- $(date +%H:%M:%S): $*\"\n+}\n+\n+if [ ! -e \"reorg-list.txt\" ]; then\n+    echo \"reorg-list.txt not found\"\n+    exit 1\n+fi\n+\n+# get address for coinbase output\n+addr=$($bcli \"$@\" getnewaddress)\n+\n+# create blocks A and B\n+$bcli \"$@\" getnewblockhex $addr > $PWD/block-a\n+cp block-a block-b\n+\n+odd=1\n+while read -r line; do\n+    if [ \"$line\" = \"\" ]; then continue; fi\n+    echo $line > tx\n+    if [ $odd -eq 1 ]; then blk=\"block-a\"; else blk=\"block-b\"; fi\n+    ./addtxtoblock.py $blk tx 100 > t # note: we are throwing away all fees above 100 satoshis for now; should figure out a way to determine fees\n+    mv t $blk\n+    (( odd=1-odd ))\n+done < reorg-list.txt\n+\n+rm reorg-list.txt\n+\n+log \"mining block A (to-orphan block)\"\n+while true; do\n+    $bcli \"$@\" signblock $PWD/block-a > signed-a\n+    blockhash_a=$($bcli \"$@\" grindblock $PWD/signed-a 1000000000)\n+    if [ \"$blockhash_a\" != \"false\" ]; then break; fi\n+done\n+log \"mined block with hash $blockhash_a\"\n+(( waittime=RANDOM%570 ))\n+(( waittime=30+waittime ))\n+log \"waiting for $waittime s\"\n+sleep $waittime\n+log \"invalidating $blockhash_a\"\n+$bcli \"$@\" invalidateblock $blockhash_a\n+\n+log \"mining block B (replace block)\"\n+while true; do\n+    $bcli \"$@\" signblock $PWD/block-b > signed-b\n+    blockhash_b=$($bcli \"$@\" grindblock $PWD/signed-b 1000000000)\n+    if [ \"$blockhash_b\" != \"false\" ]; then break; fi\n+done\n+\n+echo \"mined $blockhash_b\"\n+echo \"cleaning up\"\n+rm block-b signed-b block-a signed-a"
      },
      {
        "sha": "6b27f91d09bdca325e88dbff4af63fdd98f44441",
        "filename": "contrib/signet/getcoins.sh",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/getcoins.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/getcoins.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/getcoins.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+#\n+# Get coins from Signet Faucet\n+#\n+\n+export VARCHECKS='\n+        if [ \"$varname\" = \"cmd\" ]; then\n+            bcli=$value;\n+        elif [ \"$varname\" = \"faucet\" ]; then\n+            faucet=$value;\n+        elif [ \"$varname\" = \"addr\" ]; then\n+            addr=$value;\n+        elif [ \"$varname\" = \"password\" ]; then\n+            password=$value;\n+    '\n+export HELPSTRING=\"syntax: $0 [--help] [--cmd=<bitcoin-cli path>] [--faucet=<faucet URL>] [--addr=<signet bech32 address>] [--password=<faucet password>] [--] [<bitcoin-cli args>]\"\n+\n+bcli=\n+args=\n+password=\n+addr=\n+faucet=\"https://signet.bc-2.jp/claim\"\n+\n+# shellcheck source=contrib/signet/args.sh\n+source $(dirname $0)/args.sh \"$@\"\n+\n+if [ \"$addr\" = \"\" ]; then\n+    # get address for receiving coins\n+    addr=$($bcli $args getnewaddress faucet bech32) || { echo >&2 \"for help, type: $0 --help\"; exit 1; }\n+fi\n+\n+# shellcheck disable=SC2015\n+command -v \"curl\" > /dev/null \\\n+&& curl -X POST -d \"address=$addr&password=$password\" $faucet \\\n+|| wget -qO - --post-data \"address=$addr&password=$password\" $faucet\n+\n+echo"
      },
      {
        "sha": "85ce4416694cfa82a582932effa1fb897fc5ba27",
        "filename": "contrib/signet/issuer.sh",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/issuer.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/issuer.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/issuer.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+#\n+# Issue blocks using a local node at a given interval.\n+#\n+\n+export HELPSTRING=\"syntax: $0 <idle time> [--help] [--cmd=<bitcoin-cli path>] [--] [<bitcoin-cli args>]\"\n+\n+if [ $# -lt 1 ]; then\n+    echo $HELPSTRING\n+    exit 1\n+fi\n+\n+function log()\n+{\n+    echo \"- $(date +%H:%M:%S): $*\"\n+}\n+\n+idletime=$1\n+shift\n+\n+bcli=\n+args=\n+\n+# shellcheck source=contrib/signet/args.sh\n+source $(dirname $0)/args.sh \"$@\"\n+\n+MKBLOCK=$(dirname $0)/mkblock.sh\n+\n+if [ ! -e \"$MKBLOCK\" ]; then\n+    >&2 echo \"error: cannot locate mkblock.sh (expected to find in $MKBLOCK\"\n+    exit 1\n+fi\n+\n+echo \"- checking node status\"\n+conns=$($bcli $args getconnectioncount) || { echo >&2 \"node error\"; exit 1; }\n+\n+if [ $conns -lt 1 ]; then\n+    echo \"warning: node is not connected to any other node\"\n+fi\n+\n+log \"node OK with $conns connection(s)\"\n+log \"mining at maximum capacity with $idletime second delay between each block\"\n+log \"hit ^C to stop\"\n+\n+while true; do\n+    if [ -e \"reorg-list.txt\" ]; then\n+        ./forker.sh $bcli $args\n+    else\n+        log \"generating next block\"\n+        blockhash=$(\"$MKBLOCK\" \"$bcli\" $args) || { echo \"node error; aborting\" ; exit 1; }\n+        log \"mined block $($bcli $args getblockcount) $blockhash to $($bcli $args getconnectioncount) peer(s); idling for $idletime seconds\"\n+    fi\n+    sleep $idletime\n+done"
      },
      {
        "sha": "ba69e1bbd40731f3e98f8953b07754ceec602658",
        "filename": "contrib/signet/mkblock.sh",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/mkblock.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/mkblock.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/mkblock.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,37 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+#\n+# Generate a block\n+#\n+\n+if [ $# -lt 1 ]; then\n+    >&2 echo \"syntax: $0 <bitcoin-cli path> [<bitcoin-cli args>]\" ; exit 1\n+fi\n+\n+bcli=$1\n+shift\n+\n+if ! [ -e \"$bcli\" ]; then\n+    command -v \"$bcli\" >/dev/null 2>&1 || { echo >&2 \"error: unable to find bitcoin binary: $bcli\"; exit 1; }\n+fi\n+\n+# get address for coinbase output\n+addr=$($bcli \"$@\" getnewaddress)\n+# start looping; we re-create the block every time we fail to grind as that resets the nonce and gives us an updated\n+# version of the block\n+while true; do\n+    # create an unsigned, un-PoW'd block\n+    $bcli \"$@\" getnewblockhex $addr > $PWD/unsigned\n+    # sign it\n+    $bcli \"$@\" signblock $PWD/unsigned > $PWD/signed\n+    # grind proof of work; this ends up broadcasting the block, if successful (akin to \"generatetoaddress\")\n+    blockhash=$($bcli \"$@\" grindblock $PWD/signed 10000000)\n+    if [ \"$blockhash\" != \"false\" ]; then break; fi\n+done\n+\n+echo $blockhash"
      },
      {
        "sha": "58858159ad161b7449be8693ff95d9d8a286b0c1",
        "filename": "contrib/signet/secondary.sh",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/secondary.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/contrib/signet/secondary.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/secondary.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+#\n+# Backup Issuer which will begin to issue blocks if it sees no blocks within\n+# a specified period of time. It will continue to make blocks until a block\n+# is generated from an external source (i.e. the primary issuer is back online)\n+#\n+\n+export HELPSTRING=\"syntax: $0 <trigger time> <idle time> [--cmd=<bitcoin-cli path>] [<bitcoin-cli args>]\"\n+\n+if [ $# -lt 3 ]; then\n+    echo $HELPSTRING\n+    exit 1\n+fi\n+\n+function log()\n+{\n+    echo \"- $(date +%H:%M:%S): $*\"\n+}\n+\n+triggertime=$1\n+shift\n+\n+idletime=$1\n+shift\n+\n+bcli=\n+args=\n+\n+# shellcheck source=contrib/signet/args.sh\n+source $(dirname $0)/args.sh \"$@\"\n+\n+echo \"- checking node status\"\n+conns=$($bcli $args getconnectioncount) || { echo >&2 \"node error\"; exit 1; }\n+\n+if [ $conns -lt 1 ]; then\n+    echo \"warning: node is not connected to any other node\"\n+fi\n+\n+MKBLOCK=$(dirname $0)/mkblock.sh\n+\n+if [ ! -e \"$MKBLOCK\" ]; then\n+    >&2 echo \"error: cannot locate mkblock.sh (expected to find in $MKBLOCK\"\n+    exit 1\n+fi\n+\n+log \"node OK with $conns connection(s)\"\n+log \"hit ^C to stop\"\n+\n+# outer loop alternates between watching and mining\n+while true; do\n+    # inner watchdog loop\n+    blocks=$($bcli $args getblockcount)\n+    log \"last block #$blocks; waiting up to $triggertime seconds for a new block\"\n+    remtime=$triggertime\n+    while true; do\n+        waittime=1800\n+        if [ $waittime -gt $remtime ]; then waittime=$remtime; fi\n+        conns=$($bcli $args getconnectioncount)\n+        if [ $conns -eq 1 ]; then s=\"\"; else s=\"s\"; fi\n+        log \"waiting $waittime/$remtime seconds with $conns peer$s\"\n+        sleep $waittime\n+        new_blocks=$($bcli $args getblockcount)\n+        if [ $new_blocks -gt $blocks ]; then\n+            log \"detected block count increase $blocks -> $new_blocks; resetting timer\"\n+            remtime=$triggertime\n+            blocks=$new_blocks\n+        else\n+            (( remtime=remtime-waittime ))\n+            if [ $remtime -lt 1 ]; then break; fi\n+        fi\n+    done\n+    log \"*** no blocks in $triggertime seconds; initiating issuance ***\"\n+    # inner issuer loop\n+    while true; do\n+        log \"generating next block\"\n+        blockhash=$(\"$MKBLOCK\" \"$bcli\" \"$2\") || { echo \"node error; aborting\" ; exit 1; }\n+        blocks=$($bcli $args getblockcount)\n+        log \"mined block $new_blocks $blockhash to $($bcli $args getconnectioncount) peer(s); idling for $idletime seconds\"\n+        sleep $idletime\n+        new_blocks=$($bcli $args getblockcount)\n+        if [ $blocks -lt $new_blocks ]; then\n+            log \"primary issuer appears to be back online ($blocks -> $new_blocks blocks during downtime); going back to watching\"\n+            break\n+        fi\n+    done\n+done"
      },
      {
        "sha": "29884318870daafdca2e5efe8b45472aabbcd9c9",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -30,7 +30,7 @@ enabled=(\n     E304 # blank lines found after function decorator\n     E306 # expected 1 blank line before a nested definition\n     E401 # multiple imports on one line\n-    E402 # module level import not at top of file\n+    # E402 # module level import not at top of file (interferes with contrib/signet/addtxtoblock.py)\n     E502 # the backslash is redundant between brackets\n     E701 # multiple statements on one line (colon)\n     E702 # multiple statements on one line (semicolon)"
      },
      {
        "sha": "ecd70dbe397b945b89fbb870defad405d0a36652",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c839e1d91348408b40b3f8a53e0ef1a7f6da72/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "patch": "@@ -19,6 +19,7 @@ fi\n # Disabled warnings:\n disabled=(\n     SC2046 # Quote this to prevent word splitting.\n+    SC2016 # Expressions don't expand in single quotes\n     SC2086 # Double quote to prevent globbing and word splitting.\n     SC2162 # read without -r will mangle backslashes.\n )"
      }
    ]
  },
  {
    "sha": "5dc6414b3d6029fc413710d0600de4b51d105eff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGM2NDE0YjNkNjAyOWZjNDEzNzEwZDA2MDBkZTRiNTFkMTA1ZWZm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-06-28T03:29:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:49:02Z"
      },
      "message": "signet: hard-coded parameters for Signet Global Network IV (2020-03-05)\n\nRunning with -signet without any other parameters will use this network's parameters.",
      "tree": {
        "sha": "a834cde16fc6014df79cd0b85325c963e36f20d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a834cde16fc6014df79cd0b85325c963e36f20d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dc6414b3d6029fc413710d0600de4b51d105eff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1j4ACgkQV692LbM1\nMyKBIA/+NwV3r3djg1+WJoiRSXRbQ6Wj5IBd0CIX8obYryaCYiEiCbjKQ5bOpw/l\nJ9ytV/SXeFj5zL3s3Nry2y4gDoKVEsXRBJlhvOxt1G9n5WnurmR18lHs9MxNNA0j\nBtUrVVxMWPLO8xOMrUj+slAZ64mSKsGVyhyphk1fwoSy9P7OhgMl+pl8YNZl4qou\np8XqFEjKa4als1VzYi4dGid/lq9EDrLL0UwJsqHna24qf3GRmPz36J586VlsHYGX\n7UZyOoQ6FdmuiWJDvUbC/51VwVgIG25/9DPZb/FuC5X1wu9RgMu1KgncANeztOaA\n0/IZcyd2g1UWys0GYIkoGbRooEOBQuRYkYip8H8dpbdJqsRNS3fInhr39F/9ywzk\nfyql5uwz1DlquKdYW0nYJZeV58X9WHhaA5SsMceOaSaoACUTWgYHxS5S0v81ovF9\n3ymlh+Yk/kC5eDOU8hRx7mvwXbbzONVk/vBVaFzuwQwjX5GhyJqioF4rFdlRA4M5\n7EIwgJ9Fd4riGrsMBM0aBU4dhnjAd/kI3vExI1CJcmUquXT5Z8eAYYzRVhi/gVGR\nXOgi/+JlovG4avzdH8XCpTJw9rONcInpQzM3LRrzBVJ9PqmGXkst11v7Vm+W6mmm\n6CJuO2YCMeXT1rGnqp7yiUGRI+nnORQgK8SupBQizP+9qGdvwDE=\n=G0KZ\n-----END PGP SIGNATURE-----",
        "payload": "tree a834cde16fc6014df79cd0b85325c963e36f20d1\nparent 50c839e1d91348408b40b3f8a53e0ef1a7f6da72\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1561692550 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583470142 +0900\n\nsignet: hard-coded parameters for Signet Global Network IV (2020-03-05)\n\nRunning with -signet without any other parameters will use this network's parameters.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc6414b3d6029fc413710d0600de4b51d105eff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc6414b3d6029fc413710d0600de4b51d105eff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc6414b3d6029fc413710d0600de4b51d105eff/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c839e1d91348408b40b3f8a53e0ef1a7f6da72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50c839e1d91348408b40b3f8a53e0ef1a7f6da72"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 15,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e3c419e3294eca7bbf089b9cb01ec818e4cb7394",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc6414b3d6029fc413710d0600de4b51d105eff/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc6414b3d6029fc413710d0600de4b51d105eff/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5dc6414b3d6029fc413710d0600de4b51d105eff",
        "patch": "@@ -264,17 +264,22 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!args.IsArgSet(\"-signet_blockscript\")) {\n-            throw std::runtime_error(strprintf(\"%s: -signet_blockscript is mandatory for signet networks\", __func__));\n-        }\n-        if (args.GetArgs(\"-signet_blockscript\").size() != 1) {\n-            throw std::runtime_error(strprintf(\"%s: -signet_blockscript cannot be multiple values.\", __func__));\n-        }\n-        bin = ParseHex(args.GetArgs(\"-signet_blockscript\")[0]);\n-        if (args.IsArgSet(\"-signet_seednode\")) {\n-            vSeeds = gArgs.GetArgs(\"-signet_seednode\");\n-        }\n+            LogPrintf(\"Using default signet network\\n\");\n+            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be43051ae\");\n+            vSeeds.push_back(\"178.128.221.177\");\n+            vSeeds.push_back(\"2a01:7c8:d005:390::5\");\n+            vSeeds.push_back(\"ntv3mtqw5wt63red.onion:38333\");\n+        } else {\n+            if (args.GetArgs(\"-signet_blockscript\").size() != 1) {\n+                throw std::runtime_error(strprintf(\"%s: -signet_blockscript cannot be multiple values.\", __func__));\n+            }\n+            bin = ParseHex(args.GetArgs(\"-signet_blockscript\")[0]);\n+            if (args.IsArgSet(\"-signet_seednode\")) {\n+                vSeeds = gArgs.GetArgs(\"-signet_seednode\");\n+            }\n \n-        LogPrintf(\"SigNet with block script %s\\n\", gArgs.GetArgs(\"-signet_blockscript\")[0]);\n+            LogPrintf(\"SigNet with block script %s\\n\", gArgs.GetArgs(\"-signet_blockscript\")[0]);\n+        }\n \n         strNetworkID = CBaseChainParams::SIGNET;\n         g_signet_blockscript = CScript(bin.begin(), bin.end());"
      }
    ]
  },
  {
    "sha": "89e402443ace8c52e3785e74410a2c05a6785af7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWU0MDI0NDNhY2U4YzUyZTM3ODVlNzQ0MTBhMmMwNWE2Nzg1YWY3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-09-10T10:48:39Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-06T04:49:02Z"
      },
      "message": "util_tests.cpp update hash for hard coded chain merge",
      "tree": {
        "sha": "104b9d6700327c8aea195f6f537330cf73d8ae56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/104b9d6700327c8aea195f6f537330cf73d8ae56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89e402443ace8c52e3785e74410a2c05a6785af7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5h1j4ACgkQV692LbM1\nMyKGGg/+J5fb7zSRqfXAnwvULRdSjsdUJBeOEqAKE7UNpOrMCHd0nVyHYA3xuegK\noEj+mBrBT1fna2p2JCj00clJAQdGpdILTIzo5eyM9FpJEUxBK4phsDluDT9eaFXk\nTlFn7cC0Yw829mTLS8fYKuQrCJ7DXCseyAkCCKI6UoNdjzTLOr4D7NJMGMoS62+h\nUH4aqn7Y58RXHQaW+w3LAhRN/XEk7I/UDf1cQ1p1feV3xfDMcXxD+aTsNmIjwZ8M\nn/BCGET7rSNhSV/6RxYx8Mu6P9Kr8fbqDhOcosv1ukHIXD3Ll0T2z5FiOfQcKG+n\n7M6+TBDE8VqDHU8KLSsPuTrWOvmsWQaSb+nBhpA2pVc+t1XC2zB+jh4JskIN8ba9\nR27JBV/D/pQVIEiaAgvkEqLdiy/XQkFp8tC2XiqcnPEi1MK8tGOhdKtCT9opX2KT\ns5vtWxUXMHq1zxScttYdYRDd54JWZkAyidf5KzPubiNm82r8QWiZNIMimGeTpd90\nwRMgerA8SCNdTXgIbe6wh3PPJNyYYN3uVc+EjbDuuObUqeWWu/7StITG6BeR6/2Q\nvR2+YbJl+n1L+Okch28g/QeiLQg3df7LwoIQxyDxYSMA1SW0JLwjb62kMhRADhfO\nmPjuib72Go6+pRbYPWs1fb5tdrDYeCdGbrgFXS+rQwJkt+G6wzE=\n=eAme\n-----END PGP SIGNATURE-----",
        "payload": "tree 104b9d6700327c8aea195f6f537330cf73d8ae56\nparent 5dc6414b3d6029fc413710d0600de4b51d105eff\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1568112519 +0300\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583470142 +0900\n\nutil_tests.cpp update hash for hard coded chain merge\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e402443ace8c52e3785e74410a2c05a6785af7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89e402443ace8c52e3785e74410a2c05a6785af7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89e402443ace8c52e3785e74410a2c05a6785af7/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc6414b3d6029fc413710d0600de4b51d105eff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc6414b3d6029fc413710d0600de4b51d105eff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc6414b3d6029fc413710d0600de4b51d105eff"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c26f233b5f939ca67943b41d129e6c4191d95c6c",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89e402443ace8c52e3785e74410a2c05a6785af7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89e402443ace8c52e3785e74410a2c05a6785af7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=89e402443ace8c52e3785e74410a2c05a6785af7",
        "patch": "@@ -1125,7 +1125,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"f0b3a3c29869edc765d579c928f7f1690a71fbb673b49ccf39cbc4de18156a0d\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"4645298a210e40fd8dfacc2b470be96a186f0ff2ebab328953cfe1ce866e55cf\");\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      }
    ]
  }
]