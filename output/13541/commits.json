[
  {
    "sha": "e5efacb941f78645462da1237ed04c75082d3aed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWVmYWNiOTQxZjc4NjQ1NDYyZGExMjM3ZWQwNGM3NTA4MmQzYWVk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-06-27T22:50:45Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-03-06T00:47:40Z"
      },
      "message": "test: Refactor vout fetches in rpc_rawtransaction",
      "tree": {
        "sha": "fdb89045963eabb9552fddd3f7d9cb5f7e19294c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb89045963eabb9552fddd3f7d9cb5f7e19294c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5efacb941f78645462da1237ed04c75082d3aed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlx/GKwACgkQV692LbM1\nMyLLbg//bGr07Zj2uoyj4Ab/UZ82hKABEWsKEIZo13fzymMHImomZ8RvY8ZklhKx\nWiTwsCZrxHMYfG7H6+evDZ1HJpbyelvNWCq12dZVOnsSJrx4cuSjcKWS35D8ixhD\ngULu4vlh59vU4Qo9ugOXie6Zr9lsyab3ODOmP83UjcplDE0FGEdPMAl2n26jplje\nxCRhGFmxPvLpxXViWGP7sskL805yDAWqKHoLRimXqKWRUb8d0NXFgy4dEAQenInk\n/8RdiHkEd6ive8sZ5nwYavl9gmJwGNOk0GffB7Nhb94xeJPtiadfAHRO8zzU1oc0\nh9UFu1fh2w7tp5eN1FDPiZcAzt26NUdWKZ/QhM2PBc9S7LHj1cuRZ3tNXysjGd/q\nSddMIyxZC+e7/FIgzSDeJ+1E7yihCJOL/buM3ZVAc4S1atKQBBEvFVpChjIhRZES\ncGRBvzIyvCV1zmJAGCG6nTBTjUZIbq1Kl8uJFmjzJH64f0v9R3Mv0R4Es48YOG05\nlmye+cuRgJjy6SpApbhz2NNasiOwcaIQ1OM7zc+jwiHrVXhIHsX5qjhrtvhZNz/y\np7+AhrxoH6okttmHlr44vr1h0pwotnFDngc4uy1br2q4x1DPHIF0SoaLEZpWY1tJ\n9pTVRdDwkG8T+YAyj5Od/BuThCgEmmaZdIUFOf5XcXpfxyAsc7o=\n=c1Ag\n-----END PGP SIGNATURE-----",
        "payload": "tree fdb89045963eabb9552fddd3f7d9cb5f7e19294c\nparent 4952a953585e99477a89989b009749e40c173013\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1530139845 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1551833260 +0900\n\ntest: Refactor vout fetches in rpc_rawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5efacb941f78645462da1237ed04c75082d3aed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5efacb941f78645462da1237ed04c75082d3aed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5efacb941f78645462da1237ed04c75082d3aed/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4952a953585e99477a89989b009749e40c173013",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4952a953585e99477a89989b009749e40c173013",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4952a953585e99477a89989b009749e40c173013"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "df7c894827ded530b6edc2bef722ed4a83805709",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5efacb941f78645462da1237ed04c75082d3aed/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5efacb941f78645462da1237ed04c75082d3aed/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=e5efacb941f78645462da1237ed04c75082d3aed",
        "patch": "@@ -285,11 +285,7 @@ def run_test(self):\n \n         txDetails = self.nodes[0].gettransaction(txId, True)\n         rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-        vout = False\n-        for outpoint in rawTx['vout']:\n-            if outpoint['value'] == Decimal('2.20000000'):\n-                vout = outpoint\n-                break\n+        vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n \n         bal = self.nodes[0].getbalance()\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n@@ -330,11 +326,7 @@ def run_test(self):\n \n         txDetails = self.nodes[0].gettransaction(txId, True)\n         rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-        vout = False\n-        for outpoint in rawTx2['vout']:\n-            if outpoint['value'] == Decimal('2.20000000'):\n-                vout = outpoint\n-                break\n+        vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n \n         bal = self.nodes[0].getbalance()\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]"
      }
    ]
  },
  {
    "sha": "6c0a6f73e3672bbec31b63d5046d591599aa21a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzBhNmY3M2UzNjcyYmJlYzMxYjYzZDUwNDZkNTkxNTk5YWEyMWE4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-06-27T08:21:07Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-03-13T23:48:46Z"
      },
      "message": "wallet/rpc: add maxfeerate parameter to sendrawtransaction",
      "tree": {
        "sha": "cfe87fa9f25908a60c4b033b867c240c8ffc0c03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfe87fa9f25908a60c4b033b867c240c8ffc0c03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c0a6f73e3672bbec31b63d5046d591599aa21a8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlyJlt4ACgkQV692LbM1\nMyLzKQ//cp7fn5qBjlGJf9GB7iuqKPMh7qtMmZl7/0pNwf9qEYhxas1XN8Wm80UQ\nLUQfcuE+3yJqU56fKggsvOwTFtki+aIcygec2MjZX046e2zn9L/Sfe3ySUlB42IX\nMXLXUtTPARfZ/eJUZcKV7QpqOE1WqYC8pDkx5WnHu4LjAi0F/M35yEwyZCXgDsmj\nP0NwKBus86IvYh3uT8604+sx0mhyPzlx6H9GJdFLUxZMcwR9BYf7cKw/JSJMcW82\nIIGTRwsabXji+xZnvAJo/i/x3mdzDsAfkXsigkkIHUMmcr17Se64CpbEKWq2Q3zl\nSGwfLEVHFqCWYLhZMa67xVRnbL59b2ofsm+XQQca1oL2SyjDxQEuhoq7WuFzIqLy\nzimPixR4XM+3E16X6H71G2tNWKwcs9z+MbqfdkUQVzqNFXzJPx0S1JveKEeau2LS\nJinBqCzzYHZxGHPJzL3oGEhSvoPzwPGFcgtdaiP1kK41lNKsCgGNJBsfwRm3ue3N\nce0SJ82biOLlZzqw4gQ0n67ftLcOgAYgnzLdtJIH6UVQC2zu9hWW7Q8wvpK3hIA7\njuLeFSD/qQplEt/KvXanSTvh7K7NJyLSclondYPeSM1/Ua99YmBR3blT8dSxDLtf\nfWgkfWhhlo1RBWf4HespWxbDxi/+ecpohc982oJDlA/f3MJx+8o=\n=JbMj\n-----END PGP SIGNATURE-----",
        "payload": "tree cfe87fa9f25908a60c4b033b867c240c8ffc0c03\nparent e5efacb941f78645462da1237ed04c75082d3aed\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1530087667 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1552520926 +0900\n\nwallet/rpc: add maxfeerate parameter to sendrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0a6f73e3672bbec31b63d5046d591599aa21a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0a6f73e3672bbec31b63d5046d591599aa21a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0a6f73e3672bbec31b63d5046d591599aa21a8/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5efacb941f78645462da1237ed04c75082d3aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5efacb941f78645462da1237ed04c75082d3aed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5efacb941f78645462da1237ed04c75082d3aed"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 126,
      "deletions": 70
    },
    "files": [
      {
        "sha": "c19160d32525fcd956adba032f03a0812a6b4647",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -92,6 +92,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n     { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n+    { \"sendrawtransaction\", 1, \"maxfeerate\" },\n     { \"testmempoolaccept\", 0, \"rawtxs\" },\n     { \"testmempoolaccept\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },"
      },
      {
        "sha": "fedc30dc359f727d7f6527f264c09c80612caa9c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -28,6 +28,7 @@\n #include <script/standard.h>\n #include <uint256.h>\n #include <util/bip32.h>\n+#include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -1039,7 +1040,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(maxTxFee), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n@@ -1056,20 +1057,35 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n+    RPCTypeCheck(request.params, {\n+        UniValue::VSTR,\n+        UniValueType(), // NUM or BOOL, checked later\n+    });\n \n     // parse hex string from parameter\n     CMutableTransaction mtx;\n     if (!DecodeHexTx(mtx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n-    bool allowhighfees = false;\n-    if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n-    const CAmount highfee{allowhighfees ? 0 : ::maxTxFee};\n+    CAmount max_raw_tx_fee = maxTxFee;\n+    // TODO: temporary migration code for old clients. Remove in v0.20\n+    if (request.params[1].isBool()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n+    } else if (request.params[1].isNum()) {\n+        size_t weight = GetTransactionWeight(*tx);\n+        CFeeRate fr(AmountFromValue(request.params[1]));\n+        // the +3/4 part rounds the value up, and is the same formula used when\n+        // calculating the fee for a transaction\n+        // (see GetVirtualTransactionSize)\n+        max_raw_tx_fee = fr.GetFee((weight+3)/4);\n+    } else if (!request.params[1].isNull()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"second argument (maxfeerate) must be numeric\");\n+    }\n+\n     uint256 txid;\n     std::string err_string;\n-    const TransactionError err = BroadcastTransaction(tx, txid, err_string, highfee);\n+    const TransactionError err = BroadcastTransaction(tx, txid, err_string, max_raw_tx_fee);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n@@ -2048,7 +2064,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n     { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees|maxfeerate\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n     { \"hidden\",             \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },"
      },
      {
        "sha": "e407c082b4bcb274e2ebf32d498bcb1004e20084",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -3130,6 +3130,26 @@ static int GetWitnessCommitmentIndex(const CBlock& block)\n     return commitpos;\n }\n \n+// Compute at which vout of the block's coinbase transaction the signet\n+// signature occurs, or -1 if not found.\n+static int GetSignetSignatureIndex(const CBlock& block)\n+{\n+    if (!block.vtx.empty()) {\n+        for (size_t o = 0; o < block.vtx[0]->vout.size(); o++) {\n+            if (block.vtx[0]->vout[o].scriptPubKey.size() >= 68     // at minimum 64 byte signature plus script/header data\n+             && block.vtx[0]->vout[o].scriptPubKey[0] == OP_RETURN  // unspendable\n+             && block.vtx[0]->vout[o].scriptPubKey[1] == block.vtx[0]->vout[o].scriptPubKey.size() - 1 // push the rest\n+             && block.vtx[0]->vout[o].scriptPubKey[2] == 0xec       // 's' ^ 0x9f\n+             && block.vtx[0]->vout[o].scriptPubKey[3] == 0xc7       // 'i' ^ 0xae\n+             && block.vtx[0]->vout[o].scriptPubKey[4] == 0xda       // 'g' ^ 0xbd\n+             && block.vtx[0]->vout[o].scriptPubKey[5] == 0xa2) {    // 'n' ^ 0xcc\n+                return (int)o;\n+            }\n+        }\n+    }\n+    return -1;\n+}\n+\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);"
      },
      {
        "sha": "28c15c269b59a956756c93221ebd3c19620d86fa",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -65,7 +65,7 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n-    txid = from_node.sendrawtransaction(ToHex(tx), True)\n+    txid = from_node.sendrawtransaction(hexstring=ToHex(tx), maxfeerate=0)\n     unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n     unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n@@ -95,7 +95,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)\n-    txid = from_node.sendrawtransaction(completetx, True)\n+    txid = from_node.sendrawtransaction(hexstring=completetx, maxfeerate=0)\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n "
      },
      {
        "sha": "a56c983ccc755bdce48f02b5d425c58d318fb4e3",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -64,17 +64,17 @@ def run_test(self):\n \n         self.log.info(\"Test 1: NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n         test1txs = [create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, amount=49)]\n-        txid1 = self.nodes[0].sendrawtransaction(test1txs[0].serialize_with_witness().hex(), True)\n+        txid1 = self.nodes[0].sendrawtransaction(test1txs[0].serialize_with_witness().hex(), 0)\n         test1txs.append(create_transaction(self.nodes[0], txid1, self.ms_address, amount=48))\n-        txid2 = self.nodes[0].sendrawtransaction(test1txs[1].serialize_with_witness().hex(), True)\n+        txid2 = self.nodes[0].sendrawtransaction(test1txs[1].serialize_with_witness().hex(), 0)\n         test1txs.append(create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, amount=49))\n-        txid3 = self.nodes[0].sendrawtransaction(test1txs[2].serialize_with_witness().hex(), True)\n+        txid3 = self.nodes[0].sendrawtransaction(test1txs[2].serialize_with_witness().hex(), 0)\n         self.block_submit(self.nodes[0], test1txs, False, True)\n \n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = create_transaction(self.nodes[0], txid2, self.ms_address, amount=47)\n         trueDummy(test2tx)\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test2tx.serialize_with_witness().hex(), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test2tx.serialize_with_witness().hex(), 0)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -83,19 +83,19 @@ def run_test(self):\n         test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, amount=46)\n         test6txs = [CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test4tx.serialize_with_witness().hex(), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test4tx.serialize_with_witness().hex(), 0)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = create_transaction(self.nodes[0], txid3, self.wit_address, amount=48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test5tx.serialize_with_witness().hex(), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test5tx.serialize_with_witness().hex(), 0)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")\n         for i in test6txs:\n-            self.nodes[0].sendrawtransaction(i.serialize_with_witness().hex(), True)\n+            self.nodes[0].sendrawtransaction(i.serialize_with_witness().hex(), 0)\n         self.block_submit(self.nodes[0], test6txs, True, True)\n \n     def block_submit(self, node, txs, witness=False, accept=False):"
      },
      {
        "sha": "ccba547a1c8bf03e4d61921809de71ae02401ee9",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -46,7 +46,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n-    txid = node.sendrawtransaction(signed_tx['hex'], True)\n+    txid = node.sendrawtransaction(signed_tx['hex'], 0)\n \n     # If requested, ensure txouts are confirmed.\n     if confirmed:\n@@ -136,7 +136,7 @@ def test_simple_doublespend(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         self.sync_all()\n \n@@ -147,19 +147,19 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, 0)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9 * COIN), CScript([b'b' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, 0)\n         # Works when enabled\n-        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n \n@@ -188,7 +188,7 @@ def test_doublespend_chain(self):\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n             tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n             tx_hex = txToHex(tx)\n-            txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n+            txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n             chain_txids.append(txid)\n             prevout = COutPoint(int(txid, 16), 0)\n \n@@ -200,14 +200,14 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(1 * COIN, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n-        self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+        self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n         for doublespent_txid in chain_txids:\n@@ -237,7 +237,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             tx_hex = txToHex(tx)\n \n             assert len(tx.serialize()) < 100000\n-            txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n+            txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n             yield tx\n             _total_txs[0] += 1\n \n@@ -261,14 +261,14 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         dbl_tx.vout = [CTxOut(initial_nValue - fee * n - 1 * COIN, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n-        self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n+        self.nodes[0].sendrawtransaction(dbl_tx_hex, 0)\n \n         mempool = self.nodes[0].getrawmempool()\n \n@@ -289,7 +289,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2 * fee * n, CScript([1] * 35))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, 0)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -303,7 +303,7 @@ def test_replacement_feeperkb(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n-        self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the fee per KB is much lower, so the replacement is\n         # rejected.\n@@ -313,7 +313,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -324,7 +324,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n         tx1a.vout = [CTxOut(int(1.1 * COIN), CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         tx1a_txid = int(tx1a_txid, 16)\n \n@@ -336,14 +336,14 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n         tx1b.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n-        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n         tx1b_txid = int(tx1b_txid, 16)\n \n         tx2 = CTransaction()\n@@ -353,7 +353,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -364,15 +364,15 @@ def test_new_unconfirmed_inputs(self):\n         tx1.vin = [CTxIn(confirmed_utxo)]\n         tx1.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1_hex = txToHex(tx1)\n-        self.nodes[0].sendrawtransaction(tx1_hex, True)\n+        self.nodes[0].sendrawtransaction(tx1_hex, 0)\n \n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(confirmed_utxo), CTxIn(unconfirmed_utxo)]\n         tx2.vout = tx1.vout\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, 0)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -394,7 +394,7 @@ def test_too_many_replacements(self):\n         splitting_tx.vout = outputs\n         splitting_tx_hex = txToHex(splitting_tx)\n \n-        txid = self.nodes[0].sendrawtransaction(splitting_tx_hex, True)\n+        txid = self.nodes[0].sendrawtransaction(splitting_tx_hex, 0)\n         txid = int(txid, 16)\n \n         # Now spend each of those outputs individually\n@@ -403,7 +403,7 @@ def test_too_many_replacements(self):\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n             tx_i.vout = [CTxOut(split_value - fee, CScript([b'a' * 35]))]\n             tx_i_hex = txToHex(tx_i)\n-            self.nodes[0].sendrawtransaction(tx_i_hex, True)\n+            self.nodes[0].sendrawtransaction(tx_i_hex, 0)\n \n         # Now create doublespend of the whole lot; should fail.\n         # Need a big enough fee to cover all spending transactions and have\n@@ -418,14 +418,14 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, 0)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n         double_tx.vin = inputs[0:-1]\n         double_tx.vout = [CTxOut(double_spend_value, CScript([b'a']))]\n         double_tx_hex = txToHex(double_tx)\n-        self.nodes[0].sendrawtransaction(double_tx_hex, True)\n+        self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n     def test_opt_in(self):\n         \"\"\"Replacing should only work if orig tx opted in\"\"\"\n@@ -436,7 +436,7 @@ def test_opt_in(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0xffffffff)]\n         tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # This transaction isn't shown as replaceable\n         assert_equal(self.nodes[0].getmempoolentry(tx1a_txid)['bip125-replaceable'], False)\n@@ -448,7 +448,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -457,7 +457,7 @@ def test_opt_in(self):\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0xfffffffe)]\n         tx2a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx2a_hex = txToHex(tx2a)\n-        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n@@ -466,7 +466,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -481,7 +481,7 @@ def test_opt_in(self):\n         tx3a.vout = [CTxOut(int(0.9*COIN), CScript([b'c'])), CTxOut(int(0.9*COIN), CScript([b'd']))]\n         tx3a_hex = txToHex(tx3a)\n \n-        tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, True)\n+        tx3a_txid = self.nodes[0].sendrawtransaction(tx3a_hex, 0)\n \n         # This transaction is shown as replaceable\n         assert_equal(self.nodes[0].getmempoolentry(tx3a_txid)['bip125-replaceable'], True)\n@@ -496,10 +496,10 @@ def test_opt_in(self):\n         tx3c.vout = [CTxOut(int(0.5 * COIN), CScript([b'f' * 35]))]\n         tx3c_hex = txToHex(tx3c)\n \n-        self.nodes[0].sendrawtransaction(tx3b_hex, True)\n+        self.nodes[0].sendrawtransaction(tx3b_hex, 0)\n         # If tx3b was accepted, tx3c won't look like a replacement,\n         # but make sure it is accepted anyway\n-        self.nodes[0].sendrawtransaction(tx3c_hex, True)\n+        self.nodes[0].sendrawtransaction(tx3c_hex, 0)\n \n     def test_prioritised_transactions(self):\n         # Ensure that fee deltas used via prioritisetransaction are\n@@ -512,7 +512,7 @@ def test_prioritised_transactions(self):\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n-        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, 0)\n \n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n@@ -521,13 +521,13 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n \n         # Now tx1b should be able to replace tx1a\n-        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, 0)\n \n         assert tx1b_txid in self.nodes[0].getrawmempool()\n \n@@ -538,7 +538,7 @@ def test_prioritised_transactions(self):\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n         tx2a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx2a_hex = txToHex(tx2a)\n-        self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+        self.nodes[0].sendrawtransaction(tx2a_hex, 0)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n@@ -548,13 +548,13 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, 0)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))\n \n         # tx2b should now be accepted\n-        tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+        tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, 0)\n \n         assert tx2b_txid in self.nodes[0].getrawmempool()\n "
      },
      {
        "sha": "226a7dc633071768dce6a5649f9b21177b1c6075",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -536,7 +536,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n-        txid = self.nodes[0].sendrawtransaction(signresults, True)\n+        txid = self.nodes[0].sendrawtransaction(signresults, 0)\n         txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n         watchcount = 0\n@@ -588,7 +588,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n-        self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].sendrawtransaction(signresults, 0)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n "
      },
      {
        "sha": "2bb5d8ab7d2d5b3e2a9c73d57189616174a90cfb",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n             inputs=[{'txid': coin['txid'], 'vout': coin['vout']}],\n             outputs=[{node.getnewaddress(): 0.3}, {node.getnewaddress(): 49}],\n         ))['hex']\n-        txid_in_block = node.sendrawtransaction(hexstring=raw_tx_in_block, allowhighfees=True)\n+        txid_in_block = node.sendrawtransaction(hexstring=raw_tx_in_block, maxfeerate=0)\n         node.generate(1)\n         self.mempool_size = 0\n         self.check_mempool_result(\n@@ -101,9 +101,9 @@ def run_test(self):\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n             rawtxs=[tx.serialize().hex()],\n-            allowhighfees=True,\n+            maxfeerate=0,\n         )\n-        node.sendrawtransaction(hexstring=raw_tx_final, allowhighfees=True)\n+        node.sendrawtransaction(hexstring=raw_tx_final, maxfeerate=0)\n         self.mempool_size += 1\n \n         self.log.info('A transaction in the mempool')\n@@ -128,15 +128,15 @@ def run_test(self):\n \n         self.log.info('A transaction that conflicts with an unconfirmed tx')\n         # Send the transaction that replaces the mempool transaction and opts out of replaceability\n-        node.sendrawtransaction(hexstring=tx.serialize().hex(), allowhighfees=True)\n+        node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n         # take original raw_tx_0\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n         # skip re-signing the tx\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '18: txn-mempool-conflict'}],\n             rawtxs=[tx.serialize().hex()],\n-            allowhighfees=True,\n+            maxfeerate=0,\n         )\n \n         self.log.info('A transaction with missing inputs, that never existed')\n@@ -152,7 +152,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n         raw_tx_1 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n-        txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, allowhighfees=True)\n+        txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, maxfeerate=0)\n         # Now spend both to \"clearly hide\" the outputs, ie. remove the coins from the utxo set by spending them\n         raw_tx_spend_both = node.signrawtransactionwithwallet(node.createrawtransaction(\n             inputs=[\n@@ -161,7 +161,7 @@ def run_test(self):\n             ],\n             outputs=[{node.getnewaddress(): 0.1}]\n         ))['hex']\n-        txid_spend_both = node.sendrawtransaction(hexstring=raw_tx_spend_both, allowhighfees=True)\n+        txid_spend_both = node.sendrawtransaction(hexstring=raw_tx_spend_both, maxfeerate=0)\n         node.generate(1)\n         self.mempool_size = 0\n         # Now see if we can add the coins back to the utxo set by sending the exact txs again\n@@ -304,7 +304,7 @@ def run_test(self):\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-BIP68-final'}],\n             rawtxs=[tx.serialize().hex()],\n-            allowhighfees=True,\n+            maxfeerate=0,\n         )\n \n "
      },
      {
        "sha": "17dbf59a8c6bf4cca04942a7b8753823fb53a2a9",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -90,7 +90,7 @@ def do_multisig(self):\n         rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n \n         self.moved += outval\n-        tx = node0.sendrawtransaction(rawtx3[\"hex\"], True)\n+        tx = node0.sendrawtransaction(rawtx3[\"hex\"], 0)\n         blk = node0.generate(1)[0]\n         assert tx in node0.getblock(blk)[\"tx\"]\n "
      },
      {
        "sha": "a5a5633359e7d59190820e53bd538c573e484ea3",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -426,5 +426,24 @@ def run_test(self):\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x7fffffff)\n \n+        self.log.info('sendrawtransaction with maxfeerate')\n+\n+        txId = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        rawTx = self.nodes[0].getrawtransaction(txId, True)\n+        vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('1.00000000'))\n+\n+        self.sync_all()\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'] }]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(\"0.99999000\") } # 1000 sat fee\n+        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx)\n+        assert_equal(rawTxSigned['complete'], True)\n+        # 1000 sat fee, ~200 b transaction, fee rate should land around 5 sat/b = 0.00005000 BTC/kB\n+        # Thus, below call should fail\n+        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        # And below call should succeed\n+        self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate=0.00007000)\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "f771a37b99f068381a666e22951522788114514f",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -467,7 +467,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n     signresult = from_node.signrawtransactionwithwallet(rawtx)\n-    txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n+    txid = from_node.sendrawtransaction(signresult[\"hex\"], 0)\n \n     return (txid, signresult[\"hex\"], fee)\n \n@@ -539,7 +539,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n         signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n-        txid = node.sendrawtransaction(signresult[\"hex\"], True)\n+        txid = node.sendrawtransaction(signresult[\"hex\"], 0)\n         txids.append(txid)\n     return txids\n "
      },
      {
        "sha": "b7be605f6278b27c88c5555423f4fb1ec9ba57b1",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -168,8 +168,8 @@ def run_test(self):\n             txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n-        self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n-        self.nodes[1].sendrawtransaction(txns_to_send[1][\"hex\"], True)\n+        self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], 0)\n+        self.nodes[1].sendrawtransaction(txns_to_send[1][\"hex\"], 0)\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)"
      },
      {
        "sha": "83f7ee6a9b2b89c03696b18dcc64ea9197c1017c",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0a6f73e3672bbec31b63d5046d591599aa21a8/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "patch": "@@ -185,7 +185,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN)  # bump the fee\n         tx3_b = tx3_b.serialize().hex()\n         tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n-        txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n+        txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, 0)\n         assert is_opt_in(self.nodes[0], txid_3b)\n \n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})"
      }
    ]
  },
  {
    "sha": "7abd2e697c0f8e93245e09ac853bae05d0b48bee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWJkMmU2OTdjMGY4ZTkzMjQ1ZTA5YWM4NTNiYWUwNWQwYjQ4YmVl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-02-14T08:07:29Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-03-13T23:48:46Z"
      },
      "message": "wallet/rpc: add maxfeerate parameter to testmempoolaccept",
      "tree": {
        "sha": "00e55556fbaa1626a0c303e100602828ea1b8c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00e55556fbaa1626a0c303e100602828ea1b8c16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7abd2e697c0f8e93245e09ac853bae05d0b48bee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlyJlt8ACgkQV692LbM1\nMyJapA//WoSHBBTry3GgajvQIiADg53654J1kwtGRyNw4kf6HdhrX4bLvpR4ITm1\nDXoPC2U1gWqd9zhs2fWVo4Z7S5R3LO5C2bjIuOij0Df8kfatRvnla/3vf2x5yOXk\n6wLZwELhO1vM4cYomp99EvyQoIqQudup5e7iTPTdCGhkEkqyvnf+1w2gGExc5X/j\nraYDWRv2dZI2rUuureAx7dt4waO9EYAmwF+oekYDEIDP2GPEBki1iiZjoXWWfah2\n9RX5Ah6F1wLbxhf8CgPfyb/BbTFP+gAnwoJRKgjDRRnkck9lK8NLuGJrmWHMRfUB\nzOB2wb9OER53cmc3nwaDyDWgMFkM78CLg247AjmhYayy6HI7C4VPjzh7tuz9iA4R\nRC66pUajF9R3tkE8WKvVAaERspv0kuly3hiyWjQBgl9jMV9dgAB6o5hIKQbgGSII\nMUDbZbj6jjqOpa/ao5wirQE0k7iPFihVaRBo7oEmj7E6kvhlNyf907yXIeKWGJoG\nDlaVKZqKeUQzpM5ILBhDk/B7Mm5/UgRCOVslOfoitj2SknDVtnP+1pWJgVK97cKX\nJsrnWqIPLasCHn4m5IbeLJ3KJPIDj1G9Ws8ica5WgSGTGfuNs5RfGjALbjWe81bE\nciuhQoZUMhH7DpP3puSUgnjnFaak3iJYLr04QrvvW09gg/z35TE=\n=T3LD\n-----END PGP SIGNATURE-----",
        "payload": "tree 00e55556fbaa1626a0c303e100602828ea1b8c16\nparent 6c0a6f73e3672bbec31b63d5046d591599aa21a8\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1550131649 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1552520926 +0900\n\nwallet/rpc: add maxfeerate parameter to testmempoolaccept\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abd2e697c0f8e93245e09ac853bae05d0b48bee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7abd2e697c0f8e93245e09ac853bae05d0b48bee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abd2e697c0f8e93245e09ac853bae05d0b48bee/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0a6f73e3672bbec31b63d5046d591599aa21a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0a6f73e3672bbec31b63d5046d591599aa21a8"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 32,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4144a17bc344e55053dca95b2d10256b53334f32",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abd2e697c0f8e93245e09ac853bae05d0b48bee/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abd2e697c0f8e93245e09ac853bae05d0b48bee/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=7abd2e697c0f8e93245e09ac853bae05d0b48bee",
        "patch": "@@ -95,6 +95,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendrawtransaction\", 1, \"maxfeerate\" },\n     { \"testmempoolaccept\", 0, \"rawtxs\" },\n     { \"testmempoolaccept\", 1, \"allowhighfees\" },\n+    { \"testmempoolaccept\", 1, \"maxfeerate\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n     { \"fundrawtransaction\", 2, \"iswitness\" },"
      },
      {
        "sha": "27fb53654f1caee1bffa7ad1bfde5e9dda4af033",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abd2e697c0f8e93245e09ac853bae05d0b48bee/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abd2e697c0f8e93245e09ac853bae05d0b48bee/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7abd2e697c0f8e93245e09ac853bae05d0b48bee",
        "patch": "@@ -1108,7 +1108,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(maxTxFee), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1133,7 +1133,11 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             }.ToString());\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL});\n+    RPCTypeCheck(request.params, {\n+        UniValue::VARR,\n+        UniValueType(), // NUM or BOOL, checked later\n+    });\n+\n     if (request.params[0].get_array().size() != 1) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n     }\n@@ -1145,9 +1149,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n     const uint256& tx_hash = tx->GetHash();\n \n-    CAmount max_raw_tx_fee = ::maxTxFee;\n-    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n-        max_raw_tx_fee = 0;\n+    CAmount max_raw_tx_fee = maxTxFee;\n+    // TODO: temporary migration code for old clients. Remove in v0.20\n+    if (request.params[1].isBool()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n+    } else if (request.params[1].isNum()) {\n+        size_t weight = GetTransactionWeight(*tx);\n+        CFeeRate fr(AmountFromValue(request.params[1]));\n+        // the +3/4 part rounds the value up, and is the same formula used when\n+        // calculating the fee for a transaction\n+        // (see GetVirtualTransactionSize)\n+        max_raw_tx_fee = fr.GetFee((weight+3)/4);\n+    } else if (!request.params[1].isNull()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"second argument (maxfeerate) must be numeric\");\n     }\n \n     UniValue result(UniValue::VARR);\n@@ -2068,7 +2082,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n     { \"hidden\",             \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n-    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees|maxfeerate\"} },\n     { \"rawtransactions\",    \"decodepsbt\",                   &decodepsbt,                {\"psbt\"} },\n     { \"rawtransactions\",    \"combinepsbt\",                  &combinepsbt,               {\"txs\"} },\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },"
      },
      {
        "sha": "b16eafcccad504e2cbf3719ede51a06b71829ddc",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=7abd2e697c0f8e93245e09ac853bae05d0b48bee",
        "patch": "@@ -113,7 +113,7 @@ def run_test(self):\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n             [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Negative locktime)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], allowhighfees=True)\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "7480e5c5baa41a03ad30a6e580a7c99292b20bc4",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=7abd2e697c0f8e93245e09ac853bae05d0b48bee",
        "patch": "@@ -102,7 +102,7 @@ def run_test(self):\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n             [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Non-canonical DER signature)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], allowhighfees=True)\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "8c82b0ae4d59def1aadd42762a20bf4c5b9c5007",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7abd2e697c0f8e93245e09ac853bae05d0b48bee/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=7abd2e697c0f8e93245e09ac853bae05d0b48bee",
        "patch": "@@ -426,7 +426,7 @@ def run_test(self):\n         decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['version'], 0x7fffffff)\n \n-        self.log.info('sendrawtransaction with maxfeerate')\n+        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n \n         txId = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n         rawTx = self.nodes[0].getrawtransaction(txId, True)\n@@ -439,9 +439,15 @@ def run_test(self):\n         rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx)\n         assert_equal(rawTxSigned['complete'], True)\n         # 1000 sat fee, ~200 b transaction, fee rate should land around 5 sat/b = 0.00005000 BTC/kB\n-        # Thus, below call should fail\n+        # Thus, testmempoolaccept should reject\n+        testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n+        assert_equal(testres['allowed'], False)\n+        assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n+        # and sendrawtransaction should throw\n         assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n-        # And below call should succeed\n+        # And below calls should both succeed\n+        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate=0.00007000)[0]\n+        assert_equal(testres['allowed'], True)\n         self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate=0.00007000)\n \n "
      }
    ]
  }
]