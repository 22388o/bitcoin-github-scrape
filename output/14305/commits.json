[
  {
    "sha": "ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTkyM2UzMmEwYzAzZmNiYjZmZmUzMTc1ODBmZDFkMDQ2NjljZTcx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-23T18:44:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-23T20:03:38Z"
      },
      "message": "test: Fix broken segwit test",
      "tree": {
        "sha": "b05d9546234ebd97e7de9a1aa47097d53dccff1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b05d9546234ebd97e7de9a1aa47097d53dccff1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba923e32a0c03fcbb6ffe317580fd1d04669ce71/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/920c090f63f4990bf0f3b3d1a6d3d8a8bcd14ba0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "58bfd1c942f43f07e9c5bdde317f12912123ef1a",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba923e32a0c03fcbb6ffe317580fd1d04669ce71/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba923e32a0c03fcbb6ffe317580fd1d04669ce71/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
        "patch": "@@ -771,8 +771,8 @@ def test_p2sh_witness(self):\n         # segwit-aware would also reject this for failing CLEANSTACK.\n         test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n-        # Try to put the witness script in the script_sig, should also fail.\n-        spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n+        # Try to put the witness script in the scriptSig, should also fail.\n+        spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n "
      }
    ]
  },
  {
    "sha": "1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDBjZTk0YTU0YmUxN2IxMzlhMDUyYjhlN2I0NjA1ZmU5YWMxZWNk",
    "commit": {
      "author": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-24T02:30:22Z"
      },
      "committer": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-24T03:31:00Z"
      },
      "message": "Fix for incorrect version attr set on functional test segwit block.",
      "tree": {
        "sha": "f01bd45f85b2fcbb0814b13e1c2216b044260df1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f01bd45f85b2fcbb0814b13e1c2216b044260df1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd/comments",
    "author": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba923e32a0c03fcbb6ffe317580fd1d04669ce71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba923e32a0c03fcbb6ffe317580fd1d04669ce71"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1b3c5bd1fb753022720b1af9a99bd63764cbeffb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
        "patch": "@@ -205,7 +205,7 @@ def build_next_block(self, version=4):\n         height = self.nodes[0].getblockcount() + 1\n         block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n         block = create_block(int(tip, 16), create_coinbase(height), block_time)\n-        block.version = version\n+        block.nVersion = version\n         block.rehash()\n         return block\n "
      }
    ]
  },
  {
    "sha": "3a4449e9ad945313c6637283757de8d539cf790f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTQ0NDllOWFkOTQ1MzEzYzY2MzcyODM3NTdkZThkNTM5Y2Y3OTBm",
    "commit": {
      "author": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-24T02:34:42Z"
      },
      "committer": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-27T02:50:42Z"
      },
      "message": "Strictly enforce instance attrs in critical functional test classes.\n\nAdditionally, removed redundant parentheses and added PEP-8 compliant\nspacing around those classes.",
      "tree": {
        "sha": "3c1ea34e4c1230efbd3267c0716cae47848b686a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c1ea34e4c1230efbd3267c0716cae47848b686a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4449e9ad945313c6637283757de8d539cf790f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4449e9ad945313c6637283757de8d539cf790f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4449e9ad945313c6637283757de8d539cf790f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4449e9ad945313c6637283757de8d539cf790f/comments",
    "author": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d0ce94a54be17b139a052b8e7b4605fe9ac1ecd"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 138,
      "deletions": 44
    },
    "files": [
      {
        "sha": "8e9372767d0fc553471cc756ce3ee1be38350c47",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 131,
        "deletions": 42,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4449e9ad945313c6637283757de8d539cf790f/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4449e9ad945313c6637283757de8d539cf790f/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=3a4449e9ad945313c6637283757de8d539cf790f",
        "patch": "@@ -13,7 +13,11 @@\n msg_block, msg_tx, msg_headers, etc.:\n     data structures that represent network messages\n \n-ser_*, deser_*: functions that handle serialization/deserialization.\"\"\"\n+ser_*, deser_*: functions that handle serialization/deserialization.\n+\n+Classes use __slots__ to ensure extraneous attributes aren't accidentally added\n+by tests, compromising their intended effect.\n+\"\"\"\n from codecs import encode\n import copy\n import hashlib\n@@ -185,7 +189,10 @@ def ToHex(obj):\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n-class CAddress():\n+\n+class CAddress:\n+    __slots__ = (\"ip\", \"nServices\", \"pchReserved\", \"port\", \"time\")\n+\n     def __init__(self):\n         self.time = 0\n         self.nServices = 1\n@@ -215,7 +222,10 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n-class CInv():\n+\n+class CInv:\n+    __slots__ = (\"hash\", \"type\")\n+\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n@@ -244,7 +254,9 @@ def __repr__(self):\n             % (self.typemap[self.type], self.hash)\n \n \n-class CBlockLocator():\n+class CBlockLocator:\n+    __slots__ = (\"nVersion\", \"vHave\")\n+\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.vHave = []\n@@ -264,7 +276,9 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vHave))\n \n \n-class COutPoint():\n+class COutPoint:\n+    __slots__ = (\"hash\", \"n\")\n+\n     def __init__(self, hash=0, n=0):\n         self.hash = hash\n         self.n = n\n@@ -283,7 +297,9 @@ def __repr__(self):\n         return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n \n \n-class CTxIn():\n+class CTxIn:\n+    __slots__ = (\"nSequence\", \"prevout\", \"scriptSig\")\n+\n     def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n@@ -311,7 +327,9 @@ def __repr__(self):\n                self.nSequence)\n \n \n-class CTxOut():\n+class CTxOut:\n+    __slots__ = (\"nValue\", \"scriptPubKey\")\n+\n     def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n@@ -332,7 +350,9 @@ def __repr__(self):\n                bytes_to_hex_str(self.scriptPubKey))\n \n \n-class CScriptWitness():\n+class CScriptWitness:\n+    __slots__ = (\"stack\",)\n+\n     def __init__(self):\n         # stack is a vector of strings\n         self.stack = []\n@@ -347,7 +367,9 @@ def is_null(self):\n         return True\n \n \n-class CTxInWitness():\n+class CTxInWitness:\n+    __slots__ = (\"scriptWitness\",)\n+\n     def __init__(self):\n         self.scriptWitness = CScriptWitness()\n \n@@ -364,7 +386,9 @@ def is_null(self):\n         return self.scriptWitness.is_null()\n \n \n-class CTxWitness():\n+class CTxWitness:\n+    __slots__ = (\"vtxinwit\",)\n+\n     def __init__(self):\n         self.vtxinwit = []\n \n@@ -392,7 +416,10 @@ def is_null(self):\n         return True\n \n \n-class CTransaction():\n+class CTransaction:\n+    __slots__ = (\"hash\", \"nLockTime\", \"nVersion\", \"sha256\", \"vin\", \"vout\",\n+                 \"wit\")\n+\n     def __init__(self, tx=None):\n         if tx is None:\n             self.nVersion = 1\n@@ -496,7 +523,10 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n-class CBlockHeader():\n+class CBlockHeader:\n+    __slots__ = (\"hash\", \"hashMerkleRoot\", \"hashPrevBlock\", \"nBits\", \"nNonce\",\n+                 \"nTime\", \"nVersion\", \"sha256\")\n+\n     def __init__(self, header=None):\n         if header is None:\n             self.set_null()\n@@ -565,6 +595,8 @@ def __repr__(self):\n \n \n class CBlock(CBlockHeader):\n+    __slots__ = (\"vtx\",)\n+\n     def __init__(self, header=None):\n         super(CBlock, self).__init__(header)\n         self.vtx = []\n@@ -636,7 +668,9 @@ def __repr__(self):\n                time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n \n \n-class PrefilledTransaction():\n+class PrefilledTransaction:\n+    __slots__ = (\"index\", \"tx\")\n+\n     def __init__(self, index=0, tx = None):\n         self.index = index\n         self.tx = tx\n@@ -664,8 +698,12 @@ def serialize_with_witness(self):\n     def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n+\n # This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs():\n+class P2PHeaderAndShortIDs:\n+    __slots__ = (\"header\", \"nonce\", \"prefilled_txn\", \"prefilled_txn_length\",\n+                 \"shortids\", \"shortids_length\")\n+\n     def __init__(self):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -703,9 +741,11 @@ def serialize(self, with_witness=False):\n     def __repr__(self):\n         return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n \n+\n # P2P version of the above that will use witness serialization (for compact\n # block version 2)\n class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    __slots__ = ()\n     def serialize(self):\n         return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n \n@@ -715,9 +755,12 @@ def calculate_shortid(k0, k1, tx_hash):\n     expected_shortid &= 0x0000ffffffffffff\n     return expected_shortid\n \n+\n # This version gets rid of the array lengths, and reinterprets the differential\n # encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs():\n+class HeaderAndShortIDs:\n+    __slots__ = (\"header\", \"nonce\", \"prefilled_txn\", \"shortids\", \"use_witness\")\n+\n     def __init__(self, p2pheaders_and_shortids = None):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -778,7 +821,8 @@ def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n \n \n-class BlockTransactionsRequest():\n+class BlockTransactionsRequest:\n+    __slots__ = (\"blockhash\", \"indexes\")\n \n     def __init__(self, blockhash=0, indexes = None):\n         self.blockhash = blockhash\n@@ -818,7 +862,8 @@ def __repr__(self):\n         return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n \n \n-class BlockTransactions():\n+class BlockTransactions:\n+    __slots__ = (\"blockhash\", \"transactions\")\n \n     def __init__(self, blockhash=0, transactions = None):\n         self.blockhash = blockhash\n@@ -840,7 +885,10 @@ def serialize(self, with_witness=True):\n     def __repr__(self):\n         return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n \n-class CPartialMerkleTree():\n+\n+class CPartialMerkleTree:\n+    __slots__ = (\"fBad\", \"nTransactions\", \"vBits\", \"vHash\")\n+\n     def __init__(self):\n         self.nTransactions = 0\n         self.vHash = []\n@@ -868,7 +916,10 @@ def serialize(self):\n     def __repr__(self):\n         return \"CPartialMerkleTree(nTransactions=%d, vHash=%s, vBits=%s)\" % (self.nTransactions, repr(self.vHash), repr(self.vBits))\n \n-class CMerkleBlock():\n+\n+class CMerkleBlock:\n+    __slots__ = (\"header\", \"txn\")\n+\n     def __init__(self):\n         self.header = CBlockHeader()\n         self.txn = CPartialMerkleTree()\n@@ -888,7 +939,9 @@ def __repr__(self):\n \n \n # Objects that correspond to messages on the wire\n-class msg_version():\n+class msg_version:\n+    __slots__ = (\"addrFrom\", \"addrTo\", \"nNonce\", \"nRelay\", \"nServices\",\n+                 \"nStartingHeight\", \"nTime\", \"nVersion\", \"strSubVer\")\n     command = b\"version\"\n \n     def __init__(self):\n@@ -945,7 +998,8 @@ def __repr__(self):\n                self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n-class msg_verack():\n+class msg_verack:\n+    __slots__ = ()\n     command = b\"verack\"\n \n     def __init__(self):\n@@ -961,7 +1015,8 @@ def __repr__(self):\n         return \"msg_verack()\"\n \n \n-class msg_addr():\n+class msg_addr:\n+    __slots__ = (\"addrs\",)\n     command = b\"addr\"\n \n     def __init__(self):\n@@ -977,7 +1032,8 @@ def __repr__(self):\n         return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n \n \n-class msg_inv():\n+class msg_inv:\n+    __slots__ = (\"inv\",)\n     command = b\"inv\"\n \n     def __init__(self, inv=None):\n@@ -996,7 +1052,8 @@ def __repr__(self):\n         return \"msg_inv(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getdata():\n+class msg_getdata:\n+    __slots__ = (\"inv\",)\n     command = b\"getdata\"\n \n     def __init__(self, inv=None):\n@@ -1012,7 +1069,8 @@ def __repr__(self):\n         return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getblocks():\n+class msg_getblocks:\n+    __slots__ = (\"locator\", \"hashstop\")\n     command = b\"getblocks\"\n \n     def __init__(self):\n@@ -1035,7 +1093,8 @@ def __repr__(self):\n             % (repr(self.locator), self.hashstop)\n \n \n-class msg_tx():\n+class msg_tx:\n+    __slots__ = (\"tx\",)\n     command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n@@ -1050,13 +1109,16 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_tx(tx=%s)\" % (repr(self.tx))\n \n+\n class msg_witness_tx(msg_tx):\n+    __slots__ = ()\n \n     def serialize(self):\n         return self.tx.serialize_with_witness()\n \n \n-class msg_block():\n+class msg_block:\n+    __slots__ = (\"block\",)\n     command = b\"block\"\n \n     def __init__(self, block=None):\n@@ -1074,9 +1136,12 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_block(block=%s)\" % (repr(self.block))\n \n+\n # for cases where a user needs tighter control over what is sent over the wire\n # note that the user must supply the name of the command, and the data\n-class msg_generic():\n+class msg_generic:\n+    __slots__ = (\"command\", \"data\")\n+\n     def __init__(self, command, data=None):\n         self.command = command\n         self.data = data\n@@ -1087,13 +1152,16 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_generic()\"\n \n-class msg_witness_block(msg_block):\n \n+class msg_witness_block(msg_block):\n+    __slots__ = ()\n     def serialize(self):\n         r = self.block.serialize(with_witness=True)\n         return r\n \n-class msg_getaddr():\n+\n+class msg_getaddr:\n+    __slots__ = ()\n     command = b\"getaddr\"\n \n     def __init__(self):\n@@ -1109,7 +1177,8 @@ def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n-class msg_ping():\n+class msg_ping:\n+    __slots__ = (\"nonce\",)\n     command = b\"ping\"\n \n     def __init__(self, nonce=0):\n@@ -1127,7 +1196,8 @@ def __repr__(self):\n         return \"msg_ping(nonce=%08x)\" % self.nonce\n \n \n-class msg_pong():\n+class msg_pong:\n+    __slots__ = (\"nonce\",)\n     command = b\"pong\"\n \n     def __init__(self, nonce=0):\n@@ -1145,7 +1215,8 @@ def __repr__(self):\n         return \"msg_pong(nonce=%08x)\" % self.nonce\n \n \n-class msg_mempool():\n+class msg_mempool:\n+    __slots__ = ()\n     command = b\"mempool\"\n \n     def __init__(self):\n@@ -1160,7 +1231,9 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n-class msg_sendheaders():\n+\n+class msg_sendheaders:\n+    __slots__ = ()\n     command = b\"sendheaders\"\n \n     def __init__(self):\n@@ -1180,7 +1253,8 @@ def __repr__(self):\n # number of entries\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders():\n+class msg_getheaders:\n+    __slots__ = (\"hashstop\", \"locator\",)\n     command = b\"getheaders\"\n \n     def __init__(self):\n@@ -1205,7 +1279,8 @@ def __repr__(self):\n \n # headers message has\n # <count> <vector of block headers>\n-class msg_headers():\n+class msg_headers:\n+    __slots__ = (\"headers\",)\n     command = b\"headers\"\n \n     def __init__(self, headers=None):\n@@ -1225,7 +1300,8 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n-class msg_reject():\n+class msg_reject:\n+    __slots__ = (\"code\", \"data\", \"message\", \"reason\")\n     command = b\"reject\"\n     REJECT_MALFORMED = 1\n \n@@ -1256,7 +1332,9 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-class msg_feefilter():\n+\n+class msg_feefilter:\n+    __slots__ = (\"feerate\",)\n     command = b\"feefilter\"\n \n     def __init__(self, feerate=0):\n@@ -1273,7 +1351,9 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n-class msg_sendcmpct():\n+\n+class msg_sendcmpct:\n+    __slots__ = (\"announce\", \"version\")\n     command = b\"sendcmpct\"\n \n     def __init__(self):\n@@ -1293,7 +1373,9 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n \n-class msg_cmpctblock():\n+\n+class msg_cmpctblock:\n+    __slots__ = (\"header_and_shortids\",)\n     command = b\"cmpctblock\"\n \n     def __init__(self, header_and_shortids = None):\n@@ -1311,7 +1393,9 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n \n-class msg_getblocktxn():\n+\n+class msg_getblocktxn:\n+    __slots__ = (\"block_txn_request\",)\n     command = b\"getblocktxn\"\n \n     def __init__(self):\n@@ -1329,7 +1413,9 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n \n-class msg_blocktxn():\n+\n+class msg_blocktxn:\n+    __slots__ = (\"block_transactions\",)\n     command = b\"blocktxn\"\n \n     def __init__(self):\n@@ -1346,7 +1432,10 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n \n+\n class msg_witness_blocktxn(msg_blocktxn):\n+    __slots__ = ()\n+\n     def serialize(self):\n         r = b\"\"\n         r += self.block_transactions.serialize(with_witness=True)"
      },
      {
        "sha": "2fe44010ba3c2618a85d1486652edd137ea0a38e",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4449e9ad945313c6637283757de8d539cf790f/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4449e9ad945313c6637283757de8d539cf790f/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=3a4449e9ad945313c6637283757de8d539cf790f",
        "patch": "@@ -26,7 +26,7 @@ def hash160(s):\n _opcode_instances = []\n class CScriptOp(int):\n     \"\"\"A single script opcode\"\"\"\n-    __slots__ = []\n+    __slots__ = ()\n \n     @staticmethod\n     def encode_op_pushdata(d):\n@@ -361,8 +361,11 @@ def __init__(self, msg, data):\n         self.data = data\n         super(CScriptTruncatedPushDataError, self).__init__(msg)\n \n+\n # This is used, eg, for blockchain heights in coinbase scripts (bip34)\n-class CScriptNum():\n+class CScriptNum:\n+    __slots__ = (\"value\",)\n+\n     def __init__(self, d=0):\n         self.value = d\n \n@@ -393,6 +396,8 @@ class CScript(bytes):\n \n     iter(script) however does iterate by opcode.\n     \"\"\"\n+    __slots__ = ()\n+\n     @classmethod\n     def __coerce_instance(cls, other):\n         # Coerce other into bytes"
      }
    ]
  },
  {
    "sha": "17b42f4122740a7d9c91f3b42f77907e9cdcf680",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2I0MmY0MTIyNzQwYTdkOWM5MWYzYjQyZjc3OTA3ZTljZGNmNjgw",
    "commit": {
      "author": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-26T02:10:13Z"
      },
      "committer": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-27T02:50:51Z"
      },
      "message": "Check for specific tx acceptance failures based on script signature",
      "tree": {
        "sha": "32c408cc51feaee923cbaae5a9e52e9eb6f29cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32c408cc51feaee923cbaae5a9e52e9eb6f29cdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17b42f4122740a7d9c91f3b42f77907e9cdcf680",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b42f4122740a7d9c91f3b42f77907e9cdcf680",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17b42f4122740a7d9c91f3b42f77907e9cdcf680",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b42f4122740a7d9c91f3b42f77907e9cdcf680/comments",
    "author": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a4449e9ad945313c6637283757de8d539cf790f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4449e9ad945313c6637283757de8d539cf790f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4449e9ad945313c6637283757de8d539cf790f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "afbbfa8992ad8e12669ac53dcad6af81553076b0",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b42f4122740a7d9c91f3b42f77907e9cdcf680/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b42f4122740a7d9c91f3b42f77907e9cdcf680/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=17b42f4122740a7d9c91f3b42f77907e9cdcf680",
        "patch": "@@ -769,12 +769,16 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n+        with self.nodes[0].assert_debug_log(\n+                expected_msgs=(spend_tx.hash, 'was not accepted: non-mandatory-script-verify-flag (Witness program was passed an empty witness)')):\n+            test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n         spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n+        with self.nodes[0].assert_debug_log(\n+                expected_msgs=('Not relaying invalid transaction {}'.format(spend_tx.hash), 'was not accepted: mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)')):\n+            test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates."
      }
    ]
  },
  {
    "sha": "e46023287689fc8e79b9a82fe1a827d87c769423",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDYwMjMyODc2ODlmYzhlNzliOWE4MmZlMWE4MjdkODdjNzY5NDIz",
    "commit": {
      "author": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-27T03:13:06Z"
      },
      "committer": {
        "name": "Justin Turner Arthur",
        "email": "justinarthur@gmail.com",
        "date": "2018-09-27T03:13:06Z"
      },
      "message": "Document fixed attribute behavior in critical test framework classes.\n\nPer @jimmysong's suggestion in bitcoin/bitcoin#14305. Also corrects\nmodule for network objects and wrappers.",
      "tree": {
        "sha": "256f9255fc05255d190f1955f4ffc25001e3e81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/256f9255fc05255d190f1955f4ffc25001e3e81f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e46023287689fc8e79b9a82fe1a827d87c769423",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46023287689fc8e79b9a82fe1a827d87c769423",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e46023287689fc8e79b9a82fe1a827d87c769423",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46023287689fc8e79b9a82fe1a827d87c769423/comments",
    "author": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17b42f4122740a7d9c91f3b42f77907e9cdcf680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b42f4122740a7d9c91f3b42f77907e9cdcf680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17b42f4122740a7d9c91f3b42f77907e9cdcf680"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d40052ac9394efdccc75ecb3bb6b34b8cf82945a",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46023287689fc8e79b9a82fe1a827d87c769423/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46023287689fc8e79b9a82fe1a827d87c769423/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=e46023287689fc8e79b9a82fe1a827d87c769423",
        "patch": "@@ -60,6 +60,11 @@ don't have test cases for.\n - When calling RPCs with lots of arguments, consider using named keyword\n   arguments instead of positional arguments to make the intent of the call\n   clear to readers.\n+- Many of the core test framework classes such as `CBlock` and `CTransaction`\n+  don't allow new attributes to be added to their objects at runtime like\n+  typical Python objects allow. This helps prevent unpredictable side effects\n+  from typographical errors or usage of the objects outside of their intended\n+  purpose.\n \n #### RPC and P2P definitions\n \n@@ -72,7 +77,7 @@ P2P messages. These can be found in the following source files:\n \n #### Using the P2P interface\n \n-- `mininode.py` contains all the definitions for objects that pass\n+- `messages.py` contains all the definitions for objects that pass\n over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n wrappers for them, `msg_block`, `msg_tx`, etc).\n "
      }
    ]
  }
]