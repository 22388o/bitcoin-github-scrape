[
  {
    "sha": "e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDdjOGU5MTIzYWE4N2I3ZDQ5YzA4YTc1NThlYTVhZjYzYmZjYjc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-02T02:33:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-23T23:20:01Z"
      },
      "message": "Treat generation (mined) transactions less different from receive transactions\n\n- Show address receiving the generation, and include it in the correct \"account\"\n- Multiple entries in listtransactions output if the coinbase has multiple outputs to us",
      "tree": {
        "sha": "1cd125441785b823b1a87bba9d10c407943f6864",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd125441785b823b1a87bba9d10c407943f6864"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bcd3f26c022f7a2fcc1a01df6d9cae0cb13f8d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bcd3f26c022f7a2fcc1a01df6d9cae0cb13f8d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bcd3f26c022f7a2fcc1a01df6d9cae0cb13f8d7"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 38,
      "deletions": 61
    },
    "files": [
      {
        "sha": "cc60e2732bf1a62767b4489c5dc5408101e0586b",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
        "patch": "@@ -54,12 +54,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                if (wtx.IsCoinBase())\n-                {\n-                    // Generated\n-                    sub.type = TransactionRecord::Generated;\n-                }\n-                else if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n+                if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;\n@@ -71,6 +66,11 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.type = TransactionRecord::RecvFromOther;\n                     sub.address = mapValue[\"from\"];\n                 }\n+                if (wtx.IsCoinBase())\n+                {\n+                    // Generated\n+                    sub.type = TransactionRecord::Generated;\n+                }\n \n                 parts.append(sub);\n             }"
      },
      {
        "sha": "847c9e97338657005545ee00f03a24f00a4d96d7",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
        "patch": "@@ -392,11 +392,11 @@ QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, b\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         return lookupAddress(wtx->address, tooltip);\n     case TransactionRecord::SendToOther:\n         return QString::fromStdString(wtx->address);\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n     default:\n         return tr(\"(n/a)\");\n     }\n@@ -409,13 +409,13 @@ QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const\n     {\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n+    case TransactionRecord::Generated:\n         {\n         QString label = walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(wtx->address));\n         if(label.isEmpty())\n             return COLOR_BAREADDRESS;\n         } break;\n     case TransactionRecord::SendToSelf:\n-    case TransactionRecord::Generated:\n         return COLOR_BAREADDRESS;\n     default:\n         break;"
      },
      {
        "sha": "95fa6718d98482beae35cd41e7ac12a212e54aab",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 33,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
        "patch": "@@ -34,6 +34,8 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.push_back(Pair(\"confirmations\", confirms));\n+    if (wtx.IsCoinBase())\n+        entry.push_back(Pair(\"generated\", true));\n     if (confirms)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n@@ -445,12 +447,12 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n         if (!wtx.IsFinal())\n             continue;\n \n-        int64 nGenerated, nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nGenerated, nReceived, nSent, nFee);\n+        int64 nReceived, nSent, nFee;\n+        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n             nBalance += nReceived;\n-        nBalance += nGenerated - nSent - nFee;\n+        nBalance -= nSent + nFee;\n     }\n \n     // Tally internal accounting entries\n@@ -492,12 +494,11 @@ Value getbalance(const Array& params, bool fHelp)\n             if (!wtx.IsFinal())\n                 continue;\n \n-            int64 allGeneratedImmature, allGeneratedMature, allFee;\n-            allGeneratedImmature = allGeneratedMature = allFee = 0;\n+            int64 allFee;\n             string strSentAccount;\n             list<pair<CTxDestination, int64> > listReceived;\n             list<pair<CTxDestination, int64> > listSent;\n-            wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n@@ -506,7 +507,6 @@ Value getbalance(const Array& params, bool fHelp)\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n-            nBalance += allGeneratedMature;\n         }\n         return  ValueFromAmount(nBalance);\n     }\n@@ -877,35 +877,15 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64 nGeneratedImmature, nGeneratedMature, nFee;\n+    int64 nFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n \n-    wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n \n-    // Generated blocks assigned to account \"\"\n-    if ((nGeneratedMature+nGeneratedImmature) != 0 && (fAllAccounts || strAccount == \"\"))\n-    {\n-        Object entry;\n-        entry.push_back(Pair(\"account\", string(\"\")));\n-        if (nGeneratedImmature)\n-        {\n-            entry.push_back(Pair(\"category\", wtx.GetDepthInMainChain() ? \"immature\" : \"orphan\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedImmature)));\n-        }\n-        else\n-        {\n-            entry.push_back(Pair(\"category\", \"generate\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(nGeneratedMature)));\n-        }\n-        if (fLong)\n-            WalletTxToJSON(wtx, entry);\n-        ret.push_back(entry);\n-    }\n-\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n@@ -936,7 +916,17 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                 Object entry;\n                 entry.push_back(Pair(\"account\", account));\n                 entry.push_back(Pair(\"address\", CBitcoinAddress(r.first).ToString()));\n-                entry.push_back(Pair(\"category\", \"receive\"));\n+                if (wtx.IsCoinBase())\n+                {\n+                    if (wtx.GetDepthInMainChain() < 1)\n+                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                    else if (wtx.GetBlocksToMaturity() > 0)\n+                        entry.push_back(Pair(\"category\", \"immature\"));\n+                    else\n+                        entry.push_back(Pair(\"category\", \"generate\"));\n+                }\n+                else\n+                    entry.push_back(Pair(\"category\", \"receive\"));\n                 entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n@@ -1040,17 +1030,16 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64 nGeneratedImmature, nGeneratedMature, nFee;\n+        int64 nFee;\n         string strSentAccount;\n         list<pair<CTxDestination, int64> > listReceived;\n         list<pair<CTxDestination, int64> > listSent;\n-        wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n+        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n-            mapAccountBalances[\"\"] += nGeneratedMature;\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;"
      },
      {
        "sha": "5ca501b1aff9b38f8e71ed2c3d546ed4835db63a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 18,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
        "patch": "@@ -601,23 +601,14 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,\n+void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n                            list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n-    nGeneratedImmature = nGeneratedMature = nFee = 0;\n+    nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n-    if (IsCoinBase())\n-    {\n-        if (GetBlocksToMaturity() > 0)\n-            nGeneratedImmature = pwallet->GetCredit(*this);\n-        else\n-            nGeneratedMature = GetCredit();\n-        return;\n-    }\n-\n     // Compute fee:\n     int64 nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n@@ -650,20 +641,17 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,\n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n                                   int64& nSent, int64& nFee) const\n {\n-    nGenerated = nReceived = nSent = nFee = 0;\n+    nReceived = nSent = nFee = 0;\n \n-    int64 allGeneratedImmature, allGeneratedMature, allFee;\n-    allGeneratedImmature = allGeneratedMature = allFee = 0;\n+    int64 allFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64> > listReceived;\n     list<pair<CTxDestination, int64> > listSent;\n-    GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n+    GetAmounts(listReceived, listSent, allFee, strSentAccount);\n \n-    if (strAccount == \"\")\n-        nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& s, listSent)"
      },
      {
        "sha": "69badaf10dfec7c2603206e3be0759b138275933",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07c8e9123aa87b7d49c08a7558ea5af63bfcb74/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e07c8e9123aa87b7d49c08a7558ea5af63bfcb74",
        "patch": "@@ -589,10 +589,10 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CTxDestination, int64> >& listReceived,\n+    void GetAmounts(std::list<std::pair<CTxDestination, int64> >& listReceived,\n                     std::list<std::pair<CTxDestination, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n+    void GetAccountAmounts(const std::string& strAccount, int64& nReceived,\n                            int64& nSent, int64& nFee) const;\n \n     bool IsFromMe() const"
      }
    ]
  }
]