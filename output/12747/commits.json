[
  {
    "sha": "d27327c79a651fab77e032fa1f00ce4458db959b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjczMjdjNzlhNjUxZmFiNzdlMDMyZmExZjAwY2U0NDU4ZGI5NTli",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-21T09:54:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-21T09:54:17Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "b31605a352ad7ee1a68d5a524b0bb9335e9592cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b31605a352ad7ee1a68d5a524b0bb9335e9592cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d27327c79a651fab77e032fa1f00ce4458db959b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d27327c79a651fab77e032fa1f00ce4458db959b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d27327c79a651fab77e032fa1f00ce4458db959b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d27327c79a651fab77e032fa1f00ce4458db959b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b8b1079ddab64ac955766536c38d23dc57bc499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8b1079ddab64ac955766536c38d23dc57bc499",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8b1079ddab64ac955766536c38d23dc57bc499"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6dec3fe416bb97c9e6785a9a214e9e9398e77548",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -218,7 +218,7 @@ class CAddrMan\n     //! last time Good was called (memory only)\n     int64_t nLastGood;\n \n-    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discpline used to resolve these collisions.\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n protected:"
      },
      {
        "sha": "28d3c4a1194286f7804d15d0e84e367dcfc5e86d",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -101,7 +101,7 @@ static inline int64_t GetBlockWeight(const CBlock& block)\n {\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n-static inline int64_t GetTransationInputWeight(const CTxIn& txin)\n+static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n {\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n     return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "db1ad4f26d56ec72d3a0e7df109d43fea9a04f20",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -261,5 +261,5 @@ int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n \n int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost)\n {\n-    return GetVirtualTransactionSize(GetTransationInputWeight(txin), nSigOpCost);\n+    return GetVirtualTransactionSize(GetTransactionInputWeight(txin), nSigOpCost);\n }"
      },
      {
        "sha": "e5024effabc8a4294bccb1182dd79b05b570ce76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -2425,21 +2425,21 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const\n {\n     if (!output.fSpendable)\n         return false;\n \n-    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibility_filter.conf_mine : eligibility_filter.conf_theirs))\n         return false;\n \n-    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibility_filter.max_ancestors))\n         return false;\n \n     return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n                                  std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {\n     setCoinsRet.clear();\n@@ -2460,7 +2460,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (const COutput &output : vCoins)\n         {\n-            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+            if (!OutputEligibleForSpending(output, eligibility_filter))\n                 continue;\n \n             CInputCoin coin(output.tx->tx, output.i);\n@@ -2480,7 +2480,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // Filter by the min conf specs and add to utxo_pool\n         for (const COutput &output : vCoins)\n         {\n-            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+            if (!OutputEligibleForSpending(output, eligibility_filter))\n                 continue;\n \n             CInputCoin coin = CInputCoin(output.tx->tx, output.i);"
      },
      {
        "sha": "45d9762bde87aa4edc6af9a4c405dea079b90b05",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -853,7 +853,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n@@ -1167,7 +1167,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CTxDestination AddAndGetDestinationForScript(const CScript& script, OutputType);\n \n     /** Whether a given output is spendable by this wallet */\n-    bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const;\n+    bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const;\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "a115aa30d9f4eb4ff28ae2ef2227836301d5d2f8",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27327c79a651fab77e032fa1f00ce4458db959b/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27327c79a651fab77e032fa1f00ce4458db959b/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=d27327c79a651fab77e032fa1f00ce4458db959b",
        "patch": "@@ -144,12 +144,12 @@\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"02000000000100000000000000000000000000\"],\n     \"output_cmp\": \"txcreate2.hex\",\n-    \"description\": \"Parses a transation with no inputs and a single output script\"\n+    \"description\": \"Parses a transaction with no inputs and a single output script\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"02000000000100000000000000000000000000\"],\n     \"output_cmp\": \"txcreate2.json\",\n-    \"description\": \"Parses a transation with no inputs and a single output script (output in json)\"\n+    \"description\": \"Parses a transaction with no inputs and a single output script (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\", \"outscript=0:OP_DROP\", \"nversion=1\"],"
      }
    ]
  }
]