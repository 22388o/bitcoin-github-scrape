DrahtBot,2020-05-06 12:08:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17908 (qt: Remove QFont warnings with QT_QPA_PLATFORM=minimal by hebasto)\n\nIf you consider this pull request important,",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624611018,624611018,
MarcoFalke,2020-05-06 13:11:37,"Do I understand correctly that every gui element needs to have this handler if a crash wants to be avoided?\n\nI.e. every dialog or window that could possibly pop up and just putting this catch in the ""main gui"" won't work?",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624640273,624640273,
MarcoFalke,2020-05-06 13:11:49,Concept ACK either way,https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624640372,624640372,
hebasto,2020-05-06 13:14:22,"> Do I understand correctly that every gui element needs to have this handler if a crash wants to be avoided?\n> \n> I.e. every dialog or window that could possibly pop up and just putting this catch in the ""main gui"" won't work?\n\nEvery slot.\n\nSee: https://doc.qt.io/qt-5/exceptionsafety.html#signals-and-slots",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624641757,624641757,
MarcoFalke,2020-05-06 13:19:37,"So currently it is undefined behaviour. Wow, qt is scary.\n\nSlightly stronger concept ACK, but this also makes we want to remove qt.",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624644393,624644393,
hebasto,2020-05-06 13:21:44,"> So currently it is undefined behaviour. Wow, qt is scary.\n> \n> Slightly stronger concept ACK, but this also makes we want to remove qt.\n\nUnrelated, but do we have a long-term plan of moving from Qt?",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624645549,624645549,
hebasto,2020-05-06 15:14:27,"Updated 40a622dd9374e8cba80c6150f56f9d43004d953a -> 44f7f519e5fc7aef6df12474ce3c9b8583e6f20b ([pr18897.01](https://github.com/hebasto/bitcoin/commits/pr18897.01) -> [pr18897.02](https://github.com/hebasto/bitcoin/commits/pr18897.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18897.01..pr18897.02)):\n\n- addressed @ryanofsky's comments\n\n---\n\nThe OP and the screenshot have been u",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624710077,624710077,
ryanofsky,2020-05-06 16:34:33,"This looks pretty reasonable, and I'd ack this if not a draft PR.\n\nOne thing that might be nice is a generic exception catcher QObject that emits a handleRunawayException signal. This way the signal doesn't need to be declared multiple places and repeated boilerplate for catching exceptions could go away. So something like:\n\n```c++\nm_exception_catcher->exec([&]{ sendButtonClickedHelper()",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624755636,624755636,
hebasto,2020-05-08 11:23:20,"@ryanofsky @promag Thank you for your reviews.\n\nUpdated 44f7f519e5fc7aef6df12474ce3c9b8583e6f20b -> 24a90d54ed31fd3da787b95e29e2fca581235836 ([pr18897.02](https://github.com/hebasto/bitcoin/commits/pr18897.02) -> [pr18897.03](https://github.com/hebasto/bitcoin/commits/pr18897.03), [diff](https://github.com/hebasto/bitcoin/compare/pr18897.02..pr18897.03)).\n\nReady for review now :)",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-625769660,625769660,
hebasto,2020-05-08 14:32:16,"Updated 24a90d54ed31fd3da787b95e29e2fca581235836 -> 82529bc4ed82bcdf42428afef63c12ff37dd1dd4 ([pr18897.03](https://github.com/hebasto/bitcoin/commits/pr18897.03) -> [pr18897.04](https://github.com/hebasto/bitcoin/commits/pr18897.04), [diff](https://github.com/hebasto/bitcoin/compare/pr18897.03..pr18897.04)):\n\n- addressed @promag's [comment](https://github.com/bitcoin/bitcoin/pull/18897#discuss",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-625844423,625844423,
hebasto,2020-05-10 11:39:57,Also #18435 could be related.,https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-626314732,626314732,
hebasto,2020-05-11 19:15:07,Rebased 82529bc4ed82bcdf42428afef63c12ff37dd1dd4 -> 1fb68b3c6cd3d153a5701b5e82f18b1f6bf96586 ([pr18897.04](https://github.com/hebasto/bitcoin/commits/pr18897.04) -> [pr18897.05](https://github.com/hebasto/bitcoin/commits/pr18897.05)) due to the conflict with #18914.,https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-626902475,626902475,
jonasschnelli,2020-05-12 07:23:33,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-627162954,627162954,
hebasto,2020-05-13 04:38:38,"Updated 1fb68b3c6cd3d153a5701b5e82f18b1f6bf96586 -> 8f9424329f05ffa92a7421990c5c7320c7556a09 ([pr18897.05](https://github.com/hebasto/bitcoin/commits/pr18897.05) -> [pr18897.06](https://github.com/hebasto/bitcoin/commits/pr18897.06), [diff](https://github.com/hebasto/bitcoin/compare/pr18897.05..pr18897.06)):\n\n- addressed @promag's [comment](https://github.com/bitcoin/bitcoin/pull/18897#discuss",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-627740852,627740852,
DrahtBot,2020-05-29 09:49:21,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-635882754,635882754,
fanquake,2020-09-15 08:36:36,"Given this only had the 1 ACK (with suggested improvements), and now needs a rebase, lets move this over the [GUI repo](https://github.com/bitcoin-core/gui). I'll move #18643 over there as well.",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-692560685,692560685,
ryanofsky,2020-10-13 16:21:21,"> lets move this over the [GUI repo](https://github.com/bitcoin-core/gui)\n\nReopening this not to lose track, since it doesn't appear this PR was moved to the GUI repo (or I can't find it).  Can close this again if it is actually moved or no longer applicable.",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-707856126,707856126,
fanquake,2021-03-26 07:10:44,"@hebasto can you either move this over to the GUI repo, or close and we'll mark it up for grabs? The interested re-opener can open it in the gui repo.",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-807993316,807993316,
hebasto,2021-03-26 18:16:54,"@fanquake \n> @hebasto can you either move this over to the GUI repo, or close and we'll mark it up for grabs? The interested re-opener can open it in the gui repo.\n\nhttps://github.com/bitcoin-core/gui/pull/260\n",https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-808424242,808424242,
ryanofsky,2020-05-06 14:16:01,"No reason to tie this to to the CHECK_NONFATAL implementation or to have exceptions pass through QT code which by design does not use them. Would change this to not be tied to a specific exception type:\n\n```\ntry {\n    bumpFeeHelper();\n} catch (const std::exception& e) {\n    Q_EMIT runawayException(QString::fromStdString(e.what()));\n} catch (...) {\n    Q_EMIT runawayException(""Unkno",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r420826544,420826544,src/qt/transactionview.cpp
ryanofsky,2020-05-06 14:23:26,"Would change dialog title to something more understandable like ""Internal error"", since if this triggers something's gone wrong like memory corruption or a bug triggered in the code",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r420832097,420832097,src/qt/bitcoingui.cpp
hebasto,2020-05-06 15:14:59,[Updated](https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624710077).,https://github.com/bitcoin/bitcoin/pull/18897#discussion_r420873029,420873029,src/qt/transactionview.cpp
hebasto,2020-05-06 15:15:25,[Updated](https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-624710077).,https://github.com/bitcoin/bitcoin/pull/18897#discussion_r420873366,420873366,src/qt/bitcoingui.cpp
promag,2020-05-06 21:39:04,"Why emit a signal? No one is interested in this signal right? Could just call another slot in a generic catcher, like:\n```cpp\ntemplate <typename F> void shieldException(F&& f) {\n    try {\n        f();\n    } catch (...) {\n        QMetaObject::invokeMethod(qApp, ""messageException"", Qt::QueuedConnection,\n            Q_ARG(QString, exception_message), ...\n        );\n    }\n}",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r421108403,421108403,src/qt/sendcoinsdialog.cpp
hebasto,2020-05-08 11:26:19,[Updated](https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-625769660).,https://github.com/bitcoin/bitcoin/pull/18897#discussion_r422090551,422090551,src/qt/sendcoinsdialog.cpp
promag,2020-05-08 13:25:04,Move to src/qt/guiutil.h?,https://github.com/bitcoin/bitcoin/pull/18897#discussion_r422140790,422140790,src/qt/shieldexception.h
hebasto,2020-05-08 14:32:35,[Updated](https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-625844423).,https://github.com/bitcoin/bitcoin/pull/18897#discussion_r422177839,422177839,src/qt/shieldexception.h
promag,2020-05-11 23:15:48,"Why can't it be `AutoConnection`? That way this could be used in a ""worker"" slot.\n\nOtherwise I'd assert the current thread is the GUI thread at the function begin.",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r423372423,423372423,src/qt/guiutil.h
hebasto,2020-05-12 05:37:50,"I'd keep `Qt::DirectConnection` to be sure the exception is handled in the same thread where it was thrown.\n\nAs `QMessageBox` in `BitcoinApplication::handleNonFatalException()` has its own event loop, I think it is safe to call `shieldException()` from a non-GUI thread, no?",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r423472828,423472828,src/qt/guiutil.h
promag,2020-05-12 21:35:13,">  has its own event loop, I think it is safe to call shieldException() from a non-GUI thread, no?\n\nI don't think so, only the main (GUI) thread should deal with widgets.\n\n> I'd keep `Qt::DirectConnection` to be sure the exception is handled in the same thread where it was thrown.\n\nWhat you mean by handled? This is just catching the exception (which happens in the right thread) and the",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r424047353,424047353,src/qt/guiutil.h
hebasto,2020-05-13 04:39:14,"> I don't think so, only the main (GUI) thread should deal with widgets.\n\nYou are right. [Fixed](https://github.com/bitcoin/bitcoin/pull/18897#issuecomment-627740852).",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r424168155,424168155,src/qt/guiutil.h
ryanofsky,2020-05-26 21:49:10,"In commit ""qt: Add shieldException() function"" (553128b91934a5e62c9827cd6260fec9562b5ec9)\n\nWould drop this special case for NonFatalCheckError and simply catch std::exception below. NonFatalCheckError is really an internal implementation of the CHECK macro and most useful to unit tests. Exceptions aren't valid in qt callbacks so NonFatalCheckError is no different here than any other exception.",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r430727242,430727242,src/qt/guiutil.h
ryanofsky,2020-05-26 21:53:48,"In commit ""qt: Add shieldException() function"" (553128b91934a5e62c9827cd6260fec9562b5ec9)\n\nHere and below would replace ""Runaway exception"" with ""Internal error."" No reason to confuse users with implementation details and obscure jargon when it's not providing useful information",https://github.com/bitcoin/bitcoin/pull/18897#discussion_r430729081,430729081,src/qt/guiutil.h
