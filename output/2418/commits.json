[
  {
    "sha": "1657c4bc495815febc2137972c3c63b99d2b0189",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjU3YzRiYzQ5NTgxNWZlYmMyMTM3OTcyYzNjNjNiOTlkMmIwMTg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-03-28T22:51:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieterw@google.com",
        "date": "2013-04-12T10:17:28Z"
      },
      "message": "Use a uint256 for bnChainWork\n\nEvery block index entry currently requires a separately-allocated\nCBigNum. By replacing them with uint256, it's just 32 bytes extra\nin CBlockIndex itself.\n\nThis should save us a few megabytes in RAM, and less allocation\noverhead.",
      "tree": {
        "sha": "57798b51f7014c88f11b1e5bfe11edc123977098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57798b51f7014c88f11b1e5bfe11edc123977098"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1657c4bc495815febc2137972c3c63b99d2b0189",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1657c4bc495815febc2137972c3c63b99d2b0189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1657c4bc495815febc2137972c3c63b99d2b0189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1657c4bc495815febc2137972c3c63b99d2b0189/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "2aa462ec30c3960ae546e4d8d50fdbaffefef718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa462ec30c3960ae546e4d8d50fdbaffefef718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa462ec30c3960ae546e4d8d50fdbaffefef718"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 48,
      "deletions": 36
    },
    "files": [
      {
        "sha": "7464349b3c49a37e1ea56c693a2d28eecba3758d",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1657c4bc495815febc2137972c3c63b99d2b0189/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1657c4bc495815febc2137972c3c63b99d2b0189/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=1657c4bc495815febc2137972c3c63b99d2b0189",
        "patch": "@@ -1,5 +1,5 @@\n-diff --git a/src/main.cpp b/src/main.cpp\n-index 8c115c2..1e70ff2 100644\n+diff --git a/contrib/test-patches/bitcoind-comparison.patch b/contrib/test-patches/bitcoind-comparison.patch\n+index 04a8618..519429a 100644\n --- a/src/main.cpp\n +++ b/src/main.cpp\n @@ -31,8 +31,8 @@ CTxMemPool mempool;\n@@ -12,7 +12,7 @@ index 8c115c2..1e70ff2 100644\n +static CBigNum bnProofOfWorkLimit(~uint256(0) >> 1);\n  CBlockIndex* pindexGenesisBlock = NULL;\n  int nBestHeight = -1;\n- CBigNum bnBestChainWork = 0;\n+ uint256 nBestChainWork = 0;\n @@ -1055,7 +1055,7 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n      int64 nSubsidy = 50 * COIN;\n  \n@@ -22,7 +22,7 @@ index 8c115c2..1e70ff2 100644\n  \n      return nSubsidy + nFees;\n  }\n-@@ -2706,9 +2706,9 @@ bool InitBlockIndex() {\n+@@ -2736,9 +2736,9 @@ bool InitBlockIndex() {\n          block.hashPrevBlock = 0;\n          block.hashMerkleRoot = block.BuildMerkleTree();\n          block.nVersion = 1;\n@@ -35,7 +35,7 @@ index 8c115c2..1e70ff2 100644\n  \n          if (fTestNet)\n          {\n-@@ -3007,7 +3007,7 @@ bool static AlreadyHave(const CInv& inv)\n+@@ -3024,7 +3024,7 @@ bool static AlreadyHave(const CInv& inv)\n  // The message start string is designed to be unlikely to occur in normal data.\n  // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n  // a large 4-byte int at any alignment."
      },
      {
        "sha": "0881807d703e38a1a5f3808eff90040fa41befcd",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1657c4bc495815febc2137972c3c63b99d2b0189/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1657c4bc495815febc2137972c3c63b99d2b0189/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=1657c4bc495815febc2137972c3c63b99d2b0189",
        "patch": "@@ -222,7 +222,7 @@ class CBigNum : public BIGNUM\n         BN_mpi2bn(pch, p - pch, this);\n     }\n \n-    uint256 getuint256()\n+    uint256 getuint256() const\n     {\n         unsigned int nSize = BN_bn2mpi(this, NULL);\n         if (nSize < 4)"
      },
      {
        "sha": "bf13e791510c49e18812f3b6f2f8c442ee1c70a8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1657c4bc495815febc2137972c3c63b99d2b0189/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1657c4bc495815febc2137972c3c63b99d2b0189/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1657c4bc495815febc2137972c3c63b99d2b0189",
        "patch": "@@ -35,8 +35,8 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n-CBigNum bnBestChainWork = 0;\n-CBigNum bnBestInvalidWork = 0;\n+uint256 nBestChainWork = 0;\n+uint256 nBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n@@ -1191,20 +1191,20 @@ bool IsInitialBlockDownload()\n \n void static InvalidChainFound(CBlockIndex* pindexNew)\n {\n-    if (pindexNew->bnChainWork > bnBestInvalidWork)\n+    if (pindexNew->nChainWork > nBestInvalidWork)\n     {\n-        bnBestInvalidWork = pindexNew->bnChainWork;\n-        pblocktree->WriteBestInvalidWork(bnBestInvalidWork);\n+        nBestInvalidWork = pindexNew->nChainWork;\n+        pblocktree->WriteBestInvalidWork(CBigNum(nBestInvalidWork));\n         uiInterface.NotifyBlocksChanged();\n     }\n-    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n+    printf(\"InvalidChainFound: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n       pindexNew->GetBlockHash().ToString().c_str(), pindexNew->nHeight,\n-      pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n-    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+    printf(\"InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n+      hashBestChain.ToString().c_str(), nBestHeight, log(nBestChainWork.getdouble())/log(2.0),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n-    if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n+    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n         printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n }\n \n@@ -1230,7 +1230,7 @@ bool ConnectBestBlock(CValidationState &state) {\n             pindexNewBest = *it;\n         }\n \n-        if (pindexNewBest == pindexBest || (pindexBest && pindexNewBest->bnChainWork == pindexBest->bnChainWork))\n+        if (pindexNewBest == pindexBest || (pindexBest && pindexNewBest->nChainWork == pindexBest->nChainWork))\n             return true; // nothing to do\n \n         // check ancestry\n@@ -1250,7 +1250,7 @@ bool ConnectBestBlock(CValidationState &state) {\n                 break;\n             }\n \n-            if (pindexBest == NULL || pindexTest->bnChainWork > pindexBest->bnChainWork)\n+            if (pindexBest == NULL || pindexTest->nChainWork > pindexBest->nChainWork)\n                 vAttach.push_back(pindexTest);\n \n             if (pindexTest->pprev == NULL || pindexTest->pnext != NULL) {\n@@ -1858,11 +1858,11 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     pindexBest = pindexNew;\n     pblockindexFBBHLast = NULL;\n     nBestHeight = pindexBest->nHeight;\n-    bnBestChainWork = pindexNew->bnChainWork;\n+    nBestChainWork = pindexNew->nChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s  progress=%f\\n\",\n-      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n+    printf(\"SetBestChain: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n+      hashBestChain.ToString().c_str(), nBestHeight, log(nBestChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str(),\n       Checkpoints::GuessVerificationProgress(pindexBest));\n \n@@ -1915,7 +1915,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n     pindexNew->nTx = vtx.size();\n-    pindexNew->bnChainWork = (pindexNew->pprev ? pindexNew->pprev->bnChainWork : 0) + pindexNew->GetBlockWork();\n+    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n     pindexNew->nChainTx = (pindexNew->pprev ? pindexNew->pprev->nChainTx : 0) + pindexNew->nTx;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n@@ -2537,7 +2537,7 @@ bool static LoadBlockIndexDB()\n \n     boost::this_thread::interruption_point();\n \n-    // Calculate bnChainWork\n+    // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n@@ -2549,7 +2549,7 @@ bool static LoadBlockIndexDB()\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n-        pindex->bnChainWork = (pindex->pprev ? pindex->pprev->bnChainWork : 0) + pindex->GetBlockWork();\n+        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n         pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n         if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS && !(pindex->nStatus & BLOCK_FAILED_MASK))\n             setBlockIndexValid.insert(pindex);\n@@ -2561,8 +2561,10 @@ bool static LoadBlockIndexDB()\n     if (pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n         printf(\"LoadBlockIndexDB(): last block file info: %s\\n\", infoLastBlockFile.ToString().c_str());\n \n-    // Load bnBestInvalidWork, OK if it doesn't exist\n+    // Load nBestInvalidWork, OK if it doesn't exist\n+    CBigNum bnBestInvalidWork;\n     pblocktree->ReadBestInvalidWork(bnBestInvalidWork);\n+    nBestInvalidWork = bnBestInvalidWork.getuint256();\n \n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n@@ -2579,7 +2581,7 @@ bool static LoadBlockIndexDB()\n         return true;\n     hashBestChain = pindexBest->GetBlockHash();\n     nBestHeight = pindexBest->nHeight;\n-    bnBestChainWork = pindexBest->bnChainWork;\n+    nBestChainWork = pindexBest->nChainWork;\n \n     // set 'next' pointers in best chain\n     CBlockIndex *pindex = pindexBest;\n@@ -2675,8 +2677,8 @@ void UnloadBlockIndex()\n     setBlockIndexValid.clear();\n     pindexGenesisBlock = NULL;\n     nBestHeight = 0;\n-    bnBestChainWork = 0;\n-    bnBestInvalidWork = 0;\n+    nBestChainWork = 0;\n+    nBestInvalidWork = 0;\n     hashBestChain = 0;\n     pindexBest = NULL;\n }\n@@ -2953,7 +2955,7 @@ string GetWarnings(string strFor)\n     }\n \n     // Longer invalid proof-of-work chain\n-    if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n+    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n     {\n         nPriority = 2000;\n         strStatusBar = strRPC = _(\"Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\");"
      },
      {
        "sha": "24b2cb2aa6a4afe91c2a51782b6bee682e80cd72",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1657c4bc495815febc2137972c3c63b99d2b0189/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1657c4bc495815febc2137972c3c63b99d2b0189/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1657c4bc495815febc2137972c3c63b99d2b0189",
        "patch": "@@ -77,8 +77,8 @@ extern std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n extern uint256 hashGenesisBlock;\n extern CBlockIndex* pindexGenesisBlock;\n extern int nBestHeight;\n-extern CBigNum bnBestChainWork;\n-extern CBigNum bnBestInvalidWork;\n+extern uint256 nBestChainWork;\n+extern uint256 nBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n@@ -1619,7 +1619,7 @@ class CBlockIndex\n     unsigned int nUndoPos;\n \n     // (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n-    CBigNum bnChainWork;\n+    uint256 nChainWork;\n \n     // Number of transactions in this block.\n     // Note: in a potential headers-first mode, this number cannot be relied upon\n@@ -1648,7 +1648,7 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        bnChainWork = 0;\n+        nChainWork = 0;\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n@@ -1669,7 +1669,7 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        bnChainWork = 0;\n+        nChainWork = 0;\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n@@ -1793,8 +1793,8 @@ class CBlockIndex\n struct CBlockIndexWorkComparator\n {\n     bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n-        if (pa->bnChainWork > pb->bnChainWork) return false;\n-        if (pa->bnChainWork < pb->bnChainWork) return true;\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n \n         if (pa->GetBlockHash() < pb->GetBlockHash()) return false;\n         if (pa->GetBlockHash() > pb->GetBlockHash()) return true;"
      },
      {
        "sha": "8a9af8ba0430998862fbe91d918fbc2bba4e4416",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1657c4bc495815febc2137972c3c63b99d2b0189/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1657c4bc495815febc2137972c3c63b99d2b0189/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=1657c4bc495815febc2137972c3c63b99d2b0189",
        "patch": "@@ -55,6 +55,16 @@ class base_uint\n         return ret;\n     }\n \n+    double getdouble() const\n+    {\n+        double ret = 0.0;\n+        double fact = 1.0;\n+        for (int i = 0; i < WIDTH; i++) {\n+            ret += fact * pn[i];\n+            fact *= 4294967296.0;\n+        }\n+        return ret;\n+    }\n \n     base_uint& operator=(uint64 b)\n     {"
      }
    ]
  }
]