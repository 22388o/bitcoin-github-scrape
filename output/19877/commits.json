[
  {
    "sha": "0672522aedd3760c30b8740c7e9487f00bf9dfeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjcyNTIyYWVkZDM3NjBjMzBiODc0MGM3ZTk0ODdmMDBiZjlkZmVi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-04T20:32:14Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-10-27T20:45:25Z"
      },
      "message": "[move-only, test]: Match test order with run order",
      "tree": {
        "sha": "f7f843fb94f623bb4023bf3026ebef6d68eaf9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7f843fb94f623bb4023bf3026ebef6d68eaf9da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0672522aedd3760c30b8740c7e9487f00bf9dfeb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0672522aedd3760c30b8740c7e9487f00bf9dfeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0672522aedd3760c30b8740c7e9487f00bf9dfeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0672522aedd3760c30b8740c7e9487f00bf9dfeb/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b1ffcd259cc64139dad646a52fab5c597c95c2"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f8421360c5552d0668a7d276fbb3daba259b25b6",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0672522aedd3760c30b8740c7e9487f00bf9dfeb/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0672522aedd3760c30b8740c7e9487f00bf9dfeb/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=0672522aedd3760c30b8740c7e9487f00bf9dfeb",
        "patch": "@@ -69,6 +69,36 @@ def test_connection_count(self):\n         # After using `connect_nodes` to connect nodes 0 and 1 to each other.\n         assert_equal(self.nodes[0].getconnectioncount(), 2)\n \n+    def test_getpeerinfo(self):\n+        self.log.info(\"Test getpeerinfo\")\n+        # Create a few getpeerinfo last_block/last_transaction values.\n+        if self.is_wallet_compiled():\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        time_now = int(time.time())\n+        peer_info = [x.getpeerinfo() for x in self.nodes]\n+        # Verify last_block and last_transaction keys/values.\n+        for node, peer, field in product(range(self.num_nodes), range(2), ['last_block', 'last_transaction']):\n+            assert field in peer_info[node][peer].keys()\n+            if peer_info[node][peer][field] != 0:\n+                assert_approx(peer_info[node][peer][field], time_now, vspan=60)\n+        # check both sides of bidirectional connection between nodes\n+        # the address bound to on one side will be the source address for the other node\n+        assert_equal(peer_info[0][0]['addrbind'], peer_info[1][0]['addr'])\n+        assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n+        assert_equal(peer_info[0][0]['minfeefilter'], Decimal(\"0.00000500\"))\n+        assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n+        # check the `servicesnames` field\n+        for info in peer_info:\n+            assert_net_servicesnames(int(info[0][\"services\"], 0x10), info[0][\"servicesnames\"])\n+\n+        assert_equal(peer_info[0][0]['connection_type'], 'inbound')\n+        assert_equal(peer_info[0][1]['connection_type'], 'manual')\n+\n+        assert_equal(peer_info[1][0]['connection_type'], 'manual')\n+        assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n+\n     def test_getnettotals(self):\n         self.log.info(\"Test getnettotals\")\n         # getnettotals totalbytesrecv and totalbytessent should be\n@@ -151,36 +181,6 @@ def test_getaddednodeinfo(self):\n         # check that a non-existent node returns an error\n         assert_raises_rpc_error(-24, \"Node has not been added\", self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n-    def test_getpeerinfo(self):\n-        self.log.info(\"Test getpeerinfo\")\n-        # Create a few getpeerinfo last_block/last_transaction values.\n-        if self.is_wallet_compiled():\n-            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-        time_now = int(time.time())\n-        peer_info = [x.getpeerinfo() for x in self.nodes]\n-        # Verify last_block and last_transaction keys/values.\n-        for node, peer, field in product(range(self.num_nodes), range(2), ['last_block', 'last_transaction']):\n-            assert field in peer_info[node][peer].keys()\n-            if peer_info[node][peer][field] != 0:\n-                assert_approx(peer_info[node][peer][field], time_now, vspan=60)\n-        # check both sides of bidirectional connection between nodes\n-        # the address bound to on one side will be the source address for the other node\n-        assert_equal(peer_info[0][0]['addrbind'], peer_info[1][0]['addr'])\n-        assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n-        assert_equal(peer_info[0][0]['minfeefilter'], Decimal(\"0.00000500\"))\n-        assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n-        # check the `servicesnames` field\n-        for info in peer_info:\n-            assert_net_servicesnames(int(info[0][\"services\"], 0x10), info[0][\"servicesnames\"])\n-\n-        assert_equal(peer_info[0][0]['connection_type'], 'inbound')\n-        assert_equal(peer_info[0][1]['connection_type'], 'manual')\n-\n-        assert_equal(peer_info[1][0]['connection_type'], 'manual')\n-        assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n-\n     def test_service_flags(self):\n         self.log.info(\"Test service flags\")\n         self.nodes[0].add_p2p_connection(P2PInterface(), services=(1 << 4) | (1 << 63))"
      }
    ]
  },
  {
    "sha": "47ff5098ad5ea2c20ea387f99940a7cde6c80789",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2ZmNTA5OGFkNWVhMmMyMGVhMzg3Zjk5OTQwYTdjZGU2YzgwNzg5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-04T20:37:24Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-10-28T02:23:02Z"
      },
      "message": "[test] Clarify setup of node topology.\n\nSince the test framework automatically sets up a connection between the nodes,\nthe second connect_nodes call was a no-op. Remove the redundant call & add\ncomments to explain the expected topology.",
      "tree": {
        "sha": "187a8dbd9fca70a984b9c1ea2093860bee8f0afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/187a8dbd9fca70a984b9c1ea2093860bee8f0afc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ff5098ad5ea2c20ea387f99940a7cde6c80789",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ff5098ad5ea2c20ea387f99940a7cde6c80789",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ff5098ad5ea2c20ea387f99940a7cde6c80789",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ff5098ad5ea2c20ea387f99940a7cde6c80789/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0672522aedd3760c30b8740c7e9487f00bf9dfeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0672522aedd3760c30b8740c7e9487f00bf9dfeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0672522aedd3760c30b8740c7e9487f00bf9dfeb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a7f51b536420c01a1188cd9a107c73438c641cbb",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ff5098ad5ea2c20ea387f99940a7cde6c80789/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ff5098ad5ea2c20ea387f99940a7cde6c80789/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=47ff5098ad5ea2c20ea387f99940a7cde6c80789",
        "patch": "@@ -18,8 +18,11 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"Connect nodes both way\")\n+        # By default, the test framework sets up an addnode connection from\n+        # node 1 --> node0. By connecting node0 --> node 1, we're left with\n+        # the two nodes being connected both ways.\n+        # Topology will look like: node0 <--> node1\n         self.connect_nodes(0, 1)\n-        self.connect_nodes(1, 0)\n \n         self.log.info(\"Test setban and listbanned RPCs\")\n "
      },
      {
        "sha": "03c858c69414ba1ea8707e09f81b05aa3fb0bd42",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ff5098ad5ea2c20ea387f99940a7cde6c80789/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ff5098ad5ea2c20ea387f99940a7cde6c80789/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=47ff5098ad5ea2c20ea387f99940a7cde6c80789",
        "patch": "@@ -51,9 +51,12 @@ def set_test_params(self):\n     def run_test(self):\n         # Get out of IBD for the minfeefilter and getpeerinfo tests.\n         self.nodes[0].generate(101)\n-        # Connect nodes both ways.\n+\n+        # By default, the test framework sets up an addnode connection from\n+        # node 1 --> node0. By connecting node0 --> node 1, we're left with\n+        # the two nodes being connected both ways.\n+        # Topology will look like: node0 <--> node1\n         self.connect_nodes(0, 1)\n-        self.connect_nodes(1, 0)\n         self.sync_all()\n \n         self.test_connection_count()"
      }
    ]
  }
]