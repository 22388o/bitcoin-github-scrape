[
  {
    "sha": "5bab08df175db3a4283596515e498fc5a4d0dab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmFiMDhkZjE3NWRiM2E0MjgzNTk2NTE1ZTQ5OGZjNWE0ZDBkYWI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-11-24T12:02:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-12-03T11:15:12Z"
      },
      "message": "contrib: Add test for ELF symbol-check\n\nCheck both failure cases:\n- Use a glibc symbol from a version that is too new\n- Use a symbol from a library that is not in the allowlist\n\nAnd also check a conforming binary.\n\nAdding a similar check for Windows PE can be done in a separate PR.",
      "tree": {
        "sha": "95ec579d3e339c89affc428edbbecd027b47aae9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95ec579d3e339c89affc428edbbecd027b47aae9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bab08df175db3a4283596515e498fc5a4d0dab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bab08df175db3a4283596515e498fc5a4d0dab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bab08df175db3a4283596515e498fc5a4d0dab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bab08df175db3a4283596515e498fc5a4d0dab9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0918eb49d5afabdf811da5eeb89f4f2c22d12de2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0918eb49d5afabdf811da5eeb89f4f2c22d12de2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0918eb49d5afabdf811da5eeb89f4f2c22d12de2"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 91,
      "deletions": 0
    },
    "files": [
      {
        "sha": "798f8b35240626d161b18b5c150aadc0b2d6cdcd",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bab08df175db3a4283596515e498fc5a4d0dab9/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bab08df175db3a4283596515e498fc5a4d0dab9/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5bab08df175db3a4283596515e498fc5a4d0dab9",
        "patch": "@@ -359,4 +359,5 @@ if TARGET_WINDOWS\n endif\n if TARGET_LINUX\n \t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "215144129ff1dca1670d067541d3012b5fb53da6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bab08df175db3a4283596515e498fc5a4d0dab9/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bab08df175db3a4283596515e498fc5a4d0dab9/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5bab08df175db3a4283596515e498fc5a4d0dab9",
        "patch": "@@ -1695,7 +1695,9 @@ AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/devtools/security-check.py:contrib/devtools/security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/symbol-check.py:contrib/devtools/symbol-check.py])\n AC_CONFIG_LINKS([contrib/devtools/test-security-check.py:contrib/devtools/test-security-check.py])\n+AC_CONFIG_LINKS([contrib/devtools/test-symbol-check.py:contrib/devtools/test-symbol-check.py])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])"
      },
      {
        "sha": "48abf60039e622acc8af9306e3c7bd0dca35b646",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bab08df175db3a4283596515e498fc5a4d0dab9/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bab08df175db3a4283596515e498fc5a4d0dab9/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=5bab08df175db3a4283596515e498fc5a4d0dab9",
        "patch": "@@ -0,0 +1,88 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Test script for symbol-check.py\n+'''\n+import subprocess\n+import unittest\n+\n+def call_symbol_check(cc, source, executable, options):\n+    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n+    return (p.returncode, p.stdout.rstrip())\n+\n+def get_machine(cc):\n+    p = subprocess.run([cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n+class TestSymbolChecks(unittest.TestCase):\n+    def test_ELF(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'gcc'\n+\n+        # there's no way to do this test for RISC-V at the moment; bionic's libc is 2.27\n+        # and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n+\n+        # memfd_create was introduced in GLIBC 2.27, so is newer than the upper limit of\n+        # all but RISC-V but still available on bionic\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #define _GNU_SOURCE\n+                #include <sys/mman.h>\n+\n+                int memfd_create(const char *name, unsigned int flags);\n+\n+                int main()\n+                {\n+                    memfd_create(\"test\", 0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, []),\n+                (1, executable + ': symbol memfd_create from unsupported version GLIBC_2.27\\n' +\n+                    executable + ': failed IMPORTED_SYMBOLS'))\n+\n+        # -lutil is part of the libc6 package so a safe bet that it's installed\n+        # it's also out of context enough that it's unlikely to ever become a real dependency\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <utmp.h>\n+\n+                int main()\n+                {\n+                    login(0);\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lutil']),\n+                (1, executable + ': NEEDED library libutil.so.1 is not allowed\\n' +\n+                    executable + ': failed LIBRARY_DEPENDENCIES'))\n+\n+        # finally, check a conforming file that simply uses a math function\n+        source = 'test3.c'\n+        executable = 'test3'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <math.h>\n+\n+                int main()\n+                {\n+                    return (int)pow(2.0, 4.0);\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (0, ''))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+"
      }
    ]
  },
  {
    "sha": "ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDFiYmNlZmVhYWZlZjQ2MGI2ZTU2MDlkZTg1ZTEzYzEyZTBkMmE0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-12-02T08:39:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-12-03T11:16:19Z"
      },
      "message": "contrib: add MACHO tests to symbol-check tests",
      "tree": {
        "sha": "04888e383dfa95aac1c91c308bd61362fdaf5b8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04888e383dfa95aac1c91c308bd61362fdaf5b8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bab08df175db3a4283596515e498fc5a4d0dab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bab08df175db3a4283596515e498fc5a4d0dab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bab08df175db3a4283596515e498fc5a4d0dab9"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ce8bff0f9a7f1821f008ca51b0d8eac65efe290e",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
        "patch": "@@ -353,6 +353,7 @@ clean-local: clean-docs\n test-security-check:\n if TARGET_DARWIN\n \t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n \t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE"
      },
      {
        "sha": "b07ec2ffdf26307be76a6aeaceb7b2447427a4d6",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed1bbcefeaafef460b6e5609de85e13c12e0d2a4/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=ed1bbcefeaafef460b6e5609de85e13c12e0d2a4",
        "patch": "@@ -83,6 +83,43 @@ def test_ELF(self):\n         self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n                 (0, ''))\n \n+    def test_MACHO(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'clang'\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <expat.h>\n+\n+                int main()\n+                {\n+                    XML_ExpatVersion();\n+                    return 0;\n+                }\n+\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat']),\n+            (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n+                executable + ': failed DYNAMIC_LIBRARIES'))\n+\n+        source = 'test2.c'\n+        executable = 'test2'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                #include <CoreGraphics/CoreGraphics.h>\n+\n+                int main()\n+                {\n+                    CGMainDisplayID();\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics']),\n+                (0, ''))\n+\n if __name__ == '__main__':\n     unittest.main()\n "
      }
    ]
  }
]