[
  {
    "sha": "90701994f2d342ba33e62c2d051bdb0355d99c9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDcwMTk5NGYyZDM0MmJhMzNlNjJjMmQwNTFiZGIwMzU1ZDk5Yzlj",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-03-26T05:46:02Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-03-26T05:46:02Z"
      },
      "message": "Add 'dumpbootstrap' RPC for creating bootstrap.dat files.",
      "tree": {
        "sha": "952db72a08f6eb860a5db76d46e3003efe717030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/952db72a08f6eb860a5db76d46e3003efe717030"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90701994f2d342ba33e62c2d051bdb0355d99c9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90701994f2d342ba33e62c2d051bdb0355d99c9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90701994f2d342ba33e62c2d051bdb0355d99c9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90701994f2d342ba33e62c2d051bdb0355d99c9c/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111849345bb5140f86b48e730ceab4bff45fa2e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111849345bb5140f86b48e730ceab4bff45fa2e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111849345bb5140f86b48e730ceab4bff45fa2e9"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3643276e135d129cccaa33ca8fdc483f57226597",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90701994f2d342ba33e62c2d051bdb0355d99c9c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90701994f2d342ba33e62c2d051bdb0355d99c9c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=90701994f2d342ba33e62c2d051bdb0355d99c9c",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"clientversion.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n@@ -1420,6 +1421,75 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+UniValue dumpbootstrap(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"dumpbootstrap <destination> [endblock] [startblock=0]\\n\"\n+            \"\\nCreates a bootstrap format block dump of the blockchain in destination, which can be a directory or a path with filename, up to the given endblock number.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. destination  (string, required) Pathname of file to write to. If a directory is use, 'bootstrap.dat' is created in that directory.\\n\"\n+            \"2. endblock     (numeric, optional, defaults to the last block in the active chain) Height of last block to dump.\\n\"\n+            \"3. startblock   (numeric, optional, default=0) Height of first block to dump.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumpbootstrap\", \"\\\"/tmp\\\"\")\n+            + HelpExampleRpc(\"dumpbootstrap\", \"\\\"/tmp\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strDest = request.params[0].get_str();\n+    int nEndBlock = chainActive.Height();\n+    int nStartBlock = 0;\n+\n+    if (request.params.size() > 1) {\n+        nEndBlock = request.params[1].get_int();\n+        if (nEndBlock < 0 || nEndBlock > chainActive.Height())\n+            throw std::runtime_error(\"End block number out of range.\");\n+    }\n+\n+    if (request.params.size() > 2) {\n+        nStartBlock = request.params[2].get_int();\n+        if (nStartBlock < 0 || nStartBlock > nEndBlock)\n+            throw std::runtime_error(\"Start block number out of range.\");\n+    }\n+\n+    boost::filesystem::path pathDest(strDest);\n+    if (boost::filesystem::is_directory(pathDest))\n+        pathDest /= \"bootstrap.dat\";\n+\n+    try {\n+        FILE* file = fopen(pathDest.string().c_str(), \"wb\");\n+        if (!file)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Could not open bootstrap file for writing.\");\n+\n+        CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+        if (fileout.IsNull())\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Could not open bootstrap file for writing.\");\n+\n+        for (int nHeight = nStartBlock; nHeight <= nEndBlock; nHeight++)\n+        {\n+            CBlock block;\n+            CBlockIndex* pblockindex = chainActive[nHeight];\n+\n+            if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+\n+            if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+\n+            fileout << FLATDATA(Params().MessageStart())\n+                    << (unsigned int)GetSerializeSize(fileout, block)\n+                    << block;\n+        }\n+    } catch(const boost::filesystem::filesystem_error &e) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Error: Bootstrap dump failed!\");\n+    }\n+\n+    return strprintf(\"dumped %d blocks from %d to %d into %s\", nEndBlock - nStartBlock + 1, nStartBlock, nEndBlock, pathDest);\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafe argNames\n   //  --------------------- ------------------------  -----------------------  ------ ----------\n@@ -1440,6 +1510,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        true,  {\"height\"} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },\n+    { \"blockchain\",         \"dumpbootstrap\",          &dumpbootstrap,          true,  {\"destination\", \"endblock\", \"startblock\"} },\n \n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true,  {\"blockhash\"} },\n "
      },
      {
        "sha": "c377504103bdc72e79966b955a0d28db64493676",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90701994f2d342ba33e62c2d051bdb0355d99c9c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90701994f2d342ba33e62c2d051bdb0355d99c9c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=90701994f2d342ba33e62c2d051bdb0355d99c9c",
        "patch": "@@ -54,6 +54,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"waitforblockheight\", 1, \"timeout\" },\n     { \"waitforblock\", 1, \"timeout\" },\n     { \"waitfornewblock\", 0, \"timeout\" },\n+    { \"dumpbootstrap\", 1, \"endblock\" },\n+    { \"dumpbootstrap\", 2, \"startblock\" },\n     { \"move\", 2, \"amount\" },\n     { \"move\", 3, \"minconf\" },\n     { \"sendfrom\", 2, \"amount\" },"
      }
    ]
  }
]