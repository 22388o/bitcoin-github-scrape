DrahtBot,2019-11-05 06:53:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17581](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17581.html) (refactor: Remove settings merge reverse pre",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549687895,549687895,
naumenkogs,2019-11-05 17:59:39,"Concept ACK.\n\nMy personal interest here is to easier deploy alternative protocols. For example, new block relay strategy or new address relay.\n\nReplacing those existing protocols in Bitcoin core doesn't seem feasible (unless we come up with something really brilliant), because those are critical for security and have been proving robustness for years.\nAt the same time, building something",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549941416,549941416,
TheBlueMatt,2019-11-05 19:29:44,"> My personal interest here is to easier deploy alternative protocols. For example, new block relay strategy or new address relay.\n\nWhile new address relay in-scope for ""reliability"" reasons, I'm not sure that new block relay protocols would be - I don't know that this code wants to grow much beyond what it is already...less code, less bugs :) (nor do I see any coming down the pipe on the hori",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549981980,549981980,
naumenkogs,2019-11-05 19:44:33,">I'm not sure that new block relay protocols would be\n\nWe're doing great right now, but I think there's a non-zero probability of us wanting something different in future :)\nAnyway, don't want to flood this PR with this particular discussion.",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549987988,549987988,
jgarzik,2019-11-05 19:53:15,"In the ""nice to have"" list, I would add ""fork(2)"" to the OP checklist.\n\nforking does a far better job creating a security barrier between network and the rest of the code.\n\nIt was always a long term goal to create a process boundary separation between wallet and network, for example.  One way to accomplish that is removing the wallet from the core validation engine.  Another way to accompl",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549991530,549991530,
practicalswift,2019-11-05 21:34:20,"Very interesting work @TheBlueMatt!\n\nI really appreciate that proper fuzz testing is integrated from the very start. Very nice!\n\nIs the inclusion of the fuzzing corpus intentional (`src/rusty/rust-bitcoin/fuzz/hfuzz_input/deserialize_udecimal/input/id:000121,src:000007,op:havoc,rep:2`, etc.)?\n\nI suggest removing the corpus files in order to not clutter the PR ""Files changed"" view (curr",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-550031195,550031195,
TheBlueMatt,2019-11-06 00:17:28,"@practicalswift the parts you're referring to here are just dependencies from the rust-bitcoin github org pulled in here (which are included as-is so that we can subtree them in the future, though they may need to go in via depends/ I'm just not sure how that process works), not fresh code. Indeed, most of the rust-bitcoin libraries are well-tested and have a bunch of fuzz testing built in, the in",https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-550083187,550083187,
TheBlueMatt,2020-03-05 19:48:18,Closing due to lack of interest.,https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-595413976,595413976,
icota,2019-11-16 03:22:28,`-L rusty` pointing to directory should resolve rlibs automatically instead of using all these explicit `--extern`s?,https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347073757,347073757,src/Makefile.am
TheBlueMatt,2019-11-17 20:47:03,"Doesn't seem to for me, no?",https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347158355,347158355,src/Makefile.am
icota,2019-11-18 09:28:57,"I tested and it seems like `--extern` is only necessary for `libc` (`rustc` hits [E0658](https://doc.rust-lang.org/error-index.html#E0658) otherwise). This works for me:\n`/home/igor/.cargo/bin/rustc --crate-name rusty rusty/src/lib.rs --target=x86_64-unknown-linux-gnu --crate-type=staticlib --emit=link -g -C lto=on -C overflow-checks=on -C panic=unwind --out-dir rusty -L rusty --extern libc=rust",https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347272353,347272353,src/Makefile.am
TheBlueMatt,2019-11-18 17:51:02,"Ehh, might as well just leave it, then.",https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347521655,347521655,src/Makefile.am
icota,2019-11-19 08:34:38,"Yeah, it's not a big deal",https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347787973,347787973,src/Makefile.am
