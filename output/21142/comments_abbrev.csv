DrahtBot,2021-02-10 19:09:44,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776943189,776943189,
practicalswift,2021-02-10 21:06:15,Concept ACK: very nice to see the mempool logic more thoroughly fuzzed!,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777035750,777035750,
MarcoFalke,2021-02-11 13:51:40,Rebased,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777472660,777472660,
practicalswift,2021-02-28 20:13:39,"Tested ACK e4e253d73007e0b680d2a473327c6fd66de4d86c\n\n* Very nice to see the mempool logic more thoroughly fuzzed!\n* Achieves good coverage quickly.\n* Touches only `src/test/fuzz/`.",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-787514951,787514951,
MarcoFalke,2021-03-12 08:21:38,https://bitcoincore.reviews/21142,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-797320050,797320050,
MarcoFalke,2021-03-17 20:07:09,Only for tx_pool_standard: https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa5382241f7943a7/fuzz.coverage/index.html,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801399294,801399294,
MarcoFalke,2021-03-17 20:34:19,I pushed an update for RBF. Will push some more stuff tomorrow :sleeping: ,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801424891,801424891,
AnthonyRonning,2021-03-18 06:01:49,"ACK fa5382241f7943a7395f60a8916e0d71c10d2932\n\nReviewed the code and ran the fuzz coverage tests before & after running for a few hours. Definitely getting better coverage with this, especially with the mempool/validation files. \n\n<details>\n<summary>Before</summary>\n\n```\n\n              Hit     Total  Coverage      \nLines:       28292    43939   64.4 %\nFunctions:    7835    116",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801654114,801654114,
MarcoFalke,2021-03-18 11:23:54,https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa6cb809bc934009/fuzz.coverage/index.html,https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801842171,801842171,
jonatack,2021-03-18 15:02:13,"@MarcoFalke as you requested in the review club yesterday, I ran the `tx_pool` fuzzer since then for 20+ hours and didn't see an accepted transaction.\n\n```diff\n         if (accepted) {\n             txids.push_back(tx->GetHash());\n+            std::cout << ""\n\n\n*********************** SUCCESS ***************************\n\n\n"";\n         }\n```\n\n```\n#7104574	NEW    cov: 10002 ft",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802000364,802000364,
MarcoFalke,2021-03-18 17:57:28,"I quickly ran 15kk iterations (double the 7kk iterations of yours) and it did hit a valid tx.\n\n```\n#15766688	REDUCE cov: 3250 ft: 28506 corp: 8582/1579Kb lim: 4096 exec/s: 2341 rss: 98Mb L: 49/4096 MS: 1 EraseBytes-\n```\n\nHowever, I pushed a patch, where you should see a valid tx within ~100k iterations.\n\nAll feedback has been addressed, this is now ready for re-ACKs.\n",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802165733,802165733,
jonatack,2021-03-18 18:59:37,"Valid tx within a few seconds with latest push.\n\n```\n#35708	NEW    cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 2975 rss: 587Mb L: 163/163 MS: 3 ShuffleBytes-InsertRepeatedBytes-CrossOver-\n#36093	REDUCE cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 3007 rss: 587Mb L: 136/163 MS: 5 ChangeBinInt-CrossOver-PersAutoDict-ChangeByte-InsertRepeatedBytes- DE: ""\x15\x00\x00\x00\x00\x00",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802209684,802209684,
AnthonyRonning,2021-03-19 02:40:05,"reACK faa9ef49d18da9223220afcc263ac91a74c291a6\n\nGetting a better overall coverage profile (though I have been running for a lot longer and probably have better seeds by now)\n\n```\nSummary coverage rate:                                              \n  lines......: 66.4% (29127 of 43873 lines)                         \n  functions..: 68.3% (7960 of 11646 functions)                      ",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802495917,802495917,
practicalswift,2021-03-20 23:07:13,"Tested ACK faa9ef49d18da9223220afcc263ac91a74c291a6\n\nVery nice fuzzing harness! Thanks @MarcoFalke!",https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-803476239,803476239,
glozow,2021-03-17 00:20:26,"I was wondering if RBF'ed transactions would be in `removed`, but then realized it wouldn't hit RBF stuff since you only use inputs from `outpoints`. Maybe add `Assert(res.m_replaced_transactions.size() == 0)`?",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635,595626635,src/test/fuzz/tx_pool.cpp
glozow,2021-03-17 00:35:59,"Naming suggestions for clarity\n\n```suggestion\n        const auto insert_tx = [](auto& created_in_tx, auto& spent_by_tx, const auto& tx) {\n            for (size_t i{0}; i < tx->vout.size(); ++i) {\n                Assert(created_in_tx.emplace(tx->GetHash(), i).second);\n            }\n            for (const auto& in : tx->vin) {\n                Assert(spent_by_tx.insert(in.prevout).sec",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907,595631907,src/test/fuzz/tx_pool.cpp
glozow,2021-03-17 00:52:52,"Why does `num_out` need to be in the range [1, outpoints.size()]?",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690,595637690,src/test/fuzz/tx_pool.cpp
glozow,2021-03-17 00:53:36,"Why not have an `amount_left` and pull amounts from `ConsumeIntegralInRange<CAmount>(0, amount_left)`?",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917,595637917,src/test/fuzz/tx_pool.cpp
glozow,2021-03-17 01:10:33,"Question: I know it's a test, but does it make sense for any of these values to be 0? 😮 I'm also wondering why 200 is the max instead of something closer to the default values?",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616,595643616,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-17 14:50:26,"Thanks, renamed `pop` to `spent`. `tx_outs` to `created_by_tx`. `tx_ins` to `spent_by_tx`.",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657,596090657,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-17 14:50:53,Thanks. Limited to 2*outputs.size,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187,596091187,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-17 14:51:49,Made it to pick the fee instead of the output amounts. They are now all constant for each tx,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996,596091996,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-17 14:54:35,"* I want to set it small enough so that the fuzz engine can quickly hit the limit without having to produce megabytes of transactions first.\n* Changed all maxima to be multiples of the default values, except for maxmempool, which is in [0,200]",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609,596094609,src/test/fuzz/tx_pool.cpp
jonatack,2021-03-17 15:35:39,"```suggestion\n    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596136078,596136078,src/test/fuzz/tx_pool.cpp
jonatack,2021-03-17 15:44:44,"```suggestion\n        // Remember all removed and added transactions\n```",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596146995,596146995,src/test/fuzz/tx_pool.cpp
jonatack,2021-03-17 15:55:19,"maybe simplify to\n```diff\n@@ -159,8 +159,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n-        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n-        ::fRequireStandard = require_standard;\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n         const auto res ",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596156456,596156456,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-17 20:33:47,Excellent suggestion to add rbf. Done,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596361725,596361725,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-18 13:10:43,"thx, done",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852709,596852709,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-18 13:10:50,done,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852807,596852807,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 22:50:47,Question: Why can't you use a `static_cast` here instead?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127042,599127042,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 22:52:57,"This can just be:\n```suggestion\n        Assert(amount_view.GetCoin(outpoint, c));\n```",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127881,599127881,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 23:31:57,Question: is the same `g_outpoints_coinbase_init` used for both the tx_pool and tx_pool_standard targets?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143533,599143533,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 23:32:43,"Aren't the ones at the beginning the mature ones? \nIt could also be more clear to have two sets `g_outpoints_coinbases_mature` and `g_outpoints_coinbases_immature`.\n\n```suggestion\n        txids.push_back(g_outpoints_coinbase_init.at(COINBASE_MATURITY + i).hash);\n```",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143782,599143782,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 23:45:18,Why not use `PickValue` for this? It could take a bool to PickAndMaybeDelete?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599148154,599148154,src/test/fuzz/tx_pool.cpp
glozow,2021-03-22 23:48:54,Why not make this a member function of `FuzzedDataProvider` like `PickValueInArray` is?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599149591,599149591,src/test/fuzz/util.h
glozow,2021-03-23 00:06:14,It seems a bit invasive to change all of these mempool members... can you just call something that automatically does `RollingFeeUpdate` like `tx_pool.GetMinFee()`? Or just set the members you need to `protected`?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599155394,599155394,src/txmempool.h
glozow,2021-03-23 00:11:02,"Add comments for the util functions?  e.g. I think it'd be helpful to document that `ConsumeTransaction` will give a tx that's well-formed but not necessarily valid, and it takes `prevout_txids` as input but won't necessarily use a txid from there.",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599157262,599157262,src/test/fuzz/util.h
glozow,2021-03-23 00:20:08,"In some places you do braced, and in some places you do `=` 🤷 \n```suggestion\n    for (int i{0}; i < num_in; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599160321,599160321,src/test/fuzz/util.cpp
glozow,2021-03-23 00:36:36,"These comments are confusing 😢\n`outpoints_rbf` includes all spendable outpoints including ones that would be RBFs, but ""RBF-spendable"" sounds like they're only the ones in the mempool.\n`outpoints_supply` doesn't actually include all the outpoints that count towards total supply. It doesn't include the mempool inputs which is why we need to add mempool `GetTotalFee` to it...",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599165512,599165512,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:31:24,Wouldn't that make `PickValue` unsuitable for collections that can't erase elements. E.g. `std::array`,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403634,599403634,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:31:38,"Thanks, done in follow-up",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403815,599403815,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:31:42,"Thanks, done in follow-up",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403866,599403866,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:36:17,"> outpoints_rbf\n\nHappy to rename if you have suggestions.\n\n> It doesn't include the mempool inputs which is why we need to add mempool GetTotalFee to it...\n\nI don't understand what you mean with ""mempool inputs"". `outpoints_supply` does include all outpoints from the mempool. The reason that `GetTotalFee` needs to be added is that the fee in the mempool isn't assigned to an outpoint (y",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599407215,599407215,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:37:19,Yes,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408013,599408013,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:37:52,Ouch :facepalm: . Good catch.,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408488,599408488,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 09:39:43,"Right, this isn't consistent. Though, I'll leave as is for now and remember to write `for (int i{0}; i < ...` in the future.",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599409795,599409795,src/test/fuzz/util.cpp
MarcoFalke,2021-03-23 09:40:37,"`FuzzedDataProvider` is taken from upstream, so someone needs to submit this to upstream first.",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599410447,599410447,src/test/fuzz/util.h
MarcoFalke,2021-03-23 09:45:32,"`tx_pool.GetMinFee` exists early because of `!blockSinceLastRollingFeeBump`, so I can't use that. `protected` as a replacement for `private` seems fine generally, because it allows tests to mock any private member without having to mark each member individually or add a `friend TestClass01` for each class that mocks the mempool. Since mempool isn't derived outside of tests, `protected` shouldn't c",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599413946,599413946,src/txmempool.h
MarcoFalke,2021-03-23 09:47:39,"If `prevout_txids` is passed, it should only pick from there. As none of the functions in this file have doxygen comments, so I'll skip them for now. Though, I am more than happy to review a pull adding docs :)",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599415562,599415562,src/test/fuzz/util.h
jnewbery,2021-03-23 13:11:33,Why not `for (auto i{0} ...`? :eyes: ,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599553077,599553077,src/test/fuzz/util.cpp
jnewbery,2021-03-23 13:14:34,Isn't it better to not have side-effects from asserts?,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599555332,599555332,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 13:18:22,`int` is one character shorter :shorts: ,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599558374,599558374,src/test/fuzz/util.cpp
glozow,2021-03-23 13:42:28,"Oh, is it not src/test/fuzz/FuzzedDataProvider.h?",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578593,599578593,src/test/fuzz/util.h
glozow,2021-03-23 13:42:46,"Sure, makes sense 👍 ",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578827,599578827,src/txmempool.h
glozow,2021-03-23 13:43:33,"> outpoints_supply does include all outpoints from the mempool.\n\nA right 🤦 I was confoozed",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599579500,599579500,src/test/fuzz/tx_pool.cpp
MarcoFalke,2021-03-23 13:45:24,"It is, but it is only synced from upstream: https://github.com/llvm/llvm-project/blob/main/compiler-rt/include/fuzzer/FuzzedDataProvider.h",https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599581054,599581054,src/test/fuzz/util.h
glozow,2021-03-23 13:56:26,Ahhh true,https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599590631,599590631,src/test/fuzz/tx_pool.cpp
