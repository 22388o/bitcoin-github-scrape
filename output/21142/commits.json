[
  {
    "sha": "faa9ef49d18da9223220afcc263ac91a74c291a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE5ZWY0OWQxOGRhOTIyMzIyMGFmY2MyNjNhYzkxYTc0YzI5MWE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-14T20:26:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-18T17:43:52Z"
      },
      "message": "fuzz: Add tx_pool fuzz targets",
      "tree": {
        "sha": "f0c9556bf0f153dda55dcb3d0b653506fcd83ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0c9556bf0f153dda55dcb3d0b653506fcd83ec3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa9ef49d18da9223220afcc263ac91a74c291a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjpXQwAmT+u9IybzrKspXMzZCakd+OzEumf7IgCdRi5TVnw6HMzeQrqGEzyfr+3\ndmA0GfLVhsiskjioUA2et5DxEBX6YMDuSt1MRoFOMTO77kFVjX73nh5PYPxRrqhc\nRulnHZYfcG7kwi5njczyFXhFq2XAIpPdwIfYHZWttkOQP1qORvgTJ3ljaeeJa9k0\nvWjplFmS4YwZGMpLLC1vM28FdH67u7b/jX1022LHSJAEXwUUoEptwNcywxeupcdf\naa1/T3E9rUkosGjSfDW2Anzej4thbE7Wvbc91bO+EYho0/oeUr/MKFEC0u5uZ8Uu\nA5oY6hZ/0dDwDiOrIdMEkNafFxHJJ9/eMG++nagEGoDcoFF5cSDACN4RVdY9bHbu\naToWVxt17dS8Vod0GeaSeSBQK52W3BlCbnaLZ2+7fh+eCYonU6lC73uZTrbingDY\nkGqRxRQG3l7ELOEioieyi8y+x4YQXPtZwicUB77H1ZJOPRkJJZWGy0So3nTEG5Nh\nU1tDp5Ig\n=+xYw\n-----END PGP SIGNATURE-----",
        "payload": "tree f0c9556bf0f153dda55dcb3d0b653506fcd83ec3\nparent 6834e02c896b97ecbd2ad8251c5b09612b27bf10\nauthor MarcoFalke <falke.marco@gmail.com> 1610655979 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1616089432 +0100\n\nfuzz: Add tx_pool fuzz targets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa9ef49d18da9223220afcc263ac91a74c291a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa9ef49d18da9223220afcc263ac91a74c291a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa9ef49d18da9223220afcc263ac91a74c291a6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6834e02c896b97ecbd2ad8251c5b09612b27bf10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6834e02c896b97ecbd2ad8251c5b09612b27bf10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6834e02c896b97ecbd2ad8251c5b09612b27bf10"
      }
    ],
    "stats": {
      "total": 387,
      "additions": 381,
      "deletions": 6
    },
    "files": [
      {
        "sha": "66cc68ebf3abf71c0905bf9e95178d7c5798a13c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa9ef49d18da9223220afcc263ac91a74c291a6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa9ef49d18da9223220afcc263ac91a74c291a6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=faa9ef49d18da9223220afcc263ac91a74c291a6",
        "patch": "@@ -297,6 +297,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/transaction.cpp \\\n  test/fuzz/tx_in.cpp \\\n  test/fuzz/tx_out.cpp \\\n+ test/fuzz/tx_pool.cpp \\\n  test/fuzz/txrequest.cpp \\\n  test/fuzz/validation_load_mempool.cpp\n endif # ENABLE_FUZZ_BINARY"
      },
      {
        "sha": "2a9363a7c389ddbcebdbeb8e9b6588a2da44f300",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "added",
        "additions": 284,
        "deletions": 0,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=faa9ef49d18da9223220afcc263ac91a74c291a6",
        "patch": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+        if (txids.size() >= COINBASE_MATURITY) break;\n+    }\n+    for (int i{0}; i <= 3; ++i) {\n+        // Add some immature and non-existent outpoints\n+        txids.push_back(g_outpoints_coinbase_init.at(i).hash);\n+        txids.push_back(ConsumeUInt256(fuzzed_data_provider));\n+    }\n+\n+    CTxMemPool tx_pool{/* estimator */ nullptr, /* check_ratio */ 1};\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n+\n+        const auto tx = MakeTransactionRef(mut_tx);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (accepted) {\n+            txids.push_back(tx->GetHash());\n+        }\n+\n+        SyncWithValidationInterfaceQueue();\n+    }\n+}\n+} // namespace"
      },
      {
        "sha": "93418ab1ff76d77b3f068d78b04576a33a7f6379",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=faa9ef49d18da9223220afcc263ac91a74c291a6",
        "patch": "@@ -3,8 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <util/rbf.h>\n #include <version.h>\n \n+\n void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_version) noexcept\n {\n     const ServiceFlags remote_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\n@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {\n+        const auto& txid_prev = prevout_txids ?\n+                                    PickValue(fuzzed_data_provider, *prevout_txids) :\n+                                    ConsumeUInt256(fuzzed_data_provider);\n+        const auto index_out = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, max_num_out);\n+        const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+        const auto script_sig = p2wsh_op_true ? CScript{} : ConsumeScript(fuzzed_data_provider);\n+        CScriptWitness script_wit;\n+        if (p2wsh_op_true) {\n+            script_wit.stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+        } else {\n+            script_wit = ConsumeScriptWitness(fuzzed_data_provider);\n+        }\n+        CTxIn in;\n+        in.prevout = COutPoint{txid_prev, index_out};\n+        in.nSequence = sequence;\n+        in.scriptSig = script_sig;\n+        in.scriptWitness = script_wit;\n+\n+        tx_mut.vin.push_back(in);\n+    }\n+    for (int i = 0; i < num_out; ++i) {\n+        const auto amount = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-10, 50 * COIN + 10);\n+        const auto script_pk = p2wsh_op_true ?\n+                                   P2WSH_OP_TRUE :\n+                                   ConsumeScript(fuzzed_data_provider, /* max_length */ 128, /* maybe_p2wsh */ true);\n+        tx_mut.vout.emplace_back(amount, script_pk);\n+    }\n+    return tx_mut;\n+}\n+\n+CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size) noexcept\n+{\n+    CScriptWitness ret;\n+    const auto n_elements = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, max_stack_elem_size);\n+    for (size_t i = 0; i < n_elements; ++i) {\n+        ret.stack.push_back(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+    }\n+    return ret;\n+}\n+\n+CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length, const bool maybe_p2wsh) noexcept\n+{\n+    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    CScript r_script{b.begin(), b.end()};\n+    if (maybe_p2wsh && fuzzed_data_provider.ConsumeBool()) {\n+        uint256 script_hash;\n+        CSHA256().Write(&r_script[0], r_script.size()).Finalize(script_hash.begin());\n+        r_script.clear();\n+        r_script << OP_0 << ToByteVector(script_hash);\n+    }\n+    return r_script;\n+}\n+\n+uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return fuzzed_data_provider.ConsumeBool() ?\n+               fuzzed_data_provider.PickValueInArray({\n+                   CTxIn::SEQUENCE_FINAL,\n+                   CTxIn::SEQUENCE_FINAL - 1,\n+                   MAX_BIP125_RBF_SEQUENCE,\n+               }) :\n+               fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+}"
      },
      {
        "sha": "df459fe60d62ac56178a95c2aabe948b39bd7a0f",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa9ef49d18da9223220afcc263ac91a74c291a6/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=faa9ef49d18da9223220afcc263ac91a74c291a6",
        "patch": "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)\n+{\n+    const auto sz = col.size();\n+    assert(sz >= 1);\n+    auto it = col.begin();\n+    std::advance(it, fuzzed_data_provider.ConsumeIntegralInRange<decltype(sz)>(0, sz - 1));\n+    return *it;\n+}\n+\n [[nodiscard]] inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(max_length);\n@@ -125,11 +135,13 @@ template <typename WeakEnumType, size_t size>\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    return {b.begin(), b.end()};\n-}\n+[[nodiscard]] CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in = 10, const int max_num_out = 10) noexcept;\n+\n+[[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n+\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096, const bool maybe_p2wsh = false) noexcept;\n+\n+[[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n [[nodiscard]] inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {"
      },
      {
        "sha": "c3a9bd851d5f2a5bd46588fbcb204fdd7161e836",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa9ef49d18da9223220afcc263ac91a74c291a6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa9ef49d18da9223220afcc263ac91a74c291a6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=faa9ef49d18da9223220afcc263ac91a74c291a6",
        "patch": "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:\n     const int m_check_ratio; //!< Value n means that 1 times in n we check.\n     std::atomic<unsigned int> nTransactionsUpdated{0}; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;"
      }
    ]
  }
]