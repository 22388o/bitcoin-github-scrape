[
  {
    "sha": "2d1d6581eca4508838cd339cc19c72efc42d6ea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDFkNjU4MWVjYTQ1MDg4MzhjZDMzOWNjMTljNzJlZmM0MmQ2ZWEw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-03T13:24:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-07T10:13:10Z"
      },
      "message": "Track block download times per individual block\n\nCurrently, we're keeping a timeout for each requested block, starting\nfrom when it is requested, with a correction factor for the number of\nblocks in the queue.\n\nThat's unnecessarily complicated and inaccurate.\n\nAs peers process block requests in order, we can make the timeout for each\nblock start counting only when all previous ones have been received, and\nhave a correction based on the number of peers, rather than the total number\nof blocks.",
      "tree": {
        "sha": "7bf5a9c7f6094f513eb3d475e83a9ab7439f0302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bf5a9c7f6094f513eb3d475e83a9ab7439f0302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d1d6581eca4508838cd339cc19c72efc42d6ea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1d6581eca4508838cd339cc19c72efc42d6ea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1d6581eca4508838cd339cc19c72efc42d6ea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1d6581eca4508838cd339cc19c72efc42d6ea0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bc71e1572cbe2e1f85bd487c77a63c46cf4b5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bc71e1572cbe2e1f85bd487c77a63c46cf4b5bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bc71e1572cbe2e1f85bd487c77a63c46cf4b5bb"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 33,
      "deletions": 31
    },
    "files": [
      {
        "sha": "de74593bb18587dd32c63dfcfe3a57fd905f7b89",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 31,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1d6581eca4508838cd339cc19c72efc42d6ea0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1d6581eca4508838cd339cc19c72efc42d6ea0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2d1d6581eca4508838cd339cc19c72efc42d6ea0",
        "patch": "@@ -195,15 +195,10 @@ namespace {\n     struct QueuedBlock {\n         uint256 hash;\n         CBlockIndex* pindex;     //!< Optional.\n-        int64_t nTime;           //!< Time of \"getdata\" request in microseconds.\n         bool fValidatedHeaders;  //!< Whether this block has validated headers at the time of request.\n-        int64_t nTimeDisconnect; //!< The timeout for this block request (for disconnecting a slow peer)\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n-    /** Number of blocks in flight with validated headers. */\n-    int nQueuedValidatedHeaders = 0;\n-\n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n \n@@ -212,6 +207,9 @@ namespace {\n \n     /** Dirty block file entries. */\n     set<int> setDirtyFileInfo;\n+\n+    /** Number of peers from which we're downloading blocks. */\n+    int nPeersWithValidatedDownloads = 0;\n } // anon namespace\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -259,6 +257,8 @@ struct CNodeState {\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n     list<QueuedBlock> vBlocksInFlight;\n+    //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n+    int64_t nDownloadingSince;\n     int nBlocksInFlight;\n     int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n@@ -276,6 +276,7 @@ struct CNodeState {\n         pindexBestHeaderSent = NULL;\n         fSyncStarted = false;\n         nStallingSince = 0;\n+        nDownloadingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n@@ -310,12 +311,6 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-// Returns time at which to timeout block request (nTime in microseconds)\n-int64_t GetBlockTimeout(int64_t nTime, int nValidatedQueuedBefore, const Consensus::Params &consensusParams)\n-{\n-    return nTime + 500000 * consensusParams.nPowTargetSpacing * (4 + nValidatedQueuedBefore);\n-}\n-\n void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     LOCK(cs_main);\n     CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n@@ -335,11 +330,12 @@ void FinalizeNode(NodeId nodeid) {\n     }\n \n     BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n-        nQueuedValidatedHeaders -= entry.fValidatedHeaders;\n         mapBlocksInFlight.erase(entry.hash);\n     }\n     EraseOrphansFor(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n+    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n+    assert(nPeersWithValidatedDownloads >= 0);\n \n     mapNodeState.erase(nodeid);\n }\n@@ -350,8 +346,15 @@ bool MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n-        nQueuedValidatedHeaders -= itInFlight->second.second->fValidatedHeaders;\n         state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+            // Last validated block on the queue was received.\n+            nPeersWithValidatedDownloads--;\n+        }\n+        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+            // First block on the queue was received, update the start download time for the next one\n+            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+        }\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n@@ -369,12 +372,17 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    int64_t nNow = GetTimeMicros();\n-    QueuedBlock newentry = {hash, pindex, nNow, pindex != NULL, GetBlockTimeout(nNow, nQueuedValidatedHeaders, consensusParams)};\n-    nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n+    QueuedBlock newentry = {hash, pindex, pindex != NULL};\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += newentry.fValidatedHeaders;\n+    if (state->nBlocksInFlight == 1) {\n+        // We're starting a block download (batch) from this peer.\n+        state->nDownloadingSince = GetTimeMicros();\n+    }\n+    if (state->nBlocksInFlightValidHeaders == 1 && pindex != NULL) {\n+        nPeersWithValidatedDownloads++;\n+    }\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n@@ -3894,7 +3902,6 @@ void UnloadBlockIndex()\n     nBlockSequenceId = 1;\n     mapBlockSource.clear();\n     mapBlocksInFlight.clear();\n-    nQueuedValidatedHeaders = 0;\n     nPreferredDownload = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n@@ -5811,24 +5818,15 @@ bool SendMessages(CNode* pto)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n-        // In case there is a block that has been in flight from this peer for (2 + 0.5 * N) times the block interval\n-        // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n-        // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n+        // In case there is a block that has been in flight from this peer for 2 + 0.5 * N times the block interval\n+        // (with N the number of peers from which we're downloading validated blocks), disconnect due to timeout.\n+        // We compensate for other peers to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n-        // We also compare the block download timeout originally calculated against the time at which we'd disconnect\n-        // if we assumed the block were being requested now (ignoring blocks we've requested from this peer, since we're\n-        // only looking at this peer's oldest request).  This way a large queue in the past doesn't result in a\n-        // permanently large window for this block to be delivered (ie if the number of blocks in flight is decreasing\n-        // more quickly than once every 5 minutes, then we'll shorten the download window for this block).\n         if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n-            int64_t nTimeoutIfRequestedNow = GetBlockTimeout(nNow, nQueuedValidatedHeaders - state.nBlocksInFlightValidHeaders, consensusParams);\n-            if (queuedBlock.nTimeDisconnect > nTimeoutIfRequestedNow) {\n-                LogPrint(\"net\", \"Reducing block download timeout for peer=%d block=%s, orig=%d new=%d\\n\", pto->id, queuedBlock.hash.ToString(), queuedBlock.nTimeDisconnect, nTimeoutIfRequestedNow);\n-                queuedBlock.nTimeDisconnect = nTimeoutIfRequestedNow;\n-            }\n-            if (queuedBlock.nTimeDisconnect < nNow) {\n+            int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n+            if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->id);\n                 pto->fDisconnect = true;\n             }"
      },
      {
        "sha": "68fcf8e7c986ebc0f5ce15ec325e328eac78c1b7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1d6581eca4508838cd339cc19c72efc42d6ea0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1d6581eca4508838cd339cc19c72efc42d6ea0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2d1d6581eca4508838cd339cc19c72efc42d6ea0",
        "patch": "@@ -106,6 +106,10 @@ static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static const unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Block download timeout base, expressed in millionths of the block interval (i.e. 20 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 2000000;\n+/** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n \n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;"
      }
    ]
  },
  {
    "sha": "0e24bbf679c95784ed5514a6a1f2fbf99dd97725",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTI0YmJmNjc5Yzk1Nzg0ZWQ1NTE0YTZhMWYyZmJmOTlkZDk3NzI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-04T11:35:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-07T10:13:10Z"
      },
      "message": "Self check after the last peer is removed",
      "tree": {
        "sha": "d17bf024bc51afab2e69ff7253bde4e880ad5747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d17bf024bc51afab2e69ff7253bde4e880ad5747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e24bbf679c95784ed5514a6a1f2fbf99dd97725",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e24bbf679c95784ed5514a6a1f2fbf99dd97725",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e24bbf679c95784ed5514a6a1f2fbf99dd97725",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e24bbf679c95784ed5514a6a1f2fbf99dd97725/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d1d6581eca4508838cd339cc19c72efc42d6ea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1d6581eca4508838cd339cc19c72efc42d6ea0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1d6581eca4508838cd339cc19c72efc42d6ea0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87c727b28feef9b5270775269225cfc85fb8583e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e24bbf679c95784ed5514a6a1f2fbf99dd97725/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e24bbf679c95784ed5514a6a1f2fbf99dd97725/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0e24bbf679c95784ed5514a6a1f2fbf99dd97725",
        "patch": "@@ -338,6 +338,13 @@ void FinalizeNode(NodeId nodeid) {\n     assert(nPeersWithValidatedDownloads >= 0);\n \n     mapNodeState.erase(nodeid);\n+\n+    if (mapNodeState.empty()) {\n+        // Do a consistency check after the last peer is removed.\n+        assert(mapBlocksInFlight.empty());\n+        assert(nPreferredDownload == 0);\n+        assert(nPeersWithValidatedDownloads == 0);\n+    }\n }\n \n // Requires cs_main."
      }
    ]
  }
]