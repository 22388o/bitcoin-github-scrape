[
  {
    "sha": "faa1a749428a195af784633eb78e1df5d6a0e875",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWExYTc0OTQyOGExOTVhZjc4NDYzM2ViNzhlMWRmNWQ2YTBlODc1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-29T14:41:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-07T17:04:02Z"
      },
      "message": "tx pool: Use class methods to hide raw map iterator impl details",
      "tree": {
        "sha": "f3daeda06c5e1d50f177e2bfd7580161f25ff359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3daeda06c5e1d50f177e2bfd7580161f25ff359"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa1a749428a195af784633eb78e1df5d6a0e875",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbkq+CAAoJEM4rdWl+aaVI6mgMAIInTd0X4X83P3h4hw6MJ00q\niouc0k8LQM5CYtQ8NVM1qvwgPvitnBJFLwOXo2DkpS7S2bAn2WsL0HPQxWET3gG3\n0VSc3sHY8U0E129QOAAwuasnhMuNjB6rQUFgp9Uo+Vc5Z1HCmvFIIuz7JSGHl2ps\nRu4CfF5cYRInONH/Cr6mY/kwOtaNwBOegz+iqcS/gYb4wQrXTx92TT3Ty+KIn9dT\nad7eK/9m7sygtCHf19c9SS+VGo5w3ldVBmpZUvS6YJhTsiORp2/CoCXvK7LZEe9J\nkAlCaq+s7/3lIsXxuhbIs9lejS2rMsyAnDr8ERzHxcOfsTR4P7gUkvBFO3EBlHk9\n1+5rL4Qhv3T16xTTOpzwkXErDomRUG1epeEi4bJjjnBQOwYtmAIzrTUTqisfpIgq\nDLJzO8koZyik7WGlp2skRkqpnvY3OurKgUhs9Y1c3OBURQauhL1BcTDdOZftcFgY\nFrGeOhN+xwGUoeAS2sKnF5wzLFsDdWJDhGVVZPrjCg==\n=Eaok\n-----END PGP SIGNATURE-----",
        "payload": "tree f3daeda06c5e1d50f177e2bfd7580161f25ff359\nparent 4799b0932a10c5a48706700a07899b33ef9c8bae\nauthor MarcoFalke <falke.marco@gmail.com> 1532875302 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1536339842 -0400\n\ntx pool: Use class methods to hide raw map iterator impl details\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa1a749428a195af784633eb78e1df5d6a0e875",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa1a749428a195af784633eb78e1df5d6a0e875",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa1a749428a195af784633eb78e1df5d6a0e875/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4799b0932a10c5a48706700a07899b33ef9c8bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4799b0932a10c5a48706700a07899b33ef9c8bae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4799b0932a10c5a48706700a07899b33ef9c8bae"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 46,
      "deletions": 29
    },
    "files": [
      {
        "sha": "3ad93342c4415117470673bdbf3fd233ddf9b275",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1a749428a195af784633eb78e1df5d6a0e875/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1a749428a195af784633eb78e1df5d6a0e875/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=faa1a749428a195af784633eb78e1df5d6a0e875",
        "patch": "@@ -156,9 +156,9 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n-            if (piter != mapTx.end()) {\n-                parentHashes.insert(piter);\n+            boost::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            if (piter) {\n+                parentHashes.insert(*piter);\n                 if (parentHashes.size() + 1 > limitAncestorCount) {\n                     errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n                     return false;\n@@ -364,12 +364,10 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n     // Update transaction for any feeDelta created by PrioritiseTransaction\n     // TODO: refactor so that the fee delta is calculated before inserting\n     // into mapTx.\n-    std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(entry.GetTx().GetHash());\n-    if (pos != mapDeltas.end()) {\n-        const CAmount &delta = pos->second;\n-        if (delta) {\n+    CAmount delta{0};\n+    ApplyDelta(entry.GetTx().GetHash(), delta);\n+    if (delta) {\n             mapTx.modify(newit, update_fee_delta(delta));\n-        }\n     }\n \n     // Update cachedInnerUsage to include contained transaction's usage.\n@@ -391,11 +389,8 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    for (const uint256 &phash : setParentTransactions) {\n-        txiter pit = mapTx.find(phash);\n-        if (pit != mapTx.end()) {\n+    for (const auto& pit : GetIterSet(setParentTransactions)) {\n             UpdateParent(newit, pit, true);\n-        }\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n     UpdateEntryForAncestors(newit, setAncestors);\n@@ -864,6 +859,29 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n     mapDeltas.erase(hash);\n }\n \n+const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n+{\n+    const auto it = mapNextTx.find(prevout);\n+    return it == mapNextTx.end() ? nullptr : it->second;\n+}\n+\n+boost::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n+{\n+    auto it = mapTx.find(txid);\n+    if (it != mapTx.end()) return it;\n+    return boost::optional<txiter>{};\n+}\n+\n+CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const\n+{\n+    CTxMemPool::setEntries ret;\n+    for (const auto& h : hashes) {\n+        const auto mi = GetIter(h);\n+        if (mi) ret.insert(*mi);\n+    }\n+    return ret;\n+}\n+\n bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++)"
      },
      {
        "sha": "913501fd66cb123228654c3554f0b7680479e0f0",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1a749428a195af784633eb78e1df5d6a0e875/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1a749428a195af784633eb78e1df5d6a0e875/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=faa1a749428a195af784633eb78e1df5d6a0e875",
        "patch": "@@ -566,7 +566,15 @@ class CTxMemPool\n     void ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n-public:\n+    /** Get the transaction in the pool that spends the same prevout */\n+    const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** Returns an iterator to the given hash, if found */\n+    boost::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     /** Remove a set of transactions from the mempool.\n      *  If a transaction is in this set, then all in-mempool descendants must\n      *  also be in the set, unless this transaction is being removed for being\n@@ -639,7 +647,7 @@ class CTxMemPool\n         return totalTxSize;\n     }\n \n-    bool exists(uint256 hash) const\n+    bool exists(const uint256& hash) const\n     {\n         LOCK(cs);\n         return (mapTx.count(hash) != 0);"
      },
      {
        "sha": "2ad2422618f43809f1a669cb60dae77b9c2eca70",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 15,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa1a749428a195af784633eb78e1df5d6a0e875/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa1a749428a195af784633eb78e1df5d6a0e875/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=faa1a749428a195af784633eb78e1df5d6a0e875",
        "patch": "@@ -602,10 +602,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     std::set<uint256> setConflicts;\n     for (const CTxIn &txin : tx.vin)\n     {\n-        auto itConflicting = pool.mapNextTx.find(txin.prevout);\n-        if (itConflicting != pool.mapNextTx.end())\n-        {\n-            const CTransaction *ptxConflicting = itConflicting->second;\n+        const CTransaction* ptxConflicting = pool.GetConflictTx(txin.prevout);\n+        if (ptxConflicting) {\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n                 // Allow opt-out of transaction replacement by setting\n@@ -786,16 +784,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n             std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n-            CTxMemPool::setEntries setIterConflicting;\n-            for (const uint256 &hashConflicting : setConflicts)\n-            {\n-                CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n-                if (mi == pool.mapTx.end())\n-                    continue;\n-\n-                // Save these to avoid repeated lookups\n-                setIterConflicting.insert(mi);\n-\n+            const CTxMemPool::setEntries setIterConflicting = pool.GetIterSet(setConflicts);\n+            for (const auto& mi : setIterConflicting) {\n                 // Don't allow the replacement to reduce the feerate of the\n                 // mempool.\n                 //\n@@ -861,11 +851,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     // Rather than check the UTXO set - potentially expensive -\n                     // it's cheaper to just check if the new input refers to a\n                     // tx that's in the mempool.\n-                    if (pool.mapTx.find(tx.vin[j].prevout.hash) != pool.mapTx.end())\n+                    if (pool.exists(tx.vin[j].prevout.hash)) {\n                         return state.DoS(0, false,\n                                          REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\", false,\n                                          strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                                   hash.ToString(), j));\n+                    }\n                 }\n             }\n "
      }
    ]
  }
]