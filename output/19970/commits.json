[
  {
    "sha": "df7a0ab34606c6203eb53ff4061f656293ab0f7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjdhMGFiMzQ2MDZjNjIwM2ViNTNmZjQwNjFmNjU2MjkzYWIwZjdm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-17T23:34:25Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-18T05:21:54Z"
      },
      "message": "sync.h: fix LockAssertion error reporting",
      "tree": {
        "sha": "cdedd6e24bd31b890739854df65786ce7b6aecb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdedd6e24bd31b890739854df65786ce7b6aecb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7a0ab34606c6203eb53ff4061f656293ab0f7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7a0ab34606c6203eb53ff4061f656293ab0f7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df7a0ab34606c6203eb53ff4061f656293ab0f7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7a0ab34606c6203eb53ff4061f656293ab0f7f/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be3af4f31089726267ce2dbdd6c9c153bb5aeae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be3af4f31089726267ce2dbdd6c9c153bb5aeae1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be3af4f31089726267ce2dbdd6c9c153bb5aeae1"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "021be731738ec4bbc695899efa9be2bc8dfa6066",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7a0ab34606c6203eb53ff4061f656293ab0f7f/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7a0ab34606c6203eb53ff4061f656293ab0f7f/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=df7a0ab34606c6203eb53ff4061f656293ab0f7f",
        "patch": "@@ -793,19 +793,24 @@ bool ChainstateManager::ProcessNewBlock(...)\n }\n ```\n \n-- When Clang Thread Safety Analysis is unable to determine if a mutex is locked, use `LockAssertion` class instances:\n+- When Clang Thread Safety Analysis is unable to determine that a mutex is always locked, use the `LOCK_ASSERTION` macro to override it:\n \n ```C++\n // net_processing.h\n void RelayTransaction(...) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n // net_processing.cpp\n+static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{ ... }\n+\n void RelayTransaction(...)\n {\n     AssertLockHeld(::cs_main);\n \n     connman.ForEachNode([&txid, &wtxid](CNode* pnode) {\n-        LockAssertion lock(::cs_main);\n+        LOCK_ASSERTION(::cs_main);\n+\n+        CNodeState* state = State(pnode->GetId());\n         ...\n     });\n }"
      },
      {
        "sha": "3bf7aed7459162ef497098b0cd0b4cd8b7e03d9f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7a0ab34606c6203eb53ff4061f656293ab0f7f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7a0ab34606c6203eb53ff4061f656293ab0f7f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=df7a0ab34606c6203eb53ff4061f656293ab0f7f",
        "patch": "@@ -663,7 +663,7 @@ static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connma\n             }\n         }\n         connman.ForNode(nodeid, [&connman](CNode* pfrom){\n-            LockAssertion lock(::cs_main);\n+            LOCK_ASSERTION(::cs_main);\n             uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n@@ -1356,7 +1356,7 @@ void PeerManager::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_\n     }\n \n     m_connman.ForEachNode([this, &pcmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n-        LockAssertion lock(::cs_main);\n+        LOCK_ASSERTION(::cs_main);\n \n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n@@ -1491,7 +1491,7 @@ void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman&\n {\n     connman.ForEachNode([&txid, &wtxid](CNode* pnode)\n     {\n-        LockAssertion lock(::cs_main);\n+        LOCK_ASSERTION(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n         if (state == nullptr) return;\n@@ -3980,7 +3980,7 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n \n         m_connman.ForEachNode([&](CNode* pnode) {\n-            LockAssertion lock(::cs_main);\n+            LOCK_ASSERTION(::cs_main);\n \n             // Ignore non-outbound peers, or nodes marked for disconnect already\n             if (!pnode->IsOutboundOrBlockRelayConn() || pnode->fDisconnect) return;\n@@ -3997,7 +3997,7 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         });\n         if (worst_peer != -1) {\n             bool disconnected = m_connman.ForNode(worst_peer, [&](CNode *pnode) {\n-                LockAssertion lock(::cs_main);\n+                LOCK_ASSERTION(::cs_main);\n \n                 // Only disconnect a peer that has been connected to us for\n                 // some reasonable fraction of our check-frequency, to give"
      },
      {
        "sha": "1e7b2efa738d28e210e6f042042b5b0e47650a25",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7a0ab34606c6203eb53ff4061f656293ab0f7f/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7a0ab34606c6203eb53ff4061f656293ab0f7f/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=df7a0ab34606c6203eb53ff4061f656293ab0f7f",
        "patch": "@@ -356,14 +356,13 @@ class CSemaphoreGrant\n // locked (when it couldn't be determined otherwise).\n struct SCOPED_LOCKABLE LockAssertion\n {\n-    template <typename Mutex>\n-    explicit LockAssertion(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    template <typename MutexType>\n+    explicit LockAssertion(const char* name, const char* file, int line, MutexType* cs) EXCLUSIVE_LOCK_FUNCTION(cs)\n     {\n-#ifdef DEBUG_LOCKORDER\n-        AssertLockHeld(mutex);\n-#endif\n+        AssertLockHeldInternal(name, file, line, cs);\n     }\n     ~LockAssertion() UNLOCK_FUNCTION() {}\n };\n+#define LOCK_ASSERTION(cs)   LockAssertion PASTE2(lockassertion, __COUNTER__)(#cs, __FILE__, __LINE__, &cs)\n \n #endif // BITCOIN_SYNC_H"
      }
    ]
  }
]