[
  {
    "sha": "3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2QwMWZkZjBlNTQwYzRlMDZjZDI3YjZjMGQ2YjZhYmMwMDc2N2Qx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-09T17:24:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-27T12:27:33Z"
      },
      "message": "CreateNewBlock: Check that the produced CBlock is acceptable (except for proof-of-work and merkletree, since those need to be provided later)\n\nThis throws an exception from CreateNewBlock otherwise, which is not safe without #1245!",
      "tree": {
        "sha": "de9998af091e4c6d844db2f91701e66d491b05e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de9998af091e4c6d844db2f91701e66d491b05e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3d8f14dca6a86fa103d86ef125e95372f860c"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "48bf0a54e8ef68087138a418b2faae63ffdf1008",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 12,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
        "patch": "@@ -1252,10 +1252,10 @@ bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     return true;\n }\n \n-bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n+bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock())\n+    if (!CheckBlock(!fJustCheck, !fJustCheck))\n         return false;\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n@@ -1283,7 +1283,13 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n     //// issue here: it doesn't know the version\n-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());\n+    unsigned int nTxPos;\n+    if (fJustCheck)\n+        // FetchInputs treats CDiskTxPos(1,1,1) as a special \"refer to memorypool\" indicator\n+        // Since we're just checking the block and not actually connecting it, it might not (and probably shouldn't) be on the disk to get the transaction from\n+        nTxPos = 1;\n+    else\n+        nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n@@ -1295,7 +1301,8 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n \n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n-        nTxPos += ::GetSerializeSize(tx, SER_DISK);\n+        if (!fJustCheck)\n+            nTxPos += ::GetSerializeSize(tx, SER_DISK);\n \n         MapPrevTx mapInputs;\n         if (!tx.IsCoinBase())\n@@ -1323,16 +1330,19 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n         mapQueuedChanges[tx.GetHash()] = CTxIndex(posThisTx, tx.vout.size());\n     }\n \n+    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+        return false;\n+\n+    if (fJustCheck)\n+        return true;\n+\n     // Write queued txindex changes\n     for (map<uint256, CTxIndex>::iterator mi = mapQueuedChanges.begin(); mi != mapQueuedChanges.end(); ++mi)\n     {\n         if (!txdb.UpdateTxIndex((*mi).first, (*mi).second))\n             return error(\"ConnectBlock() : UpdateTxIndex failed\");\n     }\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n-        return false;\n-\n     // Update block index on disk without changing it in memory.\n     // The memory index structure will be changed after the db commits.\n     if (pindex->pprev)\n@@ -1619,7 +1629,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n \n \n \n-bool CBlock::CheckBlock() const\n+bool CBlock::CheckBlock(bool fCheckPOW, bool fCheckMerkleRoot) const\n {\n     // These are checks that are independent of context\n     // that can be verified before saving an orphan block.\n@@ -1629,7 +1639,7 @@ bool CBlock::CheckBlock() const\n         return DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n-    if (!CheckProofOfWork(GetHash(), nBits))\n+    if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n         return DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n@@ -1657,7 +1667,7 @@ bool CBlock::CheckBlock() const\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkleroot\n-    if (hashMerkleRoot != BuildMerkleTree())\n+    if (fCheckMerkleRoot && hashMerkleRoot != BuildMerkleTree())\n         return DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;\n@@ -3066,6 +3076,9 @@ class COrphan\n uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n+const char* pszDummy = \"\\0\\0\";\n+CScript scriptDummy(std::vector<unsigned char>(pszDummy, pszDummy + sizeof(pszDummy)));\n+\n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n@@ -3224,16 +3237,22 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         nLastBlockSize = nBlockSize;\n         printf(\"CreateNewBlock(): total size %lu\\n\", nBlockSize);\n \n-    }\n     pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n     pblock->UpdateTime(pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock.get());\n     pblock->nNonce         = 0;\n \n+        pblock->vtx[0].vin[0].scriptSig = scriptDummy;\n+        CBlockIndex indexDummy(1, 1, *pblock);\n+        indexDummy.pprev = pindexPrev;\n+        indexDummy.nHeight = pindexPrev->nHeight + 1;\n+        if (!pblock->ConnectBlock(txdb, &indexDummy, true))\n+            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+    }\n+\n     return pblock.release();\n }\n "
      },
      {
        "sha": "996b727b62611bf9b6bd711736e03e15c6655027",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
        "patch": "@@ -1017,11 +1017,11 @@ class CBlock\n \n \n     bool DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n-    bool ConnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n+    bool ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck=false);\n     bool ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions=true);\n     bool SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew);\n     bool AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos);\n-    bool CheckBlock() const;\n+    bool CheckBlock(bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n     bool AcceptBlock();\n \n private:"
      }
    ]
  },
  {
    "sha": "fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmY5OWE5Y2RjMzI5M2IwNWNjYzE4YzJmMmRjNmFlNDVkYTQyNThj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:24:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:24:58Z"
      },
      "message": "Merge branch 'checknewblock_0.6.0' into checknewblock\n\nConflicts:\n\tsrc/main.cpp",
      "tree": {
        "sha": "8e8e0626342e55d852b6040fb04a08df54adc965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8e0626342e55d852b6040fb04a08df54adc965"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "232393e3bda19392d1a9727c81bad1796b6061a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232393e3bda19392d1a9727c81bad1796b6061a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/232393e3bda19392d1a9727c81bad1796b6061a8"
      },
      {
        "sha": "3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd01fdf0e540c4e06cd27b6c0d6b6abc00767d1"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "adcfb194846caa96b0f289e9db6f3b5952173cee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 12,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
        "patch": "@@ -1316,10 +1316,10 @@ bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     return true;\n }\n \n-bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n+bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock())\n+    if (!CheckBlock(!fJustCheck, !fJustCheck))\n         return false;\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n@@ -1339,7 +1339,13 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n     //// issue here: it doesn't know the version\n-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(vtx.size());\n+    unsigned int nTxPos;\n+    if (fJustCheck)\n+        // FetchInputs treats CDiskTxPos(1,1,1) as a special \"refer to memorypool\" indicator\n+        // Since we're just checking the block and not actually connecting it, it might not (and probably shouldn't) be on the disk to get the transaction from\n+        nTxPos = 1;\n+    else\n+        nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(vtx.size());\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n@@ -1362,7 +1368,8 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n \n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n-        nTxPos += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n+        if (!fJustCheck)\n+            nTxPos += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n \n         MapPrevTx mapInputs;\n         if (!tx.IsCoinBase())\n@@ -1390,16 +1397,19 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n         mapQueuedChanges[hashTx] = CTxIndex(posThisTx, tx.vout.size());\n     }\n \n+    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+        return false;\n+\n+    if (fJustCheck)\n+        return true;\n+\n     // Write queued txindex changes\n     for (map<uint256, CTxIndex>::iterator mi = mapQueuedChanges.begin(); mi != mapQueuedChanges.end(); ++mi)\n     {\n         if (!txdb.UpdateTxIndex((*mi).first, (*mi).second))\n             return error(\"ConnectBlock() : UpdateTxIndex failed\");\n     }\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n-        return false;\n-\n     // Update block index on disk without changing it in memory.\n     // The memory index structure will be changed after the db commits.\n     if (pindex->pprev)\n@@ -1703,7 +1713,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n \n \n \n-bool CBlock::CheckBlock() const\n+bool CBlock::CheckBlock(bool fCheckPOW, bool fCheckMerkleRoot) const\n {\n     // These are checks that are independent of context\n     // that can be verified before saving an orphan block.\n@@ -1713,7 +1723,7 @@ bool CBlock::CheckBlock() const\n         return DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n-    if (!CheckProofOfWork(GetHash(), nBits))\n+    if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n         return DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n@@ -1751,7 +1761,7 @@ bool CBlock::CheckBlock() const\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkleroot\n-    if (hashMerkleRoot != BuildMerkleTree())\n+    if (fCheckMerkleRoot && hashMerkleRoot != BuildMerkleTree())\n         return DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;\n@@ -3312,6 +3322,9 @@ class COrphan\n uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n+const char* pszDummy = \"\\0\\0\";\n+CScript scriptDummy(std::vector<unsigned char>(pszDummy, pszDummy + sizeof(pszDummy)));\n+\n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n@@ -3469,16 +3482,22 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         nLastBlockSize = nBlockSize;\n         printf(\"CreateNewBlock(): total size %lu\\n\", nBlockSize);\n \n-    }\n     pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n     pblock->UpdateTime(pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock.get());\n     pblock->nNonce         = 0;\n \n+        pblock->vtx[0].vin[0].scriptSig = scriptDummy;\n+        CBlockIndex indexDummy(1, 1, *pblock);\n+        indexDummy.pprev = pindexPrev;\n+        indexDummy.nHeight = pindexPrev->nHeight + 1;\n+        if (!pblock->ConnectBlock(txdb, &indexDummy, true))\n+            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+    }\n+\n     return pblock.release();\n }\n "
      },
      {
        "sha": "fc8d45992329e41224cd718987b01bf7fe3a8970",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
        "patch": "@@ -1016,11 +1016,11 @@ class CBlock\n \n \n     bool DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n-    bool ConnectBlock(CTxDB& txdb, CBlockIndex* pindex);\n+    bool ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck=false);\n     bool ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions=true);\n     bool SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew);\n     bool AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos);\n-    bool CheckBlock() const;\n+    bool CheckBlock(bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n     bool AcceptBlock();\n \n private:"
      }
    ]
  },
  {
    "sha": "148e107da6f3e0f477e773cc3a3cb882ff53dab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDhlMTA3ZGE2ZjNlMGY0NzdlNzczY2MzYTNjYjg4MmZmNTNkYWI0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-22T19:51:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-11T04:26:44Z"
      },
      "message": "Run BDB disk-less for test_bitcoin",
      "tree": {
        "sha": "6ca8d32346ca827c06b90475c27ae0f31dde970c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ca8d32346ca827c06b90475c27ae0f31dde970c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/148e107da6f3e0f477e773cc3a3cb882ff53dab4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e107da6f3e0f477e773cc3a3cb882ff53dab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/148e107da6f3e0f477e773cc3a3cb882ff53dab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e107da6f3e0f477e773cc3a3cb882ff53dab4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf99a9cdc3293b05ccc18c2f2dc6ae45da4258c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 60,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5671993d371fc465d259a290ea605da71bb5920c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 3,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=148e107da6f3e0f477e773cc3a3cb882ff53dab4",
        "patch": "@@ -42,7 +42,8 @@ void CDBEnv::EnvShutdown()\n     {\n         printf(\"EnvShutdown exception: %s (%d)\\n\", e.what(), e.get_errno());\n     }\n-    DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n+    if (!fMockDb)\n+        DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n }\n \n CDBEnv::CDBEnv() : dbenv(0)\n@@ -103,12 +104,48 @@ bool CDBEnv::Open(boost::filesystem::path pathEnv_)\n         return error(\"CDB() : error %d opening database environment\", ret);\n \n     fDbEnvInit = true;\n+    fMockDb = false;\n     return true;\n }\n \n+void CDBEnv::MakeMock()\n+{\n+    if (fDbEnvInit)\n+        throw runtime_error(\"CDBEnv::MakeMock(): already initialized\");\n+\n+    if (fShutdown)\n+        throw runtime_error(\"CDBEnv::MakeMock(): during shutdown\");\n+\n+    printf(\"CDBEnv::MakeMock()\\n\");\n+\n+    dbenv.set_cachesize(1, 0, 1);\n+    dbenv.set_lg_bsize(10485760*4);\n+    dbenv.set_lg_max(10485760);\n+    dbenv.set_lk_max_locks(10000);\n+    dbenv.set_lk_max_objects(10000);\n+    dbenv.set_flags(DB_AUTO_COMMIT, 1);\n+    dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n+    int ret = dbenv.open(NULL,\n+                     DB_CREATE     |\n+                     DB_INIT_LOCK  |\n+                     DB_INIT_LOG   |\n+                     DB_INIT_MPOOL |\n+                     DB_INIT_TXN   |\n+                     DB_THREAD     |\n+                     DB_PRIVATE,\n+                     S_IRUSR | S_IWUSR);\n+    if (ret > 0)\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock(): error %d opening database environment\", ret));\n+\n+    fDbEnvInit = true;\n+    fMockDb = true;\n+}\n+\n void CDBEnv::CheckpointLSN(std::string strFile)\n {\n     dbenv.txn_checkpoint(0, 0, 0);\n+    if (fMockDb)\n+        return;\n     dbenv.lsn_reset(strFile.c_str(), 0);\n }\n \n@@ -138,8 +175,17 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n         {\n             pdb = new Db(&bitdb.dbenv, 0);\n \n+            bool fMockDb = bitdb.IsMock();\n+            if (fMockDb)\n+            {\n+                DbMpoolFile*mpf = pdb->get_mpf();\n+                ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n+                if (ret != 0)\n+                    throw runtime_error(strprintf(\"CDB() : failed to configure for no temp file backing for database %s\", pszFile));\n+            }\n+\n             ret = pdb->open(NULL,      // Txn pointer\n-                            pszFile,   // Filename\n+                            fMockDb ? NULL : pszFile,   // Filename\n                             \"main\",    // Logical db name\n                             DB_BTREE,  // Database type\n                             nFlags,    // Flags\n@@ -337,7 +383,8 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv.txn_checkpoint(0, 0, 0);\n                 if (!IsChainFile(strFile) || fDetachDB) {\n                     printf(\"%s detach\\n\", strFile.c_str());\n-                    dbenv.lsn_reset(strFile.c_str(), 0);\n+                    if (!fMockDb)\n+                        dbenv.lsn_reset(strFile.c_str(), 0);\n                 }\n                 printf(\"%s closed\\n\", strFile.c_str());\n                 mapFileUseCount.erase(mi++);"
      },
      {
        "sha": "4a08bf10a14a3d3f8e4e351a68f1acd2e533b9da",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=148e107da6f3e0f477e773cc3a3cb882ff53dab4",
        "patch": "@@ -35,6 +35,7 @@ class CDBEnv\n private:\n     bool fDetachDB;\n     bool fDbEnvInit;\n+    bool fMockDb;\n     boost::filesystem::path pathEnv;\n \n     void EnvShutdown();\n@@ -47,6 +48,8 @@ class CDBEnv\n \n     CDBEnv();\n     ~CDBEnv();\n+    void MakeMock();\n+    bool IsMock() { return fMockDb; };\n     bool Open(boost::filesystem::path pathEnv_);\n     void Close();\n     void Flush(bool fShutdown);"
      },
      {
        "sha": "cae0bb6baf56e1097b565dc66dc6df43e574c10e",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/148e107da6f3e0f477e773cc3a3cb882ff53dab4/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=148e107da6f3e0f477e773cc3a3cb882ff53dab4",
        "patch": "@@ -1,6 +1,7 @@\n #define BOOST_TEST_MODULE Bitcoin Test Suite\n #include <boost/test/unit_test.hpp>\n \n+#include \"db.h\"\n #include \"main.h\"\n #include \"wallet.h\"\n \n@@ -14,13 +15,18 @@ struct TestingSetup {\n     TestingSetup() {\n         fPrintToConsole = true; // don't want to write to debug.log file\n         noui_connect();\n-        pwalletMain = new CWallet();\n+        bitdb.MakeMock();\n+        LoadBlockIndex(true);\n+        bool fFirstRun;\n+        pwalletMain = new CWallet(\"wallet.dat\");\n+        pwalletMain->LoadWallet(fFirstRun);\n         RegisterWallet(pwalletMain);\n     }\n     ~TestingSetup()\n     {\n         delete pwalletMain;\n         pwalletMain = NULL;\n+        bitdb.Flush(true);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "639b61d78e9038f217644c47c4e72306159c9822",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzliNjFkNzhlOTAzOGYyMTc2NDRjNDdjNGU3MjMwNjE1OWM5ODIy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-22T21:55:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-12T16:35:34Z"
      },
      "message": "Tests for CreateNewBlock",
      "tree": {
        "sha": "51c9d519b7276965d7b4e56474ba22919132c0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51c9d519b7276965d7b4e56474ba22919132c0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/639b61d78e9038f217644c47c4e72306159c9822",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639b61d78e9038f217644c47c4e72306159c9822",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/639b61d78e9038f217644c47c4e72306159c9822",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639b61d78e9038f217644c47c4e72306159c9822/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "148e107da6f3e0f477e773cc3a3cb882ff53dab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/148e107da6f3e0f477e773cc3a3cb882ff53dab4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/148e107da6f3e0f477e773cc3a3cb882ff53dab4"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 200,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e02cbe5c2c0533f154e0f5c154a8f2c2d5d13266",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639b61d78e9038f217644c47c4e72306159c9822/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639b61d78e9038f217644c47c4e72306159c9822/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=639b61d78e9038f217644c47c4e72306159c9822",
        "patch": "@@ -653,6 +653,15 @@ bool CTxMemPool::remove(CTransaction &tx)\n     return true;\n }\n \n+void\n+CTxMemPool::clear()\n+{\n+    LOCK(cs);\n+    mapTx.clear();\n+    mapNextTx.clear();\n+    ++nTransactionsUpdated;\n+}\n+\n void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n     vtxid.clear();"
      },
      {
        "sha": "301badcca933523ebebc77a6612c18ec992c0a72",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639b61d78e9038f217644c47c4e72306159c9822/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639b61d78e9038f217644c47c4e72306159c9822/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=639b61d78e9038f217644c47c4e72306159c9822",
        "patch": "@@ -1606,6 +1606,7 @@ class CTxMemPool\n                 bool fCheckInputs, bool* pfMissingInputs);\n     bool addUnchecked(const uint256& hash, CTransaction &tx);\n     bool remove(CTransaction &tx);\n+    void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n \n     unsigned long size()"
      },
      {
        "sha": "3c6039541e6b66bc305b27711a96f7af8e7b43e2",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 190,
        "deletions": 0,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639b61d78e9038f217644c47c4e72306159c9822/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639b61d78e9038f217644c47c4e72306159c9822/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=639b61d78e9038f217644c47c4e72306159c9822",
        "patch": "@@ -1,12 +1,202 @@\n #include <boost/test/unit_test.hpp>\n \n+#include \"init.h\"\n+#include \"main.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"wallet.h\"\n \n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n BOOST_AUTO_TEST_SUITE(miner_tests)\n \n+static\n+struct {\n+    unsigned char extranonce;\n+    unsigned int nonce;\n+} blockinfo[] = {\n+    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n+    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n+    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n+    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n+    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n+    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n+    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n+    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n+    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n+    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n+    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n+    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n+    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n+    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n+    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n+    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n+    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n+    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n+    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n+    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n+    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n+    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n+    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n+    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n+    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n+    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n+    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n+    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n+};\n+\n+// NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n+BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n+{\n+    CReserveKey reservekey(pwalletMain);\n+    CBlock *pblock;\n+    CTransaction tx;\n+    CScript script;\n+    uint256 hash;\n+\n+    // Simple block creation, nothing special yet:\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+\n+    // We can't make transactions until we have inputs\n+    // Therefore, load 100 blocks :)\n+    std::vector<CTransaction*>txFirst;\n+    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n+    {\n+        pblock->nTime = pindexBest->GetMedianTimePast()+1;\n+        pblock->vtx[0].vin[0].scriptSig = CScript();\n+        pblock->vtx[0].vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n+        pblock->vtx[0].vin[0].scriptSig.push_back(pindexBest->nHeight);\n+        pblock->vtx[0].vout[0].scriptPubKey = CScript();\n+        if (txFirst.size() < 2)\n+            txFirst.push_back(new CTransaction(pblock->vtx[0]));\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+        pblock->nNonce = blockinfo[i].nonce;\n+        assert(ProcessBlock(NULL, pblock));\n+        pblock->hashPrevBlock = pblock->GetHash();\n+    }\n+    delete pblock;\n+\n+    // Just to make sure we can still make simple blocks\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+\n+    // block sigops > limit: 1000 CHECKMULTISIG + 1\n+    tx.vin.resize(1);\n+    // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG\n+    tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.n = 0;\n+    tx.vout.resize(1);\n+    tx.vout[0].nValue = 5000000000LL;\n+    for (unsigned int i = 0; i < 1001; ++i)\n+    {\n+        tx.vout[0].nValue -= 1000000;\n+        hash = tx.GetHash();\n+        mempool.addUnchecked(hash, tx);\n+        tx.vin[0].prevout.hash = hash;\n+    }\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // block size > limit\n+    tx.vin[0].scriptSig = CScript();\n+    // 18 * (520char + DROP) + OP_1 = 9433 bytes\n+    std::vector<unsigned char> vchData(520);\n+    for (unsigned int i = 0; i < 18; ++i)\n+        tx.vin[0].scriptSig << vchData << OP_DROP;\n+    tx.vin[0].scriptSig << OP_1;\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vout[0].nValue = 5000000000LL;\n+    for (unsigned int i = 0; i < 128; ++i)\n+    {\n+        tx.vout[0].nValue -= 10000000;\n+        hash = tx.GetHash();\n+        mempool.addUnchecked(hash, tx);\n+        tx.vin[0].prevout.hash = hash;\n+    }\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // orphan in mempool\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // child with higher priority than parent\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vout[0].nValue = 4900000000LL;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    tx.vin[0].prevout.hash = hash;\n+    tx.vin.resize(2);\n+    tx.vin[1].scriptSig = CScript() << OP_1;\n+    tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[1].prevout.n = 0;\n+    tx.vout[0].nValue = 5900000000LL;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // coinbase in mempool\n+    tx.vin.resize(1);\n+    tx.vin[0].prevout.SetNull();\n+    tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n+    tx.vout[0].nValue = 0;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // invalid (pre-p2sh) txn in mempool\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.n = 0;\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vout[0].nValue = 4900000000LL;\n+    script = CScript() << OP_0;\n+    tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    tx.vin[0].prevout.hash = hash;\n+    tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n+    tx.vout[0].nValue -= 1000000;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash,tx);\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // double spend txn pair in mempool\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].scriptPubKey = CScript() << OP_1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    tx.vout[0].scriptPubKey = CScript() << OP_2;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, tx);\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    mempool.clear();\n+\n+    // subsidy changing\n+    int nHeight = pindexBest->nHeight;\n+    pindexBest->nHeight = 209999;\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    pindexBest->nHeight = 210000;\n+    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    delete pblock;\n+    pindexBest->nHeight = nHeight;\n+}\n+\n BOOST_AUTO_TEST_CASE(sha256transform_equality)\n {\n     unsigned int pSHA256InitState[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};"
      }
    ]
  }
]