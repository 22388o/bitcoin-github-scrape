luke-jr,2012-05-10T00:38:23Z,This is bugged. ConnectBlock requires the block to be on the disk already :(\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5615558,5615558,
luke-jr,2012-05-10T00:50:05Z,"In fact, this might even corrupt the blkindex.dat somehow, so if you tried it, I suggest rebuilding with -loadblock :/\n",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5615710,5615710,
luke-jr,2012-05-10T04:49:39Z,"OK, this seems to work now.\n",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5618107,5618107,
luke-jr,2012-05-19T19:19:40Z,"Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found.\n",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5804142,5804142,
luke-jr,2012-05-23T05:45:55Z,Now includes tests for CreateNewBlock\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5865621,5865621,
luke-jr,2012-05-27T13:06:10Z,"Added comments per sipa's request, rebased on master, and fixed a bug in diskless BDB I found testing.\n",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5953430,5953430,
luke-jr,2012-05-28T22:56:14Z,"getmemorypool's caching mostly makes testing this impossible, but I did some vague performance testing by disabling it (so every call goes to CreateNewBlock):\ngit master: 1063 transactions/sec\nchecknewblock: 473 transactions/sec\nchecknewblock with signature checking skipped: 782 transactions/sec\n\nIMO, even the worst-case scenario of 0.00321 seconds per transaction processed is worth the addit",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-5973239,5973239,
sipa,2012-05-30T16:42:12Z,ACK (together with #1245). I really like having unit tests that test blockchains.\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6014803,6014803,
jgarzik,2012-06-27T14:51:23Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6605462,6605462,
sipa,2012-06-27T14:57:50Z,@luke-jr Can you rebase #1245 and this? I'd like to merge.\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6605636,6605636,
luke-jr,2012-06-27T15:17:54Z,Rebased. #1245 did not need rebasing.\n,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6606213,6606213,
gavinandresen,2012-07-12T15:19:00Z,Does not compile 32 bit:\n\ntest/miner_tests.cpp:89: error: integer constant is too large for ‘long’ type\ntest/miner_tests.cpp:109: error: integer constant is too large for ‘long’ type\ntest/miner_tests.cpp:131: error: integer constant is too large for ‘long’ type\ntest/miner_tests.cpp:139: error: integer constant is too large for ‘long’ type\ntest/miner_tests.cpp:161: error: integer constant is ,https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6938022,6938022,
luke-jr,2012-07-12T16:38:09Z,"Explicitly made the literals long long. Apparently ""long long"" was not a standard type until C++11, and compilers implementing it as an extension did not support mere numeric literals bigger than long (the C++11 standard requires these literals be handled properly). GCC 4.5 works with both ways. In any case, being explicit doesn't seem like it hurts, so I've added that. Let me know if it still doe",https://github.com/bitcoin/bitcoin/pull/1246#issuecomment-6940406,6940406,
sipa,2012-05-26T17:56:43Z,Why can't this formula be used in the justcheck case as well?\n,https://github.com/bitcoin/bitcoin/pull/1246#discussion_r885814,885814,src/main.cpp
sipa,2012-05-26T18:02:02Z,Why the indenting change? And is this part always necessary?\n,https://github.com/bitcoin/bitcoin/pull/1246#discussion_r885817,885817,src/main.cpp
luke-jr,2012-05-26T18:24:00Z,"Position 1,1,1 is ""magic"" in FetchInputs to refer to the memory pool. Otherwise, it will try to find it on disk\n",https://github.com/bitcoin/bitcoin/pull/1246#discussion_r885851,885851,src/main.cpp
luke-jr,2012-05-26T18:26:32Z,"The end-brace releasing the main/mempool lock scopes is removed so that it remains constant until ConnectBlock finishes checking it.\nThe code in between could be indented to clarify, but the diff is easier to read this way.\n",https://github.com/bitcoin/bitcoin/pull/1246#discussion_r885852,885852,src/main.cpp
sipa,2012-05-27T11:55:51Z,"Ok, can you add a comment to explain that?\n",https://github.com/bitcoin/bitcoin/pull/1246#discussion_r886374,886374,src/main.cpp
sipa,2012-05-27T11:57:16Z,And is this piece of the code necessary in non-fJustCheck mode?\n,https://github.com/bitcoin/bitcoin/pull/1246#discussion_r886376,886376,src/main.cpp
luke-jr,2012-05-27T12:06:28Z,"This is part of CreateNewBlock, which always calls ConnectBlock with fJustCheck. A dummy scriptSig is needed to pass the ""scriptSig must be between 2 and 100 octets long"" rule.\n",https://github.com/bitcoin/bitcoin/pull/1246#discussion_r886378,886378,src/main.cpp
sipa,2012-05-27T12:11:34Z,This line becomes tx.vout[0].scriptPubKey.SetDestination(script.GetID()); after #1357.\n,https://github.com/bitcoin/bitcoin/pull/1246#discussion_r886384,886384,src/test/miner_tests.cpp
sipa,2012-05-27T12:27:20Z,Of course - you always want to check whether the created block is valid.\n,https://github.com/bitcoin/bitcoin/pull/1246#discussion_r886391,886391,src/main.cpp
gavinandresen,2012-06-28T20:28:50Z,"This is a very un-C++-ish way of doing this. The C++ Way would be an abstract base CDBEnv class, with concrete subclasses for unit testing (CMockDbEnv or CMemoryDbEnv) and records-to-disk.\n\nBut the use of the global bitdb variable is also very un-c++-ish, and if Mike Hearn's experiments with LevelDB and Pieter's experiments with a new wallet storage format go well this whole subsystem might get ",https://github.com/bitcoin/bitcoin/pull/1246#discussion_r1071659,1071659,src/db.cpp
