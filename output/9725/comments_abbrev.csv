theuni,2017-03-06T22:30:59Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-284555612,284555612,
TheBlueMatt,2017-03-06T23:24:52Z,"To fix the issue @theuni found (""The same set of conflicted transactions is sent here for each block.""), I had to go rewrite a big chunk of how the mempool removal callback logic works. Now what was previously a standalone class which listens to mempool for transactions removed has gone into the ConnectTrace class, which is accessed in ActivateBestChain to generate callbacks.\nAlso, had to rebase",https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-284568275,284568275,
TheBlueMatt,2017-03-07T15:12:50Z,Rebased for trivial conflict from #9605.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-284749354,284749354,
TheBlueMatt,2017-03-07T20:10:00Z,"Added a bunch of comments and additional commit description at @ryanofsky's request. Also, note that the reason the std::vector<CTransactionRef> of conflicted transactions is passed back to ActivateBestChain as a shared_ptr is to make it easy to add that to a queue of events shared between threads later, not for anything in this function, forgot to make that clear when I mentioned this is part of ",https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-284843897,284843897,
TheBlueMatt,2017-03-09T15:05:22Z,Rebased to fix trivial conflict in rpc/mining.cpp,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-285376280,285376280,
sipa,2017-03-29T02:13:42Z,utACK acac363e574470be7ca26ab43b7c32c2beac9d9c.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-289961098,289961098,
kallewoof,2017-04-03T01:39:23Z,utACK 312683b23752bd9bdae365d0695f1ed73d3c1f3b,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-291031421,291031421,
sipa,2017-04-06T08:19:07Z,Needs reb√§se.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-292102794,292102794,
TheBlueMatt,2017-04-07T09:54:15Z,Rebased trivially.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-292493737,292493737,
JeremyRubin,2017-04-10T14:53:34Z,utack 461e49f,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-292974076,292974076,
theuni,2017-04-10T16:37:13Z,cautious utACK b1a6d4cd560fbdb66506841860db03c08ea4bbbc.,https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-293006167,293006167,
jtimon,2017-04-12T23:40:44Z,Nice to learn about 'override',https://github.com/bitcoin/bitcoin/pull/9725#issuecomment-293737192,293737192,
sdaftuar,2017-02-23T15:22:53Z,"Perhaps we should have a comment here explaining that this function is used for all transaction notifications, and not just when things are added to the mempool?  I can imagine a future reader being confused about why BlockConnected and BlockDisconnected both call this function...",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r102736267,102736267,src/zmq/zmqnotificationinterface.cpp
TheBlueMatt,2017-02-23T20:10:56Z,"OK, added a few comments.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r102806507,102806507,src/zmq/zmqnotificationinterface.cpp
theuni,2017-03-06T20:18:37Z,"To help others review, these two functions seem to mesh with current behavior. I don't see how they could possibly be usable by any client, but there ya go.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104512136,104512136,src/zmq/zmqnotificationinterface.cpp
theuni,2017-03-06T20:29:10Z,Mind changing AddToWalletIfInvolvingMe to take a CTransactionRef here? Looks like we end up keeping 2 copies otherwise.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104514485,104514485,src/wallet/wallet.cpp
theuni,2017-03-06T21:18:04Z,The same set of conflicted transactions is sent here for each block.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104524885,104524885,src/validation.cpp
theuni,2017-03-06T22:22:29Z,pindex can no longer be NULL here.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104539518,104539518,src/wallet/wallet.cpp
theuni,2017-03-06T22:28:00Z,"Assert pair.first here too, I think. It'd be nice to doc that the BlockConnected() params are now always non-null.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104540672,104540672,src/validation.cpp
TheBlueMatt,2017-03-06T23:13:52Z,"Fixed, with a lot more code :(.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104549555,104549555,src/validation.cpp
TheBlueMatt,2017-03-06T23:14:04Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104549592,104549592,src/validation.cpp
TheBlueMatt,2017-03-06T23:15:08Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104549790,104549790,src/wallet/wallet.cpp
TheBlueMatt,2017-03-06T23:18:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104550406,104550406,src/wallet/wallet.cpp
ryanofsky,2017-03-07T14:37:06Z,"In commit ""Add pblock to connectTrace at the end of ConnectTip, not start"":\n\nMaybe write ""The block is added to connectTrace only if the connection succeeds."" ? ""Always"" and ""in the case"" imply contradictory things to me.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104680242,104680242,src/validation.cpp
ryanofsky,2017-03-07T14:46:27Z,"In commit ""Add pblock to connectTrace at the end of ConnectTip, not start"":\n\nThis does appear to be doing what the commit message says. But could you add a line like ""Cleanup, no change in behavior"" to the commit message if that is the intention here?\n\nAs someone interested in being able to contribute reviews, and in being able to understand the direction we're taking the code, it's really",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104682862,104682862,src/validation.cpp
ryanofsky,2017-03-07T15:17:47Z,"In commit ""Make ConnectTrace::blocksConnected private, hide behind accessors"":\n\nDoesn't really matter because this is only called in a single place, and that place happens to require a copy. But if you wanted to write this in a move-compatible way (giving callers flexibility to either move or copy), you could write:\n\n```\nvoid BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlo",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104691509,104691509,src/validation.cpp
ryanofsky,2017-03-07T15:18:01Z,"In commit ""Make ConnectTrace::blocksConnected private, hide behind accessors"":\n\nNow we are copying the vector (as well as the shared_ptrs inside) whenever it is accessed, which we weren't doing before. Any reason for this not to return a const reference to the vector to avoid this?\n\nAlso the method itself should be marked const.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104691580,104691580,src/validation.cpp
ryanofsky,2017-03-07T15:21:33Z,"In commit ""Handle conflicted transactions directly in ConnectTrace"":\n\nUsing std::move and emplace would be slightly more efficient. Would also make this code have a more internally consistent style.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104692562,104692562,src/validation.cpp
ryanofsky,2017-03-07T15:23:06Z,"In commit ""Handle conflicted transactions directly in ConnectTrace"":\n\nAgain, I would find it really helpful if the commit message gave a hint about why the change is being made instead of only saying what the change is.\n\nIs this just a cleanup not intended to change behavior? Is it important that signal connect/disconnect no longer happen under cs_main? Please mention in the commit message",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104693002,104693002,src/validation.cpp
ryanofsky,2017-03-07T15:27:02Z,"In commit ""Keep conflictedTxs in ConnectTrace per-block"":\n\nCould construct the vector in the desired state initially (just pass `1` or `{{}}` to the constructor) instead of creating it empty and then pushing.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104694067,104694067,src/validation.cpp
ryanofsky,2017-03-07T15:39:13Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace"":\n\nMaybe s/NULL/nullptr/.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104697616,104697616,src/validation.cpp
ryanofsky,2017-03-07T15:52:33Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace"":\n\nMaybe break assert into two lines so it's easier to know which condition failed.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104701476,104701476,src/validation.cpp
ryanofsky,2017-03-07T16:00:18Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace"":\n\nMaybe s/> > />>/.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104703615,104703615,src/validation.cpp
ryanofsky,2017-03-07T16:28:57Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace"":\n\nThis awaitingClear variable never seems to be used anywhere except in asserts. It would definitely be worth mentioning this in a comment on the awaitingClear declaration, because otherwise the state this class is tracking appears to be more complicated than it really is.\n\nAlso, if possible, I think it would b",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104711671,104711671,src/validation.cpp
ryanofsky,2017-03-07T16:38:19Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace"":\n\nCould you add a comment explaining this pop_back behavior? I thought the whole point of adding an initial null block to the blocksConnected vector was to support NotifyEntryRemoved calls prior to any BlockConnected call. But if this will now throw away the results of those calls, why not just avoid creating initi",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104714457,104714457,src/validation.cpp
ryanofsky,2017-03-07T16:52:29Z,"In commit ""SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected"":\n\nRealize you are only moving this, but this TODO comment seems to be describing what the current behavior is, not what the TODO is. Maybe remove TODO at the beginning of this comment, and add ""TODO: \<thing to be done\>"" at the end, where I'm guessing \<thing to be done\> is somehow fixing the race condition.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104718278,104718278,src/wallet/wallet.cpp
ryanofsky,2017-03-07T17:50:26Z,"In commit ""SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected""\n\nCould you update the commit message to explicitly say which of the changes in the commit are changes in behavior as opposed to just internal code reorganization? Maybe the following would be accurate? ""This commit doesn't change the behavior of ZMQ notifications or network message processing in any way. It does slightly",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104732789,104732789,src/wallet/wallet.cpp
ryanofsky,2017-03-07T17:57:53Z,"In commit ""SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected"":\n\nWhat does the part of your commit message that says ""CValidationInterface starts listening to mempool directly, placing it in the middle"" mean?\n\nWasn't CValidationInterface always in the middle between validation code and the various listeners? And aren't the calls to the CValidationInterface still happening in the",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104734533,104734533,src/validationinterface.h
ryanofsky,2017-03-07T18:03:49Z,"In commit ""SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected""\n\n>> Perhaps we should have a comment here\n\n> OK, added a few comments.\n\nFWIW, not seeing a comment here. Maybe they were added elsewhere, but it would seem good to mention right in the top of the function body that this is not only called when a transaction is added to the mempool like the name would suggest. Alt",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104735895,104735895,src/zmq/zmqnotificationinterface.cpp
ryanofsky,2017-03-07T18:09:31Z,"In commit ""Add override to functions using CValidationInterface methods""\n\nI think normally you drop ""virtual"" when you add ""override"" to make the two different types of method declarations more distinct. At least that's the style I'm used to, and we seem to follow it everywhere else we're currently using override.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104737176,104737176,src/net_processing.h
TheBlueMatt,2017-03-07T19:28:14Z,"Is there actually a difference between nullptr and NULL to the compiler (it overrides differently, sometimes, if you're calling a function, no?)",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104756416,104756416,src/validation.cpp
TheBlueMatt,2017-03-07T19:28:32Z,"Heh, I still find the pre-C++11 version to be easier to read :P",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104756495,104756495,src/validation.cpp
TheBlueMatt,2017-03-07T19:30:42Z,"Tweaked, carryover from too-little-diff-change.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104757029,104757029,src/validation.cpp
TheBlueMatt,2017-03-07T19:31:21Z,I prefer to force peoplt to not take the atomic increment hit without changing the code :).,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104757198,104757198,src/validation.cpp
TheBlueMatt,2017-03-07T19:35:19Z,"Oops, indeed. Now it just returns a reference, which should also be fine. The method is not technically const later (without making things mutable), so I'll leave the second part.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104758212,104758212,src/validation.cpp
TheBlueMatt,2017-03-07T19:39:36Z,"Sure, added more to the commit message.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104759201,104759201,src/validation.cpp
TheBlueMatt,2017-03-07T19:43:57Z,"OK, did that for the whole patch set.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104760269,104760269,src/validation.cpp
TheBlueMatt,2017-03-07T19:47:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104761156,104761156,src/validation.cpp
TheBlueMatt,2017-03-07T19:47:29Z,Done.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104761182,104761182,src/validation.cpp
TheBlueMatt,2017-03-07T19:52:13Z,"Sorry, the intention of making conflictedTxs a shared_ptr is so that it can be easily passed to CValidationInterface in a later patchset, not so that we can avoid copy here, forgot to mention that when I split up the patch set.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104762386,104762386,src/validation.cpp
TheBlueMatt,2017-03-07T19:53:53Z,"Indeed, done.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104762813,104762813,src/validation.cpp
TheBlueMatt,2017-03-07T19:54:55Z,"Its removed later in the PR, so probably easier to just leave it",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104763065,104763065,src/wallet/wallet.cpp
TheBlueMatt,2017-03-07T19:59:34Z,It all still happens under cs_main? There are no behavior changes there. I added another line to the commit message.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104764225,104764225,src/validation.cpp
TheBlueMatt,2017-03-07T20:00:18Z,There are no behavior changes here? Everything is still under cs_main from the previous commit.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104764407,104764407,src/wallet/wallet.cpp
TheBlueMatt,2017-03-07T20:01:41Z,"CValidationInterface has never listened to mempool, it was just an interface between the things in validation.cpp and other callers, now its also listening to mempool, putting it in the middle of the various callbacks we have going.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104764762,104764762,src/validationinterface.h
TheBlueMatt,2017-03-07T20:03:57Z,Added another comment.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104765224,104765224,src/zmq/zmqnotificationinterface.cpp
TheBlueMatt,2017-03-07T20:08:11Z,"OK, done.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104766145,104766145,src/net_processing.h
ryanofsky,2017-03-08T15:41:11Z,">Is there actually a difference between nullptr and NULL to the compiler (it overrides differently, sometimes, if you're calling a function, no?)\n\nYes, but I only suggested nullptr because I thought it might be an oversight. (NULL seems retro to me, but if you prefer it, please keep.)",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104945445,104945445,src/validation.cpp
ryanofsky,2017-03-08T15:51:02Z,"> I prefer to force peoplt to not take the atomic increment hit without changing the code :).\n\nYour version forces the atomic increment hit in every case, my version lets callers avoid it in the case where they are moving the shared pointer into the container.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104948081,104948081,src/validation.cpp
ryanofsky,2017-03-08T15:56:02Z,"> > Is it important that signal connect/disconnect no longer happen under cs_main?\n\n> It all still happens under cs_main? There are no behavior changes there. I added another line to the commit message.\n\nThe NotifyEntryRemoved.connect and disconnect calls happen in the ConnectTrace constructor/destructor above the LOCK(cs_main) call, instead of below it like before. Guessing this probably ",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104949416,104949416,src/validation.cpp
ryanofsky,2017-03-08T16:05:28Z,"> > The wallet now no longer releases cs_main and cs_wallet between transactions when it is processing multiple transactions from the same block.\n\n> There are no behavior changes here? Everything is still under cs_main from the previous commit.\n\nEverything is still under cs_main, but previously cs_main and cs_wallet were released between processing individual transactions in the block, whi",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104951802,104951802,src/wallet/wallet.cpp
ryanofsky,2017-03-08T16:10:49Z,"> CValidationInterface has never listened to mempool, it was just an interface between the things in validation.cpp and other callers, now its also listening to mempool, putting it in the middle of the various callbacks we have going.\n\nI guess I don't understand what ""listening to mempool"" means. CValidationInterface is a class with methods, and the methods seem to be called from the same plac",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104953316,104953316,src/validationinterface.h
ryanofsky,2017-03-08T16:29:06Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace""\n\nCould / should you `assert(blocksConnected.back().conflictedTxs.empty())` here?",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104958171,104958171,src/validation.cpp
ryanofsky,2017-03-08T16:36:39Z,"In commit ""Handle SyncTransaction in ActivateBestChain instead of ConnectTrace""\n\nWhat do you think of my suggestion to get merge the ClearBlocksConnected and GetBlocksConnected methods into a single method so you can get rid of the awaitingClear variable and all the asserts? \n\nLink: https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104711671\n\nSeems better to prevent the interfac",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104960141,104960141,src/validation.cpp
TheBlueMatt,2017-03-08T17:22:15Z,"Ahh, indeed, I hate this C++11 stuff, anyway, I took the proposed change.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104971889,104971889,src/validation.cpp
TheBlueMatt,2017-03-08T17:47:15Z,Took this change (as a part of larger changes).,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104977598,104977598,src/validation.cpp
TheBlueMatt,2017-03-08T17:49:09Z,Made the class use-once instead.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104978005,104978005,src/validation.cpp
TheBlueMatt,2017-03-08T17:51:17Z,"Argh, I believe that could be a race which triggers a reachable assertion if there are two ActivateBestChain's going at once, moved the class into the cs_main lock, which simplified the whole thing a bit.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104978525,104978525,src/validation.cpp
TheBlueMatt,2017-03-08T17:58:08Z,"Ahh, OK, split the commit.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104980158,104980158,src/wallet/wallet.cpp
TheBlueMatt,2017-03-08T18:04:15Z,"Ahh, I see the issue. Yes, this is actually referring to something further in the change-set, but not in this PR (the full changeset is at https://github.com/TheBlueMatt/bitcoin/commits/2017-01-wallet-cache-inmempool, this is referring to https://github.com/TheBlueMatt/bitcoin/commit/71683dc0d8a00e16211194aaa66bfea1ae265f45).",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r104981491,104981491,src/validationinterface.h
ryanofsky,2017-03-09T14:15:20Z,"In commit ""SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected"":\n\nThis commit is currently removing LOCK2 at the top of SyncTransaction and then copying it 4 times over each place where SyncTransaction is called. Not a big deal, I guess, since the locks move again in the next commit. But just to be clear, what I was trying to suggest was only moving the locks in the _next_ commit, an",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r105172038,105172038,src/wallet/wallet.cpp
TheBlueMatt,2017-03-09T15:00:18Z,"Ahh, oops, whatever, I'll just leave it.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r105182611,105182611,src/wallet/wallet.cpp
JeremyRubin,2017-03-28T18:35:34Z,Is this really missing?,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108502288,108502288,src/zmq/zmqnotificationinterface.h
JeremyRubin,2017-03-28T18:43:38Z,Maybe use std::move on the shared_ptr because we don't seem to use it after this point.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108504557,108504557,src/validation.cpp
JeremyRubin,2017-03-28T18:59:09Z,"This is an API change probably outside the scope of this PR, but:\n\nIt might be nice to refactor ConnectTip to return an rvalue reference to a shared_ptr (and std::move pthisBlock) and have the caller decide what to do with it, because a connecttrace isn't really relevant to ConnectTip. Failing ConnectTip can return nullptr. (Could also keep the as-is ConnectTip around, calling the suggested ve",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108508829,108508829,src/validation.cpp
JeremyRubin,2017-03-28T19:08:37Z,nit: extra whitespace,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108511218,108511218,src/validation.cpp
JeremyRubin,2017-03-28T19:11:26Z,"Worth doing a shrink_to_fit/swap on empty vector here?\n\n```c++\n\nstd::vector<std::vector<CTransactionRef>>(1).swap(conflictedTxs);\n\n```",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108511808,108511808,src/validation.cpp
JeremyRubin,2017-03-28T19:20:08Z,"I think given where we call BlockConnected you could make pblock be an rvalue and move from the caller, saving the pass by copy.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108513792,108513792,src/validation.cpp
JeremyRubin,2017-03-28T19:21:41Z,"Can you set a flag so that doing things with the instance after calling GetBlocksConnected is an assert(blocks_not_gotten)?\n\nOtherwise, could you return a pair of iterators instead?",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108514145,108514145,src/validation.cpp
JeremyRubin,2017-03-28T19:38:23Z,please use make_shared,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108517781,108517781,src/rpc/mining.cpp
JeremyRubin,2017-03-28T19:38:46Z,make_shared,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108517857,108517857,src/wallet/wallet.cpp
JeremyRubin,2017-03-28T19:41:30Z,nit: could refactor API to pass up an rvalue reference rather than take an arg.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108518435,108518435,src/validationinterface.h
JeremyRubin,2017-03-28T19:48:55Z,You probably don't need to use a ref to a CTransactionRef because CWalletTx is going to make a copy anyways -- you could just move it from the CWalletTx constructor.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108519987,108519987,src/wallet/wallet.cpp
TheBlueMatt,2017-03-28T20:25:28Z,"Yes, there is an std::list in CZMQNotificationInterface. It might not fail build due to current header organization, but it should be included if its used (and I believe it failed build when I was making changes).",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108527880,108527880,src/zmq/zmqnotificationinterface.h
TheBlueMatt,2017-03-28T20:27:43Z,"Well the other thing is I'd like to move the new mempool disconnect cache stuff into ConnectTrace, at which point ConnectTip again will end up needing to know about the connecttrace object. Anyway, agreed, lets table this for future work.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108528396,108528396,src/validation.cpp
TheBlueMatt,2017-03-28T20:29:10Z,Done.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108528728,108528728,src/validation.cpp
TheBlueMatt,2017-03-28T20:32:04Z,"Hmm, its removed by the end and there is no equivalent vector on which to do so, so I think its fine.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108529403,108529403,src/validation.cpp
TheBlueMatt,2017-03-28T20:36:51Z,"Likely, but the copy-from-rvalue is mostly free, and as you previously pointed out the caller now does std::move, so I dont think it matters.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108530562,108530562,src/validation.cpp
TheBlueMatt,2017-03-28T20:39:08Z,"Its already there implicitly, and I was trying to pair back the million asserts I had in this code (because if you have NotifyEntryRemoved(), you will assert the pindex on the back is empty, and BlockConnected will assert that its setting a pindex, so if you try to call either it will fail as the back().pindex is no longer null).",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108531071,108531071,src/validation.cpp
TheBlueMatt,2017-03-28T20:39:31Z,Done.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108531167,108531167,src/rpc/mining.cpp
TheBlueMatt,2017-03-28T20:43:30Z,"CWalletTx now copies the ref that is passed in, so using a ref here should avoid a complete copy?",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108532099,108532099,src/wallet/wallet.cpp
TheBlueMatt,2017-03-28T20:44:42Z,I'll leave that for someone else in a later PR.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108532380,108532380,src/validationinterface.h
TheBlueMatt,2017-03-28T20:44:46Z,Done,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108532392,108532392,src/wallet/wallet.cpp
TheBlueMatt,2017-03-28T20:48:08Z,Done,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108533173,108533173,src/validation.cpp
sipa,2017-03-29T01:24:39Z,"Agree, we shouldn't rely on indirect includes.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108574758,108574758,src/zmq/zmqnotificationinterface.h
JeremyRubin,2017-03-29T02:46:48Z,"Ah, I was viewing the diff and didn't realize it was truncated, so I didn't see the list :) ACK the include.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108581806,108581806,src/zmq/zmqnotificationinterface.h
sdaftuar,2017-03-29T19:11:35Z,"nit: ""and and""",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108762239,108762239,src/validation.cpp
sdaftuar,2017-03-29T19:41:32Z,"This is a second call to GetBlocksConnected(), which violates the single-use requirement.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108768338,108768338,src/validation.cpp
TheBlueMatt,2017-03-30T01:07:46Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108822523,108822523,src/validation.cpp
TheBlueMatt,2017-03-30T01:11:25Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9725#discussion_r108822863,108822863,src/validation.cpp
JeremyRubin,2017-03-30T18:43:50Z,"Maybe worth explicitly differentiating the cause though -- back() being null could be caused for two reasons, and if you call twice with 0 blocksconnected it will cause UB on the second call. Also, that @sdaftuar found a double call so it's worth having this.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r109005922,109005922,src/validation.cpp
JeremyRubin,2017-03-30T18:53:34Z,"The CWalletTx constructor is:\n```c++\nCWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n```\n\nI was suggesting to add a constructor\n\n```c++\nCWalletTx(const CWallet* pwalletIn, CTransactionRef&& arg) : CMerkleTx(arg)\n```\n\nand then update L984 to\n\n```c++\n            CWalletTx wtx(this, std::move(ptx));\n```\n\nand update this line to\n",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r109008267,109008267,src/wallet/wallet.cpp
TheBlueMatt,2017-03-30T20:53:10Z,"Ahh, OK, I missed your original point. Anyway, I would still prefer to leave it because it is a smaller diff to not change CWalletTx, and the way it is you dont end up with a variable lying around which has already been std::move()d prior to the end of the function, which I dont super like doing. Anyway, feel free to clean it up in a future PR (also maybe we need a general ""when to && vs const& vs",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r109034578,109034578,src/wallet/wallet.cpp
TheBlueMatt,2017-03-30T20:55:14Z,"Wait, where does it UB? I think it always asserts if you misuse it. Anyway, no need to make asserts overly complicated, the preconditions here are well-documented, the asserts are probably just as useful to remove completely as leave there.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r109035097,109035097,src/validation.cpp
bulldozer00,2017-04-10T08:36:02Z,"From Cpp Core Guidelines (https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-nullptr)\n\nES.47: Use nullptr rather than 0 or NULL ()\n\nReadability. Minimize surprises: nullptr cannot be confused with an int. nullptr also has a well-specified (very restrictive) type, and thus works in more scenarios where type deduction might do the wrong thing on NULL or 0.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r110599753,110599753,src/validation.cpp
jnewbery,2017-04-10T20:39:24Z,"Now that `AddToWalletIfInvolvingMe()` is called with `pindexBlockConnected` set to NULL when the transaction isn't in a block, can we remove the magic -1 value for `posInBlock` (and change the `if (posInBlock != -1)` into `if (pindexBlockConnected != NULL)`)?",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r110757861,110757861,src/wallet/wallet.cpp
TheBlueMatt,2017-04-10T20:48:02Z,"Sure, go for it. Still gonna have to pass in two parameters either way, sadly :/.",https://github.com/bitcoin/bitcoin/pull/9725#discussion_r110759607,110759607,src/wallet/wallet.cpp
