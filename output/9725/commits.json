[
  {
    "sha": "f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWU5YTAxOWE0YmNlZmY2ODE5YTEwNjk2ZjBlYThlYzVjOThhNDll",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T23:27:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:52:38Z"
      },
      "message": "Include missing #include in zmqnotificationinterface.h",
      "tree": {
        "sha": "14a03c671532649b56a3a97be52216516eeb861d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14a03c671532649b56a3a97be52216516eeb861d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c28670e92b6422eb7576f074446238f9f221999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c28670e92b6422eb7576f074446238f9f221999"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f22a539a3e88e8b1ada937e35e2c7a40be7bd110",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"validationinterface.h\"\n #include <string>\n #include <map>\n+#include <list>\n \n class CBlockIndex;\n class CZMQAbstractNotifier;"
      }
    ]
  },
  {
    "sha": "822000cf82ce78954209df0bcf56b90c0f42e9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjIwMDBjZjgyY2U3ODk1NDIwOWRmMGJjZjU2YjkwYzBmNDJlOWI0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-06T22:11:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:41Z"
      },
      "message": "Add pblock to connectTrace at the end of ConnectTip, not start\n\nThis makes ConnectTip responsible for the ConnectTrace instead\nof splitting the logic between ActivateBestChainStep and ConnectTip",
      "tree": {
        "sha": "a6347c2d986b44c6d191d3ac9a55a6f3255d6ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6347c2d986b44c6d191d3ac9a55a6f3255d6ecf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/822000cf82ce78954209df0bcf56b90c0f42e9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822000cf82ce78954209df0bcf56b90c0f42e9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/822000cf82ce78954209df0bcf56b90c0f42e9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822000cf82ce78954209df0bcf56b90c0f42e9b4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5e9a019a4bceff6819a10696f0ea8ec5c98a49e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ff38f608133741b471f3f52607688f922d12e354",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/822000cf82ce78954209df0bcf56b90c0f42e9b4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/822000cf82ce78954209df0bcf56b90c0f42e9b4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=822000cf82ce78954209df0bcf56b90c0f42e9b4",
        "patch": "@@ -2219,24 +2219,23 @@ struct ConnectTrace {\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  *\n- * The block is always added to connectTrace (either after loading from disk or by copying\n- * pblock) - if that is not intended, care must be taken to remove the last entry in\n- * blocksConnected in case of failure.\n+ * The block is added to connectTrace if connection succeeds.\n  */\n bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n+    std::shared_ptr<const CBlock> pthisBlock;\n     if (!pblock) {\n         std::shared_ptr<CBlock> pblockNew = std::make_shared<CBlock>();\n-        connectTrace.blocksConnected.emplace_back(pindexNew, pblockNew);\n         if (!ReadBlockFromDisk(*pblockNew, pindexNew, chainparams.GetConsensus()))\n             return AbortNode(state, \"Failed to read block\");\n+        pthisBlock = pblockNew;\n     } else {\n-        connectTrace.blocksConnected.emplace_back(pindexNew, pblock);\n+        pthisBlock = pblock;\n     }\n-    const CBlock& blockConnecting = *connectTrace.blocksConnected.back().second;\n+    const CBlock& blockConnecting = *pthisBlock;\n     // Apply the block atomically to the chain state.\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n     int64_t nTime3;\n@@ -2270,6 +2269,8 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001);\n+\n+    connectTrace.blocksConnected.emplace_back(pindexNew, std::move(pthisBlock));\n     return true;\n }\n \n@@ -2388,8 +2389,6 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     state = CValidationState();\n                     fInvalidFound = true;\n                     fContinue = false;\n-                    // If we didn't actually connect the block, don't notify listeners about it\n-                    connectTrace.blocksConnected.pop_back();\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...)."
      }
    ]
  },
  {
    "sha": "29e6e231c88904d0e17187b116db5a958d952bcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWU2ZTIzMWM4ODkwNGQwZTE3MTg3YjExNmRiNWE5NThkOTUyYmNm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-06T22:14:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:42Z"
      },
      "message": "Make ConnectTrace::blocksConnected private, hide behind accessors",
      "tree": {
        "sha": "fee4b48b6eec4c540ce14fb7b622b6385bef08ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fee4b48b6eec4c540ce14fb7b622b6385bef08ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29e6e231c88904d0e17187b116db5a958d952bcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e6e231c88904d0e17187b116db5a958d952bcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29e6e231c88904d0e17187b116db5a958d952bcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e6e231c88904d0e17187b116db5a958d952bcf/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "822000cf82ce78954209df0bcf56b90c0f42e9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822000cf82ce78954209df0bcf56b90c0f42e9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/822000cf82ce78954209df0bcf56b90c0f42e9b4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f2c90e028b85608c9e1cc86ed9a80cd4765f7c51",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e6e231c88904d0e17187b116db5a958d952bcf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e6e231c88904d0e17187b116db5a958d952bcf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=29e6e231c88904d0e17187b116db5a958d952bcf",
        "patch": "@@ -2212,7 +2212,17 @@ static int64_t nTimePostConnect = 0;\n  * part of a single ActivateBestChainStep call.\n  */\n struct ConnectTrace {\n+private:\n     std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;\n+\n+public:\n+    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n+        blocksConnected.emplace_back(pindex, std::move(pblock));\n+    }\n+\n+    std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > >& GetBlocksConnected() {\n+        return blocksConnected;\n+    }\n };\n \n /**\n@@ -2270,7 +2280,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs]\\n\", (nTime6 - nTime1) * 0.001, nTimeTotal * 0.000001);\n \n-    connectTrace.blocksConnected.emplace_back(pindexNew, std::move(pthisBlock));\n+    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n     return true;\n }\n \n@@ -2499,7 +2509,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n             // Transactions in the connected block are notified\n-            for (const auto& pair : connectTrace.blocksConnected) {\n+            for (const auto& pair : connectTrace.GetBlocksConnected()) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);\n                 for (unsigned int i = 0; i < block.vtx.size(); i++)"
      }
    ]
  },
  {
    "sha": "d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzE2N2JhOWJiZWZjMmU1YjcwNjJmODFjNDgxNTQ3ZjIxYzVlNDRi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-06T22:19:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:42Z"
      },
      "message": "Handle conflicted transactions directly in ConnectTrace",
      "tree": {
        "sha": "5a0ce816036736bb70b875f7516d4ca59496186f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a0ce816036736bb70b875f7516d4ca59496186f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3167ba9bbefc2e5b7062f81c481547f21c5e44b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e6e231c88904d0e17187b116db5a958d952bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e6e231c88904d0e17187b116db5a958d952bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e6e231c88904d0e17187b116db5a958d952bcf"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 39,
      "deletions": 45
    },
    "files": [
      {
        "sha": "d91afbb7142161be8df295a842921ec7c0084b0c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 45,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3167ba9bbefc2e5b7062f81c481547f21c5e44b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3167ba9bbefc2e5b7062f81c481547f21c5e44b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
        "patch": "@@ -154,39 +154,6 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-/* Use this class to start tracking transactions that are removed from the\n- * mempool and pass all those transactions through SyncTransaction when the\n- * object goes out of scope. This is currently only used to call SyncTransaction\n- * on conflicts removed from the mempool during block connection.  Applied in\n- * ActivateBestChain around ActivateBestStep which in turn calls:\n- * ConnectTip->removeForBlock->removeConflicts\n- */\n-class MemPoolConflictRemovalTracker\n-{\n-private:\n-    std::vector<CTransactionRef> conflictedTxs;\n-    CTxMemPool &pool;\n-\n-public:\n-    MemPoolConflictRemovalTracker(CTxMemPool &_pool) : pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            conflictedTxs.push_back(txRemoved);\n-        }\n-    }\n-\n-    ~MemPoolConflictRemovalTracker() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n-        for (const auto& tx : conflictedTxs) {\n-            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n-        }\n-        conflictedTxs.clear();\n-    }\n-};\n-\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n@@ -2210,19 +2177,46 @@ static int64_t nTimePostConnect = 0;\n /**\n  * Used to track blocks whose transactions were applied to the UTXO state as a\n  * part of a single ActivateBestChainStep call.\n+ *\n+ * This class also tracks transactions that are removed from the mempool as\n+ * conflicts and can be used to pass all those transactions through\n+ * SyncTransaction.\n  */\n-struct ConnectTrace {\n+class ConnectTrace {\n private:\n     std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;\n+    std::vector<CTransactionRef> conflictedTxs;\n+    CTxMemPool &pool;\n \n public:\n+    ConnectTrace(CTxMemPool &_pool) : pool(_pool) {\n+        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n+    }\n+\n+    ~ConnectTrace() {\n+        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n+    }\n+\n     void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n         blocksConnected.emplace_back(pindex, std::move(pblock));\n     }\n \n     std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > >& GetBlocksConnected() {\n         return blocksConnected;\n     }\n+\n+    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n+        if (reason == MemPoolRemovalReason::CONFLICT) {\n+            conflictedTxs.push_back(txRemoved);\n+        }\n+    }\n+\n+    void CallSyncTransactionOnConflictedTransactions() {\n+        for (const auto& tx : conflictedTxs) {\n+            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        }\n+        conflictedTxs.clear();\n+    }\n };\n \n /**\n@@ -2470,18 +2464,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             break;\n \n         const CBlockIndex *pindexFork;\n-        ConnectTrace connectTrace;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Temporarily ensure that mempool removals are notified before\n-              // connected transactions.  This shouldn't matter, but the abandoned\n-              // state of transactions in our wallet is currently cleared when we\n-              // receive another notification and there is a race condition where\n-              // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertently cleared by\n-              // the notification that the conflicted transaction was evicted.\n-            MemPoolConflictRemovalTracker mrt(mempool);\n+            ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n             if (pindexMostWork == NULL) {\n                 pindexMostWork = FindMostWorkChain();\n@@ -2505,8 +2492,15 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             fInitialDownload = IsInitialBlockDownload();\n \n             // throw all transactions though the signal-interface\n-\n-            } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n+            connectTrace.CallSyncTransactionOnConflictedTransactions();\n+\n+            // TODO: Temporarily ensure that mempool removals are notified before\n+            // connected transactions.  This shouldn't matter, but the abandoned\n+            // state of transactions in our wallet is currently cleared when we\n+            // receive another notification and there is a race condition where\n+            // notification of a connected conflict might cause an outside process\n+            // to abandon a transaction and then have it inadvertently cleared by\n+            // the notification that the conflicted transaction was evicted.\n \n             // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.GetBlocksConnected()) {"
      }
    ]
  },
  {
    "sha": "a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTQ3Njg3N2NlN2IwNjE0YTkzYjdiYTQ4ZWJiZTcxMDc1YzBmMjdj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-06T22:22:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Keep conflictedTxs in ConnectTrace per-block",
      "tree": {
        "sha": "5bec153a17e6cdcbab9ee93816ef2393d2dcab35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bec153a17e6cdcbab9ee93816ef2393d2dcab35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1476877ce7b0614a93b7ba48ebbe71075c0f27c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3167ba9bbefc2e5b7062f81c481547f21c5e44b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3167ba9bbefc2e5b7062f81c481547f21c5e44b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cd9d94193945a8ebf6a641c1e2e2c78746ba99c6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1476877ce7b0614a93b7ba48ebbe71075c0f27c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1476877ce7b0614a93b7ba48ebbe71075c0f27c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
        "patch": "@@ -2179,17 +2179,17 @@ static int64_t nTimePostConnect = 0;\n  * part of a single ActivateBestChainStep call.\n  *\n  * This class also tracks transactions that are removed from the mempool as\n- * conflicts and can be used to pass all those transactions through\n- * SyncTransaction.\n+ * conflicts (per block) and can be used to pass all those transactions\n+ * through SyncTransaction.\n  */\n class ConnectTrace {\n private:\n     std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;\n-    std::vector<CTransactionRef> conflictedTxs;\n+    std::vector<std::vector<CTransactionRef> > conflictedTxs;\n     CTxMemPool &pool;\n \n public:\n-    ConnectTrace(CTxMemPool &_pool) : pool(_pool) {\n+    ConnectTrace(CTxMemPool &_pool) : conflictedTxs(1), pool(_pool) {\n         pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n \n@@ -2199,6 +2199,7 @@ class ConnectTrace {\n \n     void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n         blocksConnected.emplace_back(pindex, std::move(pblock));\n+        conflictedTxs.emplace_back();\n     }\n \n     std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > >& GetBlocksConnected() {\n@@ -2207,15 +2208,18 @@ class ConnectTrace {\n \n     void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n         if (reason == MemPoolRemovalReason::CONFLICT) {\n-            conflictedTxs.push_back(txRemoved);\n+            conflictedTxs.back().push_back(txRemoved);\n         }\n     }\n \n     void CallSyncTransactionOnConflictedTransactions() {\n-        for (const auto& tx : conflictedTxs) {\n-            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        for (const auto& txRemovedForBlock : conflictedTxs) {\n+            for (const auto& tx : txRemovedForBlock) {\n+                GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+            }\n         }\n         conflictedTxs.clear();\n+        conflictedTxs.emplace_back();\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "f4043349106067de66a3312ed3485149bdb71247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDA0MzM0OTEwNjA2N2RlNjZhMzMxMmVkMzQ4NTE0OWJkYjcxMjQ3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-07T19:43:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Handle SyncTransaction in ActivateBestChain instead of ConnectTrace\n\nThis makes a later change to move it all into one per-block callback\nsimpler.",
      "tree": {
        "sha": "ed3d7e8c68be2fdacb5227655495b38b0e61bc03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed3d7e8c68be2fdacb5227655495b38b0e61bc03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4043349106067de66a3312ed3485149bdb71247",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4043349106067de66a3312ed3485149bdb71247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4043349106067de66a3312ed3485149bdb71247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4043349106067de66a3312ed3485149bdb71247/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1476877ce7b0614a93b7ba48ebbe71075c0f27c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1476877ce7b0614a93b7ba48ebbe71075c0f27c"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 48,
      "deletions": 26
    },
    "files": [
      {
        "sha": "36b0b4ed582f3c83b432e9ac57050aadecec0f57",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 26,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4043349106067de66a3312ed3485149bdb71247/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4043349106067de66a3312ed3485149bdb71247/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f4043349106067de66a3312ed3485149bdb71247",
        "patch": "@@ -2174,22 +2174,35 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n+struct PerBlockConnectTrace {\n+    CBlockIndex* pindex = NULL;\n+    std::shared_ptr<const CBlock> pblock;\n+    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n+    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n+};\n /**\n  * Used to track blocks whose transactions were applied to the UTXO state as a\n  * part of a single ActivateBestChainStep call.\n  *\n  * This class also tracks transactions that are removed from the mempool as\n  * conflicts (per block) and can be used to pass all those transactions\n  * through SyncTransaction.\n+ *\n+ * This class assumes (and asserts) that the conflicted transactions for a given\n+ * block are added via mempool callbacks prior to the BlockConnected() associated\n+ * with those transactions. If any transactions are marked conflicted, it is\n+ * assumed that an associated block will always be added.\n+ *\n+ * This class is single-use, once you call GetBlocksConnected() you have to throw\n+ * it away and make a new one.\n  */\n class ConnectTrace {\n private:\n-    std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > > blocksConnected;\n-    std::vector<std::vector<CTransactionRef> > conflictedTxs;\n+    std::vector<PerBlockConnectTrace> blocksConnected;\n     CTxMemPool &pool;\n \n public:\n-    ConnectTrace(CTxMemPool &_pool) : conflictedTxs(1), pool(_pool) {\n+    ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n         pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n \n@@ -2198,29 +2211,32 @@ class ConnectTrace {\n     }\n \n     void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        blocksConnected.emplace_back(pindex, std::move(pblock));\n-        conflictedTxs.emplace_back();\n-    }\n-\n-    std::vector<std::pair<CBlockIndex*, std::shared_ptr<const CBlock> > >& GetBlocksConnected() {\n+        assert(!blocksConnected.back().pindex);\n+        assert(pindex);\n+        assert(pblock);\n+        blocksConnected.back().pindex = pindex;\n+        blocksConnected.back().pblock = std::move(pblock);\n+        blocksConnected.emplace_back();\n+    }\n+\n+    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n+        // We always keep one extra block at the end of our list because\n+        // blocks are added after all the conflicted transactions have\n+        // been filled in. Thus, the last entry should always be an empty\n+        // one waiting for the transactions from the next block. We pop\n+        // the last entry here to make sure the list we return is sane.\n+        assert(!blocksConnected.back().pindex);\n+        assert(blocksConnected.back().conflictedTxs->empty());\n+        blocksConnected.pop_back();\n         return blocksConnected;\n     }\n \n     void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n+        assert(!blocksConnected.back().pindex);\n         if (reason == MemPoolRemovalReason::CONFLICT) {\n-            conflictedTxs.back().push_back(txRemoved);\n+            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n         }\n     }\n-\n-    void CallSyncTransactionOnConflictedTransactions() {\n-        for (const auto& txRemovedForBlock : conflictedTxs) {\n-            for (const auto& tx : txRemovedForBlock) {\n-                GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n-            }\n-        }\n-        conflictedTxs.clear();\n-        conflictedTxs.emplace_back();\n-    }\n };\n \n /**\n@@ -2495,9 +2511,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n \n-            // throw all transactions though the signal-interface\n-            connectTrace.CallSyncTransactionOnConflictedTransactions();\n-\n             // TODO: Temporarily ensure that mempool removals are notified before\n             // connected transactions.  This shouldn't matter, but the abandoned\n             // state of transactions in our wallet is currently cleared when we\n@@ -2506,12 +2519,21 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             // to abandon a transaction and then have it inadvertently cleared by\n             // the notification that the conflicted transaction was evicted.\n \n+            // throw all transactions though the signal-interface\n+            auto blocksConnected = connectTrace.GetBlocksConnected();\n+            for (const PerBlockConnectTrace& trace : blocksConnected) {\n+                assert(trace.conflictedTxs);\n+                for (const auto& tx : *trace.conflictedTxs) {\n+                    GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+                }\n+            }\n+\n             // Transactions in the connected block are notified\n-            for (const auto& pair : connectTrace.GetBlocksConnected()) {\n-                assert(pair.second);\n-                const CBlock& block = *(pair.second);\n+            for (const PerBlockConnectTrace& trace : blocksConnected) {\n+                assert(trace.pblock && trace.pindex);\n+                const CBlock& block = *(trace.pblock);\n                 for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                    GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+                    GetMainSignals().SyncTransaction(*block.vtx[i], trace.pindex, i);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      }
    ]
  },
  {
    "sha": "461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjFlNDlmZWUyOTM1YjFlYjRkNGVhN2JhZTMwMjNlNjU1YzBhNmQ4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-30T01:12:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "SyncTransaction->TxAddedToMempool/BlockConnected/Disconnected\n\nThis simplifies fixing the wallet-returns-stale-info issue as we\ncan now hold cs_wallet across an entire block instead of only\nper-tx (though we only actually do so in the next commit).\n\nThis change also removes the NOT_IN_BLOCK constant in favor of only\npassing the CBlockIndex* parameter to SyncTransactions when a new\nblock is being connected, instead of also when a block is being\ndisconnected.\n\nThis change adds a parameter to BlockConnectedDisconnected which\nlists the transactions which were removed from mempool due to\nconfliction as a result of this operation. While its somewhat of a\nshame to make block-validation-logic generate a list of mempool\nchanges to be included in its generated callbacks, fixing this isnt\ntoo hard.\n\nFurther in this change-set, CValidationInterface starts listening\nto mempool directly, placing it in the middle and giving it a bit\nof logic to know how to route notifications from block-validation,\nmempool, etc (though not listening for conflicted-removals yet).",
      "tree": {
        "sha": "243e76a8c99a0059ee867976603a3426f5f8bf3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/243e76a8c99a0059ee867976603a3426f5f8bf3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4043349106067de66a3312ed3485149bdb71247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4043349106067de66a3312ed3485149bdb71247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4043349106067de66a3312ed3485149bdb71247"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 109,
      "deletions": 63
    },
    "files": [
      {
        "sha": "f8382503795cc1fc88803ff01f8f473cdd29c492",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -744,21 +744,23 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock) {\n-    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK)\n-        return;\n-\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(cs_main);\n \n     std::vector<uint256> vOrphanErase;\n-    // Which orphan pool entries must we evict?\n-    for (size_t j = 0; j < tx.vin.size(); j++) {\n-        auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n-        if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n-        for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-            const CTransaction& orphanTx = *(*mi)->second.tx;\n-            const uint256& orphanHash = orphanTx.GetHash();\n-            vOrphanErase.push_back(orphanHash);\n+\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        const CTransaction& tx = *ptx;\n+\n+        // Which orphan pool entries must we evict?\n+        for (size_t j = 0; j < tx.vin.size(); j++) {\n+            auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n+            if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+            for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                const CTransaction& orphanTx = *(*mi)->second.tx;\n+                const uint256& orphanHash = orphanTx.GetHash();\n+                vOrphanErase.push_back(orphanHash);\n+            }\n         }\n     }\n "
      },
      {
        "sha": "4b7e5b0757378de138a8696ecfcccf83a4902fe8",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -30,7 +30,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock);\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted);\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock);"
      },
      {
        "sha": "c32cdf9dfc619a6e4fc3847512ff957c2523e460",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 27,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -949,7 +949,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+    GetMainSignals().TransactionAddedToMempool(ptx);\n \n     return true;\n }\n@@ -2120,7 +2120,8 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n     // Read block from disk.\n-    CBlock block;\n+    std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n+    CBlock& block = *pblock;\n     if (!ReadBlockFromDisk(block, pindexDelete, chainparams.GetConsensus()))\n         return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n@@ -2162,9 +2163,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    for (const auto& tx : block.vtx) {\n-        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n-    }\n+    GetMainSignals().BlockDisconnected(pblock);\n     return true;\n }\n \n@@ -2511,29 +2510,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n \n-            // TODO: Temporarily ensure that mempool removals are notified before\n-            // connected transactions.  This shouldn't matter, but the abandoned\n-            // state of transactions in our wallet is currently cleared when we\n-            // receive another notification and there is a race condition where\n-            // notification of a connected conflict might cause an outside process\n-            // to abandon a transaction and then have it inadvertently cleared by\n-            // the notification that the conflicted transaction was evicted.\n-\n-            // throw all transactions though the signal-interface\n-            auto blocksConnected = connectTrace.GetBlocksConnected();\n-            for (const PerBlockConnectTrace& trace : blocksConnected) {\n-                assert(trace.conflictedTxs);\n-                for (const auto& tx : *trace.conflictedTxs) {\n-                    GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n-                }\n-            }\n-\n-            // Transactions in the connected block are notified\n-            for (const PerBlockConnectTrace& trace : blocksConnected) {\n+            for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n-                const CBlock& block = *(trace.pblock);\n-                for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                    GetMainSignals().SyncTransaction(*block.vtx[i], trace.pindex, i);\n+                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "4d8d7d36783c0094cd92665b56aa0dc5da508f0e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -14,7 +14,9 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -33,7 +35,9 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n@@ -46,7 +50,9 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n-    g_signals.SyncTransaction.disconnect_all_slots();\n+    g_signals.TransactionAddedToMempool.disconnect_all_slots();\n+    g_signals.BlockConnected.disconnect_all_slots();\n+    g_signals.BlockDisconnected.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n     g_signals.NewPoWValidBlock.disconnect_all_slots();\n }"
      },
      {
        "sha": "ddb0afbb4d300520f5c7434856e9e77b68eeaf0c",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -10,13 +10,14 @@\n #include <boost/shared_ptr.hpp>\n #include <memory>\n \n+#include \"primitives/transaction.h\" // CTransaction(Ref)\n+\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n class CBlockIndex;\n class CConnman;\n class CReserveScript;\n-class CTransaction;\n class CValidationInterface;\n class CValidationState;\n class uint256;\n@@ -33,7 +34,9 @@ void UnregisterAllValidationInterfaces();\n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -50,17 +53,15 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for transactions not\n-     * included in connected blocks such as transactions removed from mempool,\n-     * accepted to mempool or appearing in disconnected blocks.*/\n-    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n-    /** Notifies listeners of updated transaction data (transaction, and\n-     * optionally the block it is found in). Called with block data when\n-     * transaction is included in a connected block, and without block data when\n-     * transaction was accepted to mempool, removed from mempool (only when\n-     * removal was due to conflict from connected block), or appeared in a\n-     * disconnected block.*/\n-    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n+    /** Notifies listeners of a transaction having been added to mempool. */\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    /**\n+     * Notifies listeners of a block being connected.\n+     * Provides a vector of transactions evicted from the mempool as a result.\n+     */\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    /** Notifies listeners of a block being disconnected */\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "2b66faf6879b361c45cfc10b4e16c05ab4c8f872",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -1116,11 +1116,10 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n-{\n-    LOCK2(cs_main, cs_wallet);\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindexBlockConnected, int posInBlock) {\n+    const CTransaction& tx = *ptx;\n \n-    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pindexBlockConnected, posInBlock, true))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1133,6 +1132,38 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n     }\n }\n \n+void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+    LOCK2(cs_main, cs_wallet);\n+    SyncTransaction(ptx, NULL, -1);\n+}\n+\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+    // TODO: Tempoarily ensure that mempool removals are notified before\n+    // connected transactions.  This shouldn't matter, but the abandoned\n+    // state of transactions in our wallet is currently cleared when we\n+    // receive another notification and there is a race condition where\n+    // notification of a connected conflict might cause an outside process\n+    // to abandon a transaction and then have it inadvertantly cleared by\n+    // the notification that the conflicted transaction was evicted.\n+\n+    for (const CTransactionRef& ptx : vtxConflicted) {\n+        LOCK2(cs_main, cs_wallet);\n+        SyncTransaction(ptx, NULL, -1);\n+    }\n+    for (size_t i = 0; i < pblock->vtx.size(); i++) {\n+        LOCK2(cs_main, cs_wallet);\n+        SyncTransaction(pblock->vtx[i], pindex, i);\n+    }\n+}\n+\n+void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        LOCK2(cs_main, cs_wallet);\n+        SyncTransaction(ptx, NULL, -1);\n+    }\n+}\n+\n+\n \n isminetype CWallet::IsMine(const CTxIn &txin) const\n {"
      },
      {
        "sha": "d7890ba0cae54a27481b16300388ce44726c1e64",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -661,6 +661,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n+    /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected */\n+    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindexBlockConnected, int posInBlock);\n+\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n@@ -849,7 +852,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n+    void TransactionAddedToMempool(const CTransactionRef& tx) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      },
      {
        "sha": "c06389805680314a4c076a0e0ea7e68de3163ef0",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -144,8 +144,12 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, co\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock)\n+void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx)\n {\n+    // Used by BlockConnected and BlockDisconnected as well, because they're\n+    // all the same external callback.\n+    const CTransaction& tx = *ptx;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;\n@@ -160,3 +164,19 @@ void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CB\n         }\n     }\n }\n+\n+void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+{\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        // Do a normal notify for each transaction added in the block\n+        TransactionAddedToMempool(ptx);\n+    }\n+}\n+\n+void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n+{\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        // Do a normal notify for each transaction removed in block disconnection\n+        TransactionAddedToMempool(ptx);\n+    }\n+}"
      },
      {
        "sha": "7d765d40900107a025f9c32692f289e9657284d2",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "patch": "@@ -25,7 +25,9 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void TransactionAddedToMempool(const CTransactionRef& tx);\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock);\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:"
      }
    ]
  },
  {
    "sha": "e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQ1ZTZjYmJlZjNkY2ExYmM5ZGNlMDk1MTI0ZjdiNzlkMDFhNTRh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-08T17:55:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Hold cs_wallet for whole block [dis]connection processing\n\nThis simplifies fixing the wallet-returns-stale-info issue as we\nnow hold cs_wallet across an entire block instead of only per-tx.",
      "tree": {
        "sha": "26673121295c8302cdd75f5e9d9be0f42a7c0595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26673121295c8302cdd75f5e9d9be0f42a7c0595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/461e49fee2935b1eb4d4ea7bae3023e655c0a6d8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b04037774d49e334971ebda4febbc705f71a53fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
        "patch": "@@ -1138,6 +1138,7 @@ void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n }\n \n void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+    LOCK2(cs_main, cs_wallet);\n     // TODO: Tempoarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n     // state of transactions in our wallet is currently cleared when we\n@@ -1147,18 +1148,17 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     // the notification that the conflicted transaction was evicted.\n \n     for (const CTransactionRef& ptx : vtxConflicted) {\n-        LOCK2(cs_main, cs_wallet);\n         SyncTransaction(ptx, NULL, -1);\n     }\n     for (size_t i = 0; i < pblock->vtx.size(); i++) {\n-        LOCK2(cs_main, cs_wallet);\n         SyncTransaction(pblock->vtx[i], pindex, i);\n     }\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+    LOCK2(cs_main, cs_wallet);\n+\n     for (const CTransactionRef& ptx : pblock->vtx) {\n-        LOCK2(cs_main, cs_wallet);\n         SyncTransaction(ptx, NULL, -1);\n     }\n }"
      }
    ]
  },
  {
    "sha": "acad82f375615d8d238c7d819a48acd7900329f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2FkODJmMzc1NjE1ZDhkMjM4YzdkODE5YTQ4YWNkNzkwMDMyOWYy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-08T19:00:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Add override to functions using CValidationInterface methods",
      "tree": {
        "sha": "705a6b7b1c51216fb29d60891762dc99a416be1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/705a6b7b1c51216fb29d60891762dc99a416be1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acad82f375615d8d238c7d819a48acd7900329f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acad82f375615d8d238c7d819a48acd7900329f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acad82f375615d8d238c7d819a48acd7900329f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acad82f375615d8d238c7d819a48acd7900329f2/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d5e6cbbef3dca1bc9dce095124f7b79d01a54a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f460595bc1094915d4416a16fdefa72f9ad2cc69",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acad82f375615d8d238c7d819a48acd7900329f2/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acad82f375615d8d238c7d819a48acd7900329f2/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=acad82f375615d8d238c7d819a48acd7900329f2",
        "patch": "@@ -30,10 +30,10 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    virtual void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted);\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n-    virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock);\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void BlockChecked(const CBlock& block, const CValidationState& state) override;\n+    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "cf7ca650b9bf8955d69c31530c875a15a66e7bfb",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acad82f375615d8d238c7d819a48acd7900329f2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acad82f375615d8d238c7d819a48acd7900329f2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=acad82f375615d8d238c7d819a48acd7900329f2",
        "patch": "@@ -710,7 +710,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n \n protected:\n-    virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {\n+    void BlockChecked(const CBlock& block, const CValidationState& stateIn) override {\n         if (block.GetHash() != hash)\n             return;\n         found = true;"
      },
      {
        "sha": "eec6f7bc64500454ef3612e405f1c06990b6874a",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acad82f375615d8d238c7d819a48acd7900329f2/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acad82f375615d8d238c7d819a48acd7900329f2/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=acad82f375615d8d238c7d819a48acd7900329f2",
        "patch": "@@ -25,10 +25,10 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void TransactionAddedToMempool(const CTransactionRef& tx);\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted);\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock);\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef& tx) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWYxZTZjZTVlNzg1NDQzNTE5NjQ2NGFhY2UwZGNmN2NlMjFkZDVh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T20:47:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Remove dead-code tracking of requests for blocks we generated",
      "tree": {
        "sha": "fc112b0d20886257053cfa5cf67a36cb044aafd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc112b0d20886257053cfa5cf67a36cb044aafd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acad82f375615d8d238c7d819a48acd7900329f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acad82f375615d8d238c7d819a48acd7900329f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acad82f375615d8d238c7d819a48acd7900329f2"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 0,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0f699328c77c0c1a2c5526c764e39194670e9979",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
        "patch": "@@ -23,12 +23,10 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n-    g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n     g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n     g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -43,7 +41,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockFound.disconnect_all_slots();\n     g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();"
      },
      {
        "sha": "baa04fe312ac35ae56521d1b736dbc9f08bde051",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
        "patch": "@@ -43,7 +43,6 @@ class CValidationInterface {\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n-    virtual void ResetRequestCount(const uint256 &hash) {};\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -79,8 +78,6 @@ struct CMainSignals {\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     /** Notifies listeners that a key for mining is required (coinbase) */\n     boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n-    /** Notifies listeners that a block has been successfully mined */\n-    boost::signals2::signal<void (const uint256 &)> BlockFound;\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */"
      },
      {
        "sha": "127ffd6cf37459937a39fab64e3c49af60c7de52",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f1e6ce5e7854435196464aace0dcf7ce21dd5a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
        "patch": "@@ -964,11 +964,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n-    void ResetRequestCount(const uint256 &hash) override\n-    {\n-        LOCK(cs_wallet);\n-        mapRequestCount[hash] = 0;\n-    };\n     \n     unsigned int GetKeyPoolSize()\n     {"
      }
    ]
  },
  {
    "sha": "1c95e2f9c94f172ddddedeb1358953992f39f8bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzk1ZTJmOWM5NGYxNzJkZGRkZWRlYjEzNTg5NTM5OTJmMzlmOGJk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T21:15:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Use std::shared_ptr instead of boost::shared_ptr in ScriptForMining",
      "tree": {
        "sha": "8c88da5d96bbd4fb70b212f323707e39896d37b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c88da5d96bbd4fb70b212f323707e39896d37b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c95e2f9c94f172ddddedeb1358953992f39f8bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c95e2f9c94f172ddddedeb1358953992f39f8bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c95e2f9c94f172ddddedeb1358953992f39f8bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c95e2f9c94f172ddddedeb1358953992f39f8bd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f1e6ce5e7854435196464aace0dcf7ce21dd5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f1e6ce5e7854435196464aace0dcf7ce21dd5a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d234bb69aec95b2ebbf537b06a9440f65a487d48",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "patch": "@@ -27,7 +27,6 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include <boost/shared_ptr.hpp>\n \n #include <univalue.h>\n \n@@ -95,7 +94,7 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n-UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n     static const int nInnerLoopCount = 0x10000;\n     int nHeightStart = 0;\n@@ -167,7 +166,7 @@ UniValue generate(const JSONRPCRequest& request)\n         nMaxTries = request.params[1].get_int();\n     }\n \n-    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    std::shared_ptr<CReserveScript> coinbaseScript;\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n     // If the keypool is exhausted, no script is returned at all.  Catch this.\n@@ -208,7 +207,7 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n \n-    boost::shared_ptr<CReserveScript> coinbaseScript(new CReserveScript());\n+    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();\n     coinbaseScript->reserveScript = GetScriptForDestination(address.Get());\n \n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);"
      },
      {
        "sha": "083c136f2c60c2a47c6f0c027c3cf12b45f23c35",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <boost/signals2/signal.hpp>\n-#include <boost/shared_ptr.hpp>\n #include <memory>\n \n #include \"primitives/transaction.h\" // CTransaction(Ref)\n@@ -42,7 +41,7 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n+    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -77,7 +76,7 @@ struct CMainSignals {\n      */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (boost::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */"
      },
      {
        "sha": "dc145fd3d2477602673854be5a3ff446b598176c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "patch": "@@ -3376,9 +3376,9 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n     }\n }\n \n-void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n+void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n-    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+    std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);\n     CPubKey pubkey;\n     if (!rKey->GetReservedKey(pubkey))\n         return;"
      },
      {
        "sha": "daae9303994296c9a58b9229a70fcdf728e04198",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c95e2f9c94f172ddddedeb1358953992f39f8bd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "patch": "@@ -28,8 +28,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/shared_ptr.hpp>\n-\n extern CWallet* pwalletMain;\n \n /**\n@@ -963,7 +961,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n+    void GetScriptForMining(std::shared_ptr<CReserveScript> &script) override;\n     \n     unsigned int GetKeyPoolSize()\n     {"
      }
    ]
  },
  {
    "sha": "b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWE2ZDRjZDU2MGZiZGI2NjUwNjg0MTg2MGRiMDNjMDhlYTRiYmJj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-06T23:21:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-07T09:53:43Z"
      },
      "message": "Take a CTransactionRef in AddToWalletIfInvolvingMe to avoid a copy",
      "tree": {
        "sha": "f43c849782eeff69536d2312ccead096621f20e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f43c849782eeff69536d2312ccead096621f20e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a6d4cd560fbdb66506841860db03c08ea4bbbc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c95e2f9c94f172ddddedeb1358953992f39f8bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c95e2f9c94f172ddddedeb1358953992f39f8bd"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1b92c5e747df058899284ba15c2d9bbae7b2ec7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a6d4cd560fbdb66506841860db03c08ea4bbbc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a6d4cd560fbdb66506841860db03c08ea4bbbc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
        "patch": "@@ -966,8 +966,9 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {\n+    const CTransaction& tx = *ptx;\n     {\n         AssertLockHeld(cs_wallet);\n \n@@ -988,7 +989,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            CWalletTx wtx(this, MakeTransactionRef(tx));\n+            CWalletTx wtx(this, ptx);\n \n             // Get merkle branch if transaction was found in a block\n             if (posInBlock != -1)\n@@ -1119,7 +1120,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindexBlockConnected, int posInBlock) {\n     const CTransaction& tx = *ptx;\n \n-    if (!AddToWalletIfInvolvingMe(tx, pindexBlockConnected, posInBlock, true))\n+    if (!AddToWalletIfInvolvingMe(ptx, pindexBlockConnected, posInBlock, true))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1542,7 +1543,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             CBlock block;\n             if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n                 if (!ret) {\n                     ret = pindex;"
      },
      {
        "sha": "05c00326ec090571ae718caec1af34f1b84eeca9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a6d4cd560fbdb66506841860db03c08ea4bbbc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a6d4cd560fbdb66506841860db03c08ea4bbbc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b1a6d4cd560fbdb66506841860db03c08ea4bbbc",
        "patch": "@@ -853,7 +853,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  }
]