[
  {
    "sha": "1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWQ4ZWEyYjczMTM0YmRkOGQ2YjUwNzA0YTAxOWQ0N2FkMjE5MWQ4",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-28T17:19:34Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-28T17:27:22Z"
      },
      "message": "net: remove is{Empty,Full} flags from CBloomFilter, clarify CVE fix",
      "tree": {
        "sha": "e4bb3deda313169ce6e76178df16d78a2bb7ae2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4bb3deda313169ce6e76178df16d78a2bb7ae2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e3fc7492a7d5e58c0ada22617388b6487410f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e3fc7492a7d5e58c0ada22617388b6487410f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e3fc7492a7d5e58c0ada22617388b6487410f82"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 5,
      "deletions": 34
    },
    "files": [
      {
        "sha": "54fcf487e4736fec3f109de908f322c024464dc3",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 23,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
        "patch": "@@ -31,8 +31,6 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n-    isFull(false),\n-    isEmpty(true),\n     nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n@@ -47,15 +45,14 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n \n void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n-    if (isFull)\n+    if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n     for (unsigned int i = 0; i < nHashFuncs; i++)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n         // Sets bit nIndex of vData\n         vData[nIndex >> 3] |= (1 << (7 & nIndex));\n     }\n-    isEmpty = false;\n }\n \n void CBloomFilter::insert(const COutPoint& outpoint)\n@@ -74,10 +71,8 @@ void CBloomFilter::insert(const uint256& hash)\n \n bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n-    if (isFull)\n+    if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n-    if (isEmpty)\n-        return false;\n     for (unsigned int i = 0; i < nHashFuncs; i++)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n@@ -112,10 +107,8 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     bool fFound = false;\n     // Match if the filter contains the hash of tx\n     //  for finding tx when they appear in a block\n-    if (isFull)\n+    if (vData.empty()) // zero-size = \"match-all\" filter\n         return true;\n-    if (isEmpty)\n-        return false;\n     const uint256& hash = tx.GetHash();\n     if (contains(hash))\n         fFound = true;\n@@ -177,19 +170,6 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     return false;\n }\n \n-void CBloomFilter::UpdateEmptyFull()\n-{\n-    bool full = true;\n-    bool empty = true;\n-    for (unsigned int i = 0; i < vData.size(); i++)\n-    {\n-        full &= vData[i] == 0xff;\n-        empty &= vData[i] == 0;\n-    }\n-    isFull = full;\n-    isEmpty = empty;\n-}\n-\n CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)\n {\n     double logFpRate = log(fpRate);"
      },
      {
        "sha": "9173b80d66d081e853a1ee02d7e698b2dd57e3e5",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
        "patch": "@@ -45,8 +45,6 @@ class CBloomFilter\n {\n private:\n     std::vector<unsigned char> vData;\n-    bool isFull;\n-    bool isEmpty;\n     unsigned int nHashFuncs;\n     unsigned int nTweak;\n     unsigned char nFlags;\n@@ -64,7 +62,7 @@ class CBloomFilter\n      * nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n      */\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n-    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n+    CBloomFilter() : nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -90,9 +88,6 @@ class CBloomFilter\n \n     //! Also adds any outputs which match the filter to the filter (to match their spending txes)\n     bool IsRelevantAndUpdate(const CTransaction& tx);\n-\n-    //! Checks for empty and full filters to avoid wasting cpu\n-    void UpdateEmptyFull();\n };\n \n /**"
      },
      {
        "sha": "34017bc04794c69623423b8680855628598ecaca",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
        "patch": "@@ -3193,7 +3193,6 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         {\n             LOCK(pfrom->m_tx_relay->cs_filter);\n             pfrom->m_tx_relay->pfilter.reset(new CBloomFilter(filter));\n-            pfrom->m_tx_relay->pfilter->UpdateEmptyFull();\n             pfrom->m_tx_relay->fRelayTxes = true;\n         }\n         return true;"
      },
      {
        "sha": "7039bf16c1a0a6b21138955480ca2235b8542640",
        "filename": "src/test/fuzz/bloom_filter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/test/fuzz/bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ad8ea2b73134bdd8d6b50704a019d47ad2191d8/src/test/fuzz/bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/bloom_filter.cpp?ref=1ad8ea2b73134bdd8d6b50704a019d47ad2191d8",
        "patch": "@@ -25,7 +25,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         fuzzed_data_provider.ConsumeIntegral<unsigned int>(),\n         static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n     while (fuzzed_data_provider.remaining_bytes() > 0) {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 4)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 3)) {\n         case 0: {\n             const std::vector<unsigned char> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             (void)bloom_filter.contains(b);\n@@ -65,9 +65,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)bloom_filter.IsRelevantAndUpdate(tx);\n             break;\n         }\n-        case 4:\n-            bloom_filter.UpdateEmptyFull();\n-            break;\n         }\n         (void)bloom_filter.IsWithinSizeConstraints();\n     }"
      }
    ]
  }
]