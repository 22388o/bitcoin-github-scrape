laanwj,2020-04-29 09:27:31,"Concept and code review ACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8\nSimpler code is better here, and absolutely, the ""pretend"" reasoning has caused a few people to do unnecessary work here.\n",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-621090280,621090280,
MarcoFalke,2020-04-29 13:31:18,ACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-621208154,621208154,
practicalswift,2020-04-29 18:29:16,Concept ACK ~~but please don't invalidate the existing seed corpus :)~~,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-621385229,621385229,
jnewbery,2020-05-01 21:12:56,We'll cover this in review club next Wednesday: https://bitcoincore.reviews/18806.html,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-622570630,622570630,
meshcollider,2020-05-01 22:48:08,utACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-622599221,622599221,
fjahr,2020-05-05 22:44:04,"Code review ACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8\n\nThanks for clarifying this code!",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624345161,624345161,
jkczyz,2020-05-06 06:47:59,"ACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8\n\nReviewed and verified tests pass (including p2p_filter functional test which exercises this behavior).",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624472815,624472815,
rajarshimaitra,2020-05-06 07:48:42,"Unit tests and functional tests passing (including p2p_filter). \nCode Review ACK.\n\nQuestion: \nIt seems this PR reverts almost all the changes of PR `2914` to fix the bug. Why the bug fix was done using is{Empty,Full} flags if it could have been fixed with a simple `vData.empty()` check in the `insert` and `contains` functions?  \n",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624495632,624495632,
fjahr,2020-05-06 08:38:03,"> It seems this PR reverts almost all the changes of PR `2914` to fix the bug. Why the bug fix was done using is{Empty,Full} flags if it could have been fixed with a simple `vData.empty()` check in the `insert` and `contains` functions?\n\nThat is the covert part of the fix (together with a misleading commit message and merge process). It made it harder to understand that there was a vulnerabili",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624516607,624516607,
vasild,2020-05-06 09:54:52,utACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624552056,624552056,
eriknylund,2020-05-06 16:49:39,"ACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8 reviewed changes, built and ran tests.\n\nRan functional test p2p_filter which includes test for CVE-2013-5700 fix:\n```\n$ test/functional/p2p_filter.py \n2020-05-06T16:50:58.370000Z TestFramework (INFO): Initializing test directory /var/folders/tx/4h1x765x05xd4mkbqgj507dw0000gn/T/bitcoin_func_test_922swrck\n2020-05-06T16:51:00.727000Z TestFramew",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624763786,624763786,
vasild,2020-05-06 19:09:50,@eriknylund an assertion failure is not much different than division by zero - both would terminate the program.,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624835427,624835427,
practicalswift,2020-05-06 20:08:31,@vasild Division by zero is _not_ guaranteed to terminate the program :),https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624863093,624863093,
jnewbery,2020-05-06 20:39:42,"utACK 1ad8ea2b73134bdd8d6b50704a019d47ad2191d8\n\nConcept ACK adding the assert, to document the expectations.",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-624878870,624878870,
theStack,2020-05-07 10:11:10,"I'm neutral on the idea of adding an assert to `Hash()` -- on one hand it documents expectations, on the other hand there is no point in ever calling the hash function outside of the two operations `insert` and `contains` in a bloom filter. Also the performance could decrease a bit if on _every_ single hash calculated (up to 50 per insert/contains operation) an additional assertion condition has t",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-625161128,625161128,
eriknylund,2020-05-07 14:27:57,"> I'm neutral on the idea of adding an assert to `Hash()` -- on one hand it documents expectations, on the other hand there is no point in ever calling the hash function outside of the two operations `insert` and `contains` in a bloom filter. Also the performance could decrease a bit if on _every_ single hash calculated (up to 50 per insert/contains operation) an additional assertion condition has",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-625289235,625289235,
sipa,2020-05-07 16:01:18,"Just a comment/assertion on `Hash` is arguably insufficient. The code `vData[nIndex >> 3]` is always invalid when vData is empty, for any value of nIndex - which happens to exactly match the conditions in which Hash is allowed to be called.",https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-625344606,625344606,
ThomasBucaioni,2020-05-11 16:45:08,All three test suites passed here.,https://github.com/bitcoin/bitcoin/pull/18806#issuecomment-626818769,626818769,
practicalswift,2020-04-29 18:28:50,"Please keep `fuzzed_data_provider.ConsumeIntegralInRange(0, 4)` in order to not invalidate the existing seed corpus :)\n\n_Edit: Please take this as a nit: not something blocking merge._",https://github.com/bitcoin/bitcoin/pull/18806#discussion_r417523993,417523993,src/test/fuzz/bloom_filter.cpp
MarcoFalke,2020-04-29 18:30:42,"I think this is fine. Running the fuzz engine over the existing seeds for a minute or two will adjust the seeds to the new format.\n\nNo strong opinion, though.",https://github.com/bitcoin/bitcoin/pull/18806#discussion_r417525111,417525111,src/test/fuzz/bloom_filter.cpp
laanwj,2020-04-30 08:24:45,I don't think we should hold back code changes just to not 'invalidate the seed corpus'. This is putting the horse behind the cart.,https://github.com/bitcoin/bitcoin/pull/18806#discussion_r417840334,417840334,src/test/fuzz/bloom_filter.cpp
MarcoFalke,2020-04-30 11:23:35,"And to go even further: Any code change to master is invalidating some seeds. So with the logic applied that we shouldn't invalidate the existing seeds, we wouldn't be allowed to do any changes to master anymore.",https://github.com/bitcoin/bitcoin/pull/18806#discussion_r417939129,417939129,src/test/fuzz/bloom_filter.cpp
practicalswift,2020-04-30 12:55:21,"The point here is the *only* effect of from changing `4` to `3` is that it invalidates the existing seed corpus. Not a big deal of course: treat it as a nit :)\n\nOf course no one is suggesting that we should hold back necessary changes to the fuzzers (or to `master` generally!) in order not to invalidate the seed corpus - that would be silly :)",https://github.com/bitcoin/bitcoin/pull/18806#discussion_r417987610,417987610,src/test/fuzz/bloom_filter.cpp
laanwj,2020-04-30 15:17:52,"Okay, yes, I understand your point now.",https://github.com/bitcoin/bitcoin/pull/18806#discussion_r418088902,418088902,src/test/fuzz/bloom_filter.cpp
