meshcollider,2017-10-24T00:34:43Z,"Again, isn't this part of #11535 too? Both are just avoiding unintentional unsigned integer wraparounds?",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338835863,338835863,
practicalswift,2017-10-24T05:30:18Z,"@MeshCollider I thought this one was a bit more interesting than the others and deserved its own PR, but sure I can just add all unintentional unsigned integer wraparounds to #11535. I have a few more to report :-)",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338878359,338878359,
practicalswift,2017-10-24T09:16:12Z,@promag Nit addressed :-),https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338927364,338927364,
promag,2017-10-24T09:19:47Z,ACK de9517d.,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338928278,338928278,
practicalswift,2017-10-24T09:21:33Z,@promag Thanks a lot for reviewing! Would you mind taking a look at the wrap-arounds covered in #11535 too? :-),https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-338928738,338928738,
practicalswift,2017-10-24T14:26:48Z,@sipa What do you think about this change? Do you have time to review? :-),https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-339008829,339008829,
practicalswift,2018-02-22T21:48:31Z,Do we not care about integer wrap-arounds? If so let me know and I'll close :-),https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367833716,367833716,
MarcoFalke,2018-02-22T23:17:38Z,@practicalswift Can you add a test case that fails before this change and passes after this change. This prevents from re-introducing the issue in the future.,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367856119,367856119,
practicalswift,2018-02-23T08:29:16Z,"@MarcoFalke Thanks to the implicit conversion back to the return type `int64_t` the wrap-around is contained to `GetBlockProofEquivalentTime(…)` so I don't think it is possible to construct a test for this.\n\nJudging from the reviews of this PR it seems like the current code's reliance on wrap-around + implicit conversion is quite surprising which in itself is a reason to be explicit here. Expl",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-367942915,367942915,
MarcoFalke,2018-02-23T14:00:16Z,"Ah, sorry. My bad, I didn't read OP.\n\nThen it should be possible to add a test case that (temporarily) wraps around, but passes before and after this change?",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-368016385,368016385,
practicalswift,2018-03-14T19:14:35Z,@MarcoFalke I'm not sure how that test would be constructed since `GetBlockProofEquivalentTime(…)` returns the correct value thanks to the conversion that takes place *after* the unsigned integer wrap-around has taken place. Perhaps I'm missing something? :-),https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-373142342,373142342,
sipa,2018-03-15T01:26:37Z,utACK de9517d59bc9943ec62ca26ed5f7111c9bc73b6c,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-373229550,373229550,
practicalswift,2018-04-16T14:32:29Z,@laanwj Willing to review? :-) ,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-381619930,381619930,
DrahtBot,2018-07-20T20:30:28Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 269 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-406718556,406718556,
DrahtBot,2018-11-09T03:45:40Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#11535](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11535.html) (Avoid unintentional unsigned integer wrapar",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-437240562,437240562,
practicalswift,2018-11-15T22:21:12Z,"I'm doing some PR cleaning and this PR has gotten a bit old :-)\n\nThis PR has received ACK/utACK:s from @MarcoFalke and the original author of the code @sipa (code introduced in f7303f97933be33e34d482cf8348d180c8da2a26).\n\nDoes this PR still stand a chance of getting merged? Let me know otherwise and I'll close :-)",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-439211600,439211600,
meshcollider,2018-11-20T07:20:52Z,utACK https://github.com/bitcoin/bitcoin/pull/11551/commits/d9ab663095a3c2b1e6c2bce70ad897e092b0f068,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-440169772,440169772,
promag,2018-11-20T10:58:36Z,re-utACK d9ab663,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-440232697,440232697,
practicalswift,2018-11-23T15:57:35Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-441274655,441274655,
ken2812221,2018-11-23T17:20:02Z,utACK 58e034266c9beeb83298dd4ac026136fdac21139,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-441290206,441290206,
meshcollider,2018-11-30T21:12:39Z,re-utACK https://github.com/bitcoin/bitcoin/pull/11551/commits/58e034266c9beeb83298dd4ac026136fdac21139,https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-443341031,443341031,
gmaxwell,2018-11-30T21:21:29Z,"This code looks wrong to me.   GetLow64() appears to return a full range uint64 ""return pn[0] | (uint64_t)pn[1] << 32;"".  Simply casting it to int if its out of range would introduce UB where there isn't any potential for UB now.",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-443343272,443343272,
practicalswift,2018-12-01T23:43:18Z,"@gmaxwell That's already taken care of by `if (r.bits() > 63) { … }` on L147, right? :-)\n\n(Pedantic nit: An out-of-range conversion from unsigned to signed would have resulted in implementation-defined behaviour and not UB, right?  Not that implementation-defined behaviour is much better from a distributed consensus perspective :-))",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-443468124,443468124,
gmaxwell,2018-12-02T01:00:49Z,"I was brain-farting a bit and thinking that (signed)(2^63 - 1)*-1  was UB but it's actually the opposite case where -1 times a maximally negative number that I was thinking of (-(signed)(2^63 - 1)-1)*-1. ... I'm hesitant to spend more time reviewing these kinds of changes than they take to write. It was also unclear if bits returned 63 or 64 on 1<<63, and I ultimately wrote a test to check.  It's ",https://github.com/bitcoin/bitcoin/pull/11551#issuecomment-443471659,443471659,
promag,2017-10-24T08:47:21Z,"Correct me if I'm wrong, but if `GetLow64()` result is greater than 9223372036854775807 then the cast result is negative?",https://github.com/bitcoin/bitcoin/pull/11551#discussion_r146492307,146492307,src/chain.cpp
sipa,2017-10-24T08:54:37Z,"It can't be, due to the `if (r.bits() > 63)` above.",https://github.com/bitcoin/bitcoin/pull/11551#discussion_r146494243,146494243,src/chain.cpp
promag,2017-10-24T09:14:03Z,"Ah right, and it's like 2 lines above... Sorry.",https://github.com/bitcoin/bitcoin/pull/11551#discussion_r146499178,146499178,src/chain.cpp
