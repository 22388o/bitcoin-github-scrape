[
  {
    "sha": "c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmRiZmQ1NzJkMjAxYmI0ZDZjYzEyOWMwMWRlNWQ3YWJiMmIyNTY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-09T11:41:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-09T11:41:20Z"
      },
      "message": "Remove alert system\n\nThis completely removes the P2P network alert system.\n\nInternal \"alerts\", such as fork warnings, along with the `-alertnotify`\noption are kept.",
      "tree": {
        "sha": "6eb9e5aa35eeefed3cd4600b9bcf3f9563804774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eb9e5aa35eeefed3cd4600b9bcf3f9563804774"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55294a9fb673ab0a7c99b9c18279fe12a5a07890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55294a9fb673ab0a7c99b9c18279fe12a5a07890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55294a9fb673ab0a7c99b9c18279fe12a5a07890"
      }
    ],
    "stats": {
      "total": 764,
      "additions": 32,
      "deletions": 732
    },
    "files": [
      {
        "sha": "59f5274339c67c004a32cff6c905a31615e8448c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -71,7 +71,6 @@ endif\n # bitcoin core #\n BITCOIN_CORE_H = \\\n   addrman.h \\\n-  alert.h \\\n   amount.h \\\n   arith_uint256.h \\\n   base58.h \\\n@@ -164,7 +163,6 @@ libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n-  alert.cpp \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\"
      },
      {
        "sha": "e69ce2e546e8bfe39749540f2c9f92a8d172e5dd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -27,14 +27,11 @@ JSON_TEST_FILES = \\\n   test/data/tx_valid.json \\\n   test/data/sighash.json\n \n-RAW_TEST_FILES = test/data/alertTests.raw\n-\n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/bignum.h \\\n-  test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\"
      },
      {
        "sha": "ad81e7422645537158ee073f398047994b179d49",
        "filename": "src/alert.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 265,
        "changes": 265,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=55294a9fb673ab0a7c99b9c18279fe12a5a07890",
        "patch": "@@ -1,265 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"alert.h\"\n-\n-#include \"clientversion.h\"\n-#include \"net.h\"\n-#include \"pubkey.h\"\n-#include \"timedata.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-\n-#include <stdint.h>\n-#include <algorithm>\n-#include <map>\n-\n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/thread.hpp>\n-\n-using namespace std;\n-\n-map<uint256, CAlert> mapAlerts;\n-CCriticalSection cs_mapAlerts;\n-\n-void CUnsignedAlert::SetNull()\n-{\n-    nVersion = 1;\n-    nRelayUntil = 0;\n-    nExpiration = 0;\n-    nID = 0;\n-    nCancel = 0;\n-    setCancel.clear();\n-    nMinVer = 0;\n-    nMaxVer = 0;\n-    setSubVer.clear();\n-    nPriority = 0;\n-\n-    strComment.clear();\n-    strStatusBar.clear();\n-    strReserved.clear();\n-}\n-\n-std::string CUnsignedAlert::ToString() const\n-{\n-    std::string strSetCancel;\n-    BOOST_FOREACH(int n, setCancel)\n-        strSetCancel += strprintf(\"%d \", n);\n-    std::string strSetSubVer;\n-    BOOST_FOREACH(const std::string& str, setSubVer)\n-        strSetSubVer += \"\\\"\" + str + \"\\\" \";\n-    return strprintf(\n-        \"CAlert(\\n\"\n-        \"    nVersion     = %d\\n\"\n-        \"    nRelayUntil  = %d\\n\"\n-        \"    nExpiration  = %d\\n\"\n-        \"    nID          = %d\\n\"\n-        \"    nCancel      = %d\\n\"\n-        \"    setCancel    = %s\\n\"\n-        \"    nMinVer      = %d\\n\"\n-        \"    nMaxVer      = %d\\n\"\n-        \"    setSubVer    = %s\\n\"\n-        \"    nPriority    = %d\\n\"\n-        \"    strComment   = \\\"%s\\\"\\n\"\n-        \"    strStatusBar = \\\"%s\\\"\\n\"\n-        \")\\n\",\n-        nVersion,\n-        nRelayUntil,\n-        nExpiration,\n-        nID,\n-        nCancel,\n-        strSetCancel,\n-        nMinVer,\n-        nMaxVer,\n-        strSetSubVer,\n-        nPriority,\n-        strComment,\n-        strStatusBar);\n-}\n-\n-void CAlert::SetNull()\n-{\n-    CUnsignedAlert::SetNull();\n-    vchMsg.clear();\n-    vchSig.clear();\n-}\n-\n-bool CAlert::IsNull() const\n-{\n-    return (nExpiration == 0);\n-}\n-\n-uint256 CAlert::GetHash() const\n-{\n-    return Hash(this->vchMsg.begin(), this->vchMsg.end());\n-}\n-\n-bool CAlert::IsInEffect() const\n-{\n-    return (GetAdjustedTime() < nExpiration);\n-}\n-\n-bool CAlert::Cancels(const CAlert& alert) const\n-{\n-    if (!IsInEffect())\n-        return false; // this was a no-op before 31403\n-    return (alert.nID <= nCancel || setCancel.count(alert.nID));\n-}\n-\n-bool CAlert::AppliesTo(int nVersion, const std::string& strSubVerIn) const\n-{\n-    // TODO: rework for client-version-embedded-in-strSubVer ?\n-    return (IsInEffect() &&\n-            nMinVer <= nVersion && nVersion <= nMaxVer &&\n-            (setSubVer.empty() || setSubVer.count(strSubVerIn)));\n-}\n-\n-bool CAlert::AppliesToMe() const\n-{\n-    return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n-}\n-\n-bool CAlert::RelayTo(CNode* pnode) const\n-{\n-    if (!IsInEffect())\n-        return false;\n-    // don't relay to nodes which haven't sent their version message\n-    if (pnode->nVersion == 0)\n-        return false;\n-    // returns true if wasn't already contained in the set\n-    if (pnode->setKnown.insert(GetHash()).second)\n-    {\n-        if (AppliesTo(pnode->nVersion, pnode->strSubVer) ||\n-            AppliesToMe() ||\n-            GetAdjustedTime() < nRelayUntil)\n-        {\n-            pnode->PushMessage(\"alert\", *this);\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-bool CAlert::CheckSignature(const std::vector<unsigned char>& alertKey) const\n-{\n-    CPubKey key(alertKey);\n-    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature(): verify signature failed\");\n-\n-    // Now unserialize the data\n-    CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);\n-    sMsg >> *(CUnsignedAlert*)this;\n-    return true;\n-}\n-\n-CAlert CAlert::getAlertByHash(const uint256 &hash)\n-{\n-    CAlert retval;\n-    {\n-        LOCK(cs_mapAlerts);\n-        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n-        if(mi != mapAlerts.end())\n-            retval = mi->second;\n-    }\n-    return retval;\n-}\n-\n-bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread)\n-{\n-    if (!CheckSignature(alertKey))\n-        return false;\n-    if (!IsInEffect())\n-        return false;\n-\n-    // alert.nID=max is reserved for if the alert key is\n-    // compromised. It must have a pre-defined message,\n-    // must never expire, must apply to all versions,\n-    // and must cancel all previous\n-    // alerts or it will be ignored (so an attacker can't\n-    // send an \"everything is OK, don't panic\" version that\n-    // cannot be overridden):\n-    int maxInt = std::numeric_limits<int>::max();\n-    if (nID == maxInt)\n-    {\n-        if (!(\n-                nExpiration == maxInt &&\n-                nCancel == (maxInt-1) &&\n-                nMinVer == 0 &&\n-                nMaxVer == maxInt &&\n-                setSubVer.empty() &&\n-                nPriority == maxInt &&\n-                strStatusBar == \"URGENT: Alert key compromised, upgrade required\"\n-                ))\n-            return false;\n-    }\n-\n-    {\n-        LOCK(cs_mapAlerts);\n-        // Cancel previous alerts\n-        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n-        {\n-            const CAlert& alert = (*mi).second;\n-            if (Cancels(alert))\n-            {\n-                LogPrint(\"alert\", \"cancelling alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else if (!alert.IsInEffect())\n-            {\n-                LogPrint(\"alert\", \"expiring alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else\n-                mi++;\n-        }\n-\n-        // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-        {\n-            const CAlert& alert = item.second;\n-            if (alert.Cancels(*this))\n-            {\n-                LogPrint(\"alert\", \"alert already cancelled by %d\\n\", alert.nID);\n-                return false;\n-            }\n-        }\n-\n-        // Add to mapAlerts\n-        mapAlerts.insert(make_pair(GetHash(), *this));\n-        // Notify UI and -alertnotify if it applies to me\n-        if(AppliesToMe())\n-        {\n-            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n-            Notify(strStatusBar, fThread);\n-        }\n-    }\n-\n-    LogPrint(\"alert\", \"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n-    return true;\n-}\n-\n-void\n-CAlert::Notify(const std::string& strMessage, bool fThread)\n-{\n-    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-    if (strCmd.empty()) return;\n-\n-    // Alert text should be plain ascii coming from a trusted source, but to\n-    // be safe we first strip anything not in safeChars, then add single quotes around\n-    // the whole string before passing it to the shell:\n-    std::string singleQuote(\"'\");\n-    std::string safeStatus = SanitizeString(strMessage);\n-    safeStatus = singleQuote+safeStatus+singleQuote;\n-    boost::replace_all(strCmd, \"%s\", safeStatus);\n-\n-    if (fThread)\n-        boost::thread t(runCommand, strCmd); // thread runs free\n-    else\n-        runCommand(strCmd);\n-}"
      },
      {
        "sha": "4f9fff918165e581fa3e85d29afeb02af9416aef",
        "filename": "src/alert.h",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=55294a9fb673ab0a7c99b9c18279fe12a5a07890",
        "patch": "@@ -1,113 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ALERT_H\n-#define BITCOIN_ALERT_H\n-\n-#include \"serialize.h\"\n-#include \"sync.h\"\n-\n-#include <map>\n-#include <set>\n-#include <stdint.h>\n-#include <string>\n-\n-class CAlert;\n-class CNode;\n-class uint256;\n-\n-extern std::map<uint256, CAlert> mapAlerts;\n-extern CCriticalSection cs_mapAlerts;\n-\n-/** Alerts are for notifying old versions if they become too obsolete and\n- * need to upgrade.  The message is displayed in the status bar.\n- * Alert messages are broadcast as a vector of signed data.  Unserializing may\n- * not read the entire buffer if the alert is for a newer version, but older\n- * versions can still relay the original data.\n- */\n-class CUnsignedAlert\n-{\n-public:\n-    int nVersion;\n-    int64_t nRelayUntil;      // when newer nodes stop relaying to newer nodes\n-    int64_t nExpiration;\n-    int nID;\n-    int nCancel;\n-    std::set<int> setCancel;\n-    int nMinVer;            // lowest version inclusive\n-    int nMaxVer;            // highest version inclusive\n-    std::set<std::string> setSubVer;  // empty matches all\n-    int nPriority;\n-\n-    // Actions\n-    std::string strComment;\n-    std::string strStatusBar;\n-    std::string strReserved;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nRelayUntil);\n-        READWRITE(nExpiration);\n-        READWRITE(nID);\n-        READWRITE(nCancel);\n-        READWRITE(setCancel);\n-        READWRITE(nMinVer);\n-        READWRITE(nMaxVer);\n-        READWRITE(setSubVer);\n-        READWRITE(nPriority);\n-\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-        READWRITE(LIMITED_STRING(strStatusBar, 256));\n-        READWRITE(LIMITED_STRING(strReserved, 256));\n-    }\n-\n-    void SetNull();\n-\n-    std::string ToString() const;\n-};\n-\n-/** An alert is a combination of a serialized CUnsignedAlert and a signature. */\n-class CAlert : public CUnsignedAlert\n-{\n-public:\n-    std::vector<unsigned char> vchMsg;\n-    std::vector<unsigned char> vchSig;\n-\n-    CAlert()\n-    {\n-        SetNull();\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(vchMsg);\n-        READWRITE(vchSig);\n-    }\n-\n-    void SetNull();\n-    bool IsNull() const;\n-    uint256 GetHash() const;\n-    bool IsInEffect() const;\n-    bool Cancels(const CAlert& alert) const;\n-    bool AppliesTo(int nVersion, const std::string& strSubVerIn) const;\n-    bool AppliesToMe() const;\n-    bool RelayTo(CNode* pnode) const;\n-    bool CheckSignature(const std::vector<unsigned char>& alertKey) const;\n-    bool ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread = true); // fThread means run -alertnotify in a free-running thread\n-    static void Notify(const std::string& strMessage, bool fThread);\n-\n-    /*\n-     * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n-     */\n-    static CAlert getAlertByHash(const uint256 &hash);\n-};\n-\n-#endif // BITCOIN_ALERT_H"
      },
      {
        "sha": "8432f6fd899d519e5a2b9cb5981720fea5ccd0c0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 65,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -6,7 +6,6 @@\n #include \"main.h\"\n \n #include \"addrman.h\"\n-#include \"alert.h\"\n #include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -1226,6 +1225,26 @@ bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n \n+static void AlertNotify(const std::string& strMessage, bool fThread)\n+{\n+    uiInterface.NotifyAlertChanged();\n+    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+    if (strCmd.empty()) return;\n+\n+    // Alert text should be plain ascii coming from a trusted source, but to\n+    // be safe we first strip anything not in safeChars, then add single quotes around\n+    // the whole string before passing it to the shell:\n+    std::string singleQuote(\"'\");\n+    std::string safeStatus = SanitizeString(strMessage);\n+    safeStatus = singleQuote+safeStatus+singleQuote;\n+    boost::replace_all(strCmd, \"%s\", safeStatus);\n+\n+    if (fThread)\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    else\n+        runCommand(strCmd);\n+}\n+\n void CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n@@ -1245,7 +1264,7 @@ void CheckForkWarningConditions()\n         {\n             std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n                 pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n-            CAlert::Notify(warning, true);\n+            AlertNotify(warning, true);\n         }\n         if (pindexBestForkTip && pindexBestForkBase)\n         {\n@@ -1759,7 +1778,7 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     if (!strWarning.empty())\n     {\n         strMiscWarning = strWarning;\n-        CAlert::Notify(strWarning, true);\n+        AlertNotify(strWarning, true);\n         lastAlertTime = now;\n     }\n }\n@@ -2095,7 +2114,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n             strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n-            CAlert::Notify(strMiscWarning, true);\n+            AlertNotify(strMiscWarning, true);\n             fWarned = true;\n         }\n     }\n@@ -3691,14 +3710,8 @@ void static CheckBlockIndex()\n     assert(nNodes == forward.size());\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// CAlert\n-//\n-\n std::string GetWarnings(const std::string& strFor)\n {\n-    int nPriority = 0;\n     string strStatusBar;\n     string strRPC;\n \n@@ -3711,35 +3724,18 @@ std::string GetWarnings(const std::string& strFor)\n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n-        nPriority = 1000;\n         strStatusBar = strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n-        nPriority = 2000;\n         strStatusBar = strRPC = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n-        nPriority = 2000;\n         strStatusBar = strRPC = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n-    // Alerts\n-    {\n-        LOCK(cs_mapAlerts);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-        {\n-            const CAlert& alert = item.second;\n-            if (alert.AppliesToMe() && alert.nPriority > nPriority)\n-            {\n-                nPriority = alert.nPriority;\n-                strStatusBar = alert.strStatusBar;\n-            }\n-        }\n-    }\n-\n     if (strFor == \"statusbar\")\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n@@ -4023,13 +4019,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n-        // Relay alerts\n-        {\n-            LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-                item.second.RelayTo(pfrom);\n-        }\n-\n         pfrom->fSuccessfullyConnected = true;\n \n         string remoteAddr;\n@@ -4604,37 +4593,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"alert\")\n-    {\n-        CAlert alert;\n-        vRecv >> alert;\n-\n-        uint256 alertHash = alert.GetHash();\n-        if (pfrom->setKnown.count(alertHash) == 0)\n-        {\n-            if (alert.ProcessAlert(Params().AlertKey()))\n-            {\n-                // Relay\n-                pfrom->setKnown.insert(alertHash);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        alert.RelayTo(pnode);\n-                }\n-            }\n-            else {\n-                // Small DoS penalty so peers that send us lots of\n-                // duplicate/expired/invalid-signature/whatever alerts\n-                // eventually get banned.\n-                // This isn't a Misbehaving(100) (immediate ban) because the\n-                // peer might be an older or different implementation with\n-                // a different signature key, etc.\n-                Misbehaving(pfrom->GetId(), 10);\n-            }\n-        }\n-    }\n-\n-\n     else if (strCommand == \"filterload\")\n     {\n         CBloomFilter filter;"
      },
      {
        "sha": "e6ee430b304056369448da3a10ef97d1e609a72a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -7,7 +7,6 @@\n #include \"guiconstants.h\"\n #include \"peertablemodel.h\"\n \n-#include \"alert.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n@@ -128,20 +127,8 @@ void ClientModel::updateNumConnections(int numConnections)\n     emit numConnectionsChanged(numConnections);\n }\n \n-void ClientModel::updateAlert(const QString &hash, int status)\n+void ClientModel::updateAlert()\n {\n-    // Show error message notification for new alert\n-    if(status == CT_NEW)\n-    {\n-        uint256 hash_256;\n-        hash_256.SetHex(hash.toStdString());\n-        CAlert alert = CAlert::getAlertByHash(hash_256);\n-        if(!alert.IsNull())\n-        {\n-            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n-        }\n-    }\n-\n     emit alertsChanged(getStatusBarWarnings());\n }\n \n@@ -218,26 +205,24 @@ static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConn\n                               Q_ARG(int, newNumConnections));\n }\n \n-static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n+static void NotifyAlertChanged(ClientModel *clientmodel)\n {\n-    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n-    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n-                              Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n-                              Q_ARG(int, status));\n+    qDebug() << \"NotifyAlertChanged\";\n+    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n }\n \n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n }"
      },
      {
        "sha": "0e0e0136050852aaceae7471d29bc899c0c8d6c8",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -97,7 +97,7 @@ class ClientModel : public QObject\n public slots:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n-    void updateAlert(const QString &hash, int status);\n+    void updateAlert();\n };\n \n #endif // BITCOIN_QT_CLIENTMODEL_H"
      },
      {
        "sha": "22cb475e024472698ad128235766de398947fad6",
        "filename": "src/test/alert_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 259,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=55294a9fb673ab0a7c99b9c18279fe12a5a07890",
        "patch": "@@ -1,259 +0,0 @@\n-// Copyright (c) 2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for alert system\n-//\n-\n-#include \"alert.h\"\n-#include \"chain.h\"\n-#include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"data/alertTests.raw.h\"\n-\n-#include \"main.h\"\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include \"test/test_bitcoin.h\"\n-\n-#include <fstream>\n-\n-#include <boost/filesystem/operations.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n-\n-#if 0\n-//\n-// alertTests contains 7 alerts, generated with this code:\n-// (SignAndSave code not shown, alert signing key is secret)\n-//\n-{\n-    CAlert alert;\n-    alert.nRelayUntil   = 60;\n-    alert.nExpiration   = 24 * 60 * 60;\n-    alert.nID           = 1;\n-    alert.nCancel       = 0;   // cancels previous messages up to this ID number\n-    alert.nMinVer       = 0;  // These versions are protocol versions\n-    alert.nMaxVer       = 999001;\n-    alert.nPriority     = 1;\n-    alert.strComment    = \"Alert comment\";\n-    alert.strStatusBar  = \"Alert 1\";\n-\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.1.0/\"));\n-    alert.strStatusBar  = \"Alert 1 for Satoshi 0.1.0\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.2.0/\"));\n-    alert.strStatusBar  = \"Alert 1 for Satoshi 0.1.0, 0.2.0\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.clear();\n-    ++alert.nID;\n-    alert.nCancel = 1;\n-    alert.nPriority = 100;\n-    alert.strStatusBar  = \"Alert 2, cancels 1\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.nExpiration += 60;\n-    ++alert.nID;\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.nMinVer = 11;\n-    alert.nMaxVer = 22;\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.strStatusBar  = \"Alert 2 for Satoshi 0.1.0\";\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.1.0/\"));\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.nMinVer = 0;\n-    alert.nMaxVer = 999999;\n-    alert.strStatusBar  = \"Evil Alert'; /bin/ls; echo '\";\n-    alert.setSubVer.clear();\n-    SignAndSave(alert, \"test/alertTests\");\n-}\n-#endif\n-\n-struct ReadAlerts : public TestingSetup\n-{\n-    ReadAlerts()\n-    {\n-        std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n-        CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n-        try {\n-            while (!stream.eof())\n-            {\n-                CAlert alert;\n-                stream >> alert;\n-                alerts.push_back(alert);\n-            }\n-        }\n-        catch (const std::exception&) { }\n-    }\n-    ~ReadAlerts() { }\n-\n-    static std::vector<std::string> read_lines(boost::filesystem::path filepath)\n-    {\n-        std::vector<std::string> result;\n-\n-        std::ifstream f(filepath.string().c_str());\n-        std::string line;\n-        while (std::getline(f,line))\n-            result.push_back(line);\n-\n-        return result;\n-    }\n-\n-    std::vector<CAlert> alerts;\n-};\n-\n-BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n-\n-\n-BOOST_AUTO_TEST_CASE(AlertApplies)\n-{\n-    SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n-\n-    BOOST_FOREACH(const CAlert& alert, alerts)\n-    {\n-        BOOST_CHECK(alert.CheckSignature(alertKey));\n-    }\n-\n-    BOOST_CHECK(alerts.size() >= 3);\n-\n-    // Matches:\n-    BOOST_CHECK(alerts[0].AppliesTo(1, \"\"));\n-    BOOST_CHECK(alerts[0].AppliesTo(999001, \"\"));\n-    BOOST_CHECK(alerts[0].AppliesTo(1, \"/Satoshi:11.11.11/\"));\n-\n-    BOOST_CHECK(alerts[1].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(alerts[1].AppliesTo(999001, \"/Satoshi:0.1.0/\"));\n-\n-    BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n-\n-    // Don't match:\n-    BOOST_CHECK(!alerts[0].AppliesTo(-1, \"\"));\n-    BOOST_CHECK(!alerts[0].AppliesTo(999002, \"\"));\n-\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.1.0\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(-1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(999002, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n-\n-    BOOST_CHECK(!alerts[2].AppliesTo(1, \"/Satoshi:0.3.0/\"));\n-\n-    SetMockTime(0);\n-}\n-\n-\n-BOOST_AUTO_TEST_CASE(AlertNotify)\n-{\n-    SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n-\n-    boost::filesystem::path temp = GetTempPath() / \"alertnotify.txt\";\n-    boost::filesystem::remove(temp);\n-\n-    mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n-\n-    BOOST_FOREACH(CAlert alert, alerts)\n-        alert.ProcessAlert(alertKey, false);\n-\n-    std::vector<std::string> r = read_lines(temp);\n-    BOOST_CHECK_EQUAL(r.size(), 4u);\n-\n-// Windows built-in echo semantics are different than posixy shells. Quotes and\n-// whitespace are printed literally.\n-\n-#ifndef WIN32\n-    BOOST_CHECK_EQUAL(r[0], \"Alert 1\");\n-    BOOST_CHECK_EQUAL(r[1], \"Alert 2, cancels 1\");\n-    BOOST_CHECK_EQUAL(r[2], \"Alert 2, cancels 1\");\n-    BOOST_CHECK_EQUAL(r[3], \"Evil Alert; /bin/ls; echo \"); // single-quotes should be removed\n-#else\n-    BOOST_CHECK_EQUAL(r[0], \"'Alert 1' \");\n-    BOOST_CHECK_EQUAL(r[1], \"'Alert 2, cancels 1' \");\n-    BOOST_CHECK_EQUAL(r[2], \"'Alert 2, cancels 1' \");\n-    BOOST_CHECK_EQUAL(r[3], \"'Evil Alert; /bin/ls; echo ' \");\n-#endif\n-    boost::filesystem::remove(temp);\n-\n-    SetMockTime(0);\n-}\n-\n-static bool falseFunc() { return false; }\n-\n-BOOST_AUTO_TEST_CASE(PartitionAlert)\n-{\n-    // Test PartitionCheck\n-    CCriticalSection csDummy;\n-    CChain chainDummy;\n-    CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n-\n-    // Generate fake blockchain timestamps relative to\n-    // an arbitrary time:\n-    int64_t now = 1427379054;\n-    SetMockTime(now);\n-    for (int i = 0; i < 100; i++)\n-    {\n-        indexDummy[i].phashBlock = NULL;\n-        if (i == 0) indexDummy[i].pprev = NULL;\n-        else indexDummy[i].pprev = &indexDummy[i-1];\n-        indexDummy[i].nHeight = i;\n-        indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n-        // Other members don't matter, the partition check code doesn't\n-        // use them\n-    }\n-    chainDummy.SetTip(&indexDummy[99]);\n-\n-    // Test 1: chain with blocks every nPowTargetSpacing seconds,\n-    // as normal, no worries:\n-    PartitionCheck(falseFunc, csDummy, chainDummy, nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n-\n-    // Test 2: go 3.5 hours without a block, expect a warning:\n-    now += 3*60*60+30*60;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, chainDummy, nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n-\n-    // Test 3: test the \"partition alerts only go off once per day\"\n-    // code:\n-    now += 60*10;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, chainDummy, nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n-\n-    // Test 4: get 2.5 times as many blocks as expected:\n-    now += 60*60*24; // Pretend it is a day later\n-    SetMockTime(now);\n-    int64_t quickSpacing = nPowTargetSpacing*2/5;\n-    for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n-        indexDummy[i].nTime = now - (100-i)*quickSpacing;\n-    PartitionCheck(falseFunc, csDummy, chainDummy, nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n-\n-    SetMockTime(0);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "01f50680b95aa307a1a013b643ded4ae0bc47162",
        "filename": "src/test/data/alertTests.raw",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/test/data/alertTests.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/test/data/alertTests.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/alertTests.raw?ref=55294a9fb673ab0a7c99b9c18279fe12a5a07890"
      },
      {
        "sha": "cacd0be4259d2fef76b76ac7a531ebc46554ecb8",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6dbfd572d201bb4d6cc129c01de5d7abb2b2565/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=c6dbfd572d201bb4d6cc129c01de5d7abb2b2565",
        "patch": "@@ -82,10 +82,9 @@ class CClientUIInterface\n     boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n \n     /**\n-     * New, updated or cancelled alert.\n-     * @note called with lock cs_mapAlerts held.\n+     * Status bar alerts changed.\n      */\n-    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;\n+    boost::signals2::signal<void ()> NotifyAlertChanged;\n \n     /** A wallet has been loaded. */\n     boost::signals2::signal<void (CWallet* wallet)> LoadWallet;"
      }
    ]
  }
]