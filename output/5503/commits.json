[
  {
    "sha": "8369b93f9e99e82d71eff78723ccccd087148580",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzY5YjkzZjllOTllODJkNzFlZmY3ODcyM2NjY2NkMDg3MTQ4NTgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-17T16:49:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[RPC] fundrawtransaction basics",
      "tree": {
        "sha": "610baad6dfaefd75cf1dd19a9ca6a3796df33332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/610baad6dfaefd75cf1dd19a9ca6a3796df33332"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8369b93f9e99e82d71eff78723ccccd087148580",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8369b93f9e99e82d71eff78723ccccd087148580",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8369b93f9e99e82d71eff78723ccccd087148580",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8369b93f9e99e82d71eff78723ccccd087148580/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 152,
      "deletions": 7
    },
    "files": [
      {
        "sha": "76f12723f12dc0671559ff4ca131f517e475d046",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -28,6 +28,7 @@ testScripts=(\n     'httpbasics.py'\n     'zapwallettxes.py'\n     'proxy_test.py'\n+    'rawtransactions.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then"
      },
      {
        "sha": "2e20a5d89ead4bed53ef0019a02583d3d7e21444",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test re-org scenarios with a mempool that contains transactions\n+# that spend (directly or indirectly) coinbase transactions.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+# Create one-input, one-output, no-fee transaction:\n+class RawTransactionsTest(BitcoinTestFramework):\n+    \n+    def run_test(self):\n+        \n+        newAddr = self.nodes[2].getnewaddress()\n+        \n+        inputs = []\n+        outputs = { newAddr : 10 }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        dec_rawtxfund = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        \n+        assert_equal(len(dec_rawtxfund['vin']), 1)\n+        assert_equal(len(dec_rawtxfund['vout']), 2)\n+        assert_equal(rawtxfund['fee'] > 0, True)\n+        assert_equal(dec_rawtxfund['vin'][0]['scriptSig']['hex'], '')\n+        \n+        rawtxfundsigned = self.nodes[0].signrawtransaction(rawtxfund['hex'])\n+        dec_rawtxfundsigned = self.nodes[0].decoderawtransaction(rawtxfundsigned['hex'])\n+        \n+        assert_equal(len(dec_rawtxfundsigned['vin'][0]['scriptSig']['hex']) > 20, True)\n+        \n+        \n+        listunspent = self.nodes[2].listunspent()\n+        inputs = [{'txid' : listunspent[0]['txid'], 'vout' : listunspent[0]['vout']}]\n+        outputs = { newAddr : 10 }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        aException = False\n+        try:\n+            rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        except JSONRPCException,e:\n+            aException = True\n+\n+        assert_equal(aException, True)\n+        \n+\n+if __name__ == '__main__':\n+    RawTransactionsTest().main()"
      },
      {
        "sha": "7a12669785a803b5ce9d8e3e941359dd2b1f6a72",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -273,8 +273,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();\n+        CMutableTransaction newMTx;\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, newMTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && fCreated)\n             transaction.reassignAmounts(nChangePosRet);"
      },
      {
        "sha": "1ee2e6d51de9c2677f7d76a83613ab21e1444064",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -77,6 +77,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n+    { \"fundrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },\n     { \"lockunspent\", 0 },"
      },
      {
        "sha": "c8e8060307af3cc310632cf74b5bfc1e0b7d68d2",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -655,3 +655,58 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n \n     return hashTx.GetHex();\n }\n+\n+#ifdef ENABLE_WALLET\n+Value fundrawtransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"\\nAdd vIns to a raw transaction.\\n\"\n+                            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\": n       calculated fee\\n\"\n+                            \"}\\n\"\n+                            \"\\\"hex\\\"             \\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nCreate a transaction with empty vIns\\n\"\n+                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+                            \"\\nFund the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSign the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSend the transaction (signed hex)\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n+                            \"\\nAs a json rpc call\\n\"\n+                            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n+                            );\n+    \n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n+    \n+    // parse hex string from parameter\n+    CTransaction tx;\n+    if (!DecodeHexTx(tx, params[0].get_str()))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    \n+    if (tx.vin.size() > 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"fundrawtransaction only supports transactions with zero exiting vins\");\n+    \n+    CMutableTransaction txNew;\n+    CAmount nFeeRet;\n+    string strFailReason;\n+    int nChangePosRet = -1;\n+    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePosRet, strFailReason))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+    \n+    Object result;\n+    result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n+    result.push_back(Pair(\"fee\", nFeeRet));\n+\n+    return result;\n+}\n+\n+#endif"
      },
      {
        "sha": "e1aa2cc90d9ef48e345bd598ab55802c5e304174",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -317,7 +317,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-\n+    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n+    \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */"
      },
      {
        "sha": "82bdbbab1bb6df499d96deee47e2d453d606612e",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -216,6 +216,7 @@ extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool\n extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value fundrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "af8144b888e4b1979619b15225faaa9812e497ed",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -1011,7 +1011,8 @@ Value sendmany(const Array& params, bool fHelp)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    CMutableTransaction newTx;\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, newTx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "1a9376b1853c56b76352cdd3b00d0fa6681acbce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -1686,8 +1686,24 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n }\n \n+bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+{\n+    unsigned int nSubtractFeeFromAmount = 0;\n+    vector<CRecipient> vecSend;\n+    \n+    BOOST_FOREACH (const CTxOut& out, txToFund.vout)\n+    {\n+        CRecipient recipient = {out.scriptPubKey, out.nValue, nSubtractFeeFromAmount};\n+        vecSend.push_back(recipient);\n+    }\n+    \n+    CReserveKey reservekey(this);\n+    CWalletTx wtx;\n+    return CreateTransaction(vecSend, wtx, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, NULL, false);\n+}\n+\n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl)\n+                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n     unsigned int nSubtractFeeFromAmount = 0;\n@@ -1711,7 +1727,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n \n     wtxNew.fTimeReceivedIsTxTime = true;\n     wtxNew.BindWallet(this);\n-    CMutableTransaction txNew;\n \n     // Discourage fee sniping.\n     //\n@@ -1907,6 +1922,14 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n+                \n+                //remove signature if we used the signing only for the fee calculation\n+                if(!sign)\n+                {\n+                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                        vin.scriptSig = CScript();\n+                }\n+                \n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -1942,10 +1965,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n             }\n         }\n     }\n-\n     return true;\n }\n \n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+{\n+    CMutableTransaction txNew;\n+    return CreateTransaction(vecSend, wtxNew, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, coinControl, sign);\n+}\n+\n /**\n  * Call after CreateTransaction unless you want to abort\n  */"
      },
      {
        "sha": "3295dada1ac2e649855f4300543d152a21391842",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8369b93f9e99e82d71eff78723ccccd087148580/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8369b93f9e99e82d71eff78723ccccd087148580",
        "patch": "@@ -624,8 +624,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+    bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "111b24864829d3eeee5069dfd5119a1380344d5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTFiMjQ4NjQ4MjlkM2VlZWU1MDY5ZGZkNTExOWExMzgwMzQ0ZDVm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-20T20:49:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[RPC] add support for existing vins for `fundrawtransaction`",
      "tree": {
        "sha": "72c0685a0ef3595870932d15c60c6489af129eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72c0685a0ef3595870932d15c60c6489af129eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/111b24864829d3eeee5069dfd5119a1380344d5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111b24864829d3eeee5069dfd5119a1380344d5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/111b24864829d3eeee5069dfd5119a1380344d5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111b24864829d3eeee5069dfd5119a1380344d5f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8369b93f9e99e82d71eff78723ccccd087148580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8369b93f9e99e82d71eff78723ccccd087148580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8369b93f9e99e82d71eff78723ccccd087148580"
      }
    ],
    "stats": {
      "total": 368,
      "additions": 327,
      "deletions": 41
    },
    "files": [
      {
        "sha": "d4ad2816510df0e758056f30a2699dd72f45b73b",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 256,
        "deletions": 21,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111b24864829d3eeee5069dfd5119a1380344d5f/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111b24864829d3eeee5069dfd5119a1380344d5f/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=111b24864829d3eeee5069dfd5119a1380344d5f",
        "patch": "@@ -10,42 +10,277 @@\n \n from test_framework import BitcoinTestFramework\n from util import *\n+from pprint import pprint\n+from time import sleep\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n     \n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+\n+        # connect to a local machine for debugging\n+        # url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n+        # proxy = AuthServiceProxy(url)\n+        # proxy.url = url # store URL on proxy for info\n+        # self.nodes.append(proxy)\n+        \n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        \n+        self.is_network_split=False\n+        self.sync_all()\n+    \n     def run_test(self):\n         \n-        newAddr = self.nodes[2].getnewaddress()\n+        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[0].setgenerate(True, 101)\n+        self.sync_all()\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+\n+        ###############\n+        # simple test #\n+        ###############\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n         \n-        inputs = []\n-        outputs = { newAddr : 10 }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n-        dec_rawtxfund = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        assert_equal(len(dec_tx['vin']), 1) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 1.5) #the 1.5BTC coin must be taken\n         \n-        assert_equal(len(dec_rawtxfund['vin']), 1)\n-        assert_equal(len(dec_rawtxfund['vout']), 2)\n-        assert_equal(rawtxfund['fee'] > 0, True)\n-        assert_equal(dec_rawtxfund['vin'][0]['scriptSig']['hex'], '')\n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.2 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+        \n+        assert_equal(len(dec_tx['vin']), 2) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 2.5) #the 1.5BTC+1.0BTC coins must have be taken\n+        \n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+        \n+        assert_equal(len(dec_tx['vin']), 1) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 5.0) #the 5.0BTC coin must have be taken\n         \n-        rawtxfundsigned = self.nodes[0].signrawtransaction(rawtxfund['hex'])\n-        dec_rawtxfundsigned = self.nodes[0].decoderawtransaction(rawtxfundsigned['hex'])\n         \n-        assert_equal(len(dec_rawtxfundsigned['vin'][0]['scriptSig']['hex']) > 20, True)\n+        ################################\n+        # simple test with two outputs #\n+        ################################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n         \n+        assert_equal(len(dec_tx['vin']), 2) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 6.0) #the 5.0BTC + 1.0BTC coins must have be taken\n         \n+\n+        \n+        #########################################################################\n+        # test a fundrawtransaction with a VIN greater than the required amount #\n+        #########################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+            \n+        assert_equal(fee*0.00000001+float(totalOut), utx['amount']) #compare vin total and totalout+fee\n+        \n+        \n+        #########################################################################\n+        # test a fundrawtransaction with a VIN smaller than the required amount #\n+        #########################################################################\n+        utx = False\n         listunspent = self.nodes[2].listunspent()\n-        inputs = [{'txid' : listunspent[0]['txid'], 'vout' : listunspent[0]['vout']}]\n-        outputs = { newAddr : 10 }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        aException = False\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1      \n+        \n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+            \n+        assert_equal(fee*0.00000001+float(totalOut), 2.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        ###########################################\n+        # test a fundrawtransaction with two VINs #\n+        ###########################################\n+        utx  = False\n+        utx2 = False \n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1      \n+        \n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+        \n+        matchingIns = 0\n+        for vinOut in dec_tx['vin']:\n+            for vinIn in inputs:\n+                if vinIn['txid'] == vinOut['txid']:\n+                    matchingIns+=1\n+        \n+        assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n+        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        #########################################################\n+        # test a fundrawtransaction with two VINs and two vOUTs #\n+        #########################################################\n+        utx  = False\n+        utx2 = False \n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1\n+        \n+        assert_equal(matchingOuts, 2)\n+        assert_equal(len(dec_tx['vout']), 3)\n+        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        ##############################################\n+        # test a fundrawtransaction with invalid vin #\n+        ##############################################\n+        listunspent = self.nodes[2].listunspent()\n+        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n+        outputs = { self.nodes[0].getnewaddress() : 1.0}\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        \n+        errorString = \"\"\n         try:\n-            rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         except JSONRPCException,e:\n-            aException = True\n-\n-        assert_equal(aException, True)\n+            errorString = e.error['message']\n+        \n+        assert_equal(\"Insufficient\" in errorString, True);\n         \n \n if __name__ == '__main__':"
      },
      {
        "sha": "71a439985ac0b6adecf276c4724d064820142724",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111b24864829d3eeee5069dfd5119a1380344d5f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111b24864829d3eeee5069dfd5119a1380344d5f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=111b24864829d3eeee5069dfd5119a1380344d5f",
        "patch": "@@ -692,9 +692,6 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     \n-    if (tx.vin.size() > 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"fundrawtransaction only supports transactions with zero exiting vins\");\n-    \n     CMutableTransaction txNew;\n     CAmount nFeeRet;\n     string strFailReason;"
      },
      {
        "sha": "8df8f4e3699e67f992154d8361ec86841061189a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=111b24864829d3eeee5069dfd5119a1380344d5f",
        "patch": "@@ -1012,7 +1012,8 @@ Value sendmany(const Array& params, bool fHelp)\n     int nChangePosRet = -1;\n     string strFailReason;\n     CMutableTransaction newTx;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, newTx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    std::vector<CTxIn> vins;\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, vins, wtx, newTx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "8f3ca31c593685e88ffeb05792233bbdd0b3e7fe",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 14,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=111b24864829d3eeee5069dfd5119a1380344d5f",
        "patch": "@@ -1663,46 +1663,98 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     return true;\n }\n \n-bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetVINs, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n-\n+    \n+    // create a empty set to store possible VINS\n+    set<pair<const CWalletTx*,unsigned int> > setTempCoins;\n+    CAmount nValueTroughVINs = 0;\n+    \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected())\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if(!out.fSpendable)\n-                continue;\n+            if (!out.fSpendable)\n+                 continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n+    \n+    // fill up the tx with possible predefined VINs\n+    BOOST_FOREACH(const CTxIn& txin, vPresetVINs)\n+    {\n+        bool vinOk = false;\n+        // search for VIN in available coins\n+        for (vector<COutput>::iterator it = vCoins.begin() ; it != vCoins.end();)\n+        {\n+            const COutput& out = *it;\n+            if (out.tx->GetHash() == txin.prevout.hash && txin.prevout.n == (uint32_t)out.i)\n+            {\n+                if (!out.fSpendable)\n+                    continue;\n+                \n+                nValueTroughVINs    += out.tx->vout[out.i].nValue;\n+                \n+                // temporary keep the coin to add them later after SelectCoinsMinConf has added some\n+                setTempCoins.insert(make_pair(out.tx, out.i));\n+                vinOk = true;\n+                \n+                // remove the coins from available coins vector to avoid double use because of a upcomming SelectCoinsMinConf\n+                it = vCoins.erase(it);\n+            }\n+            else\n+                ++it;\n+        }\n+        \n+        if (!vinOk)\n+            return false; // if vin was not an available coin, cancel (will return \"Insufficient funds\")\n+    }\n \n-    return (SelectCoinsMinConf(nTargetValue, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-            SelectCoinsMinConf(nTargetValue, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    bool state = true;\n+    \n+    // only select further coins if we need to\n+    if (nTargetValue-nValueTroughVINs > 0)\n+        state = (SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n+            SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n+            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    \n+    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible VINs to the coinset\n+    setCoinsRet.insert(setTempCoins.begin(), setTempCoins.end());\n+    \n+    // increase return value due of possible vins\n+    nValueRet+=nValueTroughVINs;\n+    \n+    return state;\n }\n \n bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n {\n     unsigned int nSubtractFeeFromAmount = 0;\n     vector<CRecipient> vecSend;\n-    \n-    BOOST_FOREACH (const CTxOut& out, txToFund.vout)\n+    vector<CTxIn> vin;\n+\n+    BOOST_FOREACH (const CTxOut& txOut, txToFund.vout)\n     {\n-        CRecipient recipient = {out.scriptPubKey, out.nValue, nSubtractFeeFromAmount};\n+        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, nSubtractFeeFromAmount};\n         vecSend.push_back(recipient);\n     }\n     \n+    BOOST_FOREACH (const CTxIn& txIn, txToFund.vin)\n+    {\n+        vin.push_back(txIn);\n+    }\n+    \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    return CreateTransaction(vecSend, wtx, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, NULL, false);\n+    return CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, NULL, false);\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<CTxIn> vINs,\n                                 CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n@@ -1801,7 +1853,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 CAmount nValueIn = 0;\n-                if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n+                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vINs, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n@@ -1972,7 +2024,8 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                                 CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CMutableTransaction txNew;\n-    return CreateTransaction(vecSend, wtxNew, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, coinControl, sign);\n+    vector<CTxIn> vINs;\n+    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, coinControl, sign);\n }\n \n /**"
      },
      {
        "sha": "c58f7edb13bc1e42a7616870ed5cfc8f3209b8a0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111b24864829d3eeee5069dfd5119a1380344d5f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=111b24864829d3eeee5069dfd5119a1380344d5f",
        "patch": "@@ -443,7 +443,7 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetVINs, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -625,7 +625,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n     bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend ,const std::vector<CTxIn> vins,\n                            CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n                            CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);"
      }
    ]
  },
  {
    "sha": "d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGVhOTFhOTlkNWQzMTNiOTg0ZDE3YzI2OWYxZjA1ZDRiM2ZlMGEw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-22T08:57:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[RPC] add simple unittest for `fundrawtransaction` (increase test coverage)",
      "tree": {
        "sha": "37f97a78311793acc3d1261b9bea9ed39494b802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37f97a78311793acc3d1261b9bea9ed39494b802"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111b24864829d3eeee5069dfd5119a1380344d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111b24864829d3eeee5069dfd5119a1380344d5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111b24864829d3eeee5069dfd5119a1380344d5f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "650afc5bfad20be4588613b16ecdc8e34e93769c",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
        "patch": "@@ -216,6 +216,12 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     Array arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+    \n+    /*********************************\n+     * \t     fundrawtransaction\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 28z\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 01000000000180969800000000001976a91450ce0a4b0ee0ddeb633da85199728b940ac3fe9488ac00000000\"), runtime_error);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7863a700a0465150a43726a94153884e7930e025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODYzYTcwMGEwNDY1MTUwYTQzNzI2YTk0MTUzODg0ZTc5MzBlMDI1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-27T19:51:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[RPC] fundrawtransaction overhaul\n\n- fix typo\n- fix RPCTypeCheck for fundrawtransaction\n- some comments\n- merged with subtractFeeFromAmout patch (non trivial)",
      "tree": {
        "sha": "e666579bce1d7aab2bde1d696454ae90e6cb9093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e666579bce1d7aab2bde1d696454ae90e6cb9093"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7863a700a0465150a43726a94153884e7930e025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7863a700a0465150a43726a94153884e7930e025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7863a700a0465150a43726a94153884e7930e025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7863a700a0465150a43726a94153884e7930e025/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0ea91a99d5d313b984d17c269f1f05d4b3fe0a0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9b8be76bebfa9dc9934d5c2bb9fb01b26af0cc74",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7863a700a0465150a43726a94153884e7930e025/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7863a700a0465150a43726a94153884e7930e025/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7863a700a0465150a43726a94153884e7930e025",
        "patch": "@@ -273,9 +273,8 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();\n-        CMutableTransaction newMTx;\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, newMTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && fCreated)\n             transaction.reassignAmounts(nChangePosRet);"
      },
      {
        "sha": "2a20733f26fa4539ef143724f70cf34271c29c4a",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7863a700a0465150a43726a94153884e7930e025/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7863a700a0465150a43726a94153884e7930e025/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=7863a700a0465150a43726a94153884e7930e025",
        "patch": "@@ -662,7 +662,7 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\"\\n\"\n-                            \"\\nAdd vIns to a raw transaction.\\n\"\n+                            \"\\nAdd inputs to a raw transaction as well as a change output.\\n\"\n                             \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\""
      },
      {
        "sha": "35f4ed024d54a612bfa98408878587b22ddf86f9",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7863a700a0465150a43726a94153884e7930e025/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7863a700a0465150a43726a94153884e7930e025/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7863a700a0465150a43726a94153884e7930e025",
        "patch": "@@ -318,6 +318,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n     { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n+#ifdef ENABLE_WALLET\n+    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false},\n+#endif\n     \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },"
      },
      {
        "sha": "9dd4544643b60f322a8afe1499afc9d1b9cdae7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7863a700a0465150a43726a94153884e7930e025/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7863a700a0465150a43726a94153884e7930e025/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7863a700a0465150a43726a94153884e7930e025",
        "patch": "@@ -1700,7 +1700,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n                 \n                 nValueTroughVINs    += out.tx->vout[out.i].nValue;\n                 \n-                // temporary keep the coin to add them later after SelectCoinsMinConf has added some\n+                // temporarily keep the coin to add them later after SelectCoinsMinConf has added some\n                 setTempCoins.insert(make_pair(out.tx, out.i));\n                 vinOk = true;\n                 \n@@ -1734,16 +1734,19 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n \n bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n {\n-    unsigned int nSubtractFeeFromAmount = 0;\n+    unsigned int nSubtractFeeFromAmount = 0; //TODO: implement subtract fee from amount within fundrawtransaction\n     vector<CRecipient> vecSend;\n     vector<CTxIn> vin;\n \n+    // Only keep the vouts from the existing transaction.\n+    // Form a new CRecipient vector\n     BOOST_FOREACH (const CTxOut& txOut, txToFund.vout)\n     {\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, nSubtractFeeFromAmount};\n         vecSend.push_back(recipient);\n     }\n     \n+    // Store possible vin so we might only partial-final-fund the tx\n     BOOST_FOREACH (const CTxIn& txIn, txToFund.vin)\n     {\n         vin.push_back(txIn);"
      },
      {
        "sha": "91747c73cb6de19289c7b438a9d20b6c3ca54700",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7863a700a0465150a43726a94153884e7930e025/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7863a700a0465150a43726a94153884e7930e025/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7863a700a0465150a43726a94153884e7930e025",
        "patch": "@@ -626,9 +626,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetImmatureWatchOnlyBalance() const;\n     bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend ,const std::vector<CTxIn> vins,\n-                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "5ef0b3306a4293832a23e2390972aa36d1d3e112",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWYwYjMzMDZhNDI5MzgzMmEyM2UyMzkwOTcyYWEzNmQxZDNlMTEy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-01T07:48:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[RPC] fundrawtransaction dummy signing / ser. length calculation\n\n- serialize transaction size calculation (aka dummy-signing) without the need of signing the transaction (wallet can be locked to use fundrawtransaction)\n- rename VINS to vInputs",
      "tree": {
        "sha": "77395b71ad806eebfef3cb24c8a37b360d5b8a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77395b71ad806eebfef3cb24c8a37b360d5b8a25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ef0b3306a4293832a23e2390972aa36d1d3e112",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef0b3306a4293832a23e2390972aa36d1d3e112",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ef0b3306a4293832a23e2390972aa36d1d3e112",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef0b3306a4293832a23e2390972aa36d1d3e112/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7863a700a0465150a43726a94153884e7930e025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7863a700a0465150a43726a94153884e7930e025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7863a700a0465150a43726a94153884e7930e025"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 281,
      "deletions": 49
    },
    "files": [
      {
        "sha": "cfbdfae018d7127815da26d93aa316995e9a0a12",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 237,
        "deletions": 15,
        "changes": 252,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef0b3306a4293832a23e2390972aa36d1d3e112/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef0b3306a4293832a23e2390972aa36d1d3e112/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "patch": "@@ -3,40 +3,31 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#\n-# Test re-org scenarios with a mempool that contains transactions\n-# that spend (directly or indirectly) coinbase transactions.\n-#\n-\n from test_framework import BitcoinTestFramework\n from util import *\n from pprint import pprint\n from time import sleep\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-    \n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n-\n+        \n     def setup_network(self, split=False):\n         self.nodes = start_nodes(3, self.options.tmpdir)\n \n-        # connect to a local machine for debugging\n-        # url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n-        # proxy = AuthServiceProxy(url)\n-        # proxy.url = url # store URL on proxy for info\n-        # self.nodes.append(proxy)\n-        \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         \n         self.is_network_split=False\n         self.sync_all()\n     \n-    def run_test(self):\n+    def run_test(self):        \n+        print \"Mining blocks...\"\n+        feeTolerance = 2 #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n         \n         self.nodes[2].setgenerate(True, 1)\n         self.nodes[0].setgenerate(True, 101)\n@@ -282,6 +273,237 @@ def run_test(self):\n         \n         assert_equal(\"Insufficient\" in errorString, True);\n         \n+        \n \n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        \n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        \n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+        \n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction with multiple outputs\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendmany(\"\", outputs);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        \n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+        \n+        \n+        ############################################################\n+        #compare fee of a 2of2 multisig p2sh transaction\n+        \n+        # create 2of2 addr\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[1].getnewaddress()\n+        \n+        addr1Obj = self.nodes[1].validateaddress(addr1)\n+        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        \n+        mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n+        \n+        inputs = []\n+        outputs = {mSigObj:1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        \n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        \n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+        \n+        \n+        ############################################################\n+        #compare fee of a standard pubkeyhash transaction\n+        \n+        # create 4of5 addr\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[1].getnewaddress()\n+        addr3 = self.nodes[1].getnewaddress()\n+        addr4 = self.nodes[1].getnewaddress()\n+        addr5 = self.nodes[1].getnewaddress()\n+        \n+        addr1Obj = self.nodes[1].validateaddress(addr1)\n+        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr3Obj = self.nodes[1].validateaddress(addr3)\n+        addr4Obj = self.nodes[1].validateaddress(addr4)\n+        addr5Obj = self.nodes[1].validateaddress(addr5)\n+        \n+        mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])\n+        \n+        inputs = []\n+        outputs = {mSigObj:1.1}\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        \n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        \n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        ############################################################\n+        \n+        \n+        ############################################################\n+        # spend a 2of2 multisig transaction over fundraw\n+        \n+        # create 2of2 addr\n+        addr1 = self.nodes[2].getnewaddress()\n+        addr2 = self.nodes[2].getnewaddress()\n+        \n+        addr1Obj = self.nodes[2].validateaddress(addr1)\n+        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        \n+        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n+        \n+        \n+        # send 1.2 BTC to msig addr\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        oldBalance = self.nodes[1].getbalance()\n+        inputs = []\n+        outputs = {self.nodes[1].getnewaddress():1.1}\n+        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n+        \n+        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        # make sure funds are received at node1\n+        assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n+        \n+        ############################################################\n+        # locked wallet test\n+        self.nodes[1].encryptwallet(\"test\")\n+        self.nodes.pop(1)\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        \n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        \n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+        \n+        error = False\n+        try:\n+            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2);\n+        except:\n+            error = True\n+        assert(error)\n+        \n+        oldBalance = self.nodes[0].getbalance()\n+        \n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():1.1}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+\n+        #now we need to unlock\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        # make sure funds are received at node1\n+        assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n+        \n+        \n+        \n+        ###############################################\n+        # multiple (~19) inputs tx test | Compare fee #\n+        ###############################################\n+        \n+        #empty node1, send some small coins from node0 to node1\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        for i in range(0,20):\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        #fund a tx with ~20 small inputs\n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        \n+        #create same transaction over sendtoaddress\n+        txId = self.nodes[1].sendmany(\"\", outputs);\n+        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']*100000000\n+        \n+        #compare fee\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n+        \n+        \n+        #############################################\n+        # multiple (~19) inputs tx test | sign/send #\n+        #############################################\n+        \n+        #again, empty node1, send some small coins from node0 to node1\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        for i in range(0,20):\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        #fund a tx with ~20 small inputs\n+        oldBalance = self.nodes[0].getbalance()\n+        \n+        inputs = []\n+        outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n+        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n+        \n+        \n if __name__ == '__main__':\n-    RawTransactionsTest().main()\n+    RawTransactionsTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "b030ab6d9dcd02478670a222e8b09a1f82972e3c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "patch": "@@ -17,10 +17,16 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn, bool dummySignIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn), dummySign(dummySignIn) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n+    if (dummySign)\n+    {\n+        vchSig.resize(72);\n+        return true;\n+    }\n+        \n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n@@ -100,7 +106,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n     return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig, bool dummySign)\n {\n     txnouttype whichType;\n     if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n@@ -121,29 +127,32 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         if (!fSolved) return false;\n     }\n \n-    // Test solution\n+    // Test solution or skip in case of length-calculation/dummy-signing\n+    if (dummySign)\n+        return true;\n+    \n     return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType, bool dummySign)\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType, dummySign);\n \n-    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n+    return ProduceSignature(creator, fromPubKey, txin.scriptSig, dummySign);\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType, bool dummySign)\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n+    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType, dummySign);\n }\n \n static CScript PushAll(const vector<valtype>& values)"
      },
      {
        "sha": "542f7f12e7d64c96c6f8f8dfcada94c866f45ae7",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "patch": "@@ -36,19 +36,20 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     unsigned int nIn;\n     int nHashType;\n     const TransactionSignatureChecker checker;\n-\n+    bool dummySign;\n+    \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL, bool dummySign = false);\n     const BaseSignatureChecker& Checker() const { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n \n /** Produce a script signature using a generic signature creator. */\n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig, bool dummySign=false);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, bool dummySign=false);\n+bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, bool dummySign=false);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);"
      },
      {
        "sha": "3ff44f06f205617385d21bb821ea9d5df6ce3265",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "patch": "@@ -1663,14 +1663,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     return true;\n }\n \n-bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetVINs, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetInputs, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n     \n-    // create a empty set to store possible VINS\n+    // create a empty set to store possible inputs\n     set<pair<const CWalletTx*,unsigned int> > setTempCoins;\n-    CAmount nValueTroughVINs = 0;\n+    CAmount nValueTroughInputs = 0;\n     \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected())\n@@ -1685,8 +1685,8 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n         return (nValueRet >= nTargetValue);\n     }\n     \n-    // fill up the tx with possible predefined VINs\n-    BOOST_FOREACH(const CTxIn& txin, vPresetVINs)\n+    // fill up the tx with possible predefined inputs\n+    BOOST_FOREACH(const CTxIn& txin, vPresetInputs)\n     {\n         bool vinOk = false;\n         // search for VIN in available coins\n@@ -1698,7 +1698,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n                 if (!out.fSpendable)\n                     continue;\n                 \n-                nValueTroughVINs    += out.tx->vout[out.i].nValue;\n+                nValueTroughInputs    += out.tx->vout[out.i].nValue;\n                 \n                 // temporarily keep the coin to add them later after SelectCoinsMinConf has added some\n                 setTempCoins.insert(make_pair(out.tx, out.i));\n@@ -1718,16 +1718,16 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     bool state = true;\n     \n     // only select further coins if we need to\n-    if (nTargetValue-nValueTroughVINs > 0)\n-        state = (SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-            SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    if (nTargetValue-nValueTroughInputs > 0)\n+        state = (SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n+            SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n+            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 0, 1, vCoins, setCoinsRet, nValueRet)));\n     \n-    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible VINs to the coinset\n+    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     setCoinsRet.insert(setTempCoins.begin(), setTempCoins.end());\n     \n-    // increase return value due of possible vins\n-    nValueRet+=nValueTroughVINs;\n+    // increase return value due of possible inputs\n+    nValueRet+=nValueTroughInputs;\n     \n     return state;\n }\n@@ -1757,7 +1757,7 @@ bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction&\n     return CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, NULL, false);\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<CTxIn> vINs,\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<CTxIn> vInputs,\n                                 CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n@@ -1856,7 +1856,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<\n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 CAmount nValueIn = 0;\n-                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vINs, coinControl))\n+                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vInputs, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n@@ -1961,7 +1961,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<\n                 // Sign\n                 int nIn = 0;\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                    if (!SignSignature(*this, *coin.first, txNew, nIn++))\n+                    if (!SignSignature(*this, *coin.first, txNew, nIn++, SIGHASH_ALL, !sign))\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n@@ -1982,7 +1982,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<\n                 if(!sign)\n                 {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n-                        vin.scriptSig = CScript();\n+                    vin.scriptSig = CScript();\n                 }\n                 \n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n@@ -2027,8 +2027,8 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                                 CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CMutableTransaction txNew;\n-    vector<CTxIn> vINs;\n-    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, coinControl, sign);\n+    vector<CTxIn> vInputs;\n+    return CreateTransaction(vecSend, vInputs, wtxNew, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, coinControl, sign);\n }\n \n /**"
      },
      {
        "sha": "5bc3e8d6f105e961415efd5db535289b7a0a1f7f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef0b3306a4293832a23e2390972aa36d1d3e112/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "patch": "@@ -443,7 +443,7 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetVINs, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetInputs, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -625,7 +625,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n     bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend ,const std::vector<CTxIn> vins,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend ,const std::vector<CTxIn> vInputs,\n                            CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n                            CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);"
      }
    ]
  },
  {
    "sha": "50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGZjOWU4MTBjNDY1MGJkM2E2NjlkZWIyZmYwNDc5OGVhMmY5MGI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-16T07:52:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[moveonly] move fundrawtransaction() rpc call to rpcwallet.cpp\n\nfundrawtransaction requires a wallet and therefore it belongs to rpcwallet.cpp",
      "tree": {
        "sha": "a62de1655cffe566b570dd2844b244999726f6ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a62de1655cffe566b570dd2844b244999726f6ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef0b3306a4293832a23e2390972aa36d1d3e112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ef0b3306a4293832a23e2390972aa36d1d3e112"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 52,
      "deletions": 54
    },
    "files": [
      {
        "sha": "86ee89e153f30c1260bd0bad4b1b34890b10cd03",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "patch": "@@ -656,54 +656,3 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     return hashTx.GetHex();\n }\n \n-#ifdef ENABLE_WALLET\n-Value fundrawtransaction(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n-                            \"\\nAdd inputs to a raw transaction as well as a change output.\\n\"\n-                            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n-                            \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n-                            \"\\nResult:\\n\"\n-                            \"{\\n\"\n-                            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\": n       calculated fee\\n\"\n-                            \"}\\n\"\n-                            \"\\\"hex\\\"             \\n\"\n-                            \"\\nExamples:\\n\"\n-                            \"\\nCreate a transaction with empty vIns\\n\"\n-                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-                            \"\\nFund the transaction, and get back the hex\\n\"\n-                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"myhex\\\"\") +\n-                            \"\\nSign the transaction, and get back the hex\\n\"\n-                            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n-                            \"\\nSend the transaction (signed hex)\\n\"\n-                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n-                            \"\\nAs a json rpc call\\n\"\n-                            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n-                            );\n-    \n-    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n-    \n-    // parse hex string from parameter\n-    CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    \n-    CMutableTransaction txNew;\n-    CAmount nFeeRet;\n-    string strFailReason;\n-    int nChangePosRet = -1;\n-    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePosRet, strFailReason))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n-    \n-    Object result;\n-    result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n-    result.push_back(Pair(\"fee\", nFeeRet));\n-\n-    return result;\n-}\n-\n-#endif"
      },
      {
        "sha": "8d3c53993233ce1953cf4788631f87bcbc126375",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "patch": "@@ -317,7 +317,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n+\n #ifdef ENABLE_WALLET\n     { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false},\n #endif"
      },
      {
        "sha": "f8cfd7f10c904cc845e47799ea2d4fa88f8f47ea",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "patch": "@@ -208,6 +208,7 @@ extern json_spirit::Value getblockchaininfo(const json_spirit::Array& params, bo\n extern json_spirit::Value getnetworkinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value setmocktime(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value resendwallettransactions(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value fundrawtransaction(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n@@ -216,7 +217,6 @@ extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool\n extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value fundrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "eebf6d2ad7c0fbb1ebd65c19cc65e96fa3427469",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 1,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc9e810c4650bd3a669deb2ff04798ea2f90b4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "patch": "@@ -2345,4 +2345,53 @@ Value listunspent(const Array& params, bool fHelp)\n     }\n \n     return results;\n-}\n\\ No newline at end of file\n+}\n+\n+Value fundrawtransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"\\nAdd inputs to a raw transaction as well as a change output.\\n\"\n+                            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\": n       calculated fee\\n\"\n+                            \"}\\n\"\n+                            \"\\\"hex\\\"             \\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nCreate a transaction with empty vIns\\n\"\n+                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+                            \"\\nFund the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSign the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSend the transaction (signed hex)\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n+                            \"\\nAs a json rpc call\\n\"\n+                            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n+                            );\n+    \n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n+    \n+    // parse hex string from parameter\n+    CTransaction tx;\n+    if (!DecodeHexTx(tx, params[0].get_str()))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    \n+    CMutableTransaction txNew;\n+    CAmount nFeeRet;\n+    string strFailReason;\n+    int nChangePosRet = -1;\n+    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePosRet, strFailReason))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+    \n+    Object result;\n+    result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n+    result.push_back(Pair(\"fee\", nFeeRet));\n+    \n+    return result;\n+}"
      }
    ]
  },
  {
    "sha": "4109df978a4fb4501a8bb16e962279d086128f73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTA5ZGY5NzhhNGZiNDUwMWE4YmIxNmU5NjIyNzlkMDg2MTI4Zjcz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-16T07:53:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "add wallet-is-present check for fundrawtransaction\n\nrpc dispatch tables reqWallet has been removed.",
      "tree": {
        "sha": "d122249210ef5f65f2385a889285700b0a58b1b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d122249210ef5f65f2385a889285700b0a58b1b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4109df978a4fb4501a8bb16e962279d086128f73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4109df978a4fb4501a8bb16e962279d086128f73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4109df978a4fb4501a8bb16e962279d086128f73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4109df978a4fb4501a8bb16e962279d086128f73/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fc9e810c4650bd3a669deb2ff04798ea2f90b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50fc9e810c4650bd3a669deb2ff04798ea2f90b4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d15f11bc585c5ce8c98a2019488592dd5915c68e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4109df978a4fb4501a8bb16e962279d086128f73/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4109df978a4fb4501a8bb16e962279d086128f73/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4109df978a4fb4501a8bb16e962279d086128f73",
        "patch": "@@ -2349,6 +2349,9 @@ Value listunspent(const Array& params, bool fHelp)\n \n Value fundrawtransaction(const Array& params, bool fHelp)\n {\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return Value::null;\n+    \n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\"\\n\""
      }
    ]
  },
  {
    "sha": "79858cd7c8d4ce6ff4554f75364019d6363869e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTg1OGNkN2M4ZDRjZTZmZjQ1NTRmNzUzNjQwMTlkNjM2Mzg2OWUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-16T08:52:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-21T18:25:15Z"
      },
      "message": "[QA] adapt generate instead of setgenerate for fundrawtransaction tests",
      "tree": {
        "sha": "385a3ba4b8dba0a41c4272e718721879ce983098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/385a3ba4b8dba0a41c4272e718721879ce983098"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79858cd7c8d4ce6ff4554f75364019d6363869e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79858cd7c8d4ce6ff4554f75364019d6363869e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79858cd7c8d4ce6ff4554f75364019d6363869e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79858cd7c8d4ce6ff4554f75364019d6363869e3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4109df978a4fb4501a8bb16e962279d086128f73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4109df978a4fb4501a8bb16e962279d086128f73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4109df978a4fb4501a8bb16e962279d086128f73"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "77cc98c60c9e2dcf93ca16159493a800a25d91e1",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79858cd7c8d4ce6ff4554f75364019d6363869e3/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79858cd7c8d4ce6ff4554f75364019d6363869e3/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=79858cd7c8d4ce6ff4554f75364019d6363869e3",
        "patch": "@@ -29,14 +29,14 @@ def run_test(self):\n         print \"Mining blocks...\"\n         feeTolerance = 2 #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n         \n-        self.nodes[2].setgenerate(True, 1)\n-        self.nodes[0].setgenerate(True, 101)\n+        self.nodes[2].generate(1)\n+        self.nodes[0].generate(101)\n         self.sync_all()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n \n         ###############\n@@ -383,7 +383,7 @@ def run_test(self):\n         # send 1.2 BTC to msig addr\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n         \n         oldBalance = self.nodes[1].getbalance()\n@@ -395,7 +395,7 @@ def run_test(self):\n         signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n         \n         # make sure funds are received at node1\n@@ -435,7 +435,7 @@ def run_test(self):\n         signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n         \n         # make sure funds are received at node1\n@@ -450,13 +450,13 @@ def run_test(self):\n         #empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         \n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         \n         #fund a tx with ~20 small inputs\n@@ -481,13 +481,13 @@ def run_test(self):\n         #again, empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         \n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         \n         #fund a tx with ~20 small inputs\n@@ -500,7 +500,7 @@ def run_test(self):\n         fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n         "
      }
    ]
  },
  {
    "sha": "3e791407ab017495680e914b75f2c40fc4b67998",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTc5MTQwN2FiMDE3NDk1NjgwZTkxNGI3NWYyYzQwZmM0YjY3OTk4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-20T21:28:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-24T08:23:06Z"
      },
      "message": "Fix whitespace errors\n\n# Conflicts:\n#\tsrc/rpcserver.cpp",
      "tree": {
        "sha": "75fc85b2c1d5acb1caa5bddede031e6c1bf3819c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75fc85b2c1d5acb1caa5bddede031e6c1bf3819c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e791407ab017495680e914b75f2c40fc4b67998",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e791407ab017495680e914b75f2c40fc4b67998",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e791407ab017495680e914b75f2c40fc4b67998",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e791407ab017495680e914b75f2c40fc4b67998/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79858cd7c8d4ce6ff4554f75364019d6363869e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79858cd7c8d4ce6ff4554f75364019d6363869e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79858cd7c8d4ce6ff4554f75364019d6363869e3"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 131,
      "deletions": 132
    },
    "files": [
      {
        "sha": "f7d31fecdc3a2be762561f8735715babc0a7e6a9",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 101,
        "deletions": 101,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -14,21 +14,21 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n-        \n+\n     def setup_network(self, split=False):\n         self.nodes = start_nodes(3, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        \n+\n         self.is_network_split=False\n         self.sync_all()\n-    \n-    def run_test(self):        \n+\n+    def run_test(self):\n         print \"Mining blocks...\"\n         feeTolerance = 2 #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n-        \n+\n         self.nodes[2].generate(1)\n         self.nodes[0].generate(101)\n         self.sync_all()\n@@ -52,11 +52,11 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n-            totalOut += out['value']        \n-        \n+            totalOut += out['value']\n+\n         assert_equal(len(dec_tx['vin']), 1) #one vin coin\n         assert_equal(fee*0.00000001+float(totalOut), 1.5) #the 1.5BTC coin must be taken\n-        \n+\n         ##############################\n         # simple test with two coins #\n         ##############################\n@@ -70,11 +70,11 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n-            totalOut += out['value']        \n-        \n+            totalOut += out['value']\n+\n         assert_equal(len(dec_tx['vin']), 2) #one vin coin\n         assert_equal(fee*0.00000001+float(totalOut), 2.5) #the 1.5BTC+1.0BTC coins must have be taken\n-        \n+\n         ##############################\n         # simple test with two coins #\n         ##############################\n@@ -88,12 +88,12 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n-            totalOut += out['value']        \n-        \n+            totalOut += out['value']\n+\n         assert_equal(len(dec_tx['vin']), 1) #one vin coin\n         assert_equal(fee*0.00000001+float(totalOut), 5.0) #the 5.0BTC coin must have be taken\n-        \n-        \n+\n+\n         ################################\n         # simple test with two outputs #\n         ################################\n@@ -107,13 +107,13 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n-            totalOut += out['value']        \n-        \n+            totalOut += out['value']\n+\n         assert_equal(len(dec_tx['vin']), 2) #one vin coin\n         assert_equal(fee*0.00000001+float(totalOut), 6.0) #the 5.0BTC + 1.0BTC coins must have be taken\n-        \n \n-        \n+\n+\n         #########################################################################\n         # test a fundrawtransaction with a VIN greater than the required amount #\n         #########################################################################\n@@ -125,7 +125,7 @@ def run_test(self):\n                 break;\n \n         assert_equal(utx!=False, True)\n-        \n+\n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -137,11 +137,11 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n-            totalOut += out['value']        \n-            \n+            totalOut += out['value']\n+\n         assert_equal(fee*0.00000001+float(totalOut), utx['amount']) #compare vin total and totalout+fee\n-        \n-        \n+\n+\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -153,7 +153,7 @@ def run_test(self):\n                 break;\n \n         assert_equal(utx!=False, True)\n-        \n+\n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -168,19 +168,19 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n             if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n-                matchingOuts+=1      \n-        \n+                matchingOuts+=1\n+\n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)\n-            \n+\n         assert_equal(fee*0.00000001+float(totalOut), 2.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n-        \n-        \n+\n+\n         ###########################################\n         # test a fundrawtransaction with two VINs #\n         ###########################################\n         utx  = False\n-        utx2 = False \n+        utx2 = False\n         listunspent = self.nodes[2].listunspent()\n         for aUtx in listunspent:\n             if aUtx['amount'] == 1.0:\n@@ -190,7 +190,7 @@ def run_test(self):\n \n \n         assert_equal(utx!=False, True)\n-        \n+\n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -205,26 +205,26 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n             if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n-                matchingOuts+=1      \n-        \n+                matchingOuts+=1\n+\n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)\n-        \n+\n         matchingIns = 0\n         for vinOut in dec_tx['vin']:\n             for vinIn in inputs:\n                 if vinIn['txid'] == vinOut['txid']:\n                     matchingIns+=1\n-        \n+\n         assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n         assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n-        \n-        \n+\n+\n         #########################################################\n         # test a fundrawtransaction with two VINs and two vOUTs #\n         #########################################################\n         utx  = False\n-        utx2 = False \n+        utx2 = False\n         listunspent = self.nodes[2].listunspent()\n         for aUtx in listunspent:\n             if aUtx['amount'] == 1.0:\n@@ -234,7 +234,7 @@ def run_test(self):\n \n \n         assert_equal(utx!=False, True)\n-        \n+\n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -250,12 +250,12 @@ def run_test(self):\n             totalOut += out['value']\n             if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n                 matchingOuts+=1\n-        \n+\n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)\n         assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n-        \n-        \n+\n+\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n@@ -264,33 +264,33 @@ def run_test(self):\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-        \n+\n         errorString = \"\"\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         except JSONRPCException,e:\n             errorString = e.error['message']\n-        \n+\n         assert_equal(\"Insufficient\" in errorString, True);\n-        \n-        \n+\n+\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-        \n+\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n-        \n+\n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n-        \n+\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction with multiple outputs\n         inputs = []\n@@ -300,131 +300,131 @@ def run_test(self):\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendmany(\"\", outputs);\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n-        \n+\n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n-        \n-        \n+\n+\n         ############################################################\n         #compare fee of a 2of2 multisig p2sh transaction\n-        \n+\n         # create 2of2 addr\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n-        \n+\n         addr1Obj = self.nodes[1].validateaddress(addr1)\n         addr2Obj = self.nodes[1].validateaddress(addr2)\n-        \n+\n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-        \n+\n         inputs = []\n         outputs = {mSigObj:1.1}\n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-        \n+\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n-        \n+\n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n-        \n-        \n+\n+\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n-        \n+\n         # create 4of5 addr\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n         addr3 = self.nodes[1].getnewaddress()\n         addr4 = self.nodes[1].getnewaddress()\n         addr5 = self.nodes[1].getnewaddress()\n-        \n+\n         addr1Obj = self.nodes[1].validateaddress(addr1)\n         addr2Obj = self.nodes[1].validateaddress(addr2)\n         addr3Obj = self.nodes[1].validateaddress(addr3)\n         addr4Obj = self.nodes[1].validateaddress(addr4)\n         addr5Obj = self.nodes[1].validateaddress(addr5)\n-        \n+\n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])\n-        \n+\n         inputs = []\n         outputs = {mSigObj:1.1}\n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n-        \n+\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n-        \n+\n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n-        \n-        \n+\n+\n         ############################################################\n         # spend a 2of2 multisig transaction over fundraw\n-        \n+\n         # create 2of2 addr\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n-        \n+\n         addr1Obj = self.nodes[2].validateaddress(addr1)\n         addr2Obj = self.nodes[2].validateaddress(addr2)\n-        \n+\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])\n-        \n-        \n+\n+\n         # send 1.2 BTC to msig addr\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        \n+\n         oldBalance = self.nodes[1].getbalance()\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n-        \n+\n         signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        \n+\n         # make sure funds are received at node1\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n-        \n+\n         ############################################################\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n-        \n+\n         self.nodes = start_nodes(3, self.options.tmpdir)\n-        \n+\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         self.is_network_split=False\n         self.sync_all()\n-        \n+\n         error = False\n         try:\n             self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2);\n         except:\n             error = True\n         assert(error)\n-        \n+\n         oldBalance = self.nodes[0].getbalance()\n-        \n+\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():1.1}\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n@@ -437,62 +437,62 @@ def run_test(self):\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        \n+\n         # make sure funds are received at node1\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n-        \n-        \n-        \n+\n+\n+\n         ###############################################\n         # multiple (~19) inputs tx test | Compare fee #\n         ###############################################\n-        \n+\n         #empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         #fund a tx with ~20 small inputs\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-        \n+\n         #create same transaction over sendtoaddress\n         txId = self.nodes[1].sendmany(\"\", outputs);\n         signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']*100000000\n-        \n+\n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n-        \n-        \n+\n+\n         #############################################\n         # multiple (~19) inputs tx test | sign/send #\n         #############################################\n-        \n+\n         #again, empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         for i in range(0,20):\n             self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         #fund a tx with ~20 small inputs\n         oldBalance = self.nodes[0].getbalance()\n-        \n+\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n@@ -503,7 +503,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n-        \n-        \n+\n+\n if __name__ == '__main__':\n-    RawTransactionsTest().main()\n\\ No newline at end of file\n+    RawTransactionsTest().main()"
      },
      {
        "sha": "8393a8502e1fd55bfec16da452f904f01c022c57",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -655,4 +655,3 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n \n     return hashTx.GetHex();\n }\n-"
      },
      {
        "sha": "cc11a273acabdaa2f8c234fc0211d1842269c149",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -317,11 +317,10 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-\n #ifdef ENABLE_WALLET\n-    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false},\n+    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false },\n #endif\n-    \n+\n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */"
      },
      {
        "sha": "65d6cadc614ff668f7796cd76fd09cc98c2dab9a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -26,7 +26,7 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n         vchSig.resize(72);\n         return true;\n     }\n-        \n+\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n@@ -130,7 +130,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     // Test solution or skip in case of length-calculation/dummy-signing\n     if (dummySign)\n         return true;\n-    \n+\n     return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n "
      },
      {
        "sha": "285a0c38529e83d892348acf701f4c233abcea7f",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -37,7 +37,7 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     int nHashType;\n     const TransactionSignatureChecker checker;\n     bool dummySign;\n-    \n+\n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL, bool dummySign = false);\n     const BaseSignatureChecker& Checker() const { return checker; }"
      },
      {
        "sha": "fb2b22f3b955c56ba6b79fac4734501c094b2058",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     Array arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n-    \n+\n     /*********************************\n      * \t     fundrawtransaction\n      *********************************/"
      },
      {
        "sha": "c1ff352c4ed2df4222b84d0d2c394365ab1758c5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -2351,7 +2351,7 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return Value::null;\n-    \n+\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\"\\n\"\n@@ -2377,24 +2377,24 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n                             \"\\nAs a json rpc call\\n\"\n                             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                             );\n-    \n+\n     RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n-    \n+\n     // parse hex string from parameter\n     CTransaction tx;\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    \n+\n     CMutableTransaction txNew;\n     CAmount nFeeRet;\n     string strFailReason;\n     int nChangePosRet = -1;\n     if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePosRet, strFailReason))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n-    \n+\n     Object result;\n     result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n     result.push_back(Pair(\"fee\", nFeeRet));\n-    \n+\n     return result;\n }"
      },
      {
        "sha": "0909619ee81be95f0297f609e3e9d87792deb116",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -1667,11 +1667,11 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n-    \n+\n     // create a empty set to store possible inputs\n     set<pair<const CWalletTx*,unsigned int> > setTempCoins;\n     CAmount nValueTroughInputs = 0;\n-    \n+\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected())\n     {\n@@ -1684,7 +1684,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n         }\n         return (nValueRet >= nTargetValue);\n     }\n-    \n+\n     // fill up the tx with possible predefined inputs\n     BOOST_FOREACH(const CTxIn& txin, vPresetInputs)\n     {\n@@ -1697,38 +1697,38 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             {\n                 if (!out.fSpendable)\n                     continue;\n-                \n+\n                 nValueTroughInputs    += out.tx->vout[out.i].nValue;\n-                \n+\n                 // temporarily keep the coin to add them later after SelectCoinsMinConf has added some\n                 setTempCoins.insert(make_pair(out.tx, out.i));\n                 vinOk = true;\n-                \n+\n                 // remove the coins from available coins vector to avoid double use because of a upcomming SelectCoinsMinConf\n                 it = vCoins.erase(it);\n             }\n             else\n                 ++it;\n         }\n-        \n+\n         if (!vinOk)\n             return false; // if vin was not an available coin, cancel (will return \"Insufficient funds\")\n     }\n \n     bool state = true;\n-    \n+\n     // only select further coins if we need to\n     if (nTargetValue-nValueTroughInputs > 0)\n         state = (SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n             SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n             (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue-nValueTroughInputs, 0, 1, vCoins, setCoinsRet, nValueRet)));\n-    \n+\n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     setCoinsRet.insert(setTempCoins.begin(), setTempCoins.end());\n-    \n+\n     // increase return value due of possible inputs\n     nValueRet+=nValueTroughInputs;\n-    \n+\n     return state;\n }\n \n@@ -1745,13 +1745,13 @@ bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction&\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, nSubtractFeeFromAmount};\n         vecSend.push_back(recipient);\n     }\n-    \n+\n     // Store possible vin so we might only partial-final-fund the tx\n     BOOST_FOREACH (const CTxIn& txIn, txToFund.vin)\n     {\n         vin.push_back(txIn);\n     }\n-    \n+\n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n     return CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, nChangePosRet, strFailReason, NULL, false);\n@@ -1977,14 +1977,14 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n-                \n+\n                 //remove signature if we used the signing only for the fee calculation\n                 if(!sign)\n                 {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n-                    vin.scriptSig = CScript();\n+                        vin.scriptSig = CScript();\n                 }\n-                \n+\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -2020,6 +2020,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const vector<\n             }\n         }\n     }\n+\n     return true;\n }\n "
      },
      {
        "sha": "1991aa9e4b1c821ed649101d4bb28baefb9dfb81",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e791407ab017495680e914b75f2c40fc4b67998/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3e791407ab017495680e914b75f2c40fc4b67998",
        "patch": "@@ -625,7 +625,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n     bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend ,const std::vector<CTxIn> vInputs,\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, const std::vector<CTxIn> vInputs,\n                            CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend,\n                            CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);"
      }
    ]
  },
  {
    "sha": "7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzkzMTc3ZjNiYzU1YmNlOWQ1MjA3ZDJjZTJkNjg5YTJlNWI2Zjk0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-23T05:56:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-24T09:03:58Z"
      },
      "message": "Tweak fundrawtransaction help text and return the fee as a float",
      "tree": {
        "sha": "d1fd707d440c89259cbc48828b55baece845e63a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1fd707d440c89259cbc48828b55baece845e63a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e791407ab017495680e914b75f2c40fc4b67998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e791407ab017495680e914b75f2c40fc4b67998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e791407ab017495680e914b75f2c40fc4b67998"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "3b7ce4efeb4978ca88a223b11b579a8c6acf40bb",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
        "patch": "@@ -27,7 +27,7 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         print \"Mining blocks...\"\n-        feeTolerance = 2 #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n+        feeTolerance = Decimal(0.00000002) #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n \n         self.nodes[2].generate(1)\n         self.nodes[0].generate(101)\n@@ -55,7 +55,7 @@ def run_test(self):\n             totalOut += out['value']\n \n         assert_equal(len(dec_tx['vin']), 1) #one vin coin\n-        assert_equal(fee*0.00000001+float(totalOut), 1.5) #the 1.5BTC coin must be taken\n+        assert_equal(fee + totalOut, 1.5) #the 1.5BTC coin must be taken\n \n         ##############################\n         # simple test with two coins #\n@@ -73,7 +73,7 @@ def run_test(self):\n             totalOut += out['value']\n \n         assert_equal(len(dec_tx['vin']), 2) #one vin coin\n-        assert_equal(fee*0.00000001+float(totalOut), 2.5) #the 1.5BTC+1.0BTC coins must have be taken\n+        assert_equal(fee + totalOut, 2.5) #the 1.5BTC+1.0BTC coins must have be taken\n \n         ##############################\n         # simple test with two coins #\n@@ -91,7 +91,7 @@ def run_test(self):\n             totalOut += out['value']\n \n         assert_equal(len(dec_tx['vin']), 1) #one vin coin\n-        assert_equal(fee*0.00000001+float(totalOut), 5.0) #the 5.0BTC coin must have be taken\n+        assert_equal(fee + totalOut, 5.0) #the 5.0BTC coin must have be taken\n \n \n         ################################\n@@ -110,7 +110,7 @@ def run_test(self):\n             totalOut += out['value']\n \n         assert_equal(len(dec_tx['vin']), 2) #one vin coin\n-        assert_equal(fee*0.00000001+float(totalOut), 6.0) #the 5.0BTC + 1.0BTC coins must have be taken\n+        assert_equal(fee + totalOut, 6.0) #the 5.0BTC + 1.0BTC coins must have be taken\n \n \n \n@@ -139,7 +139,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n \n-        assert_equal(fee*0.00000001+float(totalOut), utx['amount']) #compare vin total and totalout+fee\n+        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n         #########################################################################\n@@ -173,7 +173,7 @@ def run_test(self):\n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)\n \n-        assert_equal(fee*0.00000001+float(totalOut), 2.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        assert_equal(fee + totalOut, 2.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n \n \n         ###########################################\n@@ -217,7 +217,7 @@ def run_test(self):\n                     matchingIns+=1\n \n         assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n-        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        assert_equal(fee + totalOut, 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n \n \n         #########################################################\n@@ -253,7 +253,7 @@ def run_test(self):\n \n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)\n-        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        assert_equal(fee + totalOut, 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n \n \n         ##############################################\n@@ -284,7 +284,7 @@ def run_test(self):\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n@@ -299,7 +299,7 @@ def run_test(self):\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendmany(\"\", outputs);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n@@ -326,7 +326,7 @@ def run_test(self):\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n@@ -359,7 +359,7 @@ def run_test(self):\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']*100000000\n+        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n@@ -467,7 +467,7 @@ def run_test(self):\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[1].sendmany(\"\", outputs);\n-        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']*100000000\n+        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);"
      },
      {
        "sha": "fba9eebedfa076143fdd9c24e63870875d249a8b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
        "patch": "@@ -2355,30 +2355,30 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\"\\n\"\n-                            \"\\nAdd inputs to a raw transaction as well as a change output.\\n\"\n-                            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+                            \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n+                            \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n+                            \"Note that inputs which were signed may need to be resigned after completion.\\n\"\n+                            \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n-                            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\": n       calculated fee\\n\"\n+                            \"  \\\"hex\\\": \\\"value\\\",   (string)  The resulting raw transaction (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\": n            (numeric) The fee added to the transaction\\n\"\n                             \"}\\n\"\n                             \"\\\"hex\\\"             \\n\"\n                             \"\\nExamples:\\n\"\n-                            \"\\nCreate a transaction with empty vIns\\n\"\n+                            \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-                            \"\\nFund the transaction, and get back the hex\\n\"\n-                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"myhex\\\"\") +\n-                            \"\\nSign the transaction, and get back the hex\\n\"\n-                            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n-                            \"\\nSend the transaction (signed hex)\\n\"\n-                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n-                            \"\\nAs a json rpc call\\n\"\n-                            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n+                            \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"rawtransactionhex\\\"\") +\n+                            \"\\nSign the transaction\\n\"\n+                            + HelpExampleCli(\"signrawtransaction\", \"\\\"fundedtransactionhex\\\"\") +\n+                            \"\\nSend the transaction\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     // parse hex string from parameter\n     CTransaction tx;\n@@ -2394,7 +2394,7 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n \n     Object result;\n     result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n-    result.push_back(Pair(\"fee\", nFeeRet));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeRet)));\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjY2YzJlNjZmYzNmNGFlMDk4MGI2ZjJiYzRkNWVhYTg2YWFmODJk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-23T21:54:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-24T09:18:57Z"
      },
      "message": "Test inputs are not modified in fundrawtransaction",
      "tree": {
        "sha": "46734f5abcbd520ea59c209b8d26e70c13f2b177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46734f5abcbd520ea59c209b8d26e70c13f2b177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7393177f3bc55bce9d5207d2ce2d689a2e5b6f94"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b6ebb910fb775da3d5e07f02fa876fd016a0fbbf",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
        "patch": "@@ -157,15 +157,20 @@ def run_test(self):\n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+\n+        # 4-byte version + 1-byte vin count + 36-byte prevout then script_len\n+        rawtx = rawtx[:82] + \"0100\" + rawtx[84:]\n+\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+        assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n-        for out in dec_tx['vout']:\n+        for i, out in enumerate(dec_tx['vout']):\n             totalOut += out['value']\n             if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n                 matchingOuts+=1"
      }
    ]
  },
  {
    "sha": "840b89bd40f408f33c3dad1dc27d49b8870dd72e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDBiODliZDQwZjQwOGYzM2MzZGFkMWRjMjdkNDliODg3MGRkNzJl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-23T21:55:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-24T09:19:01Z"
      },
      "message": "Also return changepos from fundrawtransaction\n\n# Conflicts:\n#\tsrc/wallet/rpcwallet.cpp",
      "tree": {
        "sha": "820f005bf0f315bf6d5dfd969fb85e24ff9fe181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/820f005bf0f315bf6d5dfd969fb85e24ff9fe181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/840b89bd40f408f33c3dad1dc27d49b8870dd72e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/840b89bd40f408f33c3dad1dc27d49b8870dd72e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/840b89bd40f408f33c3dad1dc27d49b8870dd72e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/840b89bd40f408f33c3dad1dc27d49b8870dd72e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f66c2e66fc3f4ae0980b6f2bc4d5eaa86aaf82d"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 39,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e6e77eddfc34e64800bc5c00798d5cc870cc56ff",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/840b89bd40f408f33c3dad1dc27d49b8870dd72e/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/840b89bd40f408f33c3dad1dc27d49b8870dd72e/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=840b89bd40f408f33c3dad1dc27d49b8870dd72e",
        "patch": "@@ -142,6 +142,37 @@ def run_test(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n+\n+        #####################################################################\n+        # test a fundrawtransaction with which will not get a change output #\n+        #####################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+\n+        assert_equal(rawtxfund['changepos'], -1)\n+        assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n+\n+\n+\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -174,6 +205,8 @@ def run_test(self):\n             totalOut += out['value']\n             if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n                 matchingOuts+=1\n+            else:\n+                assert_equal(i, rawtxfund['changepos'])\n \n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)"
      },
      {
        "sha": "082b1b3e0178717a9f171de40e9b9d44757c4fd0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/840b89bd40f408f33c3dad1dc27d49b8870dd72e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/840b89bd40f408f33c3dad1dc27d49b8870dd72e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=840b89bd40f408f33c3dad1dc27d49b8870dd72e",
        "patch": "@@ -2363,8 +2363,9 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n                             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n-                            \"  \\\"hex\\\": \\\"value\\\",   (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\": n            (numeric) The fee added to the transaction\\n\"\n+                            \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) The fee added to the transaction\\n\"\n+                            \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n                             \"\\\"hex\\\"             \\n\"\n                             \"\\nExamples:\\n\"\n@@ -2388,12 +2389,13 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     CMutableTransaction txNew;\n     CAmount nFeeRet;\n     string strFailReason;\n-    int nChangePosRet = -1;\n-    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePosRet, strFailReason))\n+    int nChangePos = -1;\n+    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, nChangePos, strFailReason))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     Object result;\n     result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n+    result.push_back(Pair(\"changepos\", nChangePos));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nFeeRet)));\n \n     return result;"
      }
    ]
  }
]