JeremyRubin,2017-01-09T23:55:45Z,Sorry for the line noise; the earlier build error should be addressed now.,https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-271445743,271445743,
laanwj,2017-01-19T15:32:12Z,"ACK, needs squashing",https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-273807134,273807134,
JeremyRubin,2017-01-19T17:07:08Z,Squashed!,https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-273835825,273835825,
JeremyRubin,2017-01-20T22:19:59Z,Rebased to be on top of https://github.com/bitcoin/bitcoin/pull/9495.,https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-274195370,274195370,
JeremyRubin,2017-02-16T06:42:08Z,"Fixed the issues that @kallewoof raised, and squashed.\n\nUnsquashed preserved here https://github.com/JeremyRubin/bitcoin/tree/checkqueue-tests-unsquashed.",https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-280245368,280245368,
kallewoof,2017-02-25T17:58:22Z,"utACK 96c7f2c\n\nI'm a bit concerned about non-deterministic behavior in tests as this tends to be a pain when you do run into a problem. Or is this fixed seed / PRNG so that the numbers are always the same each time? (for `GetRand()`)",https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-282500634,282500634,
JeremyRubin,2017-02-25T19:22:04Z,"I could make them deterministic if that's desirable, but realistically these tests are already non-deterministic by virtue of being multithreaded. None of the uses of GetRand are particularly dangerous here, although perhaps they area a little slower than could be.",https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-282506083,282506083,
kallewoof,2017-02-25T21:31:16Z,"I think that would be desirable, even if the multithreading makes it not 100%.",https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-282513878,282513878,
kallewoof,2017-02-26T19:22:10Z,ACK 96c7f2c,https://github.com/bitcoin/bitcoin/pull/9497#issuecomment-282579755,282579755,
instagibbs,2017-01-09T19:09:29Z,couple of years out of date :),https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95224058,95224058,src/test/checkqueue_tests.cpp
JeremyRubin,2017-01-09T19:22:04Z,will fix!,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95226580,95226580,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T21:51:00Z,Maybe add a comment noting BasicTestingSetup can't be used because it doesn't set nScriptCheckThreads.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95680199,95680199,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T21:51:42Z,Maybe declare 128 and any other common parameters as constants above.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95680298,95680298,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T21:56:34Z,"Maybe replace the loop with vCheck.resize(min(total, r)).",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95681211,95681211,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:01:40Z,"Why is small_queue a shared pointer, not a unique pointer or just plain stack variable? Maybe add a comment explaining. Also, you could probably use make_shared if it does need to be a shared pointer.",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95682154,95682154,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:08:22Z,"Would seem more direct to just BOOST_CHECK the control.Wait() call instead of putting the results in an intermediate array. This way is ok too, though.",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95683341,95683341,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:11:31Z,Replacing [=] with [&] might allow small_queue not to be a shared_ptr.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95683957,95683957,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:17:24Z,Maybe also check that UniqueCheck::results.size == COUNT.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95685002,95685002,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:18:15Z,"pathological (spelling)\n",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95685133,95685133,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:28:56Z,"Instead of having the test be nondeterministic in this way, would anything be lost if you had the MemoryCheck constructor increment a static counter when passed a true arg, and the MemoryCheck destructor decrement the counter if the object was constructed with a true arg. Then you could detect the error case explicitly by checking the counter, and not have to allocate big chunks of memory.",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95686968,95686968,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-11T22:39:50Z,"I think you could easily make this test deterministic as well, eliminating the long sleep and the while (frozen) busy loops. Would just need to have ~FrozenCleanupCheck increment a counter and signal a conditional variable so you could wait here for enough jobs to be frozen, and then do the boost check. Then this could signal another condition variable to unfreeze the jobs. I think it would be wor",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r95688870,95688870,src/test/checkqueue_tests.cpp
ryanofsky,2017-01-13T22:58:32Z,"It might be clearer to replace all these bools with an enum like { STARTED, TRY_LOCK, TRY_LOCK_DONE, DONE, DONE_ACK }.\n\n",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r96090665,96090665,src/test/checkqueue_tests.cpp
JeremyRubin,2017-01-16T21:03:50Z,"Going to ignore this, I don't think it makes it more clear (to me, it's easier to debug several variables). If someone disagrees strongly, will change.",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r96304542,96304542,src/test/checkqueue_tests.cpp
kallewoof,2017-01-30T08:05:38Z,"The MemoryCheck struct destructor does not --, so this should not be == 0 unless no MemoryCheck constructors are ever called.",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r98392131,98392131,src/test/checkqueue_tests.cpp
kallewoof,2017-01-30T08:38:37Z,`fake_allocated_memory -= 1`,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r98395364,98395364,src/test/checkqueue_tests.cpp
kallewoof,2017-01-30T08:43:30Z,Unused variable.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r98395928,98395928,src/test/checkqueue_tests.cpp
kallewoof,2017-01-30T08:46:39Z,Doing `!fails && x < 100` here and simply `fails = queue->ControlMutex.try_lock();` would break iteration on first fail rather than iterate over all 100 (e.g. if first `try_lock()` fails).,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r98396352,98396352,src/test/checkqueue_tests.cpp
kallewoof,2017-01-30T08:47:30Z,Same here with `!fails && x < 100` as above.,https://github.com/bitcoin/bitcoin/pull/9497#discussion_r98396462,98396462,src/test/checkqueue_tests.cpp
JeremyRubin,2017-02-16T06:26:59Z,"Yes, it was the latter. The for loop never made anything (i = 9999; i<9999). Will fix :) ",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r101452594,101452594,src/test/checkqueue_tests.cpp
JeremyRubin,2017-02-16T06:27:10Z,"sure..\n",https://github.com/bitcoin/bitcoin/pull/9497#discussion_r101452623,101452623,src/test/checkqueue_tests.cpp
