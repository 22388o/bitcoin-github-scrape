[
  {
    "sha": "be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTM4Njg0MGQ0YTM5NGExYjYyMjFmYjdkMGZhMmIwYmM0YjFkNDEz",
    "commit": {
      "author": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-09-17T07:32:01Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-20T07:27:45Z"
      },
      "message": "test: Replace use of (dis)?connect_nodes globals\n\nA later scripted-diff commit replaces the majority of uses, which all\nfollow this pattern:\n\n    (dis)?connect_nodes(self.nodes[a], b)\n\nThis commit replaces the few \"special cases\".",
      "tree": {
        "sha": "f98ca6eef1e91537f0858b759841bae1b016f75b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f98ca6eef1e91537f0858b759841bae1b016f75b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413/comments",
    "author": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5bd46a4cc6d395ce71ecb99852c1774235a249c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5bd46a4cc6d395ce71ecb99852c1774235a249c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5bd46a4cc6d395ce71ecb99852c1774235a249c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b475b65e6857d6aa3492465215ce6af14637e16e",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
        "patch": "@@ -11,9 +11,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     create_confirmed_utxos,\n-    disconnect_nodes,\n )\n \n MAX_INITIAL_BROADCAST_DELAY = 15 * 60 # 15 minutes in seconds\n@@ -36,7 +34,7 @@ def test_broadcast(self):\n         min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n         utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n \n-        disconnect_nodes(node, 1)\n+        self.disconnect_nodes(0, 1)\n \n         self.log.info(\"Generate transactions that only node 0 knows about\")\n \n@@ -70,7 +68,7 @@ def test_broadcast(self):\n         self.restart_node(0)\n \n         self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n-        connect_nodes(node, 1)\n+        self.connect_nodes(0, 1)\n \n         # fast forward into the future & ensure that the second node has the txns\n         node.mockscheduler(MAX_INITIAL_BROADCAST_DELAY)\n@@ -91,7 +89,7 @@ def test_broadcast(self):\n         time.sleep(2) # allow sufficient time for possibility of broadcast\n         assert_equal(len(conn.get_invs()), 0)\n \n-        disconnect_nodes(node, 1)\n+        self.disconnect_nodes(0, 1)\n         node.disconnect_p2ps()\n \n     def test_txn_removal(self):"
      },
      {
        "sha": "1e907cd4aecad585c0da4c354d37dabcc92b1f25",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
        "patch": "@@ -13,7 +13,6 @@\n     assert_greater_than,\n     assert_raises_rpc_error,\n     connect_nodes,\n-    disconnect_nodes,\n     find_output,\n )\n \n@@ -46,7 +45,7 @@ def test_utxo_conversion(self):\n \n         # Disconnect offline node from others\n         # Topology of test network is linear, so this one call is enough\n-        disconnect_nodes(offline_node, 1)\n+        self.disconnect_nodes(0, 1)\n \n         # Create watchonly on online_node\n         online_node.createwallet(wallet_name='wonline', disable_private_keys=True)"
      }
    ]
  },
  {
    "sha": "4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjE2YzYxNDYxNmMxZmYwOWU1YjFkY2Q1ODUxNmJjYjlhODhlNWU4",
    "commit": {
      "author": {
        "name": "Prayank",
        "email": "prayank23@outlook.com",
        "date": "2020-09-17T07:46:07Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-20T07:42:00Z"
      },
      "message": "scripted-diff: test: Replace uses of (dis)?connect_nodes global\n\n-BEGIN VERIFY SCRIPT-\n\n # max-depth=0 excludes test/functional/test_framework/...\n FILES=$(git grep -l --max-depth 0 \"connect_nodes\" test/functional)\n\n # Replace (dis)?connect_nodes(self.nodes[a], b) with self.(dis)?connect_nodes(a, b)\n sed -i 's/\\b\\(dis\\)\\?connect_nodes(self\\.nodes\\[\\(.*\\)\\]/self.\\1connect_nodes(\\2/g' $FILES\n\n # Remove imports in the middle of a line\n sed -i 's/\\(dis\\)\\?connect_nodes, //g' $FILES\n sed -i 's/, \\(dis\\)\\?connect_nodes//g' $FILES\n\n # Remove imports on a line by themselves\n sed -i '/^\\s*\\(dis\\)\\?connect_nodes,\\?$/d' $FILES\n sed -i '/^from test_framework\\.util import connect_nodes$/d' $FILES\n\n-END VERIFY SCRIPT-\n\nCo-authored-by: Elliott Jin <elliott.jin@gmail.com>",
      "tree": {
        "sha": "834bfc54b5a403c441c428311103f32f9d4f9ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/834bfc54b5a403c441c428311103f32f9d4f9ef4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/comments",
    "author": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be386840d4a394a1b6221fb7d0fa2b0bc4b1d413"
      }
    ],
    "stats": {
      "total": 284,
      "additions": 119,
      "deletions": 165
    },
    "files": [
      {
        "sha": "c28bb7115f5bc135ce6360bb0a669c77ee8640b1",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -25,7 +25,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n )\n \n # P2PInterface is a class containing callbacks to be executed when a P2P\n@@ -115,7 +114,7 @@ def setup_network(self):\n         # In this test, we're not connecting node2 to node0 or node1. Calls to\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all(self.nodes[0:2])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n@@ -183,7 +182,7 @@ def run_test(self):\n         self.nodes[1].waitforblockheight(11)\n \n         self.log.info(\"Connect node2 and node1\")\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n \n         self.log.info(\"Wait for node2 to receive all the blocks from node1\")\n         self.sync_all()"
      },
      {
        "sha": "8abfdef3a1d64d54fc49ecdc43d3e540e9153d26",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -11,7 +11,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import get_datadir_path, connect_nodes\n+from test_framework.util import get_datadir_path\n import os\n \n \n@@ -36,7 +36,7 @@ def run_test(self):\n         # attempt.\n         self.nodes[1].generate(3)\n         with self.nodes[0].assert_debug_log([\"Failed to disconnect block\"]):\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n             self.nodes[1].generate(1)\n \n             # Check that node0 aborted"
      },
      {
        "sha": "8a8a0c76145312b2ef80c0ccda415181754a291a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -13,7 +13,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n-    connect_nodes,\n     satoshi_round,\n )\n \n@@ -232,9 +231,9 @@ def run_test(self):\n         # so the estimates would not be affected by the splitting transactions\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[1], 0)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n+        self.connect_nodes(1, 0)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(2, 1)\n \n         self.sync_all()\n "
      },
      {
        "sha": "abf87e8f0c6d38e9a1021300d0280bb494cf9843",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -18,7 +18,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import connect_nodes, assert_equal\n+from test_framework.util import assert_equal\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2\n@@ -39,7 +39,7 @@ def setup_network(self):\n         # block relay to inbound peers.\n         self.setup_nodes()\n         for i in range(self.num_nodes-1):\n-            connect_nodes(self.nodes[i+1], i)\n+            self.connect_nodes(i+1, i)\n \n     def run_test(self):\n         # Start building a chain on node0.  node2 shouldn't be able to sync until node1's"
      },
      {
        "sha": "cf102f321c81aef8f552a89114968373c22b77f8",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -9,8 +9,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n-    disconnect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -75,7 +73,7 @@ def run_test(self):\n             self.log.info(\"test -walletnotify after rescan\")\n             # restart node to rescan to force wallet notifications\n             self.start_node(1)\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n \n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n@@ -126,12 +124,12 @@ def run_test(self):\n             # Bump tx2 as bump2 and generate a block on node 0 while\n             # disconnected, then reconnect and check for notifications on node 1\n             # about newly confirmed bump2 and newly conflicted tx2.\n-            disconnect_nodes(self.nodes[0], 1)\n+            self.disconnect_nodes(0, 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n             self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n             self.sync_blocks()\n             self.expect_wallet_notify([bump2, tx2])\n             assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)"
      },
      {
        "sha": "f09bffe2d40b40454373d21ac164f859942f57e3",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -18,8 +18,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n-    disconnect_nodes,\n )\n \n # Rescans start at the earliest block up to 2 hours before a key timestamp, so\n@@ -102,11 +100,11 @@ def setup_network(self):\n \n         self.prunedir = os.path.join(self.nodes[2].datadir, self.chain, 'blocks', '')\n \n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[0], 4)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(0, 4)\n         self.sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n@@ -148,17 +146,17 @@ def create_chain_with_staleblocks(self):\n         for _ in range(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n-            disconnect_nodes(self.nodes[0], 1)\n-            disconnect_nodes(self.nodes[0], 2)\n+            self.disconnect_nodes(0, 1)\n+            self.disconnect_nodes(0, 2)\n             # Mine 24 blocks in node 1\n             mine_large_blocks(self.nodes[1], 24)\n \n             # Reorg back with 25 block chain from node 0\n             mine_large_blocks(self.nodes[0], 25)\n \n             # Create connections in the order so both nodes can see the reorg at the same time\n-            connect_nodes(self.nodes[0], 1)\n-            connect_nodes(self.nodes[0], 2)\n+            self.connect_nodes(0, 1)\n+            self.connect_nodes(0, 2)\n             self.sync_blocks(self.nodes[0:3])\n \n         self.log.info(\"Usage can be over target because of high stale rate: %d\" % calc_usage(self.prunedir))\n@@ -187,15 +185,15 @@ def reorg_test(self):\n         self.log.info(\"New best height: %d\" % self.nodes[1].getblockcount())\n \n         # Disconnect node1 and generate the new chain\n-        disconnect_nodes(self.nodes[0], 1)\n-        disconnect_nodes(self.nodes[1], 2)\n+        self.disconnect_nodes(0, 1)\n+        self.disconnect_nodes(1, 2)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n \n         self.log.info(\"Reconnect nodes\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n         self.sync_blocks(self.nodes[0:3], timeout=120)\n \n         self.log.info(\"Verify height on node 2: %d\" % self.nodes[2].getblockcount())\n@@ -336,7 +334,7 @@ def wallet_test(self):\n         # check that wallet loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         self.log.info(\"Syncing node 5 to test wallet\")\n-        connect_nodes(self.nodes[0], 5)\n+        self.connect_nodes(0, 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         self.sync_blocks(nds, wait=5, timeout=300)\n         self.restart_node(5, extra_args=[\"-prune=550\"]) # restart to trigger rescan"
      },
      {
        "sha": "7bd2fc7847ce43c0dfd4435d632c9fec738c8853",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -22,7 +22,6 @@\n     assert_equal,\n     assert_is_hex_string,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     hex_str_to_bytes,\n     try_rpc,\n )\n@@ -78,7 +77,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all()\n \n     def success_mine(self, node, txid, sign, redeem_script=\"\"):"
      },
      {
        "sha": "d675ae174c3cab9dc18df857c50756cb3fb00f57",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.messages import CTransaction, hash256, FromHex\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     assert_raises_rpc_error,\n )\n from io import BytesIO\n@@ -102,7 +101,7 @@ def test_basic(self):\n         rawtx = subs[3]\n \n         self.restart_node(0, [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [hashblock, hashtx, rawblock, rawtx]])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         for socket in sockets:\n             socket.connect(address)\n \n@@ -207,7 +206,7 @@ def test_reorg(self):\n         connect_blocks = self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks() # tx in mempool valid but not advertised\n \n         # Should receive nodes[1] tip\n@@ -264,7 +263,7 @@ def test_sequence(self):\n         self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n \n         # nodes[0] will reorg chain after connecting back nodes[1]\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         # Then we receive all block (dis)connect notifications for the 2 block reorg\n         assert_equal((dc_block, \"D\", None), seq.receive_sequence())\n@@ -406,7 +405,7 @@ def test_mempool_sync(self):\n         seq = ZMQSubscriber(socket, b'sequence')\n \n         self.restart_node(0, ['-zmqpub%s=%s' % (seq.topic.decode(), address)])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         socket.connect(address)\n         # Relax so that the subscriber is ready before publishing zmq messages\n         sleep(0.2)"
      },
      {
        "sha": "70cd4ebb3bf38affe767e4fb8dd7c1d9c034b2e6",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -45,8 +45,6 @@\n     assert_equal,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n-    disconnect_nodes,\n )\n \n \n@@ -83,11 +81,11 @@ def run_test(self):\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n \n         # disconnect nodes & make a txn that remains in the unbroadcast set.\n-        disconnect_nodes(self.nodes[0], 1)\n+        self.disconnect_nodes(0, 1)\n         assert(len(self.nodes[0].getpeerinfo()) == 0)\n         assert(len(self.nodes[0].p2ps) == 0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()"
      },
      {
        "sha": "80635e33c542452af972fd27a3ff8e996fb5da9d",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -25,7 +25,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -56,7 +55,7 @@ def mine_chain(self):\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 4000)\n         self.restart_node(0)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "3250cbecf905bbc8c9cf5649b1a502839b812cab",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -22,8 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n-    disconnect_nodes,\n )\n \n class CFiltersClient(P2PInterface):\n@@ -61,7 +59,7 @@ def run_test(self):\n         self.sync_blocks(timeout=600)\n \n         # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n-        disconnect_nodes(self.nodes[0], 1)\n+        self.disconnect_nodes(0, 1)\n \n         self.nodes[0].generate(1)\n         self.wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n@@ -90,7 +88,7 @@ def run_test(self):\n         assert_equal(len(response.headers), 1)\n \n         self.log.info(\"Reorg node 0 to a new chain.\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks(timeout=600)\n \n         main_block_hash = self.nodes[0].getblockhash(1000)"
      },
      {
        "sha": "3088a8aa46288b34fd1a3e4401d42e1a3c7ea157",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -9,7 +9,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n class DisconnectBanTest(BitcoinTestFramework):\n@@ -19,8 +18,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.log.info(\"Connect nodes both way\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.log.info(\"Test setban and listbanned RPCs\")\n \n@@ -78,8 +77,8 @@ def run_test(self):\n         # Clear ban lists\n         self.nodes[1].clearbanned()\n         self.log.info(\"Connect nodes both way\")\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.log.info(\"Test disconnectnode RPCs\")\n \n@@ -98,7 +97,7 @@ def run_test(self):\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n-        connect_nodes(self.nodes[0], 1)  # reconnect the node\n+        self.connect_nodes(0, 1)  # reconnect the node\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n "
      },
      {
        "sha": "b1a7ef6877f194eea44948b3180064a7de55bff8",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -13,8 +13,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    disconnect_nodes,\n-    connect_nodes,\n )\n \n \n@@ -40,9 +38,9 @@ def set_test_params(self):\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n     def disconnect_all(self):\n-        disconnect_nodes(self.nodes[0], 1)\n-        disconnect_nodes(self.nodes[0], 2)\n-        disconnect_nodes(self.nodes[1], 2)\n+        self.disconnect_nodes(0, 1)\n+        self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(1, 2)\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n@@ -60,7 +58,7 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n@@ -85,7 +83,7 @@ def run_test(self):\n \n         # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         try:\n             self.sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n@@ -94,7 +92,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n \n         # now connect also to node 1 (non pruned)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n \n         # sync must be possible\n         self.sync_blocks()\n@@ -106,7 +104,7 @@ def run_test(self):\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])"
      },
      {
        "sha": "653e3894af10d856853433dc36e5895ff0840457",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -22,7 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     p2p_port,\n )\n \n@@ -146,7 +145,7 @@ def check_tx_relay(self):\n         p2p_rebroadcast_wallet.send_txs_and_test([tx], self.nodes[1])\n \n         self.log.debug(\"Check that node[1] will send the tx to node[0] even though it is already in the mempool\")\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(1, 0)\n         with self.nodes[1].assert_debug_log([\"Force relaying tx {} from peer=0\".format(txid)]):\n             p2p_rebroadcast_wallet.send_txs_and_test([tx], self.nodes[1])\n             self.wait_until(lambda: txid in self.nodes[0].getrawmempool())\n@@ -165,7 +164,7 @@ def checkpermission(self, args, expectedPermissions, whitelisted):\n         if whitelisted is not None:\n             args = [*args, '-deprecatedrpc=whitelisted']\n         self.restart_node(1, args)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         if whitelisted is None:\n             assert 'whitelisted' not in peerinfo"
      },
      {
        "sha": "5c1553841847ee9335981be7ac1dbc7217658fb7",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -81,8 +81,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n-    disconnect_nodes,\n     softfork_active,\n     hex_str_to_bytes,\n     assert_raises_rpc_error,\n@@ -233,8 +231,8 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         self.setup_nodes()\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n         self.sync_all()\n \n     # Helper functions\n@@ -498,7 +496,7 @@ def test_v0_outputs_arent_spendable(self):\n         # node2 doesn't need to be connected for this test.\n         # (If it's connected, node0 may propagate an invalid block to it over\n         # compact blocks and the nodes would have inconsistent tips.)\n-        disconnect_nodes(self.nodes[0], 2)\n+        self.disconnect_nodes(0, 2)\n \n         # Create two outputs, a p2wsh and p2sh-p2wsh\n         witness_program = CScript([OP_TRUE])\n@@ -560,7 +558,7 @@ def test_v0_outputs_arent_spendable(self):\n             # TODO: support multiple acceptable reject reasons.\n             test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False)\n \n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n@@ -1945,7 +1943,7 @@ def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n         self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)"
      },
      {
        "sha": "e7a05d8547ed3ade76bff3143a5601478991e7dd",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -60,7 +60,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -284,7 +283,7 @@ def run_test(self):\n         test_node.wait_for_disconnect()\n \n         # 9. Connect node1 to node0 and ensure it is able to sync\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")\n "
      },
      {
        "sha": "167c4671ef4322dcc17ff117474a912aa987143d",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -12,7 +12,6 @@\n     assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     count_bytes,\n     find_vout_for_address,\n )\n@@ -38,10 +37,10 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n \n     def run_test(self):\n         self.log.info(\"Connect nodes, set fees, generate blocks, and sync\")"
      },
      {
        "sha": "c3c3622cf9067e8c87254a36bf59d05a8e4e20c8",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal, assert_is_hex_string, assert_raises_rpc_error,\n-    connect_nodes, disconnect_nodes\n     )\n \n FILTER_TYPES = [\"basic\"]\n@@ -20,7 +19,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Create two chains by disconnecting nodes 0 & 1, mining, then reconnecting\n-        disconnect_nodes(self.nodes[0], 1)\n+        self.disconnect_nodes(0, 1)\n \n         self.nodes[0].generate(3)\n         self.nodes[1].generate(4)\n@@ -29,7 +28,7 @@ def run_test(self):\n         chain0_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]\n \n         # Reorg node 0 to a new chain\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n \n         assert_equal(self.nodes[0].getblockcount(), 4)"
      },
      {
        "sha": "340a66e12f389a9fcddd609a26ae9ac5edd9fbf6",
        "filename": "test/functional/rpc_getpeerinfo_deprecation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_getpeerinfo_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_getpeerinfo_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getpeerinfo_deprecation.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Test deprecation of getpeerinfo RPC fields.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import connect_nodes\n \n \n class GetpeerinfoDeprecationTest(BitcoinTestFramework):\n@@ -26,7 +25,7 @@ def test_banscore_deprecation(self):\n \n     def test_addnode_deprecation(self):\n         self.restart_node(1, [\"-deprecatedrpc=getpeerinfo_addnode\"])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         self.log.info(\"Test getpeerinfo by default no longer returns an addnode field\")\n         assert \"addnode\" not in self.nodes[0].getpeerinfo()[0].keys()"
      },
      {
        "sha": "f884b8d293e9492d45df045324435e503f4b75e9",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n )\n \n \n@@ -32,7 +31,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks(self.nodes[0:2])\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n@@ -43,7 +42,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         self.sync_blocks(self.nodes[1:3])\n         assert_equal(self.nodes[2].getblockcount(), 6)"
      },
      {
        "sha": "9f7498a2f68e57fffb3ad5d88c1261d844cd215b",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -24,7 +24,6 @@\n     assert_greater_than_or_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     p2p_port,\n )\n \n@@ -53,8 +52,8 @@ def run_test(self):\n         # Get out of IBD for the minfeefilter and getpeerinfo tests.\n         self.nodes[0].generate(101)\n         # Connect nodes both ways.\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         self.test_connection_count()\n         self.test_getpeerinfo()\n@@ -117,8 +116,8 @@ def test_getnetworkinfo(self):\n         with self.nodes[0].assert_debug_log(expected_msgs=['SetNetworkActive: true\\n']):\n             self.nodes[0].setnetworkactive(state=True)\n         # Connect nodes both ways.\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 0)\n \n         info = self.nodes[0].getnetworkinfo()\n         assert_equal(info['networkactive'], True)"
      },
      {
        "sha": "04d55b103f97a572e39e7fe7e791d0b9a7bdc16e",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n )\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):\n@@ -61,7 +60,7 @@ def run_test(self):\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         self.log.info(\"Make Node0 prefer block G\")\n@@ -98,8 +97,8 @@ def run_test(self):\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         node_sync_via_rpc(self.nodes[1:3])\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         assert_equal(self.nodes[2].getbestblockhash(), hashL)"
      },
      {
        "sha": "32dc2f8644e129961ce9fbd34460ac0c3940944c",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -12,7 +12,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     find_output,\n )\n \n@@ -79,8 +78,8 @@ def test_utxo_conversion(self):\n         wonline.unloadwallet()\n \n         # Reconnect\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n \n     def assert_change_type(self, psbtx, expected_type):\n         \"\"\"Assert that the given PSBT has a change output with the given type.\"\"\""
      },
      {
        "sha": "326495843fe3424a02dd97fb6ea6ae49893743e9",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -20,7 +20,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -60,7 +59,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n \n     def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')"
      },
      {
        "sha": "bc48449084262b559ecceac45a3aa22b8c91d4f8",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -6,7 +6,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    connect_nodes,\n     p2p_port\n )\n \n@@ -18,7 +17,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n \n@@ -32,14 +31,14 @@ def run_test(self):\n \n         # However, node 0 should be able to reconnect if it has noban permission\n         self.restart_node(1, ['-whitelist=127.0.0.1'])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert('noban' in peerinfo['permissions'])\n \n         # If we remove the ban, Node 0 should be able to reconnect even without noban permission\n         self.nodes[1].setban(\"127.0.0.1\", \"remove\")\n         self.restart_node(1, [])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n "
      },
      {
        "sha": "2e0edcfa38580a99d7b4c0900186b8b6a80d5407",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -16,8 +16,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n-    disconnect_nodes,\n )\n \n \n@@ -50,7 +48,7 @@ def run_test(self):\n         balance = newbalance\n \n         # Disconnect nodes so node0's transactions don't get into node1's mempool\n-        disconnect_nodes(self.nodes[0], 1)\n+        self.disconnect_nodes(0, 1)\n \n         # Identify the 10btc outputs\n         nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txA)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n@@ -161,7 +159,7 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n \n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n \n         # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted"
      },
      {
        "sha": "6b3276e404660f633bfcaae39d80ef6ecd5eb9ca",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -62,7 +62,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n class AddressTypeTest(BitcoinTestFramework):\n@@ -90,7 +89,7 @@ def setup_network(self):\n         # Fully mesh-connect nodes for faster mempool sync\n         for i, j in itertools.product(range(self.num_nodes), repeat=2):\n             if i > j:\n-                connect_nodes(self.nodes[i], j)\n+                self.connect_nodes(i, j)\n         self.sync_all()\n \n     def get_balances(self, key='trusted'):"
      },
      {
        "sha": "229c134a4b3f4af7f7a933a9eb43ecdb09d7a5b6",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -9,7 +9,6 @@\n     assert_approx,\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n def reset_balance(node, discardaddr):\n@@ -111,7 +110,7 @@ def test_persistence(self):\n         assert_equal(self.nodes[1].getwalletinfo()[\"avoid_reuse\"], True)\n \n         self.restart_node(1)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n \n         # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true\n         assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)"
      },
      {
        "sha": "c7bd2ea02bea0f1992b775e3984785c03bd8eb6c",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -39,7 +39,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -62,10 +61,10 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         self.setup_nodes()\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[1], 3)\n-        connect_nodes(self.nodes[2], 3)\n-        connect_nodes(self.nodes[2], 0)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(1, 3)\n+        self.connect_nodes(2, 3)\n+        self.connect_nodes(2, 0)\n         self.sync_all()\n \n     def one_send(self, from_node, to_address):\n@@ -96,10 +95,10 @@ def start_three(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[0], 3)\n-        connect_nodes(self.nodes[1], 3)\n-        connect_nodes(self.nodes[2], 3)\n-        connect_nodes(self.nodes[2], 0)\n+        self.connect_nodes(0, 3)\n+        self.connect_nodes(1, 3)\n+        self.connect_nodes(2, 3)\n+        self.connect_nodes(2, 0)\n \n     def stop_three(self):\n         self.stop_node(0)"
      },
      {
        "sha": "589fab9992af7cd47b7e426e6f987a821b211565",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n \n@@ -262,7 +261,7 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_orig\n         self.restart_node(1, ['-persistmempool=0'])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_blocks()\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)"
      },
      {
        "sha": "d386d94e0c4d611391d0f6136df0f34192011514",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -11,7 +11,6 @@\n     assert_equal,\n     assert_fee_amount,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n from test_framework.wallet_util import test_address\n \n@@ -32,9 +31,9 @@ def setup_network(self):\n         self.setup_nodes()\n         # Only need nodes 0-2 running at start of test\n         self.stop_node(3)\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all(self.nodes[0:3])\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n@@ -281,7 +280,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         self.start_node(3, self.nodes[3].extra_args)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 3)\n         self.sync_all()\n \n         # check if we can list zero value tx as available coins\n@@ -316,9 +315,9 @@ def run_test(self):\n         self.start_node(0, [\"-walletbroadcast=0\"])\n         self.start_node(1, [\"-walletbroadcast=0\"])\n         self.start_node(2, [\"-walletbroadcast=0\"])\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_all(self.nodes[0:3])\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n@@ -343,9 +342,9 @@ def run_test(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n         self.sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)"
      },
      {
        "sha": "d45cf05689ef399e1e2c8e45c531e843117b7322",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n     assert_raises_rpc_error,\n )\n \n@@ -99,7 +98,7 @@ def run_test(self):\n                 assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\" + str(i) + \"'\")\n             assert_equal(hd_info_2[\"hdmasterfingerprint\"], hd_fingerprint)\n         assert_equal(hd_add, hd_add_2)\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all()\n \n         # Needs rescan\n@@ -115,7 +114,7 @@ def run_test(self):\n             os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename),\n         )\n         self.start_node(1, extra_args=self.extra_args[1])\n-        connect_nodes(self.nodes[0], 1)\n+        self.connect_nodes(0, 1)\n         self.sync_all()\n         # Wallet automatically scans blocks older than key on startup\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n@@ -183,7 +182,7 @@ def run_test(self):\n             # Restart node 1 with keypool of 3 and a different wallet\n             self.nodes[1].createwallet(wallet_name='origin', blank=True)\n             self.restart_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n-            connect_nodes(self.nodes[0], 1)\n+            self.connect_nodes(0, 1)\n \n             # sethdseed restoring and seeing txs to addresses out of the keypool\n             origin_rpc = self.nodes[1].get_wallet_rpc('origin')"
      },
      {
        "sha": "aad112b499f55c36c329c51e6ac861a74a39102a",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -22,7 +22,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.address import AddressType\n from test_framework.util import (\n-    connect_nodes,\n     assert_equal,\n     set_node_times,\n )\n@@ -165,7 +164,7 @@ def setup_network(self):\n \n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n-            connect_nodes(self.nodes[i], 0)\n+            self.connect_nodes(i, 0)\n \n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for"
      },
      {
        "sha": "78e06c5916c89fbc6116ffcde93979af70cd4963",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -16,7 +16,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n )\n \n \n@@ -38,9 +37,9 @@ def run_test(self):\n         self.stop_node(1)\n         shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n \n         for i, output_type in enumerate([\"legacy\", \"p2sh-segwit\", \"bech32\"]):\n \n@@ -72,7 +71,7 @@ def run_test(self):\n             self.stop_node(idx)\n             shutil.copyfile(wallet_backup_path, wallet_path)\n             self.start_node(idx, self.extra_args[idx])\n-            connect_nodes(self.nodes[0], idx)\n+            self.connect_nodes(0, idx)\n             self.sync_all()\n \n             self.log.info(\"Verify keypool is restored and balance is correct\")"
      },
      {
        "sha": "09a336b764e63a9debb06d38934bf18624dea0c5",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -10,7 +10,6 @@\n     assert_array_result,\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes,\n )\n \n from decimal import Decimal\n@@ -26,7 +25,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # All nodes are in IBD from genesis, so they'll need the miner (node2) to be an outbound connection, or have\n         # only one connection. (See fPreferredDownload in net_processing)\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].generate(101)\n         self.sync_all()\n "
      },
      {
        "sha": "a1d6b098ad64a4d4abd0123f6d81a243d7bc56ba",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -20,8 +20,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n         assert_equal,\n-        connect_nodes,\n-        disconnect_nodes,\n )\n \n class ReorgsRestoreTest(BitcoinTestFramework):\n@@ -38,9 +36,9 @@ def run_test(self):\n         self.sync_blocks()\n \n         # Disconnect node1 from others to reorg its chain later\n-        disconnect_nodes(self.nodes[0], 1)\n-        disconnect_nodes(self.nodes[1], 2)\n-        connect_nodes(self.nodes[0], 2)\n+        self.disconnect_nodes(0, 1)\n+        self.disconnect_nodes(1, 2)\n+        self.connect_nodes(0, 2)\n \n         # Send a tx to be unconfirmed later\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n@@ -50,7 +48,7 @@ def run_test(self):\n         assert_equal(tx_before_reorg[\"confirmations\"], 4)\n \n         # Disconnect node0 from node2 to broadcast a conflict on their respective chains\n-        disconnect_nodes(self.nodes[0], 2)\n+        self.disconnect_nodes(0, 2)\n         nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txid_conflict_from)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n         inputs = []\n         inputs.append({\"txid\": txid_conflict_from, \"vout\": nA})\n@@ -69,7 +67,7 @@ def run_test(self):\n         self.nodes[2].generate(9)\n \n         # Reconnect node0 and node2 and check that conflicted_txid is effectively conflicted\n-        connect_nodes(self.nodes[0], 2)\n+        self.connect_nodes(0, 2)\n         self.sync_blocks([self.nodes[0], self.nodes[2]])\n         conflicted = self.nodes[0].gettransaction(conflicted_txid)\n         conflicting = self.nodes[0].gettransaction(conflicting_txid)"
      },
      {
        "sha": "bdbbb3e530bb90f904dae358c872865bd7f5abf5",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -8,8 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n-    disconnect_nodes,\n )\n from test_framework.messages import CTransaction, COIN\n \n@@ -30,7 +28,7 @@ def add_options(self, parser):\n     def setup_network(self):\n         # Start with split network:\n         super().setup_network()\n-        disconnect_nodes(self.nodes[1], 2)\n+        self.disconnect_nodes(1, 2)\n \n     def run_test(self):\n         if self.options.segwit:\n@@ -118,7 +116,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].sendrawtransaction(node0_tx2[\"hex\"])\n         self.nodes[2].sendrawtransaction(tx2[\"hex\"])\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync"
      },
      {
        "sha": "42de131354670808a09a3648f6bf2ab58564815a",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "patch": "@@ -8,8 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes,\n-    disconnect_nodes,\n     find_output,\n )\n \n@@ -28,7 +26,7 @@ def add_options(self, parser):\n     def setup_network(self):\n         # Start with split network:\n         super().setup_network()\n-        disconnect_nodes(self.nodes[1], 2)\n+        self.disconnect_nodes(1, 2)\n \n     def run_test(self):\n         # All nodes should start with 1,250 BTC:\n@@ -116,7 +114,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n-        connect_nodes(self.nodes[1], 2)\n+        self.connect_nodes(1, 2)\n         self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         self.sync_blocks()\n         assert_equal(self.nodes[0].gettransaction(doublespend_txid)[\"confirmations\"], 2)"
      }
    ]
  },
  {
    "sha": "3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzdkOWFiOGM4ZWM1Mjg0Y2RhZDFhNTNlZTMxMGI3OWI5MzFmMTJm",
    "commit": {
      "author": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-09-17T07:24:03Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-20T07:43:00Z"
      },
      "message": "test: Move (dis)?connect_nodes globals into TestFramework as helpers",
      "tree": {
        "sha": "ba97cec0a4775ec3910bbe9847a01b7e8c0acd76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba97cec0a4775ec3910bbe9847a01b7e8c0acd76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f/comments",
    "author": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b16c614616c1ff09e5b1dcd58516bcb9a88e5e8"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 42,
      "deletions": 45
    },
    "files": [
      {
        "sha": "20f608a9cf770005d4892aabcaaebb7dfd770776",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 42,
        "deletions": 4,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
        "patch": "@@ -27,10 +27,9 @@\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n-    connect_nodes,\n-    disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n+    p2p_port,\n     wait_until_helper,\n )\n \n@@ -529,10 +528,49 @@ def wait_for_node_exit(self, i, timeout):\n         self.nodes[i].process.wait(timeout)\n \n     def connect_nodes(self, a, b):\n-        connect_nodes(self.nodes[a], b)\n+        def connect_nodes_helper(from_connection, node_num):\n+            ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n+            from_connection.addnode(ip_port, \"onetry\")\n+            # poll until version handshake complete to avoid race conditions\n+            # with transaction relaying\n+            # See comments in net_processing:\n+            # * Must have a version message before anything else\n+            # * Must have a verack message before anything else\n+            wait_until_helper(lambda: all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n+            wait_until_helper(lambda: all(peer['bytesrecv_per_msg'].pop('verack', 0) == 24 for peer in from_connection.getpeerinfo()))\n+\n+        connect_nodes_helper(self.nodes[a], b)\n \n     def disconnect_nodes(self, a, b):\n-        disconnect_nodes(self.nodes[a], b)\n+        def disconnect_nodes_helper(from_connection, node_num):\n+            def get_peer_ids():\n+                result = []\n+                for peer in from_connection.getpeerinfo():\n+                    if \"testnode{}\".format(node_num) in peer['subver']:\n+                        result.append(peer['id'])\n+                return result\n+\n+            peer_ids = get_peer_ids()\n+            if not peer_ids:\n+                self.log.warning(\"disconnect_nodes: {} and {} were not connected\".format(\n+                    from_connection.index,\n+                    node_num,\n+                ))\n+                return\n+            for peer_id in peer_ids:\n+                try:\n+                    from_connection.disconnectnode(nodeid=peer_id)\n+                except JSONRPCException as e:\n+                    # If this node is disconnected between calculating the peer id\n+                    # and issuing the disconnect, don't worry about it.\n+                    # This avoids a race condition if we're mass-disconnecting peers.\n+                    if e.error['code'] != -29:  # RPC_CLIENT_NODE_NOT_CONNECTED\n+                        raise\n+\n+            # wait to disconnect\n+            wait_until_helper(lambda: not get_peer_ids(), timeout=5)\n+\n+        disconnect_nodes_helper(self.nodes[a], b)\n \n     def split_network(self):\n         \"\"\""
      },
      {
        "sha": "3356f1ab101a954fc62fdfa58903537003db314c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=3c7d9ab8c8ec5284cdad1a53ee310b79b931f12f",
        "patch": "@@ -411,47 +411,6 @@ def set_node_times(nodes, t):\n         node.setmocktime(t)\n \n \n-def disconnect_nodes(from_connection, node_num):\n-    def get_peer_ids():\n-        result = []\n-        for peer in from_connection.getpeerinfo():\n-            if \"testnode{}\".format(node_num) in peer['subver']:\n-                result.append(peer['id'])\n-        return result\n-\n-    peer_ids = get_peer_ids()\n-    if not peer_ids:\n-        logger.warning(\"disconnect_nodes: {} and {} were not connected\".format(\n-            from_connection.index,\n-            node_num,\n-        ))\n-        return\n-    for peer_id in peer_ids:\n-        try:\n-            from_connection.disconnectnode(nodeid=peer_id)\n-        except JSONRPCException as e:\n-            # If this node is disconnected between calculating the peer id\n-            # and issuing the disconnect, don't worry about it.\n-            # This avoids a race condition if we're mass-disconnecting peers.\n-            if e.error['code'] != -29:  # RPC_CLIENT_NODE_NOT_CONNECTED\n-                raise\n-\n-    # wait to disconnect\n-    wait_until_helper(lambda: not get_peer_ids(), timeout=5)\n-\n-\n-def connect_nodes(from_connection, node_num):\n-    ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n-    from_connection.addnode(ip_port, \"onetry\")\n-    # poll until version handshake complete to avoid race conditions\n-    # with transaction relaying\n-    # See comments in net_processing:\n-    # * Must have a version message before anything else\n-    # * Must have a verack message before anything else\n-    wait_until_helper(lambda: all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n-    wait_until_helper(lambda: all(peer['bytesrecv_per_msg'].pop('verack', 0) == 24 for peer in from_connection.getpeerinfo()))\n-\n-\n # Transaction/Block functions\n #############################\n "
      }
    ]
  }
]