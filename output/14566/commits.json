[
  {
    "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjU0NGZhZmYwMTY0MDUxZDI2NTRkNmFhYmI4NmY1NTVmZDJlODZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-21T23:23:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:31Z"
      },
      "message": "qa: Add TestNode::assert_debug_log\n\nGithub-Pull: #14024\nRebased-From: fa3e9f7627784ee00980590e5bf044a0e1249999",
      "tree": {
        "sha": "432e97ff9e6e406c376eb634acae18eb5041d67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432e97ff9e6e406c376eb634acae18eb5041d67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12bc62131f6579c83f3054acf55917200d50f93e",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -136,11 +136,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "a831fdcd5d2b606f6fbb8396d31f66aaed4a90e6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -229,6 +230,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      }
    ]
  },
  {
    "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzJmYmFiZTE3YTg2MzlmZmFiMmVmMDJmZjg0ZDBlZTY2YzMwZmFl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-13T20:59:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:40Z"
      },
      "message": "[qa] Use correct python index slices in example test\n\nGithub-Pull: #14215\nRebased-From: 9dcb6763fb6851df6572e75278a41029fbfe8809",
      "tree": {
        "sha": "6b50d1bd8ac5071364343d80fbe3236e056dffd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b50d1bd8ac5071364343d80fbe3236e056dffd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3bdb3b4f1ca2ca83cd961b187ae46e7fbb446a6b",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "patch": "@@ -111,7 +111,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -135,7 +135,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      }
    ]
  },
  {
    "sha": "7ff32a6b985054558851fc451879309a56753bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmYzMmE2Yjk4NTA1NDU1ODg1MWZjNDUxODc5MzA5YTU2NzUzYmRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-24T18:02:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:47Z"
      },
      "message": "qa: Add some actual witness in rpc_rawtransaction\n\nGithub-Pull: #14052\nRebased-From: fae040010deda9404b15b214cec2a099fb831253",
      "tree": {
        "sha": "0657c6a563d9359550fe2124b24376c030e062a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0657c6a563d9359550fe2124b24376c030e062a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff32a6b985054558851fc451879309a56753bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8169f2b9814411e128811883aee86315ffbf08ed",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=7ff32a6b985054558851fc451879309a56753bdd",
        "patch": "@@ -358,7 +358,7 @@ def run_test(self):\n \n         # decoderawtransaction tests\n         # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n         assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction"
      }
    ]
  },
  {
    "sha": "96dc93686237facede4b53e4962295ffd709c85e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRjOTM2ODYyMzdmYWNlZGU0YjUzZTQ5NjIyOTVmZmQ3MDljODVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T15:50:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:54Z"
      },
      "message": "scripted-diff: Pass node into p2p_segwit acceptance tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/(test_witness_block|test_transaction_acceptance)\\((self\\.nodes\\[.\\])\\.rpc/\\1(\\2/g' test/functional/p2p_segwit.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: 749ba35e7c9fbc21dbea27fd1be102b91313d132",
      "tree": {
        "sha": "769e47f25e95afd8f57b644e2a68b254200c1519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/769e47f25e95afd8f57b644e2a68b254200c1519"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dc93686237facede4b53e4962295ffd709c85e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff32a6b985054558851fc451879309a56753bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 107,
      "deletions": 107
    },
    "files": [
      {
        "sha": "82eacc84f4b02726e32616a81666410c86ff4537",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 107,
        "deletions": 107,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=96dc93686237facede4b53e4962295ffd709c85e",
        "patch": "@@ -349,7 +349,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n         wait_until(lambda: 'reject' in self.test_node.last_message and self.test_node.last_message[\"reject\"].reason ==  b\"unexpected-witness\")\n \n         # But it should not be permanently marked bad...\n@@ -380,20 +380,20 @@ def test_block_relay(self):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n+        test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n+        test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -423,7 +423,7 @@ def test_block_relay(self):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -640,11 +640,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -674,7 +674,7 @@ def test_standardness_v0(self):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -689,7 +689,7 @@ def test_standardness_v0(self):\n \n         # This is always accepted, since the mempool policy is to consider segwit as always active\n         # and thus allow segwit outputs\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n@@ -701,7 +701,7 @@ def test_standardness_v0(self):\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -723,7 +723,7 @@ def test_standardness_v0(self):\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -760,10 +760,10 @@ def test_p2sh_witness(self):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -777,12 +777,12 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the script_sig, should also fail.\n         spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -792,15 +792,15 @@ def test_p2sh_witness(self):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [b'a', witness_program]\n \n         # Verify mempool acceptance\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=True, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're after activation, then sending this with witnesses should be valid.\n         # This no longer works before activation, because SCRIPT_VERIFY_WITNESS\n         # is always set.\n         # TODO: rewrite this test to make clear that it only works after activation.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -821,7 +821,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -832,7 +832,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         tx = CTransaction()\n@@ -864,7 +864,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -878,7 +878,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n         block_3.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -890,7 +890,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -930,11 +930,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n     @subtest\n     def test_witness_block_size(self):\n@@ -998,7 +998,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1008,7 +1008,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -1071,7 +1071,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1080,7 +1080,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -1096,7 +1096,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1108,7 +1108,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1117,7 +1117,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -1147,14 +1147,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -1188,7 +1188,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1203,7 +1203,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1227,7 +1227,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -1262,15 +1262,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1279,13 +1279,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1314,11 +1314,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -1343,24 +1343,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n         tx3.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -1400,7 +1400,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1417,8 +1417,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue - 1000, script_pubkey)]\n             tx.rehash()\n-            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1437,8 +1437,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1454,15 +1454,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1480,7 +1480,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1494,13 +1494,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n     @subtest\n@@ -1532,7 +1532,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1551,11 +1551,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1571,11 +1571,11 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1588,10 +1588,10 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1603,10 +1603,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     @subtest\n@@ -1626,11 +1626,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1647,19 +1647,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1683,7 +1683,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1725,15 +1725,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1755,7 +1755,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1765,7 +1765,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1786,7 +1786,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1808,7 +1808,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1825,18 +1825,18 @@ def test_non_standard_witness_blinding(self):\n         tx2.rehash()\n         # This will be rejected due to a policy check:\n         # No witness is allowed, since it is not a witness program but a p2sh program\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n \n         # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx3.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1872,7 +1872,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1897,45 +1897,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -2011,7 +2011,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -2028,7 +2028,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -2041,14 +2041,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG] * (checksig_count - 1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -2064,7 +2064,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [witness_program_justright]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n "
      }
    ]
  },
  {
    "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2U1MzhjZjZhOWRmOWE1ZWY1NzM2M2U1M2ZiZWIwMWQxYWRlNTEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:21:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:01Z"
      },
      "message": "scripted-diff: Use named arguments in feature_block\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e \"s/sync_blocks\\((.*?), (True|False), (1.?), /sync_blocks(\\1, success=\\2, reject_code=\\3, reject_reason=/g\" ./test/functional/feature_block.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: b4d33096734d787b0e1d754064039cbb64ce8d61",
      "tree": {
        "sha": "4f3f4fd76bc9c81d74fd74cbea64b4632390a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f3f4fd76bc9c81d74fd74cbea64b4632390a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96dc93686237facede4b53e4962295ffd709c85e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "e81ea12d0f835caba1cac39485f9afc78b8e1a93",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "patch": "@@ -169,7 +169,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b9], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -181,7 +181,7 @@ def run_test(self):\n         self.sync_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b11], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -194,7 +194,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b12, b13, b14], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -213,7 +213,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b16], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -222,7 +222,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b17], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -235,7 +235,7 @@ def run_test(self):\n         self.sync_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b19], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -244,7 +244,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b20], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -257,7 +257,7 @@ def run_test(self):\n         self.sync_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b22], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -286,7 +286,7 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b24], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n         self.sync_blocks([b25], False)\n@@ -304,7 +304,7 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b26], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n@@ -316,7 +316,7 @@ def run_test(self):\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b28], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n@@ -352,7 +352,7 @@ def run_test(self):\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b32], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n@@ -365,7 +365,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b34], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n@@ -378,7 +378,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b36], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -395,12 +395,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b37], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b38], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -492,7 +492,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b40], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -555,7 +555,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], False, 16, b'bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_code=16, reject_reason=b'bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +570,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -593,7 +593,7 @@ def run_test(self):\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], False, 16, b'bad-txnmrklroot', reconnect=True)\n+        self.sync_blocks([b49], success=False, reject_code=16, reject_reason=b'bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n@@ -607,15 +607,15 @@ def run_test(self):\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], False, 16, b'bad-cb-multiple', reconnect=True)\n+        self.sync_blocks([b51], success=False, reject_code=16, reject_reason=b'bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b52], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n@@ -682,7 +682,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -702,7 +702,7 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56p2], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n         self.sync_blocks([b57p2], True)\n@@ -727,15 +727,15 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b58], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n+        self.sync_blocks([b59], success=False, reject_code=16, reject_reason=b'bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n@@ -759,7 +759,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], False, 16, b'bad-txns-BIP30', reconnect=True)\n+        self.sync_blocks([b61], success=False, reject_code=16, reject_reason=b'bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -776,7 +776,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -790,7 +790,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -824,7 +824,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], False, 1, b'error parsing message')\n+        self.sync_blocks([b64a], success=False, reject_code=1, reject_reason=b'error parsing message')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -866,7 +866,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b66], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -881,7 +881,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b67], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -900,7 +900,7 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b68], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n@@ -924,7 +924,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b70], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -949,7 +949,7 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b71], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n         self.sync_blocks([b72], True)\n@@ -987,7 +987,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1011,7 +1011,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b74], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1160,7 +1160,7 @@ def run_test(self):\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b89a], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n "
      }
    ]
  },
  {
    "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhlZmVhY2E2YmJiOTE1OGY3NzMxZjVkNzJhZTc1YjIzMjBjYTJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:42:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:08Z"
      },
      "message": "qa: Use named args in some tests\n\nGithub-Pull: #14101\nRebased-From: fa782a308dbe7bc579c122f63c1c65666fc85e91",
      "tree": {
        "sha": "1171a3c47ed131dd2a672810762db878e36982ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1171a3c47ed131dd2a672810762db878e36982ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a5d1ec3e8727dc4c315e4a927948d0f360b484d2",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -42,7 +42,7 @@ def run_test(self):\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        node.p2p.send_blocks_and_test([block1], node, True)\n+        node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n         node.generate(100)\n@@ -79,7 +79,7 @@ def run_test(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -102,7 +102,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "45dc2928d335ea449fb8faee3299897bff10fd6c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -119,7 +119,7 @@ def get_virtual_size(witness_block):\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n \n-def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n     - Submit the transaction over the p2p interface\n@@ -129,13 +129,13 @@ def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=Non\n         tx_message = msg_witness_tx(tx)\n     p2p.send_message(tx_message)\n     p2p.sync_with_ping()\n-    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    assert_equal(tx.hash in node.getrawmempool(), accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n             assert_equal(p2p.last_message[\"reject\"].reason, reason)\n \n-def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None):\n+def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):\n     \"\"\"Send a block to the node and check that it's accepted\n \n     - Submit the block over the p2p interface\n@@ -145,7 +145,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None\n     else:\n         p2p.send_message(msg_block(block))\n     p2p.sync_with_ping()\n-    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+    assert_equal(node.getbestblockhash() == block.hash, accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:"
      },
      {
        "sha": "034e83aaae643ead1fb91a84531fd41265844ec1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -482,7 +482,7 @@ def on_reject(self, message):\n         self.reject_code_received = message.code\n         self.reject_reason_received = message.reason\n \n-    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n@@ -508,16 +508,16 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n         if success:\n-            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+            wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n         else:\n-            assert rpc.getbestblockhash() != blocks[-1].hash\n+            assert node.getbestblockhash() != blocks[-1].hash\n \n         if reject_code is not None:\n             wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n@@ -541,7 +541,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n         else:\n             self.sync_with_ping()\n \n-        raw_mempool = rpc.getrawmempool()\n+        raw_mempool = node.getrawmempool()\n         if success:\n             # Check that all txs are now in the mempool\n             for tx in txs:"
      }
    ]
  },
  {
    "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGQ3OTZhNmNjOTZhYzM1MTM3NzM1NTAwMGJkYjI0OGI3MThiYzdi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-08-22T00:33:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:15Z"
      },
      "message": "test: Add tests for RPC help\n\nGithub-Pull: #14020\nRebased-From: 6af6d9b23dae4edd20c3dad49c835caabf3909b5",
      "tree": {
        "sha": "52000297812bd47216628d1e6790cced6beffb0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52000297812bd47216628d1e6790cced6beffb0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e878ded2580a18a247c3be3899e3241825835629",
        "filename": "test/functional/rpc_help.py",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC help output.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class HelpRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # wrong argument count\n+        assert_raises_rpc_error(-1, 'help', node.help, 'foo', 'bar')\n+\n+        # invalid argument\n+        assert_raises_rpc_error(-1, 'JSON value is not a string as expected', node.help, 0)\n+\n+        # help of unknown command\n+        assert_equal(node.help('foo'), 'help: unknown command: foo')\n+\n+        # command titles\n+        titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n+        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+if __name__ == '__main__':\n+    HelpRpcTest().main()"
      },
      {
        "sha": "13c687fd927518641ce17ac64db8c0aea5353d5d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -152,6 +152,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_help.py',\n     'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time"
      }
    ]
  },
  {
    "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmMxYmFkYWRhZTY4NGUyMTg2MDBmZTFlOWEwNWY3MjYxMjBhYWNi",
    "commit": {
      "author": {
        "name": "Kvaciral",
        "email": "kvaciral@protonmail.com",
        "date": "2018-08-31T20:30:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:21Z"
      },
      "message": "Test rpc_help.py failed: Check whether ZMQ is enabled or not.\n\nGithub-Pull: #14122\nRebased-From: 8dfc2f30dea6bde0f74d23691377f248966011ab",
      "tree": {
        "sha": "32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb/comments",
    "author": {
      "login": "Kvaciral",
      "id": 864811,
      "node_id": "MDQ6VXNlcjg2NDgxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/864811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kvaciral",
      "html_url": "https://github.com/Kvaciral",
      "followers_url": "https://api.github.com/users/Kvaciral/followers",
      "following_url": "https://api.github.com/users/Kvaciral/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kvaciral/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kvaciral/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kvaciral/subscriptions",
      "organizations_url": "https://api.github.com/users/Kvaciral/orgs",
      "repos_url": "https://api.github.com/users/Kvaciral/repos",
      "events_url": "https://api.github.com/users/Kvaciral/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kvaciral/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ceca40527f04a5b3af18b21eb396c126ab2ab1a3",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -25,7 +25,13 @@ def run_test(self):\n \n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n-        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+\n+        if is_zmq_enabled(self):\n+            components.append('Zmq')\n+\n+        assert_equal(titles, components)\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "0e76b525707c0fa2441fa328c8806f39dcfaeb8c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -488,8 +488,13 @@ def skip_if_no_py3_zmq():\n \n def skip_if_no_bitcoind_zmq(test_instance):\n     \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+    if not is_zmq_enabled(test_instance):\n+        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+\n+def is_zmq_enabled(test_instance):\n+    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n     config = configparser.ConfigParser()\n     config.read_file(open(test_instance.options.configfile))\n \n-    if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      }
    ]
  },
  {
    "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmZhZGVlOTkwNDE5OGNhNzA2ZDcwNmE4NTQ1ZWU5MDhlODMwZGZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T20:58:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:28Z"
      },
      "message": "qa: Premine to deterministic address with -disablewallet\n\nGithub-Pull: #14180\nRebased-From: faa669cbcd1fc799517b523b0f850e01b11bf40a",
      "tree": {
        "sha": "22fd53b4aae057c4308ad0cd5e4398046cbf79ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22fd53b4aae057c4308ad0cd5e4398046cbf79ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86fadee9904198ca706d706a8545ee908e830dfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 122,
      "deletions": 59
    },
    "files": [
      {
        "sha": "bc6cd4bdcf0e3224541c667c6b138f3f093e0603",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -168,6 +168,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "745cc9e4fcdd2acbdf8aad2d7e7df39d3a8f9a54",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -40,6 +40,13 @@ def set_test_params(self):\n     def setup_nodes(self):\n         skip_if_no_py3_zmq()\n         skip_if_no_bitcoind_zmq(self)\n+\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +66,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "e2ac76aac4f7de8ac4cf1bbfcb5e58f68fb5841a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -34,7 +34,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "fced5ac29d11c9d9f1e0db4973d0670a86ea2c56",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -70,4 +70,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "c8144bba71fe8f456aa5929200eff1b07fcf13b1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -47,9 +47,10 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +170,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "afb098395320f3f172013d71c68e7ce19601c0c4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -158,6 +158,7 @@ def main(self):\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -247,6 +248,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +429,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +453,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +467,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -97,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)"
      },
      {
        "sha": "bebaea79566e229946577cef45309a2b3f20fd2e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 52,
        "deletions": 48,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -116,9 +120,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +136,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "bb8dee0022a32165e67be28c089069bbf990d8eb",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -116,10 +116,19 @@ def setup_network(self):\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "554cd61daa2de6b14b2afa6b86fa13f31441f247",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -18,6 +18,11 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +69,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +86,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      }
    ]
  },
  {
    "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2FkYjMyZTM4M2JiYmRiNDczZWI0NzBlNGE2ODcyYjU4MmNhYzgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-09T17:32:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:36Z"
      },
      "message": "qa: Run all tests even if wallet is not compiled\n\nGithub-Pull: #14180\nRebased-From: fac95398366f644911b58f1605e6bc37fb76782d",
      "tree": {
        "sha": "4d59469a75a5e7b2fd91412c356a7c1501222a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d59469a75a5e7b2fd91412c356a7c1501222a77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa"
      }
    ],
    "stats": {
      "total": 458,
      "additions": 383,
      "deletions": 75
    },
    "files": [
      {
        "sha": "8f78a9d7bf393499774ff8ed4af4ae43029105d2",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options."
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "a1ded5200c3ab2e49194b24245565fe1034da2f4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "1296cdb497eb39143ed4fdb788d7de66b13aafd0",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters."
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "d78d75dbade14f4c014e7663e7a922319b560abd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,10 +38,12 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n \n+    def setup_nodes(self):\n         # Import keys\n         self.add_nodes(self.num_nodes)\n         self.start_nodes()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "5b53df832ae62584bce6c4c7cf99a126beaf880a",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "7d27a2a83a98b3d2fe689e1a155029f38cf473aa",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "0a7b83ed73bcad4e72b51b34cce8715d50964872",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "5cf0a75ab239cd6f731ea9bdd497c3e7081b8437",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n "
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "ef9c71dc02d105d8ec71c6c19662d55cee29a9db",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "f5ff646978a96dd01a24e52a8ebfb5f91529a459",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -48,6 +48,9 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n "
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "cd6e5511c4a596fd0efed495eb182d16dc4f66fc",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,9 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -26,12 +27,16 @@ def run_test(self):\n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n \n-        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n \n-        if is_zmq_enabled(self):\n+        if self.is_zmq_compiled():\n             components.append('Zmq')\n \n         assert_equal(titles, components)\n \n+\n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "7f2c0c1bd4d04db4aaf0d056d6588dd73eb1fdc4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "035f10e6bcdcf9d5e360a94895177ce9e32dfa26",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 49,
        "deletions": 22,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,6 +163,7 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n             self.import_deterministic_coinbase_privkeys()\n@@ -221,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -486,30 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n-\n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    if not is_zmq_enabled(test_instance):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def is_zmq_enabled(test_instance):\n-    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -236,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -246,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "9b398ef346c510a87e842e4687d79a1eed9a4fb6",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "b9fe6c66c5096fcdda378999ca95ab67ec223818",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,8 +31,13 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -87,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -109,6 +109,9 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):"
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "6f9123a0892acebdbcec0f221e36d07aecd76365",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def setup_network(self):\n         \"\"\"Don't connect nodes.\"\"\"\n         self.setup_nodes()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n         self.log.info(\"Test accounts API\")"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def import_deterministic_coinbase_privkeys(self):\n         super().import_deterministic_coinbase_privkeys()\n         self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "29899ecd366748c541be15a330f64ce68c948432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTg5OWVjZDM2Njc0OGM1NDFiZTE1YTMzMGY2NGNlNjhjOTQ4NDMy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-14T09:26:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:42Z"
      },
      "message": "Import CInv from correct module\n\nGithub-Pull: #13965\nRebased-From: a9cf5c9623ad547d9aeebea2b51c2afcfc0f3f4f",
      "tree": {
        "sha": "42fd88d2d03b145e0c7ad40ec71632be404a9829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42fd88d2d03b145e0c7ad40ec71632be404a9829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29899ecd366748c541be15a330f64ce68c948432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8d954b70f6cf7f36b19d0ce8c8c28a39f66eda63",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=29899ecd366748c541be15a330f64ce68c948432",
        "patch": "@@ -15,8 +15,8 @@\n \n # Avoid wildcard * imports if possible\n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     mininode_lock,\n     msg_block,"
      }
    ]
  },
  {
    "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjUxZmQ2ZDU5NjZhMDUyYWRkZDdlOTFmNzRlYzY2Y2Q1Nzc3YjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-09-06T13:59:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:04Z"
      },
      "message": "doc/descriptors.md tweaks\n\nAdd some implementation details, and tweak phrasing in examples section to be\nmore explicit about how script expressions are used for matching.\n\nGithub-Pull: #14161\nRebased-From: eb494125624eb3d311c6b2e45ce403c61faddd62",
      "tree": {
        "sha": "52afd9db908f3cbf1b75ac494adea6dbe144f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52afd9db908f3cbf1b75ac494adea6dbe144f205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29899ecd366748c541be15a330f64ce68c948432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d97e838d7ed5d79d0d27696c868c2806d2898c75",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,6 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n+Key order is significant. A `multi()` expression will only match multisig\n+scripts with keys in the specified order. Also, to prevent a combinatorial\n+explosion of the search space, if more than one `multi()` key arguments is a\n+BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n+matches multisig scripts with the `i`th child key from each wildcard path in\n+lockstep, rather than scripts with any combination of child keys from each\n+wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,7 +109,7 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n@@ -119,6 +127,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n-P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+provided, which takes as input a public key, and matches P2PK,\n+P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDNhMjQ0MThjY2VjZDllNzhkNjI5ODA4YTFmOGQ2YThiNDEwYzc3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-17T15:41:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:08Z"
      },
      "message": "descriptors.md: Refer to descriptors as describing instead of matching\n\nGithub-Pull: #14161\nRebased-From: eeeaa29214ab99e7f491b21d21bf362a86a48305",
      "tree": {
        "sha": "9a5fa324b7d2af4ef7360c89bd9af55243160d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a5fa324b7d2af4ef7360c89bd9af55243160d7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,13 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n-Key order is significant. A `multi()` expression will only match multisig\n-scripts with keys in the specified order. Also, to prevent a combinatorial\n-explosion of the search space, if more than one `multi()` key arguments is a\n-BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n-matches multisig scripts with the `i`th child key from each wildcard path in\n-lockstep, rather than scripts with any combination of child keys from each\n-wildcard path.\n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n \n ### BIP32 derived keys and chains\n \n@@ -127,6 +128,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and matches P2PK,\n-P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file\n+provided, which takes as input a public key, and describes a set of P2PK,\n+P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "9461f98c534ab64ae404085ffb309ec276e3c902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDYxZjk4YzUzNGFiNjRhZTQwNDA4NWZmYjMwOWVjMjc2ZTNjOTAy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-20T19:24:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:20Z"
      },
      "message": "Disable wallet and address book Qt tests on macOS minimal platform\n\nmacOS Qt minimal platform is frequently broken, and these are currently failing\nwith Qt 5.11.1.\n\nThe tests do pass when run on the full cocoa platform\n(with `test_bitcoin-qt -platform cocoa`).\n\nGithub-Pull: #14011\nRebased-From: a3197c5294df4711bab0ff6dcdd061ceab115c7d",
      "tree": {
        "sha": "4d3b654cc5d8f7d5cd0bbf99625347cfbac87816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3b654cc5d8f7d5cd0bbf99625347cfbac87816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9461f98c534ab64ae404085ffb309ec276e3c902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35258460441f428803d52f795017694baf95800f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -17,6 +17,7 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <QApplication>\n #include <QTimer>\n #include <QMessageBox>\n \n@@ -139,5 +140,16 @@ void TestAddAddressesToSendBook()\n \n void AddressBookTests::addressBookTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AddressBookTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestAddAddressesToSendBook();\n }"
      },
      {
        "sha": "9598d64845c30f0e505b257a1310961d0afb8a1c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -243,5 +243,16 @@ void TestGUI()\n \n void WalletTests::walletTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestGUI();\n }"
      }
    ]
  }
]