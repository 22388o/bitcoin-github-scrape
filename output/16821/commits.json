[
  {
    "sha": "9743432034586385cfef87df4b377c255ed0cba8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzQzNDMyMDM0NTg2Mzg1Y2ZlZjg3ZGY0YjM3N2MyNTVlZDBjYmE4",
    "commit": {
      "author": {
        "name": "John L. Jegutanis",
        "email": "erasmospunk@gmail.com",
        "date": "2019-09-06T18:54:00Z"
      },
      "committer": {
        "name": "John L. Jegutanis",
        "email": "erasmospunk@gmail.com",
        "date": "2019-10-07T22:45:36Z"
      },
      "message": "Fix bug where duplicate PSBT keys are accepted\n\nAs per the BIP 174 spec a PSBT key cannot be duplicated,\nhowever the current code accepts key duplication.\nThe PSBT key/value entries can be duplicated when the value\nis `empty()` or `IsNull()` for `CScript` or `CTxOut` respectively\nand if those key/value entries are serialized before the non-empty ones.\n\nFor example, the following PSBT, included in the test vectors,\ncontains a duplicate field:\n\n```\n// magic\n70736274ff\n\n// global tx\n//// key\n0100\n//// value\n2a02000000000140420f000000000017a9146e91b72d5593e7d4391e2ff44e91e985c31641f08700000000\n//// separator\n00\n\n// no inputs\n\n// outputs\n//// key PSBT_OUT_WITNESSSCRIPT\n0101\n//// value (empty script)\n00\n//// key PSBT_OUT_WITNESSSCRIPT (same as the above)\n0101\n//// value (an OP_RETURN script)\n016a\n//// separator\n00\n```",
      "tree": {
        "sha": "27482fb0a24712803f5243868bcac20b1ab84d30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27482fb0a24712803f5243868bcac20b1ab84d30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9743432034586385cfef87df4b377c255ed0cba8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9743432034586385cfef87df4b377c255ed0cba8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9743432034586385cfef87df4b377c255ed0cba8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9743432034586385cfef87df4b377c255ed0cba8/comments",
    "author": {
      "login": "erasmospunk",
      "id": 944152,
      "node_id": "MDQ6VXNlcjk0NDE1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/944152?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erasmospunk",
      "html_url": "https://github.com/erasmospunk",
      "followers_url": "https://api.github.com/users/erasmospunk/followers",
      "following_url": "https://api.github.com/users/erasmospunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/erasmospunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erasmospunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erasmospunk/subscriptions",
      "organizations_url": "https://api.github.com/users/erasmospunk/orgs",
      "repos_url": "https://api.github.com/users/erasmospunk/repos",
      "events_url": "https://api.github.com/users/erasmospunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erasmospunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "erasmospunk",
      "id": 944152,
      "node_id": "MDQ6VXNlcjk0NDE1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/944152?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erasmospunk",
      "html_url": "https://github.com/erasmospunk",
      "followers_url": "https://api.github.com/users/erasmospunk/followers",
      "following_url": "https://api.github.com/users/erasmospunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/erasmospunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erasmospunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erasmospunk/subscriptions",
      "organizations_url": "https://api.github.com/users/erasmospunk/orgs",
      "repos_url": "https://api.github.com/users/erasmospunk/repos",
      "events_url": "https://api.github.com/users/erasmospunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erasmospunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "febc31c641b6930f6dc9a97d9492c868ae032bc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/febc31c641b6930f6dc9a97d9492c868ae032bc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/febc31c641b6930f6dc9a97d9492c868ae032bc3"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 28,
      "deletions": 11
    },
    "files": [
      {
        "sha": "802a7c5ba752b3a037cd2c31d760195e82c084f5",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9743432034586385cfef87df4b377c255ed0cba8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9743432034586385cfef87df4b377c255ed0cba8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=9743432034586385cfef87df4b377c255ed0cba8",
        "patch": "@@ -126,6 +126,9 @@ struct PSBTInput\n \n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n+        // Used for duplicate key detection\n+        std::set<std::vector<unsigned char>> key_lookup;\n+\n         // Read loop\n         bool found_sep = false;\n         while(!s.empty()) {\n@@ -147,7 +150,7 @@ struct PSBTInput\n             switch(type) {\n                 case PSBT_IN_NON_WITNESS_UTXO:\n                 {\n-                    if (non_witness_utxo) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n@@ -158,7 +161,7 @@ struct PSBTInput\n                     break;\n                 }\n                 case PSBT_IN_WITNESS_UTXO:\n-                    if (!witness_utxo.IsNull()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Witness utxo key is more than one byte type\");\n@@ -189,7 +192,7 @@ struct PSBTInput\n                     break;\n                 }\n                 case PSBT_IN_SIGHASH:\n-                    if (sighash_type > 0) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input sighash type already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Sighash type key is more than one byte type\");\n@@ -198,7 +201,7 @@ struct PSBTInput\n                     break;\n                 case PSBT_IN_REDEEMSCRIPT:\n                 {\n-                    if (!redeem_script.empty()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input redeemScript already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Input redeemScript key is more than one byte type\");\n@@ -208,7 +211,7 @@ struct PSBTInput\n                 }\n                 case PSBT_IN_WITNESSSCRIPT:\n                 {\n-                    if (!witness_script.empty()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witnessScript already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Input witnessScript key is more than one byte type\");\n@@ -223,7 +226,7 @@ struct PSBTInput\n                 }\n                 case PSBT_IN_SCRIPTSIG:\n                 {\n-                    if (!final_script_sig.empty()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input final scriptSig already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Final scriptSig key is more than one byte type\");\n@@ -233,7 +236,7 @@ struct PSBTInput\n                 }\n                 case PSBT_IN_SCRIPTWITNESS:\n                 {\n-                    if (!final_script_witness.IsNull()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, input final scriptWitness already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Final scriptWitness key is more than one byte type\");\n@@ -309,6 +312,9 @@ struct PSBTOutput\n \n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n+        // Used for duplicate key detection\n+        std::set<std::vector<unsigned char>> key_lookup;\n+\n         // Read loop\n         bool found_sep = false;\n         while(!s.empty()) {\n@@ -330,7 +336,7 @@ struct PSBTOutput\n             switch(type) {\n                 case PSBT_OUT_REDEEMSCRIPT:\n                 {\n-                    if (!redeem_script.empty()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, output redeemScript already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Output redeemScript key is more than one byte type\");\n@@ -340,7 +346,7 @@ struct PSBTOutput\n                 }\n                 case PSBT_OUT_WITNESSSCRIPT:\n                 {\n-                    if (!witness_script.empty()) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, output witnessScript already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Output witnessScript key is more than one byte type\");\n@@ -448,6 +454,9 @@ struct PartiallySignedTransaction\n             throw std::ios_base::failure(\"Invalid PSBT magic bytes\");\n         }\n \n+        // Used for duplicate key detection\n+        std::set<std::vector<unsigned char>> key_lookup;\n+\n         // Read global data\n         bool found_sep = false;\n         while(!s.empty()) {\n@@ -469,7 +478,7 @@ struct PartiallySignedTransaction\n             switch(type) {\n                 case PSBT_GLOBAL_UNSIGNED_TX:\n                 {\n-                    if (tx) {\n+                    if (!key_lookup.emplace(key).second) {\n                         throw std::ios_base::failure(\"Duplicate Key, unsigned tx already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");"
      },
      {
        "sha": "0f6cd97fd8820f009413e1084ea48f3eaee3e356",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9743432034586385cfef87df4b377c255ed0cba8/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9743432034586385cfef87df4b377c255ed0cba8/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=9743432034586385cfef87df4b377c255ed0cba8",
        "patch": "@@ -18,7 +18,15 @@\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wCAwABAAAAAAEAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAgAAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n-        \"cHNidP8BAHMCAAAAAbiWoY6pOQepFsEGhUPXaulX9rvye2NH+NrdlAHg+WgpAQAAAAD/////AkBLTAAAAAAAF6kUqWwXCcLM5BN2zoNqMNT5qMlIi7+HQEtMAAAAAAAXqRSVF/in2XNxAlN1OSxkyp0z+Wtg2YcAAAAAAAEBIBNssgAAAAAAF6kUamsvautR8hRlMRY6OKNTx03DK96HAQcXFgAUo8u1LWpHprjt/uENAwBpGZD0UH0BCGsCRzBEAiAONfH3DYiw67ZbylrsxCF/XXpVwyWBRgofyRbPslzvwgIgIKCsWw5sHSIPh1icNvcVLZLHWj6NA7Dk+4Os2pOnMbQBIQPGStfYHPtyhpV7zIWtn0Q4GXv5gK1zy/tnJ+cBXu4iiwABABYAFMwmJQEz+HDpBEEabxJ5PogPsqZRAAEAFgAUyCrGc3h3FYCmiIspbv2pSTKZ5jU\"\n+        \"cHNidP8BAHMCAAAAAbiWoY6pOQepFsEGhUPXaulX9rvye2NH+NrdlAHg+WgpAQAAAAD/////AkBLTAAAAAAAF6kUqWwXCcLM5BN2zoNqMNT5qMlIi7+HQEtMAAAAAAAXqRSVF/in2XNxAlN1OSxkyp0z+Wtg2YcAAAAAAAEBIBNssgAAAAAAF6kUamsvautR8hRlMRY6OKNTx03DK96HAQcXFgAUo8u1LWpHprjt/uENAwBpGZD0UH0BCGsCRzBEAiAONfH3DYiw67ZbylrsxCF/XXpVwyWBRgofyRbPslzvwgIgIKCsWw5sHSIPh1icNvcVLZLHWj6NA7Dk+4Os2pOnMbQBIQPGStfYHPtyhpV7zIWtn0Q4GXv5gK1zy/tnJ+cBXu4iiwABABYAFMwmJQEz+HDpBEEabxJ5PogPsqZRAAEAFgAUyCrGc3h3FYCmiIspbv2pSTKZ5jU\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAQEAAQEBagA=\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAQAAAQABagA=\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJ//////////8AAQEJAADK/gAAAAAAAA==\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQMErd7f7gEDBAEAAAAA\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQQAAQQBagA=\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJAOH1BQAAAAAAAQUAAQUBUQA=\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQcAAQcBUQA=\",\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJAOH1BQAAAAAAAQgBAAEIAwEBUQA=\"\n     ],\n     \"valid\" : [\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAAAA\","
      }
    ]
  }
]