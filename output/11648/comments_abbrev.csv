fanquake,2017-11-10T01:23:46Z,"One travis failure in net.py:\n```\n2017-11-10 01:10:17.553000 TestFramework.node0 (DEBUG): RPC successfully started\n2017-11-10 01:10:17.555000 TestFramework.node1 (DEBUG): RPC successfully started\n2017-11-10 01:10:18.043000 TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/fun",https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343346186,343346186,
meshcollider,2017-11-10T06:50:22Z,"@fanquake looks unrelated, restarted",https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343389297,343389297,
laanwj,2017-11-10T10:11:11Z,"Thanks for trying to clean things up, but I think we need more categorization here; bitcoin P2P message types are clearly a different kind of primitives than consensus data structures such as CTransaction CTXin etc. Only the second group is called ""primitives"" in the C++ code.",https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343432573,343432573,
ryanofsky,2017-11-10T11:35:37Z,Maybe just call it something like serialize.py or messages.py.,https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343450947,343450947,
jnewbery,2017-11-10T17:00:46Z,"> I think we need more categorization here; bitcoin P2P message types are clearly a different kind of primitives than consensus data structures\n\nI tried splitting this further into `primitives.py` (for the primitive consensus data structures) and `messages.py` (for the p2p message data structures), but the resulting layout didn't make much sense to me so I reverted it. The main motivation for ",https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343528750,343528750,
laanwj,2017-11-11T07:37:59Z,"@jnewbery Thanks. Calling it messages.py is enough. I don't think they need to be split further unless they're used seperately, which they're not. It was just that having two concepts of ""primitives"" between the tests and code was confusing to me.",https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-343647180,343647180,
practicalswift,2017-11-14T21:26:21Z,utACK 1135c796a0e1151b03933f2cd36ce95a8e136b7a,https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-344404127,344404127,
laanwj,2017-11-17T12:17:00Z,utACK 1135c79,https://github.com/bitcoin/bitcoin/pull/11648#issuecomment-345229100,345229100,
MarcoFalke,2017-11-16T18:39:05Z,nit: This is a conversion helper constant not used by any of the primitives or messages.,https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151501315,151501315,test/functional/test_framework/messages.py
laanwj,2017-11-17T12:13:23Z,"It's used in:\n\n- `CTxOut.__repr__`\n- `CTransaction.is_valid`\n\nIt's arguable where this belongs, the ideal place might be some bitcoin-specific constants header, but for now it makes sense to have it here.",https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151671039,151671039,test/functional/test_framework/messages.py
MarcoFalke,2017-11-17T14:50:39Z,"You are right, I missed those. Looks fine now.",https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151702461,151702461,test/functional/test_framework/messages.py
promag,2017-11-17T15:13:56Z,Unnecessary?,https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151708311,151708311,test/functional/test_framework/messages.py
MarcoFalke,2017-11-17T15:20:40Z,"Generally, it is easier to verify move-only-ness when no code changes are made. We've had pull requests in the past that did ""all the refactoring"" in one go and introduced bugs.",https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151709875,151709875,test/functional/test_framework/messages.py
laanwj,2017-11-17T15:40:45Z,"IMO both ways are acceptable, as long as the commits that move code are separate from those that make changes.\n\nIn any case, moving code around doesn't obligate someone to also fix all the problems it has, in style or other things. Can be done later.",https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151715131,151715131,test/functional/test_framework/messages.py
MarcoFalke,2017-11-17T15:57:19Z,"Yes, happy to see this fixed up when you touch that function for other reasons. Not sure if this change warrants a pull request on itself.",https://github.com/bitcoin/bitcoin/pull/11648#discussion_r151719585,151719585,test/functional/test_framework/messages.py
