elichai,2020-01-28 20:52:22,"(the Travis failure isn't related, it's a bug in the s390x machines) ",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579450187,579450187,
MarcoFalke,2020-01-29 00:41:11,"@elichai The issue is upstream, see #18016",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579541030,579541030,
DrahtBot,2020-01-29 00:54:27,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579543940,579543940,
laanwj,2020-01-29 17:19:21,That's a very nice speed improvement!,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579865025,579865025,
sipa,2020-01-29 18:00:23,Where do we use variable-length SipHash?,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579882773,579882773,
emilengler,2020-01-29 18:08:25,"I just tested it and the speed improvement is good. Also the formatting is much prettier now.\nWill review the code now",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579886676,579886676,
elichai,2020-01-29 20:44:07,"> Where do we use variable-length SipHash?\n\nA quick search shows:\n1. `GCSFilter::HashToRange` BIP158 Compact block filters (blockfilters.h)\n2. `RelayAddress` I think as a PRNG (net_processing.h).\n3. `ByteVectorHash` used as the hash for the `std::unordered_set<Element, ByteVectorHash> ElementSet;` in `blockfilter.h`.\n4. `CConnman::GetDeterministicRandomizer`  again some randomizer thin",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-579950604,579950604,
Empact,2020-01-30 03:02:04,"nit: You have a few whitespace irregularities - running `git-clang-format` generates this diff\n\n```diff\ndiff --git a/src/bench/crypto_hash.cpp b/src/bench/crypto_hash.cpp\nindex 9eeb8da16..037260939 100644\n--- a/src/bench/crypto_hash.cpp\n+++ b/src/bench/crypto_hash.cpp\n@@ -90,7 +90,7 @@ static void SipHash(benchmark::State& state)\n {\n     uint64_t hash = 0;\n     uint64_t k2 = 0;",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-580062424,580062424,
elichai,2020-02-23 14:21:44,I decided to drop commit 2b32471b5b113c0a34e06896842a450dc7168454 because it's more controversial than I thought (there might be software that relies on the current formatting and there's #18011 coming up),https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-590073793,590073793,
jonatack,2020-02-23 14:27:23,"> I decided to drop commit [2b32471](https://github.com/bitcoin/bitcoin/commit/2b32471b5b113c0a34e06896842a450dc7168454) because it's more controversial than I thought (there might be software that relies on the current formatting and there's #18011 coming up)\n\nRight, will be easier to review as more focused; it was 2 PRs in one before.",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-590074342,590074342,
jonatack,2020-07-06 13:51:46,Sorry for the delay @elichai -- I still plan to review this.,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-654252076,654252076,
elichai,2020-08-02 12:52:21,"Updated benchmarks with the new benchmarking library:\n\nBefore:\n```\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\n|        2,982,785.0",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-667670444,667670444,
jonatack,2021-01-15 09:26:42,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-760778215,760778215,
elichai,2021-03-19 14:26:36,"With the benchmarks adjusted to bytes\nBefore:\n```\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\n|                1.79 |      559,246,58",https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-802872179,802872179,
sipa,2021-03-20 02:48:57,utACK 19e28a41168d02dc85356714c889b43d96d834d6,https://github.com/bitcoin/bitcoin/pull/18014#issuecomment-803231838,803231838,
emilengler,2020-01-29 18:14:45,I played a bit around with it and I find it better to change this to `16`. This will be much more friendly on smaller terminals and/or display,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372547871,372547871,src/bench/bench.cpp
emilengler,2020-01-29 18:15:18,Set this to `17` then. Maybe a const for this would be a good idea,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372548176,372548176,src/bench/bench.cpp
emilengler,2020-01-29 18:15:37,The const idea also applies to all occurrences of 12,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372548306,372548306,src/bench/bench.cpp
emilengler,2020-01-29 18:19:07,nit: I'm not that much into crypto but `SipHash` and SipHash_32b look very similar. Maybe you could include them into one function or make one general function which is called by the both. The only difference between them is the vector constructor,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372550028,372550028,src/bench/crypto_hash.cpp
emilengler,2020-01-29 18:22:48,nit: Useless space,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372552019,372552019,src/bench/bench.cpp
elichai,2020-01-29 20:46:36,That's from https://github.com/bitcoin/bitcoin/pull/18013,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372620923,372620923,src/bench/bench.cpp
elichai,2020-01-29 20:47:21,`SipHash_32b` is calling a different SipHash implementation that is somewhat optimized to 32 bytes (256bit),https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372621251,372621251,src/bench/crypto_hash.cpp
elichai,2020-01-29 20:47:58,"Well that doesn't work with tests like `CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT`.\nsee the last paragraph in my post",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372621475,372621475,src/bench/bench.cpp
Empact,2020-01-30 03:03:35,"nit: as new code, should have brackets unless one line\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372739692,372739692,src/bench/crypto_hash.cpp
emilengler,2020-01-30 14:35:44,Couldn't this be dynamically calculated then?,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372984095,372984095,src/bench/bench.cpp
elichai,2020-01-30 14:36:46,">  this is limited by up to 47 chars of benchmark name, so as long as we don't add more names like CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT and longer then it will be fine.\n(it can probably be adjustable but that will require iterating over all the tests before running them to determine the longest cell and I thought the 47 limit is more than reasonable)",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r372984710,372984710,src/bench/bench.cpp
elichai,2020-01-30 16:46:24,Done,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r373065260,373065260,src/bench/crypto_hash.cpp
elichai,2020-01-30 16:46:37,Rebased it out,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r373065402,373065402,src/bench/bench.cpp
jonatack,2020-02-21 16:50:42,perhaps sort these entries L::16-18,https://github.com/bitcoin/bitcoin/pull/18014#discussion_r382691148,382691148,src/crypto/siphash.h
sipa,2020-08-02 16:22:34,"On LE systems I can imagine that this is even faster:\n\n```c++\nuint64_t val = 0;\nmemcpy((unsigned char*)&val, data, len);\nreturn val;\n```\n\nOn BE it needs `return (val >> 8 * (8 - len))` instead.\n\nFeel like benchmarking that?",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r464096460,464096460,src/crypto/siphash.cpp
elichai,2020-08-02 16:40:37,"Thanks I'll benchmark this, \nbut I'm not too optimistic about this being faster, because a the length isn't statically known so it must actually call memcpy and can't inline and optimize.\n\nI also want to add fuzz harnesses against reference implementations for the hash functions, which should increase confidence in refactoring the delicate areas(tough not sure how much reviewers will like th",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r464098150,464098150,src/crypto/siphash.cpp
elichai,2020-08-02 16:49:17,"Benchmarked now, they are too close to actually know which is faster\n\ndiff:\n```C++\ndiff --git a/src/crypto/siphash.cpp b/src/crypto/siphash.cpp\nindex cfc04c194e..616bab40f1 100644\n--- a/src/crypto/siphash.cpp\n+++ b/src/crypto/siphash.cpp\n@@ -54,9 +54,7 @@ inline uint64_t ReadU64ByLenLE(const unsigned char* data, size_t len)\n {\n     assert(len < 8);\n     uint64_t out = 0;\n- ",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r464098930,464098930,src/crypto/siphash.cpp
sipa,2020-08-02 16:53:19,"Cool, thanks for testing. No reason to prefer my suggestion in that case.",https://github.com/bitcoin/bitcoin/pull/18014#discussion_r464099307,464099307,src/crypto/siphash.cpp
