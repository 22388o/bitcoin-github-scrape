laanwj,2020-11-25 09:29:48,"Concept ACK, nice work!",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322,733583322,
DrahtBot,2020-11-25 15:48:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22956](https://github.com/bitcoin/bitcoin/pull/22956) (validation: log CChainState::CheckBlockIndex() consistency checks",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733788354,733788354,
jb55,2020-11-25 18:58:15,"Very cool, Concept ACK",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713,733893713,
emilengler,2020-11-26 20:01:17,"Concept ACK, however I have some things to improve:\n\n1. Why must it be a compile time feature? Can't we just add a cmdline option called `-enable-seccomp`. See Chromiums `--enable-unveil`.\n2. Don't be that seccomp specific in terms of autotools configuration and naming. Keep in mind that there is also `pledge(2)` on OpenBSD which could be a nice addition as well.",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-734461063,734461063,
laanwj,2020-12-17 12:10:42,"> I'd suggest adding an old one but IIRC there hasn't ever been an RCE like vulnerability that could be reintroduced.\n\nMaybe the UPnP vulnerability (TALOS-2015-0035, CVE-2015-6031)? I should still have a PoC exploit somewhere. I think downgrading UPnP should be enough to reintroduce it.\n\nI don't currently have the time to play around with this but if someone is interested I can dig it up.",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-747401906,747401906,
laanwj,2021-01-14 09:35:08,"> I don't currently have the time to play around with this but if someone is interested I can dig it up.\n\nAs people have asked, here you go: https://dev.visucore.com/bitcoin/2015_10_upnpc_poc.tar.xz\n\nIt's my entire working environment and contains my exploit (`poc*.py`), some notes, someone else's exploit (`upnp_exploit1.py`), and some exploitable binaries.\n\nIf you have any questions f",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-760076956,760076956,
practicalswift,2021-03-23 19:45:18,After a few months in draft mode this PR is now ready for code review: no longer marked as draft! :),https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-805185134,805185134,
jonatack,2021-03-28 14:28:51,"Concept ACK, thanks for working on this!",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-808904532,808904532,
practicalswift,2021-05-20 19:27:29,@laanwj Thanks for reviewing. I believe all feedback has be addressed (sorry it took a while). Let me know if there is anything more I can do :),https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845414778,845414778,
0xB10C,2021-05-21 11:40:29,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-845890875,845890875,
ariard,2021-05-27 03:31:18,"Concept ACK, great work!",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-849291645,849291645,
emilengler,2021-06-08 08:27:40,"I recently thought about this again and found the [following information](https://learnbchs.org/pledge.html) interesting, not sure if it was already pointed out:\n> A further issue with Linux sandboxes in particular (seccomp(2) and friends) is due to the instability of the Linux ecosystem itself. Generic libc functions are implemented differently depending on whether you're using Alpine (musl) or",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856569408,856569408,
emilengler,2021-06-08 13:20:06,"> Maybe it's better focusing on BSDs sandboxing mechanisms (pledge(2) and capsicum(2)) instead as they are more somewhat stable compared to Linux.\n\nTurns out this won't work either due to third party libs including the C++ standard library still have that issue pointed out above. Maybe focus on FS restriction instead rather than syscall restriction",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-856760930,856760930,
practicalswift,2021-06-09 13:45:16,"@emilengler \n\nThe syscall sandbox works on an allowlist basis. Thus if the kernel provides two different syscalls to achieve a certain action, and both those syscalls are used by the different standard library implementations then both syscalls should be put in the allowlist (if we want to allow said action).\n\nThat is inherent in all types of syscall sandboxing designs, no matter if Linux ",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-857707559,857707559,
practicalswift,2021-07-13 09:12:43,"Thanks a lot for reviewing @ryanofsky: excellent feedback (as always). The suggested changes simplified the implementation significantly.\n\nI believe all comments have been addressed, and I think this PR should be ready for final review and testing :)",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-878918411,878918411,
practicalswift,2021-08-05 20:38:40,"I believe all feedback has been addressed: let me know if there is anything more I can do here :)\n\nConcept ACK status:\n* laanwj: [""Concept ACK, nice work!""](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733583322)\n* jb55: [""Very cool, Concept ACK""](https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-733893713)\n* gmaxwell: [""Freeking awesome!""](https://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-893779975,893779975,
GeneFerneau,2021-08-25 21:06:01,"Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\n\nOther than a few minor suggestions, everything looks great! Like @ryanofsky, I'm relatively new to seccomp, but from what I've read, looks good to me. Will keep reading up on seccomp, and do a more in-depth review.\n\nNot necessarily needed in this PR: what are your thought",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-905874131,905874131,
practicalswift,2021-09-05 15:31:46,"> Approach ACK [4646392](https://github.com/bitcoin/bitcoin/pull/20487/commits/4646392e628ffd958d18d32cfdc44e53290de017)\n\nThanks for reviewing!\n\n> Not necessarily needed in this PR: what are your thoughts on `#ifdef`ing x86_64 specific seccomp features/syscalls for easier support of other platforms like ARM and MIPS?\n\nThe entire feature is currently `#ifdef`:ed on x86_64. That can be m",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-913176181,913176181,
laanwj,2021-09-20 19:02:07,"Code review and lightly tested ACK. Sorry for only getting around to this now.\nIt looks good to me. Found no serious issues but left some nits.",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-923196019,923196019,
laanwj,2021-10-04 19:14:22,Code review and lightly tested ACK 4747da3a5b639b5a336b737e7e3cbf060cf2efcf,https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-933777772,933777772,
ryanofsky,2021-10-05 18:14:27,"Just curious, but merging this seems to have caused a few build problems that required followups: #23178 #23179 #23196, and I guess some test problems in local developer checkouts.\n\nI'm wondering if there are any CI improvements that might have caught these problems. Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems? Are too man",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934649621,934649621,
laanwj,2021-10-05 18:48:56,"> could adding CI builds with newer kernels catch these problems\n\nFor the record, it's not the running kernel version that makes a difference here. But the kernel headers. What would have helped find the problem is compiling with older kernel headers. We also should have done a GUIX build.\n\nIt's the first time these matter at all for our compilation. Besides `syscall(SYS_getrandomâ€¦` for ra",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934676958,934676958,
ryanofsky,2021-10-05 19:20:37,I just don't understand the basics here. What CI build could you theoretically add to catch these problems? Would it be a CI build with a really old kernel and really old headers? A really new kernel and new headers? An old kernel with new headers? And new kernel with old headers?,https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-934703453,934703453,
MarcoFalke,2021-10-06 09:10:20,"> Are too many of the CI builds using old kernels, and could adding CI builds with newer kernels catch these problems?\n\nGenerally developers tend to run the latest software, so this is usually not something that will catch a lot of fish as a CI task. In fact, CI tasks with bleeding edge software might tend to break more often. (I do run them, but not part of this project).\n\n> Is there some",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935805691,935805691,
MarcoFalke,2021-10-06 10:06:47,"And when it comes to preventing build errors via the CI, I think this is not something we should try to achieve at all costs. Due to compiler bugs (or just software bugs in general), there will always be at least one software configuration and build flag configuration that will fail to build. I think it is reasonable to have tests for common software configurations on the latest LTS releases of op",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-935894871,935894871,
ryanofsky,2021-10-06 12:29:25,"Thanks for the replies. So is the answer to my question of what CI build would catch all these problems (#23178 #23179 #23196) that any CI build using newer kernel headers would catch all these problems? That all CI builds are using older headers and practicalswift was also using older headers, and this slipped past review?\n\nMy motivation for asking is just to understand when I am reviewing a ",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936143228,936143228,
MarcoFalke,2021-10-06 12:41:01,"> I can request GUIX builds?\n\nSure, just add the label.\n\n> It is also useful to know more generally if CI builds tend to use older or different dependencies than actual the GUIX release.\n\nCI is a mix of cross-compile depends builds that try to mimic guix (older LTS releases with older gcc-8) and recent `clang` with native sanitizer builds from system packages (except for msan, which is",https://github.com/bitcoin/bitcoin/pull/20487#issuecomment-936161133,936161133,
emilengler,2020-11-27 06:05:34,Why not make syscomp opt-out? I think secure by default is a better idea :-),https://github.com/bitcoin/bitcoin/pull/20487#discussion_r531398564,531398564,configure.ac
emilengler,2020-11-30 06:59:25,"IIRC there was a discussion about something similar here #17419\nHowever it is a bit weird and in transparent IMO to have things enabled in a dev build and others in a release build (beside some warnings of course).",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r532381288,532381288,configure.ac
practicalswift,2020-12-20 21:19:40,"Note to self:\n\nWe should probably use `SECCOMP_RET_KILL_PROCESS` action (kill the entire process) instead of `SECCOMP_RET_KILL_THREAD/SECCOMP_RET_KILL` (kill the task) on syscall violation.\n\nThe `SECCOMP_RET_KILL_PROCESS` action was introduced in Linux 4.14. Could read `/proc/sys/kernel/seccomp/actions_avail` to see available actions.\n\nPerhaps this feature should be possible to enable ",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r546437834,546437834,src/compat/seccomp-bpf.h
practicalswift,2021-02-10 20:38:39,"Another self-review:\n\nInstead of opt-ing out of debug mode via an environment variable we should make it the other way around: the debug mode should be opt-in via `--enable-debug`.\n\nIn other words: `SECCOMP_RET_KILL_PROCESS` should be the default action, and `SECCOMP_RET_TRAP` should only be used if compiled with `--enable-debug`.\n\nBackground:\n\nWhen using `SECCOMP_RET_KILL_PROCESS`",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r574059971,574059971,src/util/syscall_sandbox.cpp
laanwj,2021-03-16 14:44:28,"Not sure on this. I do think feedback to the user is very important. I am slightly worried when if our syscall profile isn't 100% up to date (my experience is that this can *easily* happen especially with dynamically linked glibc), something starts killing the process without any means to diagnose or debug, that's extremely frustrating.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595237523,595237523,src/util/syscall_sandbox.cpp
laanwj,2021-03-16 14:55:59,"I don't think enabling it by default should be considered in the PR first introducing this. It is absolutely something that needs experimentation and testing and fine-tuning, in different environments.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595250356,595250356,configure.ac
practicalswift,2021-03-16 15:13:14,Now using `SECCOMP_RET_KILL_PROCESS`.,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595266898,595266898,src/compat/seccomp-bpf.h
laanwj,2021-03-16 15:45:44,"This makes sense I guess, I suppose we can think of a way to make external signing work within a sandbox, but the obvious and most secure is to disable the creation of external processes.\n\nAs for notifications: just use ZMQ, or RPC based polling. No need to support process based notifications in sandbox mode imo, if you're taking security seriously you wouldn't expose that kind of escape hatch",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595297986,595297986,configure.ac
practicalswift,2021-03-16 19:11:12,"Yes, I guess this is the classical trade-off between security vs debuggability/ease-of-use :)\n\nMaking `SECCOMP_RET_KILL_PROCESS` the default is slightly better from a security perspective (no risk that the attacker is getting a ""second chance"" via the signal handler) whereas making `SECCOMP_RET_TRAP` the default is slightly better from a debuggability/ease-of-use perspective.\n\nI'll let oth",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r595468885,595468885,src/util/syscall_sandbox.cpp
practicalswift,2021-05-15 11:44:11,"@laanwj Now updated to default to debug mode as you suggested :)\n\nUpdated OP to describe the two modes of operation:\n* Debug mode (enabled via `configure` flag `--with-syscall-sandbox`): If a non-allowlisted syscall is called a debug handler will be invoked. Debug info will be printed (`ERROR: The syscall ""execve"" (syscall number 59) is not allowed by the syscall sandbox in thread ""msghand"".",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r632935180,632935180,src/util/syscall_sandbox.cpp
ryanofsky,2021-06-01 17:28:56,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\n\nIt seems like `-sandbox=<mode>` should be a runtime option, not a build option. This way we can build and one distribute one binary with experimental sandbox support that can be disabled or enabled in different modes, instead of having to build multiple binaries with hardcoded sandbox modes.\n\nThere",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643342730,643342730,configure.ac
ryanofsky,2021-06-01 17:51:16,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\n\nNot important, but instead of hardcoding the syscall order for one platform in a packed vector, it could be less fragile to populate a `std::map<int, std::string>` of the syscalls using `SYS` or `__NR` macros, see https://stackoverflow.com/questions/23249373/how-to-obtain-linux-syscall-name-from-the-sy",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643361032,643361032,src/util/syscall_sandbox.cpp
ryanofsky,2021-06-01 17:55:52,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\n\nI don't understand why these DisableFurtherSyscallSandboxRestrictions calls are added to so many binaries. It seems like they could significantly lessen the effects of sandboxing. It might make sense if there were TODO comments saying what needs to be done to remove these, or just general comments expl",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643364191,643364191,src/bitcoin-cli.cpp
ryanofsky,2021-06-01 18:06:15,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\n\nUse of std::atomic here does not seem to make sense. If multiple threads can call InstallSyscallSandboxDebugHandler for the first time simultaneously, then a `Mutex` and `LOCK` need to be used to prevent the later threads from returning before the first thread finishes calling `sigaction` and `sigprocm",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643370871,643370871,src/util/syscall_sandbox.cpp
ryanofsky,2021-06-01 18:10:11,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (3636a5c1f03fd01da2a78cad0cba7ab69cadf074)\n\nThroughout this file is there a reason error handling code can't use normal InitError or LogPrintf functions or raise exceptions, to send errors to debug.log and the GUI instead of bypassing them and going to stderr?",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r643373661,643373661,src/util/syscall_sandbox.cpp
practicalswift,2021-06-04 16:15:20,"Good point! Now addressed.\n\n> It should also cut back the record breaking 4301 character line length.\n\n:D",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645694853,645694853,src/util/syscall_sandbox.cpp
practicalswift,2021-06-04 16:52:18,"The `DisableFurtherSyscallSandboxRestrictions` is (or rather: was) used to make any further/future `EnableSyscallSandbox` calls that be into no-ops.\n\nIn other words to ""lock"" the sandbox to the sandbox policy currently loaded. (Or disable the sandbox if no sandbox is loaded: in other words a call to `DisableFurtherSyscallSandboxRestrictions` without any preceding `EnableSyscallSandbox`.)\n\n",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645717458,645717458,src/bitcoin-cli.cpp
practicalswift,2021-06-04 21:22:00,Addressed: in the updated code there is no need for locking at all since the setup is done in `SetupSyscallSandbox` which is guaranteed to only be called once. And you're absolutely right that `std::atomic<bool>` did not make much sense here :),https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645860988,645860988,src/util/syscall_sandbox.cpp
practicalswift,2021-06-04 21:26:59,Good point. The initialization/setup logic has now been moved to `init.cpp` and it is now using the expected `InitError` and `LogPrintf`. `SetSyscallSandboxPolicy` is now throwing `std::runtime_error` in case of errors.,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645864786,645864786,src/util/syscall_sandbox.cpp
practicalswift,2021-06-04 22:25:09,"Great feedback. Thanks!\n\nI've now added a `-sandbox=<mode>` parameter. `--with-syscall-sandbox` has been renamed `--with-sandbox`.\n\nAvailable `-sandbox` modes are:\n* `-sandbox=disallow-and-log` (disallow unexpected syscalls and log the violation, then continue execution)\n* `-sandbox=log-and-kill` (log the violation and kill the process)\n* `-sandbox=kill` (kill the process immediately",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r645886534,645886534,configure.ac
ryanofsky,2021-07-02 16:11:33,"For a little more legibility here would suggest:\n\n- Replacing current uses of `use_syscall_sandbox` with `seccomp_found` in `--with-seccomp` code\n- Before the `AM_CONDITIONAL`, adding\n```autoconf\ndnl Currently only enable -sandbox=<mode> feature if seccomp is found.\ndnl In the future, sandboxing could be also be supported with other\ndnl sandboxing mechanisms besides seccomp\nuse_sys",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663119115,663119115,configure.ac
ryanofsky,2021-07-02 16:26:30,"Do the syscalls actually fail in the ""disallow-and-log"" mode? Would be good to describe it in the help a little more, or change it to a more suggestive name like ""log-and-fail"" if it does fail, or something like ""log"" or ""log-warning"" if it doesn't fail.\n\nAlso should s/invokation/invocation/",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r663127043,663127043,src/init.cpp
practicalswift,2021-07-08 07:26:05,Good idea! Fixed! :),https://github.com/bitcoin/bitcoin/pull/20487#discussion_r665937892,665937892,configure.ac
practicalswift,2021-07-08 21:35:46,"Great feedback!\n\nI've decided to remove the `disallow-and-log` mode: I think the modes `log-and-kill` and `kill` should be more than enough (to start with at least).\n\n`disallow-and-log` was meant to disallow the invoked unexpected syscall (by not executing it), log the attempted syscall invocation and then continue execution. Note however that continued normal execution cannot be _guarante",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r666533779,666533779,src/init.cpp
ryanofsky,2021-07-21 20:52:17,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nBoth sandboxing and multiprocess features are runtime options that can be chosen when starting bitcoin, so ideally this would not be treated as build time conflict.\n\nIdeally could drop this `--without-seccomp` flag and only disable sandboxing at runtime if is needed, but I guess this would test cha",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674337310,674337310,ci/test/00_setup_env_native_multiprocess.sh
ryanofsky,2021-07-21 20:58:23,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nDo you think this will be necessary permanently? It seems like more ideally sandbox would be able to adjust itself to work with sanitizers, or give a descriptive runtime error if using -sandbox with some sanitizer mode is incompatible.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674341092,674341092,configure.ac
ryanofsky,2021-07-21 21:21:29,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nShould change this to `if (!args.GetArg(feature_using_execve, """")).empty())`, because IsArgSet won't do the right thing for negated arguments.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542,674354542,src/init.cpp
ryanofsky,2021-07-26 20:21:40,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nShould probably add `&& !args.IsArgNegated(""-sandbox"")`",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974,676915974,src/init.cpp
ryanofsky,2021-07-26 20:27:57,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nUSE_SYSCALL_SANDBOX macro seems to be used inconsistently in this file, some functions are undefined, some are undefined but don't do anything. Clean thing to do would seem to remove all uses of USE_SYSCALL_SANDBOX in this file and just not compile it when sandboxing is not supported in the build.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676920065,676920065,src/util/syscall_sandbox.cpp
ryanofsky,2021-07-26 22:54:53,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nSome of this preprocessor magic seems strange. Can you maybe add a comment explaining, or linking to documentation?",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676996958,676996958,src/util/syscall_sandbox.cpp
ryanofsky,2021-07-26 22:57:46,"In commit ""Add syscall sandboxing (seccomp-bpf)"" (333392fbb886c56b62446490a81610ee821006e7)\n\nAre these two return conditions ever expected? It would be helpful to have a comment saying one way or the other, or maybe replacing these with assert statements if they are never expected.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676998117,676998117,src/util/syscall_sandbox.cpp
practicalswift,2021-07-31 16:47:07,Thanks! Now fixed.,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380954,680380954,src/init.cpp
practicalswift,2021-07-31 16:47:20,Thanks! Now fixed.,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680380978,680380978,src/init.cpp
practicalswift,2021-07-31 16:48:53,"Good point. I've now cut down on the preprocessor use, added comments and documentation links. Hopefully this should be more clear now :)",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381160,680381160,src/util/syscall_sandbox.cpp
practicalswift,2021-07-31 16:50:00,Good point: they are never expected. Now `assert`:ing instead to make our expectations clear. Thanks!,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680381289,680381289,src/util/syscall_sandbox.cpp
practicalswift,2021-07-31 18:51:42,"I don't think not compiling it is an option since `void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)` must be present regardless of `USE_SYSCALL_SANDBOX` (to avoid `ifdef`:s at the various call sites).\n\nIf `USE_SYSCALL_SANDBOX` is defined we currently need:\n\n```c++\nenum class SyscallSandboxPolicy;\nvoid SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\n[[no",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190,680396190,src/util/syscall_sandbox.cpp
practicalswift,2021-07-31 20:34:41,"I've now added  an`--nosandbox` test runner option, and `export TEST_RUNNER_EXTRA=""--nosandbox""` for this job.\n\nWhat would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422,680406422,ci/test/00_setup_env_native_multiprocess.sh
practicalswift,2021-07-31 20:39:25,"I'm planning on tackling sanitizer compatibility in a follow-up PR. It is not entirely trivial since sanitizer use is not easy to detect at runtime (AFAIK) and the different sanitizers introduce the use of different sets of syscalls, but it should hopefully be doable some way. However, I prefer keeping that outside of this PR to keep things focused on the ""standard"" non-sanitizer case first :)",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406872,680406872,configure.ac
ryanofsky,2021-08-18 00:43:05,"re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680406422\n\n> What would be the best way to detect usage of the multiprocess feature at runtime in `AppInitParameterInteraction`?\n\nYou could add a `bool ipc_enabled` parameter to `AppInitParameterInteraction` and pass `node.init->ipc()` as the argument value where it's called in `AppInit`, and `false` as the argument value where ",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690819238,690819238,ci/test/00_setup_env_native_multiprocess.sh
ryanofsky,2021-08-18 01:06:13,"re: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r680396190\n\n> WDYT? :)\n\nI like your new solution, minimizing ifdefs in the implementation while also not requiring them at call sites. Conceivably syscall_sandbox could be split up multiple files to avoid using macros, but there wouldn't be a benefit with just one current sandboxing implementation.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r690826401,690826401,src/util/syscall_sandbox.cpp
GeneFerneau,2021-08-25 20:53:17,"```suggestion\n        allowed_syscalls.emplace(__NR_brk);     // change data segment size\n```",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105058,696105058,src/util/syscall_sandbox.cpp
GeneFerneau,2021-08-25 20:54:00,Similar for other insertions to `allowed_syscalls`,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696105492,696105492,src/util/syscall_sandbox.cpp
GeneFerneau,2021-08-25 20:56:39,"```suggestion\n        bpf_policy.emplace_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n```\n\nSimilar for other `push_back` calls to `bpf_policy`",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r696107198,696107198,src/util/syscall_sandbox.cpp
practicalswift,2021-09-05 14:07:31,Note that `__NR_brk` is `uint32_t` so I don't think there is any performance reason to use `emplace` here.,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430313,702430313,src/util/syscall_sandbox.cpp
practicalswift,2021-09-05 14:10:04,That doesn't compile :),https://github.com/bitcoin/bitcoin/pull/20487#discussion_r702430665,702430665,src/util/syscall_sandbox.cpp
laanwj,2021-09-20 18:37:16,"Would suggest shortening ""Allow only allowlisted (expected)â€¦"" to ""Allow only expectedâ€¦""",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712419454,712419454,src/init.cpp
laanwj,2021-09-20 18:38:28,"Please add a comment in here, leaving this block empty looks as if something is missing.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712420229,712420229,src/init.cpp
laanwj,2021-09-20 18:42:34,"I'd personally prefer ""log-and-abort"" and ""abort"" as options instead of ""log-and-kill"" and ""kill"". I know it's not a translated message, but it's slightly friendlier anyhow.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712423006,712423006,src/init.cpp
laanwj,2021-09-20 18:47:35,"I don't think Torcontrol should be under ""initialization"", it's always active and keeps connecting to Tor and spinning up its onion service as long as bitcoind is running.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712426402,712426402,src/util/syscall_sandbox.h
laanwj,2021-09-20 18:53:43,"I'm not entirely convinced it's a good idea to maintain a full list of Linux syscalls here. This definitely doesn't scale to multiple architectures. Yes, it's nice to able to print the name instead of the number in case of failures (that's all it's used for, right?), but this should be a rare enough event and we can look up the syscall number ourselves if a user reports something.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712430747,712430747,src/util/syscall_sandbox.cpp
laanwj,2021-09-20 18:56:28,"This is supposed to be a summary, not documentation :smile: Please shorten this to something like `echo ""  with experimental syscall sandbox support""`",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712432620,712432620,configure.ac
laanwj,2021-09-20 18:58:53,"Ok, yes, adding a util category makes sense. We might want to migrate at least ""rand"" into here as well, at some point (not in this PR though).",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712434319,712434319,src/logging.cpp
laanwj,2021-09-20 19:19:36,"Good idea to only allow this on test chains. I was about to comment that this call (which aborts the process in an ugly way) should be behind some test flag, but this is already okay imo.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r712447642,712447642,src/rpc/misc.cpp
practicalswift,2021-09-30 15:22:10,Makes sense. Fixed!,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719516876,719516876,src/init.cpp
practicalswift,2021-09-30 15:22:18,Makes sense. Fixed!,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517009,719517009,src/init.cpp
practicalswift,2021-09-30 15:22:52,"Good idea: ""abort"" sounds better than ""kill"". Fixed!",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517483,719517483,src/init.cpp
practicalswift,2021-09-30 15:23:04,Makes sense. Fixed!,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719517672,719517672,src/util/syscall_sandbox.h
practicalswift,2021-09-30 15:23:28,Makes sense. Fixed!,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r719518020,719518020,configure.ac
practicalswift,2021-10-01 14:09:35,"Yes, it is only used for friendly printing of syscall names.\n\nIt might seem like a minor thing, but when developing this feature that translation (from syscall number to syscall name) has been extremely helpful. FWIW I tried developing this feature without it first and that was... very cumbersome! :)\n\nI've now added a comment clarifying how `LINUX_SYSCALLS` (previously `SYSCALLS_LINUX_X86_",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r720280559,720280559,src/util/syscall_sandbox.cpp
laanwj,2021-10-04 18:57:58,"OK, I get your point better now, it's not needed to replicate this entire structure for every architecture, because it doesn't have the raw numbers, it uses the `__NR_` constants.\n\nI agree it can be useful, it too bad querying a syscall name isn't a standard libc call, or outside that, a standard linux command that the error message can be run through. To add insult to injury, the syscall numb",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721635201,721635201,src/util/syscall_sandbox.cpp
MarcoFalke,2021-10-05 08:14:56,"https://en.cppreference.com/w/cpp/language/aggregate_initialization\n\nNeither I, nor CI could find a compiler that rejects this C++20 code, so does that mean we are allowed to use it in new code now?",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r721997392,721997392,src/util/syscall_sandbox.cpp
MarcoFalke,2021-10-05 08:32:02,"Looks like this is supported since clang 3.2 and gcc 4.7, but maybe not msvc?\n\nSee #23183 \n\n\nmsvc: `error C7555: use of designated initializers requires at least '/std:c++20'`",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r722011191,722011191,src/util/syscall_sandbox.cpp
MarcoFalke,2021-10-06 11:52:52,"> or outside that, a standard linux command\n\nIs there a standard linux command for a popular operating system? Maybe it would be enough to say: To get the syscall name, use `grep ...` on the latest Ubuntu/Debian?",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r723164375,723164375,src/util/syscall_sandbox.cpp
MarcoFalke,2021-10-11 12:35:32,"It looks like `gdb` is enough to print the name of the violating syscall. See for example https://github.com/bitcoin/bitcoin/issues/23248#issue-1022522427, which prints `mincore`.",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r726077081,726077081,src/util/syscall_sandbox.cpp
theuni,2021-10-25 16:52:07,"FYI adding `-Wpedantic` turns this into a warning:\n` $ g++ -Wall -std=c++17 -pedantic pedantic.cpp -c -o pedantic.o`\n\n> pedantic.cpp: In function â€˜int main()â€™:\n> pedantic.cpp:8:13: warning: C++ designated initializers only available with â€˜-std=c++2aâ€™ or â€˜-std=gnu++2aâ€™ [-Wpedantic]\n>     8 |     foo bar{.a = 1};\n> \n\n\nI actually thought we had `-Wpedantic` on by default, I'm not su",https://github.com/bitcoin/bitcoin/pull/20487#discussion_r735786962,735786962,src/util/syscall_sandbox.cpp
Sjors,2021-11-15 10:44:19,This is actually not in the v22.0 binary and also not backported (yet). I made a commit to bump the version: https://github.com/bitcoin/bitcoin/pull/19013/commits/4672c1ffeae515ee457968af5235a8e4418e0df5,https://github.com/bitcoin/bitcoin/pull/20487#discussion_r749202729,749202729,test/functional/test_framework/test_framework.py
