[
  {
    "sha": "4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
    "node_id": "C_kwDOABII59oAKDQ3NDdkYTNhNWI2MzliNWEzMzZiNzM3ZTdlM2NiZjA2MGNmMmVmY2Y",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:53:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-10-01T13:51:10Z"
      },
      "message": "Add syscall sandboxing (seccomp-bpf)",
      "tree": {
        "sha": "c375c8eff3a7f4b02f66247b52dfee286e7fcbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c375c8eff3a7f4b02f66247b52dfee286e7fcbae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07"
      }
    ],
    "stats": {
      "total": 1126,
      "additions": 1125,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a25c98a0042f93f9562f313b70b17ab0f1e57ab0",
        "filename": "ci/test/00_setup_env_i686_multiprocess.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/ci/test/00_setup_env_i686_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/ci/test/00_setup_env_i686_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_multiprocess.sh?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -14,4 +14,5 @@ export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-debug CC='clang -m32' CXX='clang++ -m32' LDFLAGS='--rtlib=compiler-rt -lgcc_s'\"\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n+export TEST_RUNNER_EXTRA=\"--nosandbox\"\n export PIP_PACKAGES=\"lief\""
      },
      {
        "sha": "a0bf5136ebdf83740455bae7ed361a9098838607",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -71,6 +71,12 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([seccomp],\n+  [AS_HELP_STRING([--with-seccomp],\n+  [enable experimental syscall sandbox feature (-sandbox), default is yes if seccomp-bpf is detected under Linux x86_64])],\n+  [seccomp_found=$withval],\n+  [seccomp_found=auto])\n+\n dnl Require C++17 compiler (no GNU extensions)\n AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n \n@@ -1443,6 +1449,36 @@ if test \"x$use_external_signer\" != xno; then\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n+dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n+dnl (such as execve when the sanitizers execute llvm-symbolizer).\n+if test x$use_sanitizers != x; then\n+  AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+  seccomp_found=no\n+fi\n+if test \"x$seccomp_found\" != \"xno\"; then\n+  AC_MSG_CHECKING([for seccomp-bpf (Linux x86-64)])\n+  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n+      @%:@include <linux/seccomp.h>\n+    ]], [[\n+      #if !defined(__x86_64__)\n+      #  error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+      #endif\n+    ]])],[\n+      AC_MSG_RESULT(yes)\n+      seccomp_found=\"yes\"\n+      AC_DEFINE(USE_SYSCALL_SANDBOX, 1, [Define this symbol to build with syscall sandbox support.])\n+    ],[\n+      AC_MSG_RESULT(no)\n+      seccomp_found=\"no\"\n+  ])\n+fi\n+dnl Currently only enable -sandbox=<mode> feature if seccomp is found.\n+dnl In the future, sandboxing could be also be supported with other\n+dnl sandboxing mechanisms besides seccomp.\n+use_syscall_sandbox=$seccomp_found\n+AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"])\n+\n dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n@@ -1933,6 +1969,7 @@ echo\n echo \"Options used to compile and link:\"\n echo \"  external signer = $use_external_signer\"\n echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with experimental syscall sandbox support = $use_syscall_sandbox\"\n echo \"  with libs       = $build_bitcoin_libs\"\n echo \"  with wallet     = $enable_wallet\"\n if test \"x$enable_wallet\" != \"xno\"; then"
      },
      {
        "sha": "e038a0b132382f8c5f1974217906702f09fa0126",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -261,6 +261,7 @@ BITCOIN_CORE_H = \\\n   util/sock.h \\\n   util/spanparsing.h \\\n   util/string.h \\\n+  util/syscall_sandbox.h \\\n   util/system.h \\\n   util/thread.h \\\n   util/threadnames.h \\\n@@ -611,6 +612,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\\n   util/string.cpp \\\n+  util/syscall_sandbox.cpp \\\n   util/time.cpp \\\n   util/tokenpipe.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "25ec2809e91ae46ad7714b3c76b73f3ae9717bc2",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -19,6 +19,7 @@\n #include <shutdown.h>\n #include <util/check.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/tokenpipe.h>\n@@ -238,6 +239,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         daemon_ep.Close();\n     }\n #endif\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SHUTOFF);\n     if (fRet) {\n         WaitForShutdown();\n     }"
      },
      {
        "sha": "7c20e2013c358124adb629654bee8cb42e772788",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <sync.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n #include <util/threadnames.h>\n \n #include <algorithm>\n@@ -151,6 +152,7 @@ class CCheckQueue\n         for (int n = 0; n < threads_num; ++n) {\n             m_worker_threads.emplace_back([this, n]() {\n                 util::ThreadRename(strprintf(\"scriptch.%i\", n));\n+                SetSyscallSandboxPolicy(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\n                 Loop(false /* worker thread */);\n             });\n         }"
      },
      {
        "sha": "b583ed323aedf38d687c7b7f44d7b4d464797a59",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -12,6 +12,7 @@\n #include <shutdown.h>\n #include <sync.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n@@ -279,6 +280,7 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n static bool ThreadHTTP(struct event_base* base)\n {\n     util::ThreadRename(\"http\");\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER);\n     LogPrint(BCLog::HTTP, \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -332,6 +334,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n {\n     util::ThreadRename(strprintf(\"httpworker.%i\", worker_num));\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\n     queue->Run();\n }\n "
      },
      {
        "sha": "3ca86a310e1cd84c62701ae3c4762f1d7013b10a",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -8,6 +8,7 @@\n #include <node/ui_interface.h>\n #include <shutdown.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n #include <util/thread.h>\n #include <util/translation.h>\n #include <validation.h> // For g_chainman\n@@ -123,6 +124,7 @@ static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev, CChain&\n \n void BaseIndex::ThreadSync()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TX_INDEX);\n     const CBlockIndex* pindex = m_best_block_index.load();\n     if (!m_synced) {\n         auto& consensus_params = Params().GetConsensus();"
      },
      {
        "sha": "541c0a9afc1632b89f3e7a94a549260779775473",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -60,6 +60,7 @@\n #include <util/check.h>\n #include <util/moneystr.h>\n #include <util/string.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/threadnames.h>\n@@ -562,6 +563,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-daemonwait\");\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    argsman.AddArg(\"-sandbox=<mode>\", \"Use the experimental syscall sandbox in the specified mode (-sandbox=log-and-abort or -sandbox=abort). Allow only expected syscalls to be used by bitcoind. Note that this is an experimental new feature that may cause bitcoind to exit or crash unexpectedly: use with caution. In the \\\"log-and-abort\\\" mode the invocation of an unexpected syscall results in a debug handler being invoked which will log the incident and terminate the program (without executing the unexpected syscall). In the \\\"abort\\\" mode the invocation of an unexpected syscall results in the entire process being killed immediately by the kernel without executing the unexpected syscall.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#endif // USE_SYSCALL_SANDBOX\n+\n     // Add the hidden options\n     argsman.AddHiddenArgs(hidden_args);\n }\n@@ -1018,6 +1023,37 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n     }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (args.IsArgSet(\"-sandbox\") && !args.IsArgNegated(\"-sandbox\")) {\n+        const std::string sandbox_arg{args.GetArg(\"-sandbox\", \"\")};\n+        bool log_syscall_violation_before_terminating{false};\n+        if (sandbox_arg == \"log-and-abort\") {\n+            log_syscall_violation_before_terminating = true;\n+        } else if (sandbox_arg == \"abort\") {\n+            // log_syscall_violation_before_terminating is false by default.\n+        } else {\n+            return InitError(Untranslated(\"Unknown syscall sandbox mode (-sandbox=<mode>). Available modes are \\\"log-and-abort\\\" and \\\"abort\\\".\"));\n+        }\n+        // execve(...) is not allowed by the syscall sandbox.\n+        const std::vector<std::string> features_using_execve{\n+            \"-alertnotify\",\n+            \"-blocknotify\",\n+            \"-signer\",\n+            \"-startupnotify\",\n+            \"-walletnotify\",\n+        };\n+        for (const std::string& feature_using_execve : features_using_execve) {\n+            if (!args.GetArg(feature_using_execve, \"\").empty()) {\n+                return InitError(Untranslated(strprintf(\"The experimental syscall sandbox feature (-sandbox=<mode>) is incompatible with %s (which uses execve).\", feature_using_execve)));\n+            }\n+        }\n+        if (!SetupSyscallSandbox(log_syscall_violation_before_terminating)) {\n+            return InitError(Untranslated(\"Installation of the syscall sandbox failed.\"));\n+        }\n+        LogPrintf(\"Experimental syscall sandbox enabled (-sandbox=%s): bitcoind will terminate if an unexpected (not allowlisted) syscall is invoked.\\n\", sandbox_arg);\n+    }\n+#endif // USE_SYSCALL_SANDBOX\n+\n     return true;\n }\n "
      },
      {
        "sha": "a352e106e5ecfcdbf6f506f35005ce65f7b53983",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -160,6 +160,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n     {BCLog::LOCK, \"lock\"},\n+    {BCLog::UTIL, \"util\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "02e64a7c4868d72848a7350959fca02059e7c302",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -60,6 +60,7 @@ namespace BCLog {\n         I2P         = (1 << 22),\n         IPC         = (1 << 23),\n         LOCK        = (1 << 24),\n+        UTIL        = (1 << 25),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "a2d06c68b432ccd2d45276829c6c549054701c74",
        "filename": "src/mapport.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/mapport.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/mapport.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mapport.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -14,6 +14,7 @@\n #include <netaddress.h>\n #include <netbase.h>\n #include <threadinterrupt.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n \n@@ -222,6 +223,7 @@ static bool ProcessUpnp()\n \n static void ThreadMapPort()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\n     bool ok;\n     do {\n         ok = false;"
      },
      {
        "sha": "cceb5b219947bd63be7d6f9b0c0627c6130cd6f2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -25,6 +25,7 @@\n #include <scheduler.h>\n #include <util/sock.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/trace.h>\n@@ -1615,6 +1616,7 @@ void CConnman::SocketHandler()\n \n void CConnman::ThreadSocketHandler()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET);\n     while (!interruptNet)\n     {\n         DisconnectNodes();\n@@ -1634,6 +1636,7 @@ void CConnman::WakeMessageHandler()\n \n void CConnman::ThreadDNSAddressSeed()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\n     FastRandomContext rng;\n     std::vector<std::string> seeds = Params().DNSSeeds();\n     Shuffle(seeds.begin(), seeds.end(), rng);\n@@ -1816,6 +1819,7 @@ int CConnman::GetExtraBlockRelayCount() const\n \n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\n     // Connect to specific addresses\n     if (!connect.empty())\n     {\n@@ -2155,6 +2159,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n \n void CConnman::ThreadOpenAddedConnections()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::NET_ADD_CONNECTION);\n     while (true)\n     {\n         CSemaphoreGrant grant(*semAddnode);\n@@ -2218,6 +2223,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n \n void CConnman::ThreadMessageHandler()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::MESSAGE_HANDLER);\n     FastRandomContext rng;\n     while (!flagInterruptMsgProc)\n     {"
      },
      {
        "sha": "e2776f73bcc7136edbf7020d0482d8658a316d9e",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -16,6 +16,7 @@\n #include <signet.h>\n #include <streams.h>\n #include <undo.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <validation.h>\n \n@@ -489,6 +490,7 @@ struct CImportingNow {\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\n     ScheduleBatchPriority();\n \n     {"
      },
      {
        "sha": "5fba8c8e077eb0191802fdc8a9ef035c0c95f513",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -22,6 +22,7 @@\n #include <util/check.h>\n #include <util/message.h> // For MessageSign(), MessageVerify()\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n \n #include <optional>\n@@ -417,6 +418,27 @@ static RPCHelpMan setmocktime()\n     };\n }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+static RPCHelpMan invokedisallowedsyscall()\n+{\n+    return RPCHelpMan{\n+        \"invokedisallowedsyscall\",\n+        \"\\nInvoke a disallowed syscall to trigger a syscall sandbox violation. Used for testing purposes.\\n\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"invokedisallowedsyscall\", \"\") + HelpExampleRpc(\"invokedisallowedsyscall\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            if (!Params().IsTestChain()) {\n+                throw std::runtime_error(\"invokedisallowedsyscall is used for testing only.\");\n+            }\n+            TestDisallowedSandboxCall();\n+            return NullUniValue;\n+        },\n+    };\n+}\n+#endif // USE_SYSCALL_SANDBOX\n+\n static RPCHelpMan mockscheduler()\n {\n     return RPCHelpMan{\"mockscheduler\",\n@@ -777,6 +799,9 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             &echo,                    },\n     { \"hidden\",             &echojson,                },\n     { \"hidden\",             &echoipc,                 },\n+#if defined(USE_SYSCALL_SANDBOX)\n+    { \"hidden\",             &invokedisallowedsyscall, },\n+#endif // USE_SYSCALL_SANDBOX\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "162cced6c7cd36c6a03f22a19544ffb749b3dbb6",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -5,6 +5,7 @@\n #include <scheduler.h>\n \n #include <random.h>\n+#include <util/syscall_sandbox.h>\n #include <util/time.h>\n \n #include <assert.h>\n@@ -24,6 +25,7 @@ CScheduler::~CScheduler()\n \n void CScheduler::serviceQueue()\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::SCHEDULER);\n     WAIT_LOCK(newTaskMutex, lock);\n     ++nThreadsServicingQueue;\n "
      },
      {
        "sha": "6d215ede6f48c4f318802f048c839a3f27c7cc76",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -14,6 +14,7 @@\n #include <netbase.h>\n #include <util/readwritefile.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/time.h>\n@@ -585,6 +586,7 @@ static std::thread torControlThread;\n \n static void TorControlThread(CService onion_service_target)\n {\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::TOR_CONTROL);\n     TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), onion_service_target);\n \n     event_base_dispatch(gBase);"
      },
      {
        "sha": "c4006cbd3cc8c4055b37a4735a7c472778bf6e85",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "added",
        "additions": 882,
        "deletions": 0,
        "changes": 882,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -0,0 +1,882 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif // defined(HAVE_CONFIG_H)\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <map>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace {\n+bool g_syscall_sandbox_enabled{false};\n+bool g_syscall_sandbox_log_violation_before_terminating{false};\n+\n+#if !defined(__x86_64__)\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif // defined(__x86_64__)\n+\n+// This list of syscalls in LINUX_SYSCALLS is only used to map syscall numbers to syscall names in\n+// order to be able to print user friendly error messages which include the syscall name in addition\n+// to the syscall number.\n+//\n+// Example output in case of a syscall violation where the syscall is present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"execve\" (syscall number 59) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ```\n+//\n+// Example output in case of a syscall violation where the syscall is not present in LINUX_SYSCALLS:\n+//\n+// ```\n+// 2021-06-09T12:34:56Z ERROR: The syscall \"*unknown*\" (syscall number 314) is not allowed by the syscall sandbox in thread \"msghand\". Please report.\n+// ``\n+//\n+// LINUX_SYSCALLS contains two types of syscalls:\n+// 1.) Syscalls that are present under all architectures or relevant Linux kernel versions for which\n+//     we support the syscall sandbox feature (currently only Linux x86-64). Examples include read,\n+//     write, open, close, etc.\n+// 2.) Syscalls that are present under a subset of architectures or relevant Linux kernel versions\n+//     for which we support the syscall sandbox feature. This type of syscalls should be added to\n+//     LINUX_SYSCALLS conditional on availability like in the following example:\n+//         ...\n+//         #if defined(__NR_arch_dependent_syscall)\n+//             {__NR_arch_dependent_syscall, \"arch_dependent_syscall\"},\n+//         #endif // defined(__NR_arch_dependent_syscall)\n+//         ...\n+const std::map<uint32_t, std::string> LINUX_SYSCALLS{\n+    {__NR_accept, \"accept\"},\n+    {__NR_accept4, \"accept4\"},\n+    {__NR_access, \"access\"},\n+    {__NR_acct, \"acct\"},\n+    {__NR_add_key, \"add_key\"},\n+    {__NR_adjtimex, \"adjtimex\"},\n+    {__NR_afs_syscall, \"afs_syscall\"},\n+    {__NR_alarm, \"alarm\"},\n+    {__NR_arch_prctl, \"arch_prctl\"},\n+    {__NR_bind, \"bind\"},\n+    {__NR_bpf, \"bpf\"},\n+    {__NR_brk, \"brk\"},\n+    {__NR_capget, \"capget\"},\n+    {__NR_capset, \"capset\"},\n+    {__NR_chdir, \"chdir\"},\n+    {__NR_chmod, \"chmod\"},\n+    {__NR_chown, \"chown\"},\n+    {__NR_chroot, \"chroot\"},\n+    {__NR_clock_adjtime, \"clock_adjtime\"},\n+    {__NR_clock_getres, \"clock_getres\"},\n+    {__NR_clock_gettime, \"clock_gettime\"},\n+    {__NR_clock_nanosleep, \"clock_nanosleep\"},\n+    {__NR_clock_settime, \"clock_settime\"},\n+    {__NR_clone, \"clone\"},\n+    {__NR_close, \"close\"},\n+    {__NR_connect, \"connect\"},\n+    {__NR_copy_file_range, \"copy_file_range\"},\n+    {__NR_creat, \"creat\"},\n+    {__NR_create_module, \"create_module\"},\n+    {__NR_delete_module, \"delete_module\"},\n+    {__NR_dup, \"dup\"},\n+    {__NR_dup2, \"dup2\"},\n+    {__NR_dup3, \"dup3\"},\n+    {__NR_epoll_create, \"epoll_create\"},\n+    {__NR_epoll_create1, \"epoll_create1\"},\n+    {__NR_epoll_ctl, \"epoll_ctl\"},\n+    {__NR_epoll_ctl_old, \"epoll_ctl_old\"},\n+    {__NR_epoll_pwait, \"epoll_pwait\"},\n+    {__NR_epoll_wait, \"epoll_wait\"},\n+    {__NR_epoll_wait_old, \"epoll_wait_old\"},\n+    {__NR_eventfd, \"eventfd\"},\n+    {__NR_eventfd2, \"eventfd2\"},\n+    {__NR_execve, \"execve\"},\n+    {__NR_execveat, \"execveat\"},\n+    {__NR_exit, \"exit\"},\n+    {__NR_exit_group, \"exit_group\"},\n+    {__NR_faccessat, \"faccessat\"},\n+    {__NR_fadvise64, \"fadvise64\"},\n+    {__NR_fallocate, \"fallocate\"},\n+    {__NR_fanotify_init, \"fanotify_init\"},\n+    {__NR_fanotify_mark, \"fanotify_mark\"},\n+    {__NR_fchdir, \"fchdir\"},\n+    {__NR_fchmod, \"fchmod\"},\n+    {__NR_fchmodat, \"fchmodat\"},\n+    {__NR_fchown, \"fchown\"},\n+    {__NR_fchownat, \"fchownat\"},\n+    {__NR_fcntl, \"fcntl\"},\n+    {__NR_fdatasync, \"fdatasync\"},\n+    {__NR_fgetxattr, \"fgetxattr\"},\n+    {__NR_finit_module, \"finit_module\"},\n+    {__NR_flistxattr, \"flistxattr\"},\n+    {__NR_flock, \"flock\"},\n+    {__NR_fork, \"fork\"},\n+    {__NR_fremovexattr, \"fremovexattr\"},\n+    {__NR_fsetxattr, \"fsetxattr\"},\n+    {__NR_fstat, \"fstat\"},\n+    {__NR_fstatfs, \"fstatfs\"},\n+    {__NR_fsync, \"fsync\"},\n+    {__NR_ftruncate, \"ftruncate\"},\n+    {__NR_futex, \"futex\"},\n+    {__NR_futimesat, \"futimesat\"},\n+    {__NR_getcpu, \"getcpu\"},\n+    {__NR_getcwd, \"getcwd\"},\n+    {__NR_getdents, \"getdents\"},\n+    {__NR_getdents64, \"getdents64\"},\n+    {__NR_getegid, \"getegid\"},\n+    {__NR_geteuid, \"geteuid\"},\n+    {__NR_getgid, \"getgid\"},\n+    {__NR_getgroups, \"getgroups\"},\n+    {__NR_getitimer, \"getitimer\"},\n+    {__NR_get_kernel_syms, \"get_kernel_syms\"},\n+    {__NR_get_mempolicy, \"get_mempolicy\"},\n+    {__NR_getpeername, \"getpeername\"},\n+    {__NR_getpgid, \"getpgid\"},\n+    {__NR_getpgrp, \"getpgrp\"},\n+    {__NR_getpid, \"getpid\"},\n+    {__NR_getpmsg, \"getpmsg\"},\n+    {__NR_getppid, \"getppid\"},\n+    {__NR_getpriority, \"getpriority\"},\n+#if defined(__NR_getrandom)\n+    {__NR_getrandom, \"getrandom\"},\n+#endif // defined(__NR_getrandom)\n+    {__NR_getresgid, \"getresgid\"},\n+    {__NR_getresuid, \"getresuid\"},\n+    {__NR_getrlimit, \"getrlimit\"},\n+    {__NR_get_robust_list, \"get_robust_list\"},\n+    {__NR_getrusage, \"getrusage\"},\n+    {__NR_getsid, \"getsid\"},\n+    {__NR_getsockname, \"getsockname\"},\n+    {__NR_getsockopt, \"getsockopt\"},\n+    {__NR_get_thread_area, \"get_thread_area\"},\n+    {__NR_gettid, \"gettid\"},\n+    {__NR_gettimeofday, \"gettimeofday\"},\n+    {__NR_getuid, \"getuid\"},\n+    {__NR_getxattr, \"getxattr\"},\n+    {__NR_init_module, \"init_module\"},\n+    {__NR_inotify_add_watch, \"inotify_add_watch\"},\n+    {__NR_inotify_init, \"inotify_init\"},\n+    {__NR_inotify_init1, \"inotify_init1\"},\n+    {__NR_inotify_rm_watch, \"inotify_rm_watch\"},\n+    {__NR_io_cancel, \"io_cancel\"},\n+    {__NR_ioctl, \"ioctl\"},\n+    {__NR_io_destroy, \"io_destroy\"},\n+    {__NR_io_getevents, \"io_getevents\"},\n+    {__NR_ioperm, \"ioperm\"},\n+    {__NR_iopl, \"iopl\"},\n+    {__NR_ioprio_get, \"ioprio_get\"},\n+    {__NR_ioprio_set, \"ioprio_set\"},\n+    {__NR_io_setup, \"io_setup\"},\n+    {__NR_io_submit, \"io_submit\"},\n+    {__NR_kcmp, \"kcmp\"},\n+    {__NR_kexec_file_load, \"kexec_file_load\"},\n+    {__NR_kexec_load, \"kexec_load\"},\n+    {__NR_keyctl, \"keyctl\"},\n+    {__NR_kill, \"kill\"},\n+    {__NR_lchown, \"lchown\"},\n+    {__NR_lgetxattr, \"lgetxattr\"},\n+    {__NR_link, \"link\"},\n+    {__NR_linkat, \"linkat\"},\n+    {__NR_listen, \"listen\"},\n+    {__NR_listxattr, \"listxattr\"},\n+    {__NR_llistxattr, \"llistxattr\"},\n+    {__NR_lookup_dcookie, \"lookup_dcookie\"},\n+    {__NR_lremovexattr, \"lremovexattr\"},\n+    {__NR_lseek, \"lseek\"},\n+    {__NR_lsetxattr, \"lsetxattr\"},\n+    {__NR_lstat, \"lstat\"},\n+    {__NR_madvise, \"madvise\"},\n+    {__NR_mbind, \"mbind\"},\n+#if defined(__NR_membarrier)\n+    {__NR_membarrier, \"membarrier\"},\n+#endif // defined(__NR_membarrier)\n+    {__NR_memfd_create, \"memfd_create\"},\n+    {__NR_migrate_pages, \"migrate_pages\"},\n+    {__NR_mincore, \"mincore\"},\n+    {__NR_mkdir, \"mkdir\"},\n+    {__NR_mkdirat, \"mkdirat\"},\n+    {__NR_mknod, \"mknod\"},\n+    {__NR_mknodat, \"mknodat\"},\n+    {__NR_mlock, \"mlock\"},\n+    {__NR_mlock2, \"mlock2\"},\n+    {__NR_mlockall, \"mlockall\"},\n+    {__NR_mmap, \"mmap\"},\n+    {__NR_modify_ldt, \"modify_ldt\"},\n+    {__NR_mount, \"mount\"},\n+    {__NR_move_pages, \"move_pages\"},\n+    {__NR_mprotect, \"mprotect\"},\n+    {__NR_mq_getsetattr, \"mq_getsetattr\"},\n+    {__NR_mq_notify, \"mq_notify\"},\n+    {__NR_mq_open, \"mq_open\"},\n+    {__NR_mq_timedreceive, \"mq_timedreceive\"},\n+    {__NR_mq_timedsend, \"mq_timedsend\"},\n+    {__NR_mq_unlink, \"mq_unlink\"},\n+    {__NR_mremap, \"mremap\"},\n+    {__NR_msgctl, \"msgctl\"},\n+    {__NR_msgget, \"msgget\"},\n+    {__NR_msgrcv, \"msgrcv\"},\n+    {__NR_msgsnd, \"msgsnd\"},\n+    {__NR_msync, \"msync\"},\n+    {__NR_munlock, \"munlock\"},\n+    {__NR_munlockall, \"munlockall\"},\n+    {__NR_munmap, \"munmap\"},\n+    {__NR_name_to_handle_at, \"name_to_handle_at\"},\n+    {__NR_nanosleep, \"nanosleep\"},\n+    {__NR_newfstatat, \"newfstatat\"},\n+    {__NR_nfsservctl, \"nfsservctl\"},\n+    {__NR_open, \"open\"},\n+    {__NR_openat, \"openat\"},\n+    {__NR_open_by_handle_at, \"open_by_handle_at\"},\n+    {__NR_pause, \"pause\"},\n+    {__NR_perf_event_open, \"perf_event_open\"},\n+    {__NR_personality, \"personality\"},\n+    {__NR_pipe, \"pipe\"},\n+    {__NR_pipe2, \"pipe2\"},\n+    {__NR_pivot_root, \"pivot_root\"},\n+    {__NR_pkey_alloc, \"pkey_alloc\"},\n+    {__NR_pkey_free, \"pkey_free\"},\n+    {__NR_pkey_mprotect, \"pkey_mprotect\"},\n+    {__NR_poll, \"poll\"},\n+    {__NR_ppoll, \"ppoll\"},\n+    {__NR_prctl, \"prctl\"},\n+    {__NR_pread64, \"pread64\"},\n+    {__NR_preadv, \"preadv\"},\n+    {__NR_preadv2, \"preadv2\"},\n+    {__NR_prlimit64, \"prlimit64\"},\n+    {__NR_process_vm_readv, \"process_vm_readv\"},\n+    {__NR_process_vm_writev, \"process_vm_writev\"},\n+    {__NR_pselect6, \"pselect6\"},\n+    {__NR_ptrace, \"ptrace\"},\n+    {__NR_putpmsg, \"putpmsg\"},\n+    {__NR_pwrite64, \"pwrite64\"},\n+    {__NR_pwritev, \"pwritev\"},\n+    {__NR_pwritev2, \"pwritev2\"},\n+    {__NR_query_module, \"query_module\"},\n+    {__NR_quotactl, \"quotactl\"},\n+    {__NR_read, \"read\"},\n+    {__NR_readahead, \"readahead\"},\n+    {__NR_readlink, \"readlink\"},\n+    {__NR_readlinkat, \"readlinkat\"},\n+    {__NR_readv, \"readv\"},\n+    {__NR_reboot, \"reboot\"},\n+    {__NR_recvfrom, \"recvfrom\"},\n+    {__NR_recvmmsg, \"recvmmsg\"},\n+    {__NR_recvmsg, \"recvmsg\"},\n+    {__NR_remap_file_pages, \"remap_file_pages\"},\n+    {__NR_removexattr, \"removexattr\"},\n+    {__NR_rename, \"rename\"},\n+    {__NR_renameat, \"renameat\"},\n+    {__NR_renameat2, \"renameat2\"},\n+    {__NR_request_key, \"request_key\"},\n+    {__NR_restart_syscall, \"restart_syscall\"},\n+    {__NR_rmdir, \"rmdir\"},\n+    {__NR_rt_sigaction, \"rt_sigaction\"},\n+    {__NR_rt_sigpending, \"rt_sigpending\"},\n+    {__NR_rt_sigprocmask, \"rt_sigprocmask\"},\n+    {__NR_rt_sigqueueinfo, \"rt_sigqueueinfo\"},\n+    {__NR_rt_sigreturn, \"rt_sigreturn\"},\n+    {__NR_rt_sigsuspend, \"rt_sigsuspend\"},\n+    {__NR_rt_sigtimedwait, \"rt_sigtimedwait\"},\n+    {__NR_rt_tgsigqueueinfo, \"rt_tgsigqueueinfo\"},\n+    {__NR_sched_getaffinity, \"sched_getaffinity\"},\n+    {__NR_sched_getattr, \"sched_getattr\"},\n+    {__NR_sched_getparam, \"sched_getparam\"},\n+    {__NR_sched_get_priority_max, \"sched_get_priority_max\"},\n+    {__NR_sched_get_priority_min, \"sched_get_priority_min\"},\n+    {__NR_sched_getscheduler, \"sched_getscheduler\"},\n+    {__NR_sched_rr_get_interval, \"sched_rr_get_interval\"},\n+    {__NR_sched_setaffinity, \"sched_setaffinity\"},\n+    {__NR_sched_setattr, \"sched_setattr\"},\n+    {__NR_sched_setparam, \"sched_setparam\"},\n+    {__NR_sched_setscheduler, \"sched_setscheduler\"},\n+    {__NR_sched_yield, \"sched_yield\"},\n+    {__NR_seccomp, \"seccomp\"},\n+    {__NR_security, \"security\"},\n+    {__NR_select, \"select\"},\n+    {__NR_semctl, \"semctl\"},\n+    {__NR_semget, \"semget\"},\n+    {__NR_semop, \"semop\"},\n+    {__NR_semtimedop, \"semtimedop\"},\n+    {__NR_sendfile, \"sendfile\"},\n+    {__NR_sendmmsg, \"sendmmsg\"},\n+    {__NR_sendmsg, \"sendmsg\"},\n+    {__NR_sendto, \"sendto\"},\n+    {__NR_setdomainname, \"setdomainname\"},\n+    {__NR_setfsgid, \"setfsgid\"},\n+    {__NR_setfsuid, \"setfsuid\"},\n+    {__NR_setgid, \"setgid\"},\n+    {__NR_setgroups, \"setgroups\"},\n+    {__NR_sethostname, \"sethostname\"},\n+    {__NR_setitimer, \"setitimer\"},\n+    {__NR_set_mempolicy, \"set_mempolicy\"},\n+    {__NR_setns, \"setns\"},\n+    {__NR_setpgid, \"setpgid\"},\n+    {__NR_setpriority, \"setpriority\"},\n+    {__NR_setregid, \"setregid\"},\n+    {__NR_setresgid, \"setresgid\"},\n+    {__NR_setresuid, \"setresuid\"},\n+    {__NR_setreuid, \"setreuid\"},\n+    {__NR_setrlimit, \"setrlimit\"},\n+    {__NR_set_robust_list, \"set_robust_list\"},\n+    {__NR_setsid, \"setsid\"},\n+    {__NR_setsockopt, \"setsockopt\"},\n+    {__NR_set_thread_area, \"set_thread_area\"},\n+    {__NR_set_tid_address, \"set_tid_address\"},\n+    {__NR_settimeofday, \"settimeofday\"},\n+    {__NR_setuid, \"setuid\"},\n+    {__NR_setxattr, \"setxattr\"},\n+    {__NR_shmat, \"shmat\"},\n+    {__NR_shmctl, \"shmctl\"},\n+    {__NR_shmdt, \"shmdt\"},\n+    {__NR_shmget, \"shmget\"},\n+    {__NR_shutdown, \"shutdown\"},\n+    {__NR_sigaltstack, \"sigaltstack\"},\n+    {__NR_signalfd, \"signalfd\"},\n+    {__NR_signalfd4, \"signalfd4\"},\n+    {__NR_socket, \"socket\"},\n+    {__NR_socketpair, \"socketpair\"},\n+    {__NR_splice, \"splice\"},\n+    {__NR_stat, \"stat\"},\n+    {__NR_statfs, \"statfs\"},\n+    {__NR_statx, \"statx\"},\n+    {__NR_swapoff, \"swapoff\"},\n+    {__NR_swapon, \"swapon\"},\n+    {__NR_symlink, \"symlink\"},\n+    {__NR_symlinkat, \"symlinkat\"},\n+    {__NR_sync, \"sync\"},\n+    {__NR_sync_file_range, \"sync_file_range\"},\n+    {__NR_syncfs, \"syncfs\"},\n+    {__NR__sysctl, \"_sysctl\"},\n+    {__NR_sysfs, \"sysfs\"},\n+    {__NR_sysinfo, \"sysinfo\"},\n+    {__NR_syslog, \"syslog\"},\n+    {__NR_tee, \"tee\"},\n+    {__NR_tgkill, \"tgkill\"},\n+    {__NR_time, \"time\"},\n+    {__NR_timer_create, \"timer_create\"},\n+    {__NR_timer_delete, \"timer_delete\"},\n+    {__NR_timerfd_create, \"timerfd_create\"},\n+    {__NR_timerfd_gettime, \"timerfd_gettime\"},\n+    {__NR_timerfd_settime, \"timerfd_settime\"},\n+    {__NR_timer_getoverrun, \"timer_getoverrun\"},\n+    {__NR_timer_gettime, \"timer_gettime\"},\n+    {__NR_timer_settime, \"timer_settime\"},\n+    {__NR_times, \"times\"},\n+    {__NR_tkill, \"tkill\"},\n+    {__NR_truncate, \"truncate\"},\n+    {__NR_tuxcall, \"tuxcall\"},\n+    {__NR_umask, \"umask\"},\n+    {__NR_umount2, \"umount2\"},\n+    {__NR_uname, \"uname\"},\n+    {__NR_unlink, \"unlink\"},\n+    {__NR_unlinkat, \"unlinkat\"},\n+    {__NR_unshare, \"unshare\"},\n+    {__NR_uselib, \"uselib\"},\n+    {__NR_userfaultfd, \"userfaultfd\"},\n+    {__NR_ustat, \"ustat\"},\n+    {__NR_utime, \"utime\"},\n+    {__NR_utimensat, \"utimensat\"},\n+    {__NR_utimes, \"utimes\"},\n+    {__NR_vfork, \"vfork\"},\n+    {__NR_vhangup, \"vhangup\"},\n+    {__NR_vmsplice, \"vmsplice\"},\n+    {__NR_vserver, \"vserver\"},\n+    {__NR_wait4, \"wait4\"},\n+    {__NR_waitid, \"waitid\"},\n+    {__NR_write, \"write\"},\n+    {__NR_writev, \"writev\"},\n+};\n+\n+std::string GetLinuxSyscallName(uint32_t syscall_number)\n+{\n+    const auto element = LINUX_SYSCALLS.find(syscall_number);\n+    if (element != LINUX_SYSCALLS.end()) {\n+        return element->second;\n+    }\n+    return \"*unknown*\";\n+}\n+\n+// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/> for\n+// an accessible introduction to using seccomp.\n+//\n+// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n+// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+//\n+// Seccomp BPF resources:\n+// * Seccomp BPF documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+// * seccomp(2) manual page: <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n+// * Seccomp BPF demo code samples: <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* signal_info, void* void_signal_context)\n+{\n+    // The si_code field inside the siginfo_t argument that is passed to a SA_SIGINFO signal handler\n+    // is a value indicating why the signal was sent.\n+    //\n+    // The following value can be placed in si_code for a SIGSYS signal:\n+    // * SYS_SECCOMP (since Linux 3.5): Triggered by a seccomp(2) filter rule.\n+    constexpr int32_t SYS_SECCOMP_SI_CODE{1};\n+    assert(signal_info->si_code == SYS_SECCOMP_SI_CODE);\n+\n+    // The ucontext_t structure contains signal context information that was saved on the user-space\n+    // stack by the kernel.\n+    const ucontext_t* signal_context = static_cast<ucontext_t*>(void_signal_context);\n+    assert(signal_context != nullptr);\n+\n+    std::set_new_handler(std::terminate);\n+    // Portability note: REG_RAX is Linux x86_64 specific.\n+    const uint32_t syscall_number = static_cast<uint32_t>(signal_context->uc_mcontext.gregs[REG_RAX]);\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n+// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n+bool SetupSyscallSandboxDebugHandler()\n+{\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        return false;\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+enum class SyscallSandboxAction {\n+    KILL_PROCESS,\n+    INVOKE_SIGNAL_HANDLER,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif // defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif // defined(__NR_getrandom)\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    // See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n+    // for an accessible introduction to using seccomp.\n+    //\n+    // This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n+    std::vector<sock_filter> BuildFilter(SyscallSandboxAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, arch)));\n+        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AUDIT_ARCH_X86_64, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, offsetof(struct seccomp_data, nr)));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxAction::KILL_PROCESS:\n+            // Disallow syscall and kill the process.\n+            //\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n+            // executing the system call.\n+            //\n+            // SECCOMP_RET_KILL_PROCESS documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxAction::INVOKE_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            //\n+            // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n+            // task without executing the system call.\n+            //\n+            // SECCOMP_RET_TRAP documentation:\n+            // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+} // namespace\n+\n+bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating)\n+{\n+    assert(!g_syscall_sandbox_enabled && \"SetupSyscallSandbox(...) should only be called once.\");\n+    g_syscall_sandbox_enabled = true;\n+    g_syscall_sandbox_log_violation_before_terminating = log_syscall_violation_before_terminating;\n+    if (log_syscall_violation_before_terminating) {\n+        if (!SetupSyscallSandboxDebugHandler()) {\n+            return false;\n+        }\n+    }\n+    SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION);\n+    return true;\n+}\n+\n+void TestDisallowedSandboxCall()\n+{\n+    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+    std::array<gid_t, 1> groups;\n+    [[maybe_unused]] int32_t ignored = getgroups(groups.size(), groups.data());\n+}\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!g_syscall_sandbox_enabled) {\n+        return;\n+    }\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+    const SyscallSandboxAction default_action = g_syscall_sandbox_log_violation_before_terminating ? SyscallSandboxAction::INVOKE_SIGNAL_HANDLER : SyscallSandboxAction::KILL_PROCESS;\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };\n+    // Do not allow abilities to be regained after being dropped.\n+    //\n+    // PR_SET_NO_NEW_PRIVS documentation: <https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html>\n+    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0) {\n+        throw std::runtime_error(\"Syscall sandbox enforcement failed: prctl(PR_SET_NO_NEW_PRIVS)\");\n+    }\n+    // Install seccomp-bpf syscall filter.\n+    //\n+    // PR_SET_SECCOMP documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n+    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) != 0) {\n+        throw std::runtime_error(\"Syscall sandbox enforcement failed: prctl(PR_SET_SECCOMP)\");\n+    }\n+\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    LogPrint(BCLog::UTIL, \"Syscall filter installed for thread \\\"%s\\\"\\n\", thread_name);\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+}"
      },
      {
        "sha": "0a0c964f942f0d83803d8fe19810f19022eddc50",
        "filename": "src/util/syscall_sandbox.h",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/util/syscall_sandbox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/src/util/syscall_sandbox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.h?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+\n+    // 2. Steady state (non-initialization, non-shutdown)\n+    MESSAGE_HANDLER,\n+    NET,\n+    NET_ADD_CONNECTION,\n+    NET_HTTP_SERVER,\n+    NET_HTTP_SERVER_WORKER,\n+    NET_OPEN_CONNECTION,\n+    SCHEDULER,\n+    TOR_CONTROL,\n+    TX_INDEX,\n+    VALIDATION_SCRIPT_CHECK,\n+\n+    // 3. Shutdown\n+    SHUTOFF,\n+};\n+\n+//! Force the current thread (and threads created from the current thread) into a restricted-service\n+//! operating mode where only a subset of all syscalls are available.\n+//!\n+//! Subsequent calls to this function can reduce the abilities further, but abilities can never be\n+//! regained.\n+//!\n+//! This function is a no-op unless SetupSyscallSandbox(...) has been called.\n+//!\n+//! SetupSyscallSandbox(...) is called during bitcoind initialization if Bitcoin Core was compiled\n+//! with seccomp-bpf support (--with-seccomp) *and* the parameter -sandbox=<mode> was passed to\n+//! bitcoind.\n+//!\n+//! This experimental feature is available under Linux x86_64 only.\n+void SetSyscallSandboxPolicy(SyscallSandboxPolicy syscall_policy);\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+//! Setup and enable the experimental syscall sandbox for the running process.\n+//!\n+//! SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION) is called as part of\n+//! SetupSyscallSandbox(...).\n+[[nodiscard]] bool SetupSyscallSandbox(bool log_syscall_violation_before_terminating);\n+\n+//! Invoke a disallowed syscall. Use for testing purposes.\n+void TestDisallowedSandboxCall();\n+#endif // defined(USE_SYSCALL_SANDBOX)\n+\n+#endif // BITCOIN_UTIL_SYSCALL_SANDBOX_H"
      },
      {
        "sha": "8bcba1b39caf63273172d650d47379c025114539",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -24,3 +24,4 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true\n @ENABLE_EXTERNAL_SIGNER_TRUE@ENABLE_EXTERNAL_SIGNER=true\n+@ENABLE_SYSCALL_SANDBOX_TRUE@ENABLE_SYSCALL_SANDBOX=true"
      },
      {
        "sha": "48d41432bef6d93b5aa26b43b89ff9a22866964c",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -27,6 +27,9 @@ class NotificationsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        # The experimental syscall sandbox feature (-sandbox) is not compatible with -alertnotify,\n+        # -blocknotify or -walletnotify (which all invoke execve).\n+        self.disable_syscall_sandbox = True\n \n     def setup_network(self):\n         self.wallet = ''.join(chr(i) for i in range(FILE_CHAR_START, FILE_CHAR_END) if chr(i) not in FILE_CHARS_DISALLOWED)"
      },
      {
        "sha": "caf7f1e7fc1968d9bc6806d31e2761f2e2b91a98",
        "filename": "test/functional/feature_syscall_sandbox.py",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_syscall_sandbox.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_syscall_sandbox.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_syscall_sandbox.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoind aborts if a disallowed syscall is used when compiled with the syscall sandbox.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+\n+\n+class SyscallSandboxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        if not self.is_syscall_sandbox_compiled():\n+            raise SkipTest(\"bitcoind has not been built with syscall sandbox enabled.\")\n+        if self.options.nosandbox:\n+            raise SkipTest(\"--nosandbox passed to test runner.\")\n+\n+    def run_test(self):\n+        disallowed_syscall_terminated_bitcoind = False\n+        expected_log_entry = 'ERROR: The syscall \"getgroups\" (syscall number 115) is not allowed by the syscall sandbox'\n+        with self.nodes[0].assert_debug_log([expected_log_entry]):\n+            self.log.info(\"Invoking disallowed syscall\")\n+            try:\n+                self.nodes[0].invokedisallowedsyscall()\n+            except ConnectionError:\n+                disallowed_syscall_terminated_bitcoind = True\n+        assert disallowed_syscall_terminated_bitcoind\n+        self.nodes = []\n+\n+\n+if __name__ == \"__main__\":\n+    SyscallSandboxTest().main()"
      },
      {
        "sha": "d74ef5e0888cd3f6b19d9289075ed4376350f07c",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -28,6 +28,9 @@ class VersionBitsWarningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        # The experimental syscall sandbox feature (-sandbox) is not compatible with -alertnotify\n+        # (which invokes execve).\n+        self.disable_syscall_sandbox = True\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")"
      },
      {
        "sha": "ac2a7a309b20c11319ae38137be5945949bbf8cf",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -57,7 +57,7 @@ def run_test(self):\n         self.log.info(\"test logging rpc and help\")\n \n         # Test logging RPC returns the expected number of logging categories.\n-        assert_equal(len(node.logging()), 25)\n+        assert_equal(len(node.logging()), 26)\n \n         # Test toggling a logging category on/off/on with the logging RPC.\n         assert_equal(node.logging()['qt'], True)"
      },
      {
        "sha": "5c3722ef8f320278b24ce77a14c5bf49ebac1ecc",
        "filename": "test/functional/rpc_signer.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/rpc_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/rpc_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signer.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -27,6 +27,9 @@ def mock_signer_path(self):\n \n     def set_test_params(self):\n         self.num_nodes = 4\n+        # The experimental syscall sandbox feature (-sandbox) is not compatible with -signer (which\n+        # invokes execve).\n+        self.disable_syscall_sandbox = True\n \n         self.extra_args = [\n             [],"
      },
      {
        "sha": "0fad4071e26e1a62bc464d7c712c7aa480599e04",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -101,6 +101,7 @@ def __init__(self):\n         self.supports_cli = True\n         self.bind_to_localhost_only = True\n         self.parse_args()\n+        self.disable_syscall_sandbox = self.options.nosandbox\n         self.default_wallet_name = \"default_wallet\" if self.options.descriptors else \"\"\n         self.wallet_data_filename = \"wallet.dat\"\n         # Optional list of wallet names that can be set in set_test_params to\n@@ -159,6 +160,8 @@ def parse_args(self):\n         parser = argparse.ArgumentParser(usage=\"%(prog)s [options]\")\n         parser.add_argument(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n                             help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_argument(\"--nosandbox\", dest=\"nosandbox\", default=False, action=\"store_true\",\n+                            help=\"Don't use the syscall sandbox\")\n         parser.add_argument(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                             help=\"Don't stop bitcoinds after the test execution\")\n         parser.add_argument(\"--cachedir\", dest=\"cachedir\", default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n@@ -468,6 +471,10 @@ def get_bin_from_version(version, bin_name, bin_default):\n             extra_args = [[]] * num_nodes\n         if versions is None:\n             versions = [None] * num_nodes\n+        if self.is_syscall_sandbox_compiled() and not self.disable_syscall_sandbox:\n+            for i in range(len(extra_args)):\n+                if versions[i] is None or versions[i] >= 219900:\n+                    extra_args[i] = extra_args[i] + [\"-sandbox=log-and-abort\"]\n         if binary is None:\n             binary = [get_bin_from_version(v, 'bitcoind', self.options.bitcoind) for v in versions]\n         if binary_cli is None:\n@@ -886,3 +893,7 @@ def is_sqlite_compiled(self):\n     def is_bdb_compiled(self):\n         \"\"\"Checks whether the wallet module was compiled with BDB support.\"\"\"\n         return self.config[\"components\"].getboolean(\"USE_BDB\")\n+\n+    def is_syscall_sandbox_compiled(self):\n+        \"\"\"Checks whether the syscall sandbox was compiled.\"\"\"\n+        return self.config[\"components\"].getboolean(\"ENABLE_SYSCALL_SANDBOX\")"
      },
      {
        "sha": "c5af10430c1f94cd173da843157739ddb648aee7",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -170,6 +170,7 @@\n     'rpc_users.py',\n     'rpc_whitelist.py',\n     'feature_proxy.py',\n+    'feature_syscall_sandbox.py',\n     'rpc_signrawtransaction.py --legacy-wallet',\n     'rpc_signrawtransaction.py --descriptors',\n     'rpc_rawtransaction.py --legacy-wallet',"
      },
      {
        "sha": "c6c1cc8784013c2da0d8cc7eb1da7691f82ccb74",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4747da3a5b639b5a336b737e7e3cbf060cf2efcf/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=4747da3a5b639b5a336b737e7e3cbf060cf2efcf",
        "patch": "@@ -27,6 +27,9 @@ def mock_signer_path(self):\n \n     def set_test_params(self):\n         self.num_nodes = 2\n+        # The experimental syscall sandbox feature (-sandbox) is not compatible with -signer (which\n+        # invokes execve).\n+        self.disable_syscall_sandbox = True\n \n         self.extra_args = [\n             [],"
      }
    ]
  }
]