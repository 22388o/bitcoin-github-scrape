[
  {
    "sha": "c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzNiYTIzZWI1MWU4Y2M4NzA0NjQ1NDg2ZjljYTViNTA0OTBiMGM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-15T16:49:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-18T21:42:07Z"
      },
      "message": "gettransaction RPC for non-wallet transactions\n\nWorks for wallet transactions, memory-pool transaction and block chain\ntransactions.\n\nAvailable for all:\n * txid\n * version\n * locktime\n * size\n * coinbase/inputs/outputs\n * confirmations\n\nAvailable only for wallet transactions:\n * amount\n * fee\n * details\n * blockindex\n\nAvailable for wallet transactions and block chain transactions:\n * blockhash\n * time",
      "tree": {
        "sha": "67dec29650d85fb32949de19a901911b121f0f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67dec29650d85fb32949de19a901911b121f0f56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac4161e25df2a9475abb0f62d32a7d86d6baff0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac4161e25df2a9475abb0f62d32a7d86d6baff0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac4161e25df2a9475abb0f62d32a7d86d6baff0f"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 107,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e6c7826a8388e1e178a450216dc867d20d9f86f4",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 14,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
        "patch": "@@ -130,6 +130,40 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n+void TxToJSON(const CTransaction &tx, Object& entry)\n+{\n+    entry.push_back(Pair(\"version\", tx.nVersion));\n+    entry.push_back(Pair(\"locktime\", (boost::int64_t)tx.nLockTime));\n+    entry.push_back(Pair(\"size\", (boost::int64_t)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)));\n+    Array vin;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        Object in;\n+        if (tx.IsCoinBase())\n+            in.push_back(Pair(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+        else\n+        {\n+            Object prevout;\n+            prevout.push_back(Pair(\"hash\", txin.prevout.hash.GetHex()));\n+            prevout.push_back(Pair(\"n\", (boost::int64_t)txin.prevout.n));\n+            in.push_back(Pair(\"prevout\", prevout));\n+            in.push_back(Pair(\"scriptSig\", txin.scriptSig.ToString()));\n+        }\n+        in.push_back(Pair(\"sequence\", (boost::int64_t)txin.nSequence));\n+        vin.push_back(in);\n+    }\n+    entry.push_back(Pair(\"vin\", vin));\n+    Array vout;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        Object out;\n+        out.push_back(Pair(\"value\", ValueFromAmount(txout.nValue)));\n+        out.push_back(Pair(\"scriptPubKey\", txout.scriptPubKey.ToString()));\n+        vout.push_back(out);\n+    }\n+    entry.push_back(Pair(\"vout\", vout));\n+}\n+\n string AccountFromValue(const Value& value)\n {\n     string strAccount = value.get_str();\n@@ -1472,24 +1506,57 @@ Value gettransaction(const Array& params, bool fHelp)\n \n     Object entry;\n \n-    if (!pwalletMain->mapWallet.count(hash))\n-        throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n-    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    if (pwalletMain->mapWallet.count(hash))\n+    {\n+        const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+        TxToJSON(wtx, entry);\n \n-    int64 nCredit = wtx.GetCredit();\n-    int64 nDebit = wtx.GetDebit();\n-    int64 nNet = nCredit - nDebit;\n-    int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+        int64 nCredit = wtx.GetCredit();\n+        int64 nDebit = wtx.GetDebit();\n+        int64 nNet = nCredit - nDebit;\n+        int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n-    if (wtx.IsFromMe())\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+        if (wtx.IsFromMe())\n+            entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n \n-    WalletTxToJSON(pwalletMain->mapWallet[hash], entry);\n+        WalletTxToJSON(wtx, entry);\n \n-    Array details;\n-    ListTransactions(pwalletMain->mapWallet[hash], \"*\", 0, false, details);\n-    entry.push_back(Pair(\"details\", details));\n+        Array details;\n+        ListTransactions(pwalletMain->mapWallet[hash], \"*\", 0, false, details);\n+        entry.push_back(Pair(\"details\", details));\n+    }\n+    else\n+    {\n+        CTransaction tx;\n+        uint256 hashBlock = 0;\n+        if (GetTransaction(hash, tx, hashBlock))\n+        {\n+            entry.push_back(Pair(\"txid\", hash.GetHex()));\n+            TxToJSON(tx, entry);\n+            if (hashBlock == 0)\n+                entry.push_back(Pair(\"confirmations\", 0));\n+            else\n+            {\n+                entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+                if (mi != mapBlockIndex.end() && (*mi).second)\n+                {\n+                    CBlockIndex* pindex = (*mi).second;\n+                    if (pindex->IsInMainChain())\n+                    {\n+                        entry.push_back(Pair(\"confirmations\", 1 + nBestHeight - pindex->nHeight));\n+                        entry.push_back(Pair(\"time\", (boost::int64_t)pindex->nTime));\n+                    }\n+                    else\n+                        entry.push_back(Pair(\"confirmations\", 0));\n+                }\n+            }\n+        }\n+        else\n+            throw JSONRPCError(-5, \"No information available about transaction\");\n+    }\n \n     return entry;\n }"
      },
      {
        "sha": "de54606714cf17197c5a42338c8c8b7c63413e66",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
        "patch": "@@ -733,7 +733,31 @@ int CTxIndex::GetDepthInMainChain() const\n     return 1 + nBestHeight - pindex->nHeight;\n }\n \n-\n+// Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\n+bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock)\n+{\n+    {\n+        LOCK(cs_main);\n+        {\n+            LOCK(mempool.cs);\n+            if (mempool.exists(hash))\n+            {\n+                tx = mempool.lookup(hash);\n+                return true;\n+            }\n+        }\n+        CTxDB txdb(\"r\");\n+        CTxIndex txindex;\n+        if (tx.ReadFromDisk(txdb, COutPoint(hash, 0), txindex))\n+        {\n+            CBlock block;\n+            if (block.ReadFromDisk(txindex.pos.nFile, txindex.pos.nBlockPos, false))\n+                hashBlock = block.GetHash();\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n \n "
      },
      {
        "sha": "d26e6316e1a30c7bc28e20fb33cfbe566a9285f9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c73ba23eb51e8cc8704645486f9ca5b50490b0c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c73ba23eb51e8cc8704645486f9ca5b50490b0c9",
        "patch": "@@ -101,7 +101,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n int GetNumBlocksOfPeers();\n bool IsInitialBlockDownload();\n std::string GetWarnings(std::string strFor);\n-\n+bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock);\n \n \n "
      }
    ]
  }
]