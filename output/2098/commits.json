[
  {
    "sha": "3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTE3YjMxZjVhZDRjNTNlMmQ1MzJlNzFiZmFhOTdmZTA4MWZiYjAx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-12-12T18:49:10Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-12-12T18:49:10Z"
      },
      "message": "add Windows specific optimization to pre-alloc block/undo files\n\n- add AllocateFileRangeWin(), which is used to pre-allocate block/undo files\n  as a single contignous chunk on disk, so these files are not fragmented\n  (current master has 95 - 409 fragments for such files, this patch\n  reduces all those to 1 fragment)\n\n- add GetBlockFile() and GetUndoFile() helper functions, which are a\n  wrapper for GetDiskFile(), which caches the last used file (separate\n  cache for the last block and undo file)",
      "tree": {
        "sha": "56920b443875b2a7589faf401759b7fee11fe32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56920b443875b2a7589faf401759b7fee11fe32e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "51dc438942e5bb8fd8abf94a457d7e99f4417ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51dc438942e5bb8fd8abf94a457d7e99f4417ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51dc438942e5bb8fd8abf94a457d7e99f4417ee4"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 90,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dbf61ca2208c5de126d0ebfbb17b5596e46412a6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
        "patch": "@@ -1942,6 +1942,15 @@ bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeigh\n         unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n         unsigned int nNewChunks = (infoLastBlockFile.nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n         if (nNewChunks > nOldChunks) {\n+#ifdef WIN32\n+            if (CheckDiskSpace(MAX_BLOCKFILE_SIZE)) {\n+                // Windows directly needs the maximum size of a blockfile to allocate disk space as a single contignous chunk\n+                if (AllocateFileRangeWin(GetBlockFile(pos), MAX_BLOCKFILE_SIZE))\n+                    printf(\"FindBlockPos() : Pre-allocated %u bytes for new block file %s\\n\", MAX_BLOCKFILE_SIZE, GetBlockFile(pos).c_str());\n+                else\n+                    return error(\"FindBlockPos() : Failed to create new undo file\");\n+            }\n+#else\n             if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n                 FILE *file = OpenBlockFile(pos);\n                 if (file) {\n@@ -1950,6 +1959,7 @@ bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeigh\n                     fclose(file);\n                 }\n             }\n+#endif\n             else\n                 return error(\"FindBlockPos() : out of disk space\");\n         }\n@@ -1988,6 +1998,15 @@ bool FindUndoPos(int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n     unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n     unsigned int nNewChunks = (nNewSize + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n     if (nNewChunks > nOldChunks) {\n+#ifdef WIN32\n+        if (CheckDiskSpace(MAX_BLOCKFILE_SIZE)) {\n+            // Windows directly needs the maximum size of a blockfile to allocate disk space as a single contignous chunk\n+            if (AllocateFileRangeWin(GetUndoFile(pos), MAX_BLOCKFILE_SIZE))\n+                printf(\"FindUndoPos() : Pre-allocated %u bytes for new undo file %s\\n\", MAX_BLOCKFILE_SIZE, GetUndoFile(pos).c_str());\n+            else\n+                return error(\"FindUndoPos() : Failed to create new undo file\");\n+        }\n+#else\n         if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n             FILE *file = OpenUndoFile(pos);\n             if (file) {\n@@ -1996,6 +2015,7 @@ bool FindUndoPos(int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n                 fclose(file);\n             }\n         }\n+#endif\n         else\n             return error(\"FindUndoPos() : out of disk space\");\n     }\n@@ -2294,10 +2314,42 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"blk\", fReadOnly);\n }\n \n-FILE *OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n+const std::string& GetDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fIsUndoFile)\n+{\n+    if (pos.IsNull())\n+        printf(\"GetDiskFile() : Error, pos.IsNull() was true\\n\");\n+\n+    static std::string strPathCached[2];\n+    static int nFileCached[2] = {-1, -1};\n+    int nFileCur = pos.nFile;\n+\n+    if (nFileCached[fIsUndoFile] == nFileCur)\n+        return strPathCached[fIsUndoFile];\n+    else {\n+        boost::filesystem::path pathDiskFile = GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, nFileCur);\n+        boost::filesystem::create_directories(pathDiskFile.parent_path());\n+\n+        strPathCached[fIsUndoFile] = pathDiskFile.string();\n+        nFileCached[fIsUndoFile] = nFileCur;\n+    }\n+\n+    return strPathCached[fIsUndoFile];\n+}\n+\n+const std::string& GetBlockFile(const CDiskBlockPos &pos)\n+{\n+    return GetDiskFile(pos, \"blk\", false);\n+}\n+\n+const std::string& GetUndoFile(const CDiskBlockPos &pos)\n+{\n+    return GetDiskFile(pos, \"rev\", true);\n+}\n+\n CBlockIndex * InsertBlockIndex(uint256 hash)\n {\n     if (hash == 0)"
      },
      {
        "sha": "05cdd716ef7b3050a119d7e477f351b3341ce152",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
        "patch": "@@ -117,11 +117,15 @@ void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock*\n /** Process an incoming block */\n bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n+bool CheckDiskSpace(uint64 nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Open an undo file (rev?????.dat) */\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+/** Get full path for the block file referenced by pos */\n+const std::string& GetBlockFile(const CDiskBlockPos &pos);\n+/** Get full path for the undo file referenced by pos */\n+const std::string& GetUndoFile(const CDiskBlockPos &pos);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Load the block tree and coins database from disk */"
      },
      {
        "sha": "aa1bd19005b42a718ffc4568c8d550bc3727de3a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
        "patch": "@@ -1151,6 +1151,35 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n     }\n }\n \n+#ifdef WIN32\n+bool AllocateFileRangeWin(const std::string& strFile, unsigned int nLength)\n+{\n+    boost::filesystem::path pathFile = strFile;\n+    HANDLE hFile;\n+\n+    // only pre-allocate disk space, if the file does not yet exist\n+    if (!boost::filesystem::exists(pathFile)) {\n+        // get handle for new file\n+        hFile = CreateFileA(pathFile.string().c_str(), GENERIC_READ | GENERIC_WRITE, 0, 0, CREATE_ALWAYS, FILE_FLAG_SEQUENTIAL_SCAN, NULL);\n+        if (hFile == INVALID_HANDLE_VALUE)\n+            return false;\n+\n+        // no need to check for errors in that block, as this function is allowed to fail anyway\n+        LARGE_INTEGER nFileSize;\n+        nFileSize.u.LowPart = nLength; // LowPart allows up to 4095MB\n+        nFileSize.u.HighPart = 0; // HighPart starts with 4096MB\n+        SetFilePointerEx(hFile, nFileSize, 0, FILE_BEGIN);\n+        SetEndOfFile(hFile);\n+        SetFilePointer(hFile, 0, 0, FILE_BEGIN);\n+        FlushFileBuffers(hFile);\n+        CloseHandle(hFile);\n+    }\n+\n+    // true only signals the file already existed or we created it\n+    return true;\n+}\n+#endif\n+\n void ShrinkDebugFile()\n {\n     // Scroll debug.log if it's getting too big"
      },
      {
        "sha": "862fd96b54251599de439795c6d3288922c57cd5",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3917b31f5ad4c53e2d532e71bfaa97fe081fbb01/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3917b31f5ad4c53e2d532e71bfaa97fe081fbb01",
        "patch": "@@ -197,6 +197,9 @@ bool WildcardMatch(const std::string& str, const std::string& mask);\n void FileCommit(FILE *fileout);\n int GetFilesize(FILE* file);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n+#ifdef WIN32\n+bool AllocateFileRangeWin(const std::string& strFile, unsigned int nLength);\n+#endif\n bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);"
      }
    ]
  }
]