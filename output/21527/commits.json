[
  {
    "sha": "0841b9265f16c389a6610ada0100adaa052b0745",
    "node_id": "C_kwDOABII59oAKDA4NDFiOTI2NWYxNmMzODlhNjYxMGFkYTAxMDBhZGFhMDUyYjA3NDU",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-04-29T09:14:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T09:56:46Z"
      },
      "message": "Remove unnecessary includes of txorphanage.h",
      "tree": {
        "sha": "02556aeb10335686ffcdd63438b1af321c2781b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02556aeb10335686ffcdd63438b1af321c2781b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0841b9265f16c389a6610ada0100adaa052b0745",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0841b9265f16c389a6610ada0100adaa052b0745",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0841b9265f16c389a6610ada0100adaa052b0745",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0841b9265f16c389a6610ada0100adaa052b0745/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a90186496aea8025316bc5616905ffcf1aeb29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a90186496aea8025316bc5616905ffcf1aeb29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a90186496aea8025316bc5616905ffcf1aeb29"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "01940e0fc322df8c5082899a041b881acc742cfc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0841b9265f16c389a6610ada0100adaa052b0745/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0841b9265f16c389a6610ada0100adaa052b0745/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0841b9265f16c389a6610ada0100adaa052b0745",
        "patch": "@@ -55,7 +55,6 @@\n #include <torcontrol.h>\n #include <txdb.h>\n #include <txmempool.h>\n-#include <txorphanage.h>\n #include <util/asmap.h>\n #include <util/check.h>\n #include <util/moneystr.h>"
      },
      {
        "sha": "5a71b25768370c7b71f16bdb4607c98fab0bbde4",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0841b9265f16c389a6610ada0100adaa052b0745/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0841b9265f16c389a6610ada0100adaa052b0745/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=0841b9265f16c389a6610ada0100adaa052b0745",
        "patch": "@@ -18,7 +18,6 @@\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n-#include <txorphanage.h>\n #include <validationinterface.h>\n #include <version.h>\n "
      },
      {
        "sha": "f8b1c8fc90d0fdab155b502089512928729f8194",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0841b9265f16c389a6610ada0100adaa052b0745/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0841b9265f16c389a6610ada0100adaa052b0745/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=0841b9265f16c389a6610ada0100adaa052b0745",
        "patch": "@@ -13,7 +13,6 @@\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n #include <test/util/validation.h>\n-#include <txorphanage.h>\n #include <validation.h>\n #include <validationinterface.h>\n "
      }
    ]
  },
  {
    "sha": "5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
    "node_id": "C_kwDOABII59oAKDVlOGM1Mjc2OWRjYjdjOGUzYWI3YjljZWE3OWRmYjliZWFhMmE4OWE",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-20T05:10:36Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T09:56:46Z"
      },
      "message": "net_processing: add m_mutex_message_handling\n\nSince message handling is single threaded, this can simplify\nguarding any variables only accessed during message handling.",
      "tree": {
        "sha": "4073f7013a1bd13c6d325f7eb4082d2ac5ce269e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4073f7013a1bd13c6d325f7eb4082d2ac5ce269e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0841b9265f16c389a6610ada0100adaa052b0745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0841b9265f16c389a6610ada0100adaa052b0745",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0841b9265f16c389a6610ada0100adaa052b0745"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b2ac534be00fee1128816710bda7ae0d3a4a4b72",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
        "patch": "@@ -319,9 +319,20 @@ class PeerManagerImpl final : public PeerManager\n     void SetBestHeight(int height) override { m_best_height = height; };\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) override;\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) override LOCKS_EXCLUDED(m_mutex_message_handling);\n \n private:\n+    /** Message handling mutex.\n+     *  Message processing is single-threaded, so anything only accessed\n+     *  by ProcessMessage(s) or SendMessages can be guarded by this mutex,\n+     *  which guarantees it's only accessed by a single thread.\n+     */\n+    Mutex m_mutex_message_handling;\n+\n+    void _ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc)\n+        EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling);\n+\n     void _RelayTransaction(const uint256& txid, const uint256& wtxid)\n         EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -2486,6 +2497,14 @@ void PeerManagerImpl::ProcessBlock(CNode& node, const std::shared_ptr<const CBlo\n void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                                      const std::chrono::microseconds time_received,\n                                      const std::atomic<bool>& interruptMsgProc)\n+{\n+    LOCK(m_mutex_message_handling);\n+    return _ProcessMessage(pfrom, msg_type, vRecv, time_received, interruptMsgProc);\n+}\n+\n+void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                                     const std::chrono::microseconds time_received,\n+                                     const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom.GetId());\n \n@@ -3583,7 +3602,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         } // cs_main\n \n         if (fProcessBLOCKTXN) {\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, time_received, interruptMsgProc);\n+            return _ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, time_received, interruptMsgProc);\n         }\n \n         if (fRevertToHeaderProcessing) {\n@@ -4054,6 +4073,8 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     PeerRef peer = GetPeerRef(pfrom->GetId());\n     if (peer == nullptr) return false;\n \n+    LOCK(m_mutex_message_handling);\n+\n     {\n         LOCK(peer->m_getdata_requests_mutex);\n         if (!peer->m_getdata_requests.empty()) {\n@@ -4118,7 +4139,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     unsigned int nMessageSize = msg.m_message_size;\n \n     try {\n-        ProcessMessage(*pfrom, msg_type, msg.m_recv, msg.m_time, interruptMsgProc);\n+        _ProcessMessage(*pfrom, msg_type, msg.m_recv, msg.m_time, interruptMsgProc);\n         if (interruptMsgProc) return false;\n         {\n             LOCK(peer->m_getdata_requests_mutex);\n@@ -4509,6 +4530,8 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     if (!peer) return false;\n     const Consensus::Params& consensusParams = m_chainparams.GetConsensus();\n \n+    LOCK(m_mutex_message_handling);\n+\n     // We must call MaybeDiscourageAndDisconnect first, to ensure that we'll\n     // disconnect misbehaving peers even before the version handshake is complete.\n     if (MaybeDiscourageAndDisconnect(*pto, *peer)) return true;"
      }
    ]
  },
  {
    "sha": "e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
    "node_id": "C_kwDOABII59oAKGUyMmNiZDJhZDYwZTZkYWY2MTI0ZjA2MjkyYmEwYzhkMzQ3Y2VhZmY",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-20T05:49:48Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T09:56:46Z"
      },
      "message": "net: drop cs_sendProcessing\n\nSendMessages() is now protected internally by m_mutex_message_handling;\nso this additional lock is not useful.",
      "tree": {
        "sha": "8f404e7971cfd8228fd4157c34eebdad3241ae24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f404e7971cfd8228fd4157c34eebdad3241ae24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e8c52769dcb7c8e3ab7b9cea79dfb9beaa2a89a"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 13,
      "deletions": 48
    },
    "files": [
      {
        "sha": "fbd8aa43d1c9af0e0b05d6b71a1296d39b18f2d3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -2254,10 +2254,7 @@ void CConnman::ThreadMessageHandler()\n             if (flagInterruptMsgProc)\n                 return;\n             // Send messages\n-            {\n-                LOCK(pnode->cs_sendProcessing);\n-                m_msgproc->SendMessages(pnode);\n-            }\n+            m_msgproc->SendMessages(pnode);\n \n             if (flagInterruptMsgProc)\n                 return;"
      },
      {
        "sha": "b76f08aa0fc59dffcf9f42d62873123b41d561a6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -416,8 +416,6 @@ class CNode\n     std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n-    RecursiveMutex cs_sendProcessing;\n-\n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n \n     std::atomic<int64_t> nLastSend{0};\n@@ -726,7 +724,7 @@ class NetEventsInterface\n     * @param[in]   pnode           The node which we are sending messages to.\n     * @return                      True if there is more work to be done\n     */\n-    virtual bool SendMessages(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_sendProcessing) = 0;\n+    virtual bool SendMessages(CNode* pnode) = 0;\n \n \n protected:"
      },
      {
        "sha": "c248f5a1389c0e44d29b85bd17f854a1ad04813f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -307,7 +307,7 @@ class PeerManagerImpl final : public PeerManager\n     void InitializeNode(CNode* pnode) override;\n     void FinalizeNode(const CNode& node) override;\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n+    bool SendMessages(CNode* pto) override;\n \n     /** Implement PeerManager */\n     void StartScheduledTasks(CScheduler& scheduler) override;"
      },
      {
        "sha": "0c7494a3bff11defdbba8480aaa2825ec8401944",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 32,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -73,10 +73,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     }\n \n     // Test starts here\n-    {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     {\n         LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n@@ -86,20 +83,14 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     int64_t nStartTime = GetTime();\n     // Wait 21 minutes\n     SetMockTime(nStartTime+21*60);\n-    {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     {\n         LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     }\n     // Wait 3 more minutes\n     SetMockTime(nStartTime+24*60);\n-    {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n \n     peerLogic->FinalizeNode(dummyNode1);\n@@ -220,10 +211,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[0]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[0]);\n     peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n-    {\n-        LOCK(nodes[0]->cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n     BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n@@ -236,21 +224,15 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[1]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[1]);\n     peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n-    {\n-        LOCK(nodes[1]->cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     // [0] is still discouraged/disconnected.\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n     BOOST_CHECK(nodes[0]->fDisconnect);\n     // [1] is not discouraged/disconnected yet.\n     BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n     BOOST_CHECK(!nodes[1]->fDisconnect);\n     peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n-    {\n-        LOCK(nodes[1]->cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     // Expect both [0] and [1] to be discouraged/disconnected now.\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n     BOOST_CHECK(nodes[0]->fDisconnect);\n@@ -267,10 +249,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[2]->fSuccessfullyConnected = true;\n     connman->AddTestNode(*nodes[2]);\n     peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n-    {\n-        LOCK(nodes[2]->cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n     BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n     BOOST_CHECK(banman->IsDiscouraged(addr[2]));\n@@ -303,10 +282,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.fSuccessfullyConnected = true;\n \n     peerLogic->Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n-    {\n-        LOCK(dummyNode.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n-    }\n+    BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     BOOST_CHECK(banman->IsDiscouraged(addr));\n \n     peerLogic->FinalizeNode(dummyNode);"
      },
      {
        "sha": "1ca5bc1cfe4347350d3cb99e38b8e8de17892197",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -94,10 +94,7 @@ void fuzz_target(FuzzBufferType buffer, const std::string& LIMIT_TO_MESSAGE_TYPE\n                                                 GetTime<std::chrono::microseconds>(), std::atomic<bool>{false});\n     } catch (const std::ios_base::failure&) {\n     }\n-    {\n-        LOCK(p2p_node.cs_sendProcessing);\n-        g_setup->m_node.peerman->SendMessages(&p2p_node);\n-    }\n+    g_setup->m_node.peerman->SendMessages(&p2p_node);\n     SyncWithValidationInterfaceQueue();\n     g_setup->m_node.connman->StopNodes();\n }"
      },
      {
        "sha": "145665225aec8a641bea42827e21fb81a62551d5",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "patch": "@@ -73,10 +73,7 @@ FUZZ_TARGET_INIT(process_messages, initialize_process_messages)\n             connman.ProcessMessagesOnce(random_node);\n         } catch (const std::ios_base::failure&) {\n         }\n-        {\n-            LOCK(random_node.cs_sendProcessing);\n-            g_setup->m_node.peerman->SendMessages(&random_node);\n-        }\n+        g_setup->m_node.peerman->SendMessages(&random_node);\n     }\n     SyncWithValidationInterfaceQueue();\n     g_setup->m_node.connman->StopNodes();"
      }
    ]
  },
  {
    "sha": "9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
    "node_id": "C_kwDOABII59oAKDlmNjYwODU3ZDE5ZTllM2Y1ODNjYTNiODNjNGM0ZTU2YTY4OTZkNTM",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-20T05:15:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T09:56:46Z"
      },
      "message": "net_processing: extra transactions are only dealt with during message handling\n\nPreviously vExtraTxnForCompact and vExtraTxnForCompactIt were protected\nby g_cs_orphans; protect them instead by m_mutex_message_handling since\nthey're only used by message handling.",
      "tree": {
        "sha": "ee82630906351204e5699a07fb3690257b547d2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee82630906351204e5699a07fb3690257b547d2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f660857d19e9e3f583ca3b83c4c4e56a6896d53/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e22cbd2ad60e6daf6124f06292ba0c8d347ceaff"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2631af3aa248715534eb245bf1e5789308623781",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f660857d19e9e3f583ca3b83c4c4e56a6896d53/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f660857d19e9e3f583ca3b83c4c4e56a6896d53/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
        "patch": "@@ -381,7 +381,7 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                                const std::vector<CBlockHeader>& headers,\n@@ -584,14 +584,14 @@ class PeerManagerImpl final : public PeerManager\n     /** Storage for orphan information */\n     TxOrphanage m_orphanage;\n \n-    void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling);\n \n     /** Orphan/conflicted/etc transactions that are kept for compact block reconstruction.\n      *  The last -blockreconstructionextratxn/DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN of\n      *  these are kept in a ring buffer */\n-    std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n+    std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(m_mutex_message_handling);\n     /** Offset into vExtraTxnForCompact to insert the next tx */\n-    size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n+    size_t vExtraTxnForCompactIt GUARDED_BY(m_mutex_message_handling) = 0;\n \n     /** Check whether the last unknown block a peer advertised is not yet known. */\n     void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -1318,6 +1318,8 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n+    AssertLockHeld(m_mutex_message_handling);\n+\n     size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n@@ -2243,6 +2245,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n  */\n void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n {\n+    AssertLockHeld(m_mutex_message_handling);\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n \n@@ -2506,6 +2509,8 @@ void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                                      const std::chrono::microseconds time_received,\n                                      const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockHeld(m_mutex_message_handling);\n+\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom.GetId());\n \n     PeerRef peer = GetPeerRef(pfrom.GetId());"
      }
    ]
  },
  {
    "sha": "5c87cfd87b4226543d61610a4c613dd10c29daf3",
    "node_id": "C_kwDOABII59oAKDVjODdjZmQ4N2I0MjI2NTQzZDYxNjEwYTRjNjEzZGQxMGMyOWRhZjM",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-24T07:32:51Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T09:56:46Z"
      },
      "message": "net_processing: Pass a Peer to ProcessOrphanTx",
      "tree": {
        "sha": "3b2cebc49373184567aa0b4b1bcb5975668b6286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b2cebc49373184567aa0b4b1bcb5975668b6286"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c87cfd87b4226543d61610a4c613dd10c29daf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c87cfd87b4226543d61610a4c613dd10c29daf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c87cfd87b4226543d61610a4c613dd10c29daf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c87cfd87b4226543d61610a4c613dd10c29daf3/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f660857d19e9e3f583ca3b83c4c4e56a6896d53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f660857d19e9e3f583ca3b83c4c4e56a6896d53"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "18c84cc1c54b7e50b8a37035d5eda1748d62c661",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c87cfd87b4226543d61610a4c613dd10c29daf3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c87cfd87b4226543d61610a4c613dd10c29daf3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5c87cfd87b4226543d61610a4c613dd10c29daf3",
        "patch": "@@ -381,7 +381,7 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n+    void ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                                const std::vector<CBlockHeader>& headers,\n@@ -2238,20 +2238,20 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n /**\n  * Reconsider orphan transactions after a parent has been accepted to the mempool.\n  *\n- * @param[in,out]  orphan_work_set  The set of orphan transactions to reconsider. Generally only one\n- *                                  orphan will be reconsidered on each call of this function. This set\n- *                                  may be added to if accepting an orphan causes its children to be\n- *                                  reconsidered.\n+ * @param[in]  peer             The peer whose orphan transactions we will reconsider. Generally only one\n+ *                              orphan will be reconsidered on each call of this function. This peer's set\n+ *                              may be added to if accepting an orphan causes its children to be\n+ *                              reconsidered.\n  */\n-void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n+void PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n {\n     AssertLockHeld(m_mutex_message_handling);\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n \n-    while (!orphan_work_set.empty()) {\n-        const uint256 orphanHash = *orphan_work_set.begin();\n-        orphan_work_set.erase(orphan_work_set.begin());\n+    while (!peer.m_orphan_work_set.empty()) {\n+        const uint256 orphanHash = *peer.m_orphan_work_set.begin();\n+        peer.m_orphan_work_set.erase(peer.m_orphan_work_set.begin());\n \n         const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n         if (porphanTx == nullptr) continue;\n@@ -2262,7 +2262,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             _RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n-            m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n+            m_orphanage.AddChildrenToWorkSet(*porphanTx, peer.m_orphan_work_set);\n             m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n@@ -3308,7 +3308,7 @@ void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             }\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(peer->m_orphan_work_set);\n+            ProcessOrphanTx(*peer);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -4090,7 +4090,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     {\n         LOCK2(cs_main, g_cs_orphans);\n         if (!peer->m_orphan_work_set.empty()) {\n-            ProcessOrphanTx(peer->m_orphan_work_set);\n+            ProcessOrphanTx(*peer);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "453c665e4a72c763d76c8865442a72a8dac059cf",
    "node_id": "C_kwDOABII59oAKDQ1M2M2NjVlNGE3MmM3NjNkNzZjODg2NTQ0MmE3MmE4ZGFjMDU5Y2Y",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-24T08:07:26Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:25Z"
      },
      "message": "net_processing: Localise orphan_work_set handling to ProcessOrphanTx",
      "tree": {
        "sha": "0bc507c4dc91fb181d98721b0a7559eec2ae585b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bc507c4dc91fb181d98721b0a7559eec2ae585b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/453c665e4a72c763d76c8865442a72a8dac059cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c665e4a72c763d76c8865442a72a8dac059cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/453c665e4a72c763d76c8865442a72a8dac059cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c665e4a72c763d76c8865442a72a8dac059cf/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c87cfd87b4226543d61610a4c613dd10c29daf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c87cfd87b4226543d61610a4c613dd10c29daf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c87cfd87b4226543d61610a4c613dd10c29daf3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 23,
      "deletions": 17
    },
    "files": [
      {
        "sha": "908c804b6a23e9689879c5fca7cb5575daa692c8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 17,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453c665e4a72c763d76c8865442a72a8dac059cf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453c665e4a72c763d76c8865442a72a8dac059cf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=453c665e4a72c763d76c8865442a72a8dac059cf",
        "patch": "@@ -381,7 +381,17 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n-    void ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n+    /**\n+     * Reconsider orphan transactions after a parent has been accepted to the mempool.\n+     *\n+     * @param[in]  peer       The peer whose orphan transactions we will reconsider. Generally only one\n+     *                        orphan will be reconsidered on each call of this function. This peer's set\n+     *                        may be added to if accepting an orphan causes its children to be\n+     *                        reconsidered.\n+     * @return                True if there are still orphans in this peer's work set\n+     */\n+    bool ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n+\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                                const std::vector<CBlockHeader>& headers,\n@@ -2235,20 +2245,14 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n     return;\n }\n \n-/**\n- * Reconsider orphan transactions after a parent has been accepted to the mempool.\n- *\n- * @param[in]  peer             The peer whose orphan transactions we will reconsider. Generally only one\n- *                              orphan will be reconsidered on each call of this function. This peer's set\n- *                              may be added to if accepting an orphan causes its children to be\n- *                              reconsidered.\n- */\n-void PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n+bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n {\n     AssertLockHeld(m_mutex_message_handling);\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n \n+    if (peer.m_orphan_work_set.empty()) return false;\n+\n     while (!peer.m_orphan_work_set.empty()) {\n         const uint256 orphanHash = *peer.m_orphan_work_set.begin();\n         peer.m_orphan_work_set.erase(peer.m_orphan_work_set.begin());\n@@ -2315,6 +2319,8 @@ void PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n     }\n     CChainState& active_chainstate = m_chainman.ActiveChainstate();\n     m_mempool.check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n+\n+    return !peer.m_orphan_work_set.empty();\n }\n \n bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n@@ -4089,8 +4095,13 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n \n     {\n         LOCK2(cs_main, g_cs_orphans);\n-        if (!peer->m_orphan_work_set.empty()) {\n-            ProcessOrphanTx(*peer);\n+        if (ProcessOrphanTx(*peer)) {\n+            // If there are more orphans to process, return early,\n+            // so that all the orphans are processed before work\n+            // is started on newer messages.\n+            // Don't indicate that there's more work if we're\n+            // disconnecting.\n+            return !pfrom->fDisconnect;\n         }\n     }\n \n@@ -4104,11 +4115,6 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n         if (!peer->m_getdata_requests.empty()) return true;\n     }\n \n-    {\n-        LOCK(g_cs_orphans);\n-        if (!peer->m_orphan_work_set.empty()) return true;\n-    }\n-\n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend) return false;\n "
      }
    ]
  },
  {
    "sha": "2c3583563aef76ae74e121cf5ac92c8c52c63385",
    "node_id": "C_kwDOABII59oAKDJjMzU4MzU2M2FlZjc2YWU3NGUxMjFjZjVhYzkyYzhjNTJjNjMzODU",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-24T14:03:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:27Z"
      },
      "message": "txorphange/net_processing: move orphan workset to txorphanage",
      "tree": {
        "sha": "77a4c1043e4ea45c7647eaa71d4987f1bec6afdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77a4c1043e4ea45c7647eaa71d4987f1bec6afdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c3583563aef76ae74e121cf5ac92c8c52c63385",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3583563aef76ae74e121cf5ac92c8c52c63385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c3583563aef76ae74e121cf5ac92c8c52c63385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3583563aef76ae74e121cf5ac92c8c52c63385/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "453c665e4a72c763d76c8865442a72a8dac059cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c665e4a72c763d76c8865442a72a8dac059cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/453c665e4a72c763d76c8865442a72a8dac059cf"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "d4801a432572806a61406a8c0969da26e6a98409",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2c3583563aef76ae74e121cf5ac92c8c52c63385",
        "patch": "@@ -274,9 +274,6 @@ struct Peer {\n     /** Total number of addresses that were processed (excludes rate-limited ones). */\n     std::atomic<uint64_t> m_addr_processed{0};\n \n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n     /** Protects m_getdata_requests **/\n     Mutex m_getdata_requests_mutex;\n     /** Work queue of items requested by this peer **/\n@@ -2251,11 +2248,14 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n \n-    if (peer.m_orphan_work_set.empty()) return false;\n+    auto work_set_it = m_orphanage.m_peer_work_set.find(peer.m_id);\n+    if (work_set_it == m_orphanage.m_peer_work_set.end()) return false;\n+\n+    std::set<uint256>& orphan_work_set = work_set_it->second;\n \n-    while (!peer.m_orphan_work_set.empty()) {\n-        const uint256 orphanHash = *peer.m_orphan_work_set.begin();\n-        peer.m_orphan_work_set.erase(peer.m_orphan_work_set.begin());\n+    while (!orphan_work_set.empty()) {\n+        const uint256 orphanHash = *orphan_work_set.begin();\n+        orphan_work_set.erase(orphan_work_set.begin());\n \n         const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n         if (porphanTx == nullptr) continue;\n@@ -2266,7 +2266,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             _RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n-            m_orphanage.AddChildrenToWorkSet(*porphanTx, peer.m_orphan_work_set);\n+            m_orphanage.AddChildrenToWorkSet(*porphanTx, peer.m_id);\n             m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n                 AddToCompactExtraTransactions(removedTx);\n@@ -2320,7 +2320,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n     CChainState& active_chainstate = m_chainman.ActiveChainstate();\n     m_mempool.check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n \n-    return !peer.m_orphan_work_set.empty();\n+    return !orphan_work_set.empty();\n }\n \n bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n@@ -3300,7 +3300,7 @@ void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n             _RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n-            m_orphanage.AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n+            m_orphanage.AddChildrenToWorkSet(tx, peer->m_id);\n \n             pfrom.nLastTXTime = GetTime();\n "
      },
      {
        "sha": "03b99efb8367903f2534e552bc8429e0886747be",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=2c3583563aef76ae74e121cf5ac92c8c52c63385",
        "patch": "@@ -89,7 +89,10 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n {\n     AssertLockHeld(g_cs_orphans);\n \n+    m_peer_work_set.erase(peer);\n+\n     int nErased = 0;\n+\n     std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n@@ -99,7 +102,7 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n             nErased += EraseTx(maybeErase->second.tx->GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx for peer=%d\\n\", nErased, peer);\n }\n \n unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n@@ -138,9 +141,13 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n     return nEvicted;\n }\n \n-void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, NodeId peer)\n {\n     AssertLockHeld(g_cs_orphans);\n+\n+    // Get this peer's work set, emplacing an empty set it didn't exist\n+    std::set<uint256>& orphan_work_set = m_peer_work_set.try_emplace(peer).first->second;\n+\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {"
      },
      {
        "sha": "f94f6e41b13700f074b776ccf994f85912bde182",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c3583563aef76ae74e121cf5ac92c8c52c63385/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=2c3583563aef76ae74e121cf5ac92c8c52c63385",
        "patch": "@@ -43,9 +43,11 @@ class TxOrphanage {\n     /** Limit the orphanage to the given maximum */\n     unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-    /** Add any orphans that list a particular tx as a parent into a peer's work set\n-     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n-    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Which peer provided a parent tx of orphans that need to be reconsidered */\n+    std::map<NodeId, std::set<uint256>> m_peer_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Add any orphans that list a particular tx as a parent into a peer's work set */\n+    void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n     /** Return how many entries exist in the orphange */\n     size_t Size() LOCKS_EXCLUDED(::g_cs_orphans)"
      }
    ]
  },
  {
    "sha": "b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
    "node_id": "C_kwDOABII59oAKGI3ZGQzMTY5MDRhNDA4NDRjOGNmZWYxZjA2ZDk0ZDVjMDQwMGUwYWU",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-24T14:28:16Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:27Z"
      },
      "message": "txorphanage: make m_peer_work_set private",
      "tree": {
        "sha": "d635f5f0753d6f693d4a62d665f7fdad7663e4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d635f5f0753d6f693d4a62d665f7fdad7663e4df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c3583563aef76ae74e121cf5ac92c8c52c63385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3583563aef76ae74e121cf5ac92c8c52c63385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c3583563aef76ae74e121cf5ac92c8c52c63385"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 39,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0d77ebacb02696b6783e29857c0bfccea13dbd12",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
        "patch": "@@ -2248,18 +2248,14 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n \n-    auto work_set_it = m_orphanage.m_peer_work_set.find(peer.m_id);\n-    if (work_set_it == m_orphanage.m_peer_work_set.end()) return false;\n+    CTransactionRef porphanTx = nullptr;\n+    NodeId from_peer = -1;\n+    bool more = false;\n \n-    std::set<uint256>& orphan_work_set = work_set_it->second;\n-\n-    while (!orphan_work_set.empty()) {\n-        const uint256 orphanHash = *orphan_work_set.begin();\n-        orphan_work_set.erase(orphan_work_set.begin());\n-\n-        const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n-        if (porphanTx == nullptr) continue;\n+    while (m_orphanage.GetTxToReconsider(peer.m_id, porphanTx, from_peer, more)) {\n+        if (!Assume(porphanTx)) break;\n \n+        const uint256& orphanHash = porphanTx->GetHash();\n         const MempoolAcceptResult result = AcceptToMemoryPool(m_chainman.ActiveChainstate(), m_mempool, porphanTx, false /* bypass_limits */);\n         const TxValidationState& state = result.m_state;\n \n@@ -2320,7 +2316,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n     CChainState& active_chainstate = m_chainman.ActiveChainstate();\n     m_mempool.check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n \n-    return !orphan_work_set.empty();\n+    return more;\n }\n \n bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,"
      },
      {
        "sha": "24eb4f0e60fe9b51b36c0053ff0d0c8418c42c60",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
        "patch": "@@ -168,13 +168,28 @@ bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n     }\n }\n \n-std::pair<CTransactionRef, NodeId> TxOrphanage::GetTx(const uint256& txid) const\n+bool TxOrphanage::GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more)\n {\n     AssertLockHeld(g_cs_orphans);\n \n-    const auto it = m_orphans.find(txid);\n-    if (it == m_orphans.end()) return {nullptr, -1};\n-    return {it->second.tx, it->second.fromPeer};\n+    auto work_set_it = m_peer_work_set.find(peer);\n+    if (work_set_it != m_peer_work_set.end()) {\n+        auto& work_set = work_set_it->second;\n+        while (!work_set.empty()) {\n+            uint256 txid = *work_set.begin();\n+            work_set.erase(work_set.begin());\n+\n+            const auto orphan_it = m_orphans.find(txid);\n+            if (orphan_it != m_orphans.end()) {\n+                more = !work_set.empty();\n+                ref = orphan_it->second.tx;\n+                originator = orphan_it->second.fromPeer;\n+                return true;\n+            }\n+        }\n+    }\n+    more = false;\n+    return false;\n }\n \n void TxOrphanage::EraseForBlock(const CBlock& block)"
      },
      {
        "sha": "861c40899512c45c1ab85ed7ba1efae6c1a1e90c",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dd316904a40844c8cfef1f06d94d5c0400e0ae/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
        "patch": "@@ -10,6 +10,9 @@\n #include <primitives/transaction.h>\n #include <sync.h>\n \n+#include <map>\n+#include <set>\n+\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n@@ -26,10 +29,14 @@ class TxOrphanage {\n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n     bool HaveTx(const GenTxid& gtxid) const LOCKS_EXCLUDED(::g_cs_orphans);\n \n-    /** Get an orphan transaction and its originating peer\n-     * (Transaction ref will be nullptr if not found)\n+    /** Extract a transaction from a peer's work set\n+     *  Returns false and sets more to false if there are no transactions\n+     *  to work on. Otherwise returns true, removes the transaction from\n+     *  the work set, and populates its arguments with tx, the originating\n+     *  peer, and whether there are more orphans for this peer to work on\n+     *  after this tx.\n      */\n-    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n     /** Erase an orphan by txid */\n     int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n@@ -43,9 +50,6 @@ class TxOrphanage {\n     /** Limit the orphanage to the given maximum */\n     unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-    /** Which peer provided a parent tx of orphans that need to be reconsidered */\n-    std::map<NodeId, std::set<uint256>> m_peer_work_set GUARDED_BY(g_cs_orphans);\n-\n     /** Add any orphans that list a particular tx as a parent into a peer's work set */\n     void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n@@ -68,6 +72,9 @@ class TxOrphanage {\n      *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n     std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n \n+    /** Which peer provided a parent tx of orphans that need to be reconsidered */\n+    std::map<NodeId, std::set<uint256>> m_peer_work_set GUARDED_BY(g_cs_orphans);\n+\n     using OrphanMap = decltype(m_orphans);\n \n     struct IteratorComparator"
      }
    ]
  },
  {
    "sha": "e6c9947fa38ff11cd990c95bc43d436c27732fd8",
    "node_id": "C_kwDOABII59oAKGU2Yzk5NDdmYTM4ZmYxMWNkOTkwYzk1YmM0M2Q0MzZjMjc3MzJmZDg",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T15:12:12Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:27Z"
      },
      "message": "Move all g_cs_orphans locking to txorphanage",
      "tree": {
        "sha": "2af691effcff626c3d1fbe484633e3d9689ba98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2af691effcff626c3d1fbe484633e3d9689ba98a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c9947fa38ff11cd990c95bc43d436c27732fd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c9947fa38ff11cd990c95bc43d436c27732fd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c9947fa38ff11cd990c95bc43d436c27732fd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c9947fa38ff11cd990c95bc43d436c27732fd8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd316904a40844c8cfef1f06d94d5c0400e0ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dd316904a40844c8cfef1f06d94d5c0400e0ae"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 30,
      "deletions": 26
    },
    "files": [
      {
        "sha": "ff399428f17554ab8086294e5f53e0825381bda6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "patch": "@@ -387,7 +387,7 @@ class PeerManagerImpl final : public PeerManager\n      *                        reconsidered.\n      * @return                True if there are still orphans in this peer's work set\n      */\n-    bool ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main, g_cs_orphans);\n+    bool ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main) LOCKS_EXCLUDED(g_cs_orphans);\n \n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n@@ -1234,7 +1234,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.pindex->GetBlockHash());\n     }\n-    WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n+    m_orphanage.EraseForPeer(nodeid);\n     m_txrequest.DisconnectedPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n     m_peers_downloading_from -= (state->nBlocksInFlight != 0);\n@@ -2246,7 +2246,6 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n {\n     AssertLockHeld(m_mutex_message_handling);\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(g_cs_orphans);\n \n     CTransactionRef porphanTx = nullptr;\n     NodeId from_peer = -1;\n@@ -3240,7 +3239,7 @@ void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256& txid = ptx->GetHash();\n         const uint256& wtxid = ptx->GetWitnessHash();\n \n-        LOCK2(cs_main, g_cs_orphans);\n+        LOCK(cs_main);\n \n         CNodeState* nodestate = State(pfrom.GetId());\n \n@@ -3488,7 +3487,7 @@ void PeerManagerImpl::_ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fBlockReconstructed = false;\n \n         {\n-        LOCK2(cs_main, g_cs_orphans);\n+        LOCK(cs_main);\n         // If AcceptBlockHeader returned true, it set pindex\n         assert(pindex);\n         UpdateBlockAvailability(pfrom.GetId(), pindex->GetBlockHash());\n@@ -4090,7 +4089,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n \n     {\n-        LOCK2(cs_main, g_cs_orphans);\n+        LOCK(cs_main);\n         if (ProcessOrphanTx(*peer)) {\n             // If there are more orphans to process, return early,\n             // so that all the orphans are processed before work"
      },
      {
        "sha": "699e32405f82f9edfbca436dd4186c839bb9ef77",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "patch": "@@ -291,13 +291,15 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n class TxOrphanageTest : public TxOrphanage\n {\n public:\n-    inline size_t CountOrphans() const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+    inline size_t CountOrphans() const LOCKS_EXCLUDED(g_cs_orphans)\n     {\n+        LOCK(g_cs_orphans);\n         return m_orphans.size();\n     }\n \n-    CTransactionRef RandomOrphan() EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+    CTransactionRef RandomOrphan() LOCKS_EXCLUDED(g_cs_orphans)\n     {\n+        LOCK(g_cs_orphans);\n         std::map<uint256, OrphanTx>::iterator it;\n         it = m_orphans.lower_bound(InsecureRand256());\n         if (it == m_orphans.end())\n@@ -330,8 +332,6 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(key));\n \n-    LOCK(g_cs_orphans);\n-\n     // 50 orphan transactions:\n     for (int i = 0; i < 50; i++)\n     {"
      },
      {
        "sha": "0d427c3a410e9ae6cd4eba64e6ca447467968cee",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "patch": "@@ -19,7 +19,7 @@ RecursiveMutex g_cs_orphans;\n \n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(g_cs_orphans);\n \n     const uint256& hash = tx->GetHash();\n     if (m_orphans.count(hash))\n@@ -53,9 +53,10 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int TxOrphanage::EraseTx(const uint256& txid)\n+int TxOrphanage::_EraseTx(const uint256& txid)\n {\n     AssertLockHeld(g_cs_orphans);\n+\n     std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n     if (it == m_orphans.end())\n         return 0;\n@@ -87,7 +88,7 @@ int TxOrphanage::EraseTx(const uint256& txid)\n \n void TxOrphanage::EraseForPeer(NodeId peer)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(g_cs_orphans);\n \n     m_peer_work_set.erase(peer);\n \n@@ -99,15 +100,15 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n         std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            nErased += _EraseTx(maybeErase->second.tx->GetHash());\n         }\n     }\n     if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx for peer=%d\\n\", nErased, peer);\n }\n \n unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(g_cs_orphans);\n \n     unsigned int nEvicted = 0;\n     static int64_t nNextSweep;\n@@ -121,7 +122,7 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n         {\n             std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n-                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+                nErased += _EraseTx(maybeErase->second.tx->GetHash());\n             } else {\n                 nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n             }\n@@ -135,15 +136,15 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n     {\n         // Evict a random orphan:\n         size_t randompos = rng.randrange(m_orphan_list.size());\n-        EraseTx(m_orphan_list[randompos]->first);\n+        _EraseTx(m_orphan_list[randompos]->first);\n         ++nEvicted;\n     }\n     return nEvicted;\n }\n \n void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, NodeId peer)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(g_cs_orphans);\n \n     // Get this peer's work set, emplacing an empty set it didn't exist\n     std::set<uint256>& orphan_work_set = m_peer_work_set.try_emplace(peer).first->second;\n@@ -161,6 +162,7 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, NodeId peer)\n bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n {\n     LOCK(g_cs_orphans);\n+\n     if (gtxid.IsWtxid()) {\n         return m_wtxid_to_orphan_it.count(gtxid.GetHash());\n     } else {\n@@ -170,7 +172,7 @@ bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n \n bool TxOrphanage::GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(g_cs_orphans);\n \n     auto work_set_it = m_peer_work_set.find(peer);\n     if (work_set_it != m_peer_work_set.end()) {\n@@ -217,7 +219,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n         for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseTx(orphanHash);\n+            nErased += _EraseTx(orphanHash);\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }"
      },
      {
        "sha": "f4d877c375c494b6530fd6210e1fce50870b70f0",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c9947fa38ff11cd990c95bc43d436c27732fd8/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "patch": "@@ -24,7 +24,7 @@ extern RecursiveMutex g_cs_orphans;\n class TxOrphanage {\n public:\n     /** Add a new orphan transaction */\n-    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n     bool HaveTx(const GenTxid& gtxid) const LOCKS_EXCLUDED(::g_cs_orphans);\n@@ -36,22 +36,22 @@ class TxOrphanage {\n      *  peer, and whether there are more orphans for this peer to work on\n      *  after this tx.\n      */\n-    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Erase an orphan by txid */\n-    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    int EraseTx(const uint256& txid) LOCKS_EXCLUDED(::g_cs_orphans) { LOCK(g_cs_orphans); return _EraseTx(txid); }\n \n     /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    void EraseForPeer(NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Erase all orphans included in or invalidated by a new block */\n     void EraseForBlock(const CBlock& block) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Limit the orphanage to the given maximum */\n-    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    unsigned int LimitOrphans(unsigned int max_orphans) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Add any orphans that list a particular tx as a parent into a peer's work set */\n-    void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n \n     /** Return how many entries exist in the orphange */\n     size_t Size() LOCKS_EXCLUDED(::g_cs_orphans)\n@@ -61,6 +61,9 @@ class TxOrphanage {\n     }\n \n protected:\n+    /** Erase an orphan by txid (internal, lock must already be held) */\n+    int _EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n     struct OrphanTx {\n         CTransactionRef tx;\n         NodeId fromPeer;"
      }
    ]
  },
  {
    "sha": "ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
    "node_id": "C_kwDOABII59oAKGVlM2FiZDE1YWViMWFhOTA5ZjNhZWY1NDBhZTVhZDI4YjM0NjRiNGU",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T15:24:04Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:27Z"
      },
      "message": "txorphanage: move g_cs_orphans to TxOrphanage::m_mutex",
      "tree": {
        "sha": "f0f2f9500d2fd91d9650ef405c8af881b0aa5bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0f2f9500d2fd91d9650ef405c8af881b0aa5bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c9947fa38ff11cd990c95bc43d436c27732fd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c9947fa38ff11cd990c95bc43d436c27732fd8"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 39,
      "deletions": 42
    },
    "files": [
      {
        "sha": "f6e6a56e83548231c18967a0f9ffb6a634ca2d9e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "patch": "@@ -387,7 +387,7 @@ class PeerManagerImpl final : public PeerManager\n      *                        reconsidered.\n      * @return                True if there are still orphans in this peer's work set\n      */\n-    bool ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main) LOCKS_EXCLUDED(g_cs_orphans);\n+    bool ProcessOrphanTx(Peer& peer) EXCLUSIVE_LOCKS_REQUIRED(m_mutex_message_handling, cs_main);\n \n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,"
      },
      {
        "sha": "94871b1b0133c432e927059ee94b68edcfeb3211",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "patch": "@@ -291,15 +291,15 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n class TxOrphanageTest : public TxOrphanage\n {\n public:\n-    inline size_t CountOrphans() const LOCKS_EXCLUDED(g_cs_orphans)\n+    inline size_t CountOrphans() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n-        LOCK(g_cs_orphans);\n+        LOCK(m_mutex);\n         return m_orphans.size();\n     }\n \n-    CTransactionRef RandomOrphan() LOCKS_EXCLUDED(g_cs_orphans)\n+    CTransactionRef RandomOrphan() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n-        LOCK(g_cs_orphans);\n+        LOCK(m_mutex);\n         std::map<uint256, OrphanTx>::iterator it;\n         it = m_orphans.lower_bound(InsecureRand256());\n         if (it == m_orphans.end())"
      },
      {
        "sha": "ee73507b89a093055df1f4c51c4f8c04500c54c6",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "patch": "@@ -15,11 +15,9 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n-RecursiveMutex g_cs_orphans;\n-\n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     const uint256& hash = tx->GetHash();\n     if (m_orphans.count(hash))\n@@ -55,7 +53,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n \n int TxOrphanage::_EraseTx(const uint256& txid)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    AssertLockHeld(m_mutex);\n \n     std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n     if (it == m_orphans.end())\n@@ -88,7 +86,7 @@ int TxOrphanage::_EraseTx(const uint256& txid)\n \n void TxOrphanage::EraseForPeer(NodeId peer)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     m_peer_work_set.erase(peer);\n \n@@ -108,7 +106,7 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n \n unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     unsigned int nEvicted = 0;\n     static int64_t nNextSweep;\n@@ -144,7 +142,7 @@ unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n \n void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, NodeId peer)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     // Get this peer's work set, emplacing an empty set it didn't exist\n     std::set<uint256>& orphan_work_set = m_peer_work_set.try_emplace(peer).first->second;\n@@ -161,7 +159,7 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, NodeId peer)\n \n bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     if (gtxid.IsWtxid()) {\n         return m_wtxid_to_orphan_it.count(gtxid.GetHash());\n@@ -172,7 +170,7 @@ bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n \n bool TxOrphanage::GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     auto work_set_it = m_peer_work_set.find(peer);\n     if (work_set_it != m_peer_work_set.end()) {\n@@ -196,7 +194,7 @@ bool TxOrphanage::GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& o\n \n void TxOrphanage::EraseForBlock(const CBlock& block)\n {\n-    LOCK(g_cs_orphans);\n+    LOCK(m_mutex);\n \n     std::vector<uint256> vOrphanErase;\n "
      },
      {
        "sha": "2d6d12ed3ae2b5fbcbf59ab5c1a1275f834b0042",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "patch": "@@ -13,9 +13,6 @@\n #include <map>\n #include <set>\n \n-/** Guards orphan transactions and extra txs for compact blocks */\n-extern RecursiveMutex g_cs_orphans;\n-\n /** A class to track orphan transactions (failed on TX_MISSING_INPUTS)\n  * Since we cannot distinguish orphans from bad transactions with\n  * non-existent inputs, we heavily limit the number of orphans\n@@ -24,10 +21,10 @@ extern RecursiveMutex g_cs_orphans;\n class TxOrphanage {\n public:\n     /** Add a new orphan transaction */\n-    bool AddTx(const CTransactionRef& tx, NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n-    bool HaveTx(const GenTxid& gtxid) const LOCKS_EXCLUDED(::g_cs_orphans);\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Extract a transaction from a peer's work set\n      *  Returns false and sets more to false if there are no transactions\n@@ -36,33 +33,36 @@ class TxOrphanage {\n      *  peer, and whether there are more orphans for this peer to work on\n      *  after this tx.\n      */\n-    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more) LOCKS_EXCLUDED(::g_cs_orphans);\n+    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Erase an orphan by txid */\n-    int EraseTx(const uint256& txid) LOCKS_EXCLUDED(::g_cs_orphans) { LOCK(g_cs_orphans); return _EraseTx(txid); }\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex) { LOCK(m_mutex); return _EraseTx(txid); }\n \n     /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n-    void EraseForPeer(NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Erase all orphans included in or invalidated by a new block */\n-    void EraseForBlock(const CBlock& block) LOCKS_EXCLUDED(::g_cs_orphans);\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Limit the orphanage to the given maximum */\n-    unsigned int LimitOrphans(unsigned int max_orphans) LOCKS_EXCLUDED(::g_cs_orphans);\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Add any orphans that list a particular tx as a parent into a peer's work set */\n-    void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) LOCKS_EXCLUDED(::g_cs_orphans);\n+    void AddChildrenToWorkSet(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Return how many entries exist in the orphange */\n-    size_t Size() LOCKS_EXCLUDED(::g_cs_orphans)\n+    size_t Size()\n     {\n-        LOCK(::g_cs_orphans);\n+        LOCK(m_mutex);\n         return m_orphans.size();\n     }\n \n protected:\n+    /** Guards data */\n+    mutable Mutex m_mutex;\n+\n     /** Erase an orphan by txid (internal, lock must already be held) */\n-    int _EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    int _EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n \n     struct OrphanTx {\n         CTransactionRef tx;\n@@ -71,34 +71,33 @@ class TxOrphanage {\n         size_t list_pos;\n     };\n \n-    /** Map from txid to orphan transaction record. Limited by\n-     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n-\n-    /** Which peer provided a parent tx of orphans that need to be reconsidered */\n-    std::map<NodeId, std::set<uint256>> m_peer_work_set GUARDED_BY(g_cs_orphans);\n-\n-    using OrphanMap = decltype(m_orphans);\n+    using OrphanMap = std::map<uint256, OrphanTx>;\n \n     struct IteratorComparator\n     {\n-        template<typename I>\n-        bool operator()(const I& a, const I& b) const\n+        bool operator()(const OrphanMap::iterator& a, const OrphanMap::iterator& b) const\n         {\n             return &(*a) < &(*b);\n         }\n     };\n \n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    OrphanMap m_orphans GUARDED_BY(m_mutex);\n+\n+    /** Which peer provided a parent tx of orphans that need to be reconsidered */\n+    std::map<NodeId, std::set<uint256>> m_peer_work_set GUARDED_BY(m_mutex);\n+\n     /** Index from the parents' COutPoint into the m_orphans. Used\n      *  to remove orphan transactions from the m_orphans */\n-    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(g_cs_orphans);\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(m_mutex);\n \n     /** Orphan transactions in vector for quick random eviction */\n-    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(g_cs_orphans);\n+    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(m_mutex);\n \n     /** Index from wtxid into the m_orphans to lookup orphan\n      *  transactions using their witness ids. */\n-    std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(g_cs_orphans);\n+    std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(m_mutex);\n };\n \n #endif // BITCOIN_TXORPHANAGE_H"
      }
    ]
  },
  {
    "sha": "7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
    "node_id": "C_kwDOABII59oAKDdmN2M3ODczYjVlN2FjODQ2ZjIwODUxZDhjZjZhNWE3YjU0YzVhYjk",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-09-02T05:47:30Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-10-26T11:38:27Z"
      },
      "message": "txorphanage: fix missing includes",
      "tree": {
        "sha": "e1830740148f5605dad096697c0b2741443e3163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1830740148f5605dad096697c0b2741443e3163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3abd15aeb1aa909f3aef540ae5ad28b3464b4e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c9ca76405cf7d155156de1b90331de28a314ed3",
        "filename": "src/txorphanage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9/src/txorphanage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9/src/txorphanage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.cpp?ref=7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
        "patch": "@@ -7,6 +7,8 @@\n #include <consensus/validation.h>\n #include <logging.h>\n #include <policy/policy.h>\n+#include <random.h>\n+#include <util/time.h>\n \n #include <cassert>\n "
      },
      {
        "sha": "fd7ece9c29935a2e4db74bd4ebc7ad7f42900142",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=7f7c7873b5e7ac846f20851d8cf6a5a7b54c5ab9",
        "patch": "@@ -9,9 +9,12 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n+#include <uint256.h>\n \n+#include <stdint.h>\n #include <map>\n #include <set>\n+#include <vector>\n \n /** A class to track orphan transactions (failed on TX_MISSING_INPUTS)\n  * Since we cannot distinguish orphans from bad transactions with"
      }
    ]
  }
]