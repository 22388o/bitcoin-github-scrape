laanwj,2015-09-18T15:08:32Z,"Is this a security issue?\n\nI don't really know windows networking internals, but in which circumstances can a client flood this buffer? And if it floods, what happens? Why doesn't it block (stop increasing the ACK pointer in TCP packets) and pick it up later?\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-141478483,141478483,
ptschip,2015-09-18T17:21:34Z,"No I'm not referring to a security issue, just functional and\nperformance related.\n\nWhat is happening is that the nodes are getting hung when large numbers\nof blocks are getting downloaded.  I see this clearly when running the\nwallet.py test and it happens 50% of the time I run that test.   I've\nverified this on both win32 and win64 workstations.   What is seen is\nthat at some point the cli",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-141512620,141512620,
laanwj,2015-09-21T11:51:48Z,"Right, thanks for the explanation. It does leave me kind of worried that our code isn't robust against a full buffer. I understand that a larger buffer can give better performance (less copy operations), but getting entirely stuck is unexpected. So I don't disagree on this change, but I hope this doesn't cover up a deeper issue.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-141950590,141950590,
ptschip,2015-09-21T13:09:09Z,"@laanwj I agree that this may be covering up a deeper functional issue, but if there's an issue there, it's been there for a long time and likely for all platforms.  I don't really see any risk here in raising the buffer to a more reasonable size for Native Windows which OSX  and Linux already use as defaults.  IMO it really needs to be done anyway, deeper issues aside.\n\nAnd at the least, buffer",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-141968955,141968955,
MarcoFalke,2015-09-21T13:23:00Z,"Concept ACK. But I agree with @laanwj: Even though this fixes regtest mode on Windows, there are many nodes running the ""old code"" on **main net**. If the buffer issue reveals any vulnerability, fixes need to be submitted to the old release branches as well and node operators need to be notified.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-141974112,141974112,
laanwj,2015-09-21T15:40:17Z,"@MarcoFalke This is not a 'buffer overflow' in the security sense. That formulation confused me as well. The sync gets stuck, but there is no process crash, nor any danger of anything besides the buffer being overwritten.\n\n@theuni can you take a look here?\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142018916,142018916,
theuni,2015-09-22T01:53:36Z,"Mmm, I don't like this as-is. Not because I think it's wrong (argument for raising the size seems reasonable), but because as the others have said, it seems much more likely this is a symptom of a larger underlying issue.\n\nIf the buffer is completely full, logically the send should fail and return some error. If it's not completely full, small writes should continue to succeed. @ptschip Could yo",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142157732,142157732,
ptschip,2015-09-22T04:46:20Z,"@theuni I'll follow up with the logprints tomorrow but here's a few interesting data points.  I ran the test but this time just changing the RCV buffer.   So using 8KB send, 8KB Receive, the test fails,  using 8KB send, 16KB receive the test also fails, using 8KB send and 64KB receive, the test passes.  It seems more likely the problem is on the receiving end, also noting that when the test fails ",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142180760,142180760,
theuni,2015-09-22T05:19:58Z,"@ptschip poorly sized buffers would mean more inefficient transfers. If a few thousand bytes can't be transferred locally in a matter of seconds, that points to something bigger. Looking forward to some log data.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142184279,142184279,
ptschip,2015-09-22T14:01:31Z,"Here are the logs, with 8KB send/receive buffers, both ends are having trouble sending:\n\nFrom the node with the blocks, trying to send block data\n\n2015-09-22 13:43:33 socket send error A non-blocking socket operation could not be completed immediately.  (10035). Trying to send: 1240 bytes\n2015-09-22 13:43:33 socket send error A non-blocking socket operation could not be completed immediately.",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142297746,142297746,
ptschip,2015-09-22T14:38:43Z,"Logs for a tests with 8KB send and 64KB receive buffers show nothing out of the ordinary in the nodes that are syncing, but in the node that mines the blocks we have again the following which happens for 79 out of the 100 blocks being sent:\n\n2015-09-22 14:27:16 socket send error A non-blocking socket operation could not be completed immediately.  (10035). Trying to send: 1240 bytes\n2015-09-22 1",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142307662,142307662,
theuni,2015-09-22T19:50:06Z,"@ptschip We use select() to determine when we can write, so we really shouldn't be failing in that way. The only thing I can think of is that it's the optimistic writes that are failing. Could you please try disabling those as an experiment, and seeing what changes?\n\n``` patch\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 87c4f0a..36b10ee 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -2373,1",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142399670,142399670,
theuni,2015-09-22T20:27:07Z,"Another thing to try:\nAccording to [this](https://support.microsoft.com/en-us/kb/823764), we may get the observed behavior if a single write is larger than the underlying buffer. Here's a quick hack to determine if that's what we're seeing:\n\n``` patch\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 87c4f0a..8c0ce4c 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -738,7 +738,9 @@ void SocketSend",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142409854,142409854,
ptschip,2015-09-24T03:19:54Z,"@theuni Cory, I did a couple of things (see below), neither of which worked.  The same problem persists.  Only when the receive buffer is changed to 64KB does the problem go away and the test pass.  I'm wondering if there is a problem with how truncated data is handled on the receiving end , as would happen with a  receive buffer overflow?\n\n1)  disabled optimistic sending.  No change in the test",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142794132,142794132,
theuni,2015-09-24T15:25:22Z,"@ptschip Thanks for trying those things. Did you try the second patch (which sets the max send size to 4000)? I actually had a good feeling about that test. Setting the socket to blocking would introduce tons of new issues since all of our code assumes non-blocking send/recv, so it's no surprise that didn't improve the situation.\n\nI'll keep looking at the receiving side. That's very helpful.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142962502,142962502,
theuni,2015-09-24T15:41:28Z,"@ptschip Are you able to hop on IRC for some real-time troubleshooting? I'm cfields on freenode.\n\nThere are several things I'd like to poke at, but the latency here makes it tough.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142967481,142967481,
ptschip,2015-09-24T15:46:52Z,"@theuni yeah, i only set the socket to blocking to verify that the\nproblem is not being caused by an overrun send buffer, i wasn't\nintending it as a fix.\n\nDidn't get to the second test.  I'm not really fully available right\nnow...in the middle of moving to a new home over the next few\ndays/week.  But I'll get to it if I can.\n\nOn 24/09/2015 8:26 AM, Cory Fields wrote:\n\n> @ptschip https://",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142969152,142969152,
ptschip,2015-09-24T16:18:58Z,"@theuni  Sorry, no time for IRC right now but i did just try out your\nother option, limiting the maxsendsize, but no joy there...\n\nI'll have more time next week...for some real time troubleshooting but\ncan't right now.\n\nPeter\n\nOn 24/09/2015 8:42 AM, Cory Fields wrote:\n\n> @ptschip https://github.com/ptschip Are you able to hop on IRC for\n> some real-time troubleshooting? I'm cfields on f",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142977193,142977193,
theuni,2015-09-24T17:12:09Z,"@ptschip Ok, no worries. Good luck with the move.\n\nHere's another one to try when you get a chance. Here's the theory:\n\nWe may end up in a state where we have received lots of getdatas but not yet processed them all. The message handler and socket handler both grab the recv lock via TRY_LOCK, though it will obviously take the message handler longer to process the message than it takes to grab ",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-142991996,142991996,
ptschip,2015-10-01T02:42:26Z,"Hi Cory,  I finally got around to trying this...it didn't work at\nall...couldn't get passed even the first 1 or 2 steps in the python\nscript wallet.py\n\nOn 24/09/2015 10:12 AM, Cory Fields wrote:\n\n> @ptschip https://github.com/ptschip Ok, no worries. Good luck with\n> the move.\n> \n> Here's another one to try when you get a chance. Here's the theory:\n> \n> We may end up in a state where we ",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-144601000,144601000,
ptschip,2015-10-03T16:33:45Z,"@theuni   Cory,  making a little progress here.  Not sure that this is getting at the root of the issue either, but I found that the following enhancement also fixes the problem, it appears that the sleep time is rather long. ( I found that 20 milliseconds also worked.)\n\nin the ThreadMessageHandler: \n\n```\n    if (fSleep)\n```\n-  messageHandlerCondition.timed_wait(lock, boost::posix_time::mic",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-145263304,145263304,
ptschip,2015-10-06T02:36:09Z,"@theuni   Cory, here's yet another bit of code that fixes or masks the issue, we don't really need to be sleeping if we've just sent messages, rather we should be checking the receive queue for anything that's been coming back.  So now we have 3 different code changes, all performance enhancements, which on their own I think would be beneficial but none of them gets to the root of the problem.\n- ",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-145727231,145727231,
theuni,2015-10-07T06:53:30Z,"@ptschip Thanks for continuing to dig.\n\nYour change (if I'm reading it right) is to set fSleep to false if SendMessages returns true? SendMessages always returns true :)\n\nSo you're effectively disabling the sleep. I bet you'd find that the cpu load is pegged on one core. That does work to strengthen my locking theory, though.\n\nPlease try building from this branch: https://github.com/theuni/b",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146095602,146095602,
ptschip,2015-10-07T14:04:50Z,"@theuni I built your code and ran it, it also fixes the issue. \n\nOn 06/10/2015 11:54 PM, Cory Fields wrote:\n\n> @ptschip https://github.com/ptschip Thanks for continuing to dig.\n> \n> Your change (if I'm reading it right) is to set fSleep to false if\n> SendMessages returns true? SendMessages always returns true :)\n> \n> So you're effectively disabling the sleep. I bet you'd find that the\n> ",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146204902,146204902,
theuni,2015-10-07T16:30:59Z,"Woohoo, we've found the root cause! Thanks very much for your testing.\n\nNow to come up with some sane way to deploy it.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146253878,146253878,
ptschip,2015-10-07T19:10:40Z,"@theuni  That's great Cory!\n\nAnd, although this PR only masks the underlying problem I still think it\nhas merit from a performance perspective and should be merged in to\nbring the Windows nodes up to the same tcp buffer size as the OSX and\nLinux nodes. What do you think?\n\nOn 07/10/2015 9:31 AM, Cory Fields wrote:\n\n> Woohoo, we've found the root cause! Thanks very much for your testing.\n>",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146298340,146298340,
laanwj,2015-10-07T19:43:52Z,"> What do you think?\n\nFine with increasing the buffer size, but in the commit message and pull description then call it 'improve performance' instead of 'fix issue'.\n(and it would be nice to have measurements that show it does improve performance)\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146307459,146307459,
theuni,2015-10-07T20:47:15Z,"I'm a bit skeptical that it will actually improve performance in a measurable way. Assuming the change above fixed the issue for the reason I think it did, the problem is that the socket is not being drained for long periods of time due to the eventhandler thread keeping it locked. Without that lock held, the buffer should be drained within the first few passes (ideally the first), and the time be",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146322758,146322758,
ptschip,2015-10-08T04:08:44Z,"@theuni  Cory, that line in the code is actually 64KB in hex so it\nwouldn't need to be changed for this.  All we need is to up the\nsend/receive buffer to 64KB.  But if we want to go higher then yes we\nwould need to bump  pchBuf as well. \n\n```\n                    typical socket buffer is 8K-64K\n                    char pchBuf[0x10000];\n```\n\nOn 07/10/2015 1:47 PM, Cory Fields wrote:\n\n> I",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146414423,146414423,
ptschip,2015-10-08T04:58:39Z,"I changed both the commit message and pull description to  ""Set Windows\nTCP buffers to 64KB to match OSX  and Unix"" .  I thought there would be\nless confusion/questions as to why OSX and UNIX were left out if I had\njust mentioned  ""improvements for windows""  only.\n\nI've already run tests on this last week, syncing a 600MB blockchain\nover a private 78Mbit wireless network, running Windows 7 o",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146420141,146420141,
theuni,2015-10-08T05:20:45Z,"@ptschip I'd be curious to see how it compares when using the patch above instead.\n\nAlso, not sure about OSX, but Linux sock sizes vary a good bit. On my machine I get:\nrecvbuf: 87380. sendbuf: 22320, but I'm pretty sure those fluctuate based on the current conditions.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146423014,146423014,
ptschip,2015-10-09T01:55:46Z,"@theuni,  I'm curious about that too, I'll run some tests when I get a\nchance but won't be for a few days, I'm busy with something else and\nit's Thanksgiving this weekend in Canada also :) ...\n\nOn 07/10/2015 10:21 PM, Cory Fields wrote:\n\n> @ptschip https://github.com/ptschip I'd be curious to see how it\n> compares when using the patch above instead.\n> \n> Also, not sure about OSX, but Linu",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-146736015,146736015,
ptschip,2015-10-14T00:57:01Z,"@theuni Cory,  I got around to testing your ""net-lock-hacking"" code and the results are pretty good.\n\nTested again on a Windows 7 with a wireless high speed connection (not over the internet)...syncing a 600MB blockchain, 3 tests each and average taken.\n\nCurrent Master Build with 8KB tcp send buffer, 8KB receive buffer:   236 seconds to sync\nCory's net lock code with 8KB tcp send buffer and 8",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-147894623,147894623,
theuni,2015-10-14T01:31:46Z,"@ptschip That's great to hear!\n\nAs for the peak/trough download pattern, that's a much larger issue. Though I'm working to fix it as part of a much more invasive refactor.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-147899545,147899545,
laanwj,2015-11-05T11:35:45Z,"> typical socket buffer is 8K-64K\n>  char pchBuf[0x10000];\n\nBe careful increasing that - it is allocated on the stack. When I investigated bitcoin's stack frames in the context of the UPnP buffer overflow, `ThreadSocketHandler` came out as the function with the single biggest stack frame in our source base. I think 64kB is acceptable (thread stacks are usually 4-8MB), but it is something to kee",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-154037193,154037193,
luke-jr,2015-11-05T11:40:20Z,> (thread stacks are usually 4-8MB)\n\nAre we explicitly setting that? Mac OS X thread stacks are only 512k by default...\n,https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-154037927,154037927,
laanwj,2015-11-05T12:49:30Z,"> Are we explicitly setting that? Mac OS X thread stacks are only 512k by default...\n\nNo, we aren't changing it. 4-8MB is for Linux. But this is the reason why I say to be careful, it's indeed possible for OSes to have even smaller stacks.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-154049986,154049986,
ptschip,2015-11-05T15:54:36Z,"To allow for further investigation, I think we should hold off on this\nmerge for now.  I'm seeing unexpected performance results when buffers\nare increased and network latency is introduced, and not sure if it's my\ntest setup or something deeper in the messaging system.  When @theuni\nsubmits his refactor that he's working on for the backend messaging I\ncould re-test/investigate after that.  \",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-154100908,154100908,
laanwj,2015-11-10T14:51:34Z,Closing this for now - to be revisited later\n,https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-155440331,155440331,
theuni,2015-11-10T21:22:25Z,"@laanwj Sorry, missed your ping here. Yes, I'd like to leave this alone for 0.12. The lock interaction is far too complicated.\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-155571121,155571121,
laanwj,2016-02-16T17:27:18Z,"Probably should revisit this for 0.13.\nIs this related to ""Test Nodes will sometimes not sync their blocks on native Windows #6554""?\n",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-184786391,184786391,
ptschip,2016-02-16T18:46:39Z,"It does work around issue 6554 but I believe that Cory discovered the\nreal root cause of 6554 was in the message handling and the locking\nissues therein.\n\nOn 16/02/2016 9:28 AM, Wladimir J. van der Laan wrote:\n\n> Probably should revisit this for 0.13.\n> Is this related to ""Test Nodes will sometimes not sync their blocks on\n> native Windows #6554 https://github.com/bitcoin/bitcoin/issues/65",https://github.com/bitcoin/bitcoin/pull/6693#issuecomment-184822319,184822319,
MarcoFalke,2015-09-18T16:00:48Z,Shouldn't this be named `MAX_WINDOWS_TCP_BUFFER_SIZE`?\n,https://github.com/bitcoin/bitcoin/pull/6693#discussion_r39871260,39871260,src/net.h
ptschip,2015-09-18T17:31:50Z,"I suppose that's true, it is a MAX user defined setting, since the OS\ncan reduce the Buffer size if/when it needs to cut back on memory.  And\nit is currently related\nonly to Windows. \n\nI'll update it and push.\n\n9:01 AM, MarcoFalke wrote:\n\n> In src/net.h\n> https://github.com/bitcoin/bitcoin/pull/6693#discussion_r39871260:\n> \n> > @@ -60,6 +60,8 @@ static const bool DEFAULT_UPNP = false;\",https://github.com/bitcoin/bitcoin/pull/6693#discussion_r39880107,39880107,src/net.h
