[
  {
    "sha": "691161d419fe3d82d7a49b511ef80e2b24332aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTExNjFkNDE5ZmUzZDgyZDdhNDliNTExZWY4MGUyYjI0MzMyYWFj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:29:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:27:51Z"
      },
      "message": "Consensus: Create consensus/consensus.h with some constants",
      "tree": {
        "sha": "fb657b9aba2aa42ff9948fcfc428845b60384c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb657b9aba2aa42ff9948fcfc428845b60384c35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691161d419fe3d82d7a49b511ef80e2b24332aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691161d419fe3d82d7a49b511ef80e2b24332aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/691161d419fe3d82d7a49b511ef80e2b24332aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691161d419fe3d82d7a49b511ef80e2b24332aac/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 34,
      "deletions": 16
    },
    "files": [
      {
        "sha": "72d79619b246da4df43a52c31849336f7c17bd04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "f1c1c0ff8bffea7af2a5f44f70d0faf1d8892d85",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -4,18 +4,18 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n-#include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n "
      },
      {
        "sha": "9c5b7d4ffb0ea7179ad0ff6a8c5b2b4688aef144",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+/** The maximum allowed size for a serialized block, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed number of signature check operations in a block (network rule) */\n+static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+static const int COINBASE_MATURITY = 100;\n+/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "a4c34c5345e00c0735206e5be32e35196c1b5944",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -14,9 +14,10 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -53,8 +54,6 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -67,10 +66,6 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */"
      },
      {
        "sha": "c48d8cd508db4bbe928c9ca68d5d0b99bf8e7bbc",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -6,7 +6,7 @@\n #include \"merkleblock.h\"\n \n #include \"hash.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n using namespace std;"
      },
      {
        "sha": "56a2c5828b9ea266657dcfcdfdb1f405c475c6af",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "59f46deb1c420d8aef28a85a0d144a06259d3a18",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -10,9 +10,6 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "721424943551880acc9c9764af65ed605b0e7535",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -10,11 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7f1db58e5d815e77f517e2bb1399ac7061461a10",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "8398a33f75028ae82e0e85db8ba99f2a5f6f7296",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -5,11 +5,12 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\""
      },
      {
        "sha": "d05e3c6eecc7353f95405b7d4c4bb8d9c9ea9433",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "88e6610decbcc5b6da49a5c04b56c09798d5208c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691161d419fe3d82d7a49b511ef80e2b24332aac/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691161d419fe3d82d7a49b511ef80e2b24332aac/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=691161d419fe3d82d7a49b511ef80e2b24332aac",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      }
    ]
  },
  {
    "sha": "cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjk0MDAwNDdlMTY1NWMwZjMyYWExOWQ1Y2I5YzVlYWFlNzI1YjAw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-22T14:24:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-23T12:48:33Z"
      },
      "message": "MOVEONLY: Move to consensus/consensus.h:\n\n-Most consensus constants that are not in script already\n-Functions declaration for most of what's necessary for verifying transactions, block headers and blocks",
      "tree": {
        "sha": "026ad3a5ab83b82954bbfc013cf0ebc40d3e8d5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/026ad3a5ab83b82954bbfc013cf0ebc40d3e8d5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "691161d419fe3d82d7a49b511ef80e2b24332aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691161d419fe3d82d7a49b511ef80e2b24332aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/691161d419fe3d82d7a49b511ef80e2b24332aac"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 76,
      "deletions": 43
    },
    "files": [
      {
        "sha": "d94a5b7ca0551c9708c4197ebd44fa3ea1981c74",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "patch": "@@ -6,6 +6,16 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdint.h>\n+\n+class CBlock;\n+class CBlockHeader;\n+class CBlockIndex;\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+class uint256;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n@@ -15,4 +25,68 @@ static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n+namespace Consensus {\n+\n+class Params;\n+\n+} // namespace Consensus\n+\n+/** Transaction validation functions */\n+\n+/**\n+ * Context-independent CTransaction validity checks\n+ */\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n+\n+/** Block header validation functions */\n+\n+/**\n+ * Context-independent CBlockHeader validity checks\n+ */\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+/**\n+ * Context-dependent CBlockHeader validity checks\n+ */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n+/** Block validation functions */\n+\n+/**\n+ * Context-independent CBlock validity checks\n+ */\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+/**\n+ * Context-dependent CBlock validity checks\n+ */\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n+/** Transaction validation utility functions */\n+\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * \n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+/** Block header validation utility functions */\n+\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired);\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "312ce2a9680fddce3fcdf72e0e289ca231ea9c94",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "patch": "@@ -69,12 +69,6 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n- * and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2701,7 +2695,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n {\n     unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;"
      },
      {
        "sha": "bdd5f6b7b246c4a874279ed891d4ae9992dadb37",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "patch": "@@ -251,24 +251,6 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  * @return True if all inputs (scriptSigs) use only standard transaction forms\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n@@ -280,9 +262,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n /** Check for standard transaction types\n  * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n  */\n@@ -342,14 +321,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n-\n-/** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      },
      {
        "sha": "922e4bee1fab225089a45f5ef3746a7332231557",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9400047e1655c0f32aa19d5cb9c5eaae725b00/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "patch": "@@ -6,20 +6,14 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/params.h\"\n \n #include <stdint.h>\n \n-class CBlockHeader;\n class CBlockIndex;\n-class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "13f78495bee4f6042152dc5a16eee73529a5a87d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y3ODQ5NWJlZTRmNjA0MjE1MmRjNWExNmVlZTczNTI5YTVhODdk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-22T12:41:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-23T12:49:54Z"
      },
      "message": "Consensus: Refactor: Separate Consensus::CheckTxInputs and GetSpendHeight in CheckInputs",
      "tree": {
        "sha": "d1941dea77577f1562c5acb47fd4bd2570d9e4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1941dea77577f1562c5acb47fd4bd2570d9e4c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f78495bee4f6042152dc5a16eee73529a5a87d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f78495bee4f6042152dc5a16eee73529a5a87d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f78495bee4f6042152dc5a16eee73529a5a87d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f78495bee4f6042152dc5a16eee73529a5a87d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9400047e1655c0f32aa19d5cb9c5eaae725b00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9400047e1655c0f32aa19d5cb9c5eaae725b00"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 39,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3d9c4f0300aaa40877edc5871576f97e9e115572",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f78495bee4f6042152dc5a16eee73529a5a87d/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f78495bee4f6042152dc5a16eee73529a5a87d/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=13f78495bee4f6042152dc5a16eee73529a5a87d",
        "patch": "@@ -25,10 +25,24 @@ static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n namespace Consensus {\n \n class Params;\n \n+/** Transaction validation functions */\n+ \n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+\n } // namespace Consensus\n \n /** Transaction validation functions */"
      },
      {
        "sha": "bb03eca4d027a2018db5a2dc0d88ae1d48b4599a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 9,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f78495bee4f6042152dc5a16eee73529a5a87d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f78495bee4f6042152dc5a16eee73529a5a87d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=13f78495bee4f6042152dc5a16eee73529a5a87d",
        "patch": "@@ -1373,22 +1373,20 @@ bool CScriptCheck::operator()() {\n     return true;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n-    if (!tx.IsCoinBase())\n-    {\n-        if (pvChecks)\n-            pvChecks->reserve(tx.vin.size());\n+    LOCK(cs_main);\n+    CBlockIndex* pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n+    return pindexPrev->nHeight + 1;\n+}\n \n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n             return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n-        // While checking, GetBestBlock() refers to the parent block.\n-        // This is also true for mempool checks.\n-        CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n-        int nSpendHeight = pindexPrev->nHeight + 1;\n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -1427,6 +1425,18 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         if (!MoneyRange(nFees))\n             return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    return true;\n+}\n+\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+{\n+    if (!tx.IsCoinBase())\n+    {\n+        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n+            return false;\n+\n+        if (pvChecks)\n+            pvChecks->reserve(tx.vin.size());\n \n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks."
      },
      {
        "sha": "ae9d4c32ee0d144eaa9e8472e7c30712d1717944",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f78495bee4f6042152dc5a16eee73529a5a87d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f78495bee4f6042152dc5a16eee73529a5a87d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=13f78495bee4f6042152dc5a16eee73529a5a87d",
        "patch": "@@ -473,4 +473,10 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n+/** \n+ * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n+ * This is also true for mempool checks.\n+ */\n+int GetSpendHeight(const CCoinsViewCache& inputs);\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "51bb26e22681a8f1ce7e992ae1c864561c6518f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWJiMjZlMjI2ODFhOGYxY2U3ZTk5MmFlMWM4NjQ1NjFjNjUxOGYy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T08:19:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-23T12:49:55Z"
      },
      "message": "Consensus: Refactor: Separate CheckFinalTx from main::IsFinalTx",
      "tree": {
        "sha": "6dd0486219f6bce16b050518008e492fd1d497c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dd0486219f6bce16b050518008e492fd1d497c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51bb26e22681a8f1ce7e992ae1c864561c6518f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bb26e22681a8f1ce7e992ae1c864561c6518f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51bb26e22681a8f1ce7e992ae1c864561c6518f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bb26e22681a8f1ce7e992ae1c864561c6518f2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f78495bee4f6042152dc5a16eee73529a5a87d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f78495bee4f6042152dc5a16eee73529a5a87d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f78495bee4f6042152dc5a16eee73529a5a87d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3a108a494d18b01225a3809a02ffa53532afa2b9",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bb26e22681a8f1ce7e992ae1c864561c6518f2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bb26e22681a8f1ce7e992ae1c864561c6518f2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=51bb26e22681a8f1ce7e992ae1c864561c6518f2",
        "patch": "@@ -76,6 +76,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n /** Transaction validation utility functions */\n \n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n /**\n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent"
      },
      {
        "sha": "66e1cd8dcb30b3490498c8d1f218e9b60b7b739b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bb26e22681a8f1ce7e992ae1c864561c6518f2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bb26e22681a8f1ce7e992ae1c864561c6518f2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51bb26e22681a8f1ce7e992ae1c864561c6518f2",
        "patch": "@@ -648,10 +648,15 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         nBlockHeight = chainActive.Height();\n     if (nBlockTime == 0)\n         nBlockTime = GetAdjustedTime();\n+    return CheckFinalTx(tx, nBlockHeight, nBlockTime);\n+}\n+\n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n             return false;\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "20c2b4638e95c23c5fe22f37e3754385d03ae290",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGMyYjQ2MzhlOTVjMjNjNWZlMjJmMzdlMzc1NDM4NWQwM2FlMjkw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-22T16:27:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-23T12:49:55Z"
      },
      "message": "MOVEONLY: Move from main.cpp to consensus/txverify.cpp:\n\n-CheckFinalTx\n-CheckTransaction\n-Consensus::CheckTxInputs\n-GetLegacySigOpCount\n-GetP2SHSigOpCount",
      "tree": {
        "sha": "6df9ee11e396b4856f4a71d21689464922b11c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6df9ee11e396b4856f4a71d21689464922b11c40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20c2b4638e95c23c5fe22f37e3754385d03ae290",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20c2b4638e95c23c5fe22f37e3754385d03ae290",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20c2b4638e95c23c5fe22f37e3754385d03ae290",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20c2b4638e95c23c5fe22f37e3754385d03ae290/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51bb26e22681a8f1ce7e992ae1c864561c6518f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bb26e22681a8f1ce7e992ae1c864561c6518f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51bb26e22681a8f1ce7e992ae1c864561c6518f2"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 162,
      "deletions": 151
    },
    "files": [
      {
        "sha": "536d763dc68f15799719afc1ec22e82ee6ad81ed",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=20c2b4638e95c23c5fe22f37e3754385d03ae290",
        "patch": "@@ -175,6 +175,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/txverify.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "90f9f66aa89129909e091b542ed685e170c928d4",
        "filename": "src/consensus/txverify.cpp",
        "status": "added",
        "additions": 161,
        "deletions": 0,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/consensus/txverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/consensus/txverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/txverify.cpp?ref=20c2b4638e95c23c5fe22f37e3754385d03ae290",
        "patch": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"coins.h\"\n+#include \"main.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/sigcache.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"version.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n+            return false;\n+    return true;\n+}\n+\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nSigOps += txin.scriptSig.GetSigOpCount(false);\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n+    }\n+    return nSigOps;\n+}\n+\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n+                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n+                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n+                         REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n+                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n+                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n+                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    std::set<COutPoint> vInOutPoints;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        if (vInOutPoints.count(txin.prevout))\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n+                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(txin.prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n+                             REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n+                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}\n+\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n+        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+        // for an attacker to attempt to split the network.\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n+\n+            // If prev is coinbase, check that it's matured\n+            if (coins->IsCoinBase()) {\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                    return state.Invalid(\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+            }\n+\n+            // Check for negative or overflow input values\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n+                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+\n+        }\n+\n+        if (nValueIn < tx.GetValueOut())\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n+                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n+                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+\n+        // Tally transaction fees\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n+        if (nTxFee < 0)\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n+                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+        nFees += nTxFee;\n+        if (!MoneyRange(nFees))\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n+                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    return true;\n+}"
      },
      {
        "sha": "91c5a272646022db0d23f6cc9d30c1bb2b0fa7f9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 151,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20c2b4638e95c23c5fe22f37e3754385d03ae290/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=20c2b4638e95c23c5fe22f37e3754385d03ae290",
        "patch": "@@ -651,16 +651,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return CheckFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        if (!tx.vin[i].IsFinal())\n-            return false;\n-    return true;\n-}\n-\n /**\n  * Check transaction inputs to mitigate two\n  * potential denial-of-service attacks:\n@@ -729,99 +719,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n@@ -1385,54 +1282,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n-        }\n-\n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-    return true;\n-}\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())"
      }
    ]
  }
]