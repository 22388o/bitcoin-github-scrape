[
  {
    "sha": "e17da14e83f60ea48f95070d693474ced079c3a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTdkYTE0ZTgzZjYwZWE0OGY5NTA3MGQ2OTM0NzRjZWQwNzljM2E3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-24T20:45:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-02T10:27:49Z"
      },
      "message": "tests: Remove unused testing code",
      "tree": {
        "sha": "84d0fbf5f1291e19eca3bfa6ddd00d9101d1b5bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84d0fbf5f1291e19eca3bfa6ddd00d9101d1b5bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e17da14e83f60ea48f95070d693474ced079c3a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e17da14e83f60ea48f95070d693474ced079c3a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e17da14e83f60ea48f95070d693474ced079c3a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e17da14e83f60ea48f95070d693474ced079c3a7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b8bb5f1402a07736be7d649c2253253672d04e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8bb5f1402a07736be7d649c2253253672d04e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8bb5f1402a07736be7d649c2253253672d04e1"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 9,
      "deletions": 51
    },
    "files": [
      {
        "sha": "302a5ec1cb14bda869031e0746b190c4714056b0",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -25,7 +25,6 @@\n \n # Reject codes that we might receive in this test\n REJECT_INVALID = 16\n-REJECT_OBSOLETE = 17\n REJECT_NONSTANDARD = 64\n \n def cltv_invalidate(tx):"
      },
      {
        "sha": "9cbc1b39bd7c0bd6bc936aa99d6e802535dd8d52",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -22,7 +22,6 @@\n \n # Reject codes that we might receive in this test\n REJECT_INVALID = 16\n-REJECT_OBSOLETE = 17\n REJECT_NONSTANDARD = 64\n \n # A canonical signature consists of:"
      },
      {
        "sha": "b6c420fdae6cf9895a834b3bf04436c183f8a73d",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -9,7 +9,6 @@\n \n import ctypes\n import ctypes.util\n-import hashlib\n \n ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n \n@@ -111,40 +110,12 @@ def set_secretbytes(self, secret):\n         ssl.BN_CTX_free(ctx)\n         return self.k\n \n-    def set_privkey(self, key):\n-        self.mb = ctypes.create_string_buffer(key)\n-        return ssl.d2i_ECPrivateKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n-\n-    def set_pubkey(self, key):\n-        self.mb = ctypes.create_string_buffer(key)\n-        return ssl.o2i_ECPublicKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n-\n-    def get_privkey(self):\n-        size = ssl.i2d_ECPrivateKey(self.k, 0)\n-        mb_pri = ctypes.create_string_buffer(size)\n-        ssl.i2d_ECPrivateKey(self.k, ctypes.byref(ctypes.pointer(mb_pri)))\n-        return mb_pri.raw\n-\n     def get_pubkey(self):\n         size = ssl.i2o_ECPublicKey(self.k, 0)\n         mb = ctypes.create_string_buffer(size)\n         ssl.i2o_ECPublicKey(self.k, ctypes.byref(ctypes.pointer(mb)))\n         return mb.raw\n \n-    def get_raw_ecdh_key(self, other_pubkey):\n-        ecdh_keybuffer = ctypes.create_string_buffer(32)\n-        r = ssl.ECDH_compute_key(ctypes.pointer(ecdh_keybuffer), 32,\n-                                 ssl.EC_KEY_get0_public_key(other_pubkey.k),\n-                                 self.k, 0)\n-        if r != 32:\n-            raise Exception('CKey.get_ecdh_key(): ECDH_compute_key() failed')\n-        return ecdh_keybuffer.raw\n-\n-    def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n-        # FIXME: be warned it's not clear what the kdf should be as a default\n-        r = self.get_raw_ecdh_key(other_pubkey)\n-        return kdf(r)\n-\n     def sign(self, hash, low_s = True):\n         # FIXME: need unit tests for below cases\n         if not isinstance(hash, bytes):\n@@ -195,26 +166,19 @@ class CPubKey(bytes):\n     Attributes:\n \n     is_valid      - Corresponds to CPubKey.IsValid()\n-    is_fullyvalid - Corresponds to CPubKey.IsFullyValid()\n-    is_compressed - Corresponds to CPubKey.IsCompressed()\n     \"\"\"\n \n     def __new__(cls, buf, _cec_key=None):\n         self = super(CPubKey, cls).__new__(cls, buf)\n         if _cec_key is None:\n             _cec_key = CECKey()\n         self._cec_key = _cec_key\n-        self.is_fullyvalid = _cec_key.set_pubkey(self) != 0\n         return self\n \n     @property\n     def is_valid(self):\n         return len(self) > 0\n \n-    @property\n-    def is_compressed(self):\n-        return len(self) == 33\n-\n     def verify(self, hash, sig):\n         return self._cec_key.verify(hash, sig)\n "
      },
      {
        "sha": "a04edda217502230698e7d684050bf13d0dc3e89",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -35,7 +35,6 @@\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n \n-MAX_INV_SZ = 50000\n MAX_LOCATOR_SZ = 101\n MAX_BLOCK_BASE_SIZE = 1000000\n \n@@ -58,9 +57,6 @@\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n \n-def ripemd160(s):\n-    return hashlib.new('ripemd160', s).digest()\n-\n def hash256(s):\n     return sha256(sha256(s))\n \n@@ -893,7 +889,6 @@ def __init__(self):\n         self.nTransactions = 0\n         self.vHash = []\n         self.vBits = []\n-        self.fBad = False\n \n     def deserialize(self, f):\n         self.nTransactions = struct.unpack(\"<i\", f.read(4))[0]"
      },
      {
        "sha": "694adedc6c15de06c2deb0ae5d83464ef5f0c089",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -313,7 +313,7 @@ def on_ping(self, message):\n         self.send_message(msg_pong(message.nonce))\n \n     def on_verack(self, message):\n-        self.verack_received = True\n+        pass\n \n     def on_version(self, message):\n         assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)"
      },
      {
        "sha": "a21c864e7538a5b36ca38c988f21356f021ee60a",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -54,10 +54,9 @@ def __repr__(self):\n         return 'Socks5Command(%s,%s,%s,%s,%s,%s)' % (self.cmd, self.atyp, self.addr, self.port, self.username, self.password)\n \n class Socks5Connection():\n-    def __init__(self, serv, conn, peer):\n+    def __init__(self, serv, conn):\n         self.serv = serv\n         self.conn = conn\n-        self.peer = peer\n \n     def handle(self):\n         \"\"\"Handle socks5 request according to RFC192.\"\"\"\n@@ -137,9 +136,9 @@ def __init__(self, conf):\n \n     def run(self):\n         while self.running:\n-            (sockconn, peer) = self.s.accept()\n+            (sockconn, _) = self.s.accept()\n             if self.running:\n-                conn = Socks5Connection(self, sockconn, peer)\n+                conn = Socks5Connection(self, sockconn)\n                 thread = threading.Thread(None, conn.handle)\n                 thread.daemon = True\n                 thread.start()"
      },
      {
        "sha": "7e2ec673df2c753f9c0875d156c4320c207cf72b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -161,8 +161,10 @@ def main(self):\n         success = TestStatus.FAILED\n \n         try:\n-            if self.options.usecli and not self.supports_cli:\n-                raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            if self.options.usecli:\n+                if not self.supports_cli:\n+                    raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+                self.skip_if_no_cli()\n             self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()"
      },
      {
        "sha": "6e5f6afa9eb2ccc20fd4cd69d48ffa518f1dcd5d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e17da14e83f60ea48f95070d693474ced079c3a7/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e17da14e83f60ea48f95070d693474ced079c3a7",
        "patch": "@@ -621,7 +621,7 @@ def _get_uncovered_rpc_commands(self):\n         with open(coverage_ref_filename, 'r', encoding=\"utf8\") as coverage_ref_file:\n             all_cmds.update([line.strip() for line in coverage_ref_file.readlines()])\n \n-        for root, dirs, files in os.walk(self.dir):\n+        for root, _, files in os.walk(self.dir):\n             for filename in files:\n                 if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))"
      }
    ]
  }
]