[
  {
    "sha": "6d07c62322f60eb2702c6654e994fc353bcfcf8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDA3YzYyMzIyZjYwZWIyNzAyYzY2NTRlOTk0ZmMzNTNiY2ZjZjhj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T19:27:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-07T21:45:09Z"
      },
      "message": "Return correct error codes in bumpfee().\n\nThe bumpfee() RPC was returning misleading or incorrect error codes\n(for example RPC_INVALID_ADDRESS_OR_KEY when the transaction was not\nBIP125 replacable). This commit fixes those error codes:\n\n- RPC_INVALID_ADDRESS_OR_KEY if an invalid address was provided:\n    - Invalid change address given\n- RPC_INVALID_PARAMETER if a single (non-address/key) parameter is incorrect\n    - confTarget and totalFee options should not both be set.\n    - Invalid confTarget\n    - Insufficient totalFee (cannot be less than required fee)\n- RPC_WALLET_ERROR for any other error\n    - Transaction has descendants in the wallet\n    - Transaction has descendants in the mempool\n    - Transaction has been mined, or is conflicted with a mined transaction\n    - Transaction is not BIP 125 replaceable\n    - Transaction has already been bumped\n    - Transaction contains inputs that don't belong to the wallet\n    - Transaction has multiple change outputs\n    - Transaction does not have a change output\n    - Fee is higher than maxTxFee\n    - New fee rate is less than the minimum fee rate\n    - Change output is too small.\n\nThis commit also updates the test cases to explicitly test the error code.",
      "tree": {
        "sha": "89db84adb0aac0551740cbdc6fb0260a07be7304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89db84adb0aac0551740cbdc6fb0260a07be7304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d07c62322f60eb2702c6654e994fc353bcfcf8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d07c62322f60eb2702c6654e994fc353bcfcf8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d07c62322f60eb2702c6654e994fc353bcfcf8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d07c62322f60eb2702c6654e994fc353bcfcf8c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47510ad3dd514e04caa364ff56ab2cc83569efb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47510ad3dd514e04caa364ff56ab2cc83569efb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47510ad3dd514e04caa364ff56ab2cc83569efb9"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 20,
      "deletions": 22
    },
    "files": [
      {
        "sha": "68e9808ea505e2dfdadd9d3b7a7b0ab416f5dbcb",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d07c62322f60eb2702c6654e994fc353bcfcf8c/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d07c62322f60eb2702c6654e994fc353bcfcf8c/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=6d07c62322f60eb2702c6654e994fc353bcfcf8c",
        "patch": "@@ -128,7 +128,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n-    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -148,7 +148,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -159,7 +159,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -174,7 +174,7 @@ def test_small_output_fails(rbf_node, dest_address):\n                             Decimal(\"0.00100000\"),\n                             {dest_address: 0.00080000,\n                              get_change_address(rbf_node): Decimal(\"0.00010000\")})\n-    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -209,15 +209,15 @@ def test_rebumping(rbf_node, dest_address):\n     rbf_node.settxfee(Decimal(\"0.00001000\"))\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n-    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -268,7 +268,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()\n-    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -315,9 +315,7 @@ def submit_block_with_tx(node, tx):\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.solve()\n-    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n-    if error is not None:\n-        raise Exception(error)\n+    node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n "
      },
      {
        "sha": "ea6795aeaa1512975f637738c6f2544d7c772e05",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d07c62322f60eb2702c6654e994fc353bcfcf8c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d07c62322f60eb2702c6654e994fc353bcfcf8c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6d07c62322f60eb2702c6654e994fc353bcfcf8c",
        "patch": "@@ -2707,7 +2707,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n \n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"changeAddress must be a valid bitcoin address\");\n \n             changeAddress = address.Get();\n         }\n@@ -2862,33 +2862,33 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx& wtx = pwallet->mapWallet[hash];\n \n     if (pwallet->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n     }\n \n     {\n         LOCK(mempool.cs);\n         auto it = mempool.mapTx.find(hash);\n         if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n     }\n \n     if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     if (!pwallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n     }\n \n     // figure out which output was change\n@@ -2897,13 +2897,13 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n         if (pwallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n             }\n             nOutput = i;\n         }\n     }\n     if (nOutput == -1) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n     }\n \n     // Calculate the expected size of the new transaction.\n@@ -2994,7 +2994,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n      if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_MISC_ERROR,\n+         throw JSONRPCError(RPC_WALLET_ERROR,\n                             strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n                                       FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n      }\n@@ -3006,7 +3006,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n     }\n \n     // Now modify the output to increase the fee.\n@@ -3016,7 +3016,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CMutableTransaction tx(*(wtx.tx));\n     CTxOut* poutput = &(tx.vout[nOutput]);\n     if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n     }\n \n     // If the output would become dust, discard it (converting the dust to fee)"
      }
    ]
  },
  {
    "sha": "c1190963b388590dc0a346bf625c7e84f69cee8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTE5MDk2M2IzODg1OTBkYzBhMzQ2YmY2MjVjN2U4NGY2OWNlZThk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T21:39:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-07T21:45:09Z"
      },
      "message": "Return correct error codes in blockchain.cpp.\n\nRPCs in blockchain.cpp were returning misleading or incorrect error\ncodes (for example getblock() returning RPC_INTERNAL_ERROR when the\nblock had been pruned). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\n  errors, only for genuine internal errors such as corrupted data.\n- RPC_METHOD_NOT_FOUND should not be returned in response to a\n  JSON request for an existing method.\n\nThose error codes have been replaced with RPC_MISC_ERROR or\nRPC_INVALID_PARAMETER as appropriate.",
      "tree": {
        "sha": "d7e1ebf7427eb93770d37ac516b66cbd65c703f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7e1ebf7427eb93770d37ac516b66cbd65c703f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1190963b388590dc0a346bf625c7e84f69cee8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1190963b388590dc0a346bf625c7e84f69cee8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1190963b388590dc0a346bf625c7e84f69cee8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1190963b388590dc0a346bf625c7e84f69cee8d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d07c62322f60eb2702c6654e994fc353bcfcf8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d07c62322f60eb2702c6654e994fc353bcfcf8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d07c62322f60eb2702c6654e994fc353bcfcf8c"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 31,
      "deletions": 47
    },
    "files": [
      {
        "sha": "4767dd8fe2d2220f59a375204b8733834287de3d",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1190963b388590dc0a346bf625c7e84f69cee8d/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1190963b388590dc0a346bf625c7e84f69cee8d/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=c1190963b388590dc0a346bf625c7e84f69cee8d",
        "patch": "@@ -197,11 +197,8 @@ def run_test(self):\n                 assert_equal(x['status'], \"headers-only\")\n \n         # But this block should be accepted by node0 since it has more work.\n-        try:\n-            self.nodes[0].getblock(blocks_h3[0].hash)\n-            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested more work block was not processed\")\n+        self.nodes[0].getblock(blocks_h3[0].hash)\n+        print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n@@ -225,26 +222,17 @@ def run_test(self):\n                 tips[j] = next_block\n \n         time.sleep(2)\n-        for x in all_blocks:\n-            try:\n-                self.nodes[0].getblock(x.hash)\n-                if x == all_blocks[287]:\n-                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n-            except:\n-                if x == all_blocks[287]:\n-                    print(\"Unrequested block too far-ahead not processed\")\n-                else:\n-                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+        # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n+        for x in all_blocks[:-1]:\n+            self.nodes[0].getblock(x.hash)\n+        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip\n         white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        try:\n-            white_node.sync_with_ping()\n-            self.nodes[1].getblock(tips[1].hash)\n-            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-        except:\n-            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+        white_node.sync_with_ping()\n+        self.nodes[1].getblock(tips[1].hash)\n+        print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n \n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more"
      },
      {
        "sha": "6d778cfc5e857d22572f1e5f7f814e5b0c09f97f",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 20,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1190963b388590dc0a346bf625c7e84f69cee8d/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1190963b388590dc0a346bf625c7e84f69cee8d/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=c1190963b388590dc0a346bf625c7e84f69cee8d",
        "patch": "@@ -184,11 +184,8 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        try:\n-            self.nodes[2].getblock(self.forkhash)\n-            raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n-        except JSONRPCException as e:\n-            print(\"Will need to redownload block\",self.forkheight)\n+        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -233,7 +230,7 @@ def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n@@ -265,14 +262,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_message(JSONRPCException, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n@@ -318,25 +315,19 @@ def has_block(index):\n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n-        try:\n-            self.stop_node(2)\n-            start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print(\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start the pruning node\")\n+        self.stop_node(2)\n+        start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         print (\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n-        try:\n-            self.stop_node(5) #stop and start to trigger rescan\n-            start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n-            print (\"Success\")\n-        except Exception as detail:\n-            raise AssertionError(\"Wallet test: unable to re-start node5\")\n+        self.stop_node(5) #stop and start to trigger rescan\n+        start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n+        print (\"Success\")\n \n     def run_test(self):\n         print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")"
      },
      {
        "sha": "43eec9a1fba5e09c7357e90f4501438d2ad9571a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1190963b388590dc0a346bf625c7e84f69cee8d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1190963b388590dc0a346bf625c7e84f69cee8d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c1190963b388590dc0a346bf625c7e84f69cee8d",
        "patch": "@@ -745,10 +745,15 @@ UniValue getblock(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n \n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n \n-    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        // Block not found on disk. This could be because we have the block\n+        // header in our index but don't have the block (for example if a\n+        // non-whitelisted node sends us an unrequested long chain of valid\n+        // blocks, we add the headers to our index, but don't accept the\n+        // block).\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not found on disk\");\n \n     if (!fVerbose)\n     {\n@@ -830,7 +835,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n     if (!fPruneMode)\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Cannot prune blocks because node is not in prune mode.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n \n@@ -844,15 +849,15 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n         CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n         if (!pindex) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n     unsigned int chainHeight = (unsigned int) chainActive.Height();\n     if (chainHeight < Params().PruneAfterHeight())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Blockchain is too short for pruning.\");\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Blockchain is shorter than the attempted prune height.\");\n     else if (height > chainHeight - MIN_BLOCKS_TO_KEEP) {"
      }
    ]
  },
  {
    "sha": "960bc7f778d8dd618e65f1e37ec734e2d4734051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjBiYzdmNzc4ZDhkZDYxOGU2NWYxZTM3ZWM3MzRlMmQ0NzM0MDUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T21:27:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-07T21:45:09Z"
      },
      "message": "Return correct error codes in removeprunedfunds().\n\nThe removeprunedfunds() RPC was returning misleading or incorrect error\ncodes (for example RPC_INTERNAL_ERROR when the transaction was\nnot found in the wallet). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\nerrors, only for genuine internal errors such as corrupted data.\n\nThis error code has been replaced with RPC_WALLET_ERROR.\n\nThis commit also updates the test cases to explicitly test the error code.",
      "tree": {
        "sha": "016914cfdb765f2fbaf5a2dabed94235c897854b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/016914cfdb765f2fbaf5a2dabed94235c897854b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/960bc7f778d8dd618e65f1e37ec734e2d4734051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960bc7f778d8dd618e65f1e37ec734e2d4734051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/960bc7f778d8dd618e65f1e37ec734e2d4734051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960bc7f778d8dd618e65f1e37ec734e2d4734051/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1190963b388590dc0a346bf625c7e84f69cee8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1190963b388590dc0a346bf625c7e84f69cee8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1190963b388590dc0a346bf625c7e84f69cee8d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 4,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4e529951ed14ebe46eb597a5a09ae21c0ace169d",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/960bc7f778d8dd618e65f1e37ec734e2d4734051/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/960bc7f778d8dd618e65f1e37ec734e2d4734051/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=960bc7f778d8dd618e65f1e37ec734e2d4734051",
        "patch": "@@ -76,12 +76,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        try:\n-            self.nodes[1].importprunedfunds(rawtxn1, proof1)\n-        except JSONRPCException as e:\n-            assert('No addresses' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -112,12 +107,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        try:\n-            self.nodes[1].removeprunedfunds(txnid1)\n-        except JSONRPCException as e:\n-            assert('does not exist' in e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "ad5ecf49766caf30473f26f1c168a5140573ed64",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/960bc7f778d8dd618e65f1e37ec734e2d4734051/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/960bc7f778d8dd618e65f1e37ec734e2d4734051/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=960bc7f778d8dd618e65f1e37ec734e2d4734051",
        "patch": "@@ -350,11 +350,11 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     vector<uint256> vHashOut;\n \n     if (pwallet->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Could not properly delete the transaction.\");\n     }\n \n     if(vHashOut.empty()) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction does not exist in wallet.\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction does not exist in wallet.\");\n     }\n \n     return NullUniValue;"
      }
    ]
  },
  {
    "sha": "a012087667edb35a36f25ae06b42b1644d80e649",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDEyMDg3NjY3ZWRiMzVhMzZmMjVhZTA2YjQyYjE2NDRkODBlNjQ5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T17:57:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-07T21:45:09Z"
      },
      "message": "Return correct error codes in setban().\n\nThe setban() RPC was returning misleading or incorrect error\ncodes (for example RPC_CLIENT_NODE_ALREADY_ADDED when an invalid IP\naddress was entered). This commit fixes those error codes:\n\n- RPC_CLIENT_INVALID_IP_OR_SUBNET should be returned if the client\n  enters an invalid IP address or subnet.\n\nThis commit also updates the test cases to explicitly test the error code.\n\nThis commit also adds a testcase for trying to setban on an invalid subnet.",
      "tree": {
        "sha": "38f3fb5b4d2a65acbc926c3661cbf59b7feda8be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38f3fb5b4d2a65acbc926c3661cbf59b7feda8be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a012087667edb35a36f25ae06b42b1644d80e649",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012087667edb35a36f25ae06b42b1644d80e649",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a012087667edb35a36f25ae06b42b1644d80e649",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012087667edb35a36f25ae06b42b1644d80e649/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "960bc7f778d8dd618e65f1e37ec734e2d4734051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960bc7f778d8dd618e65f1e37ec734e2d4734051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/960bc7f778d8dd618e65f1e37ec734e2d4734051"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a6b10a0d83d21f152583814cc17e413191fadcd5",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a012087667edb35a36f25ae06b42b1644d80e649/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a012087667edb35a36f25ae06b42b1644d80e649/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=a012087667edb35a36f25ae06b42b1644d80e649",
        "patch": "@@ -29,15 +29,13 @@ def run_test(self):\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        # This will throw an exception because 127.0.0.1/42 is not a real subnet\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n-        except:\n-            pass\n+        # This will throw an exception because 127.0.0.1 was not added above\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 0)"
      },
      {
        "sha": "63836f1684d21e483424c9db7a10a79ee4264dae",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a012087667edb35a36f25ae06b42b1644d80e649/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a012087667edb35a36f25ae06b42b1644d80e649/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a012087667edb35a36f25ae06b42b1644d80e649",
        "patch": "@@ -506,7 +506,7 @@ UniValue setban(const JSONRPCRequest& request)\n         LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n-        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n+        throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Invalid IP/Subnet\");\n \n     if (strCommand == \"add\")\n     {\n@@ -526,7 +526,7 @@ UniValue setban(const JSONRPCRequest& request)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? g_connman->Unban(subNet) : g_connman->Unban(netAddr) ))\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n+            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n     }\n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "dab804c18a427901684ebe936b2069a97e04a268",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWI4MDRjMThhNDI3OTAxNjg0ZWJlOTM2YjIwNjlhOTdlMDRhMjY4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T20:48:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-07T21:45:09Z"
      },
      "message": "Return correct error codes in fundrawtransaction().\n\nThe fundrawtransaction() RPC was returning misleading or incorrect error\ncodes (for example RPC_INTERNAL_ERROR when funding the transaction\nfailed). This commit fixes those error codes:\n\n- RPC_INTERNAL_ERROR should not be returned for application-level\nerrors, only for genuine internal errors such as corrupted data.\n\nThat error code has been replaced with RPC_WALLET_ERROR.\n\nThis commit also updates the test cases to explicitly test the error code.",
      "tree": {
        "sha": "66c7c787b90e18241aa37b92087c2a834afb802e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66c7c787b90e18241aa37b92087c2a834afb802e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dab804c18a427901684ebe936b2069a97e04a268",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dab804c18a427901684ebe936b2069a97e04a268",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dab804c18a427901684ebe936b2069a97e04a268",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dab804c18a427901684ebe936b2069a97e04a268/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a012087667edb35a36f25ae06b42b1644d80e649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a012087667edb35a36f25ae06b42b1644d80e649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a012087667edb35a36f25ae06b42b1644d80e649"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 16,
      "deletions": 47
    },
    "files": [
      {
        "sha": "1f8658129755f013af00fd0105d52c26e3b3f7ff",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 34,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dab804c18a427901684ebe936b2069a97e04a268/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dab804c18a427901684ebe936b2069a97e04a268/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=dab804c18a427901684ebe936b2069a97e04a268",
        "patch": "@@ -182,12 +182,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n-            raise AssertionError(\"Accepted invalid option foo\")\n-        except JSONRPCException as e:\n-            assert(\"Unexpected key foo\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -200,12 +195,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        try:\n-            self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n-            raise AssertionError(\"Accepted invalid bitcoin address\")\n-        except JSONRPCException as e:\n-            assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -219,12 +209,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 2})\n-        except JSONRPCException as e:\n-            assert('changePosition out of bounds' == e.error['message'])\n-        else:\n-            assert(False)\n+        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -333,12 +318,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        try:\n-            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-            raise AssertionError(\"Spent more than available\")\n-        except JSONRPCException as e:\n-            assert(\"Insufficient\" in e.error['message'])\n-\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -494,21 +474,13 @@ def run_test(self):\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        try:\n-            fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('Keypool ran out' in e.error['message'])\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].walletlock()\n \n-        try:\n-            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n-            raise AssertionError(\"Wallet unlocked without passphrase\")\n-        except JSONRPCException as e:\n-            assert('walletpassphrase' in e.error['message'])\n+        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "0374d8984ad9ee80241006a329cc695151de4f5a",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dab804c18a427901684ebe936b2069a97e04a268/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dab804c18a427901684ebe936b2069a97e04a268/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=dab804c18a427901684ebe936b2069a97e04a268",
        "patch": "@@ -61,13 +61,8 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n-        try:\n-            rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException as e:\n-            assert(\"Missing inputs\" in e.error['message'])\n-        else:\n-            assert(False)\n-\n+        # This will raise an exception since there are missing inputs\n+        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -161,27 +156,29 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n         \n+        # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n+        # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "90dd3a0b2aaa7f125bec2997de85f02bdcda73ef",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dab804c18a427901684ebe936b2069a97e04a268/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dab804c18a427901684ebe936b2069a97e04a268/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dab804c18a427901684ebe936b2069a97e04a268",
        "patch": "@@ -2761,7 +2761,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     string strFailReason;\n \n     if (!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress)) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n \n     UniValue result(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "338bf065a454fee76d9dfa9c7a36161cac72309f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzhiZjA2NWE0NTRmZWU3NmQ5ZGZhOWM3YTM2MTYxY2FjNzIzMDlm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-24T16:23:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-08T19:22:55Z"
      },
      "message": "Add commenting around JSON error codes\n\nRPC_INVALID_REQUEST and RPC_METHOD_NOT_FOUND are mapped internally to\nHTTP error codes and should not be used for application-layer errors.\nThis commit adds commenting around those definitions to warn not to use\nthem for application errors.",
      "tree": {
        "sha": "ec60155b6fd8c7fc92010e01b7419c8159cc36cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec60155b6fd8c7fc92010e01b7419c8159cc36cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/338bf065a454fee76d9dfa9c7a36161cac72309f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338bf065a454fee76d9dfa9c7a36161cac72309f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/338bf065a454fee76d9dfa9c7a36161cac72309f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338bf065a454fee76d9dfa9c7a36161cac72309f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dab804c18a427901684ebe936b2069a97e04a268",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dab804c18a427901684ebe936b2069a97e04a268",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dab804c18a427901684ebe936b2069a97e04a268"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eafb8d9e67200dc513e58cde3fa5f8faa95166da",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/338bf065a454fee76d9dfa9c7a36161cac72309f/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/338bf065a454fee76d9dfa9c7a36161cac72309f/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=338bf065a454fee76d9dfa9c7a36161cac72309f",
        "patch": "@@ -31,9 +31,15 @@ enum HTTPStatusCode\n enum RPCErrorCode\n {\n     //! Standard JSON-RPC 2.0 errors\n+    // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n+    // It should not be used for application-layer errors.\n     RPC_INVALID_REQUEST  = -32600,\n+    // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n+    // It should not be used for application-layer errors.\n     RPC_METHOD_NOT_FOUND = -32601,\n     RPC_INVALID_PARAMS   = -32602,\n+    // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n+    // (for exampled datadir corruption).\n     RPC_INTERNAL_ERROR   = -32603,\n     RPC_PARSE_ERROR      = -32700,\n "
      }
    ]
  },
  {
    "sha": "adaa281da12bcc697779f97973cea6b103eec4ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGFhMjgxZGExMmJjYzY5Nzc3OWY5Nzk3M2NlYTZiMTAzZWVjNGFi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-08T19:23:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-08T19:23:16Z"
      },
      "message": "Update release notes to include RPC error code changes.",
      "tree": {
        "sha": "9d065ec2f0130d0a7f6521796531c3383da3a1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d065ec2f0130d0a7f6521796531c3383da3a1ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adaa281da12bcc697779f97973cea6b103eec4ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa281da12bcc697779f97973cea6b103eec4ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adaa281da12bcc697779f97973cea6b103eec4ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adaa281da12bcc697779f97973cea6b103eec4ab/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "338bf065a454fee76d9dfa9c7a36161cac72309f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338bf065a454fee76d9dfa9c7a36161cac72309f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/338bf065a454fee76d9dfa9c7a36161cac72309f"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "af792118d611045a181c6a4898dafba047173cbe",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adaa281da12bcc697779f97973cea6b103eec4ab/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adaa281da12bcc697779f97973cea6b103eec4ab/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=adaa281da12bcc697779f97973cea6b103eec4ab",
        "patch": "@@ -33,6 +33,55 @@ frequently tested on them.\n Notable changes\n ===============\n \n+Low-level RPC changes\n+---------------------\n+\n+- Error codes have been updated to be more accurate for the following error cases:\n+  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n+  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n+  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n+  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n+  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n+  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n+  - `removeprunedfunds` now returns RPC_WALLET_ERROR if bitcoind is unable to remove\n+  the transaction. Previously returned RPC_INTERNAL_ERROR.\n+  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n+  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n+  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n+  address is provided. Previously returned RPC_INVALID_PARAMETER.\n+  - `fundrawtransaction` now returns RPC_WALLET_ERROR if bitcoind is unable to create\n+  the transaction. The error message provides further details. Previously returned\n+  RPC_INTERNAL_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n+  has been mined or conflicts with a mined transaction. Previously returned\n+  RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n+  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n+  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n+  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n+  outputs. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n+  output. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n+  fee. Previously returned RPC_MISC_ERROR.\n+\n Credits\n =======\n "
      }
    ]
  }
]