[
  {
    "sha": "02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmIyYzJhZjJmM2NhMGQ2ZmRiZTMzNWE1ZjVkN2YwMjE4YWY5ZGQ3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-18T22:57:20Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-12-03T14:05:21Z"
      },
      "message": "Make CTxMemPool::remove more effecient by avoiding recursion",
      "tree": {
        "sha": "0bd1d5f8fd1aa481a56b7eb55dd08375d7d5774a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bd1d5f8fd1aa481a56b7eb55dd08375d7d5774a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlR/GKEACgkQdYgkL74406hWJACgokq4IK4vr6UkjuJ575Z2V+Ar\nNTUAn3ZUzNQgZ7XDEF+OWaY5OZNyUCks\n=GUzV\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bd1d5f8fd1aa481a56b7eb55dd08375d7d5774a\nparent c2d7c6134e282a974f8f6e2a134f0132f90dc2a0\nauthor Matt Corallo <git@bluematt.me> 1416351440 -0800\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1417615521 -0500\n\nMake CTxMemPool::remove more effecient by avoiding recursion\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2d7c6134e282a974f8f6e2a134f0132f90dc2a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2d7c6134e282a974f8f6e2a134f0132f90dc2a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2d7c6134e282a974f8f6e2a134f0132f90dc2a0"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 26,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2edce58f9186dff450653dfa5dcc466315bdac13",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
        "patch": "@@ -426,30 +426,41 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive)\n+void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool\n+    LOCK(cs);\n+    std::deque<uint256> txToRemove;\n+    txToRemove.push_back(origTx.GetHash());\n+    if (fRecursive) {\n+        uint256 hash = origTx.GetHash();\n+        for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n+            std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n+            if (it != mapNextTx.end())\n+                txToRemove.push_back(it->second.ptx->GetHash());\n+        }\n+    }\n+    while (txToRemove.size())\n     {\n-        LOCK(cs);\n-        uint256 hash = tx.GetHash();\n+        uint256 hash = txToRemove.front();\n+        txToRemove.pop_front();\n+        if (!mapTx.count(hash))\n+            continue;\n+        const CTransaction& tx = mapTx[hash].GetTx();\n+        removed.push_front(tx);\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                if (it == mapNextTx.end())\n-                    continue;\n-                remove(*it->second.ptx, removed, true);\n+                if (it != mapNextTx.end())\n+                    txToRemove.push_back(it->second.ptx->GetHash());\n             }\n         }\n-        if (mapTx.count(hash))\n-        {\n-            removed.push_front(tx);\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            mapNextTx.erase(txin.prevout);\n \n-            totalTxSize -= mapTx[hash].GetTxSize();\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-        }\n+        totalTxSize -= mapTx[hash].GetTxSize();\n+        mapTx.erase(hash);\n+        nTransactionsUpdated++;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjJkY2Y2NmFkMTc1ZTVhZDZlYjEzYTBhYTBlNDAyOTdiMjVmMjBj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-12T05:06:15Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-12-03T14:05:38Z"
      },
      "message": "Make CTxMemPool::check more thourough by using CheckInputs",
      "tree": {
        "sha": "3efd53a457c51394011cf7211a833ff575cf6bee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3efd53a457c51394011cf7211a833ff575cf6bee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlR/GLIACgkQdYgkL74406g82gCfWXnazEx04DiYt6jhDfLjT2ul\nJaIAoJxr0bKf3mLGhvHnuynrvGmgzUyC\n=jBlh\n-----END PGP SIGNATURE-----",
        "payload": "tree 3efd53a457c51394011cf7211a833ff575cf6bee\nparent 02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7\nauthor Matt Corallo <git@bluematt.me> 1415768775 -0800\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1417615538 -0500\n\nMake CTxMemPool::check more thourough by using CheckInputs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02b2c2af2f3ca0d6fdbe335a5f5d7f0218af9dd7"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "722598d3c3fb1b3ccd16e04b219457c33307065f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -524,17 +525,22 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     uint64_t checkTotal = 0;\n \n+    CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n+\n     LOCK(cs);\n+    list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n         const CTransaction& tx = it->second.GetTx();\n+        bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n+                fDependsWait = true;\n             } else {\n                 const CCoins* coins = pcoins->AccessCoins(txin.prevout.hash);\n                 assert(coins && coins->IsAvailable(txin.prevout.n));\n@@ -546,6 +552,29 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             assert(it3->second.n == i);\n             i++;\n         }\n+        if (fDependsWait)\n+            waitingOnDependants.push_back(&it->second);\n+        else {\n+            CValidationState state; CTxUndo undo;\n+            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            UpdateCoins(tx, state, mempoolDuplicate, undo, 1000000);\n+        }\n+    }\n+    unsigned int stepsSinceLastRemove = 0;\n+    while (!waitingOnDependants.empty()) {\n+        const CTxMemPoolEntry* entry = waitingOnDependants.front();\n+        waitingOnDependants.pop_front();\n+        CValidationState state;\n+        if (!mempoolDuplicate.HaveInputs(entry->GetTx())) {\n+            waitingOnDependants.push_back(entry);\n+            stepsSinceLastRemove++;\n+            assert(stepsSinceLastRemove < waitingOnDependants.size());\n+        } else {\n+            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            CTxUndo undo;\n+            UpdateCoins(entry->GetTx(), state, mempoolDuplicate, undo, 1000000);\n+            stepsSinceLastRemove = 0;\n+        }\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();"
      }
    ]
  },
  {
    "sha": "c3dabdbc4201a232d3a1b183f303657252cda58a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2RhYmRiYzQyMDFhMjMyZDNhMWIxODNmMzAzNjU3MjUyY2RhNThh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-12T00:41:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-12-03T14:05:38Z"
      },
      "message": "Remove coinbase-dependant transactions during reorg.\n\nThis still leaves transactions in mempool that are potentially\ninvalid if the maturity period has been reorged out of, but at\nleast they're not missing inputs entirely.",
      "tree": {
        "sha": "d14401d8f478d85ac67a7799cecccc1f6af7444a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d14401d8f478d85ac67a7799cecccc1f6af7444a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3dabdbc4201a232d3a1b183f303657252cda58a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlR/GLIACgkQdYgkL74406jhNQCg2q8anXrB9wH0UiEfsORXGY0+\nZY4An3qgkGAlBNq4FJ6+u+vKP5LxK4Lf\n=fyaW\n-----END PGP SIGNATURE-----",
        "payload": "tree d14401d8f478d85ac67a7799cecccc1f6af7444a\nparent f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c\nauthor Matt Corallo <git@bluematt.me> 1415752904 -0800\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1417615538 -0500\n\nRemove coinbase-dependant transactions during reorg.\n\nThis still leaves transactions in mempool that are potentially\ninvalid if the maturity period has been reorged out of, but at\nleast they're not missing inputs entirely.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3dabdbc4201a232d3a1b183f303657252cda58a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3dabdbc4201a232d3a1b183f303657252cda58a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3dabdbc4201a232d3a1b183f303657252cda58a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f62dcf66ad175e5ad6eb13a0aa0e40297b25f20c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d481b17128a9397feb4068daafb5f2c3042cabb5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3dabdbc4201a232d3a1b183f303657252cda58a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3dabdbc4201a232d3a1b183f303657252cda58a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c3dabdbc4201a232d3a1b183f303657252cda58a",
        "patch": "@@ -1890,9 +1890,8 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (!tx.IsCoinBase())\n-            if (!AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n-                mempool.remove(tx, removed, true);\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n+            mempool.remove(tx, removed, true);\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables."
      }
    ]
  },
  {
    "sha": "cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGMxNzZiZmM5NGRkN2ZmMmZmNWFkMzk4ZDAzYjJiNjlmNzFhYmRi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-11-24T20:18:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-12-04T14:47:52Z"
      },
      "message": "Fix mempool handling of coinbase spends\n\nThe logic for removing/resurrecting transactions from the memory\npool was broken for spends of coinbase transactions; they\nwere not being removed from the mempool when they should.\n\nFixed by having DisconnectTip() remove any transactions from the memory\npool that are descendants of the was-mature-but-is-now-immature coinbase\ntransaction.\n\nA future pull request could keep track of all those removed transactions\nand try to resurrect them after re-organizing onto the new chain, but\nI'm not sure it is worth writing that code for a case that never happens,\nand, if it does happen, should correct itself (wallets should re-broadcast\ntransactions that don't end up in the chain).",
      "tree": {
        "sha": "f9f201a18d092f50ce257a5ac59646278e8601ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9f201a18d092f50ce257a5ac59646278e8601ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlSAdBoACgkQdYgkL74406hwHACgyChNz5++a1jOh7Vf89SJtPyd\nMdkAnjtIZaT07D//wrF9CUStl+gWxCgi\n=hImK\n-----END PGP SIGNATURE-----",
        "payload": "tree f9f201a18d092f50ce257a5ac59646278e8601ba\nparent c3dabdbc4201a232d3a1b183f303657252cda58a\nauthor Gavin Andresen <gavinandresen@gmail.com> 1416860285 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1417704472 -0500\n\nFix mempool handling of coinbase spends\n\nThe logic for removing/resurrecting transactions from the memory\npool was broken for spends of coinbase transactions; they\nwere not being removed from the mempool when they should.\n\nFixed by having DisconnectTip() remove any transactions from the memory\npool that are descendants of the was-mature-but-is-now-immature coinbase\ntransaction.\n\nA future pull request could keep track of all those removed transactions\nand try to resurrect them after re-organizing onto the new chain, but\nI'm not sure it is worth writing that code for a case that never happens,\nand, if it does happen, should correct itself (wallets should re-broadcast\ntransactions that don't end up in the chain).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3dabdbc4201a232d3a1b183f303657252cda58a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3dabdbc4201a232d3a1b183f303657252cda58a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3dabdbc4201a232d3a1b183f303657252cda58a"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 112,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4d69599843aaacfc1c0d0168b6120aa2cb280988",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
        "patch": "@@ -19,6 +19,7 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/mempool_resurrect_test.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/mempool_coinbase_reorg.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/getchaintips.py --srcdir \"${BUILDDIR}/src\""
      },
      {
        "sha": "083e5e484c1359e1d95c101323c0a9e6f80d66f4",
        "filename": "qa/rpc-tests/mempool_coinbase_reorg.py",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/qa/rpc-tests/mempool_coinbase_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/qa/rpc-tests/mempool_coinbase_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_coinbase_reorg.py?ref=cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
        "patch": "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test re-org scenarios with a mempool that contains transactions\n+# that spend (directly or indirectly) coinbase transactions.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+class MempoolCoinbaseReorgTest(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        args = [\"-checkmempool\", \"-debug=mempool\"]\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(start_node(1, self.options.tmpdir, args))\n+        connect_nodes(self.nodes[1], 0)\n+        self.is_network_split = False\n+        self.sync_all\n+\n+    def create_tx(self, from_txid, to_address, amount):\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signresult = self.nodes[0].signrawtransaction(rawtx)\n+        assert_equal(signresult[\"complete\"], True)\n+        return signresult[\"hex\"]\n+\n+    def run_test(self):\n+        # At start, chain height is 200. Next block will be 201,\n+        # so coinbase 101 is allowed into the mempool.\n+\n+        # Mine two blocks. Height is 202, so coinbases 102 and 103\n+        # can be in mempool.\n+        new_blocks = self.nodes[1].setgenerate(True, 2)\n+        self.sync_all()\n+\n+        node0_address = self.nodes[0].getnewaddress()\n+        node1_address = self.nodes[1].getnewaddress()\n+\n+        # Three scenarios for re-orging coinbase spends in the memory pool:\n+        # 1. Direct coinbase spend  :  spend_101\n+        # 2. Indirect (coinbase spend in chain, child in mempool) : spend_102 and spend_102_1\n+        # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n+        # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n+        # and make sure the mempool code behaves correctly.\n+        b = [ self.nodes[0].getblockhash(n) for n in range(101, 104) ]\n+        coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n+        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+\n+        # Broadcast and mine spend_102 and 103:\n+        spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n+        spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n+        self.nodes[0].setgenerate(True, 1)\n+        \n+        # Create 102_1 and 103_1:\n+        spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n+        spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n+\n+        # Broadcast and mine 103_1:\n+        spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n+        self.nodes[0].setgenerate(True, 1)\n+\n+        # ... now put spend_101 and spend_102_1 in memory pools:\n+        spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n+        spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n+\n+        self.sync_all()\n+\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+\n+        # Use invalidateblock to re-org; only spend_101 should be left:\n+        for node in self.nodes:\n+            node.invalidateblock(new_blocks[0])\n+\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])\n+\n+if __name__ == '__main__':\n+    MempoolCoinbaseReorgTest().main()"
      },
      {
        "sha": "28f9a74ec2fb3352151319ee024cf03c2c454e19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
        "patch": "@@ -1873,6 +1873,23 @@ bool static DisconnectTip(CValidationState &state) {\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n         return state.Abort(\"Failed to read block\");\n+\n+    // Remove any will-be-too-immature-to-include-in-next-block spends from mempool:\n+    list<CTransaction> removedFromMempool;\n+    int immatureHeight = pindexDelete->nHeight-COINBASE_MATURITY+1;\n+    if (immatureHeight > 0)\n+    {\n+        const CBlockIndex* immatureIndex = pindexDelete->GetAncestor(immatureHeight);\n+        CBlock immatureBlock;\n+        if (ReadBlockFromDisk(immatureBlock, immatureIndex))\n+        {\n+            const CTransaction& immatureCoinbase = immatureBlock.vtx[0];\n+            mempool.remove(immatureCoinbase, removedFromMempool, true);\n+        }\n+        else\n+            return state.Abort(strprintf(\"Failed to read block at height %d\", immatureHeight));\n+    }\n+\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -1885,17 +1902,21 @@ bool static DisconnectTip(CValidationState &state) {\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n+\n     // Resurrect mempool transactions from the disconnected block.\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n         CValidationState stateDummy;\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n-            mempool.remove(tx, removed, true);\n+            mempool.remove(tx, removedFromMempool, true);\n     }\n     mempool.check(pcoinsTip);\n+\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n+\n+    mempool.check(pcoinsTip);\n+\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {"
      },
      {
        "sha": "f8fa4b3e669cd35e4e3bb4e8331a89bae512e293",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cdc176bfc94dd7ff2ff5ad398d03b2b69f71abdb",
        "patch": "@@ -448,7 +448,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n         if (!mapTx.count(hash))\n             continue;\n         const CTransaction& tx = mapTx[hash].GetTx();\n-        removed.push_front(tx);\n+        removed.push_back(tx);\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));"
      }
    ]
  }
]