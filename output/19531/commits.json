[
  {
    "sha": "8047fed26dd5077dacd490b35e481c77cb00722a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDQ3ZmVkMjZkZDUwNzdkYWNkNDkwYjM1ZTQ4MWM3N2NiMDA3MjJh",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-07-15T21:08:53Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-08-06T18:18:19Z"
      },
      "message": "add static_check_equal",
      "tree": {
        "sha": "2f828d28642a5c58c02ec72c45b4a10f38fdd2d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f828d28642a5c58c02ec72c45b4a10f38fdd2d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8047fed26dd5077dacd490b35e481c77cb00722a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8047fed26dd5077dacd490b35e481c77cb00722a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8047fed26dd5077dacd490b35e481c77cb00722a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8047fed26dd5077dacd490b35e481c77cb00722a/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aaff4813cc340764c99846513d58fc3553fcb6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aaff4813cc340764c99846513d58fc3553fcb6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aaff4813cc340764c99846513d58fc3553fcb6a"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "888cb81454c63907fd672156224b5c1ecfd5364c",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8047fed26dd5077dacd490b35e481c77cb00722a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8047fed26dd5077dacd490b35e481c77cb00722a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8047fed26dd5077dacd490b35e481c77cb00722a",
        "patch": "@@ -18,6 +18,7 @@\n #include <support/allocators/secure.h>\n #include <sync.h>     // for Mutex\n #include <util/time.h> // for GetTimeMicros()\n+#include <util/check.h> // for static_check_equal\n \n #include <stdlib.h>\n #include <thread>\n@@ -408,7 +409,7 @@ class RNGState {\n     {\n         assert(num <= 32);\n         unsigned char buf[64];\n-        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        static_check_equal(sizeof(buf), CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n         bool ret;\n         {\n             LOCK(m_mutex);"
      },
      {
        "sha": "b049a69eb0b7771ebe21d532a1cef877692461ba",
        "filename": "src/util/check.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8047fed26dd5077dacd490b35e481c77cb00722a/src/util/check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8047fed26dd5077dacd490b35e481c77cb00722a/src/util/check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/check.h?ref=8047fed26dd5077dacd490b35e481c77cb00722a",
        "patch": "@@ -56,4 +56,26 @@ T get_pure_r_value(T&& val)\n /** Identity function. Abort if the value compares equal to zero */\n #define Assert(val) [&]() -> decltype(get_pure_r_value(val))& { auto& check = (val); assert(#val && check); return check; }()\n \n+/** Helper for static_check_equal, no type inference **/\n+template <typename T1, typename T2, T1 value_1, T2 value_2, bool b>\n+struct static_check_struct {\n+    constexpr static_check_struct() {\n+        static_assert(b, \"Static Check Failed\");\n+    }\n+};\n+\n+/** Check if the template arguments are (operator) at compile time. Compiler error prints values if\n+ * failure. **/\n+#define static_check_macro_msg(f, s1, s2, msg) static_check_struct<decltype(s1), decltype(s2), s1, s2, s1 f s2>()\n+#define static_check_macro_nomsg(f, s1, s2)  static_check_macro_msg(f, s1, s2, \"\")\n+#define static_check_macro_selector(f, s1, s2, msg, FUNC, ...) FUNC\n+#define static_check_macro(...) static_check_macro_selector(__VA_ARGS__, static_check_macro_msg(__VA_ARGS__), static_check_macro_nomsg(__VA_ARGS__),)\n+#define static_check_equal(...) static_check_macro(==, __VA_ARGS__)\n+#define static_check_not_equal(...) static_check_macro(!=, __VA_ARGS__)\n+#define static_check_greater(...) static_check_macro(>, __VA_ARGS__)\n+#define static_check_less(...) static_check_macro(<, __VA_ARGS__)\n+#define static_check_greater_equal(...) static_check_macro(>=, __VA_ARGS__)\n+#define static_check_less_equal(...) static_check_macro(<=, __VA_ARGS__)\n+\n+\n #endif // BITCOIN_UTIL_CHECK_H"
      }
    ]
  }
]