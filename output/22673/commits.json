[
  {
    "sha": "3d71755b798fa36bebf8126c08283ac848d92b91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDcxNzU1Yjc5OGZhMzZiZWJmODEyNmMwODI4M2FjODQ4ZDkyYjkx",
    "commit": {
      "author": {
        "name": "pranabp-bit",
        "email": "pranabp@iitk.ac.in",
        "date": "2021-07-28T01:54:31Z"
      },
      "committer": {
        "name": "pranabp-bit",
        "email": "pranabp@iitk.ac.in",
        "date": "2021-08-10T13:33:51Z"
      },
      "message": "Add function walletestimatefee\n\nAdd test for walletestimatefee in feature_fee_estimation.py",
      "tree": {
        "sha": "839b36d416799a75542cf91469f0672d209a1072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/839b36d416799a75542cf91469f0672d209a1072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d71755b798fa36bebf8126c08283ac848d92b91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d71755b798fa36bebf8126c08283ac848d92b91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d71755b798fa36bebf8126c08283ac848d92b91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d71755b798fa36bebf8126c08283ac848d92b91/comments",
    "author": {
      "login": "pranabp-bit",
      "id": 58358551,
      "node_id": "MDQ6VXNlcjU4MzU4NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pranabp-bit",
      "html_url": "https://github.com/pranabp-bit",
      "followers_url": "https://api.github.com/users/pranabp-bit/followers",
      "following_url": "https://api.github.com/users/pranabp-bit/following{/other_user}",
      "gists_url": "https://api.github.com/users/pranabp-bit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pranabp-bit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pranabp-bit/subscriptions",
      "organizations_url": "https://api.github.com/users/pranabp-bit/orgs",
      "repos_url": "https://api.github.com/users/pranabp-bit/repos",
      "events_url": "https://api.github.com/users/pranabp-bit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pranabp-bit/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pranabp-bit",
      "id": 58358551,
      "node_id": "MDQ6VXNlcjU4MzU4NTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/58358551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pranabp-bit",
      "html_url": "https://github.com/pranabp-bit",
      "followers_url": "https://api.github.com/users/pranabp-bit/followers",
      "following_url": "https://api.github.com/users/pranabp-bit/following{/other_user}",
      "gists_url": "https://api.github.com/users/pranabp-bit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pranabp-bit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pranabp-bit/subscriptions",
      "organizations_url": "https://api.github.com/users/pranabp-bit/orgs",
      "repos_url": "https://api.github.com/users/pranabp-bit/repos",
      "events_url": "https://api.github.com/users/pranabp-bit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pranabp-bit/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8193294caba03b996370873db79cf4fc22a1e95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8193294caba03b996370873db79cf4fc22a1e95b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8193294caba03b996370873db79cf4fc22a1e95b"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 118,
      "deletions": 0
    },
    "files": [
      {
        "sha": "118df5bffa7c988234e5a3bed65b1665b79841c2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d71755b798fa36bebf8126c08283ac848d92b91/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d71755b798fa36bebf8126c08283ac848d92b91/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3d71755b798fa36bebf8126c08283ac848d92b91",
        "patch": "@@ -115,6 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n+    { \"walletestimatefee\", 0, \"conf_target\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },"
      },
      {
        "sha": "6886b3c14f9ef0808f4c56bf0f56c40c1aac0896",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d71755b798fa36bebf8126c08283ac848d92b91/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d71755b798fa36bebf8126c08283ac848d92b91/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3d71755b798fa36bebf8126c08283ac848d92b91",
        "patch": "@@ -30,6 +30,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/context.h>\n #include <wallet/feebumper.h>\n+#include <wallet/fees.h>\n #include <wallet/load.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n@@ -537,6 +538,89 @@ static RPCHelpMan sendtoaddress()\n     };\n }\n \n+static RPCHelpMan walletestimatefee()\n+{\n+    return RPCHelpMan{\"walletestimatefee\",\n+        \"\\nEstimates the fee per kilobyte needed for a transaction to be generated from this wallet,\\n\"\n+        \"taking into account mempool minfee and fallback fee.\\n\"\n+        \"In contrast, estimatesmartfee estimates ignores these and returns a pure fee estimate based on prior block confirmations.\\n\"\n+        \"Confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n+        \"for which the estimate is valid.\\n\",\n+        {\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks (1 - 1008)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"conservative\"}, \"The fee estimate mode.\\n\"\n+            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n+            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n+            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n+            \"                   target, but is not as responsive to short term drops in the\\n\"\n+            \"                   prevailing fee market. Must be one of (case insensitive):\\n\"\n+            \"\\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kvB (only present if no errors were encountered)\"},\n+                        {RPCResult::Type::STR, \"reason\", /* optional */ true, \"the reason for the estimated fee\"},\n+                        {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Errors encountered during processing (if there are any)\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"error\"},\n+                            }},\n+                        {RPCResult::Type::NUM, \"blocks\", \"block number where estimate was found (only when reason is estimatesmartfee)\\n\"\n+                        \"The request target will be clamped between 2 and the highest target\\n\"\n+                        \"fee estimation is able to return based on how long it has been running.\\n\"\n+                        \"An error is returned if not enough transactions and blocks\\n\"\n+                        \"have been observed to make an estimate for any number of blocks.\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"walletestimatefee\", \"6\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    // Wallet comments\n+    CCoinControl coin_control;\n+\n+    //dummy variable temp representing NULL fee_rate\n+    UniValue temp(UniValue::VNULL);\n+\n+    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[0], /* estimate_mode */ request.params[1], /* fee_rate */temp , /* override_min_fee */ false);\n+\n+    UniValue result(UniValue::VOBJ);\n+    UniValue errors(UniValue::VARR);\n+    FeeCalculation feeCalc;\n+    CFeeRate effective_feerate = GetMinimumFeeRate(*pwallet, coin_control, &feeCalc);\n+\n+    if (effective_feerate != CFeeRate(0)) {\n+        result.pushKV(\"feerate\", ValueFromAmount(effective_feerate.GetFeePerK()));\n+        //when reason is estimatesmartfee return block number where estimate was found\n+        if (feeCalc.reason!=FeeReason::MEMPOOL_MIN&&\n+            feeCalc.reason!=FeeReason::REQUIRED&&\n+            feeCalc.reason!=FeeReason::FALLBACK&&\n+            feeCalc.reason!=FeeReason::PAYTXFEE){\n+            result.pushKV(\"reason\", \"estimatesmartfee\" );\n+            result.pushKV(\"blocks\", feeCalc.returnedTarget);\n+        }\n+        else\n+        {\n+            result.pushKV(\"reason\",StringForFeeReason(feeCalc.reason) );\n+        }\n+    } else {\n+        errors.push_back(\"Insufficient data or no feerate found\");\n+        result.pushKV(\"errors\", errors);\n+    }\n+    return result;\n+},\n+    };\n+}\n+\n static RPCHelpMan listaddressgroupings()\n {\n     return RPCHelpMan{\"listaddressgroupings\",\n@@ -4688,6 +4772,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &unloadwallet,                   },\n     { \"wallet\",             &upgradewallet,                  },\n     { \"wallet\",             &walletcreatefundedpsbt,         },\n+    { \"wallet\",             &walletestimatefee,              },\n #ifdef ENABLE_EXTERNAL_SIGNER\n     { \"wallet\",             &walletdisplayaddress,           },\n #endif // ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "63811123e709f80e8b7d29f84d6429b01514db6d",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d71755b798fa36bebf8126c08283ac848d92b91/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d71755b798fa36bebf8126c08283ac848d92b91/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=3d71755b798fa36bebf8126c08283ac848d92b91",
        "patch": "@@ -154,6 +154,18 @@ def check_estimates(node, fees_seen):\n     check_raw_estimates(node, fees_seen)\n     check_smart_estimates(node, fees_seen)\n \n+def check_walletestimates(w, node):\n+    mempoolMinFee = node.getmempoolinfo()['mempoolminfee']\n+    for x in range (1,26):\n+        walletEstimateFee = w.walletestimatefee(x)\n+        estimateSmartFee = node.estimatesmartfee(x)\n+        if(estimateSmartFee['feerate'] > mempoolMinFee):\n+            assert_equal(walletEstimateFee['feerate'], estimateSmartFee['feerate'])\n+            assert_equal(walletEstimateFee['blocks'], estimateSmartFee['blocks'])\n+            assert_equal(w.walletestimatefee(x)['reason'], 'estimatesmartfee')\n+        else:\n+            assert_equal(walletEstimateFee['feerate'], mempoolMinFee)\n+\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n@@ -253,6 +265,14 @@ def run_test(self):\n \n         self.sync_all()\n \n+        self.nodes[1].createwallet(wallet_name=\"w1\",)\n+        w1 = self.nodes[1].get_wallet_rpc(\"w1\")\n+\n+        # check that the feerate is equal to the fallbackfee (Default for this test: 0.0002) in absence of sufficient transactions for estimation.\n+        for x in range (1,26):\n+            assert_equal(w1.walletestimatefee(x)['feerate'], Decimal('0.0002'))\n+            assert_equal(w1.walletestimatefee(x)['reason'], 'Fallback fee')\n+\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n@@ -263,12 +283,16 @@ def run_test(self):\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])\n             check_estimates(self.nodes[1], self.fees_per_kb)\n+            # check that the feerate is equal to that estimated by estimatesmartfee when mempoolminfee is low\n+            check_walletestimates(w1, self.nodes[1])\n \n             self.log.info(\"Creating transactions and mining them at a block size that is just big enough\")\n             # Generate transactions while mining 10 more blocks, this time with node1\n             # which mines blocks with capacity just above the rate that transactions are being created\n             self.transact_and_mine(10, self.nodes[1])\n             check_estimates(self.nodes[1], self.fees_per_kb)\n+            # check that the feerate is equal to that estimated by estimatesmartfee when mempoolminfee is low\n+            check_walletestimates(w1, self.nodes[1])\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:\n@@ -277,6 +301,14 @@ def run_test(self):\n         self.sync_blocks(self.nodes[0:3], wait=.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n+        check_walletestimates(w1, self.nodes[1])\n+\n+        # check that the effective feerate is equal to the mempoolminfee when mempoolminfee is higher than the estimatesmartfee\n+        self.log.info(\"Estimates after restarting node with high MempoolMinFee\")\n+        self.restart_node(1, extra_args=['-minrelaytxfee=0.0003'])\n+        self.nodes[1].createwallet(wallet_name=\"w2\")\n+        w2 = self.nodes[1].get_wallet_rpc(\"w2\")\n+        check_walletestimates(w2, self.nodes[1])\n \n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])"
      }
    ]
  }
]