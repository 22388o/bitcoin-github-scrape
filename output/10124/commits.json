[
  {
    "sha": "45ce471ab01e4d6facad69df846592fd51a5072c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWNlNDcxYWIwMWU0ZDZmYWNhZDY5ZGY4NDY1OTJmZDUxYTUwNzJj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-31T20:44:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-08T02:16:41Z"
      },
      "message": "Reduce spammy test logging\n\nThis commit reduces spammy logging by the test framework. It truncates\nlogging send/receive message in mininode to 500 characters.  mininode\nwas previously logging the entire message sent received, which can be up\nto 1MB for a full block.",
      "tree": {
        "sha": "bc307668fe01addda16e69a269061e09cf319eca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc307668fe01addda16e69a269061e09cf319eca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45ce471ab01e4d6facad69df846592fd51a5072c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45ce471ab01e4d6facad69df846592fd51a5072c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45ce471ab01e4d6facad69df846592fd51a5072c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45ce471ab01e4d6facad69df846592fd51a5072c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d57d46f2ffdf6ffaee2c9e357eb0c834b3ad34b8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=45ce471ab01e4d6facad69df846592fd51a5072c",
        "patch": "@@ -1749,7 +1749,7 @@ def got_data(self):\n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n-        logger.debug(\"Send message to %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"send\", message)\n         command = message.command\n         data = message.serialize()\n         tmsg = self.MAGIC_BYTES[self.network]\n@@ -1771,9 +1771,19 @@ def got_message(self, message):\n                 self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n             self.send_message(self.messagemap[b'ping']())\n-        logger.debug(\"Received message from %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"receive\", message)\n         self.cb.deliver(self, message)\n \n+    def _log_message(self, direction, msg):\n+        if direction == \"send\":\n+            log_message = \"Send message to \"\n+        elif direction == \"receive\":\n+            log_message = \"Received message from \"\n+        log_message += \"%s:%d: %s\" % (self.dstaddr, self.dstport, repr(msg)[:500])\n+        if len(log_message) > 500:\n+            log_message += \"... (msg truncated)\"\n+        logger.debug(log_message)\n+\n     def disconnect_node(self):\n         self.disconnect = True\n "
      },
      {
        "sha": "899b0b5a1b69e2d2fe66c1b2087186a513090065",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=45ce471ab01e4d6facad69df846592fd51a5072c",
        "patch": "@@ -315,7 +315,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n+    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime())]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")"
      }
    ]
  }
]