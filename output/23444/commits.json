[
  {
    "sha": "fa7cc0350c437852c2974682b3fb149aeda9aede",
    "node_id": "C_kwDOABII59oAKGZhN2NjMDM1MGM0Mzc4NTJjMjk3NDY4MmIzZmIxNDlhZWRhOWFlZGU",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-05T16:49:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-10T11:21:16Z"
      },
      "message": "fuzz: Add regression test for wallet crash",
      "tree": {
        "sha": "3aea2ce79192ef4539888a732fba54cbbf6246d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aea2ce79192ef4539888a732fba54cbbf6246d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7cc0350c437852c2974682b3fb149aeda9aede",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjMyAwAjvZTUmnWOIFbxBpJNHOWuyrqlyccWjVG0HfKXiQpHU2IhCsRk4kb9qy6\n+YsuJra+O1n6s3yjpDMbEd6bkJSxKUVOUjs2rUSvjKEkNGywEq5tHKokGoXNnjGO\nWl1N6miZvwkTvWFgdmz+X4OUvDNJvakfUTSI9D0UVRId24ElCp7il5L0dcMNykNU\nBazc6SL+OOH2XlGAr+rIqnxk3mf3qY4wIFg5pBqX7ESIt1SDtYt2xaj/wqkzSppm\nlYXrQc37VV4abzkkbVo2DTy5EsODSyQEIINe10RO+1zJNpbUrpTh0nWsBT9m/nlo\nORUcaYH0LkZV6/3T2g/Xm89XyOPao0slwJMMtZuUNcHt6LWh04fylNZccS4wVAeP\nyAbaCXP9nv2cJ000Q6CHcqFIrs/WSaKjY+eWKjVX5wUTtKyjceBjkuGEczkcMFxH\ncIhzyWCHEz9gORQUCsaCiblYRdQMH+Gmf71KUevJmUGB8z/1+7zO+83Nc3iwmtft\nNuDBBDgI\n=VrDi\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aea2ce79192ef4539888a732fba54cbbf6246d2\nparent 8ae4ba481ce8f7da173bef24432729c87a36cb70\nauthor MarcoFalke <falke.marco@gmail.com> 1636130940 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636543276 +0100\n\nfuzz: Add regression test for wallet crash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7cc0350c437852c2974682b3fb149aeda9aede",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7cc0350c437852c2974682b3fb149aeda9aede",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7cc0350c437852c2974682b3fb149aeda9aede/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ae4ba481ce8f7da173bef24432729c87a36cb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ae4ba481ce8f7da173bef24432729c87a36cb70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ae4ba481ce8f7da173bef24432729c87a36cb70"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 59,
      "deletions": 3
    },
    "files": [
      {
        "sha": "48db877b3c6b8626b72fc332ea326f65898d47b0",
        "filename": "src/wallet/test/fuzz/notifications.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7cc0350c437852c2974682b3fb149aeda9aede/src/wallet/test/fuzz/notifications.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7cc0350c437852c2974682b3fb149aeda9aede/src/wallet/test/fuzz/notifications.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/fuzz/notifications.cpp?ref=fa7cc0350c437852c2974682b3fb149aeda9aede",
        "patch": "@@ -2,19 +2,24 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <policy/policy.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <test/util/setup_common.h>\n #include <util/translation.h>\n+#include <wallet/coincontrol.h>\n #include <wallet/context.h>\n+#include <wallet/fees.h>\n #include <wallet/receive.h>\n+#include <wallet/spend.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n #include <cassert>\n #include <cstdint>\n+#include <numeric>\n #include <string>\n #include <vector>\n \n@@ -65,7 +70,7 @@ struct FuzzedWallet {\n         UnloadWallet(std::move(wallet));\n         fs::remove_all(GetWalletDir() / name);\n     }\n-    CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n+    CTxDestination GetDestination(FuzzedDataProvider& fuzzed_data_provider)\n     {\n         auto type{fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)};\n         if (type == OutputType::BECH32M) {\n@@ -79,7 +84,55 @@ struct FuzzedWallet {\n             assert(wallet->GetNewChangeDestination(type, dest, error));\n         }\n         assert(error.empty());\n-        return GetScriptForDestination(dest);\n+        return dest;\n+    }\n+    CScript GetScriptPubKey(FuzzedDataProvider& fuzzed_data_provider)\n+    {\n+        return GetScriptForDestination(GetDestination(fuzzed_data_provider));\n+    }\n+    void FundTx(FuzzedDataProvider& fuzzed_data_provider, CMutableTransaction tx)\n+    {\n+        // The fee of \"tx\" is 0, so this is the total input and output amount\n+        const CAmount total_amt{\n+            std::accumulate(tx.vout.begin(), tx.vout.end(), CAmount{}, [](CAmount t, const CTxOut& out) { return t + out.nValue; })};\n+        const uint32_t tx_size(GetVirtualTransactionSize(CTransaction{tx}));\n+        std::set<int> subtract_fee_from_outputs;\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            for (size_t i{}; i < tx.vout.size(); ++i) {\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    subtract_fee_from_outputs.insert(i);\n+                }\n+            }\n+        }\n+        CCoinControl coin_control;\n+        coin_control.m_add_inputs = fuzzed_data_provider.ConsumeBool();\n+        CallOneOf(\n+            fuzzed_data_provider,\n+            [&] { coin_control.destChange = GetDestination(fuzzed_data_provider); },\n+            [&] { coin_control.m_change_type.emplace(fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES)); },\n+            [&] { /* no op (leave uninitialized) */ });\n+        coin_control.fAllowWatchOnly = fuzzed_data_provider.ConsumeBool();\n+        coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\n+        {\n+            auto& r{coin_control.m_signal_bip125_rbf};\n+            CallOneOf(\n+                fuzzed_data_provider, [&] { r = true; }, [&] { r = false; }, [&] { r = std::nullopt; });\n+        }\n+        coin_control.m_feerate = CFeeRate{\n+            // A fee of this range should cover all cases\n+            fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, 2 * total_amt),\n+            tx_size,\n+        };\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            *coin_control.m_feerate += GetMinimumFeeRate(*wallet, coin_control, nullptr);\n+        }\n+        coin_control.fOverrideFeeRate = fuzzed_data_provider.ConsumeBool();\n+        // Add solving data (m_external_provider and SelectExternal)?\n+\n+        CAmount fee_out;\n+        int change_position{fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, tx.vout.size() - 1)};\n+        bilingual_str error;\n+        (void)FundTransaction(*wallet, tx, fee_out, change_position, error, /*lockUnspents=*/false, subtract_fee_from_outputs, coin_control);\n     }\n };\n \n@@ -100,7 +153,7 @@ FUZZ_TARGET_INIT(wallet_notifications, initialize_setup)\n     using Coins = std::set<std::tuple<CAmount, COutPoint>>;\n     std::vector<std::tuple<Coins, CBlock>> chain;\n     {\n-        // Add the inital entry\n+        // Add the initial entry\n         chain.emplace_back();\n         auto& [coins, block]{chain.back()};\n         coins.emplace(total_amount, COutPoint{uint256::ONE, 1});\n@@ -138,6 +191,9 @@ FUZZ_TARGET_INIT(wallet_notifications, initialize_setup)\n                     tx.vout.emplace_back(in, wallet.GetScriptPubKey(fuzzed_data_provider));\n                     // Add tx to block\n                     block.vtx.emplace_back(MakeTransactionRef(tx));\n+                    // Check that funding the tx doesn't crash the wallet\n+                    a.FundTx(fuzzed_data_provider, tx);\n+                    b.FundTx(fuzzed_data_provider, tx);\n                 }\n                 // Mine block\n                 a.wallet->blockConnected(block, chain.size());"
      }
    ]
  },
  {
    "sha": "fa032325a7aadf7df61ab875af1fb3424e4db899",
    "node_id": "C_kwDOABII59oAKGZhMDMyMzI1YTdhYWRmN2RmNjFhYjg3NWFmMWZiMzQyNGU0ZGI4OTk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-10T13:08:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-10T13:29:45Z"
      },
      "message": "fuzz: Make descriptor wallet test deterministic",
      "tree": {
        "sha": "ce776712a38e6117cc91027ca26859314ba74184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce776712a38e6117cc91027ca26859314ba74184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa032325a7aadf7df61ab875af1fb3424e4db899",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgSNwwAnwuegIiwN7bFqN3BfHhh5CyV4SwqSHktgHejbW09sE1u6Q71LARDRpMX\nyqay/VWnECdoDm/4qVC/36YQgKvJMBK1k2UNr2qzE/4J7j61mreHJRbSWT/3gDnj\nTcpm8E3VrbtHtWIrj2yLXal4TeNLGYHxQ3w5QwHXqi6ZaezRfidc+SckKp0jO0M6\nmU+sVaHLdIhZ9oH5VvB1/HtUWin/XcpqI88h6panmAheIXpPMoecXwauhFnrHtFs\nrXqwBR/siTh02rMtUAKlq+XzHL9Nj2TV3P63+WFD7/pyaX4H2ele9Ep3JzKUXsWd\nGgiHDMKTE3uxUeVqq1zjnnJC/DCghGP0I2Ug+bFkjFl82VgMva9YSZ6+yNl5ahsN\nk9hCPYompJ/tkS3KZWnQtZEwwenbUGKOp1DN5A+AH5959oJLNUO3sa6Db4OhxEV0\nSmo/1lJ+KpXvOZ+4kR/BiTBqQz5Ntn1reX08a00394Nm4XkFW7FpfyLrJM18/Qp0\nHjWg2eHC\n=Vtvj\n-----END PGP SIGNATURE-----",
        "payload": "tree ce776712a38e6117cc91027ca26859314ba74184\nparent fa7cc0350c437852c2974682b3fb149aeda9aede\nauthor MarcoFalke <falke.marco@gmail.com> 1636549696 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636550985 +0100\n\nfuzz: Make descriptor wallet test deterministic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa032325a7aadf7df61ab875af1fb3424e4db899",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa032325a7aadf7df61ab875af1fb3424e4db899",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa032325a7aadf7df61ab875af1fb3424e4db899/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7cc0350c437852c2974682b3fb149aeda9aede",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7cc0350c437852c2974682b3fb149aeda9aede",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7cc0350c437852c2974682b3fb149aeda9aede"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 41,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3e7dd9cb9f60e5f3432401d019eced0a446f5479",
        "filename": "src/wallet/test/fuzz/notifications.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 4,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa032325a7aadf7df61ab875af1fb3424e4db899/src/wallet/test/fuzz/notifications.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa032325a7aadf7df61ab875af1fb3424e4db899/src/wallet/test/fuzz/notifications.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/fuzz/notifications.cpp?ref=fa032325a7aadf7df61ab875af1fb3424e4db899",
        "patch": "@@ -32,6 +32,36 @@ void initialize_setup()\n     g_setup = testing_setup.get();\n }\n \n+void ImportDescriptors(CWallet& wallet, const std::string& seed_insecure)\n+{\n+    const std::vector<std::tuple<std::string, bool>> DESCS{\n+        {\"pkh(%s/44'/1'/0'/%s/*)\", false},\n+        {\"sh(wpkh(%s/49'/1'/0'/%s/*))\", false},\n+        {\"wpkh(%s/84'/1'/0'/%s/*)\", false},\n+        {\"pkh(%s/44'/1'/0'/%s/*)\", true},\n+        {\"sh(wpkh(%s/49'/1'/0'/%s/*))\", true},\n+        {\"wpkh(%s/84'/1'/0'/%s/*)\", true},\n+    };\n+    for (const auto& [desc_fmt, internal] : DESCS) {\n+        const auto descriptor{(strprintf)(desc_fmt, seed_insecure, int{internal})};\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /*require_checksum=*/false);\n+        assert(parsed_desc);\n+        assert(error.empty());\n+        assert(parsed_desc->IsRange());\n+        assert(parsed_desc->IsSingleType());\n+        assert(!keys.keys.empty());\n+        WalletDescriptor w_desc{std::move(parsed_desc), /*timestamp=*/0, /*range_start=*/0, /*range_end=*/1, /*next_index=*/0};\n+        assert(!wallet.GetDescriptorScriptPubKeyMan(w_desc));\n+        LOCK(wallet.cs_wallet);\n+        auto spk_manager{wallet.AddWalletDescriptor(w_desc, keys, /*label=*/\"\", internal)};\n+        assert(spk_manager);\n+        wallet.AddActiveScriptPubKeyMan(spk_manager->GetID(), *Assert(w_desc.descriptor->GetOutputType()), internal);\n+    }\n+}\n+\n /**\n  * Wraps a descriptor wallet for fuzzing. The constructor writes the sqlite db\n  * to disk, the destructor deletes it.\n@@ -40,14 +70,14 @@ struct FuzzedWallet {\n     ArgsManager args;\n     WalletContext context;\n     std::shared_ptr<CWallet> wallet;\n-    FuzzedWallet(const std::string& name)\n+    FuzzedWallet(const std::string& name, const std::string& seed_insecure)\n     {\n         context.args = &args;\n         context.chain = g_setup->m_node.chain.get();\n \n         DatabaseOptions options;\n         options.require_create = true;\n-        options.create_flags = WALLET_FLAG_DESCRIPTORS;\n+        options.create_flags = WALLET_FLAG_DESCRIPTORS | WALLET_FLAG_BLANK_WALLET;\n         const std::optional<bool> load_on_start;\n         gArgs.ForceSetArg(\"-keypool\", \"0\"); // Avoid timeout in TopUp()\n \n@@ -59,6 +89,7 @@ struct FuzzedWallet {\n         assert(error.empty());\n         assert(warnings.empty());\n         assert(wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+        ImportDescriptors(*wallet, seed_insecure);\n     }\n     ~FuzzedWallet()\n     {\n@@ -143,8 +174,14 @@ FUZZ_TARGET_INIT(wallet_notifications, initialize_setup)\n     // without fee. Thus, the balance of the wallets should always equal the\n     // total amount.\n     const auto total_amount{ConsumeMoney(fuzzed_data_provider)};\n-    FuzzedWallet a{\"fuzzed_wallet_a\"};\n-    FuzzedWallet b{\"fuzzed_wallet_b\"};\n+    FuzzedWallet a{\n+        \"fuzzed_wallet_a\",\n+        \"tprv8ZgxMBicQKsPfCunYTF18sEmEyjz8TfhGnZ3BoVAhkqLv7PLkQgmoG2Ecsp4JuqciWnkopuEwShit7st743fdmB9cMD4tznUkcs33vK51K9\",\n+    };\n+    FuzzedWallet b{\n+        \"fuzzed_wallet_b\",\n+        \"tprv8ZgxMBicQKsPd1QwsGgzfu2pcPYbBosZhJknqreRHgsWx32nNEhMjGQX2cgFL8n6wz9xdDYwLcs78N4nsCo32cxEX8RBtwGsEGgybLiQJfk\",\n+    };\n \n     // Keep track of all coins in this test.\n     // Each tuple in the chain represents the coins and the block created with"
      }
    ]
  }
]