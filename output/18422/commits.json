[
  {
    "sha": "14e8cf974a7a317796ef8e97e5cf9c355ceff0ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGU4Y2Y5NzRhN2EzMTc3OTZlZjhlOTdlNWNmOWMzNTVjZWZmMGVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-18T22:23:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-25T01:48:27Z"
      },
      "message": "[consensus] MOVEONLY: Move single-sig checking EvalScript code to EvalChecksig\n\nThis is in preparation for adding different signature verification rules,\nspecifically tapscript (BIP 342), which interprets opcode 0xac and 0xad\nas Schnorr signature verifications.",
      "tree": {
        "sha": "4f5767948d5a2108834620749564ea39da56d2b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f5767948d5a2108834620749564ea39da56d2b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac579ada7e83a1b8100d611412f9ede885a4e522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac579ada7e83a1b8100d611412f9ede885a4e522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac579ada7e83a1b8100d611412f9ede885a4e522"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 31,
      "deletions": 19
    },
    "files": [
      {
        "sha": "d60d29b9b65c48bd386dbe8bad0afa1e61e60776",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 19,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e8cf974a7a317796ef8e97e5cf9c355ceff0ee/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=14e8cf974a7a317796ef8e97e5cf9c355ceff0ee",
        "patch": "@@ -342,6 +342,35 @@ class ConditionStack {\n };\n }\n \n+/** Helper for OP_CHECKSIG and OP_CHECKSIGVERIFY\n+ *\n+ * A return value of false means the script fails entirely. When true is returned, the\n+ * fSuccess variable indicates whether the signature check itself succeeded.\n+ */\n+static bool EvalChecksig(const valtype& vchSig, const valtype& vchPubKey, CScript::const_iterator pbegincodehash, CScript::const_iterator pend, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror, bool& fSuccess)\n+{\n+    // Subset of script starting at the most recent codeseparator\n+    CScript scriptCode(pbegincodehash, pend);\n+\n+    // Drop the signature in pre-segwit scripts but not segwit scripts\n+    if (sigversion == SigVersion::BASE) {\n+        int found = FindAndDelete(scriptCode, CScript() << vchSig);\n+        if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+            return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n+    }\n+\n+    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n+        //serror is set\n+        return false;\n+    }\n+    fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n+\n+    if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())\n+        return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);\n+\n+    return true;\n+}\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n@@ -985,25 +1014,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     valtype& vchSig    = stacktop(-2);\n                     valtype& vchPubKey = stacktop(-1);\n \n-                    // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n-\n-                    // Drop the signature in pre-segwit scripts but not segwit scripts\n-                    if (sigversion == SigVersion::BASE) {\n-                        int found = FindAndDelete(scriptCode, CScript() << vchSig);\n-                        if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n-                            return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n-                    }\n-\n-                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n-                        //serror is set\n-                        return false;\n-                    }\n-                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n-\n-                    if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())\n-                        return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);\n-\n+                    bool fSuccess = true;\n+                    if (!EvalChecksig(vchSig, vchPubKey, pbegincodehash, pend, flags, checker, sigversion, serror, fSuccess)) return false;\n                     popstack(stack);\n                     popstack(stack);\n                     stack.push_back(fSuccess ? vchTrue : vchFalse);"
      }
    ]
  }
]