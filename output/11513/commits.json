[
  {
    "sha": "fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzAxNzZkMDFlNTdjMGY1MTJkNmE4YWRmNGQ1MGRmMzU2MTIxYjAy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-17T17:09:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] use python3 for authproxy.py",
      "tree": {
        "sha": "a0525363e4c228546d9e00993516226bbbf6df91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0525363e4c228546d9e00993516226bbbf6df91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0176d01e57c0f512d6a8adf4d50df356121b02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c66cea2d18682de1eef544fc3b74a1487a1741c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c66cea2d18682de1eef544fc3b74a1487a1741c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8b2f31624a5051f918d8eef06adf6c5efd41ab20",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0176d01e57c0f512d6a8adf4d50df356121b02/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0176d01e57c0f512d6a8adf4d50df356121b02/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "patch": "@@ -33,20 +33,14 @@\n - uses standard Python json lib\n \"\"\"\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n import base64\n import decimal\n+import http.client\n import json\n import logging\n import socket\n import time\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import urllib.parse\n \n USER_AGENT = \"AuthServiceProxy/0.1\"\n \n@@ -60,7 +54,7 @@ def __init__(self, rpc_error):\n             errmsg = '%(message)s (%(code)i)' % rpc_error\n         except (KeyError, TypeError):\n             errmsg = ''\n-        Exception.__init__(self, errmsg)\n+        super().__init__(errmsg)\n         self.error = rpc_error\n \n \n@@ -77,7 +71,7 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n         self.__service_url = service_url\n         self._service_name = service_name\n         self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n-        self.__url = urlparse.urlparse(service_url)\n+        self.__url = urllib.parse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n         else:\n@@ -98,10 +92,10 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n             # Callables re-use the connection of the original proxy\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n-            self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port,\n                                                   timeout=timeout)\n         else:\n-            self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port,\n                                                  timeout=timeout)\n \n     def __getattr__(self, name):\n@@ -124,7 +118,7 @@ def _request(self, method, path, postdata):\n         try:\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n-        except httplib.BadStatusLine as e:\n+        except http.client.BadStatusLine as e:\n             if e.line == \"''\": # if connection was closed, try again\n                 self.__conn.close()\n                 self.__conn.request(method, path, postdata, headers)"
      }
    ]
  },
  {
    "sha": "323d8f61e99cd867fee653694b42e10776324a5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjNkOGY2MWU5OWNkODY3ZmVlNjUzNjk0YjQyZTEwNzc2MzI0YTVi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-17T17:16:57Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] fix flake8 warnings in authproxy.py",
      "tree": {
        "sha": "33ecd38e384c54a0b8ddcbdfff5f3607766e20de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33ecd38e384c54a0b8ddcbdfff5f3607766e20de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323d8f61e99cd867fee653694b42e10776324a5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/323d8f61e99cd867fee653694b42e10776324a5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0176d01e57c0f512d6a8adf4d50df356121b02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0176d01e57c0f512d6a8adf4d50df356121b02"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 11,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e3ae0f7930f4335cfcdf421de5850c1be844115c",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/323d8f61e99cd867fee653694b42e10776324a5b/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/323d8f61e99cd867fee653694b42e10776324a5b/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=323d8f61e99cd867fee653694b42e10776324a5b",
        "patch": "@@ -42,9 +42,8 @@\n import time\n import urllib.parse\n \n-USER_AGENT = \"AuthServiceProxy/0.1\"\n-\n HTTP_TIMEOUT = 30\n+USER_AGENT = \"AuthServiceProxy/0.1\"\n \n log = logging.getLogger(\"BitcoinRPC\")\n \n@@ -70,7 +69,7 @@ class AuthServiceProxy(object):\n     def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):\n         self.__service_url = service_url\n         self._service_name = service_name\n-        self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n+        self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n         self.__url = urllib.parse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n@@ -92,11 +91,9 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n             # Callables re-use the connection of the original proxy\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n-            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port,\n-                                                  timeout=timeout)\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port, timeout=timeout)\n         else:\n-            self.__conn = http.client.HTTPConnection(self.__url.hostname, port,\n-                                                 timeout=timeout)\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port, timeout=timeout)\n \n     def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):\n@@ -119,13 +116,13 @@ def _request(self, method, path, postdata):\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n         except http.client.BadStatusLine as e:\n-            if e.line == \"''\": # if connection was closed, try again\n+            if e.line == \"''\":  # if connection was closed, try again\n                 self.__conn.close()\n                 self.__conn.request(method, path, postdata, headers)\n                 return self._get_response()\n             else:\n                 raise\n-        except (BrokenPipeError,ConnectionResetError):\n+        except (BrokenPipeError, ConnectionResetError):\n             # Python 3.5+ raises BrokenPipeError instead of BadStatusLine when the connection was reset\n             # ConnectionResetError happens on FreeBSD with Python 3.4\n             self.__conn.close()\n@@ -135,8 +132,8 @@ def _request(self, method, path, postdata):\n     def get_request(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n-        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n-                                 json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+        log.debug(\"-%s-> %s %s\" % (AuthServiceProxy.__id_count, self._service_name,\n+                                   json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         if args and argsn:\n             raise ValueError('Cannot handle both named and positional arguments')\n         return {'version': '1.1',\n@@ -157,7 +154,7 @@ def __call__(self, *args, **argsn):\n \n     def batch(self, rpc_call_list):\n         postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n-        log.debug(\"--> \"+postdata)\n+        log.debug(\"--> \" + postdata)\n         return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n \n     def _get_response(self):\n@@ -184,9 +181,9 @@ def _get_response(self):\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         elapsed = time.time() - req_start_time\n         if \"error\" in response and response[\"error\"] is None:\n-            log.debug(\"<-%s- [%.6f] %s\"%(response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+            log.debug(\"<-%s- [%.6f] %s\" % (response[\"id\"], elapsed, json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n-            log.debug(\"<-- [%.6f] %s\"%(elapsed,responsedata))\n+            log.debug(\"<-- [%.6f] %s\" % (elapsed, responsedata))\n         return response\n \n     def __truediv__(self, relative_uri):"
      }
    ]
  },
  {
    "sha": "8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjllMzYyN2VmMDU0Yzk3MzJmNGU1MjljNmVkNDI5ZWQ4ZGM3MTgz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-10T14:49:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:45:49Z"
      },
      "message": "[tests] authproxy.py: tidy up __init__()",
      "tree": {
        "sha": "f2f6988f653bb61031842d6f0177439481580fca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2f6988f653bb61031842d6f0177439481580fca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "323d8f61e99cd867fee653694b42e10776324a5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323d8f61e99cd867fee653694b42e10776324a5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/323d8f61e99cd867fee653694b42e10776324a5b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 3,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1a3acf48a34a2fe377b71948e2fb4ec2b37332af",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9e3627ef054c9732f4e529c6ed429ed8dc7183/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "patch": "@@ -71,19 +71,9 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n         self._service_name = service_name\n         self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n         self.__url = urllib.parse.urlparse(service_url)\n-        if self.__url.port is None:\n-            port = 80\n-        else:\n-            port = self.__url.port\n-        (user, passwd) = (self.__url.username, self.__url.password)\n-        try:\n-            user = user.encode('utf8')\n-        except AttributeError:\n-            pass\n-        try:\n-            passwd = passwd.encode('utf8')\n-        except AttributeError:\n-            pass\n+        port = 80 if self.__url.port is None else self.__url.port\n+        user = None if self.__url.username is None else self.__url.username.encode('utf8')\n+        passwd = None if self.__url.password is None else self.__url.password.encode('utf8')\n         authpair = user + b':' + passwd\n         self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n "
      }
    ]
  },
  {
    "sha": "f893085325b57dd07bde78a01e5dcb7d303154de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODkzMDg1MzI1YjU3ZGQwN2JkZTc4YTAxZTVkY2I3ZDMwMzE1NGRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:46:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T01:46:23Z"
      },
      "message": "[tests] Don't subclass from object for Python 3",
      "tree": {
        "sha": "dd0fcd3155fde2b3a50f6cfee75f482d857c185b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd0fcd3155fde2b3a50f6cfee75f482d857c185b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f893085325b57dd07bde78a01e5dcb7d303154de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f893085325b57dd07bde78a01e5dcb7d303154de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f893085325b57dd07bde78a01e5dcb7d303154de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f893085325b57dd07bde78a01e5dcb7d303154de/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9e3627ef054c9732f4e529c6ed429ed8dc7183",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9e3627ef054c9732f4e529c6ed429ed8dc7183"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "f19b845a329c0e135ef299bec2d2d2e0f20a6ae5",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -20,7 +20,7 @@\n from test_framework.script import *\n import struct\n \n-class PreviousSpendableOutput(object):\n+class PreviousSpendableOutput():\n     def __init__(self, tx = CTransaction(), n = -1):\n         self.tx = tx\n         self.n = n  # the output we're spending"
      },
      {
        "sha": "f803367668b4e9bd88c9b5b18be7cc0fb83e0a9d",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -89,7 +89,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n-class UTXO(object):\n+class UTXO():\n     def __init__(self, sha256, n, nValue):\n         self.sha256 = sha256\n         self.n = n"
      },
      {
        "sha": "bd3a3b3fabebe0f2d306733d83f827a1810b9b91",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -62,7 +62,7 @@ def EncodeDecimal(o):\n         return str(o)\n     raise TypeError(repr(o) + \" is not JSON serializable\")\n \n-class AuthServiceProxy(object):\n+class AuthServiceProxy():\n     __id_count = 0\n \n     # ensure_ascii: escape unicode as \\uXXXX, passed to json.dumps"
      },
      {
        "sha": "ad047224882db70b1cfbeef1c4686d8772aea05b",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -10,7 +10,7 @@\n \n logger = logging.getLogger(\"TestFramework.blockstore\")\n \n-class BlockStore(object):\n+class BlockStore():\n     \"\"\"BlockStore helper class.\n \n     BlockStore keeps a map of blocks and implements helper functions for\n@@ -127,7 +127,7 @@ def get_locator(self, current_tip=None):\n         locator.vHave = r\n         return locator\n \n-class TxStore(object):\n+class TxStore():\n     def __init__(self, datadir):\n         self.txDB = dbmd.open(datadir + \"/transactions\", 'c')\n "
      },
      {
        "sha": "b0417e02d815845b8a8afd017a50964513de037f",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -27,7 +27,7 @@\n \n global mininode_lock\n \n-class RejectResult(object):\n+class RejectResult():\n     \"\"\"Outcome that expects rejection of a transaction or block.\"\"\"\n     def __init__(self, code, reason=b''):\n         self.code = code\n@@ -156,13 +156,13 @@ def send_mempool(self):\n #    across all connections.  (If outcome of final tx is specified as true\n #    or false, then only the last tx is tested against outcome.)\n \n-class TestInstance(object):\n+class TestInstance():\n     def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n         self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n \n-class TestManager(object):\n+class TestManager():\n \n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen"
      },
      {
        "sha": "ddc3c515b2c699cfcf304573e1c9cb39a2c2d2ab",
        "filename": "test/functional/test_framework/coverage.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/coverage.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -14,7 +14,7 @@\n REFERENCE_FILENAME = 'rpc_interface.txt'\n \n \n-class AuthServiceProxyWrapper(object):\n+class AuthServiceProxyWrapper():\n     \"\"\"\n     An object that wraps AuthServiceProxy to record specific RPC calls.\n "
      },
      {
        "sha": "aa91fb5b0d83272ab24255f85a73c59bcee1e8c4",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -84,7 +84,7 @@ def _check_result(val, func, args):\n ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n \n-class CECKey(object):\n+class CECKey():\n     \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n \n     POINT_CONVERSION_COMPRESSED = 2"
      },
      {
        "sha": "339efb72c22130b4a3f7712e69c539bbee3b8ed7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -219,7 +219,7 @@ def ToHex(obj):\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n-class CAddress(object):\n+class CAddress():\n     def __init__(self):\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n@@ -246,7 +246,7 @@ def __repr__(self):\n \n MSG_WITNESS_FLAG = 1<<30\n \n-class CInv(object):\n+class CInv():\n     typemap = {\n         0: \"Error\",\n         1: \"TX\",\n@@ -275,7 +275,7 @@ def __repr__(self):\n             % (self.typemap[self.type], self.hash)\n \n \n-class CBlockLocator(object):\n+class CBlockLocator():\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.vHave = []\n@@ -295,7 +295,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vHave))\n \n \n-class COutPoint(object):\n+class COutPoint():\n     def __init__(self, hash=0, n=0):\n         self.hash = hash\n         self.n = n\n@@ -314,7 +314,7 @@ def __repr__(self):\n         return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n \n \n-class CTxIn(object):\n+class CTxIn():\n     def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n@@ -342,7 +342,7 @@ def __repr__(self):\n                self.nSequence)\n \n \n-class CTxOut(object):\n+class CTxOut():\n     def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n@@ -363,7 +363,7 @@ def __repr__(self):\n                bytes_to_hex_str(self.scriptPubKey))\n \n \n-class CScriptWitness(object):\n+class CScriptWitness():\n     def __init__(self):\n         # stack is a vector of strings\n         self.stack = []\n@@ -378,7 +378,7 @@ def is_null(self):\n         return True\n \n \n-class CTxInWitness(object):\n+class CTxInWitness():\n     def __init__(self):\n         self.scriptWitness = CScriptWitness()\n \n@@ -395,7 +395,7 @@ def is_null(self):\n         return self.scriptWitness.is_null()\n \n \n-class CTxWitness(object):\n+class CTxWitness():\n     def __init__(self):\n         self.vtxinwit = []\n \n@@ -423,7 +423,7 @@ def is_null(self):\n         return True\n \n \n-class CTransaction(object):\n+class CTransaction():\n     def __init__(self, tx=None):\n         if tx is None:\n             self.nVersion = 1\n@@ -526,7 +526,7 @@ def __repr__(self):\n             % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n-class CBlockHeader(object):\n+class CBlockHeader():\n     def __init__(self, header=None):\n         if header is None:\n             self.set_null()\n@@ -666,7 +666,7 @@ def __repr__(self):\n                time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n \n \n-class CUnsignedAlert(object):\n+class CUnsignedAlert():\n     def __init__(self):\n         self.nVersion = 1\n         self.nRelayUntil = 0\n@@ -721,7 +721,7 @@ def __repr__(self):\n                self.strComment, self.strStatusBar, self.strReserved)\n \n \n-class CAlert(object):\n+class CAlert():\n     def __init__(self):\n         self.vchMsg = b\"\"\n         self.vchSig = b\"\"\n@@ -741,7 +741,7 @@ def __repr__(self):\n             % (len(self.vchMsg), len(self.vchSig))\n \n \n-class PrefilledTransaction(object):\n+class PrefilledTransaction():\n     def __init__(self, index=0, tx = None):\n         self.index = index\n         self.tx = tx\n@@ -767,7 +767,7 @@ def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n # This is what we send on the wire, in a cmpctblock message.\n-class P2PHeaderAndShortIDs(object):\n+class P2PHeaderAndShortIDs():\n     def __init__(self):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -819,7 +819,7 @@ def calculate_shortid(k0, k1, tx_hash):\n \n # This version gets rid of the array lengths, and reinterprets the differential\n # encoding into indices that can be used for lookup.\n-class HeaderAndShortIDs(object):\n+class HeaderAndShortIDs():\n     def __init__(self, p2pheaders_and_shortids = None):\n         self.header = CBlockHeader()\n         self.nonce = 0\n@@ -880,7 +880,7 @@ def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n \n \n-class BlockTransactionsRequest(object):\n+class BlockTransactionsRequest():\n \n     def __init__(self, blockhash=0, indexes = None):\n         self.blockhash = blockhash\n@@ -920,7 +920,7 @@ def __repr__(self):\n         return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n \n \n-class BlockTransactions(object):\n+class BlockTransactions():\n \n     def __init__(self, blockhash=0, transactions = None):\n         self.blockhash = blockhash\n@@ -944,7 +944,7 @@ def __repr__(self):\n \n \n # Objects that correspond to messages on the wire\n-class msg_version(object):\n+class msg_version():\n     command = b\"version\"\n \n     def __init__(self):\n@@ -1012,7 +1012,7 @@ def __repr__(self):\n                self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n-class msg_verack(object):\n+class msg_verack():\n     command = b\"verack\"\n \n     def __init__(self):\n@@ -1028,7 +1028,7 @@ def __repr__(self):\n         return \"msg_verack()\"\n \n \n-class msg_addr(object):\n+class msg_addr():\n     command = b\"addr\"\n \n     def __init__(self):\n@@ -1044,7 +1044,7 @@ def __repr__(self):\n         return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n \n \n-class msg_alert(object):\n+class msg_alert():\n     command = b\"alert\"\n \n     def __init__(self):\n@@ -1063,7 +1063,7 @@ def __repr__(self):\n         return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n \n \n-class msg_inv(object):\n+class msg_inv():\n     command = b\"inv\"\n \n     def __init__(self, inv=None):\n@@ -1082,7 +1082,7 @@ def __repr__(self):\n         return \"msg_inv(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getdata(object):\n+class msg_getdata():\n     command = b\"getdata\"\n \n     def __init__(self, inv=None):\n@@ -1098,7 +1098,7 @@ def __repr__(self):\n         return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n \n \n-class msg_getblocks(object):\n+class msg_getblocks():\n     command = b\"getblocks\"\n \n     def __init__(self):\n@@ -1121,7 +1121,7 @@ def __repr__(self):\n             % (repr(self.locator), self.hashstop)\n \n \n-class msg_tx(object):\n+class msg_tx():\n     command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n@@ -1142,7 +1142,7 @@ def serialize(self):\n         return self.tx.serialize_with_witness()\n \n \n-class msg_block(object):\n+class msg_block():\n     command = b\"block\"\n \n     def __init__(self, block=None):\n@@ -1162,7 +1162,7 @@ def __repr__(self):\n \n # for cases where a user needs tighter control over what is sent over the wire\n # note that the user must supply the name of the command, and the data\n-class msg_generic(object):\n+class msg_generic():\n     def __init__(self, command, data=None):\n         self.command = command\n         self.data = data\n@@ -1179,7 +1179,7 @@ def serialize(self):\n         r = self.block.serialize(with_witness=True)\n         return r\n \n-class msg_getaddr(object):\n+class msg_getaddr():\n     command = b\"getaddr\"\n \n     def __init__(self):\n@@ -1195,7 +1195,7 @@ def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n-class msg_ping_prebip31(object):\n+class msg_ping_prebip31():\n     command = b\"ping\"\n \n     def __init__(self):\n@@ -1211,7 +1211,7 @@ def __repr__(self):\n         return \"msg_ping() (pre-bip31)\"\n \n \n-class msg_ping(object):\n+class msg_ping():\n     command = b\"ping\"\n \n     def __init__(self, nonce=0):\n@@ -1229,7 +1229,7 @@ def __repr__(self):\n         return \"msg_ping(nonce=%08x)\" % self.nonce\n \n \n-class msg_pong(object):\n+class msg_pong():\n     command = b\"pong\"\n \n     def __init__(self, nonce=0):\n@@ -1247,7 +1247,7 @@ def __repr__(self):\n         return \"msg_pong(nonce=%08x)\" % self.nonce\n \n \n-class msg_mempool(object):\n+class msg_mempool():\n     command = b\"mempool\"\n \n     def __init__(self):\n@@ -1262,7 +1262,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n-class msg_sendheaders(object):\n+class msg_sendheaders():\n     command = b\"sendheaders\"\n \n     def __init__(self):\n@@ -1282,7 +1282,7 @@ def __repr__(self):\n # number of entries\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n-class msg_getheaders(object):\n+class msg_getheaders():\n     command = b\"getheaders\"\n \n     def __init__(self):\n@@ -1307,7 +1307,7 @@ def __repr__(self):\n \n # headers message has\n # <count> <vector of block headers>\n-class msg_headers(object):\n+class msg_headers():\n     command = b\"headers\"\n \n     def __init__(self, headers=None):\n@@ -1327,7 +1327,7 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n-class msg_reject(object):\n+class msg_reject():\n     command = b\"reject\"\n     REJECT_MALFORMED = 1\n \n@@ -1358,7 +1358,7 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-class msg_feefilter(object):\n+class msg_feefilter():\n     command = b\"feefilter\"\n \n     def __init__(self, feerate=0):\n@@ -1375,7 +1375,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n-class msg_sendcmpct(object):\n+class msg_sendcmpct():\n     command = b\"sendcmpct\"\n \n     def __init__(self):\n@@ -1395,7 +1395,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n \n-class msg_cmpctblock(object):\n+class msg_cmpctblock():\n     command = b\"cmpctblock\"\n \n     def __init__(self, header_and_shortids = None):\n@@ -1413,7 +1413,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n \n-class msg_getblocktxn(object):\n+class msg_getblocktxn():\n     command = b\"getblocktxn\"\n \n     def __init__(self):\n@@ -1431,7 +1431,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n \n-class msg_blocktxn(object):\n+class msg_blocktxn():\n     command = b\"blocktxn\"\n \n     def __init__(self):\n@@ -1454,7 +1454,7 @@ def serialize(self):\n         r += self.block_transactions.serialize(with_witness=True)\n         return r\n \n-class NodeConnCB(object):\n+class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n \n     Individual testcases should subclass this and override the on_* methods"
      },
      {
        "sha": "a4c046bd3d925994b631cd662d200342c6bed12c",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -370,7 +370,7 @@ def __init__(self, msg, data):\n         super(CScriptTruncatedPushDataError, self).__init__(msg)\n \n # This is used, eg, for blockchain heights in coinbase scripts (bip34)\n-class CScriptNum(object):\n+class CScriptNum():\n     def __init__(self, d=0):\n         self.value = d\n "
      },
      {
        "sha": "7b40c47fbf401f8a9af93a1ddcbc36c32506ef75",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -31,15 +31,15 @@ def recvall(s, n):\n     return rv\n \n ### Implementation classes\n-class Socks5Configuration(object):\n+class Socks5Configuration():\n     \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n         self.addr = None # Bind address (must be set)\n         self.af = socket.AF_INET # Bind address family\n         self.unauth = False  # Support unauthenticated\n         self.auth = False  # Support authentication\n \n-class Socks5Command(object):\n+class Socks5Command():\n     \"\"\"Information about an incoming socks5 command.\"\"\"\n     def __init__(self, cmd, atyp, addr, port, username, password):\n         self.cmd = cmd # Command (one of Command.*)\n@@ -51,7 +51,7 @@ def __init__(self, cmd, atyp, addr, port, username, password):\n     def __repr__(self):\n         return 'Socks5Command(%s,%s,%s,%s,%s,%s)' % (self.cmd, self.atyp, self.addr, self.port, self.username, self.password)\n \n-class Socks5Connection(object):\n+class Socks5Connection():\n     def __init__(self, serv, conn, peer):\n         self.serv = serv\n         self.conn = conn\n@@ -122,7 +122,7 @@ def handle(self):\n         finally:\n             self.conn.close()\n \n-class Socks5Server(object):\n+class Socks5Server():\n     def __init__(self, conf):\n         self.conf = conf\n         self.s = socket.socket(conf.af)"
      },
      {
        "sha": "d31e9a28538136be597bc742b816af461bd70156",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -43,7 +43,7 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-class BitcoinTestFramework(object):\n+class BitcoinTestFramework():\n     \"\"\"Base class for a bitcoin test script.\n \n     Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods."
      },
      {
        "sha": "5411dab3faaedb416ecbeb78181c424e48d6667b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f893085325b57dd07bde78a01e5dcb7d303154de/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f893085325b57dd07bde78a01e5dcb7d303154de",
        "patch": "@@ -459,7 +459,7 @@ def check_script_list(src_dir):\n             # On travis this warning is an error to prevent merging incomplete commits into master\n             sys.exit(1)\n \n-class RPCCoverage(object):\n+class RPCCoverage():\n     \"\"\"\n     Coverage reporting utilities for test_runner.\n "
      }
    ]
  }
]