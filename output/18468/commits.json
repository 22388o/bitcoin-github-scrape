[
  {
    "sha": "1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjc5MGExMTQ3YWQ5YTVmZTA2OTg3ZDg0YjZjZDcxZjkxY2JlYzRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-29T23:31:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Make Span size type unsigned\n\nThis matches a change in the C++20 std::span proposal.",
      "tree": {
        "sha": "320deb12f1d446ca83369d16e4083e1c6b249fe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/320deb12f1d446ca83369d16e4083e1c6b249fe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8da1e43b63cb36759eeb1fcfd6768163265c44e2"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "31e9fba12ce9b76011cb0733ebe534a20ce0ffe7",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "patch": "@@ -18,11 +18,12 @@ template<typename C>\n class Span\n {\n     C* m_data;\n-    std::ptrdiff_t m_size;\n+    std::size_t m_size;\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n+    constexpr Span(C* data, std::size_t size) noexcept : m_data(data), m_size(size) {}\n+\n     constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n \n     /** Implicit conversion of spans between compatible types.\n@@ -47,13 +48,13 @@ class Span\n     constexpr C* end() const noexcept { return m_data + m_size; }\n     constexpr C& front() const noexcept { return m_data[0]; }\n     constexpr C& back() const noexcept { return m_data[m_size - 1]; }\n-    constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n-    constexpr C& operator[](std::ptrdiff_t pos) const noexcept { return m_data[pos]; }\n+    constexpr std::size_t size() const noexcept { return m_size; }\n+    constexpr C& operator[](std::size_t pos) const noexcept { return m_data[pos]; }\n \n-    constexpr Span<C> subspan(std::ptrdiff_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n-    constexpr Span<C> subspan(std::ptrdiff_t offset, std::ptrdiff_t count) const noexcept { return Span<C>(m_data + offset, count); }\n-    constexpr Span<C> first(std::ptrdiff_t count) const noexcept { return Span<C>(m_data, count); }\n-    constexpr Span<C> last(std::ptrdiff_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n+    constexpr Span<C> subspan(std::size_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n+    constexpr Span<C> subspan(std::size_t offset, std::size_t count) const noexcept { return Span<C>(m_data + offset, count); }\n+    constexpr Span<C> first(std::size_t count) const noexcept { return Span<C>(m_data, count); }\n+    constexpr Span<C> last(std::size_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n \n     friend constexpr bool operator==(const Span& a, const Span& b) noexcept { return a.size() == b.size() && std::equal(a.begin(), a.end(), b.begin()); }\n     friend constexpr bool operator!=(const Span& a, const Span& b) noexcept { return !(a == b); }"
      }
    ]
  },
  {
    "sha": "bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjNkMzhmYzA2MWQ4NDgyZTY4Y2QzMzVhNDVjOWNkOGJiNjZhNDc1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-29T23:58:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Make pointer-based Span construction safer\n\nThis prevents constructing a Span<A> given two pointers into an array\nof B (where B is a subclass of A), at least without explicit cast to\npointers to A.",
      "tree": {
        "sha": "e267d5d97f68f8b0a73035c4ff913a4cd30b709a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e267d5d97f68f8b0a73035c4ff913a4cd30b709a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f83c1a53492a4a43ab3d5717f8f528d426330304",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "patch": "@@ -22,9 +22,22 @@ class Span\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::size_t size) noexcept : m_data(data), m_size(size) {}\n \n-    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n+    /** Construct a span from a begin pointer and a size.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, std::size_t size) noexcept : m_data(begin), m_size(size) {}\n+\n+    /** Construct a span from a begin and end pointer.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n \n     /** Implicit conversion of spans between compatible types.\n      *"
      }
    ]
  },
  {
    "sha": "ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjMwM2ExNmQxMTRiMWU5NGM2Y2YwZTRjNWRiNTM4OWRmYTE5N2Y2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-30T00:29:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Add Span constructors for arrays and vectors",
      "tree": {
        "sha": "804c4048b8e5061d4e4e6c19d8f8b095ac882025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/804c4048b8e5061d4e4e6c19d8f8b095ac882025"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d38fc061d8482e68cd335a45c9cd8bb66a475"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d5fec462e11009357e85d8c336051c7805db5cf2",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "patch": "@@ -56,6 +56,20 @@ class Span\n     /** Default assignment operator. */\n     Span& operator=(const Span& other) noexcept = default;\n \n+    /** Construct a Span from an array. This matches the corresponding C++20 std::span constructor. */\n+    template <int N>\n+    constexpr Span(C (&a)[N]) noexcept : m_data(a), m_size(N) {}\n+\n+    /** Construct a Span for objects with .data() and .size() (std::string, std::array, std::vector, ...).\n+     *\n+     * This implements a subset of the functionality provided by the C++20 std::span range-based constructor.\n+     *\n+     * To prevent surprises, only Spans for constant value types are supported when passing in temporaries.\n+     * Note that this restriction does not exist when converting arrays or other Spans (see above).\n+     */\n+    template <typename V, typename std::enable_if<(std::is_const<C>::value || std::is_lvalue_reference<V>::value) && std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, int>::type = 0>\n+    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\n+\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n@@ -79,19 +93,13 @@ class Span\n     template <typename O> friend class Span;\n };\n \n-/** Create a span to a container exposing data() and size().\n- *\n- * This correctly deals with constness: the returned Span's element type will be\n- * whatever data() returns a pointer to. If either the passed container is const,\n- * or its element type is const, the resulting span will have a const element type.\n- *\n- * std::span will have a constructor that implements this functionality directly.\n- */\n-template<typename A, int N>\n-constexpr Span<A> MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n-\n-template<typename V>\n-constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n+// MakeSpan helps constructing a Span of the right type automatically.\n+/** MakeSpan for arrays: */\n+template <typename A, int N> Span<A> constexpr MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n+/** MakeSpan for temporaries / rvalue references, only supporting const output. */\n+template <typename V> constexpr auto MakeSpan(V&& v) -> typename std::enable_if<!std::is_lvalue_reference<V>::value, Span<const typename std::remove_pointer<decltype(v.data())>::type>>::type { return std::forward<V>(v); }\n+/** MakeSpan for (lvalue) references, supporting mutable output. */\n+template <typename V> constexpr auto MakeSpan(V& v) -> Span<typename std::remove_pointer<decltype(v.data())>::type> { return v; }\n \n /** Pop the last element off a span, and return a reference to that element. */\n template <typename T>"
      }
    ]
  },
  {
    "sha": "2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjc2YWVhZGZhMGU0M2RjYWFjY2M0NzIwNjIzY2RmZTBiZWVkNTI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-30T00:42:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:19:40Z"
      },
      "message": "Simplify usage of Span in several places",
      "tree": {
        "sha": "f68ed37715bddfefb1b8df1595bd91b307b32903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68ed37715bddfefb1b8df1595bd91b307b32903"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7a5421ab6f2c2e67a7a5fe718ca59a26adb9167e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -139,7 +139,7 @@ std::string DescriptorChecksum(const Span<const char>& span)\n     return ret;\n }\n \n-std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(MakeSpan(str)); }\n+std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(str); }\n \n ////////////////////////////////////////////////////////////////////////////\n // Internal representation                                                //\n@@ -1087,7 +1087,7 @@ bool CheckChecksum(Span<const char>& sp, bool require_checksum, std::string& err\n \n std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n {\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n     auto ret = ParseScript(0, sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n@@ -1098,7 +1098,7 @@ std::string GetDescriptorChecksum(const std::string& descriptor)\n {\n     std::string ret;\n     std::string error;\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, false, error, &ret)) return \"\";\n     return ret;\n }"
      },
      {
        "sha": "9415bba58549e0bfc1d097873539084f7ddac202",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -1522,7 +1522,7 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     CScript scriptPubKey;\n-    Span<const valtype> stack = MakeSpan(witness.stack);\n+    Span<const valtype> stack{witness.stack};\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {"
      },
      {
        "sha": "f6b6e8f6f0cf446427c62a31c87f232ce761e237",
        "filename": "src/test/fuzz/span.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/span.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/span.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/span.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -18,7 +18,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     std::string str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> span = MakeSpan(str);\n+    const Span<const char> span{str};\n     (void)span.data();\n     (void)span.begin();\n     (void)span.end();\n@@ -32,7 +32,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     std::string another_str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> another_span = MakeSpan(another_str);\n+    const Span<const char> another_span{another_str};\n     assert((span <= another_span) != (span > another_span));\n     assert((span == another_span) != (span != another_span));\n     assert((span >= another_span) != (span < another_span));"
      },
      {
        "sha": "e5bf5dd6083b5d689d701df28c1ecaf498d3383a",
        "filename": "src/test/fuzz/spanparsing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/spanparsing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/spanparsing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/spanparsing.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -12,7 +12,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const size_t query_size = fuzzed_data_provider.ConsumeIntegral<size_t>();\n     const std::string query = fuzzed_data_provider.ConsumeBytesAsString(std::min<size_t>(query_size, 1024 * 1024));\n     const std::string span_str = fuzzed_data_provider.ConsumeRemainingBytesAsString();\n-    const Span<const char> const_span = MakeSpan(span_str);\n+    const Span<const char> const_span{span_str};\n \n     Span<const char> mut_span = const_span;\n     (void)spanparsing::Const(query, mut_span);"
      },
      {
        "sha": "257328974bcd06ed4f030d7e1aaa05a386b22872",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -1829,7 +1829,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Const(...): parse a constant, update span to skip it if successful\n     input = \"MilkToastHoney\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     success = Const(\"\", sp); // empty\n     BOOST_CHECK(success);\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"MilkToastHoney\");\n@@ -1854,7 +1854,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Func(...): parse a function call, update span to argument if successful\n     input = \"Foo(Bar(xy,z()))\";\n-    sp = MakeSpan(input);\n+    sp = input;\n \n     success = Func(\"FooBar\", sp);\n     BOOST_CHECK(!success);\n@@ -1877,31 +1877,31 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     Span<const char> result;\n \n     input = \"(n*(n-1))/2\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(n*(n-1))/2\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"\");\n \n     input = \"foo,bar\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"foo\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",bar\");\n \n     input = \"(aaaaa,bbbbb()),c\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(aaaaa,bbbbb())\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",c\");\n \n     input = \"xyz)foo\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"xyz\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \")foo\");\n \n     input = \"((a),(b),(c)),xxx\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"((a),(b),(c))\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",xxx\");\n@@ -1910,27 +1910,27 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     std::vector<Span<const char>> results;\n \n     input = \"xxx\";\n-    results = Split(MakeSpan(input), 'x');\n+    results = Split(input, 'x');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '-');\n+    results = Split(input, '-');\n     BOOST_CHECK_EQUAL(results.size(), 1U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one#two#three\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '#');\n+    results = Split(input, '#');\n     BOOST_CHECK_EQUAL(results.size(), 3U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"two\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"three\");\n \n     input = \"*foo*bar*\";\n-    results = Split(MakeSpan(input), '*');\n+    results = Split(input, '*');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"foo\");"
      }
    ]
  },
  {
    "sha": "26acc8dd9b512f220c1facdba2c5de7976d3c258",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmFjYzhkZDliNTEyZjIyMGMxZmFjZGJhMmM1ZGU3OTc2ZDNjMjU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-06-04T17:46:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-17T22:10:50Z"
      },
      "message": "Add sanity check asserts to span when -DDEBUG",
      "tree": {
        "sha": "4c4d4a8ec5b2260604cbacaecf9d6d92f2f9edf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c4d4a8ec5b2260604cbacaecf9d6d92f2f9edf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26acc8dd9b512f220c1facdba2c5de7976d3c258",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26acc8dd9b512f220c1facdba2c5de7976d3c258",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26acc8dd9b512f220c1facdba2c5de7976d3c258",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26acc8dd9b512f220c1facdba2c5de7976d3c258/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2676aeadfa0e43dcaaccc4720623cdfe0beed528"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 48,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4931507719c8a0695a38c7d1427ce591b85e3e25",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 48,
        "deletions": 10,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26acc8dd9b512f220c1facdba2c5de7976d3c258/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26acc8dd9b512f220c1facdba2c5de7976d3c258/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=26acc8dd9b512f220c1facdba2c5de7976d3c258",
        "patch": "@@ -10,6 +10,14 @@\n #include <algorithm>\n #include <assert.h>\n \n+#ifdef DEBUG\n+#define CONSTEXPR_IF_NOT_DEBUG\n+#define ASSERT_IF_DEBUG(x) assert((x))\n+#else\n+#define CONSTEXPR_IF_NOT_DEBUG constexpr\n+#define ASSERT_IF_DEBUG(x)\n+#endif\n+\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n@@ -37,7 +45,10 @@ class Span\n      * which is hard to implement without std::address_of.\n      */\n     template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n-    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n+    CONSTEXPR_IF_NOT_DEBUG Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin)\n+    {\n+        ASSERT_IF_DEBUG(end >= begin);\n+    }\n \n     /** Implicit conversion of spans between compatible types.\n      *\n@@ -73,15 +84,42 @@ class Span\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n-    constexpr C& front() const noexcept { return m_data[0]; }\n-    constexpr C& back() const noexcept { return m_data[m_size - 1]; }\n+    CONSTEXPR_IF_NOT_DEBUG C& front() const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() > 0);\n+        return m_data[0];\n+    }\n+    CONSTEXPR_IF_NOT_DEBUG C& back() const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() > 0);\n+        return m_data[m_size - 1];\n+    }\n     constexpr std::size_t size() const noexcept { return m_size; }\n-    constexpr C& operator[](std::size_t pos) const noexcept { return m_data[pos]; }\n-\n-    constexpr Span<C> subspan(std::size_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n-    constexpr Span<C> subspan(std::size_t offset, std::size_t count) const noexcept { return Span<C>(m_data + offset, count); }\n-    constexpr Span<C> first(std::size_t count) const noexcept { return Span<C>(m_data, count); }\n-    constexpr Span<C> last(std::size_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n+    CONSTEXPR_IF_NOT_DEBUG C& operator[](std::size_t pos) const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() > pos);\n+        return m_data[pos];\n+    }\n+    CONSTEXPR_IF_NOT_DEBUG Span<C> subspan(std::size_t offset) const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() >= offset);\n+        return Span<C>(m_data + offset, m_size - offset);\n+    }\n+    CONSTEXPR_IF_NOT_DEBUG Span<C> subspan(std::size_t offset, std::size_t count) const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() >= offset + count);\n+        return Span<C>(m_data + offset, count);\n+    }\n+    CONSTEXPR_IF_NOT_DEBUG Span<C> first(std::size_t count) const noexcept\n+    {\n+        ASSERT_IF_DEBUG(size() >= count);\n+        return Span<C>(m_data, count);\n+    }\n+    CONSTEXPR_IF_NOT_DEBUG Span<C> last(std::size_t count) const noexcept\n+    {\n+         ASSERT_IF_DEBUG(size() >= count);\n+         return Span<C>(m_data + m_size - count, count);\n+    }\n \n     friend constexpr bool operator==(const Span& a, const Span& b) noexcept { return a.size() == b.size() && std::equal(a.begin(), a.end(), b.begin()); }\n     friend constexpr bool operator!=(const Span& a, const Span& b) noexcept { return !(a == b); }\n@@ -106,7 +144,7 @@ template <typename T>\n T& SpanPopBack(Span<T>& span)\n {\n     size_t size = span.size();\n-    assert(size > 0);\n+    ASSERT_IF_DEBUG(size > 0);\n     T& back = span[size - 1];\n     span = Span<T>(span.data(), size - 1);\n     return back;"
      }
    ]
  }
]