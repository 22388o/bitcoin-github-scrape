[
  {
    "sha": "fac4e136fa3d0fab7fde900a6be921313e16e7a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM0ZTEzNmZhM2QwZmFiN2ZkZTkwMGE2YmU5MjEzMTNlMTZlN2E2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-17T19:22:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-18T07:33:26Z"
      },
      "message": "refactor: Change pointer to reference because it can not be null",
      "tree": {
        "sha": "575fa2a5c91330fed0a53fed2b539e881ee863c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/575fa2a5c91330fed0a53fed2b539e881ee863c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac4e136fa3d0fab7fde900a6be921313e16e7a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgl7AwAvmNp1VXKGxaXdRX6fMwDcDHrHuNvGYs6sL2989LbmV3ufbJDFVYjSxev\na10DY4uFjbhoI9mzcjaJ0s1eXMFCAuGr4Ty+DRWFrqg3lz6UimF+adas2+0rmj7O\nSERto6pdZYVeweM1ck+ALjSdZ7UK0Hq5+T6802hgDOI7lSaVc+1RbDOkvGXZNvh+\nbhTpDC8TeOd3j/KJ1nL6jcDe+ESb+1WN4oOj2VD9dt4raN5Taj4gUz1PqoyGqrQ/\ns6eaDDf8rLir6n3EQcUqjukT56nQCeSOu2VI0NAY4AeC3WKI2SBlJm4BLluq3uL5\n4qrf8+AHWpvznltz4b1xjQ5uxQ+OzNAa84gMmFBYplIXRsJ5199fotLIkscK3dIg\nspVURIryLw+ZYwFtCLoAxVqXwjoIiHZ7MtQgFv7Pmu3MCCEOKTPXGmlRrTeLEcFX\n+cz3OXEPqdaYka8L2owv/xkoOPhqx06gpcC4hLQ8PBEuKgq1mev4g+jwJ0vxmW5I\ne7obzjsJ\n=yhE9\n-----END PGP SIGNATURE-----",
        "payload": "tree 575fa2a5c91330fed0a53fed2b539e881ee863c6\nparent 831675c8dccfa6525ffe751da3cc60709c380953\nauthor MarcoFalke <falke.marco@gmail.com> 1605640921 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1605684806 +0100\n\nrefactor: Change pointer to reference because it can not be null\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4e136fa3d0fab7fde900a6be921313e16e7a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac4e136fa3d0fab7fde900a6be921313e16e7a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4e136fa3d0fab7fde900a6be921313e16e7a6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "831675c8dccfa6525ffe751da3cc60709c380953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/831675c8dccfa6525ffe751da3cc60709c380953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/831675c8dccfa6525ffe751da3cc60709c380953"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d3cf487c4f66ba4706c023b169558a028d8d9429",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac4e136fa3d0fab7fde900a6be921313e16e7a6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac4e136fa3d0fab7fde900a6be921313e16e7a6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fac4e136fa3d0fab7fde900a6be921313e16e7a6",
        "patch": "@@ -198,7 +198,7 @@ static std::string LabelFromValue(const UniValue& value)\n /**\n  * Update coin control with fee estimation based on the given parameters\n  *\n- * @param[in]     pwallet           Wallet pointer\n+ * @param[in]     wallet            Wallet reference\n  * @param[in,out] cc                Coin control to be updated\n  * @param[in]     conf_target       UniValue integer; confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n  *                                      if a fee_rate is present, 0 is allowed here as a no-op positional placeholder\n@@ -210,7 +210,7 @@ static std::string LabelFromValue(const UniValue& value)\n  *                                      verify only that fee_rate is greater than 0\n  * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n+static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n {\n     if (!fee_rate.isNull()) {\n         if (!conf_target.isNull() && conf_target.get_int() > 0) {\n@@ -235,7 +235,7 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n         throw JSONRPCError(RPC_INVALID_PARAMETER, InvalidEstimateModeErrorMessage());\n     }\n     if (!conf_target.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n+        cc.m_confirm_target = ParseConfirmTarget(conf_target, wallet.chain().estimateMaxBlocks());\n     }\n }\n \n@@ -514,7 +514,7 @@ static RPCHelpMan sendtoaddress()\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9], /* override_min_fee */ false);\n+    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9], /* override_min_fee */ false);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -942,7 +942,7 @@ static RPCHelpMan sendmany()\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8], /* override_min_fee */ false);\n+    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8], /* override_min_fee */ false);\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n@@ -3164,7 +3164,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n+        SetFeeEstimateMode(*pwallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3492,7 +3492,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+        SetFeeEstimateMode(*pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n     }\n \n     // Make sure the results are valid at least up to the most recent block"
      }
    ]
  },
  {
    "sha": "fa69c2c78455fd0dc436018fece9ff7fc83a180d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY5YzJjNzg0NTVmZDBkYzQzNjAxOGZlY2U5ZmY3ZmM4M2ExODBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-17T19:08:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-19T12:48:38Z"
      },
      "message": "wallet: Do not treat default constructed types as None-type",
      "tree": {
        "sha": "b11190eaac353a1484f705c5faef1b5f9836649f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b11190eaac353a1484f705c5faef1b5f9836649f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa69c2c78455fd0dc436018fece9ff7fc83a180d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWGwv+Ol9inSwOWMZg51mYuTK+PKisAGOoSAnw9x8PPiGyrRXC1VwF69jv94iR\nYoYx50RndfgDCsCh0xrD8nRYb+44uJMdzrNbTVryGCrgrZBgdC3kSF7a8R+7EJSR\n418uxBbOieA02entIGjsvqtb6RG2h8R9IQXmfN+2fYAFsHxrBqFNkI3VWY5z7PGl\nTpNFDB6Zwe/D3vY3o106zV+vG9+mTHqeW1DBgW62jFH7X9CTpkPFKm+K+mzZnkh/\nilUK9ppMjKKsOrDyrGA7pCBAoDJgylYORgWjO/tUyHl26RJeMRZvNqPuHVzNFRmw\np69AaPxg3HxJAyEsMvIUkRUDR6tXHgcz1vYHagp4T0QPgfuK4nOkjFaHI3udu8h1\nf6fmqbkSq+EWzOm8X6Pql0+52gzByeNyiEV2tS7FT1W1dEqNOeN7UutB32ZvleQr\ntr5d3rPOpGEno40aOCLLKEM+rjDkm2klscqmks7mx8tT76CbQ8Oses9ChavLAM+D\n1w/BKCyl\n=ibEk\n-----END PGP SIGNATURE-----",
        "payload": "tree b11190eaac353a1484f705c5faef1b5f9836649f\nparent fac4e136fa3d0fab7fde900a6be921313e16e7a6\nauthor MarcoFalke <falke.marco@gmail.com> 1605640110 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1605790118 +0100\n\nwallet: Do not treat default constructed types as None-type\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa69c2c78455fd0dc436018fece9ff7fc83a180d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa69c2c78455fd0dc436018fece9ff7fc83a180d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa69c2c78455fd0dc436018fece9ff7fc83a180d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac4e136fa3d0fab7fde900a6be921313e16e7a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4e136fa3d0fab7fde900a6be921313e16e7a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac4e136fa3d0fab7fde900a6be921313e16e7a6"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 14,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3ff90e8609d54dbd873556aa10174ab78f7df860",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa69c2c78455fd0dc436018fece9ff7fc83a180d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa69c2c78455fd0dc436018fece9ff7fc83a180d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa69c2c78455fd0dc436018fece9ff7fc83a180d",
        "patch": "@@ -201,22 +201,20 @@ static std::string LabelFromValue(const UniValue& value)\n  * @param[in]     wallet            Wallet reference\n  * @param[in,out] cc                Coin control to be updated\n  * @param[in]     conf_target       UniValue integer; confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n- *                                      if a fee_rate is present, 0 is allowed here as a no-op positional placeholder\n  * @param[in]     estimate_mode     UniValue string; fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n- *                                      if a fee_rate is present, \"\" is allowed here as a no-op positional placeholder\n  * @param[in]     fee_rate          UniValue real; fee rate in sat/vB;\n- *                                      if a fee_rate is present, both conf_target and estimate_mode must either be null, or no-op\n+ *                                      if present, both conf_target and estimate_mode must either be null, or \"unset\"\n  * @param[in]     override_min_fee  bool; whether to set fOverrideFeeRate to true to disable minimum fee rate checks and instead\n  *                                      verify only that fee_rate is greater than 0\n  * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n  */\n static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n {\n     if (!fee_rate.isNull()) {\n-        if (!conf_target.isNull() && conf_target.get_int() > 0) {\n+        if (!conf_target.isNull()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         }\n-        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) {\n+        if (!estimate_mode.isNull() && estimate_mode.get_str() != \"unset\") {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n         CFeeRate fee_rate_in_sat_vb{CFeeRate(AmountFromValue(fee_rate), COIN)};\n@@ -473,8 +471,8 @@ static RPCHelpMan sendtoaddress()\n                     + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n                     \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n                     + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"sean's outpost\\\" false true 6 economical\") +\n-                    \"\\nSend 0.1 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\\n\"\n-                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"drinks\\\" \\\"room77\\\" true true 0 \\\"\\\" 1\") +\n+                    \"\\nSend 0.1 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"drinks\\\" \\\"room77\\\" true true null \\\"unset\\\" null 1.1\") +\n                     \"\\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\\n\"\n                     + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.2 conf_target=6 estimate_mode=\\\"economical\\\"\") +\n                     \"\\nSend 0.5 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n@@ -4081,10 +4079,10 @@ static RPCHelpMan send()\n         RPCExamples{\"\"\n         \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\\n\"\n         + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 6 economical\\n\") +\n-        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' 0 \\\"\\\" 1\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" 1.1\\n\") +\n         \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' '{\\\"fee_rate\\\": 1}'\\n\") +\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1}'\\n\") +\n         \"Send 0.3 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n         + HelpExampleCli(\"-named send\", \"outputs='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.3}' fee_rate=25\\n\") +\n         \"Create a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\""
      },
      {
        "sha": "ac4a6e4948a3e7ce669623831da7d9fc5c8044ce",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa69c2c78455fd0dc436018fece9ff7fc83a180d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa69c2c78455fd0dc436018fece9ff7fc83a180d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa69c2c78455fd0dc436018fece9ff7fc83a180d",
        "patch": "@@ -235,8 +235,7 @@ def run_test(self):\n         fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n         explicit_fee_rate_btc_kvb = Decimal(fee_rate_btc_kvb) / 1000\n \n-        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n-        txid = self.nodes[2].sendmany(amounts={address: 10}, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n+        txid = self.nodes[2].sendmany(amounts={address: 10}, fee_rate=fee_rate_sat_vb)\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n         balance = self.nodes[2].getbalance()\n@@ -407,8 +406,7 @@ def run_test(self):\n             fee_rate_sat_vb = 2\n             fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n \n-            # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n-            txid = self.nodes[2].sendtoaddress(address=address, amount=amount, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n+            txid = self.nodes[2].sendtoaddress(address=address, amount=amount, fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])"
      },
      {
        "sha": "376cfdec6c5590fc6b2542c18b47c6a640ce213f",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa69c2c78455fd0dc436018fece9ff7fc83a180d/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa69c2c78455fd0dc436018fece9ff7fc83a180d/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=fa69c2c78455fd0dc436018fece9ff7fc83a180d",
        "patch": "@@ -260,17 +260,16 @@ def run_test(self):\n         res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=1, add_to_wallet=False)\n         assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"], self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n \n-        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0, estimate_mode=\"\", fee_rate=7, add_to_wallet=False)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=7, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00007\"))\n \n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=2, add_to_wallet=False)\n+        # \"unset\" and None are treated the same for estimate_mode\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=2, estimate_mode=\"unset\", add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n \n-        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0, arg_estimate_mode=\"\", arg_fee_rate=4.531, add_to_wallet=False)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=4.531, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00004531\"))\n "
      }
    ]
  }
]