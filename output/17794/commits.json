[
  {
    "sha": "b6f17a3854a3391c2762a363d338dea2d3a80d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmYxN2EzODU0YTMzOTFjMjc2MmEzNjNkMzM4ZGVhMmQzYTgwZDY5",
    "commit": {
      "author": {
        "name": "John Bampton",
        "email": "jbampton@users.noreply.github.com",
        "date": "2019-12-23T19:00:26Z"
      },
      "committer": {
        "name": "John Bampton",
        "email": "jbampton@users.noreply.github.com",
        "date": "2019-12-29T17:17:08Z"
      },
      "message": "Use assert_greater_than_or_equal helper method instead of a plain assert to aid debugging in case of failure.\n\nComparisons can be chained arbitrarily, e.g., x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be false).",
      "tree": {
        "sha": "67cecc5662d1a2c6a6ac6894169da0073007a063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67cecc5662d1a2c6a6ac6894169da0073007a063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6f17a3854a3391c2762a363d338dea2d3a80d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f17a3854a3391c2762a363d338dea2d3a80d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f17a3854a3391c2762a363d338dea2d3a80d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f17a3854a3391c2762a363d338dea2d3a80d69/comments",
    "author": {
      "login": "jbampton",
      "id": 418747,
      "node_id": "MDQ6VXNlcjQxODc0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/418747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbampton",
      "html_url": "https://github.com/jbampton",
      "followers_url": "https://api.github.com/users/jbampton/followers",
      "following_url": "https://api.github.com/users/jbampton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbampton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbampton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbampton/subscriptions",
      "organizations_url": "https://api.github.com/users/jbampton/orgs",
      "repos_url": "https://api.github.com/users/jbampton/repos",
      "events_url": "https://api.github.com/users/jbampton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbampton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jbampton",
      "id": 418747,
      "node_id": "MDQ6VXNlcjQxODc0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/418747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbampton",
      "html_url": "https://github.com/jbampton",
      "followers_url": "https://api.github.com/users/jbampton/followers",
      "following_url": "https://api.github.com/users/jbampton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbampton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbampton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbampton/subscriptions",
      "organizations_url": "https://api.github.com/users/jbampton/orgs",
      "repos_url": "https://api.github.com/users/jbampton/repos",
      "events_url": "https://api.github.com/users/jbampton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbampton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cda5573405d75d695aba417e8f22f1301ded001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cda5573405d75d695aba417e8f22f1301ded001",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cda5573405d75d695aba417e8f22f1301ded001"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b3fd8b313f278a38d43bfa1ad512e8261c2f9d89",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f17a3854a3391c2762a363d338dea2d3a80d69/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f17a3854a3391c2762a363d338dea2d3a80d69/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=b6f17a3854a3391c2762a363d338dea2d3a80d69",
        "patch": "@@ -363,7 +363,8 @@ def test_fee_p2pkh(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_greater_than_or_equal(self.fee_tolerance, feeDelta)\n \n     def test_fee_p2pkh_multi_out(self):\n         \"\"\"Compare fee of a standard pubkeyhash transaction with multiple outputs.\"\"\"\n@@ -386,7 +387,8 @@ def test_fee_p2pkh_multi_out(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_greater_than_or_equal(self.fee_tolerance, feeDelta)\n \n     def test_fee_p2sh(self):\n         \"\"\"Compare fee of a 2-of-2 multisig p2sh transaction.\"\"\"\n@@ -410,7 +412,8 @@ def test_fee_p2sh(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_greater_than_or_equal(self.fee_tolerance, feeDelta)\n \n     def test_fee_4of5(self):\n         \"\"\"Compare fee of a standard pubkeyhash transaction.\"\"\"\n@@ -451,7 +454,8 @@ def test_fee_4of5(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_greater_than_or_equal(self.fee_tolerance, feeDelta)\n \n     def test_spend_2of2(self):\n         \"\"\"Spend a 2-of-2 multisig transaction over fundraw.\"\"\"\n@@ -556,7 +560,8 @@ def test_many_inputs_fee(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance * 19  #~19 inputs\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_greater_than_or_equal(self.fee_tolerance * 19, feeDelta)  #~19 inputs\n \n     def test_many_inputs_send(self):\n         \"\"\"Multiple (~19) inputs tx test | sign/send.\"\"\""
      },
      {
        "sha": "bc53d1326c2d1b626f3b6e0d3725508f2ec040c7",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f17a3854a3391c2762a363d338dea2d3a80d69/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f17a3854a3391c2762a363d338dea2d3a80d69/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=b6f17a3854a3391c2762a363d338dea2d3a80d69",
        "patch": "@@ -332,7 +332,7 @@ def set(self, secret, compressed):\n         \"\"\"Construct a private key object with given 32-byte secret and compressed flag.\"\"\"\n         assert(len(secret) == 32)\n         secret = int.from_bytes(secret, 'big')\n-        self.valid = (secret > 0 and secret < SECP256K1_ORDER)\n+        self.valid = (0 < secret < SECP256K1_ORDER)\n         if self.valid:\n             self.secret = secret\n             self.compressed = compressed"
      }
    ]
  }
]