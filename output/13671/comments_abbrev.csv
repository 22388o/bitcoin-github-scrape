practicalswift,2018-07-15T23:33:16Z,"Concept ACK modulo …\n\n* Nice to see the `EXPECTED_BOOST_INCLUDES ` array in `test/lint/lint-includes.sh` get shorter\n* This is a good opportunity to also shorten the `KNOWN_VIOLATIONS` array in `test/lint/lint-locale-dependence.sh` – please replace the use of locale dependent functions `std::lower` and `std::upper` with locale independent alternatives",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405126567,405126567,
Empact,2018-07-16T01:42:15Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405134045,405134045,
laanwj,2018-07-16T06:59:20Z,"- is std::tolower locale-independent? (I don't think so, as @practicalswift mentions, so let's use this opportunity to write a locale-independent ASCII deterministic one)\n- I'd prefer to factor this out to our own `strtolower` function in `utilstrencodings.cpp`, instead of writing this out here\n",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405162623,405162623,
DrahtBot,2018-07-16T11:18:41Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13945 (Refactoring CRPCCommand with enum category by isghe)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405216125,405216125,
l2a5b1,2018-07-16T14:03:42Z,"Many thanks for the review comments!\n\n@laanwj \n> is std::tolower locale-independent?\n\nAs used in this project at the moment both `std::tolower` and `std::toupper` should be locale-independent and fully deterministic given that the arguments are `std::string` objects with characters in the standard 7-bit ASCII range.\n\n- In one instance `std::toupper` is used to uppercase the first cha",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405258134,405258134,
practicalswift,2018-07-16T16:11:47Z,"@251Labs For say the custom locale independent `std::toupper` function you would simply return any character outside of the ASCII range as is:\n\n> In the default ""C"" locale, the following lowercase letters abcdefghijklmnopqrstuvwxyz are replaced with respective uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n\nMore generally: as long as your custom functions return the same value as the standa",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405300785,405300785,
l2a5b1,2018-07-18T01:32:12Z,"Thanks again for the feedback!\n\nPer the review comments, I have implemented custom `ToLower` and `ToUpper` functions in 6b2d814 that are locale independent and ASCII deterministic.\n\nI have tried to make the `ToLower(unsigned char)` and `ToUpper(unsigned char)` functions defined in `utilstrencodings.h` as efficient as possible. I hope I did not miss something (obvious) that makes it a faile",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-405780062,405780062,
Empact,2018-07-19T14:50:07Z,utACK 76d70e5fb1923cdbc4771f438f10ae0039beccaa,https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-406303653,406303653,
l2a5b1,2018-07-25T15:28:22Z,aa32fe3 has been rebased on master (1211b15bf6c0b2904d90b96a9b3834c5cb9e7b4e),https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-407795272,407795272,
l2a5b1,2018-08-28T18:49:41Z,"b193d5a has been rebased on master (aa39ca764578a9017e03796b554955796022eb0d), woot!",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-416699312,416699312,
laanwj,2018-08-29T12:59:39Z,"utACK b193d5a443bfd994936ad21b807b2bb37756ef2c \ncertainly an improvement",https://github.com/bitcoin/bitcoin/pull/13671#issuecomment-416943450,416943450,
Empact,2018-07-16T01:12:24Z,`std::toupper(category.front())` should work,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r202561387,202561387,src/rpc/server.cpp
Empact,2018-07-16T01:28:54Z,"You can pass `tolower` directly like so: `std::transform(net.begin(), net.end(), net.begin(), tolower);`\n\nThe same doesn't work with `std::tolower` fyi.",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r202561954,202561954,src/netbase.cpp
Empact,2018-07-16T01:40:48Z,"You could cast like so, I believe that has the same effect: `std::transform(net.begin(), net.end(), net.begin(), (int (*)(int)) std::tolower);`\n\nNote tolower accepts an `int` but handles it as an `unsigned char`: https://en.cppreference.com/w/c/string/byte/tolower",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r202562402,202562402,src/netbase.cpp
l2a5b1,2018-07-18T00:50:20Z,"Thanks @Empact, I have addressed your feedback. The code to capitalize the first letter of a string has been isolated in `void Capitalize(std::string& str)` in `utilstrencodings.cpp`.",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203223965,203223965,src/rpc/server.cpp
l2a5b1,2018-07-18T01:13:40Z,"Thanks @Empact! \n\nI opted for the lambda expression, because it allowed me to pass `unsigned char` characters to the `tolower` function. \n\nI understood from the referenced documentation that it doesn't handle the `int` as an `unsigned char` (_character to be converted. If the value of ch is not representable as unsigned char and does not equal EOF, the behavior is undefined._).\n\nI hope",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203226741,203226741,src/netbase.cpp
sipa,2018-07-18T01:54:35Z,"Use `BOOST_CHECK_EQUAL(ToLower('@'), '@')` (it gives a clearer diagnostic message in case of failure).",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203231607,203231607,src/test/util_tests.cpp
sipa,2018-07-18T01:56:13Z,"That's a lot of code!\n\nWhat about `return (c >= 'A' && c <= 'Z' ? (c - 'A') + 'a' : c);`?",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203231928,203231928,src/utilstrencodings.h
sipa,2018-07-18T01:57:32Z,I feel it's slightly confusing to have a version of `ToUpper` that operates on chars (and does not modify the argument) while the version operating on vectors does modify. Perhaps call this `ConvertToUpper` or so?,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203232151,203232151,src/utilstrencodings.h
l2a5b1,2018-07-18T13:13:42Z,"Thanks @sipa, \n\nI asked myself the same question and I am happy to change it!\n\nJust to share why I decided to use a mappings array:\n\n**Support for extended ASCII**\n\nShould there be a time where it becomes important to have support for characters in the extended ASCII range then it will be trivial to implement it. It will then *just* be a matter of adjusting entries in mappings arra",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203372640,203372640,src/utilstrencodings.h
l2a5b1,2018-07-18T13:15:46Z,"Thanks, addressed in 0234af5",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203373241,203373241,src/test/util_tests.cpp
l2a5b1,2018-07-18T13:16:38Z,"Thanks, addressed in 0234af5",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203373557,203373557,src/utilstrencodings.h
Empact,2018-07-18T13:23:39Z,nit: I would return the string from `Capitalize` and inline that into the string construction.,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203376147,203376147,src/rpc/server.cpp
Empact,2018-07-18T13:24:45Z,"mu-nit: Ruby uses the terms `Downcase` and `Upcase` for these operations, which I like. Just a suggestion.",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203376511,203376511,src/utilstrencodings.cpp
practicalswift,2018-07-18T13:28:21Z,I strongly prefer @sipa:s more readable shorter version. I'd bet any potential performance difference is insignificant in the grand scheme of things :-),https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203377901,203377901,src/utilstrencodings.h
l2a5b1,2018-07-18T13:32:25Z,"Thanks @practicalswift, will update the code per @sipa's feedback!",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203379294,203379294,src/utilstrencodings.h
Empact,2018-07-18T13:32:53Z,"I agree with @sipa. If we need to add extended ascii support, we can address that then, and this is not a performance-critical operation that calls for extra code to optimize it. Simple, repetitive code adds visual noise and can hide bugs as well.",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203379461,203379461,src/utilstrencodings.h
Empact,2018-07-18T13:33:06Z,nit: `constexpr`,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203379539,203379539,src/utilstrencodings.h
Empact,2018-07-18T13:33:21Z,nit: `constexpr`,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203379631,203379631,src/utilstrencodings.h
Empact,2018-07-18T13:37:42Z,"I don't think we should define `ConvertToUpper` if we're not using it. The construction can be trivially re-created from `ConvertToLower` if we need it, and in the meantime it's just dead code.",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203381052,203381052,src/utilstrencodings.cpp
l2a5b1,2018-07-18T13:45:34Z,"Thanks @empact, I will update the pull request!",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203383893,203383893,src/utilstrencodings.h
l2a5b1,2018-07-19T08:59:04Z,Thanks again for the feedback. I have updated the pull request and addressed your comments in 53b3bfa.,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203650376,203650376,src/utilstrencodings.h
practicalswift,2018-07-19T09:23:17Z,Please add some `ToUpper(...)` tests as well :-),https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203657593,203657593,src/test/util_tests.cpp
l2a5b1,2018-07-19T11:22:47Z,Thanks @practicalswift! I was a bit too eager when I removed `ToUpper(std::string&)` and its tests (facepalm). Fixed in dff017f.,https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203690531,203690531,src/test/util_tests.cpp
Empact,2018-07-19T13:41:38Z,"~Since this modifies the `category` in-place, I think this breaks the comparison logic, e.g. on line 189.\nSorry, I think my original nit was misguided.~",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203729790,203729790,src/rpc/server.cpp
practicalswift,2018-07-19T13:53:34Z,`Capitalize(…)` (`std::string Capitalize(std::string str)`) does not modify `category` in-place :-),https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203734514,203734514,src/rpc/server.cpp
l2a5b1,2018-07-19T14:46:55Z,"Hi @Empact, we should be good. When I addressed your feedback, I did change the method signature from `void Capitalize(std::string&)` to `std::string Capitalize(std::string)`, which passes the argument by value (`category` is copied into `str`).",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203755833,203755833,src/rpc/server.cpp
Empact,2018-07-19T14:48:24Z,"Thanks, I misread - agree the argument is passed by value, so it's fine. 👍 ",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r203756419,203756419,src/rpc/server.cpp
laanwj,2018-08-29T12:59:27Z,"lol, tÖr, that's like the Swedish version of Tor right?",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r213665368,213665368,src/test/netbase_tests.cpp
l2a5b1,2018-08-29T15:31:58Z,"Lol @laanwj, best review comment ever! I do hidden messages or easter eggs from time to time, but this isn't one of them 😂😂 ",https://github.com/bitcoin/bitcoin/pull/13671#discussion_r213727058,213727058,src/test/netbase_tests.cpp
