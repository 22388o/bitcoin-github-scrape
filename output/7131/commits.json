[
  {
    "sha": "2c79653121e5c4699241c690dc14d3e5c25220c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzc5NjUzMTIxZTVjNDY5OTI0MWM2OTBkYzE0ZDNlNWMyNTIyMGM2",
    "commit": {
      "author": {
        "name": "Jonathan Toomim",
        "email": "j@toom.im",
        "date": "2015-11-30T03:46:58Z"
      },
      "committer": {
        "name": "Jonathan Toomim",
        "email": "j@toom.im",
        "date": "2015-11-30T03:46:58Z"
      },
      "message": "Add 'setblockmaxsize' RPC interface",
      "tree": {
        "sha": "24894b1dde3e1b5e525135e4f3437c5fafae16ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24894b1dde3e1b5e525135e4f3437c5fafae16ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c79653121e5c4699241c690dc14d3e5c25220c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c79653121e5c4699241c690dc14d3e5c25220c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c79653121e5c4699241c690dc14d3e5c25220c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c79653121e5c4699241c690dc14d3e5c25220c6/comments",
    "author": {
      "login": "jtoomim",
      "id": 11898859,
      "node_id": "MDQ6VXNlcjExODk4ODU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtoomim",
      "html_url": "https://github.com/jtoomim",
      "followers_url": "https://api.github.com/users/jtoomim/followers",
      "following_url": "https://api.github.com/users/jtoomim/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtoomim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtoomim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtoomim/subscriptions",
      "organizations_url": "https://api.github.com/users/jtoomim/orgs",
      "repos_url": "https://api.github.com/users/jtoomim/repos",
      "events_url": "https://api.github.com/users/jtoomim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtoomim/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtoomim",
      "id": 11898859,
      "node_id": "MDQ6VXNlcjExODk4ODU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11898859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtoomim",
      "html_url": "https://github.com/jtoomim",
      "followers_url": "https://api.github.com/users/jtoomim/followers",
      "following_url": "https://api.github.com/users/jtoomim/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtoomim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtoomim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtoomim/subscriptions",
      "organizations_url": "https://api.github.com/users/jtoomim/orgs",
      "repos_url": "https://api.github.com/users/jtoomim/repos",
      "events_url": "https://api.github.com/users/jtoomim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtoomim/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c894fbbb1dc0778628fa3f246b92d673b3f70cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c894fbbb1dc0778628fa3f246b92d673b3f70cfa"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 33,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2c14046143447cbb3eec4b27df512668740919cc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -998,6 +998,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n+    nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+\n     if (GetBoolArg(\"-peerbloomfilters\", true))\n         nLocalServices |= NODE_BLOOM;\n "
      },
      {
        "sha": "254266a0293d019798b2defe8f9aef69dc1c7b87",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -56,6 +56,7 @@ class COrphan\n     }\n };\n \n+unsigned int nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n \n@@ -125,8 +126,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n \n-    // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    // Largest block you're willing to create\n     // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n "
      },
      {
        "sha": "1bf7c046c3fb9f0b66eb9f0f80bdf37c0fe48f1d",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -36,5 +36,6 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n+extern unsigned int nBlockMaxSize;\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "5ac36720164f41126aa1740f2eaae2ee09a9b046",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -58,6 +58,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listaccounts\", 1 },\n     { \"walletpassphrase\", 1 },\n     { \"getblocktemplate\", 0 },\n+    { \"setblockmaxsize\", 0},\n     { \"listsinceblock\", 1 },\n     { \"listsinceblock\", 2 },\n     { \"sendmany\", 1 },"
      },
      {
        "sha": "fb4b5847a1ef8414cca8c1f1c93b3154a64cd13e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -590,6 +590,31 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue setblockmaxsize(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"setblockmaxsize size\\n\"\n+            \"\\nSet the maximum block size in bytes for getblocktemplate.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. size           (numeric, required) The maximum size (in bytes) of blocks to create when mining. Minimum value: 1000.\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false        (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setblockmaxsize\", \"1000000\")\n+            + HelpExampleRpc(\"setblockmaxsize\", \"1000000\")\n+        );\n+\n+    LOCK(cs_main); // need to block against getblocktemplate\n+\n+    uint64_t size = nBlockMaxSize;\n+    if (params[0].get_real() >= 1000)\n+        size = (params[0].get_int64());        // rejects 0.0 amounts\n+\n+    nBlockMaxSize = size;\n+    return true;\n+}\n+\n class submitblock_StateCatcher : public CValidationInterface\n {\n public:"
      },
      {
        "sha": "d91fc0adc267b1bc0d1a21ab63722ef84fee2419",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -292,6 +292,7 @@ static const CRPCCommand vRPCCommands[] =\n \n     /* Mining */\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true  },\n+    { \"mining\",             \"setblockmaxsize\",        &setblockmaxsize,        true  },\n     { \"mining\",             \"getmininginfo\",          &getmininginfo,          true  },\n     { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true  },\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },"
      },
      {
        "sha": "5c388df16f1eac1d5bb62f16347474b24c35eb3b",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c79653121e5c4699241c690dc14d3e5c25220c6/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=2c79653121e5c4699241c690dc14d3e5c25220c6",
        "patch": "@@ -169,6 +169,7 @@ extern UniValue getconnectioncount(const UniValue& params, bool fHelp); // in rp\n extern UniValue getpeerinfo(const UniValue& params, bool fHelp);\n extern UniValue ping(const UniValue& params, bool fHelp);\n extern UniValue addnode(const UniValue& params, bool fHelp);\n+extern UniValue setblockmaxsize(const UniValue& params, bool fHelp);\n extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n extern UniValue getnettotals(const UniValue& params, bool fHelp);"
      }
    ]
  }
]