[
  {
    "sha": "fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA1NDBjZDQ2ZWFmNDRkOWUxYTlmOTFjM2E5Mzc5ODY4MjZjNGZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-06T15:07:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-09T10:48:05Z"
      },
      "message": "net: Extract download permission from noban",
      "tree": {
        "sha": "1bac883d22116dcb2cf9f65e315de8d1a6c4f148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bac883d22116dcb2cf9f65e315de8d1a6c4f148"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWpgv/Zy9V6TBXGUdSdrFvuKaSYRMZWoTIWsG84eKHuEHBQLt3xFazCoclnW9p\nc73DM3YFKZfAuKYXWq2yg9IsBQZ1nD7ZJETSfEjio2n4wougghf6pj/LEVIGUg14\n6oMc4DU9hMz3ajoXMxV1KBRW2F2Ml6AEVBlx8zbPzi49O3RpGwwe2trd42SVJX2X\nGtLYY8fWnrIFUisESUKqrwWvDWWTMe6RDbFHLQC/Ge1jB/m2YkTlB1tQYOr49r/M\ng5/jnTGVIVkZUK+sPeho+f2soo6u4z4/uDn0QurNOZTaGCKX3hdFkdAdnmTrP8iD\n3YywPLCt/trwRhiaPlMdqIV9EDNLoEuO0ecvkr1AXkTA9oFrfJydIOnmsCsz077Y\nIIPk1A9L+j/XGWo9MwVDgl33MAhCOTOxJjKJqAHF82ouwS8SBYWoiziuANP4W6WS\nZUaP3KLVeUGeXrz9LqjXtMK2bWUf6b3SQ6kTXUYgJwtnkKnjua5TxMCapmU3mDAQ\nRiN4hQU8\n=KgN1\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bac883d22116dcb2cf9f65e315de8d1a6c4f148\nparent f7c19e829eca10ce8b4acafc61264f8bb9b922f3\nauthor MarcoFalke <falke.marco@gmail.com> 1591456045 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1594291685 +0200\n\nnet: Extract download permission from noban\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7c19e829eca10ce8b4acafc61264f8bb9b922f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7c19e829eca10ce8b4acafc61264f8bb9b922f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7c19e829eca10ce8b4acafc61264f8bb9b922f3"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 43,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ea13dd5c27f083e3a275328bacfa3d8f787cc682",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -23,7 +23,7 @@ longer serving historic blocks (blocks older than one week).\n Keep in mind that new nodes require other nodes that are willing to serve\n historic blocks.\n \n-Peers with the `noban` permission will never be disconnected, although their traffic counts for\n+Peers with the `download` permission will never be disconnected, although their traffic counts for\n calculating the target.\n \n ## 2. Disable \"listening\" (`-listen=0`)"
      },
      {
        "sha": "4d2225884eedf067ce2425576d7b624d66a17ae6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -102,6 +102,11 @@ Updated settings\n - The `-debug=db` logging category, which was deprecated in 0.20 and replaced by\n   `-debug=walletdb` to distinguish it from `coindb`, has been removed. (#19202)\n \n+- A `download` permission has been extracted from the `noban` permission. For\n+  compatibility, `noban` implies the `download` permission, but this may change\n+  in future releases. Refer to the help of the affected settings `-whitebind`\n+  and `-whitelist` for more details. (#19191)\n+\n Changes to Wallet or GUI related settings can be found in the GUI or Wallet  section below.\n \n New settings"
      },
      {
        "sha": "4a4f33d6ef5f838696756ecf2122ce9417c67c16",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -446,7 +446,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'noban' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -469,12 +469,12 @@ void SetupServerArgs(NodeContext& node)\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to given address and whitelist peers connecting to it. \"\n+    gArgs.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n-        \"Specify multiple permissions separated by commas (default: noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n-    gArgs.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n-        \"CIDR notated network(e.g. 1.2.3.0/24). Uses same permissions as \"\n+    gArgs.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n+        \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n         \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();"
      },
      {
        "sha": "d62c259565935ae13a0bca4007fca16256363eee",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -2643,7 +2643,7 @@ void CConnman::RecordBytesSent(uint64_t bytes)\n         nMaxOutboundTotalBytesSentInCycle = 0;\n     }\n \n-    // TODO, exclude peers with noban permission\n+    // TODO, exclude peers with download permission\n     nMaxOutboundTotalBytesSentInCycle += bytes;\n }\n "
      },
      {
        "sha": "a75838307cdc5613ecd5d4c2c0b54b9574ab06ed",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -10,10 +10,11 @@\n \n const std::vector<std::string> NET_PERMISSIONS_DOC{\n     \"bloomfilter (allow requesting BIP37 filtered blocks and transactions)\",\n-    \"noban (do not ban for misbehavior)\",\n+    \"noban (do not ban for misbehavior; implies download)\",\n     \"forcerelay (relay transactions that are already in the mempool; implies relay)\",\n     \"relay (relay even in -blocksonly mode)\",\n     \"mempool (allow requesting BIP35 mempool contents)\",\n+    \"download (allow getheaders during IBD, no disconnect after maxuploadtarget limit)\",\n };\n \n namespace {\n@@ -46,6 +47,7 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n             else if (permission == \"noban\") NetPermissions::AddFlag(flags, PF_NOBAN);\n             else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, PF_FORCERELAY);\n             else if (permission == \"mempool\") NetPermissions::AddFlag(flags, PF_MEMPOOL);\n+            else if (permission == \"download\") NetPermissions::AddFlag(flags, PF_DOWNLOAD);\n             else if (permission == \"all\") NetPermissions::AddFlag(flags, PF_ALL);\n             else if (permission == \"relay\") NetPermissions::AddFlag(flags, PF_RELAY);\n             else if (permission.length() == 0); // Allow empty entries\n@@ -72,6 +74,7 @@ std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n     if (NetPermissions::HasFlag(flags, PF_FORCERELAY)) strings.push_back(\"forcerelay\");\n     if (NetPermissions::HasFlag(flags, PF_RELAY)) strings.push_back(\"relay\");\n     if (NetPermissions::HasFlag(flags, PF_MEMPOOL)) strings.push_back(\"mempool\");\n+    if (NetPermissions::HasFlag(flags, PF_DOWNLOAD)) strings.push_back(\"download\");\n     return strings;\n }\n "
      },
      {
        "sha": "a9633ee2aeded40ddcdb111cabd6b60eec2cbae6",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -14,8 +14,7 @@ struct bilingual_str;\n \n extern const std::vector<std::string> NET_PERMISSIONS_DOC;\n \n-enum NetPermissionFlags\n-{\n+enum NetPermissionFlags {\n     PF_NONE = 0,\n     // Can query bloomfilter even if -peerbloomfilters is false\n     PF_BLOOMFILTER = (1U << 1),\n@@ -24,14 +23,16 @@ enum NetPermissionFlags\n     // Always relay transactions from this peer, even if already in mempool\n     // Keep parameter interaction: forcerelay implies relay\n     PF_FORCERELAY = (1U << 2) | PF_RELAY,\n+    // Allow getheaders during IBD and block-download after maxuploadtarget limit\n+    PF_DOWNLOAD = (1U << 6),\n     // Can't be banned/disconnected/discouraged for misbehavior\n-    PF_NOBAN = (1U << 4),\n+    PF_NOBAN = (1U << 4) | PF_DOWNLOAD,\n     // Can query the mempool\n     PF_MEMPOOL = (1U << 5),\n \n     // True if the user did not specifically set fine grained permissions\n     PF_ISIMPLICIT = (1U << 31),\n-    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL,\n+    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL | PF_DOWNLOAD,\n };\n \n class NetPermissions"
      },
      {
        "sha": "7f8944324359b8859674f3a919f2ad8e2482f70f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -1509,7 +1509,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     if (send &&\n         connman->OutboundTargetReached(true) &&\n         (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) &&\n-        !pfrom.HasPermission(PF_NOBAN) // never disconnect nodes with the noban permission\n+        !pfrom.HasPermission(PF_DOWNLOAD) // nodes with the download permission may exceed target\n     ) {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n \n@@ -2739,7 +2739,7 @@ void ProcessMessage(\n         }\n \n         LOCK(cs_main);\n-        if (::ChainstateActive().IsInitialBlockDownload() && !pfrom.HasPermission(PF_NOBAN)) {\n+        if (::ChainstateActive().IsInitialBlockDownload() && !pfrom.HasPermission(PF_DOWNLOAD)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom.GetId());\n             return;\n         }"
      },
      {
        "sha": "c4d5d0b6d0cd6f59c17cdd4bbe84789baa2f91a0",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -397,12 +397,13 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n \n     const auto strings = NetPermissions::ToStrings(PF_ALL);\n-    BOOST_CHECK_EQUAL(strings.size(), 5U);\n+    BOOST_CHECK_EQUAL(strings.size(), 6U);\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"relay\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"noban\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"mempool\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"download\") != strings.end());\n }\n \n BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)"
      },
      {
        "sha": "5056b807cbe9087515ef8904be3e549b060bae3a",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -137,8 +137,8 @@ def run_test(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-        self.log.info(\"Restarting node 0 with noban permission and 1MB maxuploadtarget\")\n-        self.restart_node(0, [\"-whitelist=noban@127.0.0.1\", \"-maxuploadtarget=1\"])\n+        self.log.info(\"Restarting node 0 with download permission and 1MB maxuploadtarget\")\n+        self.restart_node(0, [\"-whitelist=download@127.0.0.1\", \"-maxuploadtarget=1\"])\n \n         # Reconnect to self.nodes[0]\n         self.nodes[0].add_p2p_connection(TestP2PConn())\n@@ -151,9 +151,12 @@ def run_test(self):\n \n         getdata_request.inv = [CInv(MSG_BLOCK, big_old_block)]\n         self.nodes[0].p2p.send_and_ping(getdata_request)\n-        assert_equal(len(self.nodes[0].getpeerinfo()), 1)  #node is still connected because of the noban permission\n \n-        self.log.info(\"Peer still connected after trying to download old block (noban permission)\")\n+        self.log.info(\"Peer still connected after trying to download old block (download permission)\")\n+        peer_info = self.nodes[0].getpeerinfo()\n+        assert_equal(len(peer_info), 1)  # node is still connected\n+        assert_equal(peer_info[0]['permissions'], ['download'])\n+\n \n if __name__ == '__main__':\n     MaxUploadTest().main()"
      },
      {
        "sha": "0865c232e879a1e3752c41111ceaf56bf50d2779",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -65,10 +65,10 @@ def run_test(self):\n         second_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n         peer_1_info = self.nodes[0].getpeerinfo()[0]\n         assert_equal(peer_1_info['whitelisted'], True)\n-        assert_equal(peer_1_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool'])\n+        assert_equal(peer_1_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n         peer_2_info = self.nodes[0].getpeerinfo()[1]\n         assert_equal(peer_2_info['whitelisted'], True)\n-        assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool'])\n+        assert_equal(peer_2_info['permissions'], ['noban', 'forcerelay', 'relay', 'mempool', 'download'])\n         assert_equal(self.nodes[0].testmempoolaccept([sigtx])[0]['allowed'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n "
      },
      {
        "sha": "d0656cdb49a51695d3c00182d31743b0662bd183",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0540cd46eaf44d9e1a9f91c3a937986826c4fa/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=fa0540cd46eaf44d9e1a9f91c3a937986826c4fa",
        "patch": "@@ -39,7 +39,8 @@ def run_test(self):\n         self.checkpermission(\n             # default permissions (no specific permissions)\n             [\"-whitelist=127.0.0.1\"],\n-            [\"relay\", \"noban\", \"mempool\"],\n+            # Make sure the default values in the command line documentation match the ones here\n+            [\"relay\", \"noban\", \"mempool\", \"download\"],\n             True)\n \n         self.checkpermission(\n@@ -51,15 +52,15 @@ def run_test(self):\n         self.checkpermission(\n             # relay permission removed (no specific permissions)\n             [\"-whitelist=127.0.0.1\", \"-whitelistrelay=0\"],\n-            [\"noban\", \"mempool\"],\n+            [\"noban\", \"mempool\", \"download\"],\n             True)\n \n         self.checkpermission(\n             # forcerelay and relay permission added\n             # Legacy parameter interaction which set whitelistrelay to true\n             # if whitelistforcerelay is true\n             [\"-whitelist=127.0.0.1\", \"-whitelistforcerelay\"],\n-            [\"forcerelay\", \"relay\", \"noban\", \"mempool\"],\n+            [\"forcerelay\", \"relay\", \"noban\", \"mempool\", \"download\"],\n             True)\n \n         # Let's make sure permissions are merged correctly\n@@ -70,32 +71,32 @@ def run_test(self):\n         self.checkpermission(\n             [\"-whitelist=noban@127.0.0.1\"],\n             # Check parameter interaction forcerelay should activate relay\n-            [\"noban\", \"bloomfilter\", \"forcerelay\", \"relay\"],\n+            [\"noban\", \"bloomfilter\", \"forcerelay\", \"relay\", \"download\"],\n             False)\n         self.replaceinconfig(1, \"whitebind=bloomfilter,forcerelay@\" + ip_port, \"bind=127.0.0.1\")\n \n         self.checkpermission(\n             # legacy whitelistrelay should be ignored\n             [\"-whitelist=noban,mempool@127.0.0.1\", \"-whitelistrelay\"],\n-            [\"noban\", \"mempool\"],\n+            [\"noban\", \"mempool\", \"download\"],\n             False)\n \n         self.checkpermission(\n             # legacy whitelistforcerelay should be ignored\n             [\"-whitelist=noban,mempool@127.0.0.1\", \"-whitelistforcerelay\"],\n-            [\"noban\", \"mempool\"],\n+            [\"noban\", \"mempool\", \"download\"],\n             False)\n \n         self.checkpermission(\n             # missing mempool permission to be considered legacy whitelisted\n             [\"-whitelist=noban@127.0.0.1\"],\n-            [\"noban\"],\n+            [\"noban\", \"download\"],\n             False)\n \n         self.checkpermission(\n             # all permission added\n             [\"-whitelist=all@127.0.0.1\"],\n-            [\"forcerelay\", \"noban\", \"mempool\", \"bloomfilter\", \"relay\"],\n+            [\"forcerelay\", \"noban\", \"mempool\", \"bloomfilter\", \"relay\", \"download\"],\n             False)\n \n         self.stop_node(1)"
      }
    ]
  }
]