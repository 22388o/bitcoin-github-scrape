[
  {
    "sha": "9b59e3bda8c137bff885db5b1f9150346e36e076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjU5ZTNiZGE4YzEzN2JmZjg4NWRiNWIxZjkxNTAzNDZlMzZlMDc2",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-12-02T19:33:44Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-12-02T19:33:44Z"
      },
      "message": "Sanitize assert usage and refuse to compile with NDEBUG.\n\nThere were quite a few places where assert() was used with side effects,\n making operation with NDEBUG non-functional.  This commit fixes all the\n cases I know about, but also adds an  #error on NDEBUG because the code\n is untested without assertions and may still have vulnerabilities if\n used without assert.",
      "tree": {
        "sha": "b00689d36050d3c2f301329a863234c510546b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b00689d36050d3c2f301329a863234c510546b88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b59e3bda8c137bff885db5b1f9150346e36e076",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b59e3bda8c137bff885db5b1f9150346e36e076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b59e3bda8c137bff885db5b1f9150346e36e076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b59e3bda8c137bff885db5b1f9150346e36e076/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ab7a0609ee920b1095235bc7460c9c0b60acf29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ab7a0609ee920b1095235bc7460c9c0b60acf29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ab7a0609ee920b1095235bc7460c9c0b60acf29"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b57b7c506c2542fdbfc3d8c98f880b334c179f56",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b59e3bda8c137bff885db5b1f9150346e36e076/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b59e3bda8c137bff885db5b1f9150346e36e076/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=9b59e3bda8c137bff885db5b1f9150346e36e076",
        "patch": "@@ -148,10 +148,13 @@ class CECKey {\n     }\n \n     void SetSecretBytes(const unsigned char vch[32]) {\n+        bool ret;\n         BIGNUM bn;\n         BN_init(&bn);\n-        assert(BN_bin2bn(vch, 32, &bn));\n-        assert(EC_KEY_regenerate_key(pkey, &bn));\n+        ret = BN_bin2bn(vch, 32, &bn);\n+        assert(ret);\n+        ret = EC_KEY_regenerate_key(pkey, &bn);\n+        assert(ret);\n         BN_clear_free(&bn);\n     }\n "
      },
      {
        "sha": "25201c7367448fda3febbac808429c02cd4f0990",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b59e3bda8c137bff885db5b1f9150346e36e076/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b59e3bda8c137bff885db5b1f9150346e36e076/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9b59e3bda8c137bff885db5b1f9150346e36e076",
        "patch": "@@ -27,6 +27,10 @@\n using namespace std;\n using namespace boost;\n \n+#if defined(NDEBUG)\n+# error \"Bitcoin cannot be compiled without assertions.\"\n+#endif\n+\n //\n // Global state\n //\n@@ -1266,18 +1270,21 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash)\n {\n+    bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n             CTxInUndo undo;\n-            assert(coins.Spend(txin.prevout, undo));\n+            ret = coins.Spend(txin.prevout, undo);\n+            assert(ret);\n             txundo.vprevout.push_back(undo);\n         }\n     }\n \n     // add outputs\n-    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));\n+    ret = inputs.SetCoins(txhash, CCoins(tx, nHeight));\n+    assert(ret);\n }\n \n bool CScriptCheck::operator()() const {\n@@ -1651,7 +1658,9 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             return state.Abort(_(\"Failed to write transaction index\"));\n \n     // add this block to the view's block chain\n-    assert(view.SetBestBlock(pindex->GetBlockHash()));\n+    bool ret;\n+    ret = view.SetBestBlock(pindex->GetBlockHash());\n+    assert(ret);\n \n     // Watch for transactions paying to me\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n@@ -1746,7 +1755,9 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     // Flush changes to global coin state\n     int64_t nStart = GetTimeMicros();\n     int nModified = view.GetCacheSize();\n-    assert(view.Flush());\n+    bool ret;\n+    ret = view.Flush();\n+    assert(ret);\n     int64_t nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n         LogPrintf(\"- Flush %i transactions: %.2fms (%.4fms/tx)\\n\", nModified, 0.001 * nTime, 0.001 * nTime / nModified);"
      },
      {
        "sha": "14d685d6e29f0ba32d54a10940b6c6df21659ff4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b59e3bda8c137bff885db5b1f9150346e36e076/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b59e3bda8c137bff885db5b1f9150346e36e076/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9b59e3bda8c137bff885db5b1f9150346e36e076",
        "patch": "@@ -1298,7 +1298,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                         // Reserve a new key pair from key pool\n                         CPubKey vchPubKey;\n-                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked\n+                        bool ret;\n+                        ret = reservekey.GetReservedKey(vchPubKey);\n+                        assert(ret); // should never fail, as we just unlocked\n \n                         scriptChange.SetDestination(vchPubKey.GetID());\n                     }"
      }
    ]
  }
]