[
  {
    "sha": "100213c5c29ebd7bd50aa885e54594ae10bf87a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDAyMTNjNWMyOWViZDdiZDUwYWE4ODVlNTQ1OTRhZTEwYmY4N2E0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-05T20:20:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-12T14:15:10Z"
      },
      "message": "util: Fail to parse space-only strings in ParseMoney(...) (instead of parsing as zero)",
      "tree": {
        "sha": "46f66244d67fa5d0f0f3435c6135844f233a288f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46f66244d67fa5d0f0f3435c6135844f233a288f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/100213c5c29ebd7bd50aa885e54594ae10bf87a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100213c5c29ebd7bd50aa885e54594ae10bf87a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/100213c5c29ebd7bd50aa885e54594ae10bf87a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100213c5c29ebd7bd50aa885e54594ae10bf87a4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "727857d12d040b467f6956019a1698e15d27ccaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/727857d12d040b467f6956019a1698e15d27ccaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/727857d12d040b467f6956019a1698e15d27ccaa"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 27,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a88b8cf852e5a68ebc71a55be66461135ba2aa97",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100213c5c29ebd7bd50aa885e54594ae10bf87a4/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100213c5c29ebd7bd50aa885e54594ae10bf87a4/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=100213c5c29ebd7bd50aa885e54594ae10bf87a4",
        "patch": "@@ -1182,6 +1182,12 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n     BOOST_CHECK_EQUAL(ret, COIN);\n     BOOST_CHECK(ParseMoney(\"1\", ret));\n     BOOST_CHECK_EQUAL(ret, COIN);\n+    BOOST_CHECK(ParseMoney(\"   1\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN);\n+    BOOST_CHECK(ParseMoney(\"1   \", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN);\n+    BOOST_CHECK(ParseMoney(\"  1 \", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN);\n     BOOST_CHECK(ParseMoney(\"0.1\", ret));\n     BOOST_CHECK_EQUAL(ret, COIN/10);\n     BOOST_CHECK(ParseMoney(\"0.01\", ret));\n@@ -1198,12 +1204,26 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n     BOOST_CHECK_EQUAL(ret, COIN/10000000);\n     BOOST_CHECK(ParseMoney(\"0.00000001\", ret));\n     BOOST_CHECK_EQUAL(ret, COIN/100000000);\n+    BOOST_CHECK(ParseMoney(\" 0.00000001 \", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n+    BOOST_CHECK(ParseMoney(\"0.00000001 \", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n+    BOOST_CHECK(ParseMoney(\" 0.00000001\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n \n     // Parsing amount that can not be represented in ret should fail\n     BOOST_CHECK(!ParseMoney(\"0.000000001\", ret));\n \n     // Parsing empty string should fail\n     BOOST_CHECK(!ParseMoney(\"\", ret));\n+    BOOST_CHECK(!ParseMoney(\" \", ret));\n+    BOOST_CHECK(!ParseMoney(\"  \", ret));\n+\n+    // Parsing two numbers should fail\n+    BOOST_CHECK(!ParseMoney(\"1 2\", ret));\n+    BOOST_CHECK(!ParseMoney(\" 1 2 \", ret));\n+    BOOST_CHECK(!ParseMoney(\" 1.2 3 \", ret));\n+    BOOST_CHECK(!ParseMoney(\" 1 2.3 \", ret));\n \n     // Attempted 63 bit overflow should fail\n     BOOST_CHECK(!ParseMoney(\"92233720368.54775808\", ret));"
      },
      {
        "sha": "544cfb58f92390fb6e0b3f51f978b9a8b1fbec33",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100213c5c29ebd7bd50aa885e54594ae10bf87a4/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100213c5c29ebd7bd50aa885e54594ae10bf87a4/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=100213c5c29ebd7bd50aa885e54594ae10bf87a4",
        "patch": "@@ -31,21 +31,19 @@ std::string FormatMoney(const CAmount& n)\n }\n \n \n-bool ParseMoney(const std::string& str, CAmount& nRet)\n+bool ParseMoney(const std::string& money_string, CAmount& nRet)\n {\n-    if (!ValidAsCString(str)) {\n+    if (!ValidAsCString(money_string)) {\n         return false;\n     }\n-\n+    const std::string str = TrimString(money_string);\n     if (str.empty()) {\n         return false;\n     }\n \n     std::string strWhole;\n     int64_t nUnits = 0;\n     const char* p = str.c_str();\n-    while (IsSpace(*p))\n-        p++;\n     for (; *p; p++)\n     {\n         if (*p == '.')\n@@ -60,14 +58,14 @@ bool ParseMoney(const std::string& str, CAmount& nRet)\n             break;\n         }\n         if (IsSpace(*p))\n-            break;\n+            return false;\n         if (!IsDigit(*p))\n             return false;\n         strWhole.insert(strWhole.end(), *p);\n     }\n-    for (; *p; p++)\n-        if (!IsSpace(*p))\n-            return false;\n+    if (*p) {\n+        return false;\n+    }\n     if (strWhole.size() > 10) // guard against 63 bit overflow\n         return false;\n     if (nUnits < 0 || nUnits > COIN)"
      }
    ]
  }
]