[
  {
    "sha": "3155fd23f2a6180e696269b47fd642caa7b78925",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTU1ZmQyM2YyYTYxODBlNjk2MjY5YjQ3ZmQ2NDJjYWE3Yjc4OTI1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-07T20:24:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-05T03:32:04Z"
      },
      "message": "CKeystore: move relevant implementation out of the header",
      "tree": {
        "sha": "5b2d98983fa963177209ed765096ca2ab35d892f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2d98983fa963177209ed765096ca2ab35d892f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3155fd23f2a6180e696269b47fd642caa7b78925",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnVp7UACgkQHrd2uwPH\nki1NuA//aCDcJ7DyTst7ET3x1rzX7BLS8s/V4/TbHXFIXV17fhzz3QjWWUfmW04S\nqEYehehJsOqNYoi+gZnmkbZKLgzqe2+YmC2aqzhcIM6vmqX+oTYYRa1JYb/w3VEv\nWhuCN75XkjVEVjqC9RHLAIgQ2MmbNCpWqWCmkUl0KqRLeZKPPmYtBrE/zbYeKnPg\n/wVk5WeCeYzqCg+Vf2hlBrJys9zdZwEKue9vJiBa4qmtXpTP6dCwMKx0zPmWS8qP\nOIjnXrQn3rKckHhUmXnUBmLZnaJBulfw2IcfmjrRN7tAEhOH2nS3XZpGNFZr8lcN\nn0UXpFPhWd9UTUMfLrd+xbkR2FI/CCtdzEBjzw5F43YjyzG4HfaCswEvSMQpFNKb\nhPBviDs+mKMPLSVDO82RQd00bYn1Y1o1cby1PTmCqVTz2DiCvZIug0eiuZ9XM6cF\nNsbIknAxDlKFIlK9L0M4ZvH8zC6pnmLQtnn62w6qsB14oeW/EGlp5t8ANcJ+3Q/T\nUxsFuczxLePq4GQGaxWo6b0NMbf4s9KllP8TbDFiP6r8zoQdteUcJh9lzMg+jZvY\nVsoHJevHLTDhVxMr4i1VqI/H4tzC22pSj1lp4mvkxPw57TuAEklsdQY4ah/AF4B9\naEilCW9drRJtGr81ClqJ+XxFPIOaVg0k0GDZkm/1WQKhNFZbd8o=\n=Uf5C\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b2d98983fa963177209ed765096ca2ab35d892f\nparent 52f8877525d5238f3440e73710507be889d14127\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1504815860 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507174324 -0700\n\nCKeystore: move relevant implementation out of the header\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3155fd23f2a6180e696269b47fd642caa7b78925",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3155fd23f2a6180e696269b47fd642caa7b78925",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3155fd23f2a6180e696269b47fd642caa7b78925/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52f8877525d5238f3440e73710507be889d14127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52f8877525d5238f3440e73710507be889d14127",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52f8877525d5238f3440e73710507be889d14127"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 33,
      "deletions": 31
    },
    "files": [
      {
        "sha": "d19e9a83d869087662797d88086144ae644cde3f",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3155fd23f2a6180e696269b47fd642caa7b78925/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3155fd23f2a6180e696269b47fd642caa7b78925/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=3155fd23f2a6180e696269b47fd642caa7b78925",
        "patch": "@@ -36,6 +36,36 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n     return true;\n }\n \n+bool CBasicKeyStore::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    return mapKeys.count(address) > 0;\n+}\n+\n+std::set<CKeyID> CBasicKeyStore::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n+}\n+\n+bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        KeyMap::const_iterator mi = mapKeys.find(address);\n+        if (mi != mapKeys.end())\n+        {\n+            keyOut = mi->second;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)"
      },
      {
        "sha": "26ddff436f94e4b35b30705d19625f3845bad69c",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 31,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3155fd23f2a6180e696269b47fd642caa7b78925/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3155fd23f2a6180e696269b47fd642caa7b78925/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=3155fd23f2a6180e696269b47fd642caa7b78925",
        "patch": "@@ -62,37 +62,9 @@ class CBasicKeyStore : public CKeyStore\n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override\n-    {\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = (mapKeys.count(address) > 0);\n-        }\n-        return result;\n-    }\n-    std::set<CKeyID> GetKeys() const override\n-    {\n-        LOCK(cs_KeyStore);\n-        std::set<CKeyID> set_address;\n-        for (const auto& mi : mapKeys) {\n-            set_address.insert(mi.first);\n-        }\n-        return set_address;\n-    }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            KeyMap::const_iterator mi = mapKeys.find(address);\n-            if (mi != mapKeys.end())\n-            {\n-                keyOut = mi->second;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+    bool HaveKey(const CKeyID &address) const override;\n+    std::set<CKeyID> GetKeys() const override;\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n     bool AddCScript(const CScript& redeemScript) override;\n     bool HaveCScript(const CScriptID &hash) const override;\n     bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;"
      }
    ]
  },
  {
    "sha": "208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDhmZGE2OWIzOTg5YzZmOGEyYzViZDlhZTY1NTg0ODRhMzc3ZTJh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-07T20:25:43Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-05T03:32:09Z"
      },
      "message": "CCrypter: move relevant implementation out of the header",
      "tree": {
        "sha": "7a29464ff08b900b6a0dce8c3fbc72eba648f691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a29464ff08b900b6a0dce8c3fbc72eba648f691"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnVp7kACgkQHrd2uwPH\nki1+YxAAr9KcJPb6ECYIPFyZ+qbG2y3/aZcpoPTe+Yictnp7YBudPf4megHhoscl\nTzizOjV0dKWCnDIfKs8wEO0+LXTg2fxldn70n6sg6ymGqiyAMuHG9BuRobkSEaLv\n2zwrfh7HfddCwSSIAit7J+0vays0bSmr7bPCDP1OngMBw/YTC2od//BLm0cbIuQA\ng9omjfdmNCtzXJvSRMnlSuvOm66bLRi5Pby+u5w3LYDTnd0oQbU6v4h41AbyN09m\nGS6WuKN5egezimbjBvnWBCDk8hQ3ry8DZRDAXhjLck0qYMLXxK5spSTrmxLHA8+7\nWzVr63QUdMwAoxaRm6vV40WX9a5JICFZkfFNS8KCVP8xl7wi8+vMAKkQSgTAyab6\nH0byYkttANy+g85oGl3G2wO7Ow3F8c/2wIhnydXuAq+OvnZgPTUQv8OeJvYqNdRA\nMsG3PPchi4BIlqVCfqJ18WTKdEtHuYonyixZdhZtv75DXn3VujnU/3X4UgXG3kyr\nhXDKJvTqMLAZX0Xjv5RzxwsPrO5DPokDB22mSRs8SoNgqDFXFkiLzCUzc0juMaDf\nzdpZzHXQCjyqUqLDJ82kZo8M42ajKEbSIkBE99gw8gt4ITEJSzcY72lArDzvA+aO\nH+m1yyBau//ko7Qt0TRvpB3HtQV51UqfietCavw4EVKf5MWXddk=\n=P0je\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a29464ff08b900b6a0dce8c3fbc72eba648f691\nparent 3155fd23f2a6180e696269b47fd642caa7b78925\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1504815943 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507174329 -0700\n\nCCrypter: move relevant implementation out of the header\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208fda69b3989c6f8a2c5bd9ae6558484a377e2a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3155fd23f2a6180e696269b47fd642caa7b78925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3155fd23f2a6180e696269b47fd642caa7b78925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3155fd23f2a6180e696269b47fd642caa7b78925"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 41,
      "deletions": 40
    },
    "files": [
      {
        "sha": "3b35003807323c2af6b3009f9e0d777dea8db7ad",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/208fda69b3989c6f8a2c5bd9ae6558484a377e2a/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/208fda69b3989c6f8a2c5bd9ae6558484a377e2a/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
        "patch": "@@ -153,6 +153,18 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n+bool CCryptoKeyStore::IsLocked() const\n+{\n+    if (!IsCrypted())\n+        return false;\n+    bool result;\n+    {\n+        LOCK(cs_KeyStore);\n+        result = vMasterKey.empty();\n+    }\n+    return result;\n+}\n+\n bool CCryptoKeyStore::Lock()\n {\n     if (!SetCrypted())\n@@ -239,6 +251,18 @@ bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<\n     return true;\n }\n \n+bool CCryptoKeyStore::HaveKey(const CKeyID &address) const\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted()) {\n+            return CBasicKeyStore::HaveKey(address);\n+        }\n+        return mapCryptedKeys.count(address) > 0;\n+    }\n+    return false;\n+}\n+\n bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     {\n@@ -275,6 +299,19 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n     }\n }\n \n+std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::GetKeys();\n+    }\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapCryptedKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n+}\n+\n bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n {\n     {"
      },
      {
        "sha": "89a8f285d95d236eff279e4179dc9c2de406526f",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 40,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/208fda69b3989c6f8a2c5bd9ae6558484a377e2a/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/208fda69b3989c6f8a2c5bd9ae6558484a377e2a/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
        "patch": "@@ -137,52 +137,16 @@ class CCryptoKeyStore : public CBasicKeyStore\n     {\n     }\n \n-    bool IsCrypted() const\n-    {\n-        return fUseCrypto;\n-    }\n-\n-    bool IsLocked() const\n-    {\n-        if (!IsCrypted())\n-            return false;\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = vMasterKey.empty();\n-        }\n-        return result;\n-    }\n-\n+    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsLocked() const;\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool HaveKey(const CKeyID &address) const override\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            if (!IsCrypted()) {\n-                return CBasicKeyStore::HaveKey(address);\n-            }\n-            return mapCryptedKeys.count(address) > 0;\n-        }\n-        return false;\n-    }\n+    bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    std::set<CKeyID> GetKeys() const override\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted()) {\n-            return CBasicKeyStore::GetKeys();\n-        }\n-        std::set<CKeyID> set_address;\n-        for (const auto& mi : mapCryptedKeys) {\n-            set_address.insert(mi.first);\n-        }\n-        return set_address;\n-    }\n+    std::set<CKeyID> GetKeys() const override;\n \n     /**\n      * Wallet status (encrypted, locked) changed."
      }
    ]
  },
  {
    "sha": "dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDliYjI1M2MzYTZiZTI5ZGQyNzQ5Y2EzNGU0ZWM3ZWI2YjU5M2Ji",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-07T03:56:43Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-07T03:56:43Z"
      },
      "message": "Fix code style in keystore.cpp/crypter.cpp",
      "tree": {
        "sha": "4f0ce8945342d35a1149c6c9e0a31b9a97d0e9c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f0ce8945342d35a1149c6c9e0a31b9a97d0e9c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlnYUIkACgkQHrd2uwPH\nki2s6hAAtSg7gELBqYAhpCMwzJOf+aO5pV1s+MZPnZFviORYOJB/pDfX5UGYE4Yd\ned81u791MN8jatxBbtEVcfrtLWzpMPOmD/Ugk/2SOy0TYofuZxatuKMPRm3rTweo\nlUJjia3lGACWDk7RYXVSZMDXjM6TVAuvYqIPriw1WtTJLyNS5dcFtIs3aXz+vAFN\nbueNFcbcZKbnRt2RbW8j3w0NIQEkWRbtELsk1KAjqqo8ett98thHFaen5kN3gI4F\ngGASJKlb5ym31uX/GzThDypH+NYdZi4AyZKWKZ4VEK7v4OpamMD8dIQp1smPWRmP\ng1QcxzV4HvUXOcBEhK3Xiy4DEdRkP+1yukGkL96zBw8OfowYT6Fu1gPNgddM9W6L\nxb7J7YnZ2MoxFT5vHlOG4lDmWsv2ddrAfij3uahMloDXRgPHJOg/wsC4LXx6r3Fm\nDkLnQhv1QPR938BOOo9e3Oh6wz6HDT1BPDPmGjhv2pnWhXkkflNH/v7Qyv7Xb0MR\nlN+UjcFjG3XzgIw3oitUVwLK8+wmReu86xZDovS1SueZ/+Dj1Vd7NHupb3XMEDvV\nwn7+X/ofl3JnDgnj+BS5qCjAiINZS3cd0vfAIbODdUSkvr8DdLsXHBFhhITriNEh\nKArX4ktVjsXHHf9A1pXZ7Qt38PlF/bGMv9n5O1L5aJVA1wTvRQE=\n=g7YO\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f0ce8945342d35a1149c6c9e0a31b9a97d0e9c3\nparent 208fda69b3989c6f8a2c5bd9ae6558484a377e2a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507348603 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1507348603 -0700\n\nFix code style in keystore.cpp/crypter.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208fda69b3989c6f8a2c5bd9ae6558484a377e2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/208fda69b3989c6f8a2c5bd9ae6558484a377e2a"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 65,
      "deletions": 78
    },
    "files": [
      {
        "sha": "e2ce474298bee3897f928647c769ecb75a95446e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
        "patch": "@@ -54,14 +54,11 @@ std::set<CKeyID> CBasicKeyStore::GetKeys() const\n \n bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        KeyMap::const_iterator mi = mapKeys.find(address);\n-        if (mi != mapKeys.end())\n-        {\n-            keyOut = mi->second;\n-            return true;\n-        }\n+    LOCK(cs_KeyStore);\n+    KeyMap::const_iterator mi = mapKeys.find(address);\n+    if (mi != mapKeys.end()) {\n+        keyOut = mi->second;\n+        return true;\n     }\n     return false;\n }"
      },
      {
        "sha": "e3fa1a823ebf7ab77db89072e6e4d5f0d9ae2936",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 70,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=dd9bb253c3a6be29dd2749ca34e4ec7eb6b593bb",
        "patch": "@@ -155,14 +155,11 @@ bool CCryptoKeyStore::SetCrypted()\n \n bool CCryptoKeyStore::IsLocked() const\n {\n-    if (!IsCrypted())\n+    if (!IsCrypted()) {\n         return false;\n-    bool result;\n-    {\n-        LOCK(cs_KeyStore);\n-        result = vMasterKey.empty();\n     }\n-    return result;\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n }\n \n bool CCryptoKeyStore::Lock()\n@@ -219,84 +216,79 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n \n bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+    }\n \n-        if (IsLocked())\n-            return false;\n+    if (IsLocked()) {\n+        return false;\n+    }\n \n-        std::vector<unsigned char> vchCryptedSecret;\n-        CKeyingMaterial vchSecret(key.begin(), key.end());\n-        if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret))\n-            return false;\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n \n-        if (!AddCryptedKey(pubkey, vchCryptedSecret))\n-            return false;\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n     }\n     return true;\n }\n \n \n bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n     }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n     return true;\n }\n \n bool CCryptoKeyStore::HaveKey(const CKeyID &address) const\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted()) {\n-            return CBasicKeyStore::HaveKey(address);\n-        }\n-        return mapCryptedKeys.count(address) > 0;\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::HaveKey(address);\n     }\n-    return false;\n+    return mapCryptedKeys.count(address) > 0;\n }\n \n bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::GetKey(address, keyOut);\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return CBasicKeyStore::GetKey(address, keyOut);\n+    }\n \n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-        }\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n     }\n     return false;\n }\n \n bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n-            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n-\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-        if (mi != mapCryptedKeys.end())\n-        {\n-            vchPubKeyOut = (*mi).second.first;\n-            return true;\n-        }\n-        // Check for watch-only pubkeys\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n         return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n     }\n+    // Check for watch-only pubkeys\n+    return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n }\n \n std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n@@ -314,24 +306,22 @@ std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n \n bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n {\n+    LOCK(cs_KeyStore);\n+    if (!mapCryptedKeys.empty() || IsCrypted())\n+        return false;\n+\n+    fUseCrypto = true;\n+    for (KeyMap::value_type& mKey : mapKeys)\n     {\n-        LOCK(cs_KeyStore);\n-        if (!mapCryptedKeys.empty() || IsCrypted())\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+            return false;\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n             return false;\n-\n-        fUseCrypto = true;\n-        for (KeyMap::value_type& mKey : mapKeys)\n-        {\n-            const CKey &key = mKey.second;\n-            CPubKey vchPubKey = key.GetPubKey();\n-            CKeyingMaterial vchSecret(key.begin(), key.end());\n-            std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n-                return false;\n-            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n-                return false;\n-        }\n-        mapKeys.clear();\n     }\n+    mapKeys.clear();\n     return true;\n }"
      }
    ]
  }
]