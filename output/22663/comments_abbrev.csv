DrahtBot,2021-08-08 05:54:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22937](https://github.com/bitcoin/bitcoin/pull/22937) (refactor: Forbid calling unsafe fs::path(std::string) constructor",https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-894747743,894747743,
Crypt-iQ,2021-08-08 12:48:25,One build is failing due to a leak while fuzzing `coins_view` and I cannot see why with the CI.  I am unable to reproduce this on my machine.,https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-894792761,894792761,
DrahtBot,2021-10-15 09:39:46,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-944151438,944151438,
Talkless,2021-08-10 15:06:41,"If `penv` is deleted, then `~CDBWrapper()` gonna delete it again? Missing `= nullptr`?\n",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686109932,686109932,src/dbwrapper.cpp
Crypt-iQ,2021-08-10 15:13:27,If `!status.ok` then `HandleError` throws and the destructor isn't called,https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686115676,686115676,src/dbwrapper.cpp
Talkless,2021-08-11 12:30:05,"Maybe worth making `penv` a `unique_ptr` too, if we need manual handling with `delete`? Or do you think this would be kinda out of scope for this PR?\n\nAdding addition `delete` into new code does not seem... ""right"" (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-newdelete).",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686783500,686783500,src/dbwrapper.cpp
Crypt-iQ,2021-08-11 19:02:17,"good point, I can look into making it a `unique_ptr`",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r687097257,687097257,src/dbwrapper.cpp
ryanofsky,2021-10-29 19:41:09,"In commit ""dbwrapper: wrap options in unique_ptr and use DeleteOptions"" (6770f066b69c6c271e7096cc647d5d42762f6b05)\n\nIt's not too important, but I don't think there's an actual need to change this function, and the previous version of this that just returned a struct instead of dereferencing a pointer seemed more straightforward.\n\nTo keep the previous version, I believe you would just need ",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r739490464,739490464,src/dbwrapper.cpp
ryanofsky,2021-10-29 19:51:55,"In commit ""dbwrapper: wrap options in unique_ptr and use DeleteOptions"" (6770f066b69c6c271e7096cc647d5d42762f6b05)\n\nIt seems dodgy to set env to null without freeing it here. I think it would be better to either:\n\n- Set this to null immediately in the places where the env is deleted, in which case you could `assert(!options->env)` here\n- Or, to just drop this line and treat `env` and `op",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r739496546,739496546,src/dbwrapper.cpp
ryanofsky,2021-10-29 19:58:04,"re: https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686109932\n\n> If `penv` is deleted, then `~CDBWrapper()` gonna delete it again? Missing `= nullptr`?\n\nIn commit ""dbwrapper: wrap options in unique_ptr and use DeleteOptions"" (6770f066b69c6c271e7096cc647d5d42762f6b05)\n\nIt does seem fragile to rely on `HandleError` bypassing the destructor to avoid a double-delete. Would second",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r739499514,739499514,src/dbwrapper.cpp
ryanofsky,2021-10-29 20:00:07,"In commit ""dbwrapper: wrap options in unique_ptr and use DeleteOptions"" (6770f066b69c6c271e7096cc647d5d42762f6b05)\n\nI liked the suggestion to make `env` a unique_ptr https://github.com/bitcoin/bitcoin/pull/22663#discussion_r686783500, and maybe `pdb` could be a unique_ptr too?",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r739500531,739500531,src/dbwrapper.cpp
ryanofsky,2021-10-29 20:07:30,"In commit ""dbwrapper: wrap options in unique_ptr and use DeleteOptions"" (6770f066b69c6c271e7096cc647d5d42762f6b05)\n\nCustom deleter seems to be forgetting to `delete options`, which would explain the fuzzing leak? https://github.com/bitcoin/bitcoin/pull/22663#issuecomment-894792761",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r739504112,739504112,src/dbwrapper.cpp
laanwj,2021-11-10 15:41:27,"I agree with @ryanofsky. I don't think there's a strong need to change this function, but if there is, I would prefer it to return the target type `std::unique_ptr<leveldb::Options, void (*)(leveldb::Options*)` directly, instead of using a pointer positional out argument (which, strictly, seems a deterioration of API clarity to me).",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r746714737,746714737,src/dbwrapper.cpp
Crypt-iQ,2021-11-11 01:49:24,"Will work on a patch with this, thanks for the review",https://github.com/bitcoin/bitcoin/pull/22663#discussion_r747142169,747142169,src/dbwrapper.cpp
