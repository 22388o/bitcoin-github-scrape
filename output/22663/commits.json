[
  {
    "sha": "6770f066b69c6c271e7096cc647d5d42762f6b05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzcwZjA2NmI2OWM2YzI3MWU3MDk2Y2M2NDdkNWQ0Mjc2MmY2YjA1",
    "commit": {
      "author": {
        "name": "eugene",
        "email": "elzeigel@gmail.com",
        "date": "2021-08-08T00:35:44Z"
      },
      "committer": {
        "name": "eugene",
        "email": "elzeigel@gmail.com",
        "date": "2021-08-08T00:35:44Z"
      },
      "message": "dbwrapper: wrap options in unique_ptr and use DeleteOptions\n\nThis prevents a LeakSanitizer exception if the CDBWrapper ctor\nthrows. Also calls delete on the penv member if the ctor fails as\nthe destructor wouldn't be called.",
      "tree": {
        "sha": "e871f74290b104634c2197f633cb93128400ee96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e871f74290b104634c2197f633cb93128400ee96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6770f066b69c6c271e7096cc647d5d42762f6b05",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEzBAABCgAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmEPJ5MACgkQEYdZ6DQ5\nqbFYxAf6A64mQ98Ifqr7I3QjMP46g1Mknt89jf3dSptbaXUZigLLNsUM4UfVrJUU\nbnsiqUCx5Tec6OIHL2yEnryHCzZGteg2fcOSFsdpLXaaIEDDc7yKhI2mwavMA9mu\n1+coDcnCjxd+dS+5MFKncBEL6ljwVbV5b2rxFyaUYCxiVR31T9esDarulK3u++gp\naO3QS9ySmGWxLKQi3CTDUBnVdGpGN4RsuawKJLqyu32bWE69zMuDApmIKDISF0rq\nCEEFHLssSe6BNR4mz/pmxebkT8RWqCGmCcCeCGEhiS+pwAW8E0cWSZ8QV8hDKEQR\nryb3S7VCAoTUs0rNBcqv45QwPOj3Ew==\n=qJc/\n-----END PGP SIGNATURE-----",
        "payload": "tree e871f74290b104634c2197f633cb93128400ee96\nparent db94d74f241410d6577b695d73184740797448e6\nauthor eugene <elzeigel@gmail.com> 1628382944 -0400\ncommitter eugene <elzeigel@gmail.com> 1628382944 -0400\n\ndbwrapper: wrap options in unique_ptr and use DeleteOptions\n\nThis prevents a LeakSanitizer exception if the CDBWrapper ctor\nthrows. Also calls delete on the penv member if the ctor fails as\nthe destructor wouldn't be called.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6770f066b69c6c271e7096cc647d5d42762f6b05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6770f066b69c6c271e7096cc647d5d42762f6b05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6770f066b69c6c271e7096cc647d5d42762f6b05/comments",
    "author": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db94d74f241410d6577b695d73184740797448e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db94d74f241410d6577b695d73184740797448e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db94d74f241410d6577b695d73184740797448e6"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 30,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7c1d6a3b8298be1a4f9a350457b418f810a8c595",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 23,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6770f066b69c6c271e7096cc647d5d42762f6b05/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6770f066b69c6c271e7096cc647d5d42762f6b05/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=6770f066b69c6c271e7096cc647d5d42762f6b05",
        "patch": "@@ -97,46 +97,59 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n              options->max_open_files, default_open_files);\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize)\n+static void GetOptions(size_t nCacheSize, leveldb::Options* options)\n {\n-    leveldb::Options options;\n-    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n-    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n-    options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n-    options.compression = leveldb::kNoCompression;\n-    options.info_log = new CBitcoinLevelDBLogger();\n+    options->block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n+    options->write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n+    options->filter_policy = leveldb::NewBloomFilterPolicy(10);\n+    options->compression = leveldb::kNoCompression;\n+    options->info_log = new CBitcoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n-        options.paranoid_checks = true;\n+        options->paranoid_checks = true;\n     }\n-    SetMaxOpenFiles(&options);\n-    return options;\n+    SetMaxOpenFiles(options);\n+}\n+\n+// Custom deleter for unique_ptr<leveldb::Options>.\n+static void DeleteOptions(leveldb::Options* options)\n+{\n+    delete options->filter_policy;\n+    options->filter_policy = nullptr;\n+    delete options->info_log;\n+    options->info_log = nullptr;\n+    delete options->block_cache;\n+    options->block_cache = nullptr;\n+    options->env = nullptr;\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{path.stem().string()}\n+    : options(new leveldb::Options, DeleteOptions), m_name{path.stem().string()}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n     iteroptions.fill_cache = false;\n     syncoptions.sync = true;\n-    options = GetOptions(nCacheSize);\n-    options.create_if_missing = true;\n+    GetOptions(nCacheSize, options.get());\n+    options->create_if_missing = true;\n     if (fMemory) {\n         penv = leveldb::NewMemEnv(leveldb::Env::Default());\n-        options.env = penv;\n+        options->env = penv;\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), *options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(*options, path.string(), &pdb);\n+    if (!status.ok()) {\n+        delete penv;\n+    }\n     dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n@@ -170,14 +183,7 @@ CDBWrapper::~CDBWrapper()\n {\n     delete pdb;\n     pdb = nullptr;\n-    delete options.filter_policy;\n-    options.filter_policy = nullptr;\n-    delete options.info_log;\n-    options.info_log = nullptr;\n-    delete options.block_cache;\n-    options.block_cache = nullptr;\n     delete penv;\n-    options.env = nullptr;\n }\n \n bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)"
      },
      {
        "sha": "75ce72dcdee910c6343deb42705084fdd6eeb93c",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6770f066b69c6c271e7096cc647d5d42762f6b05/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6770f066b69c6c271e7096cc647d5d42762f6b05/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=6770f066b69c6c271e7096cc647d5d42762f6b05",
        "patch": "@@ -181,7 +181,7 @@ class CDBWrapper\n     leveldb::Env* penv;\n \n     //! database options used\n-    leveldb::Options options;\n+    std::unique_ptr<leveldb::Options, void (*)(leveldb::Options*)> options;\n \n     //! options used when reading from the database\n     leveldb::ReadOptions readoptions;"
      }
    ]
  }
]