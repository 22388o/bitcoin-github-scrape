[
  {
    "sha": "816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTZmNTBmNGIxMmUyMGIzMTA2YzI1NGFiNTJiN2NjNmU3NjVhYTk4",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T05:40:06Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:51:57Z"
      },
      "message": "[watchdog] Introduce CWatchdog class\n\nCWatchdog is a cross-layer anomalies detection module aims to\ncover block issuance, peer management, local clock or net level.\n\nIf any anomalie is detected an event is triggered to inform an\napplication layer or any internal consumer of a future watchdog\ninterface.\n\nThis code is only integrated in next commit.",
      "tree": {
        "sha": "10c29b9df2bb12148012648fd8d78884722030e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10c29b9df2bb12148012648fd8d78884722030e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7a5767423f3757e876fbcb0f4ffb534172dd734d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5767423f3757e876fbcb0f4ffb534172dd734d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5767423f3757e876fbcb0f4ffb534172dd734d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd227f247ec48da2d3cb1eda3e2bd772b061a5a1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -250,6 +250,7 @@ BITCOIN_CORE_H = \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n+  watchdog.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -317,6 +318,7 @@ libbitcoin_server_a_SOURCES = \\\n   validation.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n+  watchdog.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "5b865db4b76137417be696b94616dddfddd2ed45",
        "filename": "src/watchdog.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.cpp?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <watchdog.h>\n+\n+#include <util/time.h>\n+\n+CWatchdog::CWatchdog()\n+{\n+    nLastHeader = 0;\n+}\n+\n+CWatchdog::~CWatchdog() {}\n+\n+void CWatchdog::ScanAnomalies()\n+{\n+}\n+\n+void CWatchdog::LogHeader(const std::vector<CBlockHeader>& block)\n+{\n+    nLastHeader = GetTime();\n+}"
      },
      {
        "sha": "68154d2f5e013268407b4c04cc757a9d2fb034b3",
        "filename": "src/watchdog.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.h?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WATCHDOG_H\n+#define BITCOIN_WATCHDOG_H\n+\n+#include <primitives/block.h>\n+#include <stdint.h>\n+\n+class CWatchdog\n+{\n+public:\n+    ~CWatchdog();\n+    CWatchdog();\n+    //! Launch scan of block issuance or network anomalies\n+    //! This is periodically called by scheduler.\n+    void ScanAnomalies();\n+    //! Log header to detect block issuance anomalies.\n+    void LogHeader(const std::vector<CBlockHeader>& block);\n+private:\n+    //! Last time header has been logged.\n+    int64_t nLastHeader;\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGMzOTJhZTA4MGIxMGE2OTk3ZmFmN2Q2ZDM3OGZjYTk4OTdiOGY3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T07:40:29Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:53:46Z"
      },
      "message": "[watchdoginterface] Introduce CWatchdogInterface class\n\nCWatchdogInterface is consumed by another module or application\nwillingly to take corrective actions based on anomalies detected.\n\nCWatchdogInterface only callback is BlockHeaderAnomalies, meaning\nblock header aren't received at a normal rate modulo block variance.",
      "tree": {
        "sha": "d658c77ecc6b5ab92389bc0b6ccd740c0d83776b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d658c77ecc6b5ab92389bc0b6ccd740c0d83776b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816f50f4b12e20b3106c254ab52b7cc6e765aa98"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 189,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f9ff48cad3f99a9bcdc5701d48f0350e660376d8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -251,6 +251,7 @@ BITCOIN_CORE_H = \\\n   wallet/coinselection.h \\\n   warnings.h \\\n   watchdog.h \\\n+  watchdoginterface.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -319,6 +320,7 @@ libbitcoin_server_a_SOURCES = \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   watchdog.cpp \\\n+  watchdoginterface.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "4e547f16f5e84b976c979138014ba092cf4cc81e",
        "filename": "src/watchdog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.cpp?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -5,6 +5,7 @@\n #include <watchdog.h>\n \n #include <util/time.h>\n+#include <watchdoginterface.h>\n \n CWatchdog::CWatchdog()\n {\n@@ -15,6 +16,7 @@ CWatchdog::~CWatchdog() {}\n \n void CWatchdog::ScanAnomalies()\n {\n+    GetWatchSignals().BlockHeaderAnomalie();\n }\n \n void CWatchdog::LogHeader(const std::vector<CBlockHeader>& block)"
      },
      {
        "sha": "e82e573dee5ff8206292bc5330821427d176aa3f",
        "filename": "src/watchdoginterface.cpp",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdoginterface.cpp?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -0,0 +1,125 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <watchdoginterface.h>\n+\n+#include <scheduler.h>\n+#include <logging.h>\n+\n+#include <future>\n+#include <unordered_map>\n+#include <utility>\n+\n+struct WatchSignalsInstance {\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CWatchdogInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CWatchdogInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    explicit WatchSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CWatchdogInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) inserted.first->second = m_list.emplace(m_list.end());\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CWatchdogInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (!--it->second->count) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (const auto& entry : m_map) {\n+            if (!--entry.second->count) m_list.erase(entry.second);\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            ++it->count;\n+            {\n+                REVERSE_LOCK(lock);\n+                f(*it->callbacks);\n+            }\n+            it = --it->count ? std::next(it) : m_list.erase(it);\n+        }\n+    }\n+};\n+\n+static CWatchSignals g_watch_signals;\n+\n+void CWatchSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+    assert(!m_internals);\n+    m_internals.reset(new WatchSignalsInstance(&scheduler));\n+}\n+\n+void CWatchSignals::UnregisterBackgroundSignalScheduler() {\n+    m_internals.reset(nullptr);\n+}\n+\n+void CWatchSignals::FlushBackgroundCallbacks() {\n+    if (m_internals) {\n+        m_internals->m_schedulerClient.EmptyQueue();\n+    }\n+}\n+\n+size_t CWatchSignals::CallbacksPending() {\n+    if (!m_internals) return 0;\n+    return m_internals->m_schedulerClient.CallbacksPending();\n+}\n+\n+CWatchSignals& GetWatchSignals()\n+{\n+    return g_watch_signals;\n+}\n+\n+void RegisterSharedWatchdogInterface(std::shared_ptr<CWatchdogInterface> callback) {\n+    // Each connection captures pwalletIn to ensure that each callback is\n+    // executed before pwalletIn is destroyed. For more details see #18338.\n+    g_watch_signals.m_internals->Register(std::move(callback));\n+}\n+\n+void RegisterWatchdogInterface(CWatchdogInterface* callbacks)\n+{\n+    // Create a shared_ptr with a no-op deleter - CValidationInterface lifecycle\n+    // is managed by the caller.\n+    RegisterSharedWatchdogInterface({callbacks, [](CWatchdogInterface*){}});\n+}\n+\n+void CWatchSignals::BlockHeaderAnomalie() {\n+    auto event = [this] {\n+        m_internals->Iterate([&](CWatchdogInterface& callbacks) { callbacks.BlockHeaderAnomalie(); });\n+    };\n+    m_internals->m_schedulerClient.AddToProcessQueue([=] {\n+        event();\n+    });\n+}"
      },
      {
        "sha": "a1a0aa962027379915adfbfe3a01ece826b560fe",
        "filename": "src/watchdoginterface.h",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdoginterface.h?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WATCHDOGINTERFACE_H\n+#define BITCOIN_WATCHDOGINTERFACE_H\n+\n+#include <validationinterface.h>\n+\n+class CWatchdogInterface;\n+\n+/** Register a wallet to receive updates from core */\n+void RegisterWatchdogInterface(CWatchdogInterface* callback);\n+\n+/**\n+ * Implement this to subscribe to events generated in watchdog\n+ *\n+ * Each CWatchdogInterface() subscriber will receive event callbacks\n+ * in the order in which the events were generated by watchdog.\n+ *\n+*/\n+class CWatchdogInterface {\n+protected:\n+    /**\n+     * Protected destructor so that instances can only be deleted by derived classes.\n+     * If that restriction is no longer desired, this should be made public and virtual.\n+     */\n+    ~CWatchdogInterface() = default;\n+    /**\n+     * Notifies listeners a block header have been detected.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void BlockHeaderAnomalie() {}\n+    friend class CWatchSignals;\n+};\n+\n+struct WatchSignalsInstance;\n+class CWatchSignals {\n+private:\n+    std::unique_ptr<WatchSignalsInstance> m_internals;\n+\n+    friend void ::RegisterSharedWatchdogInterface(std::shared_ptr<CWatchdogInterface>);\n+\n+public:\n+    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n+    void UnregisterBackgroundSignalScheduler();\n+    /** Call any remaining callbacks on the calling thread */\n+    void FlushBackgroundCallbacks();\n+\n+    size_t CallbacksPending();\n+\n+    void BlockHeaderAnomalie();\n+};\n+\n+CWatchSignals& GetWatchSignals();\n+\n+#endif // BITCOIN_WATCHDOGINTERFACE_H"
      }
    ]
  },
  {
    "sha": "fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2FmZTU3ODdmNWQ5MGJmZjE4MmEwMWQ3ZDFkOWUyNDJkMWNlNzc2",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T06:12:08Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:54:21Z"
      },
      "message": "[init] Integrate CWatchdog and its interface in init sequence\n\nCWatchdog is integrated in NodeContext to make it accessible to any\nfutute rpc calls. Some application may fine-tune watchdog according\nto their requirements.\n\nThis code is not scheduled yet.",
      "tree": {
        "sha": "bb2a4dfefa5df1918049bfed0416cb38a38828be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb2a4dfefa5df1918049bfed0416cb38a38828be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14c392ae080b10a6997faf7d6d378fca9897b8f7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "46cf8c8fd57381ae94a199790e6f960e490ed25e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -53,6 +53,8 @@\n #include <util/threadnames.h>\n #include <util/translation.h>\n #include <validation.h>\n+#include <watchdog.h>\n+#include <watchdoginterface.h>\n #include <hash.h>\n \n \n@@ -255,6 +257,7 @@ void Shutdown(NodeContext& node)\n     // After there are no more peers/RPC left to give us new data which may generate\n     // CValidationInterface callbacks, flush them...\n     GetMainSignals().FlushBackgroundCallbacks();\n+    GetWatchSignals().FlushBackgroundCallbacks();\n \n     // Stop and delete all indexes only after flushing background callbacks.\n     if (g_txindex) {\n@@ -295,6 +298,7 @@ void Shutdown(NodeContext& node)\n     node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    GetWatchSignals().UnregisterBackgroundSignalScheduler();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     node.args = nullptr;\n@@ -1317,6 +1321,7 @@ bool AppInitMain(NodeContext& node)\n     }, std::chrono::minutes{1});\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n+    GetWatchSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs\n@@ -1370,6 +1375,9 @@ bool AppInitMain(NodeContext& node)\n     assert(!node.mempool);\n     node.mempool = &::mempool;\n \n+    assert(!node.watchdog);\n+    node.watchdog = MakeUnique<CWatchdog>();\n+\n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n "
      },
      {
        "sha": "f574d22dc5fdaba386daa30f24d890f32c39217c",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -9,6 +9,7 @@\n #include <net.h>\n #include <net_processing.h>\n #include <scheduler.h>\n+#include <watchdog.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "d5544fdcd6cfa2736d2a908f810a3ebe711dd68a",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -14,6 +14,7 @@ class CConnman;\n class CScheduler;\n class CTxMemPool;\n class PeerLogicValidation;\n+class CWatchdog;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -38,6 +39,7 @@ struct NodeContext {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n+    std::unique_ptr<CWatchdog> watchdog;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      }
    ]
  },
  {
    "sha": "7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGQxYjIyYjZmNzhkYTc3NTkxYzQzMDNiYWZhYjAwNmM5YTliZTEz",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T06:32:31Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:56:25Z"
      },
      "message": "[scheduler] Schedule ScanAnomalies every 60min\n\nRun ScanAnomalies to process any heuristics and trigger watchdog\ninterface callback.\n\nAs of present commit, there is no heuristic implemented, callback\nis blankly called to exerce watchdog interface.",
      "tree": {
        "sha": "eab890653650b4ddc418cbf2da928cfd716c2d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eab890653650b4ddc418cbf2da928cfd716c2d05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcafe5787f5d90bff182a01d7d1d9e242d1ce776"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ac601b6ae5e7b404813bf6631b4a719f8ae0404",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "patch": "@@ -1949,5 +1949,9 @@ bool AppInitMain(NodeContext& node)\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL);\n \n+    CWatchdog* watchdog = node.watchdog.get();\n+    node.scheduler->scheduleEvery([watchdog]{\n+            watchdog->ScanAnomalies();\n+    }, SCAN_ANOMALIES_INTERVAL);\n     return true;\n }"
      },
      {
        "sha": "ec4d9c0f22bb725ccbd5ca0a8b38b71fc4c67b25",
        "filename": "src/watchdog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/watchdog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/watchdog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.h?ref=7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "patch": "@@ -5,9 +5,14 @@\n #ifndef BITCOIN_WATCHDOG_H\n #define BITCOIN_WATCHDOG_H\n \n+#include <chrono>\n #include <primitives/block.h>\n #include <stdint.h>\n \n+/* How often to scan for anomalies */\n+//TODO: make if configurable\n+static constexpr std::chrono::minutes SCAN_ANOMALIES_INTERVAL{60};\n+\n class CWatchdog\n {\n public:"
      }
    ]
  },
  {
    "sha": "7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDBlN2M5ODg0OWM5MzI5NjYwYzlkMGM5ZjNjN2NmN2ZlNWNlNTRi",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T05:57:43Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:57:45Z"
      },
      "message": "[net] Integrate CWatchdog in CConman\n\nInsert watchdog LogHeader after a successful ProcessNewBlockHeaders,\ntherefore updating last time watchdog have seen a step forward\non headers tree construction.\n\nWatchdog loggers should be designed on being invasive-minimal at they\nmay encumber hot paths.",
      "tree": {
        "sha": "cfa9d7059346e7088fb2025245bb56e7a96c8a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfa9d7059346e7088fb2025245bb56e7a96c8a89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd1b22b6f78da77591c4303bafab006c9a9be13"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98edc81a5c0b2f2ba2dbe66085b1fb335758823f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -1891,6 +1891,7 @@ bool AppInitMain(NodeContext& node)\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n+    connOptions.m_watchdog = node.watchdog.get();\n     connOptions.m_msgproc = node.peer_logic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);"
      },
      {
        "sha": "4c586cd72547a9ec654cca666cc4114509831f78",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -23,6 +23,7 @@\n #include <sync.h>\n #include <threadinterrupt.h>\n #include <uint256.h>\n+#include <watchdog.h>\n \n #include <atomic>\n #include <deque>\n@@ -136,6 +137,7 @@ class CConnman\n         CClientUIInterface* uiInterface = nullptr;\n         NetEventsInterface* m_msgproc = nullptr;\n         BanMan* m_banman = nullptr;\n+        CWatchdog* m_watchdog = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n@@ -163,6 +165,7 @@ class CConnman\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n         m_banman = connOptions.m_banman;\n+        m_watchdog = connOptions.m_watchdog;\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n@@ -325,6 +328,9 @@ class CConnman\n \n     void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n+    /* Connection manager watchdog pointer access */\n+    CWatchdog* m_watchdog;\n+\n private:\n     struct ListenSocket {\n     public:"
      },
      {
        "sha": "8f35b08c6cce1954031c2eca40eef9f377aee564",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -1792,6 +1792,7 @@ bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& m\n             MaybePunishNodeForBlock(pfrom->GetId(), state, via_compact_block, \"invalid header received\");\n             return false;\n         }\n+        connman->m_watchdog->LogHeader(headers);\n     }\n \n     {"
      }
    ]
  }
]