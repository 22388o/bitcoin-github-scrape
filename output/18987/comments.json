[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629683561",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18987#issuecomment-629683561",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18987",
    "id": 629683561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY4MzU2MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-16T17:54:07Z",
    "updated_at": "2020-05-22T22:16:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n* #15367 (feature: Added ability for users to add a startup command by benthecarman)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629683561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633038617",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18987#issuecomment-633038617",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18987",
    "id": 633038617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzAzODYxNw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-23T12:05:57Z",
    "updated_at": "2020-05-23T12:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633038617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/891850721",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18987#issuecomment-891850721",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18987",
    "id": 891850721,
    "node_id": "IC_kwDOABII5841KI_h",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-03T13:33:00Z",
    "updated_at": "2021-08-03T13:33:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't looked at this PR closer, but I think anomaly detection could be done via [USDT](https://github.com/bitcoin/bitcoin/blob/master/doc/tracing.md) in an external application hooking into Bitcoin Core internals too.\r\n\r\n> bandwidth consumption surges\r\n\r\nThis could be done with [the `net` tracepoints](https://github.com/bitcoin/bitcoin/blob/master/doc/tracing.md#context-net) for inbound / outbound P2P messages. See this example [https://bitcoind.observer/p2p-network-traffic](https://bitcoind.observer/d/Z3_pFfZnz/p2p-network-traffic?orgId=1&refresh=30s) and code https://github.com/0xB10C/bitcoind-observer.\r\n\r\n> Prevention of eclipse-attacks, ASN distribution among addrman\r\n\r\nI've added a few tracepoints (not in a PR yet) to addrman to externally observe the `new` and `tried` tables too. See e.g. [this realtime visualization](https://twitter.com/0xB10C/status/1407019872681332742/photo/1) (colors are addr type here, but could also be AS based) of my addrman tables:\r\n\r\n![image](https://user-images.githubusercontent.com/19157360/128023646-1f0f953f-99ab-4430-a9b8-aaa950ad2b04.png)\r\n\r\nLet if you think this might be an alternative to a module in Bitcoin Core. Happy to chat. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/891850721/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892271290",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18987#issuecomment-892271290",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18987",
    "id": 892271290,
    "node_id": "IC_kwDOABII5841Lvq6",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T00:50:15Z",
    "updated_at": "2021-08-04T00:50:15Z",
    "author_association": "MEMBER",
    "body": "Honestly, I've not been that far in the design of a specific hook interface servicing watchdog/statistical tools.\r\n\r\nThis PoC was relying on a `CWatchdogInterface` inspired from the current `CValidationInterface`. Though one of the prevailing feedback I received with this proposal was that it would be far better to have the module separated in another runtime, and even external to Bitcoin Core internals or build system. Thus letting _any_ module to be plugged in.\r\n\r\nOne solution I'm working on is pursuing on the work done by multiprocess with the newly introduced abstract interfaces (`src/interfaces`), where your potential external modules could be written in Rust to talk directly to core C++ code through Cap'n Proto or in the future another protocol (fyi, see https://github.com/chaincodelabs/libmultiprocess/issues/56).\r\n\r\nOf course, w.r.t to event collection, the USDT approach you're proposing sounds the right tool. One could imagine a watchdog module where the low-level event collection is gathered through tracing and the high-level corrective logic relying on a `*.capnp` interface, all bundled in the same runtime.\r\n\r\n> This could be done with the net tracepoints for inbound / outbound P2P messages. See this example https://bitcoind.observer/p2p-network-traffic and code https://github.com/0xB10C/bitcoind-observer.\r\n\r\nI need to think more, but I think tracepoints could cover the whole range of proposed heuristics: local clock, packets RTT, peer rotation frequency, mempool feerate groups, ... ?\r\n\r\n> Let if you think this might be an alternative to a module in Bitcoin Core. Happy to chat.\r\n\r\nFirst impression, I think this tracepoint approach is far better than yet-another-non-critical-module in core for sure. Yeah happy to chat, on this PR, a new issue or irc :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892271290/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]