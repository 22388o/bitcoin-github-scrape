[
  {
    "sha": "197109b2cb97d785ff98b50643f20ceae75aced7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTcxMDliMmNiOTdkNzg1ZmY5OGI1MDY0M2YyMGNlYWU3NWFjZWQ3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-03T09:19:28Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-04T05:08:39Z"
      },
      "message": "Add Tabulated() helper method for RPC command help tabulation.",
      "tree": {
        "sha": "13166da4947495925795f5402a3ebb2861e75376",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13166da4947495925795f5402a3ebb2861e75376"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/197109b2cb97d785ff98b50643f20ceae75aced7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYlWHZAAoJEFevdi2zNTMiwvgP/1RQVOwJBGd+/M/3cj2KVGj7\nskkoXKa7BMvKt8Nx0koCjQ6Tcqdv+uO9XLHBJNZ94sSzdSepP2evL6zvydKXuks9\n7boiNiyQ0XAUbTGlNwaVB/iBPfvJBjXJsy6cfS2CRzg5WfbdJ7lAi1yv9VHvBsMh\nXluqanJKbo9CGpu24lY09s+WKi87FXzaNVh+UTp+dOkr9w77EFFy8Aizz9X0fhTd\nkqT8FiAC2ynLKB6mCr3mi268clZ473063RZ61/9SjsQSxJryYFUWlhTI427P3Tc+\nUo/nemQEFbWDUOLBgDOhf5jImTb477SuSh8IAgC2RZ5keRz2J5pg9RVI3YoDGJ6G\nL6+lGg+tvKj562BxgWKwKOf3fM7Obn+2IMt4eZyKqbIioPe67MuKalUiV39GczTM\njTVlr2REVV2Ko7SCUlu9ZmuwJPJ1YYA5K8StudMrEuWpS45aEDEQ6aUP7xYb9xio\n2sIUkUGKYp5Oi32p4uKP5IPMJsodiQF/R4vbVUd1aS7xJD795SeC8OIuat8IgIoV\nkjEfnwh68DK/oiPznHUU/hX+aE+xRAqg8ASluNi9sfJvpl9csis6rJlJKdDD1Auj\n6D/yYRsmFVvIP/qRucn0oqS76VytLfw5zTGBJxaBcE5YtXqADjhBnd+nXTmP9EPq\nls4r0ViGb3+/IOVGtCz0\n=BWEP\n-----END PGP SIGNATURE-----",
        "payload": "tree 13166da4947495925795f5402a3ebb2861e75376\nparent 77bd8c4cab67b6df6a09f856534653c7e064d6ec\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1486113568 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1486184919 +0900\n\nAdd Tabulated() helper method for RPC command help tabulation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197109b2cb97d785ff98b50643f20ceae75aced7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/197109b2cb97d785ff98b50643f20ceae75aced7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197109b2cb97d785ff98b50643f20ceae75aced7/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1081501f9e94494aa783ec3ac39f61dcaf3d53ab",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197109b2cb97d785ff98b50643f20ceae75aced7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197109b2cb97d785ff98b50643f20ceae75aced7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=197109b2cb97d785ff98b50643f20ceae75aced7",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   random.h \\\n   reverselock.h \\\n   rpc/client.h \\\n+  rpc/help.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\\n@@ -194,6 +195,7 @@ libbitcoin_server_a_SOURCES = \\\n   policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n+  rpc/help.cpp \\\n   rpc/blockchain.cpp \\\n   rpc/mining.cpp \\\n   rpc/misc.cpp \\"
      },
      {
        "sha": "4fc3b1670110c1bc4dfdcf18ac2c06d7d10f897b",
        "filename": "src/rpc/help.cpp",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197109b2cb97d785ff98b50643f20ceae75aced7/src/rpc/help.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197109b2cb97d785ff98b50643f20ceae75aced7/src/rpc/help.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/help.cpp?ref=197109b2cb97d785ff98b50643f20ceae75aced7",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpc/help.h\"\n+\n+#include <vector>\n+#include <sstream>\n+#include <algorithm>\n+\n+static const std::string spaces = \"                                             \\\n+                                                                                \\\n+                                                                                \";\n+\n+inline std::string lpad(uint8_t width, const std::string& s)\n+{\n+    size_t len = s.size();\n+    return len >= width ? s : s + spaces.substr(0, width - len);\n+}\n+\n+std::string Tabulated(const std::string content)\n+{\n+    std::vector<std::string> v;\n+    uint8_t maxWidth = 0;\n+    size_t pos = 0;\n+    size_t i = content.find('\\n');\n+    while (i != std::string::npos) {\n+        std::string line = content.substr(pos, i - pos);\n+        std::string left = line;\n+        std::string right = \"\";\n+        size_t tabpoint = line.find(\" || \");\n+        if (tabpoint != std::string::npos) {\n+            left = line.substr(0, tabpoint);\n+            right = line.substr(tabpoint + 4);\n+            size_t trimpos = left.find_last_not_of(\" \");\n+            if (trimpos != std::string::npos) {\n+                left = left.substr(0, 1 + trimpos);\n+            }\n+            maxWidth = std::max(maxWidth, (uint8_t)left.length());\n+        }\n+        v.push_back(left);\n+        v.push_back(right);\n+        pos = i + 1;\n+        i = content.find('\\n', pos);\n+    }\n+\n+    std::stringstream ss;\n+    for (size_t j = 0; j + 1 < v.size(); j += 2) {\n+        if (v[j + 1].length() == 0)\n+            ss << v[j] << std::endl;\n+        else\n+            ss << lpad(maxWidth, v[j]) << \" \" << v[j + 1] << std::endl;\n+    }\n+    return ss.str();\n+}"
      },
      {
        "sha": "c1c89ea4f3e915f5371104a0389b08f944b4e4fb",
        "filename": "src/rpc/help.h",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197109b2cb97d785ff98b50643f20ceae75aced7/src/rpc/help.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197109b2cb97d785ff98b50643f20ceae75aced7/src/rpc/help.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/help.h?ref=197109b2cb97d785ff98b50643f20ceae75aced7",
        "patch": "@@ -0,0 +1,12 @@\n+// Copyright (c) 20017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_HELP_H\n+#define BITCOIN_RPC_HELP_H\n+\n+#include <string>\n+\n+std::string Tabulated(const std::string content);\n+\n+#endif // BITCOIN_RPC_HELP_H"
      }
    ]
  },
  {
    "sha": "636e1d3a9c2263da2bc7c21fa527194cdb0e5b45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzZlMWQzYTljMjI2M2RhMmJjN2MyMWZhNTI3MTk0Y2RiMGU1YjQ1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-03T09:19:49Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-04T05:08:41Z"
      },
      "message": "Switch to using Tabulated() in rpc/blockchain.cpp.",
      "tree": {
        "sha": "166e6704a60046a1b9f800e2bbffced6a5a20924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/166e6704a60046a1b9f800e2bbffced6a5a20924"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYlWHZAAoJEFevdi2zNTMi8NgP/AxG5aWVLw23v/T+pmW5lq/v\n6s0qgiTBmhhSevHqFgbCJpUCJtL8uyt/TSpVZZbxoTh/bEc6hQz4dKLGvRIforwj\nPm4NeVPYnTUgKDUWyQPqxQFICU9ypJTYoExWMJrS1EkcsIH7I/l3Ui3IjN8GCRYx\nTuUQdyiajA/x5knowlv4nknRpVspIT3usE6Ic3Pz12sYHJ1TlB9I1ac05aGWmcR0\nXzYvw0/0mclMRxdalacHD5+bDKA7HIcc19OedFIOWFU0uz2awmLkRQnucXJitUN9\nVHhicdQ/f2AAuf2j9wMt+EibScdz/EtL1WB5wcOh5B/BorUOPImG1iRnfMfkj7Cm\nTYEs3cx6yOFz+TPiQXb93Jh0Jddd9F7uI17bTvgVVYiTszN8/Rnl9PHtH2hmBB3p\nOacQN+VXXLT7BT8Sy6pYfOMRE7WeKg28Va8PzTMjg23Err21A/anuUeCwHmI5zH2\nw6Nh+O/C5M0swu3/ZrpeWfwp+z70E7uz4ew1CpgXjnI/LxTvuNnRxxkOpDXplnNe\nVbuFYNDh1hcctnv17Ba2+tBvC4Gyxhb3aMwaag5qMx/FTgVb73I6RRB0GOB9S56S\nOT00OQw/Ikb2nIp2l6SVq7ZUput/zAGhbxJi2bnn6hT+DkwgWyvKE3rlPYA5jFvK\nwaD/ozLD57TPmheOB7ee\n=tmzD\n-----END PGP SIGNATURE-----",
        "payload": "tree 166e6704a60046a1b9f800e2bbffced6a5a20924\nparent 197109b2cb97d785ff98b50643f20ceae75aced7\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1486113589 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1486184921 +0900\n\nSwitch to using Tabulated() in rpc/blockchain.cpp.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "197109b2cb97d785ff98b50643f20ceae75aced7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197109b2cb97d785ff98b50643f20ceae75aced7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/197109b2cb97d785ff98b50643f20ceae75aced7"
      }
    ],
    "stats": {
      "total": 578,
      "additions": 306,
      "deletions": 272
    },
    "files": [
      {
        "sha": "12d9f4cc33b05444cb652db13064537c9e374f96",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 306,
        "deletions": 272,
        "changes": 578,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636e1d3a9c2263da2bc7c21fa527194cdb0e5b45/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=636e1d3a9c2263da2bc7c21fa527194cdb0e5b45",
        "patch": "@@ -19,6 +19,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"hash.h\"\n+#include \"rpc/help.h\"\n \n #include <stdint.h>\n \n@@ -153,8 +154,8 @@ UniValue getblockcount(const JSONRPCRequest& request)\n             \"getblockcount\\n\"\n             \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n-            \"n    (numeric) The current block count\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\"n || (numeric) The current block count\\n\")\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n         );\n@@ -170,8 +171,8 @@ UniValue getbestblockhash(const JSONRPCRequest& request)\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"hex\\\"      (string) the block hash hex encoded\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\"\\\"hex\\\" || (string) the block hash hex encoded\\n\")\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n@@ -194,16 +195,18 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n-            \"waitfornewblock (timeout)\\n\"\n+            \"waitfornewblock ( timeout )\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. timeout                || (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n+                \"\\nResult:\\n\"\n+                \"{                         || (json object)\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",    || (string) The blockhash\\n\"\n+                \"  \\\"height\\\" : \\\"height\\\" || (int) Block height\\n\"\n+            )\n+            + \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n@@ -232,18 +235,20 @@ UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"waitforblock <blockhash> (timeout)\\n\"\n+            \"waitforblock <blockhash> ( timeout )\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\" (required, string) Block hash to wait for.\\n\"\n-            \"2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"blockhash\\\"          || (required, string) Block hash to wait for.\\n\"\n+                \"2. timeout                || (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n+                \"\\nResult:\\n\"\n+                \"{                         || (json object)\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",    || (string) The blockhash\\n\"\n+                \"  \\\"height\\\" : \\\"height\\\" || (int) Block height\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n         );\n@@ -274,19 +279,21 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"waitforblockheight <height> (timeout)\\n\"\n+            \"waitforblockheight <height> ( timeout )\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n             \"of the current tip.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. height  (required, int) Block height to wait for (int)\\n\"\n-            \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. height                 || (required, int) Block height to wait for (int)\\n\"\n+                \"2. timeout                || (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n+                \"\\nResult:\\n\"\n+                \"{                         || (json object)\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",    || (string) The blockhash\\n\"\n+                \"  \\\"height\\\" : \\\"height\\\" || (int) Block height\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n         );\n@@ -319,8 +326,8 @@ UniValue getdifficulty(const JSONRPCRequest& request)\n             \"getdifficulty\\n\"\n             \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n             \"\\nResult:\\n\"\n-            \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\"n.nnn || (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\")\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n         );\n@@ -331,21 +338,21 @@ UniValue getdifficulty(const JSONRPCRequest& request)\n \n std::string EntryDescriptionString()\n {\n-    return \"    \\\"size\\\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n-           \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-           \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n-           \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-           \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-           \"    \\\"startingpriority\\\" : n, (numeric) DEPRECATED. Priority when transaction entered pool\\n\"\n-           \"    \\\"currentpriority\\\" : n,  (numeric) DEPRECATED. Transaction priority now\\n\"\n-           \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n-           \"    \\\"descendantsize\\\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n-           \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)\\n\"\n-           \"    \\\"ancestorcount\\\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\\n\"\n-           \"    \\\"ancestorsize\\\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\\n\"\n-           \"    \\\"ancestorfees\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)\\n\"\n-           \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-           \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+    return \"    \\\"size\\\" : n,             || (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n+           \"    \\\"fee\\\" : n,              || (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+           \"    \\\"modifiedfee\\\" : n,      || (numeric) transaction fee with fee deltas used for mining priority\\n\"\n+           \"    \\\"time\\\" : n,             || (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+           \"    \\\"height\\\" : n,           || (numeric) block height when transaction entered pool\\n\"\n+           \"    \\\"startingpriority\\\" : n, || (numeric) DEPRECATED. Priority when transaction entered pool\\n\"\n+           \"    \\\"currentpriority\\\" : n,  || (numeric) DEPRECATED. Transaction priority now\\n\"\n+           \"    \\\"descendantcount\\\" : n,  || (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n+           \"    \\\"descendantsize\\\" : n,   || (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n+           \"    \\\"descendantfees\\\" : n,   || (numeric) modified fees (see above) of in-mempool descendants (including this one)\\n\"\n+           \"    \\\"ancestorcount\\\" : n,    || (numeric) number of in-mempool ancestor transactions (including this one)\\n\"\n+           \"    \\\"ancestorsize\\\" : n,     || (numeric) virtual transaction size of in-mempool ancestors (including this one)\\n\"\n+           \"    \\\"ancestorfees\\\" : n,     || (numeric) modified fees (see above) of in-mempool ancestors (including this one)\\n\"\n+           \"    \\\"depends\\\" : [           || (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+           \"        \\\"transactionid\\\",    || (string) parent transaction id\\n\"\n            \"       ... ]\\n\";\n }\n \n@@ -417,20 +424,22 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. verbose || (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n+                \"\\nResult: (for verbose = false):\\n\"\n+                \"[                       || (json array of string)\\n\"\n+                \"  \\\"transactionid\\\"     || (string) The transaction id\\n\"\n+                \"  ,...\\n\"\n+                \"]\\n\"\n+                \"\\nResult: (for verbose = true):\\n\"\n+                \"{                       || (json object)\\n\"\n+                \"  \\\"transactionid\\\" : { || (json object)\\n\"\n+                + EntryDescriptionString()\n+                + \"  }, ...\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getrawmempool\", \"true\")\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n@@ -446,23 +455,25 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n-            \"getmempoolancestors txid (verbose)\\n\"\n+            \"getmempoolancestors txid ( verbose )\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult (for verbose=true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"txid\\\"             || (string, required) The transaction id (must be in mempool)\\n\"\n+                \"2. verbose              || (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n+                \"\\nResult (for verbose=false):\\n\"\n+                \"[                       || (json array of strings)\\n\"\n+                \"  \\\"transactionid\\\"     || (string) The transaction id of an in-mempool ancestor transaction\\n\"\n+                \"  ,...\\n\"\n+                \"]\\n\"\n+                \"\\nResult (for verbose=true):\\n\"\n+                \"{                       || (json object)\\n\"\n+                \"  \\\"transactionid\\\" : { || (json object)\\n\"\n+                + EntryDescriptionString()\n+                + \"  }, ...\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             );\n@@ -510,23 +521,25 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n-            \"getmempooldescendants txid (verbose)\\n\"\n+            \"getmempooldescendants txid ( verbose )\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"[                       (json array of strings)\\n\"\n-            \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult (for verbose=true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"txid\\\"             || (string, required) The transaction id (must be in mempool)\\n\"\n+                \"2. verbose              || (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n+                \"\\nResult (for verbose=false):\\n\"\n+                \"[                       || (json array of strings)\\n\"\n+                \"  \\\"transactionid\\\"     || (string) The transaction id of an in-mempool descendant transaction\\n\"\n+                \"  ,...\\n\"\n+                \"]\\n\"\n+                \"\\nResult (for verbose=true):\\n\"\n+                \"{                       || (json object)\\n\"\n+                \"  \\\"transactionid\\\" : { || (json object)\\n\"\n+                + EntryDescriptionString()\n+                + \"  }, ...\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             );\n@@ -576,13 +589,15 @@ UniValue getmempoolentry(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"getmempoolentry txid\\n\"\n             \"\\nReturns mempool data for given transaction\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                           (json object)\\n\"\n-            + EntryDescriptionString()\n-            + \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"txid\\\" || (string, required) The transaction id (must be in mempool)\\n\"\n+                \"\\nResult:\\n\"\n+                \"{           || (json object)\\n\"\n+                + EntryDescriptionString()\n+                + \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n         );\n@@ -609,11 +624,13 @@ UniValue getblockhash(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"getblockhash height\\n\"\n             \"\\nReturns hash of block in best-block-chain at height provided.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. height         (numeric, required) The height index\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"hash\\\"         (string) The block hash\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. height || (numeric, required) The height index\\n\"\n+                \"\\nResult:\\n\"\n+                \"\\\"hash\\\"  || (string) The block hash\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n         );\n@@ -635,29 +652,31 @@ UniValue getblockheader(const JSONRPCRequest& request)\n             \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"hash\\\"                         || (string, required) The block hash\\n\"\n+                \"2. verbose                          || (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+                \"\\nResult (for verbose = true):\\n\"\n+                \"{\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",              || (string) the block hash (same as provided)\\n\"\n+                \"  \\\"confirmations\\\" : n,            || (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+                \"  \\\"height\\\" : n,                   || (numeric) The block height or index\\n\"\n+                \"  \\\"version\\\" : n,                  || (numeric) The block version\\n\"\n+                \"  \\\"versionHex\\\" : \\\"00000000\\\",    || (string) The block version formatted in hexadecimal\\n\"\n+                \"  \\\"merkleroot\\\" : \\\"xxxx\\\",        || (string) The merkle root\\n\"\n+                \"  \\\"time\\\" : ttt,                   || (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"mediantime\\\" : ttt,             || (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"nonce\\\" : n,                    || (numeric) The nonce\\n\"\n+                \"  \\\"bits\\\" : \\\"1d00ffff\\\",          || (string) The bits\\n\"\n+                \"  \\\"difficulty\\\" : x.xxx,           || (numeric) The difficulty\\n\"\n+                \"  \\\"chainwork\\\" : \\\"0000...1f3\\\",   || (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+                \"  \\\"previousblockhash\\\" : \\\"hash\\\", || (string) The hash of the previous block\\n\"\n+                \"  \\\"nextblockhash\\\" : \\\"hash\\\",     || (string) The hash of the next block\\n\"\n+                \"}\\n\"\n+                \"\\nResult (for verbose=false):\\n\"\n+                \"\\\"data\\\"                            || (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n@@ -694,36 +713,38 @@ UniValue getblock(const JSONRPCRequest& request)\n             \"getblock \\\"blockhash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about block <hash>.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose                (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n-            \"\\nResult (for verbose = true):\\n\"\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n-            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n-            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"blockhash\\\"                    || (string, required) The block hash\\n\"\n+                \"2. verbose                          || (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+                \"\\nResult (for verbose = true):\\n\"\n+                \"{\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",              || (string) the block hash (same as provided)\\n\"\n+                \"  \\\"confirmations\\\" : n,            || (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+                \"  \\\"size\\\" : n,                     || (numeric) The block size\\n\"\n+                \"  \\\"strippedsize\\\" : n,             || (numeric) The block size excluding witness data\\n\"\n+                \"  \\\"weight\\\" : n,                   || (numeric) The block weight as defined in BIP 141\\n\"\n+                \"  \\\"height\\\" : n,                   || (numeric) The block height or index\\n\"\n+                \"  \\\"version\\\" : n,                  || (numeric) The block version\\n\"\n+                \"  \\\"versionHex\\\" : \\\"00000000\\\",    || (string) The block version formatted in hexadecimal\\n\"\n+                \"  \\\"merkleroot\\\" : \\\"xxxx\\\",        || (string) The merkle root\\n\"\n+                \"  \\\"tx\\\" : [                        || (array of string) The transaction ids\\n\"\n+                \"     \\\"transactionid\\\"              || (string) The transaction id\\n\"\n+                \"     ,...\\n\"\n+                \"  ],\\n\"\n+                \"  \\\"time\\\" : ttt,                   || (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"mediantime\\\" : ttt,             || (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"nonce\\\" : n,                    || (numeric) The nonce\\n\"\n+                \"  \\\"bits\\\" : \\\"1d00ffff\\\",          || (string) The bits\\n\"\n+                \"  \\\"difficulty\\\" : x.xxx,           || (numeric) The difficulty\\n\"\n+                \"  \\\"chainwork\\\" : \\\"xxxx\\\",         || (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+                \"  \\\"previousblockhash\\\" : \\\"hash\\\", || (string) The hash of the previous block\\n\"\n+                \"  \\\"nextblockhash\\\" : \\\"hash\\\"      || (string) The hash of the next block\\n\"\n+                \"}\\n\"\n+                \"\\nResult (for verbose=false):\\n\"\n+                \"\\\"data\\\"                            || (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n@@ -819,11 +840,13 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n    (numeric) Height of the last block pruned.\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"height\\\" || (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+                \"\\nResult:\\n\"\n+                \"n             || (numeric) Height of the last block pruned.\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n@@ -868,17 +891,19 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"gettxoutsetinfo\\n\"\n             \"\\nReturns statistics about the unspent transaction output set.\\n\"\n             \"Note this call may take some time.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n-            \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n-            \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n-            \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n-            \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"\n-            \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nResult:\\n\"\n+                \"{\\n\"\n+                \"  \\\"height\\\" : n,                 || (numeric) The current block height (index)\\n\"\n+                \"  \\\"bestblock\\\" : \\\"hex\\\",        || (string) the best block hash hex\\n\"\n+                \"  \\\"transactions\\\" : n,           || (numeric) The number of transactions\\n\"\n+                \"  \\\"txouts\\\" : n,                 || (numeric) The number of output transactions\\n\"\n+                \"  \\\"bytes_serialized\\\" : n,       || (numeric) The serialized size\\n\"\n+                \"  \\\"hash_serialized\\\" : \\\"hash\\\", || (string) The serialized hash\\n\"\n+                \"  \\\"total_amount\\\" : x.xxx        || (numeric) The total amount\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n         );\n@@ -907,30 +932,31 @@ UniValue gettxout(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n-            \"2. n              (numeric, required) vout number\\n\"\n-            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n-            \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n-            \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n-            \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n-            \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n-            \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n-            \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n-            \"        \\\"address\\\"     (string) bitcoin address\\n\"\n-            \"        ,...\\n\"\n-            \"     ]\\n\"\n-            \"  },\\n\"\n-            \"  \\\"version\\\" : n,            (numeric) The version\\n\"\n-            \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"txid\\\"                     || (string, required) The transaction id\\n\"\n+                \"2. n                            || (numeric, required) vout number\\n\"\n+                \"3. include_mempool              || (boolean, optional) Whether to include the mempool\\n\"\n+                \"\\nResult:\\n\"\n+                \"{\\n\"\n+                \"  \\\"bestblock\\\" : \\\"hash\\\",     || (string) the block hash\\n\"\n+                \"  \\\"confirmations\\\" : n,        || (numeric) The number of confirmations\\n\"\n+                \"  \\\"value\\\" : x.xxx,            || (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n+                \"  \\\"scriptPubKey\\\" : {          || (json object)\\n\"\n+                \"     \\\"asm\\\" : \\\"code\\\",        || (string) \\n\"\n+                \"     \\\"hex\\\" : \\\"hex\\\",         || (string) \\n\"\n+                \"     \\\"reqSigs\\\" : n,           || (numeric) Number of required signatures\\n\"\n+                \"     \\\"type\\\" : \\\"pubkeyhash\\\", || (string) The type, eg pubkeyhash\\n\"\n+                \"     \\\"addresses\\\" : [          || (array of string) array of bitcoin addresses\\n\"\n+                \"        \\\"address\\\"             || (string) bitcoin address\\n\"\n+                \"        ,...\\n\"\n+                \"     ]\\n\"\n+                \"  },\\n\"\n+                \"  \\\"version\\\" : n,              || (numeric) The version\\n\"\n+                \"  \\\"coinbase\\\" : true|false     || (boolean) Coinbase or not\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             \"\\nGet unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nView the details\\n\"\n@@ -989,12 +1015,14 @@ UniValue verifychain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"verifychain ( checklevel nblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n-            \"2. nblocks      (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true|false       (boolean) Verified or not\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"\\nArguments:\\n\"\n+                \"1. checklevel || (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n+                \"2. nblocks    || (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n+                \"\\nResult:\\n\"\n+                \"true|false    || (boolean) Verified or not\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n         );\n@@ -1076,37 +1104,39 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"getblockchaininfo\\n\"\n             \"Returns an object containing various state info regarding blockchain processing.\\n\"\n             \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",        (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,         (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"headers\\\": xxxxxx,        (numeric) the current number of headers we have validated\\n\"\n-            \"  \\\"bestblockhash\\\": \\\"...\\\", (string) the hash of the currently best block\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n-            \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n-            \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n-            \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n-            \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\"\n-            \"     \\\"xxxx\\\" : {                (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n-            \"     }\\n\"\n-            \"  }\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"{\\n\"\n+                \"  \\\"chain\\\" : \\\"xxxx\\\",            || (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+                \"  \\\"blocks\\\" : xxxxxx,             || (numeric) the current number of blocks processed in the server\\n\"\n+                \"  \\\"headers\\\" : xxxxxx,            || (numeric) the current number of headers we have validated\\n\"\n+                \"  \\\"bestblockhash\\\" : \\\"...\\\",     || (string) the hash of the currently best block\\n\"\n+                \"  \\\"difficulty\\\" : xxxxxx,         || (numeric) the current difficulty\\n\"\n+                \"  \\\"mediantime\\\" : xxxxxx,         || (numeric) median time for the current best block\\n\"\n+                \"  \\\"verificationprogress\\\" : xxxx, || (numeric) estimate of verification progress [0..1]\\n\"\n+                \"  \\\"chainwork\\\" : \\\"xxxx\\\",        || (string) total amount of work in active chain, in hexadecimal\\n\"\n+                \"  \\\"pruned\\\" : xx,                 || (boolean) if the blocks are subject to pruning\\n\"\n+                \"  \\\"pruneheight\\\" : xxxxxx,        || (numeric) lowest-height complete block stored\\n\"\n+                \"  \\\"softforks\\\" : [                || (array) status of softforks in progress\\n\"\n+                \"     {\\n\"\n+                \"        \\\"id\\\" : \\\"xxxx\\\",         || (string) name of softfork\\n\"\n+                \"        \\\"version\\\" : xx,          || (numeric) block version\\n\"\n+                \"        \\\"reject\\\" : {             || (object) progress toward rejecting pre-softfork blocks\\n\"\n+                \"           \\\"status\\\" : xx,        || (boolean) true if threshold reached\\n\"\n+                \"        },\\n\"\n+                \"     }, ...\\n\"\n+                \"  ],\\n\"\n+                \"  \\\"bip9_softforks\\\" : {           || (object) status of BIP9 softforks in progress\\n\"\n+                \"     \\\"xxxx\\\" : {                  || (string) name of the softfork\\n\"\n+                \"        \\\"status\\\" : \\\"xxxx\\\",     || (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+                \"        \\\"bit\\\" : xx,              || (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+                \"        \\\"startTime\\\" : xx,        || (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+                \"        \\\"timeout\\\" : xx,          || (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+                \"        \\\"since\\\" : xx             || (numeric) height of the first block to which the status applies\\n\"\n+                \"     }\\n\"\n+                \"  }\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n         );\n@@ -1170,27 +1200,29 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             \"Return information about all known tips in the block tree,\"\n             \" including the main chain as well as orphaned branches.\\n\"\n             \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n-            \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n-            \"    \\\"status\\\": \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n-            \"  },\\n\"\n-            \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n-            \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n-            \"    \\\"status\\\": \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n-            \"Possible values for status:\\n\"\n-            \"1.  \\\"invalid\\\"               This branch contains at least one invalid block\\n\"\n-            \"2.  \\\"headers-only\\\"          Not all blocks for this branch are available, but the headers are valid\\n\"\n-            \"3.  \\\"valid-headers\\\"         All blocks are available for this branch, but they were never fully validated\\n\"\n-            \"4.  \\\"valid-fork\\\"            This branch is not part of the active chain, but is fully validated\\n\"\n-            \"5.  \\\"active\\\"                This is the tip of the active main chain, which is certainly valid\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"[\\n\"\n+                \"  {\\n\"\n+                \"    \\\"height\\\" : xxxx,      || (numeric) height of the chain tip\\n\"\n+                \"    \\\"hash\\\" : \\\"xxxx\\\",    || (string) block hash of the tip\\n\"\n+                \"    \\\"branchlen\\\" : 0,      || (numeric) zero for main chain\\n\"\n+                \"    \\\"status\\\" : \\\"active\\\" || (string) \\\"active\\\" for the main chain\\n\"\n+                \"  },\\n\"\n+                \"  {\\n\"\n+                \"    \\\"height\\\" : xxxx,\\n\"\n+                \"    \\\"hash\\\" : \\\"xxxx\\\",\\n\"\n+                \"    \\\"branchlen\\\" : 1,      || (numeric) length of branch connecting the tip to the main chain\\n\"\n+                \"    \\\"status\\\" : \\\"xxxx\\\"   || (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n+                \"  }\\n\"\n+                \"]\\n\"\n+                \"Possible values for status:\\n\"\n+                \"1.  \\\"invalid\\\"             || This branch contains at least one invalid block\\n\"\n+                \"2.  \\\"headers-only\\\"        || Not all blocks for this branch are available, but the headers are valid\\n\"\n+                \"3.  \\\"valid-headers\\\"       || All blocks are available for this branch, but they were never fully validated\\n\"\n+                \"4.  \\\"valid-fork\\\"          || This branch is not part of the active chain, but is fully validated\\n\"\n+                \"5.  \\\"active\\\"              || This is the tip of the active main chain, which is certainly valid\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n         );\n@@ -1285,14 +1317,16 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"getmempoolinfo\\n\"\n             \"\\nReturns details on the active state of the TX memory pool.\\n\"\n             \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n-            \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n-            \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n-            \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee for tx to be accepted\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n+            + Tabulated(\n+                \"{\\n\"\n+                \"  \\\"size\\\" : xxxxx,         || (numeric) Current tx count\\n\"\n+                \"  \\\"bytes\\\" : xxxxx,        || (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n+                \"  \\\"usage\\\" : xxxxx,        || (numeric) Total memory usage for the mempool\\n\"\n+                \"  \\\"maxmempool\\\" : xxxxx,   || (numeric) Maximum memory usage for the mempool\\n\"\n+                \"  \\\"mempoolminfee\\\" : xxxxx || (numeric) Minimum fee for tx to be accepted\\n\"\n+                \"}\\n\"\n+            )\n+            + \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n@@ -1309,8 +1343,8 @@ UniValue preciousblock(const JSONRPCRequest& request)\n             \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n             \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as precious\\n\"\n-            \"\\nResult:\\n\"\n+            + Tabulated(\"1. \\\"blockhash\\\" || (string, required) the hash of the block to mark as precious\\n\")\n+            + \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n@@ -1345,8 +1379,8 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n             \"invalidateblock \\\"blockhash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as invalid\\n\"\n-            \"\\nResult:\\n\"\n+            + Tabulated(\"1. \\\"blockhash\\\" || (string, required) the hash of the block to mark as invalid\\n\")\n+            + \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n@@ -1384,8 +1418,8 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n             \"This can be used to undo the effects of invalidateblock.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to reconsider\\n\"\n-            \"\\nResult:\\n\"\n+            + Tabulated(\"1. \\\"blockhash\\\" || (string, required) the hash of the block to reconsider\\n\")\n+            + \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")"
      }
    ]
  }
]