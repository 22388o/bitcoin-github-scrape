[
  {
    "sha": "5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFlYjZjZjg3NzA1NWM0N2ZhMmJiZDJlYTVlOGQzZDIwMzM5MzNi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-30T20:11:28Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-04T15:03:28Z"
      },
      "message": "MOVEONLY: Move IsBDBFile, IsSQLiteFile, and ListWalletDir\n\nThis commit does not change to any code and behavior. It it is easily reviewed\nwith the --color-moved=dimmed_zebra git diff option.\n\nMotivation for this change is to:\n\n- Consolidate redundant functions\n  IsBDBFile /ExistsBerkeleyDatabase / SplitWalletPath, and\n  IsSQLiteFile / ExistsSQLiteDatabase in the next commits\n\n- Detect SQLite wallets consistently regardless whether bitcoin is built with\n  SQLite support in the next commits\n\n- Avoid attempting to open SQLite databases with the BDB library when bitcoin\n  is built without SQLite support in the next commits",
      "tree": {
        "sha": "577ee2c0bd473e27216f1ec8dc9b8eb35454e44c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/577ee2c0bd473e27216f1ec8dc9b8eb35454e44c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "751ffaabad82f7904fd1d9742a0b323a0ab7bfee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/751ffaabad82f7904fd1d9742a0b323a0ab7bfee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/751ffaabad82f7904fd1d9742a0b323a0ab7bfee"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 121,
      "deletions": 118
    },
    "files": [
      {
        "sha": "c289f94c7868edbf74db4ac2725322a003cff9e6",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -839,28 +839,3 @@ std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, con\n     status = DatabaseStatus::SUCCESS;\n     return db;\n }\n-\n-bool IsBDBFile(const fs::path& path)\n-{\n-    if (!fs::exists(path)) return false;\n-\n-    // A Berkeley DB Btree file has at least 4K.\n-    // This check also prevents opening lock files.\n-    boost::system::error_code ec;\n-    auto size = fs::file_size(path, ec);\n-    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n-    if (size < 4096) return false;\n-\n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n-}"
      },
      {
        "sha": "935d0f947dbb31b961e553e531895d82bbfd78da",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -86,9 +86,6 @@ class BerkeleyEnvironment\n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n-/** Check format of database file */\n-bool IsBDBFile(const fs::path& path);\n-\n class BerkeleyBatch;\n \n /** An instance of this class represents one database."
      },
      {
        "sha": "85aeaeb3ab490c4951463c49a36c1ab04a07868a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -3,11 +3,70 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n #include <fs.h>\n+#include <logging.h>\n #include <wallet/db.h>\n \n #include <string>\n \n+fs::path GetWalletDir();\n+\n+#ifdef USE_BDB\n+bool ExistsBerkeleyDatabase(const fs::path& path);\n+#else\n+#   define ExistsBerkeleyDatabase(path)  (false)\n+#endif\n+#ifdef USE_SQLITE\n+bool ExistsSQLiteDatabase(const fs::path& path);\n+#else\n+#   define ExistsSQLiteDatabase(path)  (false)\n+#endif\n+\n+std::vector<fs::path> ListWalletDir()\n+{\n+    const fs::path wallet_dir = GetWalletDir();\n+    const size_t offset = wallet_dir.string().size() + 1;\n+    std::vector<fs::path> paths;\n+    boost::system::error_code ec;\n+\n+    for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(ec)) {\n+        if (ec) {\n+            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());\n+            continue;\n+        }\n+\n+        try {\n+            // Get wallet path relative to walletdir by removing walletdir from the wallet path.\n+            // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n+            const fs::path path = it->path().string().substr(offset);\n+\n+            if (it->status().type() == fs::directory_file &&\n+                (ExistsBerkeleyDatabase(it->path()) || ExistsSQLiteDatabase(it->path()))) {\n+                // Found a directory which contains wallet.dat btree file, add it as a wallet.\n+                paths.emplace_back(path);\n+            } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && ExistsBerkeleyDatabase(it->path())) {\n+                if (it->path().filename() == \"wallet.dat\") {\n+                    // Found top-level wallet.dat btree file, add top level directory \"\"\n+                    // as a wallet.\n+                    paths.emplace_back();\n+                } else {\n+                    // Found top-level btree file not called wallet.dat. Current bitcoin\n+                    // software will never create these files but will allow them to be\n+                    // opened in a shared database environment for backwards compatibility.\n+                    // Add it to the list of available wallets.\n+                    paths.emplace_back(path);\n+                }\n+            }\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s: Error scanning %s: %s\\n\", __func__, it->path().string(), e.what());\n+            it.no_push();\n+        }\n+    }\n+\n+    return paths;\n+}\n+\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)\n {\n     if (fs::is_regular_file(wallet_path)) {\n@@ -23,3 +82,62 @@ void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::\n         database_filename = \"wallet.dat\";\n     }\n }\n+\n+bool IsBDBFile(const fs::path& path)\n+{\n+    if (!fs::exists(path)) return false;\n+\n+    // A Berkeley DB Btree file has at least 4K.\n+    // This check also prevents opening lock files.\n+    boost::system::error_code ec;\n+    auto size = fs::file_size(path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n+    if (size < 4096) return false;\n+\n+    fsbridge::ifstream file(path, std::ios::binary);\n+    if (!file.is_open()) return false;\n+\n+    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n+    uint32_t data = 0;\n+    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n+\n+    // Berkeley DB Btree magic bytes, from:\n+    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n+    //  - big endian systems - 00 05 31 62\n+    //  - little endian systems - 62 31 05 00\n+    return data == 0x00053162 || data == 0x62310500;\n+}\n+\n+bool IsSQLiteFile(const fs::path& path)\n+{\n+    if (!fs::exists(path)) return false;\n+\n+    // A SQLite Database file is at least 512 bytes.\n+    boost::system::error_code ec;\n+    auto size = fs::file_size(path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n+    if (size < 512) return false;\n+\n+    fsbridge::ifstream file(path, std::ios::binary);\n+    if (!file.is_open()) return false;\n+\n+    // Magic is at beginning and is 16 bytes long\n+    char magic[16];\n+    file.read(magic, 16);\n+\n+    // Application id is at offset 68 and 4 bytes long\n+    file.seekg(68, std::ios::beg);\n+    char app_id[4];\n+    file.read(app_id, 4);\n+\n+    file.close();\n+\n+    // Check the magic, see https://sqlite.org/fileformat2.html\n+    std::string magic_str(magic, 16);\n+    if (magic_str != std::string(\"SQLite format 3\", 16)) {\n+        return false;\n+    }\n+\n+    // Check the application id matches our network magic\n+    return memcmp(Params().MessageStart(), app_id, 4) == 0;\n+}"
      },
      {
        "sha": "cc13f887b063fdc7aa45b0fc725ae1b162076550",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -225,4 +225,7 @@ enum class DatabaseStatus {\n \n std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n+bool IsBDBFile(const fs::path& path);\n+bool IsSQLiteFile(const fs::path& path);\n+\n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "69d96dd27c65c1a93d535ea355f56878777a783f",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -596,37 +596,3 @@ std::string SQLiteDatabaseVersion()\n {\n     return std::string(sqlite3_libversion());\n }\n-\n-bool IsSQLiteFile(const fs::path& path)\n-{\n-    if (!fs::exists(path)) return false;\n-\n-    // A SQLite Database file is at least 512 bytes.\n-    boost::system::error_code ec;\n-    auto size = fs::file_size(path, ec);\n-    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n-    if (size < 512) return false;\n-\n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    // Magic is at beginning and is 16 bytes long\n-    char magic[16];\n-    file.read(magic, 16);\n-\n-    // Application id is at offset 68 and 4 bytes long\n-    file.seekg(68, std::ios::beg);\n-    char app_id[4];\n-    file.read(app_id, 4);\n-\n-    file.close();\n-\n-    // Check the magic, see https://sqlite.org/fileformat2.html\n-    std::string magic_str(magic, 16);\n-    if (magic_str != std::string(\"SQLite format 3\", 16)) {\n-        return false;\n-    }\n-\n-    // Check the application id matches our network magic\n-    return memcmp(Params().MessageStart(), app_id, 4) == 0;\n-}"
      },
      {
        "sha": "3cb11614db9a283187103e1e51d606fe319495fe",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -117,6 +117,5 @@ bool ExistsSQLiteDatabase(const fs::path& path);\n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n std::string SQLiteDatabaseVersion();\n-bool IsSQLiteFile(const fs::path& path);\n \n #endif // BITCOIN_WALLET_SQLITE_H"
      },
      {
        "sha": "16ddad3a84fe64366afd387d1b3c31715a98c535",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 55,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "patch": "@@ -7,17 +7,6 @@\n #include <logging.h>\n #include <util/system.h>\n \n-#ifdef USE_BDB\n-bool ExistsBerkeleyDatabase(const fs::path& path);\n-#else\n-#   define ExistsBerkeleyDatabase(path)  (false)\n-#endif\n-#ifdef USE_SQLITE\n-bool ExistsSQLiteDatabase(const fs::path& path);\n-#else\n-#   define ExistsSQLiteDatabase(path)  (false)\n-#endif\n-\n fs::path GetWalletDir()\n {\n     fs::path path;\n@@ -40,50 +29,6 @@ fs::path GetWalletDir()\n     return path;\n }\n \n-std::vector<fs::path> ListWalletDir()\n-{\n-    const fs::path wallet_dir = GetWalletDir();\n-    const size_t offset = wallet_dir.string().size() + 1;\n-    std::vector<fs::path> paths;\n-    boost::system::error_code ec;\n-\n-    for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(ec)) {\n-        if (ec) {\n-            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());\n-            continue;\n-        }\n-\n-        try {\n-            // Get wallet path relative to walletdir by removing walletdir from the wallet path.\n-            // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n-            const fs::path path = it->path().string().substr(offset);\n-\n-            if (it->status().type() == fs::directory_file &&\n-                (ExistsBerkeleyDatabase(it->path()) || ExistsSQLiteDatabase(it->path()))) {\n-                // Found a directory which contains wallet.dat btree file, add it as a wallet.\n-                paths.emplace_back(path);\n-            } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && ExistsBerkeleyDatabase(it->path())) {\n-                if (it->path().filename() == \"wallet.dat\") {\n-                    // Found top-level wallet.dat btree file, add top level directory \"\"\n-                    // as a wallet.\n-                    paths.emplace_back();\n-                } else {\n-                    // Found top-level btree file not called wallet.dat. Current bitcoin\n-                    // software will never create these files but will allow them to be\n-                    // opened in a shared database environment for backwards compatibility.\n-                    // Add it to the list of available wallets.\n-                    paths.emplace_back(path);\n-                }\n-            }\n-        } catch (const std::exception& e) {\n-            LogPrintf(\"%s: Error scanning %s: %s\\n\", __func__, it->path().string(), e.what());\n-            it.no_push();\n-        }\n-    }\n-\n-    return paths;\n-}\n-\n bool IsFeatureSupported(int wallet_version, int feature_version)\n {\n     return wallet_version >= feature_version;"
      }
    ]
  },
  {
    "sha": "6ee9cbdd18a70894f89dd268c276d5eb47a34827",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWU5Y2JkZDE4YTcwODk0Zjg5ZGQyNjhjMjc2ZDVlYjQ3YTM0ODI3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-30T20:25:56Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-04T15:03:28Z"
      },
      "message": "refactor: Replace ListWalletDir() function with ListDatabases()\n\nNo change to behavior. This is just cleanup after previous MOVEONLY commit to\nmake db.h list function fit conventions of surrounding functions.",
      "tree": {
        "sha": "da33c80e155d8c73e3680f24807bc54f33c175c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da33c80e155d8c73e3680f24807bc54f33c175c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ee9cbdd18a70894f89dd268c276d5eb47a34827",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee9cbdd18a70894f89dd268c276d5eb47a34827",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee9cbdd18a70894f89dd268c276d5eb47a34827",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee9cbdd18a70894f89dd268c276d5eb47a34827/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aaeb6cf877055c47fa2bbd2ea5e8d3d2033933b"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e8b8b8abc12ada1e5ce01109ce500c9999da9883",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "patch": "@@ -10,8 +10,6 @@\n \n #include <string>\n \n-fs::path GetWalletDir();\n-\n #ifdef USE_BDB\n bool ExistsBerkeleyDatabase(const fs::path& path);\n #else\n@@ -23,9 +21,8 @@ bool ExistsSQLiteDatabase(const fs::path& path);\n #   define ExistsSQLiteDatabase(path)  (false)\n #endif\n \n-std::vector<fs::path> ListWalletDir()\n+std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n-    const fs::path wallet_dir = GetWalletDir();\n     const size_t offset = wallet_dir.string().size() + 1;\n     std::vector<fs::path> paths;\n     boost::system::error_code ec;"
      },
      {
        "sha": "3d18e5cec0e43737b74fd96795efc328f8a278c9",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "patch": "@@ -223,6 +223,9 @@ enum class DatabaseStatus {\n     FAILED_ENCRYPT,\n };\n \n+/** Recursively list database paths in directory. */\n+std::vector<fs::path> ListDatabases(const fs::path& path);\n+\n std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n bool IsBDBFile(const fs::path& path);"
      },
      {
        "sha": "46ef6eee3ec56566391947f48c0acdf7dd6a9071",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "patch": "@@ -551,7 +551,7 @@ class WalletClientImpl : public WalletClient\n     std::vector<std::string> listWalletDir() override\n     {\n         std::vector<std::string> paths;\n-        for (auto& path : ListWalletDir()) {\n+        for (auto& path : ListDatabases(GetWalletDir())) {\n             paths.push_back(path.string());\n         }\n         return paths;"
      },
      {
        "sha": "3802bb452a299a9c946ee83bc092f4cc6d438122",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "patch": "@@ -2537,7 +2537,7 @@ static RPCHelpMan listwalletdir()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     UniValue wallets(UniValue::VARR);\n-    for (const auto& path : ListWalletDir()) {\n+    for (const auto& path : ListDatabases(GetWalletDir())) {\n         UniValue wallet(UniValue::VOBJ);\n         wallet.pushKV(\"name\", path.string());\n         wallets.push_back(wallet);"
      },
      {
        "sha": "d4143ceff47a6c41c3905c77b6b3ad8d527e57ae",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee9cbdd18a70894f89dd268c276d5eb47a34827/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "patch": "@@ -65,9 +65,6 @@ enum WalletFlags : uint64_t {\n //! Get the path of the wallet directory.\n fs::path GetWalletDir();\n \n-//! Get wallets in wallet directory.\n-std::vector<fs::path> ListWalletDir();\n-\n /** Descriptor with some wallet metadata */\n class WalletDescriptor\n {"
      }
    ]
  },
  {
    "sha": "6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTdhNjM2NDRjZDJmYzU2NTM4ZDMyM2NjMGQ1YzFkNzk0NTI0N2Zk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-30T20:28:44Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-04T15:03:28Z"
      },
      "message": "refactor: Drop call to GetWalletEnv in wallet salvage code\n\nNo observable change in behavior. This just avoids a redundant environment\nlookup. Motivation is to be able to simplify the GetWalletEnv implementation in\nan upcoming commit.",
      "tree": {
        "sha": "77d735a95a4054bea3f12c05518c448e1a609edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d735a95a4054bea3f12c05518c448e1a609edc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a7a63644cd2fc56538d323cc0d5c1d7945247fd/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee9cbdd18a70894f89dd268c276d5eb47a34827",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee9cbdd18a70894f89dd268c276d5eb47a34827"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "09a9ec68cd0aec6d97d3b6458f7a1617d77bafb0",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a7a63644cd2fc56538d323cc0d5c1d7945247fd/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a7a63644cd2fc56538d323cc0d5c1d7945247fd/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
        "patch": "@@ -32,8 +32,9 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     std::unique_ptr<WalletDatabase> database = MakeDatabase(file_path, options, status, error);\n     if (!database) return false;\n \n-    std::string filename;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+    BerkeleyDatabase& berkeley_database = static_cast<BerkeleyDatabase&>(*database);\n+    std::string filename = berkeley_database.Filename();\n+    std::shared_ptr<BerkeleyEnvironment> env = berkeley_database.env;\n \n     if (!env->Open(error)) {\n         return false;"
      }
    ]
  },
  {
    "sha": "d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzBkYzg5ZTc4ZWU2MzU1ZTBiYzM3Y2MzNmNmYzA0ZWY3YTg2ODg1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-30T20:41:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-04T15:03:28Z"
      },
      "message": "refactor: Consolidate redundant wallet database path and exists functions\n\nNo change in behavior. Just remove a little bit of code, reduce macro usage,\nremove duplicative functions, and make BDB and SQLite implementations more\nconsistent with each other.",
      "tree": {
        "sha": "fa60ad271a09f30c970d56472d25307ebc948716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa60ad271a09f30c970d56472d25307ebc948716"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a7a63644cd2fc56538d323cc0d5c1d7945247fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a7a63644cd2fc56538d323cc0d5c1d7945247fd"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 38,
      "deletions": 54
    },
    "files": [
      {
        "sha": "6ed48593fb66606b59f22f86a6bbf6c6aa19fea4",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -53,16 +53,13 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n }\n \n /**\n- * @param[in] wallet_path Path to wallet directory. Or (for backwards compatibility only) a path to a berkeley btree data file inside a wallet directory.\n- * @param[out] database_filename Filename of berkeley btree data file inside the wallet directory.\n+ * @param[in] env_directory Path to environment directory\n  * @return A shared pointer to the BerkeleyEnvironment object for the wallet directory, never empty because ~BerkeleyEnvironment\n  * erases the weak pointer from the g_dbenvs map.\n  * @post A new BerkeleyEnvironment weak pointer is inserted into g_dbenvs if the directory path key was not already in the map.\n  */\n-std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+std::shared_ptr<BerkeleyEnvironment> GetBerkeleyEnv(const fs::path& env_directory)\n {\n-    fs::path env_directory;\n-    SplitWalletPath(wallet_path, env_directory, database_filename);\n     LOCK(cs_db);\n     auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<BerkeleyEnvironment>());\n     if (inserted.second) {\n@@ -808,21 +805,14 @@ std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(bool flush_on_close)\n     return MakeUnique<BerkeleyBatch>(*this, false, flush_on_close);\n }\n \n-bool ExistsBerkeleyDatabase(const fs::path& path)\n-{\n-    fs::path env_directory;\n-    std::string data_filename;\n-    SplitWalletPath(path, env_directory, data_filename);\n-    return IsBDBFile(env_directory / data_filename);\n-}\n-\n std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n+    fs::path data_file = BDBDataFile(path);\n     std::unique_ptr<BerkeleyDatabase> db;\n     {\n         LOCK(cs_db); // Lock env.m_databases until insert in BerkeleyDatabase constructor\n-        std::string data_filename;\n-        std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(path, data_filename);\n+        std::string data_filename = data_file.filename().string();\n+        std::shared_ptr<BerkeleyEnvironment> env = GetBerkeleyEnv(data_file.parent_path());\n         if (env->m_databases.count(data_filename)) {\n             error = Untranslated(strprintf(\"Refusing to load database. Data file '%s' is already loaded.\", (env->Directory() / data_filename).string()));\n             status = DatabaseStatus::FAILED_ALREADY_LOADED;"
      },
      {
        "sha": "bf1617d67f9fcfa662bea3583a7381da2325463e",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -83,8 +83,8 @@ class BerkeleyEnvironment\n     }\n };\n \n-/** Get BerkeleyEnvironment and database filename given a wallet path. */\n-std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n+/** Get BerkeleyEnvironment given a directory path. */\n+std::shared_ptr<BerkeleyEnvironment> GetBerkeleyEnv(const fs::path& env_directory);\n \n class BerkeleyBatch;\n \n@@ -223,9 +223,6 @@ class BerkeleyBatch : public DatabaseBatch\n \n std::string BerkeleyDatabaseVersion();\n \n-//! Check if Berkeley database exists at specified path.\n-bool ExistsBerkeleyDatabase(const fs::path& path);\n-\n //! Return object giving access to Berkeley database at specified path.\n std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n "
      },
      {
        "sha": "425b14b8f9f8d590a391ac48a5659777deeb9107",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -10,17 +10,6 @@\n \n #include <string>\n \n-#ifdef USE_BDB\n-bool ExistsBerkeleyDatabase(const fs::path& path);\n-#else\n-#   define ExistsBerkeleyDatabase(path)  (false)\n-#endif\n-#ifdef USE_SQLITE\n-bool ExistsSQLiteDatabase(const fs::path& path);\n-#else\n-#   define ExistsSQLiteDatabase(path)  (false)\n-#endif\n-\n std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n     const size_t offset = wallet_dir.string().size() + 1;\n@@ -39,10 +28,10 @@ std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n             const fs::path path = it->path().string().substr(offset);\n \n             if (it->status().type() == fs::directory_file &&\n-                (ExistsBerkeleyDatabase(it->path()) || ExistsSQLiteDatabase(it->path()))) {\n+                (IsBDBFile(BDBDataFile(it->path())) || IsSQLiteFile(SQLiteDataFile(it->path())))) {\n                 // Found a directory which contains wallet.dat btree file, add it as a wallet.\n                 paths.emplace_back(path);\n-            } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && ExistsBerkeleyDatabase(it->path())) {\n+            } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && IsBDBFile(it->path())) {\n                 if (it->path().filename() == \"wallet.dat\") {\n                     // Found top-level wallet.dat btree file, add top level directory \"\"\n                     // as a wallet.\n@@ -64,24 +53,31 @@ std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n     return paths;\n }\n \n-void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)\n+fs::path BDBDataFile(const fs::path& wallet_path)\n {\n     if (fs::is_regular_file(wallet_path)) {\n         // Special case for backwards compatibility: if wallet path points to an\n         // existing file, treat it as the path to a BDB data file in a parent\n         // directory that also contains BDB log files.\n-        env_directory = wallet_path.parent_path();\n-        database_filename = wallet_path.filename().string();\n+        return wallet_path;\n     } else {\n         // Normal case: Interpret wallet path as a directory path containing\n         // data and log files.\n-        env_directory = wallet_path;\n-        database_filename = \"wallet.dat\";\n+        return wallet_path / \"wallet.dat\";\n     }\n }\n \n+fs::path SQLiteDataFile(const fs::path& path)\n+{\n+    return path / \"wallet.dat\";\n+}\n+\n bool IsBDBFile(const fs::path& path)\n {\n+#ifndef USE_BDB\n+    return false;\n+#endif\n+\n     if (!fs::exists(path)) return false;\n \n     // A Berkeley DB Btree file has at least 4K.\n@@ -107,6 +103,10 @@ bool IsBDBFile(const fs::path& path)\n \n bool IsSQLiteFile(const fs::path& path)\n {\n+#ifndef USE_SQLITE\n+    return false;\n+#endif\n+\n     if (!fs::exists(path)) return false;\n \n     // A SQLite Database file is at least 512 bytes."
      },
      {
        "sha": "2c75486a44b9c67c045a5c5677cda59061b76c6c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -228,6 +228,8 @@ std::vector<fs::path> ListDatabases(const fs::path& path);\n \n std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n+fs::path BDBDataFile(const fs::path& path);\n+fs::path SQLiteDataFile(const fs::path& path);\n bool IsBDBFile(const fs::path& path);\n bool IsSQLiteFile(const fs::path& path);\n "
      },
      {
        "sha": "0fb3b1d3c4145124a66cb0710f93a6ec039c56ee",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -17,7 +17,6 @@\n #include <sqlite3.h>\n #include <stdint.h>\n \n-static const char* const DATABASE_FILENAME = \"wallet.dat\";\n static constexpr int32_t WALLET_SCHEMA_VERSION = 0;\n \n static Mutex g_sqlite_mutex;\n@@ -568,17 +567,11 @@ bool SQLiteBatch::TxnAbort()\n     return res == SQLITE_OK;\n }\n \n-bool ExistsSQLiteDatabase(const fs::path& path)\n-{\n-    const fs::path file = path / DATABASE_FILENAME;\n-    return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n-}\n-\n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    const fs::path file = path / DATABASE_FILENAME;\n     try {\n-        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        fs::path data_file = SQLiteDataFile(path);\n+        auto db = MakeUnique<SQLiteDatabase>(data_file.parent_path(), data_file);\n         if (options.verify && !db->Verify(error)) {\n             status = DatabaseStatus::FAILED_VERIFY;\n             return nullptr;"
      },
      {
        "sha": "442563184e309d9a1b9feef21ddac72c3f1809d9",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -113,7 +113,6 @@ class SQLiteDatabase : public WalletDatabase\n     sqlite3* m_db{nullptr};\n };\n \n-bool ExistsSQLiteDatabase(const fs::path& path);\n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n std::string SQLiteDatabaseVersion();"
      },
      {
        "sha": "1a28852a6bb1286c44a51f6113005f1c835e9dfd",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -13,6 +13,13 @@\n \n BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n \n+static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, std::string& database_filename)\n+{\n+    fs::path data_file = BDBDataFile(path);\n+    database_filename = data_file.filename().string();\n+    return GetBerkeleyEnv(data_file.parent_path());\n+}\n+\n BOOST_AUTO_TEST_CASE(getwalletenv_file)\n {\n     std::string test_name = \"test_name.dat\";"
      },
      {
        "sha": "5b72a01939629a9f6beaa6024e80eb466d357725",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "patch": "@@ -1013,21 +1013,17 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n \n     Optional<DatabaseFormat> format;\n     if (exists) {\n-#ifdef USE_BDB\n-        if (ExistsBerkeleyDatabase(path)) {\n+        if (IsBDBFile(BDBDataFile(path))) {\n             format = DatabaseFormat::BERKELEY;\n         }\n-#endif\n-#ifdef USE_SQLITE\n-        if (ExistsSQLiteDatabase(path)) {\n+        if (IsSQLiteFile(SQLiteDataFile(path))) {\n             if (format) {\n                 error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));\n                 status = DatabaseStatus::FAILED_BAD_FORMAT;\n                 return nullptr;\n             }\n             format = DatabaseFormat::SQLITE;\n         }\n-#endif\n     } else if (options.require_existing) {\n         error = Untranslated(strprintf(\"Failed to load database path '%s'. Path does not exist.\", path.string()));\n         status = DatabaseStatus::FAILED_NOT_FOUND;"
      }
    ]
  },
  {
    "sha": "f3d870fc2271bf45e0269e5ae135bced1a26f620",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Q4NzBmYzIyNzFiZjQ1ZTAyNjllNWFlMTM1YmNlZDFhMjZmNjIw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-10-30T20:48:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-04T15:03:28Z"
      },
      "message": "wallet: List all wallets in non-SQLite or non-BDB builds\n\nThis commit does not change behavior when bitcoin is built normally with both\nthe SQLite and BDB libraries. It just makes non-SQLite and non-BDB builds\nmore similar to the normal build. Specifically:\n\n- It makes wallet directory lists always include all wallets so wallets don't\n  appear missing depending on the build.\n\n- It now triggers specific \"Build does not support SQLite database format\" and\n  \"Build does not support Berkeley DB database format\" errors if a wallet can't\n  be loaded instead of the more ambiguous and scary \"Data is not in recognized\n  format\" error.",
      "tree": {
        "sha": "ae81d9543787927ca5c135f754b4b5327ba1ecf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae81d9543787927ca5c135f754b4b5327ba1ecf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d870fc2271bf45e0269e5ae135bced1a26f620",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d870fc2271bf45e0269e5ae135bced1a26f620",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d870fc2271bf45e0269e5ae135bced1a26f620",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d870fc2271bf45e0269e5ae135bced1a26f620/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d70dc89e78ee6355e0bc37cc36cfc04ef7a86885"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "cd49baeb786664b1c1bf6743e004d5c143759d8b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3d870fc2271bf45e0269e5ae135bced1a26f620/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3d870fc2271bf45e0269e5ae135bced1a26f620/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f3d870fc2271bf45e0269e5ae135bced1a26f620",
        "patch": "@@ -74,10 +74,6 @@ fs::path SQLiteDataFile(const fs::path& path)\n \n bool IsBDBFile(const fs::path& path)\n {\n-#ifndef USE_BDB\n-    return false;\n-#endif\n-\n     if (!fs::exists(path)) return false;\n \n     // A Berkeley DB Btree file has at least 4K.\n@@ -103,10 +99,6 @@ bool IsBDBFile(const fs::path& path)\n \n bool IsSQLiteFile(const fs::path& path)\n {\n-#ifndef USE_SQLITE\n-    return false;\n-#endif\n-\n     if (!fs::exists(path)) return false;\n \n     // A SQLite Database file is at least 512 bytes."
      }
    ]
  }
]