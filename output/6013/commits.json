[
  {
    "sha": "70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDE4MGIyZTU3NmViY2I2NzVjOTA1ZWY0YmQ5ZDViNGZkMzc4YjZj",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-06T17:38:19Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-14T05:01:03Z"
      },
      "message": "Implement REST mempool API, add test and documentation.",
      "tree": {
        "sha": "d4c055ad001d5d127f7b7bd6b19a5c920682e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4c055ad001d5d127f7b7bd6b19a5c920682e5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "bf669235e38a2c97a8cce1de70f32c7baf89ba91",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -77,6 +77,20 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n+####Memory pool\n+`GET /rest/mempool/info.json`\n+\n+Returns various information about the TX mempool.\n+Only supports JSON as output format.\n+* size : (numeric) the number of transactions in the TX mempool\n+* bytes : (numeric) size of the TX mempool in bytes\n+* usage : (numeric) total TX mempool memory usage\n+\n+`GET /rest/mempool/contents.json`\n+\n+Returns transactions in the TX mempool.\n+Only supports JSON as output format.\n+\n Risks\n -------------\n Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "2da521950779779ddd83304d12f9c998c7e5806b",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -292,6 +292,19 @@ def run_test(self):\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         self.sync_all()\n \n+        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['size'], 3)\n+        # the size of the memory pool should be greater than 3x ~100 bytes\n+        assert_greater_than(json_obj['bytes'], 300)\n+\n+        # check that there are our submitted transactions in the TX memory pool\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        for tx in txs:\n+            assert_equal(tx in json_obj, True)\n+\n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "74d27e73bbd9aa9d12156d38c9e49151f381d64c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -65,6 +65,8 @@ class RestErr\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+extern UniValue mempoolInfoToJSON();\n+extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n@@ -293,6 +295,58 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_mempool_info(AcceptedConnection* conn,\n+                              const std::string& strURIPart,\n+                              const std::string& strRequest,\n+                              const std::map<std::string, std::string>& mapHeaders,\n+                              bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolInfoObject = mempoolInfoToJSON();\n+\n+        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n+static bool rest_mempool_contents(AcceptedConnection* conn,\n+                                  const std::string& strURIPart,\n+                                  const std::string& strRequest,\n+                                  const std::map<std::string, std::string>& mapHeaders,\n+                                  bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolObject = mempoolToJSON(true);\n+\n+        string strJSON = mempoolObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strURIPart,\n                     const std::string& strRequest,\n@@ -553,6 +607,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n+      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n };"
      },
      {
        "sha": "e6751de96bae527391a963a6c76d06eee924cb0c",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 44,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -175,45 +175,8 @@ UniValue getdifficulty(const UniValue& params, bool fHelp)\n     return GetDifficulty();\n }\n \n-\n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue mempoolToJSON(bool fVerbose = false)\n {\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n-            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n-            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-            \"       ... ]\\n\"\n-            \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n-            + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n-\n     if (fVerbose)\n     {\n         LOCK(mempool.cs);\n@@ -261,6 +224,47 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     }\n }\n \n+UniValue getrawmempool(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"getrawmempool ( verbose )\\n\"\n+            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"\\nResult: (for verbose = false):\\n\"\n+            \"[                     (json array of string)\\n\"\n+            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nResult: (for verbose = true):\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n+            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n+            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n+            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n+            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+            \"       ... ]\\n\"\n+            \"  }, ...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getrawmempool\", \"true\")\n+            + HelpExampleRpc(\"getrawmempool\", \"true\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n+\n+    return mempoolToJSON(fVerbose);\n+}\n+\n UniValue getblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -757,6 +761,16 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n     return res;\n }\n \n+UniValue mempoolInfoToJSON()\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n+    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+\n+    return ret;\n+}\n+\n UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -774,12 +788,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-\n-    return ret;\n+    return mempoolInfoToJSON();\n }\n \n UniValue invalidateblock(const UniValue& params, bool fHelp)"
      }
    ]
  }
]