[
  {
    "sha": "63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2MyZDgzZTU4Yzc1MDZhMTAzMGU3ZmU0ZGNlYTg0Y2RjZTk3MTQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T14:22:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T14:37:37Z"
      },
      "message": "Explicitly state assumption that state.m_chain_sync.m_work_header != nullptr in ConsiderEviction\n\nStatic analyzer (and humans!) will see ...\n\n```\nelse if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && ...\n```\n\n... and infer that state.m_chain_sync.m_work_header might be set to nullptr,\nand thus flag `state.m_chain_sync.m_work_header->GetBlockHash().ToString()`\nas a potential null pointer dereference.\n\nThis commit makes the tacit assumption (m_work_header != nullptr) explicit.\n\nCode introduced in 5a6d00 (\"Permit disconnection of outbound peers on\nbad/slow chains\") which was merged into master four days ago.",
      "tree": {
        "sha": "677047ac759c3a07d737cdd8195f8ee87ebc03d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/677047ac759c3a07d737cdd8195f8ee87ebc03d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63c2d83e58c7506a1030e7fe4dcea84cdce97147",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c2d83e58c7506a1030e7fe4dcea84cdce97147/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38b9703d9105b56909461ed2578eef8d924659a6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c2d83e58c7506a1030e7fe4dcea84cdce97147/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c2d83e58c7506a1030e7fe4dcea84cdce97147/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=63c2d83e58c7506a1030e7fe4dcea84cdce97147",
        "patch": "@@ -3006,6 +3006,7 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n                 LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n                 pto->fDisconnect = true;\n             } else {\n+                assert(state.m_chain_sync.m_work_header);\n                 LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n                 connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n                 state.m_chain_sync.m_sent_getheaders = true;"
      }
    ]
  }
]