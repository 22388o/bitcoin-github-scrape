[
  {
    "sha": "eb3100f392e37da6d5a159e7f97267652b073887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjMxMDBmMzkyZTM3ZGE2ZDVhMTU5ZTdmOTcyNjc2NTJiMDczODg3",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-14T19:21:47Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T07:44:02Z"
      },
      "message": "rpc: added helper function used for file checks in dumptxoutset and dumpwallet",
      "tree": {
        "sha": "c10768f2a6acd804bd7e1251874a23a486bdc0a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c10768f2a6acd804bd7e1251874a23a486bdc0a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb3100f392e37da6d5a159e7f97267652b073887",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl63sMIACgkQJiaFvHjt\nEfsmdggAiHiLJg8sk1ch6yBWkAYlOGdjSHoZ8BSIJPm/PiJoPrqzr31i3oSGz4/y\n7nu7zaXENKKlGL/TqJ+B8kvIj4aiCoWiZeSOt/5+QhuQbTaR52WhL8Sl7ZoxpSoH\nbpDrRLrDWRJkMzrNntR+tcZTaOkmdx8T6fSuu8zUYi1i1riQtWL8pZCfA1M5mmNn\nO0EggnSq14dW4umX1iOMhiW5FyrUrqKspZTQbHElZ56wl0WQ+nzyjUZgnK2n8PSz\n0vmYAY6IjeRpsm2/s8LUa6aW5Q1DIuP9/auCsls3DggHz/U4GbqsR0z5gb/MHjYR\nOvDaGE1sk6NyH9zhc3+VOeen5PexiA==\n=RQRB\n-----END PGP SIGNATURE-----",
        "payload": "tree c10768f2a6acd804bd7e1251874a23a486bdc0a7\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1576351307 +0100\ncommitter Harris <brakmic@gmail.com> 1589096642 +0200\n\nrpc: added helper function used for file checks in dumptxoutset and dumpwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3100f392e37da6d5a159e7f97267652b073887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3100f392e37da6d5a159e7f97267652b073887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3100f392e37da6d5a159e7f97267652b073887/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 113,
      "deletions": 9
    },
    "files": [
      {
        "sha": "804ddcca0b791e2f36384eb7ee95faadeecb825a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eb3100f392e37da6d5a159e7f97267652b073887",
        "patch": "@@ -2265,17 +2265,12 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     }.Check(request);\n \n     fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir());\n+    EnsureFileWritable(path);\n+\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n     fs::path temppath = fs::absolute(request.params[0].get_str() + \".incomplete\", GetDataDir());\n \n-    if (fs::exists(path)) {\n-        throw JSONRPCError(\n-            RPC_INVALID_PARAMETER,\n-            path.string() + \" already exists. If you are sure this is what you want, \"\n-            \"move it out of the way first\");\n-    }\n-\n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n     std::unique_ptr<CCoinsViewCursor> pcursor;"
      },
      {
        "sha": "7d2d32e6144cd2152a9b02e02a23fb0142e017d7",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=eb3100f392e37da6d5a159e7f97267652b073887",
        "patch": "@@ -10,6 +10,7 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/system.h>\n \n #include <tuple>\n \n@@ -856,3 +857,103 @@ UniValue GetServicesNames(ServiceFlags services)\n \n     return servicesNames;\n }\n+\n+void EnsureFileWritable(const fs::path& filepath)\n+{\n+    fs::path path = fs::absolute(filepath);\n+    std::string parent = path.parent_path().string();\n+    std::string file = path.filename().string();\n+\n+    /* Check if parent path exists and file name is valid. */\n+    if (!fs::exists(parent)) {\n+        throw JSONRPCError(\n+            RPC_INVALID_PARAMETER,\n+            parent + \" does not exist\");\n+    } else if (!fs::native(file)) {\n+        throw JSONRPCError(\n+            RPC_INVALID_PARAMETER,\n+            file + \" is invalid\");\n+    }\n+\n+    /* Check file status */\n+    boost::system::error_code ec;\n+    fs::file_status status = fs::status(path, ec);\n+    // Could the file be written at all?\n+    switch(ec.value())\n+    {\n+        case boost::system::errc::filename_too_long:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               file + \" is too long\");\n+        }\n+        break;\n+        case boost::system::errc::read_only_file_system:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"Filesystem is readonly\");\n+        }\n+        break;\n+        case boost::system::errc::device_or_resource_busy:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"Device or resource busy\");\n+        }\n+        break;\n+        case boost::system::errc::file_too_large:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               file + \" is too large\");\n+        }\n+        break;\n+        case boost::system::errc::no_space_on_device:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"No space left on device\");\n+        }\n+        break;\n+        case boost::system::errc::permission_denied:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"Permission denied\");\n+        }\n+        break;\n+        case boost::system::errc::no_such_file_or_directory:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"No such file or directory\");\n+        }\n+        break;\n+        case boost::system::errc::io_error:\n+        {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                               \"IO error\");\n+        }\n+        break;\n+    }\n+    // Should the file be written?\n+    switch (status.type())\n+    {\n+    case fs::file_type::file_not_found:\n+        //OK. Can be written, because couldn't find\n+        // a file with the same name.\n+        break;\n+    case fs::file_type::regular_file:\n+        {\n+           throw JSONRPCError(\n+                RPC_INVALID_PARAMETER,\n+                path.string() + \" already exists. If you are sure this is what you want, \"\n+                \"move it out of the way first\");\n+        }\n+        break;\n+    case fs::file_type::directory_file:\n+        {\n+           throw JSONRPCError(\n+                RPC_INVALID_PARAMETER,\n+                filepath.string() + \" is a directory\");\n+        }\n+        break;\n+    default:\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"General error with \" + filepath.string());\n+    }\n+}"
      },
      {
        "sha": "8a49a6fa0f5385a493a2b4926b8eae48dd2628f0",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3100f392e37da6d5a159e7f97267652b073887/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=eb3100f392e37da6d5a159e7f97267652b073887",
        "patch": "@@ -21,6 +21,7 @@\n #include <vector>\n \n #include <boost/variant.hpp>\n+#include <fs.h>\n \n /**\n  * String used to describe UNIX epoch time in documentation, factored out to a\n@@ -101,6 +102,8 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n \n /** Returns, given services flags, a list of humanly readable (known) network services */\n UniValue GetServicesNames(ServiceFlags services);\n+/** Check file and directory validity, availability and accessibility. Throws JSONRPCError */\n+void EnsureFileWritable(const fs::path& filepath);\n \n /**\n  * Serializing JSON objects depends on the outer type. Only arrays and"
      },
      {
        "sha": "370aec46d361e37964ad093a6059f0703b329a83",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3100f392e37da6d5a159e7f97267652b073887/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3100f392e37da6d5a159e7f97267652b073887/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=eb3100f392e37da6d5a159e7f97267652b073887",
        "patch": "@@ -750,8 +750,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(&wallet);\n \n-    fs::path filepath = request.params[0].get_str();\n-    filepath = fs::absolute(filepath);\n+    fs::path filepath = fs::absolute(request.params[0].get_str());\n+    EnsureFileWritable(filepath);\n \n     /* Prevent arbitrary files from being overwritten. There have been reports\n      * that users have overwritten wallet files this way:"
      },
      {
        "sha": "4adfec3ffb29022eb2dd2518e9db93b1145bb251",
        "filename": "test/functional/rpc_dumptxoutset.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3100f392e37da6d5a159e7f97267652b073887/test/functional/rpc_dumptxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3100f392e37da6d5a159e7f97267652b073887/test/functional/rpc_dumptxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_dumptxoutset.py?ref=eb3100f392e37da6d5a159e7f97267652b073887",
        "patch": "@@ -47,5 +47,10 @@ def run_test(self):\n         assert_raises_rpc_error(\n             -8, '{} already exists'.format(FILENAME),  node.dumptxoutset, FILENAME)\n \n+        # Specifying an irregular file path will fail.\n+        irregular_file = \" utxo.dat\"\n+        assert_raises_rpc_error(\n+            -8, '{} is invalid'.format(irregular_file),  node.dumptxoutset, irregular_file)\n+\n if __name__ == '__main__':\n     DumptxoutsetTest().main()"
      }
    ]
  }
]