brakmic,2019-12-04 20:18:15,"As I'm not sure if I should open an issue on that, I'll put my findings about [AbsPathForConfigVal](AbsPathForConfigVal) from util/system.cpp here first.\n\nMy environment is macOS Catalina. \n\nWhen I use the flag **-debuglogfile=badfilename`** it creates a debug file of that name, which would lead to problems on Windows, I assume. \n\nWith **-debuglogfile=\badfile** it creates a file named",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-561821364,561821364,
laanwj,2019-12-05 10:42:21,"> Otherwise, we should maybe think about reusing EnsureFileWritable here as well.\n\nCommand line argument handling is a different issueâ€”maybe one of the snazzy future command-line parsing frameworks could handle ""filepath"" arguments in a consistent way.\n\nBut please keep this PR in scope of the RPC interface.",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-562074101,562074101,
ryanofsky,2019-12-13 22:11:07,"I don't think this is a good approach. The EnsureFileWritable function is complex and has lots of holes in it. It isn't checking parent directory permissions properly (considering effective uid and gid and ACLs) so it will return true in some cases when a file isn't writable, and false in some cases when it is, and give a misleading error message. It isn't checking if the filesystem is mounted rea",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565627530,565627530,
brakmic,2019-12-13 23:49:57,"> I don't think this is a good approach. The EnsureFileWritable function is complex and has lots of holes in it.\n\nYes, the current code is more complex than the variant I started with. And as filesystems are anything but portable the code could become even more complex if I tried to ""emulate"" heterogenous filesystems' properties (windows ACLs, Linux permissions, readonly mounts etc.).\n\nIn ",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565652540,565652540,
ryanofsky,2019-12-14 00:19:16,"I just don't understand in what ways the current PR is better than a simple one-line fix:\n\n```c++\nif (!file) throw JSONRPCError(RPC_MISC_ERROR, strprintf(""Cannot create %s (%s)"", path.string(), GetErrorReason()));\n```\n\nThe current PR seems more more complicated, less reliable, and worse for users if it is going generate misleading error messages instead of passing on the actual error f",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565658062,565658062,
ryanofsky,2019-12-14 00:32:06,"I didn't realize GetErrorReason isn't currently implemented on windows:\n\nhttps://github.com/bitcoin/bitcoin/blob/5728f88d645c124b980ecb6b6943a94a1ad46612/src/fs.cpp#L27-L29\n\nSo my suggestion would be more than a one line fix, and would require tweaking fsbridge::fopen to return an error string or code (https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fopen-wfopen?view=vs-20",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565659921,565659921,
brakmic,2019-12-14 19:23:57,"I have expanded the checks for possible errors (readonly-fs, non-existing paths, permission-denied, no-space-left-on-device, and general IO errors).\n\n",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565744841,565744841,
laanwj,2019-12-15 12:12:38,"> Still I think this would be a simpler approach, and that it would be better to return the actual filesystem error to users rather than try to anticipate that an error might happen before it actually does, generate our own errors, and do work the operating system should be doing for us\n\nI agree with this in concept. To be clear, why I went along initially, is that I didn't see EnsureFileWrita",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-565804054,565804054,
DrahtBot,2020-01-01 23:09:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18689 (rpc: allow dumptxoutset to dump human-readable data by pierreN)\n\nIf you consider this pull request important, pl",https://github.com/bitcoin/bitcoin/pull/17623#issuecomment-570091291,570091291,
laanwj,2019-11-28 11:17:50,"maybe rename to `EnsureFileWritable(const std::string& filepath)`, then move the `throw`s inside, returning void. This makes the call sites much cleaner, and there is precedent in other RPC utility functions such as `EnsureMemPool` `EnsureWallet` etc",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351726618,351726618,src/rpc/util.cpp
practicalswift,2019-11-28 11:22:18,`JSONRPCError` is expected?,https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351728235,351728235,src/rpc/blockchain.cpp
practicalswift,2019-11-28 11:22:45,Same here: `JSONRPCError` expected?,https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351728405,351728405,src/wallet/rpcdump.cpp
brakmic,2019-11-28 11:23:20,Thanks. Will adapt the code.,https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351728594,351728594,src/rpc/util.cpp
brakmic,2019-11-28 11:23:36,"Yes, when nonzero.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351728688,351728688,src/rpc/blockchain.cpp
brakmic,2019-11-28 11:23:44,Same,https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351728745,351728745,src/wallet/rpcdump.cpp
brakmic,2019-11-28 11:25:54,"But will now convert the function to return void and only throw, when irregular things happen (filename irregular, readonly mount etc.)",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r351729649,351729649,src/wallet/rpcdump.cpp
laanwj,2019-12-05 10:40:03,"I think the code could be simplified by passing in a `const fs::path&` here directly, because all call-sites start from that and use `.string()`.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354230510,354230510,src/rpc/util.cpp
brakmic,2019-12-05 10:42:59,"Ok, will adapt it.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354232004,354232004,src/rpc/util.cpp
laanwj,2019-12-05 11:31:22,can remove the `.string()` here now,https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354256239,354256239,src/wallet/rpcdump.cpp
brakmic,2019-12-05 11:33:48,"Oops, I just removed a similar one from blockchain.cpp. Sorry. Will force push again. Thanks!",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354257313,354257313,src/wallet/rpcdump.cpp
laanwj,2019-12-05 11:35:04,"Why does this generate a runtime error?\nI might be wrong but I think this test is for utility (no side-effects) RPCs only; no utxo set has been set up here, so I think this is unsafe",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354257914,354257914,src/test/rpc_tests.cpp
brakmic,2019-12-05 11:37:09,"Well, I am unsure *why* it generates a runtime error, but I actually expected it to be generated because the file name is wrong. However, if a runtime error should not happen here, maybe I should look into it. ",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354258843,354258843,src/test/rpc_tests.cpp
laanwj,2019-12-05 11:40:08,"Isn't ` a valid filename character on pretty much all OSes?\n\nThat was not really my point though; I don't think this is the place to test this. The functional test is. I'd just remove this line.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354260007,354260007,src/test/rpc_tests.cpp
brakmic,2019-12-05 11:43:59,"Not sure if all OSes accept a backtick, but because I'm using boost's **portable_name** function it behaves more strictly towards non-portable file names. Here's the whole list of options that I've been using: https://www.boost.org/doc/libs/1_57_0/libs/filesystem/doc/portability_guide.htm\nWe could go less or more strict, of course. \nI will then remove this test. ",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354261504,354261504,src/test/rpc_tests.cpp
laanwj,2019-12-05 11:51:32,"I think that's very much overkill. The filename only needs to be valid for the OS bitcoind is running on. Looking at that table, `portable_posix_name` (which is implied by `portable_name`) rules out using non-ASCII characters which is not good for internationalization!",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354265407,354265407,src/test/rpc_tests.cpp
brakmic,2019-12-05 11:54:41,"Well, then I could use function *native* for that. My idea was to have a check that takes care of allowing only such names where one could create a file that could be copied to/from any OS. But, if this is too much I will make it less strict.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354267081,354267081,src/test/rpc_tests.cpp
laanwj,2019-12-05 12:23:11,"The problem is that boost's definition of ""any OS"" is way too broad. It would at most need to be compatible with modern operating systems that bitcoind runs on, not 80's UNIX or DOS.\nIn any case, `.native` is better here.",https://github.com/bitcoin/bitcoin/pull/17623#discussion_r354281952,354281952,src/test/rpc_tests.cpp
