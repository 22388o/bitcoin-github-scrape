naumenkogs,2020-04-15 01:29:06,"@sipa btw, take a look at how hashAddr was fed to the hasher twice (with a shift, yeah).\nI removed it, although I don't know why it was there in the first place... Feeding it once like I do should be sufficient.",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-613763747,613763747,
sipa,2020-04-15 02:05:30,"@naumenkogs It was very inscrutable code, but the construction with double-hashing the address hash was by design.\n\nThe idea is that the address both influences the hash directly, but also determines when the ""reset time of the day"" is (by including hashaddr in `(time + hashaddr)/DAY`, not every address will change salt simultaneously throughout the day).\n\nThe shifting is pointless, we sho",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-613773120,613773120,
naumenkogs,2020-04-15 14:05:34,"Updated the code with suggestion by @sipa, and simplified tests.\nThey are a bit loosened now, but more robust to failures caused by randomness. ",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-614060919,614060919,
DrahtBot,2020-04-23 21:06:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23542](https://github.com/bitcoin/bitcoin/pull/23542) (net: open p2p connections to nodes that listen on non-default por",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-618671026,618671026,
naumenkogs,2020-07-01 10:10:23,@jonatack addressed all the things.,https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-652327720,652327720,
sipa,2020-09-30 19:17:58,utACK 72d7e2400759dacfc8860341d5bb90459e363a81. I only casually reviewed the tests.,https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-701591535,701591535,
MarcoFalke,2020-10-01 08:04:17,ACK 72d7e2400759dacfc8860341d5bb90459e363a81,https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-701965127,701965127,
fanquake,2021-09-16 02:08:55,"Aside from this needing rebase for conflicts, can you rebase on master so that new CIs run. That should remove appveyor as well.",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-920518707,920518707,
MarcoFalke,2021-09-22 07:36:41,@naumenkogs Is this up for grabs?,https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-924666057,924666057,
naumenkogs,2021-09-27 13:14:54,"Okay, it was hard to rebase @jonatack test contributed, but I just did it. Ready for review.",https://github.com/bitcoin/bitcoin/pull/18642#issuecomment-927863694,927863694,
sipa,2020-04-15 01:18:23,Is this duration_cast needed? I think conversion should be automatic.,https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408525476,408525476,src/net_processing.cpp
naumenkogs,2020-04-15 01:25:42,"You are right. I spent 30 minutes fighting with this code, and couldn't come up with something better.\n\nBut after you messaged I tried once more and it worked. Will force push in a second.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408527433,408527433,src/net_processing.cpp
MarcoFalke,2020-04-15 01:29:40,"```suggestion\n    const uint64_t time_seed {GetTime<std::chrono::seconds>().count() / std::chrono::seconds{ROTATE_ADDR_RELAY_DEST_INTERVAL}.count()};\n```\n\nEverything in one line with compile-time checks enabled would look like this, btw",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408528523,408528523,src/net_processing.cpp
naumenkogs,2020-04-15 01:30:57,can we keep it to 2 lines? I think what you suggest is hard to read.,https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408528847,408528847,src/net_processing.cpp
sipa,2020-04-15 02:06:36,"```suggestion\n    const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr).Write((current_time + hashAddr) / ROTATE_ADDR_RELAY_DEST_INTERVAL);\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408538603,408538603,src/net_processing.cpp
naumenkogs,2020-04-15 13:54:20,"Yeah, I'm not 100% sure that this measure is effective against anything, but it won't hurt to have a less symmetry.\nThis mehaviour _may_ leak extra information if someone tries to analyze how addresses are flowing, but since we don't have any real evidence, we probably should stick to the existing reasoning.\n\nHad to slightly adjust the code you suggested, because adding uint to chrono type d",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408860100,408860100,src/net_processing.cpp
MarcoFalke,2020-04-15 14:23:32,"Previously `hashAddr` was of type seconds, now it is type hours. What was the reason to change it?",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408882152,408882152,src/net_processing.cpp
naumenkogs,2020-04-15 15:20:50,"There is no real difference, as long as it  is an order of hours or more. Otherwise, it won't add enough randomness.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408927009,408927009,src/net_processing.cpp
MarcoFalke,2020-04-15 15:40:55,"You will get rid of the ""reset time of the day"" feature. Generally I don't like refactoring commits to also change behavior.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408942249,408942249,src/net_processing.cpp
naumenkogs,2020-04-15 15:52:49,"Okay, made it seconds again so that we don't change the behavior. Although I think we won't loose any properties if hours are used.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r408950804,408950804,src/net_processing.cpp
MarcoFalke,2020-04-17 00:10:42,"```suggestion\n    uint64_t time_addr = (current_time + std::chrono::seconds{static_cast<int64_t>(hashAddr)}) / ROTATE_ADDR_RELAY_DEST_INTERVAL;\n```\n\nMaybe try this to avoid https://travis-ci.org/github/bitcoin/bitcoin/jobs/675780723#L4756",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r409919084,409919084,src/net_processing.cpp
MarcoFalke,2020-04-21 14:49:28,"```suggestion\n    uint64_t time_addr = static_cast<uint64_t>((current_time + std::chrono::seconds{static_cast<int64_t>(hashAddr)}) / ROTATE_ADDR_RELAY_DEST_INTERVAL);\n```\n\n\n```\n node0 stderr net_processing.cpp:1381:26: runtime error: implicit conversion from type 'typename common_type<long, long>::type' (aka 'long') of value -28739051454386 (64-bit, signed) to type 'uint64_t' (aka 'uns",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r412253058,412253058,src/net_processing.cpp
jonatack,2020-06-28 15:45:29,nit: Can this be simpler? It's more code and (even with the removed bit shifting) a bit more complex to understand.,https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446666126,446666126,src/net_processing.cpp
jonatack,2020-06-28 15:48:55,"In 6 places (here, above at line 72 and line 87, below at lines 106+107 and 113), it could be good to move the multiplications out of the loops and up to constants at the top like `ONE_HOUR`, `TWO_HOURS`, and `ONE_DAY`.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446666432,446666432,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:50:19,"```suggestion\n        for _ in range(11):  # 11 times jump for 2 hours, so less than 24 hours -> at most one rotation\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446666610,446666610,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:50:49,"```suggestion\n        for _ in range(10):  # 11 times jump for a day, so less than 24 hours -> at most one rotation\n```\nShould this be 10 or 11?",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446666666,446666666,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:53:10,"```suggestion\n                mocked_time += 60 * 60  # should be enough to cover 30-min Poisson in most cases.\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446666908,446666908,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:54:27,"```suggestion\n        assert len(nodes_received_addr) > 4\n```\nor even better (adding it to the imported methods at the top)\n```suggestion\n        assert_greater_than(len(nodes_received_addr), 4)\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446667037,446667037,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:55:15,"```suggestion\n        assert len(nodes_received_addr) <= 4\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446667134,446667134,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 15:55:54,"```suggestion\n        for _ in range(20):\n```",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446667220,446667220,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 16:03:25,"I don't grok what/why regarding the 100000 value. It would be nice to comment and/or hoist it to a variable.\n\nSame for 200000 at line 100.",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446668071,446668071,test/functional/p2p_addr_relay.py
jonatack,2020-06-28 16:10:00,Why the value of 4 here and line 118? Perhaps add a comment.,https://github.com/bitcoin/bitcoin/pull/18642#discussion_r446668728,446668728,test/functional/p2p_addr_relay.py
naumenkogs,2020-06-30 12:54:23,"We iterated over this line a couple times with @MarcoFalke, so I'm out of ideas here.\nOpen to suggestions!",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r447658790,447658790,src/net_processing.cpp
sipa,2020-07-07 19:35:12,"Annoyingly, I think this is UB, as hashAddr may exceed 2^63, and casting a larger number to a signed 64-bit integer would be outside its range (and overflowing signed integers is undefined behavior).\n\nSuggestion: `uint64_t time_addr = (current_time + std::chrono::seconds{hashAddr % ROTATE_ADDR_RELAY_DEST_INTERVAL.count()}) / ROTATE_ADDR_RELAY_DEST_INTERVAL;`, and make `ROTATE_ADDR_RELAY_DEST_I",https://github.com/bitcoin/bitcoin/pull/18642#discussion_r451096710,451096710,src/net_processing.cpp
