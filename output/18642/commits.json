[
  {
    "sha": "dd83d9f0506154d1598cecf7feca179a4fb45c32",
    "node_id": "C_kwDOABII59oAKGRkODNkOWYwNTA2MTU0ZDE1OThjZWNmN2ZlY2ExNzlhNGZiNDVjMzI",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-04-15T01:02:43Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-09-27T12:56:55Z"
      },
      "message": "Use std::chrono for salting when randomizing ADDR destination",
      "tree": {
        "sha": "243b308337917c11d933caa7a2f5f0f9e106f8ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/243b308337917c11d933caa7a2f5f0f9e106f8ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd83d9f0506154d1598cecf7feca179a4fb45c32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd83d9f0506154d1598cecf7feca179a4fb45c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd83d9f0506154d1598cecf7feca179a4fb45c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd83d9f0506154d1598cecf7feca179a4fb45c32/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68bbfcc25058ebd274b49c4c1f5e1134395e57f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68bbfcc25058ebd274b49c4c1f5e1134395e57f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68bbfcc25058ebd274b49c4c1f5e1134395e57f9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9a95631ebc9e0f8f5e406b4dbb97f4f8ff8987aa",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd83d9f0506154d1598cecf7feca179a4fb45c32/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd83d9f0506154d1598cecf7feca179a4fb45c32/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dd83d9f0506154d1598cecf7feca179a4fb45c32",
        "patch": "@@ -124,7 +124,9 @@ static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n /** Average delay between local address broadcasts */\n static constexpr auto AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24h;\n /** Average delay between peer address broadcasts */\n-static constexpr auto AVG_ADDRESS_BROADCAST_INTERVAL = 30s;\n+static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n+/** Delay between rotating the peers we relay a particular address to */\n+static constexpr std::chrono::hours ROTATE_ADDR_RELAY_DEST_INTERVAL{24};\n /** Average delay between trickled inventory transmissions for inbound peers.\n  *  Blocks and peers with NetPermissionFlags::NoBan permission bypass this. */\n static constexpr auto INBOUND_INVENTORY_BROADCAST_INTERVAL = 5s;\n@@ -1700,7 +1702,11 @@ void PeerManagerImpl::RelayAddress(NodeId originator,\n     // Use deterministic randomness to send to the same nodes for 24 hours\n     // at a time so the m_addr_knowns of the chosen nodes prevent repeats\n     uint64_t hashAddr = addr.GetHash();\n-    const CSipHasher hasher = m_connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24 * 60 * 60));\n+\n+    std::chrono::seconds current_time = GetTime<std::chrono::seconds>();\n+    // Adding address hash makes exact rotation time different per address, while preserving periodicity.\n+    uint64_t time_addr = static_cast<uint64_t>((current_time + std::chrono::seconds{static_cast<int64_t>(hashAddr)}) / ROTATE_ADDR_RELAY_DEST_INTERVAL);\n+    const CSipHasher hasher = m_connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write(time_addr);\n     FastRandomContext insecure_rand;\n \n     // Relay reachable addresses to 2 peers. Unreachable addresses are relayed randomly to 1 or 2 peers."
      }
    ]
  },
  {
    "sha": "7ba6b190b626095945a0637354ba61ba5ccce1ad",
    "node_id": "C_kwDOABII59oAKDdiYTZiMTkwYjYyNjA5NTk0NWEwNjM3MzU0YmE2MWJhNWNjY2UxYWQ",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-04-15T01:07:38Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-09-27T13:10:01Z"
      },
      "message": "Add tests for addr destination rotation\n\nCheck that within 24h addr of a given node is forwarded\nto the same peer(s), and then the destination is\nrotated every 24h.\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "ae0f53f42edf652cda26b6450db2e5f6c0e167e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae0f53f42edf652cda26b6450db2e5f6c0e167e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ba6b190b626095945a0637354ba61ba5ccce1ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba6b190b626095945a0637354ba61ba5ccce1ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba6b190b626095945a0637354ba61ba5ccce1ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba6b190b626095945a0637354ba61ba5ccce1ad/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd83d9f0506154d1598cecf7feca179a4fb45c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd83d9f0506154d1598cecf7feca179a4fb45c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd83d9f0506154d1598cecf7feca179a4fb45c32"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 61,
      "deletions": 1
    },
    "files": [
      {
        "sha": "16b3b5b79454ed720f24ec2d5e3dacf63ff15907",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba6b190b626095945a0637354ba61ba5ccce1ad/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba6b190b626095945a0637354ba61ba5ccce1ad/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=7ba6b190b626095945a0637354ba61ba5ccce1ad",
        "patch": "@@ -21,8 +21,16 @@\n     P2P_SERVICES,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than\n+from test_framework.util import assert_equal, assert_greater_than, assert_greater_than_or_equal\n \n+ONE_MINUTE  = 60\n+TEN_MINUTES = 10 * ONE_MINUTE\n+HALF_HOUR   =  3 * TEN_MINUTES\n+ONE_HOUR    =  2 * HALF_HOUR\n+TWO_HOURS   =  2 * ONE_HOUR\n+ONE_DAY     = 12 * TWO_HOURS\n+\n+ADDR_DESTINATIONS_THRESHOLD = 4\n \n class AddrReceiver(P2PInterface):\n     num_ipv4_received = 0\n@@ -85,6 +93,9 @@ def run_test(self):\n         self.relay_tests()\n         self.inbound_blackhole_tests()\n \n+        self.destination_rotates_once_in_24_hours_test()\n+        self.destination_rotates_more_than_once_over_several_days_test()\n+\n         # This test populates the addrman, which can impact the node's behavior\n         # in subsequent tests\n         self.getaddr_tests()\n@@ -368,6 +379,55 @@ def rate_limit_tests(self):\n \n             self.nodes[0].disconnect_p2ps()\n \n+    def get_nodes_that_received_addr(self, peer, receiver_peer, addr_receivers,\n+                                        time_interval_1, time_interval_2):\n+\n+        # Clean addr response related to the initial getaddr. There is no way to avoid initial\n+        # getaddr because the peer won't self-announce then.\n+        for addr_receiver in addr_receivers:\n+            addr_receiver.num_ipv4_received = 0\n+\n+        for _ in range(10):\n+            self.mocktime += time_interval_1\n+            self.msg.addrs[0].time = self.mocktime + TEN_MINUTES\n+            self.nodes[0].setmocktime(self.mocktime)\n+            with self.nodes[0].assert_debug_log(['received: addr (31 bytes) peer=0']):\n+                peer.send_and_ping(self.msg)\n+                self.mocktime += time_interval_2\n+                self.nodes[0].setmocktime(self.mocktime)\n+                receiver_peer.sync_with_ping()\n+        return [node for node in addr_receivers if node.addr_received()]\n+\n+    def destination_rotates_once_in_24_hours_test(self):\n+        self.restart_node(0, [])\n+\n+        self.log.info('Test within 24 hours an addr relay destination is rotated at most once')\n+        self.mocktime = int(time.time())\n+        self.msg = self.setup_addr_msg(1)\n+        self.addr_receivers = []\n+        peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        receiver_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        addr_receivers = [self.nodes[0].add_p2p_connection(AddrReceiver()) for _ in range(20)]\n+        nodes_received_addr = self.get_nodes_that_received_addr(peer, receiver_peer, addr_receivers, 0, TWO_HOURS)  # 10 intervals of 2 hours\n+        # Per RelayAddress, we would announce these addrs to 2 destinations per day.\n+        # Since it's at most one rotation, at most 4 nodes can receive ADDR.\n+        assert_greater_than_or_equal(ADDR_DESTINATIONS_THRESHOLD, len(nodes_received_addr))\n+        self.nodes[0].disconnect_p2ps()\n+\n+    def destination_rotates_more_than_once_over_several_days_test(self):\n+        self.restart_node(0, [])\n+\n+        self.log.info('Test after several days an addr relay destination is rotated more than once')\n+        self.msg = self.setup_addr_msg(1)\n+        peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        receiver_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        addr_receivers = [self.nodes[0].add_p2p_connection(AddrReceiver()) for _ in range(20)]\n+        # 10 intervals of 1 day (+ 1 hour, which should be enough to cover 30-min Poisson in most cases)\n+        nodes_received_addr = self.get_nodes_that_received_addr(peer, receiver_peer, addr_receivers, ONE_DAY, ONE_HOUR)\n+        # Now that there should have been more than one rotation, more than\n+        # ADDR_DESTINATIONS_THRESHOLD nodes should have received ADDR.\n+        assert_greater_than(len(nodes_received_addr), ADDR_DESTINATIONS_THRESHOLD)\n+        self.nodes[0].disconnect_p2ps()\n \n if __name__ == '__main__':\n     AddrTest().main()"
      }
    ]
  }
]