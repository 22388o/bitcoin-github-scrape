[
  {
    "sha": "4f688682ed1ac786326d69716086d402fd282aaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjY4ODY4MmVkMWFjNzg2MzI2ZDY5NzE2MDg2ZDQwMmZkMjgyYWFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-02T14:45:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-03T10:14:06Z"
      },
      "message": "depends: mac deploy Py3 compatibility\n\nThis fixes the gitian MacOSX build, it was broken in #7723.\n\nThe patch to `native_mac_alias` should probably make it upstream.",
      "tree": {
        "sha": "ab5fd6837f0a60d885e6f837395a1aa1cd1a89f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab5fd6837f0a60d885e6f837395a1aa1cd1a89f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f688682ed1ac786326d69716086d402fd282aaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f688682ed1ac786326d69716086d402fd282aaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f688682ed1ac786326d69716086d402fd282aaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f688682ed1ac786326d69716086d402fd282aaf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a67bc5e128541155e357be9ef9ffd401f0945639",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a67bc5e128541155e357be9ef9ffd401f0945639",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a67bc5e128541155e357be9ef9ffd401f0945639"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 80,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f8201e72c649dd6f2f111ed136436c3c5d770762",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f688682ed1ac786326d69716086d402fd282aaf/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f688682ed1ac786326d69716086d402fd282aaf/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=4f688682ed1ac786326d69716086d402fd282aaf",
        "patch": "@@ -210,8 +210,8 @@ def getFrameworks(binaryPath, verbose):\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n             raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n-    \n-    otoolLines = o_stdout.split(\"\\n\")\n+\n+    otoolLines = o_stdout.decode().split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -676,7 +676,7 @@ if verbose >= 2:\n     print(\"+ Installing qt.conf +\")\n \n f = open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\")\n-f.write(qt_conf)\n+f.write(qt_conf.encode())\n f.close()\n \n # ------------------------------------------------"
      },
      {
        "sha": "85a8a402bf92cefb0b406a6d8ddefa87984157cc",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f688682ed1ac786326d69716086d402fd282aaf/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f688682ed1ac786326d69716086d402fd282aaf/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=4f688682ed1ac786326d69716086d402fd282aaf",
        "patch": "@@ -5,6 +5,11 @@ $(package)_download_file=v$($(package)_version).tar.bz2\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=python3.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/python3.patch\n+endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "1a32340be5b13ae1d5be3e775462c3052c12953a",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f688682ed1ac786326d69716086d402fd282aaf/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f688682ed1ac786326d69716086d402fd282aaf/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=4f688682ed1ac786326d69716086d402fd282aaf",
        "patch": "@@ -0,0 +1,72 @@\n+diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n+--- a/mac_alias/alias.py\t2015-10-19 12:12:48.000000000 +0200\n++++ b/mac_alias/alias.py\t2016-04-03 12:13:12.037159417 +0200\n+@@ -243,10 +243,10 @@\n+         alias = Alias()\n+         alias.appinfo = appinfo\n+             \n+-        alias.volume = VolumeInfo (volname.replace('/',':'),\n++        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n+                                    voldate, fstype, disktype,\n+                                    volattrs, volfsid)\n+-        alias.target = TargetInfo (kind, filename.replace('/',':'),\n++        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n+                                    folder_cnid, cnid,\n+                                    crdate, creator_code, type_code)\n+         alias.target.levels_from = levels_from\n+@@ -261,9 +261,9 @@\n+                 b.read(1)\n+ \n+             if tag == TAG_CARBON_FOLDER_NAME:\n+-                alias.target.folder_name = value.replace('/',':')\n++                alias.target.folder_name = value.decode().replace('/',':')\n+             elif tag == TAG_CNID_PATH:\n+-                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n++                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n+                                                            value)\n+             elif tag == TAG_CARBON_PATH:\n+                 alias.target.carbon_path = value\n+@@ -298,9 +298,9 @@\n+                 alias.target.creation_date \\\n+                     = mac_epoch + datetime.timedelta(seconds=seconds)\n+             elif tag == TAG_POSIX_PATH:\n+-                alias.target.posix_path = value\n++                alias.target.posix_path = value.decode()\n+             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n+-                alias.volume.posix_path = value\n++                alias.volume.posix_path = value.decode()\n+             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n+                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n+             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n+@@ -422,13 +422,13 @@\n+         #       (so doing so is ridiculous, and nothing could rely on it).\n+         b.write(struct.pack(b'>h28pI2shI64pII4s4shhI2s10s',\n+                             self.target.kind,\n+-                            carbon_volname, voldate,\n++                            carbon_volname, int(voldate),\n+                             self.volume.fs_type,\n+                             self.volume.disk_type,\n+                             self.target.folder_cnid,\n+                             carbon_filename,\n+                             self.target.cnid,\n+-                            crdate,\n++                            int(crdate),\n+                             self.target.creator_code,\n+                             self.target.type_code,\n+                             self.target.levels_from,\n+@@ -449,12 +449,12 @@\n+ \n+         b.write(struct.pack(b'>hhQhhQ',\n+                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n+-                8, long(voldate * 65536),\n++                8, int(voldate * 65536),\n+                 TAG_HIGH_RES_CREATION_DATE,\n+-                8, long(crdate * 65536)))\n++                8, int(crdate * 65536)))\n+ \n+         if self.target.cnid_path:\n+-            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n++            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n+                                     *self.target.cnid_path)\n+             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n+                                  len(cnid_path)))"
      }
    ]
  }
]