[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590855144",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#issuecomment-590855144",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18206",
    "id": 590855144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDg1NTE0NA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-25T13:01:59Z",
    "updated_at": "2020-02-25T13:01:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18190 (tests: Add fuzzing harness for Golomb-Rice coding (GolombRiceEncode/GolombRiceDecode) by practicalswift)\n* #18176 (tests: Add fuzzing harness for CScript and CScriptNum operations by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590855144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590968969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#issuecomment-590968969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18206",
    "id": 590968969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDk2ODk2OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-25T17:11:07Z",
    "updated_at": "2020-02-25T17:11:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Thanks for reviewing. Good feedback! All points addressed - please re-review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590968969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/591030625",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#issuecomment-591030625",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18206",
    "id": 591030625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTAzMDYyNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-25T19:37:28Z",
    "updated_at": "2020-02-25T19:37:28Z",
    "author_association": "MEMBER",
    "body": "ACK eabbbe409f397e97b1e6fad7385d9d1813ae2880 \ud83e\udd1e\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK eabbbe409f397e97b1e6fad7385d9d1813ae2880 \ud83e\udd1e\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjMAAwAon5Oa4NRYASpbv3ahHtb4uOLNZJZq/Grjzc8/XyogORj0+Lsz7+y7p1n\r\nzFxGKrCeLJfpJ5IyetU8ZCprs55CfgDyIT4jy+8GfPgQ/bbpa2Rxg7m87q2osAgi\r\nXa5C/jnQvILDTvwAE+RA7zdc2GFBCJilmG2WCB+XRm4OZzd4bOmPKyCfjj7+DVrQ\r\nzLdlxaKrSJHxp50DAntkH8g57k2LSdIn+0bw4HQ1Wx/l36viiMlzcq+LBWc+5ERr\r\nA/jWaxEYYee7CcpjtW+ICANYY//C3sK1yvxtW/szKmApmvg5oEQELDTUaqUBZuC5\r\nBlmfI1r3O43K2a8VYSZUgKOzQiHAvanYq7a8Bg42dMmf7/lJaBt+j2OHktdpwYeB\r\nOR/MN2NQER7j12goLn+QNUl/AN/SlZJJX6gF2t6qvDzxIGQ27zYkSgUr3DfSjaMq\r\nsWLHbtioYvwJAi8eHosNmQIyoOpbs8/VmUFevvjSZpjVnT4f7QfBYwOdc4S9kkjQ\r\ncbSFuGSL\r\n=QsZQ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `6fe8d1c8528304d7c8bc08ad9e3af6e5c9f2a116bb4b9ad3ff899c36e90eb082  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401086fe8d1c8528304d7c8bc08ad9e3af6e5c9f2a116bb4b9ad3ff899c36e90eb082f01068e8b10ff10efd99d511015510041f1b08fff0101e2aca55164cb1d175ceeda2bc2e2a6508f1045e55776cf008fcdf784d1941e0330083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010b02baa2385becdc8b2f4679728414e3d08f1045e55776df00815095d2269620fc20083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010c50151bed823e89926204f7483f3a68408f1045e55776df00823564574969231810083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010ecbd517d7512bdd070f8acec0f4d838b08f1045e55776df008995b623f627bc3ab0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/591030625/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930058",
    "pull_request_review_id": 364205114,
    "id": 383930058,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMDA1OA==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 10)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bloom_filter.insert(b);\n+            const bool present = bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            bloom_filter.insert(*out_point);\n+            const bool present = bloom_filter.contains(*out_point);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            bloom_filter.insert(*u256);\n+            const bool present = bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)bloom_filter.contains(b);\n+            break;\n+        }\n+        case 4: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*out_point);",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why does this need to be a different fuzzer-instructed path? I'd guess it would be simpler and more efficient to call this as the first step in `case 1`",
    "created_at": "2020-02-25T14:56:11Z",
    "updated_at": "2020-02-25T17:09:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930058",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930058"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930058"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930308",
    "pull_request_review_id": 364205114,
    "id": 383930308,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMDMwOA==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 10)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bloom_filter.insert(b);\n+            const bool present = bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            bloom_filter.insert(*out_point);\n+            const bool present = bloom_filter.contains(*out_point);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            bloom_filter.insert(*u256);\n+            const bool present = bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)bloom_filter.contains(b);\n+            break;\n+        }\n+        case 4: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*out_point);\n+            break;\n+        }\n+        case 5: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*u256);",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 68,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same",
    "created_at": "2020-02-25T14:56:32Z",
    "updated_at": "2020-02-25T17:09:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930308",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930308"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930308"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930383",
    "pull_request_review_id": 364205114,
    "id": 383930383,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMDM4Mw==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 10)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bloom_filter.insert(b);\n+            const bool present = bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            bloom_filter.insert(*out_point);\n+            const bool present = bloom_filter.contains(*out_point);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            bloom_filter.insert(*u256);\n+            const bool present = bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)bloom_filter.contains(b);",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same",
    "created_at": "2020-02-25T14:56:38Z",
    "updated_at": "2020-02-25T17:09:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930383",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930383"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383930383"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383930383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383931147",
    "pull_request_review_id": 364205114,
    "id": 383931147,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMTE0Nw==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I know that our clang-format allows infinite length lines. But in editors that don't line-wrap this is really hard to read. Maybe add a newline after each `,`?",
    "created_at": "2020-02-25T14:57:41Z",
    "updated_at": "2020-02-25T17:09:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383931147",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383931147"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383931147"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383931147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383932139",
    "pull_request_review_id": 364205114,
    "id": 383932139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMjEzOQ==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 10)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bloom_filter.insert(b);\n+            const bool present = bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            bloom_filter.insert(*out_point);\n+            const bool present = bloom_filter.contains(*out_point);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            bloom_filter.insert(*u256);\n+            const bool present = bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)bloom_filter.contains(b);\n+            break;\n+        }\n+        case 4: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*out_point);\n+            break;\n+        }\n+        case 5: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*u256);\n+            break;\n+        }\n+        case 6:\n+            bloom_filter.clear();\n+            break;\n+        case 7:\n+            bloom_filter.reset(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\n+            break;\n+        case 8:\n+            (void)bloom_filter.IsWithinSizeConstraints();",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 78,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why does this need to be fuzzer-instructed? More coverage can be achieved by calling it unconditionally.",
    "created_at": "2020-02-25T14:59:04Z",
    "updated_at": "2020-02-25T17:09:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383932139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383932139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383932139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383932139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383934449",
    "pull_request_review_id": 364205114,
    "id": 383934449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNDQ0OQ==",
    "diff_hunk": "@@ -5,10 +5,39 @@\n #ifndef BITCOIN_TEST_FUZZ_FUZZ_H\n #define BITCOIN_TEST_FUZZ_FUZZ_H\n \n-#include <stdint.h>\n+#include <attributes.h>\n+#include <optional.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>",
    "path": "src/test/fuzz/fuzz.h",
    "position": null,
    "original_position": 10,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why include itself?",
    "created_at": "2020-02-25T15:02:22Z",
    "updated_at": "2020-02-25T17:09:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383934449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383934449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383934449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383934449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 13,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383935504",
    "pull_request_review_id": 364205114,
    "id": 383935504,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNTUwNA==",
    "diff_hunk": "@@ -5,10 +5,39 @@\n #ifndef BITCOIN_TEST_FUZZ_FUZZ_H\n #define BITCOIN_TEST_FUZZ_FUZZ_H\n \n-#include <stdint.h>\n+#include <attributes.h>\n+#include <optional.h>\n+#include <serialize.h>",
    "path": "src/test/fuzz/fuzz.h",
    "position": null,
    "original_position": 7,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This header takes a long time to parse, but not every fuzz target is using it. It might reduce compile time to put the fuzzedDataProvider helpers in a new module (header) and keep this header the raw and minimal \"main fuzz header\"",
    "created_at": "2020-02-25T15:03:54Z",
    "updated_at": "2020-02-25T17:09:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383935504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383935504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383935504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383935504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936633",
    "pull_request_review_id": 364205114,
    "id": 383936633,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjYzMw==",
    "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CRollingBloomFilter rolling_bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 1000), 0.999 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max())};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 4)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            rolling_bloom_filter.insert(b);\n+            const bool present = rolling_bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            rolling_bloom_filter.insert(*u256);\n+            const bool present = rolling_bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)rolling_bloom_filter.contains(b);\n+            break;\n+        }\n+        case 3: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            (void)rolling_bloom_filter.contains(*u256);",
    "path": "src/test/fuzz/rolling_bloom_filter.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\r\n\r\nWhy does this need to be a different fuzzer-instructed path? I'd guess it would be simpler and more efficient to call this as the first step in case 1\r\n",
    "created_at": "2020-02-25T15:05:45Z",
    "updated_at": "2020-02-25T17:09:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383936633",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936633"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383936633"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936709",
    "pull_request_review_id": 364205114,
    "id": 383936709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjcwOQ==",
    "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CRollingBloomFilter rolling_bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 1000), 0.999 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max())};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 4)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            rolling_bloom_filter.insert(b);\n+            const bool present = rolling_bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            rolling_bloom_filter.insert(*u256);\n+            const bool present = rolling_bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)rolling_bloom_filter.contains(b);",
    "path": "src/test/fuzz/rolling_bloom_filter.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same",
    "created_at": "2020-02-25T15:05:49Z",
    "updated_at": "2020-02-25T17:09:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383936709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383936709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383936709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383996964",
    "pull_request_review_id": 364291261,
    "id": 383996964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk5Njk2NA==",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bloom.h>\n+#include <optional.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CBloomFilter bloom_filter{fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 10000000), 1.0 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max()), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 10)) {\n+        case 0: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bloom_filter.insert(b);\n+            const bool present = bloom_filter.contains(b);\n+            assert(present);\n+            break;\n+        }\n+        case 1: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            bloom_filter.insert(*out_point);\n+            const bool present = bloom_filter.contains(*out_point);\n+            assert(present);\n+            break;\n+        }\n+        case 2: {\n+            const Optional<uint256> u256 = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (!u256) {\n+                break;\n+            }\n+            bloom_filter.insert(*u256);\n+            const bool present = bloom_filter.contains(*u256);\n+            assert(present);\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            (void)bloom_filter.contains(b);\n+            break;\n+        }\n+        case 4: {\n+            const Optional<COutPoint> out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!out_point) {\n+                break;\n+            }\n+            (void)bloom_filter.contains(*out_point);",
    "path": "src/test/fuzz/bloom_filter.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Fixed!",
    "created_at": "2020-02-25T16:53:06Z",
    "updated_at": "2020-02-25T17:09:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383996964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383996964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r383996964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383996964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 383930058
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384005428",
    "pull_request_review_id": 364301358,
    "id": 384005428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTQyOA==",
    "diff_hunk": "@@ -5,10 +5,39 @@\n #ifndef BITCOIN_TEST_FUZZ_FUZZ_H\n #define BITCOIN_TEST_FUZZ_FUZZ_H\n \n-#include <stdint.h>\n+#include <attributes.h>\n+#include <optional.h>\n+#include <serialize.h>",
    "path": "src/test/fuzz/fuzz.h",
    "position": null,
    "original_position": 7,
    "commit_id": "eabbbe409f397e97b1e6fad7385d9d1813ae2880",
    "original_commit_id": "d5d40e2e26a359aae2cc36f3e6794f5acf8d8aa7",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Now fixed.",
    "created_at": "2020-02-25T17:06:09Z",
    "updated_at": "2020-02-25T17:09:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r384005428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384005428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18206#discussion_r384005428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18206"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384005428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT",
    "in_reply_to_id": 383935504
  }
]