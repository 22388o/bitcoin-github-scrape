DrahtBot,2021-02-06 01:22:16,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20362 by MarcoFalke\n* #18554 by rodentrabies\n\nIf you consider this pull request important, please also help to review ",https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-774370548,774370548,
jnewbery,2021-04-27 09:00:05,"This needs rebase now that #21009 is merged. I did my own rebase here: https://github.com/jnewbery/bitcoin/tree/pr21090.1 since I need it for #20799. Feel free to take that if it's helpful.\n\nI think it might make sense to remove the `test_upgrade_after_activation()` subtest from p2p_segwit.py and place it in its own file. It's not anything to do with p2p and doesn't have any dependencies on th",https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-827442618,827442618,
dhruv,2021-04-29 18:16:54,"Rebased against master, ready for review.\n\n@jnewbery it does make a ton of sense to extract `test_upgrade_after_activation()` into another file. Once `-reindex` has the expected effect, the rest of the test merely verifies that the node syncs on to the strongest chain, and that is in covered in other tests. I've gone ahead and done that refactor. This also simplified `p2p_segwit.py` since it n",https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-829482770,829482770,
dhruv,2021-04-30 14:54:26,Comments addressed. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-830151051,830151051,
jnewbery,2021-05-03 08:04:25,"Code review ACK 0dd10ccfd6ef13e5caa06fc380d6eb7f3a8fd22e\n\nLooks great. Thanks @dhruv!",https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-831096059,831096059,
DrahtBot,2021-05-03 09:34:12,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-831142763,831142763,
dhruv,2021-06-20 18:33:35,Addressed comments from @mzumsande. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-864594489,864594489,
jnewbery,2021-06-22 19:48:43,utACK c44bac14b4,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-866284416,866284416,
jnewbery,2021-07-06 07:40:11,@dhruv - do you plan to rebase this?,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-874535099,874535099,
dhruv,2021-07-06 13:34:32,@jnewbery I do. Been on break for a long weekend where I live. ,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-874765251,874765251,
theStack,2021-07-07 00:04:54,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-875163152,875163152,
dhruv,2021-07-08 05:18:32,Rebased. Addressed comments. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-876135029,876135029,
mzumsande,2021-07-17 20:41:51,Code-Review ACK a806647d260132a00cd633160040625c7dd17803,https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-881957339,881957339,
laanwj,2021-07-22 15:36:07,"Code review ACK a806647d260132a00cd633160040625c7dd17803, nice cleanup",https://github.com/bitcoin/bitcoin/pull/21090#issuecomment-885010966,885010966,
MarcoFalke,2021-04-29 18:42:41,"```suggestion\n            throw std::runtime_error(strprintf(""Activation height %ld for segwit is out of valid range."", height));\n```",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623302697,623302697,src/chainparams.cpp
dhruv,2021-04-30 01:03:48,I [think](https://developer.bitcoin.org/reference/p2p_networking.html#sendcmpct) the only allowed values for `nCMPCTBLOCKVersion` are 1 or 2. Can this conditional be removed altogether (especially since `fWantsCmpctWitness` is conditioned appropriately below)? Or perhaps replaced with `if (0 < nCMPCTBLOCKVersion < 3)` ?,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623519618,623519618,src/net_processing.cpp
dhruv,2021-04-30 01:05:10,Done.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623520004,623520004,src/chainparams.cpp
jnewbery,2021-04-30 07:11:00,"Yes, the only permitted values for nCMPCTBLOCKVersion are `1` and `2`, which is why this conditional is here. We want to ignore any `sendcmpct` message received where nCMPCTBLOCKVersion is not 1 or 2.\n\n`if (0 < nCMPCTBLOCKVersion < 3)` does not do what you I think you expect it to do.",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623661970,623661970,src/net_processing.cpp
jnewbery,2021-04-30 07:28:26,"This method override can be removed entirely, since it's doing the same as the default `setup_network()` in test_framework.py",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623672844,623672844,test/functional/p2p_segwit.py
jnewbery,2021-04-30 07:32:54,Not needed. This is default behaviour.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623675320,623675320,test/functional/feature_presegwit_node_upgrade.py
jnewbery,2021-04-30 07:33:36,"No need to have a run_test() method that only calls one method. Just put the logic in `run_test()`.\n\n```suggestion\n    def run_test(self):\n        """"""A pre-segwit node with insufficiently validated blocks needs to redownload blocks""""""\n```",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623675668,623675668,test/functional/feature_presegwit_node_upgrade.py
jnewbery,2021-04-30 07:34:11,"Why not just start the node with `""-segwitheight=10""` first time, rather than starting and then restarting?",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623675932,623675932,test/functional/feature_presegwit_node_upgrade.py
dhruv,2021-04-30 13:51:59,"Ok, I'll leave the conditional in there then. Nice mental compiling! For others following along `if (0 < nCMPCTBLOCKVersion < 3)` ends up comparing a `bool` resulting from the first half of the expression to 3. Fortunately `clang++` issues a warning.\n```\nwarning: result of comparison of constant 3 with\n      expression of type 'bool' is always true\n      [-Wtautological-constant-out-of-ran",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623894000,623894000,src/net_processing.cpp
dhruv,2021-04-30 14:11:28,Done,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623908286,623908286,test/functional/p2p_segwit.py
dhruv,2021-04-30 14:11:34,Done,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623908361,623908361,test/functional/feature_presegwit_node_upgrade.py
dhruv,2021-04-30 14:16:28,"I am not sure I understand. It seems we call `main()` which then calls `test_framework.py::run_test()`. I am not sure how I could remove this `run_test()` and put the logic in `test_framework.py::run_test()`? \n\nAlso, it seems `BitcoinTestFramework` [requires](https://github.com/bitcoin/bitcoin/blob/480bf01c295527bd212964efe4df3bb886db5654/test/functional/test_framework/test_framework.py#L69) o",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623911977,623911977,test/functional/feature_presegwit_node_upgrade.py
dhruv,2021-04-30 14:16:38,Nice! Done.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623912110,623912110,test/functional/feature_presegwit_node_upgrade.py
jnewbery,2021-04-30 14:58:53,Have you tried applying this diff?,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623944315,623944315,test/functional/feature_presegwit_node_upgrade.py
dhruv,2021-04-30 15:48:29,You're right. My apologies for misreading the diff as just removing the `run_test()` function (which I did try manually). Updated. Thanks for your patience.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r623982580,623982580,test/functional/feature_presegwit_node_upgrade.py
mzumsande,2021-06-13 22:14:34,"With the `segwitheight=-1` option removed, I think that also `IsScriptWitnessEnabled()` in `validation.cpp` has become obsolete and could be removed as well (the comment there also seems to say that it's only kept along for `p2p_segwit.py`).",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r650584482,650584482,src/chainparams.cpp
mzumsande,2021-06-13 22:32:58,"There is another check for `consensusParams.SegwitHeight != std::numeric_limits<int>::max())` in `GenerateCoinbaseCommitment()`, also in validation.",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r650586262,650586262,src/chainparams.cpp
dhruv,2021-06-20 18:32:43,"Great catches. Thank you, @mzumsande! Both comments addressed.",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r654972447,654972447,src/chainparams.cpp
MarcoFalke,2021-07-02 12:43:08,why is the test for default_witness_commitment removed?,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r662984447,662984447,test/functional/p2p_segwit.py
jnewbery,2021-07-02 12:52:34,Segwit is a buried deployment. There are no miners calling `getblocktemplate` before the segwit activation is locked in.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r662990109,662990109,test/functional/p2p_segwit.py
MarcoFalke,2021-07-02 13:01:36,The commitment is produced regardless of whether segwit locked in or not.,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r662995852,662995852,test/functional/p2p_segwit.py
jnewbery,2021-07-05 09:07:28,"Oh, I see now that `default_witness_commitment` is not tested anywhere else. Perhaps it should be tested in mining_basic.py?",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r663766372,663766372,test/functional/p2p_segwit.py
dhruv,2021-07-08 05:18:11,"Thank you for the catch, @MarcoFalke ! Test is now moved into mining_basic.py",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r665876449,665876449,test/functional/p2p_segwit.py
jnewbery,2021-07-08 08:22:44,"This is ok for now, but it'd be nice to rework this test so that it doesn't require a wallet.\n\nWe could also update the test to verify that the witness commitment commits to the wtxids of the transactions in the block rather than the txids. Currently the block being tested contains only the coinbase transaction and one transaction that spends from a P2PKH output, so the txid is the same as wtx",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r665977709,665977709,test/functional/mining_basic.py
dhruv,2021-07-08 21:15:22,"I can do those in a follow-up PR. Can you tell me more about how I could remove the wallet dependency? My understanding is that to have `getblocktemplate` include a transaction that the witness root commits to, I need a valid transaction in the mempool, and to create that valid tx, I need a wallet. I feel like I am missing something about the test framework perhaps?",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r666523282,666523282,test/functional/mining_basic.py
theStack,2021-07-09 00:17:38,"@dhruv: Luckily we have a minimalistic wallet implementation for the functional test framework (first introduced by MarcoFalke last year, see #19800). Look for modules importing `MiniWallet` for example usage, see also issue #20078. Also, feel free to tag me in your follow-up PR, will be happy to review.",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r666592597,666592597,test/functional/mining_basic.py
MarcoFalke,2021-07-22 19:24:04,"Python will throw key-error, so you don't need the ""# Check that default_witness_commitment is present."" section.\n\nSee:\n\n```\n>>> {'b':1}['a']\nTraceback (most recent call last):\n  File ""<stdin>"", line 1, in <module>\nKeyError: 'a'\n```\n\nSuggestion:\n\n```py\n         assert_equal(tmpl['default_witness_commitment'], script.hex())",https://github.com/bitcoin/bitcoin/pull/21090#discussion_r675101211,675101211,test/functional/mining_basic.py
MarcoFalke,2021-07-22 19:24:38,Agree,https://github.com/bitcoin/bitcoin/pull/21090#discussion_r675101560,675101560,test/functional/mining_basic.py
