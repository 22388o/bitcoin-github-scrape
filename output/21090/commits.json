[
  {
    "sha": "eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmE1YjFjZDY0NjBjOThlNzVkMDQyMmJkMzk0ZTEyYWY3ZjExZTRj",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-02-05T20:10:39Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-07-08T05:12:04Z"
      },
      "message": "[test] remove or move tests using `-segwitheight=-1`",
      "tree": {
        "sha": "baec67cf02248363c9e905f065c8af020201d6f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/baec67cf02248363c9e905f065c8af020201d6f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 75,
      "deletions": 79
    },
    "files": [
      {
        "sha": "0428588da396e2c4bd76b441c90ec202ab45f63d",
        "filename": "test/functional/feature_presegwit_node_upgrade.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/feature_presegwit_node_upgrade.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/feature_presegwit_node_upgrade.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_presegwit_node_upgrade.py?ref=eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a pre-segwit node upgrading to segwit consensus\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    softfork_active,\n+)\n+\n+class SegwitUpgradeTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-segwitheight=10\"]]\n+\n+    def run_test(self):\n+        \"\"\"A pre-segwit node with insufficiently validated blocks needs to redownload blocks\"\"\"\n+\n+        self.log.info(\"Testing upgrade behaviour for pre-segwit node to segwit rules\")\n+        node = self.nodes[0]\n+\n+        # Node hasn't been used or connected yet\n+        assert_equal(node.getblockcount(), 0)\n+\n+        assert not softfork_active(node, \"segwit\")\n+\n+        # Generate 8 blocks without witness data\n+        node.generate(8)\n+        assert_equal(node.getblockcount(), 8)\n+\n+        self.stop_node(0)\n+        # Restarting the node (with segwit activation height set to 5) should result in a shutdown\n+        # because the blockchain consists of 3 insufficiently validated blocks per segwit consensus rules.\n+        node.assert_start_raises_init_error(\n+                extra_args=[\"-segwitheight=5\"],\n+                expected_msg=\": Witness data for blocks after height 5 requires validation. Please restart with -reindex..\\nPlease restart with -reindex or -reindex-chainstate to recover.\")\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(0, extra_args=[\"-reindex\", \"-segwitheight=5\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to block 4\n+        assert_equal(node.getblockcount(), 4)\n+\n+        # The upgraded node should now have segwit activated\n+        assert softfork_active(node, \"segwit\")\n+\n+\n+if __name__ == '__main__':\n+    SegwitUpgradeTest().main()"
      },
      {
        "sha": "01fc02f27e92288e1a34e640ba248e77bf3234dd",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "patch": "@@ -13,13 +13,15 @@\n \n from test_framework.blocktools import (\n     create_coinbase,\n+    get_witness_script,\n     NORMAL_GBT_REQUEST_PARAMS,\n     TIME_GENESIS_BLOCK,\n )\n from test_framework.messages import (\n     CBlock,\n     CBlockHeader,\n     BLOCK_HEADER_SIZE,\n+    ser_uint256,\n )\n from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n@@ -49,6 +51,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.supports_cli = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_chain(self):\n         self.log.info('Create some old blocks')\n         for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n@@ -89,7 +94,21 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n         assert_equal(mining_info['pooledtx'], 0)\n \n-        # Mine a block to leave initial block download\n+        self.log.info(\"getblocktemplate: Test default witness commitment\")\n+        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        tmpl = node.getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n+\n+        # Check that default_witness_commitment is present.\n+        assert 'default_witness_commitment' in tmpl\n+        witness_commitment = tmpl['default_witness_commitment']\n+\n+        # Check that default_witness_commitment is correct.\n+        witness_root = CBlock.get_merkle_root([ser_uint256(0),\n+                                               ser_uint256(txid)])\n+        script = get_witness_script(witness_root, 0)\n+        assert_equal(witness_commitment, script.hex())\n+\n+        # Mine a block to leave initial block download and clear the mempool\n         node.generatetoaddress(1, node.get_deterministic_priv_key().address)\n         tmpl = node.getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n         self.log.info(\"getblocktemplate: Test capability advertised\")"
      },
      {
        "sha": "5d23cd7447a1a0698c34a9a5623e061fd8177bac",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 78,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "patch": "@@ -9,11 +9,10 @@\n import struct\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n-    CBlock,\n     CBlockHeader,\n     CInv,\n     COutPoint,\n@@ -209,24 +208,17 @@ def request_block(self, blockhash, inv_type, timeout=60):\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n+        self.num_nodes = 2\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [\n             [\"-acceptnonstdtxn=1\", \"-segwitheight={}\".format(SEGWIT_HEIGHT), \"-whitelist=noban@127.0.0.1\"],\n             [\"-acceptnonstdtxn=0\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)],\n-            [\"-acceptnonstdtxn=1\", \"-segwitheight=-1\"],\n         ]\n         self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def setup_network(self):\n-        self.setup_nodes()\n-        self.connect_nodes(0, 1)\n-        self.connect_nodes(0, 2)\n-        self.sync_all()\n-\n     # Helper functions\n \n     def build_next_block(self, version=4):\n@@ -267,7 +259,6 @@ def run_test(self):\n         self.test_non_witness_transaction()\n         self.test_v0_outputs_arent_spendable()\n         self.test_block_relay()\n-        self.test_getblocktemplate_before_lockin()\n         self.test_unnecessary_witness_before_segwit_activation()\n         self.test_witness_tx_relay_before_segwit_activation()\n         self.test_standardness_v0()\n@@ -295,7 +286,6 @@ def run_test(self):\n         self.test_signature_version_1()\n         self.test_non_standard_witness_blinding()\n         self.test_non_standard_witness()\n-        self.test_upgrade_after_activation()\n         self.test_witness_sigops()\n         self.test_superfluous_witness()\n         self.test_wtxid_relay()\n@@ -485,11 +475,6 @@ def test_v0_outputs_arent_spendable(self):\n         witness, and so can't be spent before segwit activation (the point at which\n         blocks are permitted to contain witnesses).\"\"\"\n \n-        # node2 doesn't need to be connected for this test.\n-        # (If it's connected, node0 may propagate an invalid block to it over\n-        # compact blocks and the nodes would have inconsistent tips.)\n-        self.disconnect_nodes(0, 2)\n-\n         # Create two outputs, a p2wsh and p2sh-p2wsh\n         witness_program = CScript([OP_TRUE])\n         witness_hash = sha256(witness_program)\n@@ -550,37 +535,9 @@ def test_v0_outputs_arent_spendable(self):\n             # TODO: support multiple acceptable reject reasons.\n             test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False)\n \n-        self.connect_nodes(0, 2)\n-\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n \n-    @subtest  # type: ignore\n-    def test_getblocktemplate_before_lockin(self):\n-        txid = int(self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1), 16)\n-\n-        for node in [self.nodes[0], self.nodes[2]]:\n-            gbt_results = node.getblocktemplate({\"rules\": [\"segwit\"]})\n-            if node == self.nodes[2]:\n-                # If this is a non-segwit node, we should not get a witness\n-                # commitment.\n-                assert 'default_witness_commitment' not in gbt_results\n-            else:\n-                # For segwit-aware nodes, check the witness\n-                # commitment is correct.\n-                assert 'default_witness_commitment' in gbt_results\n-                witness_commitment = gbt_results['default_witness_commitment']\n-\n-                # Check that default_witness_commitment is present.\n-                witness_root = CBlock.get_merkle_root([ser_uint256(0),\n-                                                       ser_uint256(txid)])\n-                script = get_witness_script(witness_root, 0)\n-                assert_equal(witness_commitment, script.hex())\n-\n-        # Clear out the mempool\n-        self.nodes[0].generate(1)\n-        self.sync_blocks()\n-\n     @subtest  # type: ignore\n     def test_witness_tx_relay_before_segwit_activation(self):\n \n@@ -1952,39 +1909,6 @@ def test_non_standard_witness(self):\n \n         self.utxo.pop(0)\n \n-    @subtest  # type: ignore\n-    def test_upgrade_after_activation(self):\n-        \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n-\n-        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n-        for n in range(2):\n-            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n-            assert softfork_active(self.nodes[n], \"segwit\")\n-        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n-        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n-\n-        # Restarting node 2 should result in a shutdown because the blockchain consists of\n-        # insufficiently validated blocks per segwit consensus rules.\n-        self.stop_node(2)\n-        self.nodes[2].assert_start_raises_init_error(\n-            extra_args=[f\"-segwitheight={SEGWIT_HEIGHT}\"],\n-            expected_msg=f\": Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex..\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n-        )\n-\n-        # As directed, the user restarts the node with -reindex\n-        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n-\n-        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n-        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n-        self.connect_nodes(0, 2)\n-\n-        # We reconnect more than 100 blocks, give it plenty of time\n-        # sync_blocks() also verifies the best block hash is the same for all nodes\n-        self.sync_blocks(timeout=240)\n-\n-        # The upgraded node should now have segwit activated\n-        assert softfork_active(self.nodes[2], \"segwit\")\n-\n     @subtest  # type: ignore\n     def test_witness_sigops(self):\n         \"\"\"Test sigop counting is correct inside witnesses.\"\"\""
      },
      {
        "sha": "4fcd171bf0cc08fc51fa24543fe68f4ee382e810",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eba5b1cd6460c98e75d0422bd394e12af7f11e4c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "patch": "@@ -292,6 +292,7 @@\n     'feature_blocksdir.py',\n     'wallet_startup.py',\n     'feature_config_args.py',\n+    'feature_presegwit_node_upgrade.py',\n     'feature_settings.py',\n     'rpc_getdescriptorinfo.py',\n     'rpc_addresses_deprecation.py',"
      }
    ]
  },
  {
    "sha": "6f8b198b8256a6703a6f5e592dfa77fa024a7035",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjhiMTk4YjgyNTZhNjcwM2E2ZjVlNTkyZGZhNzdmYTAyNGE3MDM1",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-02-05T20:17:41Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-07-08T05:13:01Z"
      },
      "message": "[p2p] remove unused segwitheight=-1 option\n\nThis also lets us default to NODE_WITNESS in nLocalServices",
      "tree": {
        "sha": "e52bf52b7087a7e1b6467c39af485a0b7aa4ecda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52bf52b7087a7e1b6467c39af485a0b7aa4ecda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f8b198b8256a6703a6f5e592dfa77fa024a7035",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b198b8256a6703a6f5e592dfa77fa024a7035",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8b198b8256a6703a6f5e592dfa77fa024a7035",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b198b8256a6703a6f5e592dfa77fa024a7035/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eba5b1cd6460c98e75d0422bd394e12af7f11e4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eba5b1cd6460c98e75d0422bd394e12af7f11e4c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 4,
      "deletions": 13
    },
    "files": [
      {
        "sha": "815bc3511369376eb8030a3e4e738030cbc9d5a3",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6f8b198b8256a6703a6f5e592dfa77fa024a7035",
        "patch": "@@ -490,11 +490,8 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n         int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n-        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n-            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n-        } else if (height == -1) {\n-            LogPrintf(\"Segwit disabled for testing\\n\");\n-            height = std::numeric_limits<int>::max();\n+        if (height < 0 || height >= std::numeric_limits<int>::max()) {\n+            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range.\", height));\n         }\n         consensus.SegwitHeight = static_cast<int>(height);\n     }"
      },
      {
        "sha": "79c1bc25bc175bacced7717e9f63d5b1d91a223d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=6f8b198b8256a6703a6f5e592dfa77fa024a7035",
        "patch": "@@ -20,7 +20,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, signet, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "ee0953ce1ff05ad68001a8e9178d856942660591",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8b198b8256a6703a6f5e592dfa77fa024a7035/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f8b198b8256a6703a6f5e592dfa77fa024a7035",
        "patch": "@@ -716,7 +716,7 @@ namespace { // Variables internal to initialization process only\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n-ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n+ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED | NODE_WITNESS);\n int64_t peer_connect_timeout;\n std::set<BlockFilterType> g_enabled_filter_types;\n \n@@ -1588,12 +1588,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n \n-    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n-        // Advertise witness capabilities.\n-        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-    }\n-\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(gArgs.GetDataDirNet())) {"
      }
    ]
  },
  {
    "sha": "ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzgyYjk5ZGI3N2VjODQzYWY4MmRjZGYwNDBkZmRiYzk4YzhmZjI2",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-02-05T20:23:56Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-07-08T05:13:01Z"
      },
      "message": "[p2p] remove redundant NODE_WITNESS checks\n\nnLocalServices defaults to NODE_WITNESS and these checks are obsolete",
      "tree": {
        "sha": "c0f0c17da5ae44201d18d9b74a6614a43238f9cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0f0c17da5ae44201d18d9b74a6614a43238f9cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac82b99db77ec843af82dcdf040dfdbc98c8ff26/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f8b198b8256a6703a6f5e592dfa77fa024a7035",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b198b8256a6703a6f5e592dfa77fa024a7035",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8b198b8256a6703a6f5e592dfa77fa024a7035"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c638abd43ba671619a7f9be3463cea38aadab2c6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac82b99db77ec843af82dcdf040dfdbc98c8ff26/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac82b99db77ec843af82dcdf040dfdbc98c8ff26/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
        "patch": "@@ -861,7 +861,7 @@ void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n         }\n         m_connman.ForNode(nodeid, [this](CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             AssertLockHeld(::cs_main);\n-            uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n+            uint64_t nCMPCTBLOCKVersion = 2;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n@@ -1955,7 +1955,7 @@ void PeerManagerImpl::ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;\n     }\n     return nFetchFlags;\n@@ -2667,8 +2667,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // they may wish to request compact blocks from us\n             bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = 2;\n-            if (pfrom.GetLocalServices() & NODE_WITNESS)\n-                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n             nCMPCTBLOCKVersion = 1;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n@@ -2686,7 +2685,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n+        if (nCMPCTBLOCKVersion == 1 || nCMPCTBLOCKVersion == 2) {\n             LOCK(cs_main);\n             // fProvidesHeaderAndIDs is used to \"lock in\" version of compact blocks we send (fWantsCmpctWitness)\n             if (!State(pfrom.GetId())->fProvidesHeaderAndIDs) {\n@@ -2700,10 +2699,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 pfrom.m_bip152_highbandwidth_from = fAnnounceUsingCMPCTBLOCK;\n             }\n             if (!State(pfrom.GetId())->fSupportsDesiredCmpctVersion) {\n-                if (pfrom.GetLocalServices() & NODE_WITNESS)\n-                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n-                else\n-                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n+                State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n             }\n         }\n         return;"
      }
    ]
  },
  {
    "sha": "189128c220190a588500b8e74ee7ae47671b9558",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODkxMjhjMjIwMTkwYTU4ODUwMGI4ZTc0ZWU3YWU0NzY3MWI5NTU4",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-06-20T18:15:57Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-07-08T05:13:01Z"
      },
      "message": "[validation] Set witness script flag with p2sh for blocks",
      "tree": {
        "sha": "31fd86f60b4f7580b2cd55ccdd765281ed1c67bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31fd86f60b4f7580b2cd55ccdd765281ed1c67bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/189128c220190a588500b8e74ee7ae47671b9558",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189128c220190a588500b8e74ee7ae47671b9558",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/189128c220190a588500b8e74ee7ae47671b9558",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189128c220190a588500b8e74ee7ae47671b9558/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac82b99db77ec843af82dcdf040dfdbc98c8ff26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac82b99db77ec843af82dcdf040dfdbc98c8ff26"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 2,
      "deletions": 7
    },
    "files": [
      {
        "sha": "863483bcfb600272fe2bf7063c8a51571f689933",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189128c220190a588500b8e74ee7ae47671b9558/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189128c220190a588500b8e74ee7ae47671b9558/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=189128c220190a588500b8e74ee7ae47671b9558",
        "patch": "@@ -1646,13 +1646,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         pindex->phashBlock == nullptr || // this is a new candidate block, eg from TestBlockValidity()\n         *pindex->phashBlock != consensusparams.BIP16Exception) // this block isn't the historical exception\n     {\n-        flags |= SCRIPT_VERIFY_P2SH;\n-    }\n-\n-    // Enforce WITNESS rules whenever P2SH is in effect (and the segwit\n-    // deployment is defined).\n-    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n-        flags |= SCRIPT_VERIFY_WITNESS;\n+        // Enforce WITNESS rules whenever P2SH is in effect\n+        flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;\n     }\n \n     // Enforce the DERSIG (BIP66) rule"
      }
    ]
  },
  {
    "sha": "a806647d260132a00cd633160040625c7dd17803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODA2NjQ3ZDI2MDEzMmEwMGNkNjMzMTYwMDQwNjI1YzdkZDE3ODAz",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-06-20T18:26:35Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-07-08T05:13:01Z"
      },
      "message": "[validation] Always include merkle root in coinbase commitment",
      "tree": {
        "sha": "87d9e1a91dabe4180f1504e933c9d6898338bc13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87d9e1a91dabe4180f1504e933c9d6898338bc13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a806647d260132a00cd633160040625c7dd17803",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a806647d260132a00cd633160040625c7dd17803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a806647d260132a00cd633160040625c7dd17803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a806647d260132a00cd633160040625c7dd17803/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "189128c220190a588500b8e74ee7ae47671b9558",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189128c220190a588500b8e74ee7ae47671b9558",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/189128c220190a588500b8e74ee7ae47671b9558"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 17,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8cb4f64dd7e17644855722319020ca0b532152ec",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a806647d260132a00cd633160040625c7dd17803/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a806647d260132a00cd633160040625c7dd17803/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a806647d260132a00cd633160040625c7dd17803",
        "patch": "@@ -3094,25 +3094,23 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n-        if (commitpos == NO_WITNESS_COMMITMENT) {\n-            uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n-            CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n-            CTxOut out;\n-            out.nValue = 0;\n-            out.scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n-            out.scriptPubKey[0] = OP_RETURN;\n-            out.scriptPubKey[1] = 0x24;\n-            out.scriptPubKey[2] = 0xaa;\n-            out.scriptPubKey[3] = 0x21;\n-            out.scriptPubKey[4] = 0xa9;\n-            out.scriptPubKey[5] = 0xed;\n-            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n-            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n-            CMutableTransaction tx(*block.vtx[0]);\n-            tx.vout.push_back(out);\n-            block.vtx[0] = MakeTransactionRef(std::move(tx));\n-        }\n+    if (commitpos == NO_WITNESS_COMMITMENT) {\n+        uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n+        CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n+        CTxOut out;\n+        out.nValue = 0;\n+        out.scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n+        out.scriptPubKey[0] = OP_RETURN;\n+        out.scriptPubKey[1] = 0x24;\n+        out.scriptPubKey[2] = 0xaa;\n+        out.scriptPubKey[3] = 0x21;\n+        out.scriptPubKey[4] = 0xa9;\n+        out.scriptPubKey[5] = 0xed;\n+        memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);\n+        commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());\n+        CMutableTransaction tx(*block.vtx[0]);\n+        tx.vout.push_back(out);\n+        block.vtx[0] = MakeTransactionRef(std::move(tx));\n     }\n     UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);\n     return commitment;"
      }
    ]
  }
]