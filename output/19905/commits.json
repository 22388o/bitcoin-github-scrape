[
  {
    "sha": "fa62304c9760f0de9838e56150008816e7a9bacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYyMzA0Yzk3NjBmMGRlOTgzOGU1NjE1MDAwODgxNmU3YTliYWNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-07T05:58:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-03T13:01:40Z"
      },
      "message": "Remove dead CheckForkWarningConditionsOnNewFork",
      "tree": {
        "sha": "5ee13155106065bc2fa672194a7422db93ce08d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ee13155106065bc2fa672194a7422db93ce08d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa62304c9760f0de9838e56150008816e7a9bacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiBFwv+OlMr+A9PX4jbPnH0eiIuATYK5tIWgQmHiEjTxwjvozoreH9PoWQEAg0Q\npUhxFGNXQf9K1iiQiIO7j5qGw9wWJEBOCj1QpyJQrgbsAXnD0BHI7X2cy7bsfngh\niy/DK5okcMThJMwBUucgnRJTCcjfbcaxcTYwo8q2wV1RkRizQoRMjcH/j3xuK6VU\n3XWHgHQQt1GWwVl/Kc4H0fXiyQDddefvp9FX5qtLFqyfHX+KdPepjQtrepoMvSNq\nbM+Idqggn/2mi8+WOVdqDXaP7DyGimPu84IGk8ALeHOgbsVHCF+zLNK+dP5/dD/M\nelg43mUEoG3ldgETsHgWN/P5YNg2cX/OopXb3V9BqnwuVIWTGR+hX8hKSF6VFUnu\nNxtISpveRsyW2pbrmtxzYexdKmF37e8XQ6HUBhlUi9Kyu1D/eiC+9cHPvBEidoHb\nrwePhvl39qFN0nreQKijk2tu0Xqi+xwzgsecJ5NuxffTUUhE/XoVRcF/owA1IM3T\n3V0bdvCc\n=dZAh\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ee13155106065bc2fa672194a7422db93ce08d1\nparent 218fe60d91a9190aa0ee561479044df368214766\nauthor MarcoFalke <falke.marco@gmail.com> 1599458322 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1604408500 +0100\n\nRemove dead CheckForkWarningConditionsOnNewFork\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa62304c9760f0de9838e56150008816e7a9bacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa62304c9760f0de9838e56150008816e7a9bacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa62304c9760f0de9838e56150008816e7a9bacb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "218fe60d91a9190aa0ee561479044df368214766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/218fe60d91a9190aa0ee561479044df368214766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/218fe60d91a9190aa0ee561479044df368214766"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 5,
      "deletions": 84
    },
    "files": [
      {
        "sha": "bfcca8e13d2620a143ab2cd2adb4b36fcae0c816",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 65,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa62304c9760f0de9838e56150008816e7a9bacb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa62304c9760f0de9838e56150008816e7a9bacb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa62304c9760f0de9838e56150008816e7a9bacb",
        "patch": "@@ -1312,8 +1312,6 @@ bool CChainState::IsInitialBlockDownload() const\n     return false;\n }\n \n-static CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n-\n static void AlertNotify(const std::string& strMessage)\n {\n     uiInterface.NotifyAlertChanged();\n@@ -1342,72 +1340,17 @@ static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     if (::ChainstateActive().IsInitialBlockDownload())\n         return;\n \n-    // If our best fork is no longer within 72 blocks (+/- 12 hours if no one mines it)\n-    // of our head, drop it\n-    if (pindexBestForkTip && ::ChainActive().Height() - pindexBestForkTip->nHeight >= 72)\n-        pindexBestForkTip = nullptr;\n-\n-    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > ::ChainActive().Tip()->nChainWork + (GetBlockProof(*::ChainActive().Tip()) * 6)))\n+    if (pindexBestInvalid && pindexBestInvalid->nChainWork > ::ChainActive().Tip()->nChainWork + (GetBlockProof(*::ChainActive().Tip()) * 6))\n     {\n-        if (!GetfLargeWorkForkFound() && pindexBestForkBase)\n-        {\n-            std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n-                pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n-            AlertNotify(warning);\n-        }\n-        if (pindexBestForkTip && pindexBestForkBase)\n-        {\n-            LogPrintf(\"%s: Warning: Large valid fork found\\n  forking the chain at height %d (%s)\\n  lasting to height %d (%s).\\nChain state database corruption likely.\\n\", __func__,\n-                   pindexBestForkBase->nHeight, pindexBestForkBase->phashBlock->ToString(),\n-                   pindexBestForkTip->nHeight, pindexBestForkTip->phashBlock->ToString());\n-            SetfLargeWorkForkFound(true);\n-        }\n-        else\n-        {\n-            LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n-            SetfLargeWorkInvalidChainFound(true);\n-        }\n+        LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n+        SetfLargeWorkInvalidChainFound(true);\n     }\n     else\n     {\n-        SetfLargeWorkForkFound(false);\n         SetfLargeWorkInvalidChainFound(false);\n     }\n }\n \n-static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n-{\n-    AssertLockHeld(cs_main);\n-    // If we are on a fork that is sufficiently large, set a warning flag\n-    CBlockIndex* pfork = pindexNewForkTip;\n-    CBlockIndex* plonger = ::ChainActive().Tip();\n-    while (pfork && pfork != plonger)\n-    {\n-        while (plonger && plonger->nHeight > pfork->nHeight)\n-            plonger = plonger->pprev;\n-        if (pfork == plonger)\n-            break;\n-        pfork = pfork->pprev;\n-    }\n-\n-    // We define a condition where we should warn the user about as a fork of at least 7 blocks\n-    // with a tip within 72 blocks (+/- 12 hours if no one mines it) of ours\n-    // We use 7 blocks rather arbitrarily as it represents just under 10% of sustained network\n-    // hash rate operating on the fork.\n-    // or a chain that is entirely longer than ours and invalid (note that this should be detected by both)\n-    // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n-    // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n-    if (pfork && (!pindexBestForkTip || pindexNewForkTip->nHeight > pindexBestForkTip->nHeight) &&\n-            pindexNewForkTip->nChainWork - pfork->nChainWork > (GetBlockProof(*pfork) * 7) &&\n-            ::ChainActive().Height() - pindexNewForkTip->nHeight < 72)\n-    {\n-        pindexBestForkTip = pindexNewForkTip;\n-        pindexBestForkBase = pfork;\n-    }\n-\n-    CheckForkWarningConditions();\n-}\n-\n // Called both upon regular invalid block discovery *and* InvalidateBlock\n void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n@@ -2821,11 +2764,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     }\n     m_mempool.check(&CoinsTip());\n \n-    // Callbacks/notifications for a new best chain.\n-    if (fInvalidFound)\n-        CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n-    else\n-        CheckForkWarningConditions();\n+    CheckForkWarningConditions();\n \n     return true;\n }"
      },
      {
        "sha": "1dec663a73969dc4ea66910d6f34216ca1f727e7",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa62304c9760f0de9838e56150008816e7a9bacb/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa62304c9760f0de9838e56150008816e7a9bacb/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=fa62304c9760f0de9838e56150008816e7a9bacb",
        "patch": "@@ -14,7 +14,6 @@\n \n static Mutex g_warnings_mutex;\n static bilingual_str g_misc_warnings GUARDED_BY(g_warnings_mutex);\n-static bool fLargeWorkForkFound GUARDED_BY(g_warnings_mutex) = false;\n static bool fLargeWorkInvalidChainFound GUARDED_BY(g_warnings_mutex) = false;\n \n void SetMiscWarning(const bilingual_str& warning)\n@@ -23,18 +22,6 @@ void SetMiscWarning(const bilingual_str& warning)\n     g_misc_warnings = warning;\n }\n \n-void SetfLargeWorkForkFound(bool flag)\n-{\n-    LOCK(g_warnings_mutex);\n-    fLargeWorkForkFound = flag;\n-}\n-\n-bool GetfLargeWorkForkFound()\n-{\n-    LOCK(g_warnings_mutex);\n-    return fLargeWorkForkFound;\n-}\n-\n void SetfLargeWorkInvalidChainFound(bool flag)\n {\n     LOCK(g_warnings_mutex);\n@@ -60,10 +47,7 @@ bilingual_str GetWarnings(bool verbose)\n         warnings_verbose.emplace_back(warnings_concise);\n     }\n \n-    if (fLargeWorkForkFound) {\n-        warnings_concise = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n-        warnings_verbose.emplace_back(warnings_concise);\n-    } else if (fLargeWorkInvalidChainFound) {\n+    if (fLargeWorkInvalidChainFound) {\n         warnings_concise = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n         warnings_verbose.emplace_back(warnings_concise);\n     }"
      },
      {
        "sha": "e87b64a86ddb7b502d5f4c1ab9c059c5ed90fcd9",
        "filename": "src/warnings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa62304c9760f0de9838e56150008816e7a9bacb/src/warnings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa62304c9760f0de9838e56150008816e7a9bacb/src/warnings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.h?ref=fa62304c9760f0de9838e56150008816e7a9bacb",
        "patch": "@@ -11,8 +11,6 @@\n struct bilingual_str;\n \n void SetMiscWarning(const bilingual_str& warning);\n-void SetfLargeWorkForkFound(bool flag);\n-bool GetfLargeWorkForkFound();\n void SetfLargeWorkInvalidChainFound(bool flag);\n /** Format a string that describes several potential problems detected by the core.\n  * @param[in] verbose bool"
      }
    ]
  },
  {
    "sha": "fa7eed5be704ccdbdce5c9aedb953dd9c8b30446",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdlZWQ1YmU3MDRjY2RiZGNlNWM5YWVkYjk1M2RkOWM4YjMwNDQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-10-28T10:08:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-03T13:02:02Z"
      },
      "message": "doc: Clarify that vpindexToConnect is in reverse order\n\nAlso, style-fixups of touched code",
      "tree": {
        "sha": "f01bc50a372ac39d470894e55eccb8ec54c8833f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f01bc50a372ac39d470894e55eccb8ec54c8833f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjv4Av/dbidqPn8+Sh6EFXw05FS8Gi8MpOqbk+j7jZdrhVZb7SCsklJCcGTk1QX\nQ4r+mixQwKu9+C5g158OKQmBcXxjJTtdW8pLHaokykunuZ3BhvxFdee3IQYPFRbc\niE9zHvWF4/41M2rDzAtRLw+DBna7EXL2hNjk+yIKAtVFlKZ+BJaZCbdvPGSZLlMa\nmZnv72+WM+vW8dikC0N3rzL+0gCh+f2QQ4zauMW8znnrccVCPUUDSDF7WsNjHXsV\nleB7IlylMXP1o9OmjMkFRO0KV1h21Iv3QlMnCQqHjpd9MjfIQJs8/KUHuAjuKXFy\nXQ7VG/dk2WW3Ajf8Ysqd8j7rRDnVZiqQmsaUkQsaMoFz5QuvQvYMwsMuH2nUeE+M\nWjeulLg9MLaxkm7dsU2p0F+svysEn052prelZd4CwoaEWklHulm1lp7bqlgEk7sJ\nouyvuOxB29vLD05xYiPnRfbXCNJm64NqvLBXX6eMMAMdkulys6xNcMyv8wlN6C0D\nwCwCuzQt\n=2g3F\n-----END PGP SIGNATURE-----",
        "payload": "tree f01bc50a372ac39d470894e55eccb8ec54c8833f\nparent fa62304c9760f0de9838e56150008816e7a9bacb\nauthor MarcoFalke <falke.marco@gmail.com> 1603879681 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1604408522 +0100\n\ndoc: Clarify that vpindexToConnect is in reverse order\n\nAlso, style-fixups of touched code\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa62304c9760f0de9838e56150008816e7a9bacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa62304c9760f0de9838e56150008816e7a9bacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa62304c9760f0de9838e56150008816e7a9bacb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9ced7b708212306f14c3146d1f2d87b7798fe0bc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7eed5be704ccdbdce5c9aedb953dd9c8b30446/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa7eed5be704ccdbdce5c9aedb953dd9c8b30446",
        "patch": "@@ -1337,16 +1337,14 @@ static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before finishing our initial sync)\n-    if (::ChainstateActive().IsInitialBlockDownload())\n+    if (::ChainstateActive().IsInitialBlockDownload()) {\n         return;\n+    }\n \n-    if (pindexBestInvalid && pindexBestInvalid->nChainWork > ::ChainActive().Tip()->nChainWork + (GetBlockProof(*::ChainActive().Tip()) * 6))\n-    {\n+    if (pindexBestInvalid && pindexBestInvalid->nChainWork > ::ChainActive().Tip()->nChainWork + (GetBlockProof(*::ChainActive().Tip()) * 6)) {\n         LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n         SetfLargeWorkInvalidChainFound(true);\n-    }\n-    else\n-    {\n+    } else {\n         SetfLargeWorkInvalidChainFound(false);\n     }\n }\n@@ -2689,8 +2687,8 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n \n-    const CBlockIndex *pindexOldTip = m_chain.Tip();\n-    const CBlockIndex *pindexFork = m_chain.FindFork(pindexMostWork);\n+    const CBlockIndex* pindexOldTip = m_chain.Tip();\n+    const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n     bool fBlocksDisconnected = false;\n@@ -2710,7 +2708,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         fBlocksDisconnected = true;\n     }\n \n-    // Build list of new blocks to connect.\n+    // Build list of new blocks to connect (in descending height order).\n     std::vector<CBlockIndex*> vpindexToConnect;\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n@@ -2720,15 +2718,15 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n         vpindexToConnect.clear();\n         vpindexToConnect.reserve(nTargetHeight - nHeight);\n-        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        CBlockIndex* pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n         while (pindexIter && pindexIter->nHeight != nHeight) {\n             vpindexToConnect.push_back(pindexIter);\n             pindexIter = pindexIter->pprev;\n         }\n         nHeight = nTargetHeight;\n \n         // Connect new blocks.\n-        for (CBlockIndex *pindexConnect : reverse_iterate(vpindexToConnect)) {\n+        for (CBlockIndex* pindexConnect : reverse_iterate(vpindexToConnect)) {\n             if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : std::shared_ptr<const CBlock>(), connectTrace, disconnectpool)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule."
      }
    ]
  }
]