[
  {
    "sha": "95e4772be1c486ae14b63b05483403249119c667",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWU0NzcyYmUxYzQ4NmFlMTRiNjNiMDU0ODM0MDMyNDkxMTljNjY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-04T22:25:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:25:41Z"
      },
      "message": "net: Break disconnecting out of Ban()\n\nThese are separate events which need to be carried out by separate subsystems.\n\nThis also cleans up some whitespace and tabs in qt to avoid getting flagged by\nthe linter.\n\nCurrent behavior is preserved.",
      "tree": {
        "sha": "b42a711fec08993e95151657839b9b0d0c745621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b42a711fec08993e95151657839b9b0d0c745621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e4772be1c486ae14b63b05483403249119c667",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e4772be1c486ae14b63b05483403249119c667",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95e4772be1c486ae14b63b05483403249119c667",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e4772be1c486ae14b63b05483403249119c667/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a8b7b4b33c9d78574627fc606267e2d8955cd1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a8b7b4b33c9d78574627fc606267e2d8955cd1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8b7b4b33c9d78574627fc606267e2d8955cd1c"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 55,
      "deletions": 24
    },
    "files": [
      {
        "sha": "4857fcefc08aa66d44c05978e44f76b8c312da6e",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -138,6 +138,13 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n+    bool disconnect(const CNetAddr& net_addr) override\n+    {\n+        if (g_connman) {\n+            return g_connman->DisconnectNode(net_addr);\n+        }\n+        return false;\n+    }\n     bool disconnect(NodeId id) override\n     {\n         if (g_connman) {"
      },
      {
        "sha": "d2836b11bb304182874cb7bbd0852fe9c4509ebb",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -110,7 +110,10 @@ class Node\n     //! Unban node.\n     virtual bool unban(const CSubNet& ip) = 0;\n \n-    //! Disconnect node.\n+    //! Disconnect node by address.\n+    virtual bool disconnect(const CNetAddr& net_addr) = 0;\n+\n+    //! Disconnect node by id.\n     virtual bool disconnect(NodeId id) = 0;\n \n     //! Get total bytes recv."
      },
      {
        "sha": "cc9460d56c210176b50f1bc80fca9fd1f49d3c11",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -561,13 +561,6 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     }\n     if(clientInterface)\n         clientInterface->BannedListChanged();\n-    {\n-        LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes) {\n-            if (subNet.Match(static_cast<CNetAddr>(pnode->addr)))\n-                pnode->fDisconnect = true;\n-        }\n-    }\n     if(banReason == BanReasonManuallyAdded)\n         DumpBanlist(); //store banlist to disk immediately if user requested ban\n }\n@@ -2560,6 +2553,25 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n     }\n     return false;\n }\n+\n+bool CConnman::DisconnectNode(const CSubNet& subnet)\n+{\n+    bool disconnected = false;\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (subnet.Match(static_cast<CNetAddr>(pnode->addr))) {\n+            pnode->fDisconnect = true;\n+            disconnected = true;\n+        }\n+    }\n+    return disconnected;\n+}\n+\n+bool CConnman::DisconnectNode(const CNetAddr& addr)\n+{\n+    return DisconnectNode(CSubNet(addr));\n+}\n+\n bool CConnman::DisconnectNode(NodeId id)\n {\n     LOCK(cs_vNodes);"
      },
      {
        "sha": "a81a2eabfd502afb710013024c28d0ec11607cd2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -273,6 +273,8 @@ class CConnman\n     size_t GetNodeCount(NumConnections num);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n     bool DisconnectNode(const std::string& node);\n+    bool DisconnectNode(const CSubNet& subnet);\n+    bool DisconnectNode(const CNetAddr& addr);\n     bool DisconnectNode(NodeId id);\n \n     ServiceFlags GetLocalServices() const;"
      },
      {
        "sha": "e93c5ef1c3b4b9389341e68e8968dd9539160d2e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -2909,14 +2909,14 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n         else if (pnode->m_manual_connection)\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n-        else {\n-            pnode->fDisconnect = true;\n-            if (pnode->addr.IsLocal())\n-                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n-            else\n-            {\n-                connman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n-            }\n+        else if (pnode->addr.IsLocal()) {\n+            // Disconnect but don't ban _this_ local node\n+            LogPrintf(\"Warning: disconnecting but not banning local peer %s!\\n\", pnode->addr.ToString());\n+            connman->DisconnectNode(pnode->GetId());\n+        } else {\n+            // Disconnect and ban all nodes sharing the address\n+            connman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            connman->DisconnectNode(pnode->addr);\n         }\n         return true;\n     }"
      },
      {
        "sha": "dd16853203635be066083e0e2d6b7187f61f962e",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -1215,16 +1215,17 @@ void RPCConsole::banSelectedNode(int bantime)\n         // Get currently selected peer address\n         NodeId id = nodes.at(i).data().toLongLong();\n \n-\t// Get currently selected peer address\n-\tint detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(id);\n-\tif(detailNodeRow < 0)\n+    // Get currently selected peer address\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(id);\n+    if(detailNodeRow < 0)\n \t    return;\n \n-\t// Find possible nodes, ban it and clear the selected node\n-\tconst CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n-\tif(stats) {\n+    // Find possible nodes, ban it and clear the selected node\n+    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+    if(stats) {\n             m_node.ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n-\t}\n+            m_node.disconnect(stats->nodeStats.addr);\n+        }\n     }\n     clearSelectedNode();\n     clientModel->getBanTableModel()->refresh();"
      },
      {
        "sha": "5d0cbe4123708f9184b6752d7c55fc4a7719cb45",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e4772be1c486ae14b63b05483403249119c667/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e4772be1c486ae14b63b05483403249119c667/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=95e4772be1c486ae14b63b05483403249119c667",
        "patch": "@@ -543,7 +543,13 @@ UniValue setban(const JSONRPCRequest& request)\n         if (request.params[3].isTrue())\n             absolute = true;\n \n-        isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+        if (isSubnet) {\n+            g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            g_connman->DisconnectNode(subNet);\n+        } else {\n+            g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            g_connman->DisconnectNode(netAddr);\n+        }\n     }\n     else if(strCommand == \"remove\")\n     {"
      }
    ]
  },
  {
    "sha": "fc95465852dca1b084ad1dd09435e3444e476189",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzk1NDY1ODUyZGNhMWIwODRhZDFkZDA5NDM1ZTM0NDRlNDc2MTg5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T15:52:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:30:29Z"
      },
      "message": "tests: remove member connman/peerLogic in TestingSetup",
      "tree": {
        "sha": "43308653846e393dac5cc54ee9f410bbd18050ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43308653846e393dac5cc54ee9f410bbd18050ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc95465852dca1b084ad1dd09435e3444e476189",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc95465852dca1b084ad1dd09435e3444e476189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc95465852dca1b084ad1dd09435e3444e476189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc95465852dca1b084ad1dd09435e3444e476189/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e4772be1c486ae14b63b05483403249119c667",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e4772be1c486ae14b63b05483403249119c667",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e4772be1c486ae14b63b05483403249119c667"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 34,
      "deletions": 29
    },
    "files": [
      {
        "sha": "506c5d0a8af31a43f56c5dd897bfc46416d2dbbe",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 5,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc95465852dca1b084ad1dd09435e3444e476189/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc95465852dca1b084ad1dd09435e3444e476189/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=fc95465852dca1b084ad1dd09435e3444e476189",
        "patch": "@@ -20,6 +20,23 @@\n \n #include <boost/test/unit_test.hpp>\n \n+struct CConnmanTest : public CConnman {\n+    using CConnman::CConnman;\n+    void AddNode(CNode& node)\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(&node);\n+    }\n+    void ClearNodes()\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* node : vNodes) {\n+            delete node;\n+        }\n+        vNodes.clear();\n+    }\n+};\n+\n // Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n@@ -54,6 +71,9 @@ BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n // work.\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n+    auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+\n     std::atomic<bool> interruptDummy(false);\n \n     // Mock an outbound peer\n@@ -92,7 +112,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n-void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n@@ -103,11 +123,14 @@ void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &pe\n     node.nVersion = 1;\n     node.fSuccessfullyConnected = true;\n \n-    CConnmanTest::AddNode(node);\n+    connman->AddNode(node);\n }\n \n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n+    auto connman = std::unique_ptr<CConnmanTest>(new CConnmanTest(0x1337, 0x1337));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int nMaxOutbound = 8;\n     CConnman::Options options;\n@@ -120,7 +143,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n     // Mock some outbound peers\n     for (int i=0; i<nMaxOutbound; ++i) {\n-        AddRandomOutboundPeer(vNodes, *peerLogic);\n+        AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n     }\n \n     peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n@@ -145,7 +168,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // If we add one more peer, something should get marked for eviction\n     // on the next check (since we're mocking the time to be in the future, the\n     // required time connected check should be satisfied).\n-    AddRandomOutboundPeer(vNodes, *peerLogic);\n+    AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n \n     peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n     for (int i=0; i<nMaxOutbound; ++i) {\n@@ -172,11 +195,13 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n         peerLogic->FinalizeNode(node->GetId(), dummy);\n     }\n \n-    CConnmanTest::ClearNodes();\n+    connman->ClearNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n+    auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n     connman->ClearBanned();\n@@ -223,6 +248,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n+    auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n     connman->ClearBanned();\n@@ -260,6 +287,8 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n+    auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n     connman->ClearBanned();"
      },
      {
        "sha": "b4aed862382b27fe7be9e99352aa078110eaa524",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc95465852dca1b084ad1dd09435e3444e476189/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc95465852dca1b084ad1dd09435e3444e476189/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fc95465852dca1b084ad1dd09435e3444e476189",
        "patch": "@@ -17,21 +17,6 @@\n #include <rpc/register.h>\n #include <script/sigcache.h>\n \n-void CConnmanTest::AddNode(CNode& node)\n-{\n-    LOCK(g_connman->cs_vNodes);\n-    g_connman->vNodes.push_back(&node);\n-}\n-\n-void CConnmanTest::ClearNodes()\n-{\n-    LOCK(g_connman->cs_vNodes);\n-    for (CNode* node : g_connman->vNodes) {\n-        delete node;\n-    }\n-    g_connman->vNodes.clear();\n-}\n-\n uint256 insecure_rand_seed = GetRandHash();\n FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n \n@@ -92,8 +77,6 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n-        connman = g_connman.get();\n-        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n }\n \n TestingSetup::~TestingSetup()\n@@ -103,7 +86,6 @@ TestingSetup::~TestingSetup()\n         GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n         g_connman.reset();\n-        peerLogic.reset();\n         UnloadBlockIndex();\n         pcoinsTip.reset();\n         pcoinsdbview.reset();"
      },
      {
        "sha": "edbbb67602d1177d68e83f3a6c75f144e5dc0ff0",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc95465852dca1b084ad1dd09435e3444e476189/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc95465852dca1b084ad1dd09435e3444e476189/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=fc95465852dca1b084ad1dd09435e3444e476189",
        "patch": "@@ -52,18 +52,12 @@ struct BasicTestingSetup {\n  */\n class CConnman;\n class CNode;\n-struct CConnmanTest {\n-    static void AddNode(CNode& node);\n-    static void ClearNodes();\n-};\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n-    CConnman* connman;\n     CScheduler scheduler;\n-    std::unique_ptr<PeerLogicValidation> peerLogic;\n \n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      }
    ]
  },
  {
    "sha": "1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2Q2ZDc5ZmE0MDhkZWQ3Y2M3NjMwZWM1ZmMyODVkOGJlZmI1ODFl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T16:46:54Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:30:29Z"
      },
      "message": "net: split up addresses/ban dumps in preparation for moving them",
      "tree": {
        "sha": "20da02a1f535f9793bc3dc3594e8a71a19eedac4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20da02a1f535f9793bc3dc3594e8a71a19eedac4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd6d79fa408ded7cc7630ec5fc285d8befb581e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc95465852dca1b084ad1dd09435e3444e476189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc95465852dca1b084ad1dd09435e3444e476189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc95465852dca1b084ad1dd09435e3444e476189"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "84111bf05a905204ba1eb659488e01671200264d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cd6d79fa408ded7cc7630ec5fc285d8befb581e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cd6d79fa408ded7cc7630ec5fc285d8befb581e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
        "patch": "@@ -36,8 +36,11 @@\n \n #include <math.h>\n \n-// Dump addresses to peers.dat and banlist.dat every 15 minutes (900s)\n-#define DUMP_ADDRESSES_INTERVAL 900\n+// Dump addresses to peers.dat every 15 minutes (900s)\n+static constexpr int DUMP_PEERS_INTERVAL = 60 * 15;\n+\n+// Dump addresses to banlist.dat every 15 minutes (900s)\n+static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n \n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n@@ -1670,12 +1673,6 @@ void CConnman::DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n-void CConnman::DumpData()\n-{\n-    DumpAddresses();\n-    DumpBanlist();\n-}\n-\n void CConnman::ProcessOneShot()\n {\n     std::string strDest;\n@@ -2367,7 +2364,8 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(std::bind(&CConnman::DumpData, this), DUMP_ADDRESSES_INTERVAL * 1000);\n+    scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n+    scheduler.scheduleEvery(std::bind(&CConnman::DumpBanlist, this), DUMP_BANS_INTERVAL * 1000);\n \n     return true;\n }\n@@ -2426,7 +2424,8 @@ void CConnman::Stop()\n \n     if (fAddressesInitialized)\n     {\n-        DumpData();\n+        DumpAddresses();\n+        DumpBanlist();\n         fAddressesInitialized = false;\n     }\n "
      }
    ]
  },
  {
    "sha": "5b5327f93c8d2c473485ff9246b1b32e93390f87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjUzMjdmOTNjOGQyYzQ3MzQ4NWZmOTI0NmIxYjMyZTkzMzkwZjg3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T17:10:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:39:54Z"
      },
      "message": "banman: create and split out banman\n\nSome say he has always been.",
      "tree": {
        "sha": "a82ae8b2cfbb1d319f7de44b2039b0bba13471a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a82ae8b2cfbb1d319f7de44b2039b0bba13471a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5327f93c8d2c473485ff9246b1b32e93390f87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5327f93c8d2c473485ff9246b1b32e93390f87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5327f93c8d2c473485ff9246b1b32e93390f87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5327f93c8d2c473485ff9246b1b32e93390f87/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd6d79fa408ded7cc7630ec5fc285d8befb581e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd6d79fa408ded7cc7630ec5fc285d8befb581e"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 165,
      "deletions": 121
    },
    "files": [
      {
        "sha": "783df2c77c94306ee18988aa77b5da3fd1df770b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -69,8 +69,12 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n+// Dump addresses to banlist.dat every 15 minutes (900s)\n+static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n+\n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n+std::unique_ptr<BanMan> g_banman;\n \n #if !(ENABLE_WALLET)\n class DummyWalletInit : public WalletInitInterface {\n@@ -212,6 +216,7 @@ void Shutdown()\n     if (g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n+    g_banman.reset();\n \n     StopTorControl();\n \n@@ -1298,11 +1303,13 @@ bool AppInitMain()\n     // is not yet setup and may end up being set up twice if we\n     // need to reindex later.\n \n+    assert(!g_banman);\n+    g_banman = std::unique_ptr<BanMan>(new BanMan(&uiInterface));\n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n+    peerLogic.reset(new PeerLogicValidation(g_connman.get(), g_banman.get(), scheduler));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n@@ -1702,6 +1709,7 @@ bool AppInitMain()\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n+    connOptions.m_banman = g_banman.get();\n     connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n@@ -1757,5 +1765,9 @@ bool AppInitMain()\n \n     g_wallet_init_interface.Start(scheduler);\n \n+    scheduler.scheduleEvery([]{\n+        g_banman->DumpBanlist();\n+    }, DUMP_BANS_INTERVAL * 1000);\n+\n     return true;\n }"
      },
      {
        "sha": "24ecd2ab316a0f676d442ef30c39f18e58a34b31",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -116,24 +116,24 @@ class NodeImpl : public Node\n     }\n     bool getBanned(banmap_t& banmap) override\n     {\n-        if (g_connman) {\n-            g_connman->GetBanned(banmap);\n+        if (g_banman) {\n+            g_banman->GetBanned(banmap);\n             return true;\n         }\n         return false;\n     }\n     bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) override\n     {\n-        if (g_connman) {\n-            g_connman->Ban(net_addr, reason, ban_time_offset);\n+        if (g_banman) {\n+            g_banman->Ban(net_addr, reason, ban_time_offset);\n             return true;\n         }\n         return false;\n     }\n     bool unban(const CSubNet& ip) override\n     {\n-        if (g_connman) {\n-            g_connman->Unban(ip);\n+        if (g_banman) {\n+            g_banman->Unban(ip);\n             return true;\n         }\n         return false;"
      },
      {
        "sha": "de5b51f5c3ef8f9d4f191088f74e096353f616b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 39,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -39,9 +39,6 @@\n // Dump addresses to peers.dat every 15 minutes (900s)\n static constexpr int DUMP_PEERS_INTERVAL = 60 * 15;\n \n-// Dump addresses to banlist.dat every 15 minutes (900s)\n-static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n-\n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n \n@@ -467,7 +464,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     return pnode;\n }\n \n-void CConnman::DumpBanlist()\n+void BanMan::DumpBanlist()\n {\n     SweepBanned(); // clean unused entries (if bantime has expired)\n \n@@ -498,7 +495,7 @@ void CNode::CloseSocketDisconnect()\n     }\n }\n \n-void CConnman::ClearBanned()\n+void BanMan::ClearBanned()\n {\n     {\n         LOCK(cs_setBanned);\n@@ -510,7 +507,7 @@ void CConnman::ClearBanned()\n         clientInterface->BannedListChanged();\n }\n \n-bool CConnman::IsBanned(CNetAddr ip)\n+bool BanMan::IsBanned(CNetAddr ip)\n {\n     LOCK(cs_setBanned);\n     for (const auto& it : setBanned) {\n@@ -524,7 +521,7 @@ bool CConnman::IsBanned(CNetAddr ip)\n     return false;\n }\n \n-bool CConnman::IsBanned(CSubNet subnet)\n+bool BanMan::IsBanned(CSubNet subnet)\n {\n     LOCK(cs_setBanned);\n     banmap_t::iterator i = setBanned.find(subnet);\n@@ -538,12 +535,12 @@ bool CConnman::IsBanned(CSubNet subnet)\n     return false;\n }\n \n-void CConnman::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+void BanMan::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CSubNet subNet(addr);\n     Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n }\n \n-void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CBanEntry banEntry(GetTime());\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n@@ -568,12 +565,12 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         DumpBanlist(); //store banlist to disk immediately if user requested ban\n }\n \n-bool CConnman::Unban(const CNetAddr &addr) {\n+bool BanMan::Unban(const CNetAddr &addr) {\n     CSubNet subNet(addr);\n     return Unban(subNet);\n }\n \n-bool CConnman::Unban(const CSubNet &subNet) {\n+bool BanMan::Unban(const CSubNet &subNet) {\n     {\n         LOCK(cs_setBanned);\n         if (!setBanned.erase(subNet))\n@@ -586,22 +583,22 @@ bool CConnman::Unban(const CSubNet &subNet) {\n     return true;\n }\n \n-void CConnman::GetBanned(banmap_t &banMap)\n+void BanMan::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     // Sweep the banlist so expired bans are not returned\n     SweepBanned();\n     banMap = setBanned; //create a thread safe copy\n }\n \n-void CConnman::SetBanned(const banmap_t &banMap)\n+void BanMan::SetBanned(const banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     setBanned = banMap;\n     setBannedIsDirty = true;\n }\n \n-void CConnman::SweepBanned()\n+void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n     bool notifyUI = false;\n@@ -629,13 +626,13 @@ void CConnman::SweepBanned()\n     }\n }\n \n-bool CConnman::BannedSetIsDirty()\n+bool BanMan::BannedSetIsDirty()\n {\n     LOCK(cs_setBanned);\n     return setBannedIsDirty;\n }\n \n-void CConnman::SetBannedSetDirty(bool dirty)\n+void BanMan::SetBannedSetDirty(bool dirty)\n {\n     LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n     setBannedIsDirty = dirty;\n@@ -1115,7 +1112,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     // on all platforms.  Set it again here just to be sure.\n     SetSocketNoDelay(hSocket);\n \n-    if (IsBanned(addr) && !whitelisted)\n+    if (m_banman && m_banman->IsBanned(addr) && !whitelisted)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1978,7 +1975,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n+            FindNode(static_cast<CNetAddr>(addrConnect)) || (m_banman && m_banman->IsBanned(addrConnect)) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return;\n     } else if (FindNode(std::string(pszDest)))\n@@ -2202,7 +2199,6 @@ void CConnman::SetNetworkActive(bool active)\n CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)\n {\n     fNetworkActive = true;\n-    setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;\n     nSendBufferMaxSize = 0;\n@@ -2293,24 +2289,6 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n             DumpAddresses();\n         }\n     }\n-    if (clientInterface)\n-        clientInterface->InitMessage(_(\"Loading banlist...\"));\n-    // Load addresses from banlist.dat\n-    nStart = GetTimeMillis();\n-    CBanDB bandb;\n-    banmap_t banmap;\n-    if (bandb.Read(banmap)) {\n-        SetBanned(banmap); // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned(); // sweep out unused entries\n-\n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            banmap.size(), GetTimeMillis() - nStart);\n-    } else {\n-        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n-    }\n \n     uiInterface.InitMessage(_(\"Starting network threads...\"));\n \n@@ -2365,11 +2343,39 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     // Dump network addresses\n     scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n-    scheduler.scheduleEvery(std::bind(&CConnman::DumpBanlist, this), DUMP_BANS_INTERVAL * 1000);\n \n     return true;\n }\n \n+BanMan::BanMan(CClientUIInterface* client_interface) : clientInterface(client_interface)\n+{\n+    if (clientInterface)\n+        clientInterface->InitMessage(_(\"Loading banlist...\"));\n+    // Load addresses from banlist.dat\n+\n+    int64_t nStart = GetTimeMillis();\n+    setBannedIsDirty = false;\n+    CBanDB bandb;\n+    banmap_t banmap;\n+    if (bandb.Read(banmap)) {\n+        SetBanned(banmap); // thread save setter\n+        SetBannedSetDirty(false); // no need to write down, just read data\n+        SweepBanned(); // sweep out unused entries\n+\n+        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n+            banmap.size(), GetTimeMillis() - nStart);\n+    } else {\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+        SetBannedSetDirty(true); // force write\n+        DumpBanlist();\n+    }\n+}\n+\n+BanMan::~BanMan()\n+{\n+    DumpBanlist();\n+}\n+\n class CNetCleanup\n {\n public:\n@@ -2425,7 +2431,6 @@ void CConnman::Stop()\n     if (fAddressesInitialized)\n     {\n         DumpAddresses();\n-        DumpBanlist();\n         fAddressesInitialized = false;\n     }\n "
      },
      {
        "sha": "4edc28b6672bb41cf31e502b37d73e6b90d25ce8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 49,
        "deletions": 36,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -81,7 +81,7 @@ static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n-static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n typedef int64_t NodeId;\n \n@@ -109,6 +109,50 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+\n+class BanMan\n+{\n+public:\n+    // Denial-of-service detection/prevention\n+    // The idea is to detect peers that are behaving\n+    // badly and disconnect/ban them, but do it in a\n+    // one-coding-mistake-won't-shatter-the-entire-network\n+    // way.\n+    // IMPORTANT:  There should be nothing I can give a\n+    // node that it will forward on that will make that\n+    // node's peers drop it. If there is, an attacker\n+    // can isolate a node and/or try to split the network.\n+    // Dropping a node for sending stuff that is invalid\n+    // now but might be valid in a later version is also\n+    // dangerous, because it can cause a network split\n+    // between nodes running old code and nodes running\n+    // new code.\n+    ~BanMan();\n+    BanMan(CClientUIInterface* client_interface);\n+    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void ClearBanned(); // needed for unit testing\n+    bool IsBanned(CNetAddr ip);\n+    bool IsBanned(CSubNet subnet);\n+    bool Unban(const CNetAddr &ip);\n+    bool Unban(const CSubNet &ip);\n+    void GetBanned(banmap_t &banmap);\n+    void DumpBanlist();\n+\n+private:\n+    void SetBanned(const banmap_t &banmap);\n+    bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entries (if bantime has expired)\n+    void SweepBanned();\n+\n+    banmap_t setBanned;\n+    CCriticalSection cs_setBanned;\n+    bool setBannedIsDirty;\n+    CClientUIInterface* clientInterface = nullptr;\n+};\n+\n class NetEventsInterface;\n class CConnman\n {\n@@ -131,6 +175,7 @@ class CConnman\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n         NetEventsInterface* m_msgproc = nullptr;\n+        BanMan* m_banman = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n@@ -151,6 +196,7 @@ class CConnman\n         nMaxFeeler = connOptions.nMaxFeeler;\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n+        m_banman = connOptions.m_banman;\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n@@ -229,30 +275,6 @@ class CConnman\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n \n-    // Denial-of-service detection/prevention\n-    // The idea is to detect peers that are behaving\n-    // badly and disconnect/ban them, but do it in a\n-    // one-coding-mistake-won't-shatter-the-entire-network\n-    // way.\n-    // IMPORTANT:  There should be nothing I can give a\n-    // node that it will forward on that will make that\n-    // node's peers drop it. If there is, an attacker\n-    // can isolate a node and/or try to split the network.\n-    // Dropping a node for sending stuff that is invalid\n-    // now but might be valid in a later version is also\n-    // dangerous, because it can cause a network split\n-    // between nodes running old code and nodes running\n-    // new code.\n-    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void ClearBanned(); // needed for unit testing\n-    bool IsBanned(CNetAddr ip);\n-    bool IsBanned(CSubNet subnet);\n-    bool Unban(const CNetAddr &ip);\n-    bool Unban(const CSubNet &ip);\n-    void GetBanned(banmap_t &banmap);\n-    void SetBanned(const banmap_t &banmap);\n-\n     // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n     // a peer that is better than all our current peers.\n     void SetTryNewOutboundPeer(bool flag);\n@@ -348,15 +370,7 @@ class CConnman\n     NodeId GetNewNodeId();\n \n     size_t SocketSendData(CNode *pnode) const;\n-    //!check is the banlist has unwritten changes\n-    bool BannedSetIsDirty();\n-    //!set the \"dirty\" flag for the banlist\n-    void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entries (if bantime has expired)\n-    void SweepBanned();\n     void DumpAddresses();\n-    void DumpData();\n-    void DumpBanlist();\n \n     // Network stats\n     void RecordBytesRecv(uint64_t bytes);\n@@ -386,9 +400,6 @@ class CConnman\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;\n-    banmap_t setBanned;\n-    CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty;\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots;\n@@ -412,6 +423,7 @@ class CConnman\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n     NetEventsInterface* m_msgproc;\n+    BanMan* m_banman;\n \n     /** SipHasher seeds for deterministic randomness */\n     const uint64_t nSeed0, nSeed1;\n@@ -439,6 +451,7 @@ class CConnman\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n+extern std::unique_ptr<BanMan> g_banman;\n void Discover();\n void StartMapPort();\n void InterruptMapPort();"
      },
      {
        "sha": "7cb99e9c6eed0c0374807282e36c1fa2af05b061",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -809,7 +809,7 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler &scheduler) : connman(connmanIn), m_banman(banman), m_stale_tip_check_time(0) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n@@ -2893,7 +2893,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n+bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n@@ -2915,7 +2915,9 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n             connman->DisconnectNode(pnode->GetId());\n         } else {\n             // Disconnect and ban all nodes sharing the address\n-            connman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            if (m_banman) {\n+                m_banman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n             connman->DisconnectNode(pnode->addr);\n         }\n         return true;\n@@ -3038,7 +3040,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     LOCK(cs_main);\n-    SendRejectsAndCheckIfBanned(pfrom, connman);\n+    SendRejectsAndCheckIfBanned(pfrom);\n \n     return fMoreWork;\n }\n@@ -3234,7 +3236,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         if (!lockMain)\n             return true;\n \n-        if (SendRejectsAndCheckIfBanned(pto, connman))\n+        if (SendRejectsAndCheckIfBanned(pto))\n             return true;\n         CNodeState &state = *State(pto->GetId());\n "
      },
      {
        "sha": "a2198520f937a2ff20e52b6d584db4b86c6a6972",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -38,9 +38,11 @@ static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n+    BanMan* const m_banman;\n \n+    bool SendRejectsAndCheckIfBanned(CNode* pnode);\n public:\n-    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n+    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler &scheduler);\n \n     /**\n      * Overridden from CValidationInterface."
      },
      {
        "sha": "ba8200c6ea43531e64934060ccb0d6c1b30a481d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -509,8 +509,8 @@ UniValue setban(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                             );\n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    if(!g_banman)\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n \n     CSubNet subNet;\n     CNetAddr netAddr;\n@@ -532,7 +532,7 @@ UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? g_connman->IsBanned(subNet) : g_connman->IsBanned(netAddr))\n+        if (isSubnet ? g_banman->IsBanned(subNet) : g_banman->IsBanned(netAddr))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n@@ -544,16 +544,20 @@ UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n-            g_connman->DisconnectNode(subNet);\n+            g_banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            if (g_connman) {\n+                g_connman->DisconnectNode(subNet);\n+            }\n         } else {\n-            g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-            g_connman->DisconnectNode(netAddr);\n+            g_banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            if (g_connman) {\n+                g_connman->DisconnectNode(netAddr);\n+            }\n         }\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!( isSubnet ? g_connman->Unban(subNet) : g_connman->Unban(netAddr) ))\n+        if (!( isSubnet ? g_banman->Unban(subNet) : g_banman->Unban(netAddr) ))\n             throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n     }\n     return NullUniValue;\n@@ -570,11 +574,11 @@ UniValue listbanned(const JSONRPCRequest& request)\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                             );\n \n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    if(!g_banman)\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n \n     banmap_t banMap;\n-    g_connman->GetBanned(banMap);\n+    g_banman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n     for (const auto& entry : banMap)\n@@ -602,10 +606,10 @@ UniValue clearbanned(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                             );\n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    if(!g_banman)\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n \n-    g_connman->ClearBanned();\n+    g_banman->ClearBanned();\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "a319a70d9e65f1987166e697c1c8e3c4ff7f70db",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -72,7 +72,7 @@ BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n-    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), nullptr, scheduler));\n \n     std::atomic<bool> interruptDummy(false);\n \n@@ -129,7 +129,7 @@ void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &pe\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     auto connman = std::unique_ptr<CConnmanTest>(new CConnmanTest(0x1337, 0x1337));\n-    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), nullptr, scheduler));\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int nMaxOutbound = 8;\n@@ -200,11 +200,12 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n-    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n-    connman->ClearBanned();\n+    banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n@@ -217,8 +218,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     }\n     LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n-    BOOST_CHECK(connman->IsBanned(addr1));\n-    BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n+    BOOST_CHECK(banman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n@@ -232,14 +233,14 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     }\n     LOCK(dummyNode2.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n-    BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n-    BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n+    BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n+    BOOST_CHECK(banman->IsBanned(addr1));  // ... but 1 still should be\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n-    BOOST_CHECK(connman->IsBanned(addr2));\n+    BOOST_CHECK(banman->IsBanned(addr2));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n@@ -248,11 +249,12 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n-    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n-    connman->ClearBanned();\n+    banman->ClearBanned();\n     gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n@@ -266,19 +268,19 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     }\n     LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n-    BOOST_CHECK(!connman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsBanned(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 10);\n     }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n-    BOOST_CHECK(!connman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsBanned(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 1);\n     }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n-    BOOST_CHECK(connman->IsBanned(addr1));\n+    BOOST_CHECK(banman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n \n     bool dummy;\n@@ -287,11 +289,12 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n-    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), scheduler));\n+    auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n \n-    connman->ClearBanned();\n+    banman->ClearBanned();\n     int64_t nStartTime = GetTime();\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n@@ -308,13 +311,13 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     }\n     LOCK(dummyNode.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode, interruptDummy);\n-    BOOST_CHECK(connman->IsBanned(addr));\n+    BOOST_CHECK(banman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);\n-    BOOST_CHECK(connman->IsBanned(addr));\n+    BOOST_CHECK(banman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60*24+1);\n-    BOOST_CHECK(!connman->IsBanned(addr));\n+    BOOST_CHECK(!banman->IsBanned(addr));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);"
      },
      {
        "sha": "24b62691beb896b2c0af3cdb913aa4da9ca42959",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -76,6 +76,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n+        g_banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n }\n \n@@ -86,6 +87,7 @@ TestingSetup::~TestingSetup()\n         GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n         g_connman.reset();\n+        g_banman.reset();\n         UnloadBlockIndex();\n         pcoinsTip.reset();\n         pcoinsdbview.reset();"
      },
      {
        "sha": "7c62d8984cca24bca14867a9b72c941fd2d8e6c2",
        "filename": "src/test/test_bitcoin_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/test_bitcoin_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5327f93c8d2c473485ff9246b1b32e93390f87/src/test/test_bitcoin_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_main.cpp?ref=5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "patch": "@@ -11,6 +11,7 @@\n #include <boost/test/unit_test.hpp>\n \n std::unique_ptr<CConnman> g_connman;\n+std::unique_ptr<BanMan> g_banman;\n \n [[noreturn]] void Shutdown(void* parg)\n {"
      }
    ]
  },
  {
    "sha": "020daff1e4afd34af78a42da215218eed4641413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjBkYWZmMWU0YWZkMzRhZjc4YTQyZGEyMTUyMThlZWQ0NjQxNDEz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T17:35:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:39:54Z"
      },
      "message": "banman: pass the banfile path in\n\nThere's no need to hard-code the path here. Passing it in means that there are\nno ordering concerns wrt establishing the datadir.",
      "tree": {
        "sha": "56962328a2c07b2ca1dff152d26ec963468c85d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56962328a2c07b2ca1dff152d26ec963468c85d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/020daff1e4afd34af78a42da215218eed4641413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020daff1e4afd34af78a42da215218eed4641413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/020daff1e4afd34af78a42da215218eed4641413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020daff1e4afd34af78a42da215218eed4641413/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5327f93c8d2c473485ff9246b1b32e93390f87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5327f93c8d2c473485ff9246b1b32e93390f87"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "23146eb93bfc6190b4241367994581aed0783032",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -104,9 +104,8 @@ bool DeserializeFileDB(const fs::path& path, Data& data)\n \n }\n \n-CBanDB::CBanDB()\n+CBanDB::CBanDB(fs::path ban_file) : pathBanlist(std::move(ban_file))\n {\n-    pathBanlist = GetDataDir() / \"banlist.dat\";\n }\n \n bool CBanDB::Write(const banmap_t& banSet)"
      },
      {
        "sha": "36ee4476e3a82385bb0b96401a81c7d13745bfe2",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -94,7 +94,7 @@ class CBanDB\n private:\n     fs::path pathBanlist;\n public:\n-    CBanDB();\n+    explicit CBanDB(fs::path pathBanlist);\n     bool Write(const banmap_t& banSet);\n     bool Read(banmap_t& banSet);\n };"
      },
      {
        "sha": "b6f80d0a8284033c0711c2d3fd623d214f4b3e42",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -1304,7 +1304,7 @@ bool AppInitMain()\n     // need to reindex later.\n \n     assert(!g_banman);\n-    g_banman = std::unique_ptr<BanMan>(new BanMan(&uiInterface));\n+    g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", &uiInterface));\n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;"
      },
      {
        "sha": "1763b0ef78dbbcddf976a4ad280731fb8eaabbe9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -473,10 +473,9 @@ void BanMan::DumpBanlist()\n \n     int64_t nStart = GetTimeMillis();\n \n-    CBanDB bandb;\n     banmap_t banmap;\n     GetBanned(banmap);\n-    if (bandb.Write(banmap)) {\n+    if (m_ban_db.Write(banmap)) {\n         SetBannedSetDirty(false);\n     }\n \n@@ -2347,17 +2346,15 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     return true;\n }\n \n-BanMan::BanMan(CClientUIInterface* client_interface) : clientInterface(client_interface)\n+BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface) : clientInterface(client_interface), m_ban_db(std::move(ban_file))\n {\n     if (clientInterface)\n         clientInterface->InitMessage(_(\"Loading banlist...\"));\n-    // Load addresses from banlist.dat\n \n     int64_t nStart = GetTimeMillis();\n     setBannedIsDirty = false;\n-    CBanDB bandb;\n     banmap_t banmap;\n-    if (bandb.Read(banmap)) {\n+    if (m_ban_db.Read(banmap)) {\n         SetBanned(banmap); // thread save setter\n         SetBannedSetDirty(false); // no need to write down, just read data\n         SweepBanned(); // sweep out unused entries"
      },
      {
        "sha": "c5b45dbba1c8c5c2cc88728f777a0cd88933608d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -128,7 +128,7 @@ class BanMan\n     // between nodes running old code and nodes running\n     // new code.\n     ~BanMan();\n-    BanMan(CClientUIInterface* client_interface);\n+    BanMan(fs::path ban_file, CClientUIInterface* client_interface);\n     void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     void ClearBanned(); // needed for unit testing\n@@ -151,6 +151,7 @@ class BanMan\n     CCriticalSection cs_setBanned;\n     bool setBannedIsDirty;\n     CClientUIInterface* clientInterface = nullptr;\n+    CBanDB m_ban_db;\n };\n \n class NetEventsInterface;"
      },
      {
        "sha": "d819ff7caa6eac78926cddadc6b014b124cee52e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -200,7 +200,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n@@ -249,7 +249,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);"
      },
      {
        "sha": "0151177339a7cb62926e03518c4a7ec84e2538d0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020daff1e4afd34af78a42da215218eed4641413/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020daff1e4afd34af78a42da215218eed4641413/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=020daff1e4afd34af78a42da215218eed4641413",
        "patch": "@@ -76,7 +76,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n-        g_banman = std::unique_ptr<BanMan>(new BanMan(nullptr));\n+        g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n }\n "
      }
    ]
  },
  {
    "sha": "03c483e55081cf92d2ea712ee64f4e99d2302583",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2M0ODNlNTUwODFjZjkyZDJlYTcxMmVlNjRmNGU5OWQyMzAyNTgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T17:41:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:39:54Z"
      },
      "message": "banman: pass in default ban time as a parameter\n\nRemoves the dependency on arg parsing.",
      "tree": {
        "sha": "79d0de1f2e1a3380f73493accdeb3715cc4952da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79d0de1f2e1a3380f73493accdeb3715cc4952da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03c483e55081cf92d2ea712ee64f4e99d2302583",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c483e55081cf92d2ea712ee64f4e99d2302583",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03c483e55081cf92d2ea712ee64f4e99d2302583",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c483e55081cf92d2ea712ee64f4e99d2302583/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "020daff1e4afd34af78a42da215218eed4641413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020daff1e4afd34af78a42da215218eed4641413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/020daff1e4afd34af78a42da215218eed4641413"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6e712533d38d218267cbd9bec05e120fc703dfc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c483e55081cf92d2ea712ee64f4e99d2302583/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c483e55081cf92d2ea712ee64f4e99d2302583/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=03c483e55081cf92d2ea712ee64f4e99d2302583",
        "patch": "@@ -1304,7 +1304,7 @@ bool AppInitMain()\n     // need to reindex later.\n \n     assert(!g_banman);\n-    g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", &uiInterface));\n+    g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME)));\n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;"
      },
      {
        "sha": "d101390bc9f94e0d9ca146427db8892bb1c77013",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c483e55081cf92d2ea712ee64f4e99d2302583/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c483e55081cf92d2ea712ee64f4e99d2302583/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=03c483e55081cf92d2ea712ee64f4e99d2302583",
        "patch": "@@ -544,7 +544,7 @@ void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bant\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n+        bantimeoffset = m_default_ban_time;\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n@@ -2346,7 +2346,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     return true;\n }\n \n-BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface) : clientInterface(client_interface), m_ban_db(std::move(ban_file))\n+BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time) : clientInterface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n {\n     if (clientInterface)\n         clientInterface->InitMessage(_(\"Loading banlist...\"));"
      },
      {
        "sha": "2df60d206fd395332bcda9fbb57081b696ef69a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c483e55081cf92d2ea712ee64f4e99d2302583/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c483e55081cf92d2ea712ee64f4e99d2302583/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=03c483e55081cf92d2ea712ee64f4e99d2302583",
        "patch": "@@ -128,7 +128,7 @@ class BanMan\n     // between nodes running old code and nodes running\n     // new code.\n     ~BanMan();\n-    BanMan(fs::path ban_file, CClientUIInterface* client_interface);\n+    BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n     void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     void ClearBanned(); // needed for unit testing\n@@ -152,6 +152,7 @@ class BanMan\n     bool setBannedIsDirty;\n     CClientUIInterface* clientInterface = nullptr;\n     CBanDB m_ban_db;\n+    int64_t m_default_ban_time;\n };\n \n class NetEventsInterface;"
      },
      {
        "sha": "1bb178311dcadff52aef472bf69d61d2bdbec52f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c483e55081cf92d2ea712ee64f4e99d2302583/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c483e55081cf92d2ea712ee64f4e99d2302583/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=03c483e55081cf92d2ea712ee64f4e99d2302583",
        "patch": "@@ -200,7 +200,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n@@ -249,7 +249,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);\n@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n-    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n+    auto banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME));\n     auto connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337));\n     auto peerLogic = std::unique_ptr<PeerLogicValidation>(new PeerLogicValidation(connman.get(), banman.get(), scheduler));\n     std::atomic<bool> interruptDummy(false);"
      },
      {
        "sha": "f5bd99493999c7efde2446c19ab8632965b4ca5a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03c483e55081cf92d2ea712ee64f4e99d2302583/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03c483e55081cf92d2ea712ee64f4e99d2302583/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=03c483e55081cf92d2ea712ee64f4e99d2302583",
        "patch": "@@ -76,7 +76,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n-        g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr));\n+        g_banman = std::unique_ptr<BanMan>(new BanMan(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME));\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n }\n "
      }
    ]
  },
  {
    "sha": "7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjZlYzFiZGNmYjhkNzJjZDQ5NTAzNDY5YzU1MTg3MWQ1YzI1NGZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T20:40:43Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:46:49Z"
      },
      "message": "net: move BanMan to its own files",
      "tree": {
        "sha": "cb7507fcf1d49e3a7e22815a7f5f85d5c0a2f5a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb7507fcf1d49e3a7e22815a7f5f85d5c0a2f5a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03c483e55081cf92d2ea712ee64f4e99d2302583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03c483e55081cf92d2ea712ee64f4e99d2302583",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03c483e55081cf92d2ea712ee64f4e99d2302583"
      }
    ],
    "stats": {
      "total": 518,
      "additions": 280,
      "deletions": 238
    },
    "files": [
      {
        "sha": "f7f147e65158e3be4efbbbc61f38455f6813f3dd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -78,6 +78,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  banman.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\\n@@ -196,6 +197,7 @@ libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrdb.cpp \\\n   addrman.cpp \\\n+  banman.cpp \\\n   bloom.cpp \\\n   blockencodings.cpp \\\n   chain.cpp \\"
      },
      {
        "sha": "83a7c65ebf0aa4c0ce789cdfa33a581010d1141b",
        "filename": "src/banman.cpp",
        "status": "added",
        "additions": 202,
        "deletions": 0,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+\n+#include <netaddress.h>\n+#include <utiltime.h>\n+#include <util.h>\n+#include <ui_interface.h>\n+\n+\n+BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time) : clientInterface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n+{\n+    if (clientInterface)\n+        clientInterface->InitMessage(_(\"Loading banlist...\"));\n+\n+    int64_t nStart = GetTimeMillis();\n+    setBannedIsDirty = false;\n+    banmap_t banmap;\n+    if (m_ban_db.Read(banmap)) {\n+        SetBanned(banmap); // thread save setter\n+        SetBannedSetDirty(false); // no need to write down, just read data\n+        SweepBanned(); // sweep out unused entries\n+\n+        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n+            banmap.size(), GetTimeMillis() - nStart);\n+    } else {\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+        SetBannedSetDirty(true); // force write\n+        DumpBanlist();\n+    }\n+}\n+\n+BanMan::~BanMan()\n+{\n+    DumpBanlist();\n+}\n+\n+void BanMan::DumpBanlist()\n+{\n+    SweepBanned(); // clean unused entries (if bantime has expired)\n+\n+    if (!BannedSetIsDirty())\n+        return;\n+\n+    int64_t nStart = GetTimeMillis();\n+\n+    banmap_t banmap;\n+    GetBanned(banmap);\n+    if (m_ban_db.Write(banmap)) {\n+        SetBannedSetDirty(false);\n+    }\n+\n+    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+        banmap.size(), GetTimeMillis() - nStart);\n+}\n+\n+void BanMan::ClearBanned()\n+{\n+    {\n+        LOCK(cs_setBanned);\n+        setBanned.clear();\n+        setBannedIsDirty = true;\n+    }\n+    DumpBanlist(); //store banlist to disk\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n+}\n+\n+bool BanMan::IsBanned(CNetAddr ip)\n+{\n+    LOCK(cs_setBanned);\n+    for (const auto& it : setBanned) {\n+        CSubNet subNet = it.first;\n+        CBanEntry banEntry = it.second;\n+\n+        if (subNet.Match(ip) && GetTime() < banEntry.nBanUntil) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool BanMan::IsBanned(CSubNet subnet)\n+{\n+    LOCK(cs_setBanned);\n+    banmap_t::iterator i = setBanned.find(subnet);\n+    if (i != setBanned.end())\n+    {\n+        CBanEntry banEntry = (*i).second;\n+        if (GetTime() < banEntry.nBanUntil) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+void BanMan::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CSubNet subNet(addr);\n+    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n+}\n+\n+void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CBanEntry banEntry(GetTime());\n+    banEntry.banReason = banReason;\n+    if (bantimeoffset <= 0)\n+    {\n+        bantimeoffset = m_default_ban_time;\n+        sinceUnixEpoch = false;\n+    }\n+    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+\n+    {\n+        LOCK(cs_setBanned);\n+        if (setBanned[subNet].nBanUntil < banEntry.nBanUntil) {\n+            setBanned[subNet] = banEntry;\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            return;\n+    }\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n+\n+    if(banReason == BanReasonManuallyAdded)\n+        DumpBanlist(); //store banlist to disk immediately if user requested ban\n+}\n+\n+bool BanMan::Unban(const CNetAddr &addr) {\n+    CSubNet subNet(addr);\n+    return Unban(subNet);\n+}\n+\n+bool BanMan::Unban(const CSubNet &subNet) {\n+    {\n+        LOCK(cs_setBanned);\n+        if (!setBanned.erase(subNet))\n+            return false;\n+        setBannedIsDirty = true;\n+    }\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n+    DumpBanlist(); //store banlist to disk immediately\n+    return true;\n+}\n+\n+void BanMan::GetBanned(banmap_t &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    // Sweep the banlist so expired bans are not returned\n+    SweepBanned();\n+    banMap = setBanned; //create a thread safe copy\n+}\n+\n+void BanMan::SetBanned(const banmap_t &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    setBanned = banMap;\n+    setBannedIsDirty = true;\n+}\n+\n+void BanMan::SweepBanned()\n+{\n+    int64_t now = GetTime();\n+    bool notifyUI = false;\n+    {\n+        LOCK(cs_setBanned);\n+        banmap_t::iterator it = setBanned.begin();\n+        while(it != setBanned.end())\n+        {\n+            CSubNet subNet = (*it).first;\n+            CBanEntry banEntry = (*it).second;\n+            if(now > banEntry.nBanUntil)\n+            {\n+                setBanned.erase(it++);\n+                setBannedIsDirty = true;\n+                notifyUI = true;\n+                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n+            }\n+            else\n+                ++it;\n+        }\n+    }\n+    // update UI\n+    if(notifyUI && clientInterface) {\n+        clientInterface->BannedListChanged();\n+    }\n+}\n+\n+bool BanMan::BannedSetIsDirty()\n+{\n+    LOCK(cs_setBanned);\n+    return setBannedIsDirty;\n+}\n+\n+void BanMan::SetBannedSetDirty(bool dirty)\n+{\n+    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n+    setBannedIsDirty = dirty;\n+}"
      },
      {
        "sha": "e6407a21d16c5dfbc32ee9e52a6fb0099af20e66",
        "filename": "src/banman.h",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BANMAN_H\n+#define BITCOIN_BANMAN_H\n+\n+#include <addrdb.h>\n+#include <fs.h>\n+#include <sync.h>\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n+class CClientUIInterface;\n+class CNetAddr;\n+class CSubNet;\n+\n+// Denial-of-service detection/prevention\n+// The idea is to detect peers that are behaving\n+// badly and disconnect/ban them, but do it in a\n+// one-coding-mistake-won't-shatter-the-entire-network\n+// way.\n+// IMPORTANT:  There should be nothing I can give a\n+// node that it will forward on that will make that\n+// node's peers drop it. If there is, an attacker\n+// can isolate a node and/or try to split the network.\n+// Dropping a node for sending stuff that is invalid\n+// now but might be valid in a later version is also\n+// dangerous, because it can cause a network split\n+// between nodes running old code and nodes running\n+// new code.\n+\n+class BanMan\n+{\n+public:\n+    ~BanMan();\n+    BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n+    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void ClearBanned(); // needed for unit testing\n+    bool IsBanned(CNetAddr ip);\n+    bool IsBanned(CSubNet subnet);\n+    bool Unban(const CNetAddr &ip);\n+    bool Unban(const CSubNet &ip);\n+    void GetBanned(banmap_t &banmap);\n+    void DumpBanlist();\n+\n+private:\n+    void SetBanned(const banmap_t &banmap);\n+    bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entries (if bantime has expired)\n+    void SweepBanned();\n+\n+    banmap_t setBanned;\n+    CCriticalSection cs_setBanned;\n+    bool setBannedIsDirty;\n+    CClientUIInterface* clientInterface = nullptr;\n+    CBanDB m_ban_db;\n+    int64_t m_default_ban_time;\n+};\n+\n+extern std::unique_ptr<BanMan> g_banman;\n+#endif"
      },
      {
        "sha": "0d37439c7a9180a527296b5aaed6a328d7898378",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <addrman.h>\n #include <amount.h>\n+#include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>"
      },
      {
        "sha": "4394dcf15ea5412eb67b9bc515131b060d122074",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <addrdb.h>\n #include <amount.h>\n+#include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>"
      },
      {
        "sha": "5075fc5125f169750f84cbec4ced353ef9bda342",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -19,6 +19,7 @@\n #include <tuple>\n #include <vector>\n \n+class BanMan;\n class CCoinControl;\n class CFeeRate;\n class CNodeStats;"
      },
      {
        "sha": "3a28d908fb85536d6456754786480171d8fcb20c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 190,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <banman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/consensus.h>\n@@ -464,25 +465,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     return pnode;\n }\n \n-void BanMan::DumpBanlist()\n-{\n-    SweepBanned(); // clean unused entries (if bantime has expired)\n-\n-    if (!BannedSetIsDirty())\n-        return;\n-\n-    int64_t nStart = GetTimeMillis();\n-\n-    banmap_t banmap;\n-    GetBanned(banmap);\n-    if (m_ban_db.Write(banmap)) {\n-        SetBannedSetDirty(false);\n-    }\n-\n-    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - nStart);\n-}\n-\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n@@ -494,150 +476,6 @@ void CNode::CloseSocketDisconnect()\n     }\n }\n \n-void BanMan::ClearBanned()\n-{\n-    {\n-        LOCK(cs_setBanned);\n-        setBanned.clear();\n-        setBannedIsDirty = true;\n-    }\n-    DumpBanlist(); //store banlist to disk\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n-}\n-\n-bool BanMan::IsBanned(CNetAddr ip)\n-{\n-    LOCK(cs_setBanned);\n-    for (const auto& it : setBanned) {\n-        CSubNet subNet = it.first;\n-        CBanEntry banEntry = it.second;\n-\n-        if (subNet.Match(ip) && GetTime() < banEntry.nBanUntil) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-bool BanMan::IsBanned(CSubNet subnet)\n-{\n-    LOCK(cs_setBanned);\n-    banmap_t::iterator i = setBanned.find(subnet);\n-    if (i != setBanned.end())\n-    {\n-        CBanEntry banEntry = (*i).second;\n-        if (GetTime() < banEntry.nBanUntil) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-void BanMan::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CSubNet subNet(addr);\n-    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n-}\n-\n-void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CBanEntry banEntry(GetTime());\n-    banEntry.banReason = banReason;\n-    if (bantimeoffset <= 0)\n-    {\n-        bantimeoffset = m_default_ban_time;\n-        sinceUnixEpoch = false;\n-    }\n-    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n-\n-    {\n-        LOCK(cs_setBanned);\n-        if (setBanned[subNet].nBanUntil < banEntry.nBanUntil) {\n-            setBanned[subNet] = banEntry;\n-            setBannedIsDirty = true;\n-        }\n-        else\n-            return;\n-    }\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n-    if(banReason == BanReasonManuallyAdded)\n-        DumpBanlist(); //store banlist to disk immediately if user requested ban\n-}\n-\n-bool BanMan::Unban(const CNetAddr &addr) {\n-    CSubNet subNet(addr);\n-    return Unban(subNet);\n-}\n-\n-bool BanMan::Unban(const CSubNet &subNet) {\n-    {\n-        LOCK(cs_setBanned);\n-        if (!setBanned.erase(subNet))\n-            return false;\n-        setBannedIsDirty = true;\n-    }\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n-    DumpBanlist(); //store banlist to disk immediately\n-    return true;\n-}\n-\n-void BanMan::GetBanned(banmap_t &banMap)\n-{\n-    LOCK(cs_setBanned);\n-    // Sweep the banlist so expired bans are not returned\n-    SweepBanned();\n-    banMap = setBanned; //create a thread safe copy\n-}\n-\n-void BanMan::SetBanned(const banmap_t &banMap)\n-{\n-    LOCK(cs_setBanned);\n-    setBanned = banMap;\n-    setBannedIsDirty = true;\n-}\n-\n-void BanMan::SweepBanned()\n-{\n-    int64_t now = GetTime();\n-    bool notifyUI = false;\n-    {\n-        LOCK(cs_setBanned);\n-        banmap_t::iterator it = setBanned.begin();\n-        while(it != setBanned.end())\n-        {\n-            CSubNet subNet = (*it).first;\n-            CBanEntry banEntry = (*it).second;\n-            if(now > banEntry.nBanUntil)\n-            {\n-                setBanned.erase(it++);\n-                setBannedIsDirty = true;\n-                notifyUI = true;\n-                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n-            }\n-            else\n-                ++it;\n-        }\n-    }\n-    // update UI\n-    if(notifyUI && clientInterface) {\n-        clientInterface->BannedListChanged();\n-    }\n-}\n-\n-bool BanMan::BannedSetIsDirty()\n-{\n-    LOCK(cs_setBanned);\n-    return setBannedIsDirty;\n-}\n-\n-void BanMan::SetBannedSetDirty(bool dirty)\n-{\n-    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n-    setBannedIsDirty = dirty;\n-}\n-\n-\n bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n     for (const CSubNet& subnet : vWhitelistedRange) {\n         if (subnet.Match(addr))\n@@ -2346,33 +2184,6 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     return true;\n }\n \n-BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time) : clientInterface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n-{\n-    if (clientInterface)\n-        clientInterface->InitMessage(_(\"Loading banlist...\"));\n-\n-    int64_t nStart = GetTimeMillis();\n-    setBannedIsDirty = false;\n-    banmap_t banmap;\n-    if (m_ban_db.Read(banmap)) {\n-        SetBanned(banmap); // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned(); // sweep out unused entries\n-\n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            banmap.size(), GetTimeMillis() - nStart);\n-    } else {\n-        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n-    }\n-}\n-\n-BanMan::~BanMan()\n-{\n-    DumpBanlist();\n-}\n-\n class CNetCleanup\n {\n public:"
      },
      {
        "sha": "f4485be1d19a5c464a5bfd77b9b4ccd885b4c854",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 48,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -36,6 +36,7 @@\n \n class CScheduler;\n class CNode;\n+class BanMan;\n \n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n@@ -80,9 +81,6 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n-// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n-static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n-\n typedef int64_t NodeId;\n \n struct AddedNodeInfo\n@@ -110,51 +108,6 @@ struct CSerializedNetMsg\n };\n \n \n-class BanMan\n-{\n-public:\n-    // Denial-of-service detection/prevention\n-    // The idea is to detect peers that are behaving\n-    // badly and disconnect/ban them, but do it in a\n-    // one-coding-mistake-won't-shatter-the-entire-network\n-    // way.\n-    // IMPORTANT:  There should be nothing I can give a\n-    // node that it will forward on that will make that\n-    // node's peers drop it. If there is, an attacker\n-    // can isolate a node and/or try to split the network.\n-    // Dropping a node for sending stuff that is invalid\n-    // now but might be valid in a later version is also\n-    // dangerous, because it can cause a network split\n-    // between nodes running old code and nodes running\n-    // new code.\n-    ~BanMan();\n-    BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n-    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void ClearBanned(); // needed for unit testing\n-    bool IsBanned(CNetAddr ip);\n-    bool IsBanned(CSubNet subnet);\n-    bool Unban(const CNetAddr &ip);\n-    bool Unban(const CSubNet &ip);\n-    void GetBanned(banmap_t &banmap);\n-    void DumpBanlist();\n-\n-private:\n-    void SetBanned(const banmap_t &banmap);\n-    bool BannedSetIsDirty();\n-    //!set the \"dirty\" flag for the banlist\n-    void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entries (if bantime has expired)\n-    void SweepBanned();\n-\n-    banmap_t setBanned;\n-    CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty;\n-    CClientUIInterface* clientInterface = nullptr;\n-    CBanDB m_ban_db;\n-    int64_t m_default_ban_time;\n-};\n-\n class NetEventsInterface;\n class CConnman\n {"
      },
      {
        "sha": "b65a6a3ddcf62413dee6c4220d9636ef679252cd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -6,6 +6,7 @@\n #include <net_processing.h>\n \n #include <addrman.h>\n+#include <banman.h>\n #include <arith_uint256.h>\n #include <blockencodings.h>\n #include <chainparams.h>"
      },
      {
        "sha": "1f7bf7f23fe0fe0b6961b543d6fe0ab40924af2d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <rpc/server.h>\n \n+#include <banman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <core_io.h>"
      },
      {
        "sha": "789ae1711f523f27216c5f1e6c795c25a2c3f5df",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -4,6 +4,7 @@\n \n // Unit tests for denial-of-service detection/prevention code\n \n+#include <banman.h>\n #include <chainparams.h>\n #include <keystore.h>\n #include <net.h>"
      },
      {
        "sha": "140bb1b79949aadb9ba85f366a8054f5f1a06ff8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <test/test_bitcoin.h>\n \n+#include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>"
      },
      {
        "sha": "672a20a43cc7ad96908c272b7a689754f04c3040",
        "filename": "src/test/test_bitcoin_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/test_bitcoin_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b6ec1bdcfb8d72cd49503469c551871d5c254fb/src/test/test_bitcoin_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_main.cpp?ref=7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "patch": "@@ -4,6 +4,7 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include <banman.h>\n #include <net.h>\n \n #include <memory>"
      }
    ]
  },
  {
    "sha": "dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDNiYTI1MGVmOTlmNTRhMzJkNzFlMmM3YjZlZGEzYjI0Y2M0MWQ2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-05T21:04:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:46:49Z"
      },
      "message": "scripted-diff: batch-rename BanMan members\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/clientInterface/m_client_interface/g\" src/banman.h src/banman.cpp\nsed -i \"s/setBannedIsDirty/m_is_dirty/g\" src/banman.h src/banman.cpp\nsed -i \"s/cs_setBanned/m_cs_banned/g\" src/banman.h src/banman.cpp\nsed -i \"s/setBanned/m_banned/g\" src/banman.h src/banman.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "705f7476c9a17dedfdd774f673c86969f30f2202",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/705f7476c9a17dedfdd774f673c86969f30f2202"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6ec1bdcfb8d72cd49503469c551871d5c254fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6ec1bdcfb8d72cd49503469c551871d5c254fb"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 45,
      "deletions": 45
    },
    "files": [
      {
        "sha": "001b344ba470a0fa897c57f3d8d1e2d6ee515a9b",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 41,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
        "patch": "@@ -11,13 +11,13 @@\n #include <ui_interface.h>\n \n \n-BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time) : clientInterface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n+BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time) : m_client_interface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n {\n-    if (clientInterface)\n-        clientInterface->InitMessage(_(\"Loading banlist...\"));\n+    if (m_client_interface)\n+        m_client_interface->InitMessage(_(\"Loading banlist...\"));\n \n     int64_t nStart = GetTimeMillis();\n-    setBannedIsDirty = false;\n+    m_is_dirty = false;\n     banmap_t banmap;\n     if (m_ban_db.Read(banmap)) {\n         SetBanned(banmap); // thread save setter\n@@ -60,19 +60,19 @@ void BanMan::DumpBanlist()\n void BanMan::ClearBanned()\n {\n     {\n-        LOCK(cs_setBanned);\n-        setBanned.clear();\n-        setBannedIsDirty = true;\n+        LOCK(m_cs_banned);\n+        m_banned.clear();\n+        m_is_dirty = true;\n     }\n     DumpBanlist(); //store banlist to disk\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n+    if(m_client_interface)\n+        m_client_interface->BannedListChanged();\n }\n \n bool BanMan::IsBanned(CNetAddr ip)\n {\n-    LOCK(cs_setBanned);\n-    for (const auto& it : setBanned) {\n+    LOCK(m_cs_banned);\n+    for (const auto& it : m_banned) {\n         CSubNet subNet = it.first;\n         CBanEntry banEntry = it.second;\n \n@@ -85,9 +85,9 @@ bool BanMan::IsBanned(CNetAddr ip)\n \n bool BanMan::IsBanned(CSubNet subnet)\n {\n-    LOCK(cs_setBanned);\n-    banmap_t::iterator i = setBanned.find(subnet);\n-    if (i != setBanned.end())\n+    LOCK(m_cs_banned);\n+    banmap_t::iterator i = m_banned.find(subnet);\n+    if (i != m_banned.end())\n     {\n         CBanEntry banEntry = (*i).second;\n         if (GetTime() < banEntry.nBanUntil) {\n@@ -113,16 +113,16 @@ void BanMan::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bant\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n     {\n-        LOCK(cs_setBanned);\n-        if (setBanned[subNet].nBanUntil < banEntry.nBanUntil) {\n-            setBanned[subNet] = banEntry;\n-            setBannedIsDirty = true;\n+        LOCK(m_cs_banned);\n+        if (m_banned[subNet].nBanUntil < banEntry.nBanUntil) {\n+            m_banned[subNet] = banEntry;\n+            m_is_dirty = true;\n         }\n         else\n             return;\n     }\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n+    if(m_client_interface)\n+        m_client_interface->BannedListChanged();\n \n     if(banReason == BanReasonManuallyAdded)\n         DumpBanlist(); //store banlist to disk immediately if user requested ban\n@@ -135,47 +135,47 @@ bool BanMan::Unban(const CNetAddr &addr) {\n \n bool BanMan::Unban(const CSubNet &subNet) {\n     {\n-        LOCK(cs_setBanned);\n-        if (!setBanned.erase(subNet))\n+        LOCK(m_cs_banned);\n+        if (!m_banned.erase(subNet))\n             return false;\n-        setBannedIsDirty = true;\n+        m_is_dirty = true;\n     }\n-    if(clientInterface)\n-        clientInterface->BannedListChanged();\n+    if(m_client_interface)\n+        m_client_interface->BannedListChanged();\n     DumpBanlist(); //store banlist to disk immediately\n     return true;\n }\n \n void BanMan::GetBanned(banmap_t &banMap)\n {\n-    LOCK(cs_setBanned);\n+    LOCK(m_cs_banned);\n     // Sweep the banlist so expired bans are not returned\n     SweepBanned();\n-    banMap = setBanned; //create a thread safe copy\n+    banMap = m_banned; //create a thread safe copy\n }\n \n void BanMan::SetBanned(const banmap_t &banMap)\n {\n-    LOCK(cs_setBanned);\n-    setBanned = banMap;\n-    setBannedIsDirty = true;\n+    LOCK(m_cs_banned);\n+    m_banned = banMap;\n+    m_is_dirty = true;\n }\n \n void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n     bool notifyUI = false;\n     {\n-        LOCK(cs_setBanned);\n-        banmap_t::iterator it = setBanned.begin();\n-        while(it != setBanned.end())\n+        LOCK(m_cs_banned);\n+        banmap_t::iterator it = m_banned.begin();\n+        while(it != m_banned.end())\n         {\n             CSubNet subNet = (*it).first;\n             CBanEntry banEntry = (*it).second;\n             if(now > banEntry.nBanUntil)\n             {\n-                setBanned.erase(it++);\n-                setBannedIsDirty = true;\n+                m_banned.erase(it++);\n+                m_is_dirty = true;\n                 notifyUI = true;\n                 LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, subNet.ToString());\n             }\n@@ -184,19 +184,19 @@ void BanMan::SweepBanned()\n         }\n     }\n     // update UI\n-    if(notifyUI && clientInterface) {\n-        clientInterface->BannedListChanged();\n+    if(notifyUI && m_client_interface) {\n+        m_client_interface->BannedListChanged();\n     }\n }\n \n bool BanMan::BannedSetIsDirty()\n {\n-    LOCK(cs_setBanned);\n-    return setBannedIsDirty;\n+    LOCK(m_cs_banned);\n+    return m_is_dirty;\n }\n \n void BanMan::SetBannedSetDirty(bool dirty)\n {\n-    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n-    setBannedIsDirty = dirty;\n+    LOCK(m_cs_banned); //reuse m_banned lock for the isDirty flag\n+    m_is_dirty = dirty;\n }"
      },
      {
        "sha": "a57bea339e661d1a94dca60e119b37e8dc8e6625",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
        "patch": "@@ -54,10 +54,10 @@ class BanMan\n     //!clean unused entries (if bantime has expired)\n     void SweepBanned();\n \n-    banmap_t setBanned;\n-    CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty;\n-    CClientUIInterface* clientInterface = nullptr;\n+    banmap_t m_banned;\n+    CCriticalSection m_cs_banned;\n+    bool m_is_dirty;\n+    CClientUIInterface* m_client_interface = nullptr;\n     CBanDB m_ban_db;\n     int64_t m_default_ban_time;\n };"
      }
    ]
  },
  {
    "sha": "521ebf37f47591b5bbb964463f28e7bac56b88bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjFlYmYzN2Y0NzU5MWI1YmJiOTY0NDYzZjI4ZTdiYWM1NmI4OGJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-06T20:56:56Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-04-19T23:46:49Z"
      },
      "message": "banman: add thread annotations and mark members const where possible\n\nAlso remove misleading comment. ClearBanned is used by rpc as well.",
      "tree": {
        "sha": "8ed09baf09df7ccac2eeccb335a6f294b15ec559",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed09baf09df7ccac2eeccb335a6f294b15ec559"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/521ebf37f47591b5bbb964463f28e7bac56b88bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/521ebf37f47591b5bbb964463f28e7bac56b88bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/521ebf37f47591b5bbb964463f28e7bac56b88bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/521ebf37f47591b5bbb964463f28e7bac56b88bd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3ba250ef99f54a32d71e2c7b6eda3b24cc41d6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "91727c1806911fff8c78f9868b2381471a44fb89",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/521ebf37f47591b5bbb964463f28e7bac56b88bd/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/521ebf37f47591b5bbb964463f28e7bac56b88bd/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=521ebf37f47591b5bbb964463f28e7bac56b88bd",
        "patch": "@@ -38,7 +38,7 @@ class BanMan\n     BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n     void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void ClearBanned(); // needed for unit testing\n+    void ClearBanned();\n     bool IsBanned(CNetAddr ip);\n     bool IsBanned(CSubNet subnet);\n     bool Unban(const CNetAddr &ip);\n@@ -54,12 +54,12 @@ class BanMan\n     //!clean unused entries (if bantime has expired)\n     void SweepBanned();\n \n-    banmap_t m_banned;\n     CCriticalSection m_cs_banned;\n-    bool m_is_dirty;\n-    CClientUIInterface* m_client_interface = nullptr;\n+    banmap_t m_banned GUARDED_BY(m_cs_banned);\n+    bool m_is_dirty GUARDED_BY(m_cs_banned);\n+    const CClientUIInterface* m_client_interface = nullptr;\n     CBanDB m_ban_db;\n-    int64_t m_default_ban_time;\n+    const int64_t m_default_ban_time;\n };\n \n extern std::unique_ptr<BanMan> g_banman;"
      }
    ]
  }
]