practicalswift,2017-10-06T04:33:36Z,Concept ACK modulo `GUARDED_BY(â€¦)` addition :-),https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334655782,334655782,
JeremyRubin,2017-10-06T14:59:54Z,Concept Ack!,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334780169,334780169,
jonasschnelli,2017-10-07T04:28:53Z,"Nice!\nConcept ACK,.. will review soon.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334909625,334909625,
theuni,2017-10-18T04:40:35Z,Rebased and addressed most of the feedback here.,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-337458551,337458551,
theuni,2017-10-19T18:02:31Z,Addressed @sdaftuar's feedback. I went ahead and changed the Disconnect() in qt/rpcconsole back to using IP rather than nodeid to avoid adding unnecessary behavioral changes in a PR that should otherwise be a code refactor.,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-337988985,337988985,
TheBlueMatt,2017-11-13T18:59:47Z,"Concept ACK, needs rebase.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344021553,344021553,
theuni,2017-11-14T21:31:42Z,rebased.,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344405562,344405562,
theuni,2017-11-14T23:51:06Z,"> In commit net: Break disconnecting out of Ban(),\n> \n> Missing call DisconnectNode() after:\n\nThis is handled by setting fDisconnect directly above.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344439326,344439326,
TheBlueMatt,2017-11-16T16:59:52Z,"Heh, rebase needed for the include change.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-344988604,344988604,
laanwj,2017-11-28T08:19:54Z,"I've added this to high-priority for review, would be nice to move this forward and this blocks further work in this direction.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-347447124,347447124,
theuni,2017-11-28T21:35:34Z,@laanwj Thanks!,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-347671320,347671320,
TheBlueMatt,2017-12-13T17:06:16Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-351456420,351456420,
theuni,2017-12-19T01:41:08Z,"Addressed @TheBlueMatt's review and squashed. Diff from before (minus the rebase to master):\n```patch\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 78c08b1..46e7783 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -2125,4 +2125,2 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n-    nStart = GetTimeMillis();\n-\n     uiInterface.InitMessage(_(""Starting net",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-352613328,352613328,
theuni,2018-03-29T20:06:20Z,"Rebased with only trivial changes, with one exception: https://github.com/bitcoin/bitcoin/pull/11457/commits/2335579f842607557a4742d2ec0749e459270bd0.\n\nAs @TheBlueMatt and @ryanofsky pointed out, it wasn't clear if any behavioral changes were introduced in SendRejectsAndCheckIfBanned, and it turned out that the new code indeed did not match master's behavior exactly, as pointed out by rpc test",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377356118,377356118,
laanwj,2018-03-29T21:47:00Z,utACK 0950d72,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377382545,377382545,
Sjors,2018-03-30T09:06:35Z,Did some light testing on macOS banning and unbanning unsuspecting testnet nodes. Didn't get in trouble.,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-377483673,377483673,
theuni,2018-04-19T23:55:12Z,"rebased. I just shoved g_banman into NodeImpl for now, but obviously we'll want it broken out as a next step.",https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-382917140,382917140,
jimpo,2018-04-20T08:26:28Z,utACK 521ebf3,https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-383023647,383023647,
practicalswift,2017-10-06T04:32:01Z,"What about adding `GUARDED_BY(â€¦)` (see #10866 and #11226) annotations here?\n\nLike this:\n\n```\n    CCriticalSection m_cs_banned;\n    banmap_t m_banned GUARDED_BY(m_cs_banned);\n    bool m_is_dirty GUARDED_BY(m_cs_banned);\n```\n\nNit: The lock was renamed from `cs_setBanned` to `m_cs_banned`. All `CCriticalSection`:s in the code base except `m_cs_callbacks_pending` are named with the",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143107886,143107886,src/banman.h
TheBlueMatt,2017-10-06T19:57:37Z,Shouldnt these technically be in the opposite order? Isnt there otherwise a (supidly rare) race where a new connection can come in and slip behind the ban?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143282072,143282072,src/rpc/net.cpp
jimpo,2017-10-06T19:59:51Z,Make explicit?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143282518,143282518,src/addrdb.h
jimpo,2017-10-06T20:01:30Z,Should this be a class-level comment? (Like placed right above `class BanMan`),https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143282845,143282845,src/banman.h
theuni,2017-10-06T20:15:31Z,"See https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md:\n> Class member variables have a m_ prefix.\n\nSo yes, m_cs_foo is the recommended syntax going forward for member mutexes, I suppose.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143285317,143285317,src/banman.h
theuni,2017-10-06T20:16:22Z,Sure,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143285464,143285464,src/banman.h
theuni,2017-10-06T20:16:28Z,Will do.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143285484,143285484,src/addrdb.h
theuni,2017-10-06T20:27:02Z,">What about adding GUARDED_BY(â€¦) (see #10866 and #11226) annotations here?\n\nWill do. Additionally, this actually needs another mutex for the db. I've been debating whether it should be fixed as part of this PR, but event-driven db flushes can actually collide with the one on a timer. addrman has the same issue, and that may be the cause of some addrman corruption we've seen lately (#11252, #11",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143287393,143287393,src/banman.h
theuni,2017-10-06T20:48:15Z,"Yes, good point. Will fix.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143291015,143291015,src/rpc/net.cpp
promag,2017-10-06T21:47:03Z,"```c++\n#endif // BITCOIN_BANMAN_H\n```",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143301192,143301192,src/banman.h
promag,2017-10-06T21:49:13Z,Use `std::make_unique`.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143301475,143301475,src/init.cpp
promag,2017-10-06T22:09:14Z,Inverting opens another dumb case: ban -> (unban -> connect) -> disconnect ðŸ™„ Do you think `DisconnectNode()` should be called inside `Ban()` while the lock is held?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143304316,143304316,src/rpc/net.cpp
promag,2017-10-06T22:10:28Z,Use `std::make_unique`.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143304477,143304477,src/test/DoS_tests.cpp
theuni,2017-10-06T22:28:36Z,that's c++14 :(,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143306698,143306698,src/init.cpp
theuni,2017-10-06T22:50:58Z,"I don't see how this could reasonably happen. Anyway, it's not a departure from the current behavior.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143308982,143308982,src/rpc/net.cpp
Sjors,2017-10-07T09:50:54Z,Would it make sense to move `ClearBanned()` to a subclass that's only used by the test suite?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143327303,143327303,src/banman.h
practicalswift,2017-10-09T19:29:26Z,A substitute for C++14 `std::make_unique` in the form of `MakeUnique` is added to `util.h` as part of #11043 (see https://github.com/bitcoin/bitcoin/pull/11043/commits/27a54eacc07325e9a10cbea71ab03d87a96679b7) which will hopefully be merged soon :-),https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143557085,143557085,src/init.cpp
theuni,2017-10-09T20:01:13Z,This is a misleading comment that needs to be dropped. This is used by the ```clearbanned``` rpc as well.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143563808,143563808,src/banman.h
sdaftuar,2017-10-18T12:33:50Z,"I think we need to invoke the new DisconnectNode() method that takes a CNetAddr, rather than just the nodeid, in order to keep the behavior the same (ie disconnect all peers on the same subnet)?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145399568,145399568,src/qt/rpcconsole.cpp
sdaftuar,2017-10-18T12:45:12Z,Is this a place where a `constexpr` is preferred over just `const`?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145402177,145402177,src/net.cpp
sdaftuar,2017-10-18T12:47:32Z,"(same question as before, about whether `constexpr` should be preferred?)",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145402746,145402746,src/init.cpp
sdaftuar,2017-10-18T12:52:28Z,"Mostly an aside, since we're already doing it this way with connman, but I'm curious why we're not using shared pointers here instead of this unique_ptr.get() stuff?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145403823,145403823,src/init.cpp
sdaftuar,2017-10-18T12:56:05Z,"Is there a circumstance where g_banman would not exist here?  If so a comment would be nice; if not then I'm wondering if we should `assert` instead, or otherwise enforce a shutdown.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145404743,145404743,src/init.cpp
sdaftuar,2017-10-18T13:03:12Z,"Why do we need this, if the BanMan already dumps its banlist in its destructor?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145406514,145406514,src/net.cpp
sdaftuar,2017-10-18T15:44:24Z,"nit: Does this rpc error change require a release note mention?  If so, we should track this in an issue.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145456651,145456651,src/rpc/net.cpp
sdaftuar,2017-10-18T15:45:19Z,Same comment as before about using nodeid rather than address,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145456944,145456944,src/qt/rpcconsole.cpp
sdaftuar,2017-10-18T15:49:39Z,nit: Consider adding a release-note to do for the rpc error change in this rpc call as well.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145458299,145458299,src/rpc/net.cpp
sdaftuar,2017-10-18T16:01:18Z,"I think we need to pass `gArgs.GetArg(""-bantime"", DEFAULT_MISBEHAVING_BANTIME)` here?  Or else I'm missing how the command line argument gets used after this commit.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145461994,145461994,src/init.cpp
theuni,2017-10-18T16:35:28Z,"Because these aren't intended to be actual globals. We just don't (yet) have the infrastructure to pass them into RPC and qt. Once banman/addrman are split out, I'll be PRing a set of changes that make RPC instantiated. With that done, the ui (rpc/qt/whatever else) will have these interfaces passed in, and they can assume that the pointers are good for their lifetime.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145471394,145471394,src/init.cpp
theuni,2017-10-18T16:37:19Z,"My original thinking was that if we add a -nop2p option (which I'm hoping we can do soon), the bandb would be disabled as well. But thinking about it now, one doesn't exclude the other. So yes, an assert makes more sense here. Will do.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145471972,145471972,src/init.cpp
theuni,2017-10-18T16:37:54Z,"Yep, will change.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145472121,145472121,src/net.cpp
theuni,2017-10-18T16:38:40Z,"Good point, will remove.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145472278,145472278,src/net.cpp
theuni,2017-10-18T16:40:49Z,"Very much so, thanks for catching that.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145472776,145472776,src/init.cpp
theuni,2017-10-18T16:49:27Z,"When accepting an ip as a string from the user I agree. But in this case the request is for a specific node, so I would argue that the id is more in line with what the user would expect.\n\nI don't care hugely either way though.\n\nAs an aside, what we really need here is kick/ban/kick+ban options. But I don't think it's worth adding the complexity?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145474963,145474963,src/qt/rpcconsole.cpp
theuni,2017-10-18T16:56:22Z,"Same response :)\n\nNote that these comments are a bit stale. We used to track down the entry by looking through all node addresses, but now we use the id directly. I'll update those comments independently.\n\nAlso, see the behavior of disconnectSelectedNode above. I think it makes sense to be consistent with that?\n\nFor the sake of not over-complicating this, It may make sense to just keep",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145476777,145476777,src/qt/rpcconsole.cpp
theuni,2017-10-18T16:59:13Z,"I didn't bother with docs because as far as I know, it's been impossible to receive this error in practice because g_connman always exists. It won't be until we have a -nop2p that it's relevant.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145477562,145477562,src/rpc/net.cpp
theuni,2017-10-18T17:00:57Z,"Same as above. These could be asserts for now, but imo we're less likely to forget about these if errors are hooked up in advance.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r145478034,145478034,src/rpc/net.cpp
promag,2017-11-14T22:42:05Z,"In commit `net: Break disconnecting out of Ban()`,\n\nWhy `bool` if the return value is not used?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r150986287,150986287,src/net.cpp
promag,2017-11-14T22:42:42Z,"In commit `net: Break disconnecting out of Ban()`,\n\nNit, add space.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r150986423,150986423,src/qt/rpcconsole.cpp
theuni,2017-11-14T23:41:31Z,Just to be consistent with the others.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r150997377,150997377,src/net.cpp
theuni,2017-11-14T23:50:16Z,Fixed,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r150998819,150998819,src/qt/rpcconsole.cpp
TheBlueMatt,2017-12-14T16:52:14Z,"This is a behavior change when banning a remote IP in net_processing - we no longer disconnect any other connections from the same peer, only block new ones and disconnect the specific connection that made us ban them. Don't know that its a big deal, but might be nice to disconnect-by-ip there, too.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157000260,157000260,src/net.cpp
TheBlueMatt,2017-12-14T16:57:12Z,"Hmm, it seems like our trend is to move things like this into the constructor/init logic for the subsystem/module itself instead of shoving everything in init. I rather liked that trend....",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157001644,157001644,src/init.cpp
TheBlueMatt,2017-12-14T16:59:21Z,This seems like a dead store?,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157002284,157002284,src/net.cpp
TheBlueMatt,2017-12-14T17:04:57Z,"Is it really worth checking? We already check for g_banman further up, are we really anticipating having a g_banman but not a g_connman?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157003948,157003948,src/rpc/net.cpp
TheBlueMatt,2017-12-14T17:07:42Z,"I cant say I really understand the desire to avoid the argparsing dep, when you include <util.h> either way. Seems like useless indirection.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157004696,157004696,src/net.h
theuni,2017-12-19T00:34:40Z,"Good point. Disconnecting the single node seems more correct to me, but I'll revert to the current behavior here to avoid the change.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157638178,157638178,src/net.cpp
theuni,2017-12-19T00:36:30Z,"Yes, will remove.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157638414,157638414,src/net.cpp
theuni,2017-12-19T00:38:48Z,So that we can test independent of the cmdline args.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157638681,157638681,src/net.h
theuni,2017-12-19T00:40:14Z,"Yea, I think it may be useful in the future to run with -p2p=0 in order to view/cleanup your bandb. ",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157638858,157638858,src/rpc/net.cpp
theuni,2017-12-19T00:52:50Z,"Well the schedule in this case is bitcoind specific. There's no reason for BanMan to know about it, and it's not exclusive to net. Throwing in an app-specific schedule would kinda defeat the purpose of breaking it out.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157640452,157640452,src/init.cpp
TheBlueMatt,2017-12-19T03:32:09Z,"Ugh, I mean the other annoying bit is that init.o is, by far, our largest compilation module. Any excuse to pull stuff out of init and put knowledge of a module in that module instead of init seems like the right direction to me. Also because we're telling the scheduler to schedule calling a function in that module based on a timer set in that module's header just seems...weird to me. If we want t",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157657703,157657703,src/init.cpp
ryanofsky,2018-01-04T17:14:20Z,"In commit ""net: Break disconnecting out of Ban()""\n\nMaybe drop this C cast. It doesn't do anything and could cause bugs if class definitions change.\n  \n  \n  \n  ",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159706508,159706508,src/net.cpp
ryanofsky,2018-01-04T18:00:11Z,"https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157000260\n\nIn commit ""net: Break disconnecting out of Ban()""\n\n> This is a behavior change \n\nSeems to be fixed by the new change: https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-352613328, but it would be clearer if commit message also said this commit does not change current behavior.\n  ",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159716790,159716790,src/net.cpp
ryanofsky,2018-01-04T18:09:51Z,"In commit ""net: Break disconnecting out of Ban()""\n\nIs this a behavior change in the IsLocal case? It would be helpful if commit message clarified whether this is supposed be a pure refactoring or a behavior change.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159718738,159718738,src/net_processing.cpp
ryanofsky,2018-01-04T18:16:49Z,"In commit ""tests: remove member connman/peerLogic in TestingSetup""\n\nCould abbreviate `auto connman = MakeUnique<CConnman>(0x1337, 0x1337);`",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159720117,159720117,src/test/DoS_tests.cpp
ryanofsky,2018-01-04T18:20:55Z,"> Use std::make_unique.\n\nIt's not available in c++11, but we do have MakeUnique in src/util.h\n",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159720959,159720959,src/test/DoS_tests.cpp
ryanofsky,2018-01-04T18:36:23Z,"https://github.com/bitcoin/bitcoin/pull/11457#discussion_r157001644\n\nIn commit ""banman: create and split out banman""\n\n> Well the schedule in this case is bitcoind specific. There's no reason for BanMan to know about it, and it's not exclusive to net. Throwing in an app-specific schedule would kinda defeat the purpose of breaking it out.\n\nI'm surprised the scheduler would be considered ",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159724353,159724353,src/init.cpp
jimpo,2018-01-04T19:18:34Z,"Commit [banman: create and split out banman].\n\nI feel like this should be checked outside the surrounding `if (pnode->addr.IsLocal())` statement. Doesn't make sense to log ""not banning local peer"" if it wouldn't have been banned anyway.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159733485,159733485,src/net_processing.cpp
jimpo,2018-01-04T19:23:04Z,"Commit [banman: create and split out banman].\n\n`g_banman` is guaranteed to exist given the check at the top of the function.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159734421,159734421,src/qt/rpcconsole.cpp
jimpo,2018-01-04T19:25:29Z,"Commit [banman: create and split out banman].\n\nPerhaps pull the common `DisconnectNode` code out of this `if/else` statement?",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r159734897,159734897,src/rpc/net.cpp
theuni,2018-01-10T03:46:33Z,"@ryanofsky BanMan doesn't rely on a scheduler to function any more than the wallet does, that's a bitcoind thing. Banman just loads/unloads the bandb when it's told.\n\nImagine a small util to dump/edit the bandb, (which would be completely reasonable). The scheduler would just be a needless dependency.\n\n@TheBlueMatt It's time to create an app context class (and .h/cpp) anyway, that holds th",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160584194,160584194,src/init.cpp
theuni,2018-01-10T03:49:25Z,sure,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160584448,160584448,src/net.cpp
theuni,2018-01-10T03:53:13Z,"good point, will fix.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160584782,160584782,src/net_processing.cpp
theuni,2018-01-10T04:06:40Z,"I'm not sure what the behavior change would be, so I guess not :)",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160585955,160585955,src/net_processing.cpp
theuni,2018-01-10T04:07:33Z,"Yep, will fix.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160586025,160586025,src/qt/rpcconsole.cpp
theuni,2018-01-10T04:11:34Z,"One is a subnet, the other is an address. CSubNet is a subclass of CNetAddr, so we could potentially store a generic one, but imo duplicating the disconnect is more straightforward.",https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160586393,160586393,src/rpc/net.cpp
theuni,2018-01-10T04:12:38Z,will do,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r160586473,160586473,src/test/DoS_tests.cpp
jimpo,2018-04-02T16:59:50Z,BanMan still needs class-level comment.,https://github.com/bitcoin/bitcoin/pull/11457#discussion_r178589653,178589653,src/banman.h
