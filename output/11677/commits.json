[
  {
    "sha": "fafdad0d461330aee7a17db57a9d8f25906203cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZkYWQwZDQ2MTMzMGFlZTdhMTdkYjU3YTlkOGYyNTkwNjIwM2Nj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:28:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-13T22:43:39Z"
      },
      "message": "qa: Remove unused NodeConn members",
      "tree": {
        "sha": "d55171e131d45c0740c22e3f864aba0c26051bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d55171e131d45c0740c22e3f864aba0c26051bd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafdad0d461330aee7a17db57a9d8f25906203cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafdad0d461330aee7a17db57a9d8f25906203cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafdad0d461330aee7a17db57a9d8f25906203cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafdad0d461330aee7a17db57a9d8f25906203cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e468994fbb349e8eefc996954a31a67a34aaa15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e468994fbb349e8eefc996954a31a67a34aaa15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e468994fbb349e8eefc996954a31a67a34aaa15"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b940bc40966a8a54011db4204a08992b612ebb62",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -32,9 +32,10 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n+    def __init__(self, rpc):\n         super().__init__()\n         self.getdataset = set()\n+        self.rpc = rpc\n \n     def on_getdata(self, conn, message):\n         for inv in message.inv:\n@@ -73,7 +74,7 @@ def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n             tx_message = msg_witness_tx(tx)\n         self.send_message(tx_message)\n         self.sync_with_ping()\n-        assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+        assert_equal(tx.hash in self.rpc.getrawmempool(), accepted)\n         if (reason != None and not accepted):\n             # Check the rejection reason as well.\n             with mininode_lock:\n@@ -86,7 +87,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n         else:\n             self.send_message(msg_block(block))\n         self.sync_with_ping()\n-        assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n+        assert_equal(self.rpc.getbestblockhash() == block.hash, accepted)\n \n # Used to keep track of anyone-can-spend outputs that we can use in the tests\n class UTXO():\n@@ -1869,11 +1870,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestNode(self.nodes[0].rpc), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestNode(self.nodes[1].rpc), services=NODE_NETWORK|NODE_WITNESS)\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "723826bae4c7008d24fb7e9d459983f0b42e1dff",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -177,7 +177,7 @@ def add_all_connections(self, nodes):\n             # Create a p2p connection to each node\n             test_node = TestNode(self.block_store, self.tx_store)\n             self.test_nodes.append(test_node)\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n             test_node.add_connection(self.connections[-1])"
      },
      {
        "sha": "24ee09b81c272cee2fc608e01da7da42a5332a9e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -1420,7 +1420,6 @@ def on_ping(self, conn, message):\n         conn.send_message(msg_pong(message.nonce))\n \n     def on_verack(self, conn, message):\n-        conn.ver_recv = conn.ver_send\n         self.verack_received = True\n \n     def on_version(self, conn, message):\n@@ -1516,16 +1515,14 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n+    def __init__(self, dstaddr, dstport, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n         self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n         self.sendbuf = b\"\"\n         self.recvbuf = b\"\"\n-        self.ver_send = 209\n-        self.ver_recv = 209\n         self.last_sent = 0\n         self.state = \"connecting\"\n         self.network = net\n@@ -1549,7 +1546,6 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n             self.connect((dstaddr, dstport))\n         except:\n             self.handle_close()\n-        self.rpc = rpc\n \n     def handle_connect(self):\n         if self.state != \"connected\":"
      },
      {
        "sha": "9c6ea9a83bbab1e4a73aa2c54afedf3d8a1178dc",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafdad0d461330aee7a17db57a9d8f25906203cc/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fafdad0d461330aee7a17db57a9d8f25906203cc",
        "patch": "@@ -168,7 +168,7 @@ def add_p2p_connection(self, p2p_conn, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n         self.p2ps.append(p2p_conn)\n-        kwargs.update({'rpc': self.rpc, 'callback': p2p_conn})\n+        kwargs.update({'callback': p2p_conn})\n         p2p_conn.add_connection(NodeConn(**kwargs))\n \n         return p2p_conn"
      }
    ]
  }
]