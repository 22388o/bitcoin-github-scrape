hebasto,2020-03-16 08:46:35,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-599413825,599413825,
hebasto,2020-03-16 08:48:58,"> However, an alternative solution seems to be to just use `gmtime_s()`\n> instead, when compiling with `mingw-w64`, as `gmtime_r()` [just wraps `gmtime_s()` anyways](https://github.com/mirror/mingw-w64/blob/7c03b11bf173944679102bbe0ac061842e2f594b/mingw-w64-headers/crt/time.h#L284).\n\nDoes this alternative solution has any downsides?\n\n",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-599414950,599414950,
practicalswift,2020-03-16 11:22:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-599482837,599482837,
DrahtBot,2020-03-17 06:16:06,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 86623873095f8d73fd28ad323ed3d06e20433176<br>(master) | commit 5794c4e06a4e8c9bff1a4292c23ce4a2e2508eea<br>(master and this pull) |\n|--|--|--|\n| bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz | [`184a2e3f976d1afe...`](https://drahtbot.space/gitian/bitcoin/bitcoin/86623873095f8d73fd28ad323ed3d06e20433176/bitcoin-0.19.99-,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-599896802,599896802,
dongcarl,2020-03-17 19:29:11,"Did a bit more digging. Here's what I found:\n\n[This commmit](https://github.com/mirror/mingw-w64/commit/69effce76945e75711e8e3fefaf3a8826ef7a66d) is the one that caused the change in behaviour.\n\nThere's a very short mailing list thread about it [here](https://sourceforge.net/p/mingw-w64/mailman/message/36638299/).\n\nMy conversation with the author of the commit on IRC:\n```\n15:02 <do",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600256414,600256414,
MarcoFalke,2020-03-17 20:32:22,"Looks like this makes the include order of headers more resilient and fixes a bug I was running in to a year ago: https://github.com/bitcoin/bitcoin/pull/16046/files#r285601479\n\nIf you feel like, you might sort the includes in the header now:\n\n```diff\ndiff --git a/src/util/time.h b/src/util/time.h\nindex 77de1e047d..a8c06ef350 100644\n--- a/src/util/time.h\n+++ b/src/util/time.h\n@@ ",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600282858,600282858,
dongcarl,2020-03-17 22:35:11,"If I'm thinking about this the right way, your diff implies that previously the `#ifdef _MSC_VER` would fail, and branch to the `#else`, which used `gmtime_r`, which would be fine because it was defined by default in mingw-w64.\n\nIf `#ifdef _MSC_VER` is how we detect if we're building for windows, and it's failing, then perhaps there are other places in the codebase where this detection needs t",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600333936,600333936,
fanquake,2020-03-18 09:21:16,"> If you feel like, you might sort the includes in the header now:\n\nDone.\n\n> If #ifdef _MSC_VER is how we detect if we're building for windows, and it's failing, then perhaps there are other places in the codebase where this detection needs to be fixed?\n\nI've looked into this, and there are some cases where we are using `_MSC_VER` where we  might be running into unexpected behavior. I ",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600510925,600510925,
hebasto,2020-03-18 13:55:16,"> Something has changed in the mingw-w64 headers such that we\n> no-longer compile when using 7.0.0.\n\nInteresting why master could be built successfully with Ubuntu's [g++-mingw-w64 7.3.0](https://packages.ubuntu.com/bionic/g++-mingw-w64)?",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600637292,600637292,
fanquake,2020-03-18 13:58:06,"> Interesting why master could be built successfully with Ubuntu's g++-mingw-w64 7.3.0?\n\nThe version of `mingw-w64` being used is [5.0.0](https://packages.ubuntu.com/bionic/mingw-w64). `7.3.0` is the version of GCC.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600638695,600638695,
dongcarl,2020-03-18 17:40:26,"From #bitcoin-builds meeting notes today: We should investigate how to detect features (i.e. check for function availability at configure time), rather than detecting platforms. This might be more robust.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600769523,600769523,
MarcoFalke,2020-03-18 17:56:05,@dongcarl Is this a general advise/issue or a blocker on this specific patch set?,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600777055,600777055,
dongcarl,2020-03-18 21:50:48,"@MarcoFalke I think it's a blocker while we investigate if feature detection is the right path take going forward, no point merging this then changing right after (unless the release schedule dictates?)",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600876705,600876705,
Empact,2020-03-18 22:27:04,"Here's an alternative: https://github.com/bitcoin/bitcoin/compare/master...Empact:2020-03-gmtime-config\n\nNote I haven't run it on windows/mingw, and I'm not sure how to get the test to distinguish between MSC-style `gmtime_s` and C-standard-style `gmtime_s` - i.e. I doubt the existing casting-based approach.\n\nEdit: and another more succinct alternative: https://github.com/bitcoin/bitcoin/c",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-600890253,600890253,
sipsorcery,2020-03-19 20:30:28,ACK 1b801e770477e756d67402970694bca73fa0ac7f.,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-601401785,601401785,
laanwj,2020-03-25 15:40:28,"Using the windows function on windows (instead of mingw's wrapper) makes sense, imo.\n",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-603913294,603913294,
dongcarl,2020-04-01 01:51:04,"Hmmm, I think perhaps what we want to do is similar to what's being done here: https://github.com/maru/libmicrohttpd-http2/blob/316af7c06537e524c6ef02bc1d5f59b39af7d1d1/configure.ac#L1033-L1082\n\nIt's feature-based detection, and we'll have clarity between `HAVE_C11_GMTIME_S`, `HAVE_W32_GMTIME_S`, and `HAVE_GMTIME_R`.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-606979003,606979003,
laanwj,2020-04-01 10:21:55,"Yeah, that's another way.\nI wish this kind of basic functionality was standardized by now. This comes up so often.\n\n-----\n\nIf we still want this for 0.20, we need to make a decision here quickly though. I'm sorry for starting a bikeshed :laughing: ",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607165151,607165151,
dongcarl,2020-04-01 17:23:13,"Yeah I think we should go with @Empact's https://github.com/bitcoin/bitcoin/compare/master...Empact:2020-03-gmtime-config, it's feature-based detection, and errors at configure-time if we don't support the platform instead of error-ing at make-time.\n\nPerhaps the error message should read ""both gmtime_r and MSC-style gmtime_s are missing"" for disambiguation.\n\nPing @fanquake\n\n-----\n\n",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607383174,607383174,
fanquake,2020-04-02 04:06:37,"> Yeah I think we should go with @Empact's\n\nI'm taking a look at this, and it doesn't quite work as expected. The `AC_MSG_CHECKING` output doesn't actually get printed in the `gmtime_s` success case. However I think we can use this once that is fixed and messages are adjusted as required.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607609069,607609069,
fanquake,2020-04-02 05:50:24,"> doesn't actually get printed in the gmtime_s success case.\n\nMaybe I was just imaging this.. Have pushed up some new changes.\n\nTested on macOS:\n```bash\nchecking for gmtime_r... yes\n```\n\nmingw-w64 cross compile:\n```bash\nchecking for gmtime_r... no\nchecking for gmtime_s... yes\n```\n\ndebian:\n```bash\nchecking for gmtime_r... yes\n```\n\nMSVC âœ… ",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607635327,607635327,
Empact,2020-04-02 08:54:16,"Note one thing I have not tested with this implementation is how it operates if gmtime_r is not present, but C11-style gmtime_s is.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607713451,607713451,
laanwj,2020-04-02 10:46:47,ACK a46484c8b3715725f5dc0b8ad1bf921880ed9af1,https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607769730,607769730,
theuni,2020-04-02 15:23:34,"Post-merge ACK. Thanks for making this test-based, I think this is a nice improvement.",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-607913186,607913186,
fanquake,2020-04-03 12:22:37,"> To make things clear about cross compiling on systems with pre-7.0 mingw-w64 headers, e.g., on bionic:\n\n@hebasto the breakdown is:\n\n| commit | Debian Buster ([mingw-w64 6.0.0](https://packages.debian.org/source/buster/mingw-w64)) | Debian Bullseye ([mingw-w64 7.0.0](https://packages.debian.org/source/bullseye/mingw-w64)) |\n| - | - | - |\n| 5c1ba3a10a18c6edee20f27f3609ffbbbaa2e8f3~1 | ",https://github.com/bitcoin/bitcoin/pull/18358#issuecomment-608403570,608403570,
laanwj,2020-03-25 15:40:52,can't we change this to `#ifdef WIN32` ?,https://github.com/bitcoin/bitcoin/pull/18358#discussion_r397956019,397956019,src/util/time.cpp
