[
  {
    "sha": "70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDk0NmU3ZmVlNTQzMjNjZTZhNWVhOGFlYjM3N2UyYzdjNzkwYmM2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-02-19T22:00:45Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-29T14:15:23Z"
      },
      "message": "Replace CScriptID and CKeyID in CTxDestination with dedicated types",
      "tree": {
        "sha": "8214716fc7275e3b32bc0c28bdfab5df44ad6a4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8214716fc7275e3b32bc0c28bdfab5df44ad6a4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caceff55465e392dfd1b0ba9225653b64d8518f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caceff55465e392dfd1b0ba9225653b64d8518f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caceff55465e392dfd1b0ba9225653b64d8518f1"
      }
    ],
    "stats": {
      "total": 346,
      "additions": 185,
      "deletions": 161
    },
    "files": [
      {
        "sha": "1041a2230359096540886e247479067cd9536393",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -39,9 +39,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21 * COIN;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n     dummyTransactions[1].vout[1].nValue = 22 * COIN;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(PKHash(key[3].GetPubKey()));\n     AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n \n     return dummyTransactions;"
      },
      {
        "sha": "ac1d62a8f4243da2d06054b33afe085b795c4108",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -323,7 +323,7 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n     }\n     if (bScriptHash) {\n         // Get the ID for the script, and then construct a P2SH destination for it.\n-        scriptPubKey = GetScriptForDestination(CScriptID(scriptPubKey));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(scriptPubKey));\n     }\n \n     // construct TxOut, append to transaction output list\n@@ -397,7 +397,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n                         \"redeemScript exceeds size limit: %d > %d\", scriptPubKey.size(), MAX_SCRIPT_ELEMENT_SIZE));\n         }\n         // Get the ID for the script, and then construct a P2SH destination for it.\n-        scriptPubKey = GetScriptForDestination(CScriptID(scriptPubKey));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(scriptPubKey));\n     }\n \n     // construct TxOut, append to transaction output list\n@@ -469,7 +469,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& str\n             throw std::runtime_error(strprintf(\n                         \"redeemScript exceeds size limit: %d > %d\", scriptPubKey.size(), MAX_SCRIPT_ELEMENT_SIZE));\n         }\n-        scriptPubKey = GetScriptForDestination(CScriptID(scriptPubKey));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(scriptPubKey));\n     }\n \n     // construct TxOut, append to transaction output list"
      },
      {
        "sha": "cd41a9354994c57265ece67c6a2f15ac3a8697c3",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -26,14 +26,14 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n public:\n     explicit DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    std::string operator()(const CKeyID& id) const\n+    std::string operator()(const PKHash& id) const\n     {\n         std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n         data.insert(data.end(), id.begin(), id.end());\n         return EncodeBase58Check(data);\n     }\n \n-    std::string operator()(const CScriptID& id) const\n+    std::string operator()(const ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n         data.insert(data.end(), id.begin(), id.end());\n@@ -81,14 +81,14 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n         if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n             std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n-            return CKeyID(hash);\n+            return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n         // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n         if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n             std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n-            return CScriptID(hash);\n+            return ScriptHash(hash);\n         }\n     }\n     data.clear();"
      },
      {
        "sha": "f6d19416cea6e829f4b2f30ce6d46c51229cbf32",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -178,16 +178,17 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.\n-    if (auto id = boost::get<CKeyID>(&dest)) {\n-        return *id;\n+    if (auto id = boost::get<PKHash>(&dest)) {\n+        return CKeyID(*id);\n     }\n     if (auto witness_id = boost::get<WitnessV0KeyHash>(&dest)) {\n         return CKeyID(*witness_id);\n     }\n-    if (auto script_id = boost::get<CScriptID>(&dest)) {\n+    if (auto script_hash = boost::get<ScriptHash>(&dest)) {\n         CScript script;\n+        CScriptID script_id(*script_hash);\n         CTxDestination inner_dest;\n-        if (store.GetCScript(*script_id, script) && ExtractDestination(script, inner_dest)) {\n+        if (store.GetCScript(script_id, script) && ExtractDestination(script, inner_dest)) {\n             if (auto inner_witness_id = boost::get<WitnessV0KeyHash>(&inner_dest)) {\n                 return CKeyID(*inner_witness_id);\n             }"
      },
      {
        "sha": "73ffb801f22e62f12802ba22aae06ffc28228922",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -45,14 +45,14 @@ const std::string& FormatOutputType(OutputType type)\n CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n {\n     switch (type) {\n-    case OutputType::LEGACY: return key.GetID();\n+    case OutputType::LEGACY: return PKHash(key);\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n-        if (!key.IsCompressed()) return key.GetID();\n-        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        if (!key.IsCompressed()) return PKHash(key);\n+        CTxDestination witdest = WitnessV0KeyHash(PKHash(key));\n         CScript witprog = GetScriptForDestination(witdest);\n         if (type == OutputType::P2SH_SEGWIT) {\n-            return CScriptID(witprog);\n+            return ScriptHash(witprog);\n         } else {\n             return witdest;\n         }\n@@ -63,10 +63,10 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n \n std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n {\n-    CKeyID keyid = key.GetID();\n+    PKHash keyid(key);\n     if (key.IsCompressed()) {\n         CTxDestination segwit = WitnessV0KeyHash(keyid);\n-        CTxDestination p2sh = CScriptID(GetScriptForDestination(segwit));\n+        CTxDestination p2sh = ScriptHash(GetScriptForDestination(segwit));\n         return std::vector<CTxDestination>{std::move(keyid), std::move(p2sh), std::move(segwit)};\n     } else {\n         return std::vector<CTxDestination>{std::move(keyid)};\n@@ -80,19 +80,19 @@ CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript&\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n     case OutputType::LEGACY:\n-        return CScriptID(script);\n+        return ScriptHash(script);\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return CScriptID(script);\n+        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n         // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n         keystore.AddCScript(witprog);\n         if (type == OutputType::BECH32) {\n             return witdest;\n         } else {\n-            return CScriptID(witprog);\n+            return ScriptHash(witprog);\n         }\n     }\n     default: assert(false);"
      },
      {
        "sha": "6c9bae7673fac6bfcd9c593a5c84843c900b82f2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -471,8 +471,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else if(ExtractDestination(out.txout.scriptPubKey, address))\n         {\n             CPubKey pubkey;\n-            CKeyID *keyid = boost::get<CKeyID>(&address);\n-            if (keyid && model->wallet().getPubKey(*keyid, pubkey))\n+            PKHash *pkhash = boost::get<PKHash>(&address);\n+            if (pkhash && model->wallet().getPubKey(CKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n             }"
      },
      {
        "sha": "71f5f2ae75d1337db12869255cda238ccd1a8565",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -120,8 +120,8 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         ui->statusLabel_SM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    const CKeyID* keyID = boost::get<CKeyID>(&destination);\n-    if (!keyID) {\n+    const PKHash* pkhash = boost::get<PKHash>(&destination);\n+    if (!pkhash) {\n         ui->addressIn_SM->setValid(false);\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n@@ -137,7 +137,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!model->wallet().getPrivKey(*keyID, key))\n+    if (!model->wallet().getPrivKey(CKeyID(*pkhash), key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n@@ -198,7 +198,7 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         ui->statusLabel_VM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    if (!boost::get<CKeyID>(&destination)) {\n+    if (!boost::get<PKHash>(&destination)) {\n         ui->addressIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_VM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n@@ -229,7 +229,7 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         return;\n     }\n \n-    if (!(CTxDestination(pubkey.GetID()) == destination)) {\n+    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_VM->setText(QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\"));\n         return;"
      },
      {
        "sha": "5b3836dbb2153212312b52d0ec42b6e7504e0343",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -169,8 +169,8 @@ void TestGUI()\n     // Send two transactions, and verify they are added to transaction list.\n     TransactionTableModel* transactionTableModel = walletModel.getTransactionTableModel();\n     QCOMPARE(transactionTableModel->rowCount({}), 105);\n-    uint256 txid1 = SendCoins(*wallet.get(), sendCoinsDialog, CKeyID(), 5 * COIN, false /* rbf */);\n-    uint256 txid2 = SendCoins(*wallet.get(), sendCoinsDialog, CKeyID(), 10 * COIN, true /* rbf */);\n+    uint256 txid1 = SendCoins(*wallet.get(), sendCoinsDialog, PKHash(), 5 * COIN, false /* rbf */);\n+    uint256 txid2 = SendCoins(*wallet.get(), sendCoinsDialog, PKHash(), 10 * COIN, true /* rbf */);\n     QCOMPARE(transactionTableModel->rowCount({}), 107);\n     QVERIFY(FindTx(*transactionTableModel, txid1).isValid());\n     QVERIFY(FindTx(*transactionTableModel, txid2).isValid());"
      },
      {
        "sha": "7327d6a1b098f86f6feceafaad49bcc87ad0368b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -307,8 +307,8 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     }\n \n-    const CKeyID *keyID = boost::get<CKeyID>(&destination);\n-    if (!keyID) {\n+    const PKHash *pkhash = boost::get<PKHash>(&destination);\n+    if (!pkhash) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n@@ -326,7 +326,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n         return false;\n \n-    return (pubkey.GetID() == *keyID);\n+    return (pubkey.GetID() == *pkhash);\n }\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)"
      },
      {
        "sha": "0f784afcd35c6400baf1dcc429ef9e336bc89548",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -571,7 +571,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n+        r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n         // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n         // is a witness program, don't return addresses for a segwit programs.\n         if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n@@ -598,7 +598,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                 segwitScr = GetScriptForDestination(WitnessV0ScriptHash(script));\n             }\n             ScriptPubKeyToUniv(segwitScr, sr, /* fIncludeHex */ true);\n-            sr.pushKV(\"p2sh-segwit\", EncodeDestination(CScriptID(segwitScr)));\n+            sr.pushKV(\"p2sh-segwit\", EncodeDestination(ScriptHash(segwitScr)));\n             r.pushKV(\"segwit\", sr);\n         }\n     }"
      },
      {
        "sha": "e329ff7e46e5bb61f2be9883fcc75889dba1a435",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -181,15 +181,15 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         return UniValue(UniValue::VOBJ);\n     }\n \n-    UniValue operator()(const CKeyID& keyID) const\n+    UniValue operator()(const PKHash& keyID) const\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"isscript\", false);\n         obj.pushKV(\"iswitness\", false);\n         return obj;\n     }\n \n-    UniValue operator()(const CScriptID& scriptID) const\n+    UniValue operator()(const ScriptHash& scriptID) const\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"isscript\", true);"
      },
      {
        "sha": "9be87fabb03047c583706dfb662e2df7804f8023",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -514,7 +514,7 @@ class PKHDescriptor final : public DescriptorImpl\n     {\n         CKeyID id = keys[0].GetID();\n         out.pubkeys.emplace(id, keys[0]);\n-        return Singleton(GetScriptForDestination(id));\n+        return Singleton(GetScriptForDestination(PKHash(id)));\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, \"pkh\") {}\n@@ -544,12 +544,12 @@ class ComboDescriptor final : public DescriptorImpl\n         CKeyID id = keys[0].GetID();\n         out.pubkeys.emplace(id, keys[0]);\n         ret.emplace_back(GetScriptForRawPubKey(keys[0])); // P2PK\n-        ret.emplace_back(GetScriptForDestination(id)); // P2PKH\n+        ret.emplace_back(GetScriptForDestination(PKHash(id))); // P2PKH\n         if (keys[0].IsCompressed()) {\n             CScript p2wpkh = GetScriptForDestination(WitnessV0KeyHash(id));\n             out.scripts.emplace(CScriptID(p2wpkh), p2wpkh);\n             ret.emplace_back(p2wpkh);\n-            ret.emplace_back(GetScriptForDestination(CScriptID(p2wpkh))); // P2SH-P2WPKH\n+            ret.emplace_back(GetScriptForDestination(ScriptHash(p2wpkh))); // P2SH-P2WPKH\n         }\n         return ret;\n     }\n@@ -572,7 +572,7 @@ class MultisigDescriptor final : public DescriptorImpl\n class SHDescriptor final : public DescriptorImpl\n {\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(CScriptID(*script))); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(ScriptHash(*script))); }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n };"
      },
      {
        "sha": "75fc2e84f1b297c2144e045d1be23c4fc208ab7c",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -90,7 +90,7 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n             // This also applies to the P2WSH case.\n             break;\n         }\n-        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n         break;\n     }\n     case TX_PUBKEYHASH:"
      },
      {
        "sha": "91a301bcdf5f70ea4dc7cefd85911a542a8bf723",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -19,6 +19,10 @@ unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}\n \n+ScriptHash::ScriptHash(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}\n+\n+PKHash::PKHash(const CPubKey& pubkey) : uint160(pubkey.GetID()) {}\n+\n WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n {\n     CSHA256().Write(in.data(), in.size()).Finalize(begin());\n@@ -162,17 +166,17 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n         if (!pubKey.IsValid())\n             return false;\n \n-        addressRet = pubKey.GetID();\n+        addressRet = PKHash(pubKey);\n         return true;\n     }\n     else if (whichType == TX_PUBKEYHASH)\n     {\n-        addressRet = CKeyID(uint160(vSolutions[0]));\n+        addressRet = PKHash(uint160(vSolutions[0]));\n         return true;\n     }\n     else if (whichType == TX_SCRIPTHASH)\n     {\n-        addressRet = CScriptID(uint160(vSolutions[0]));\n+        addressRet = ScriptHash(uint160(vSolutions[0]));\n         return true;\n     } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n         WitnessV0KeyHash hash;\n@@ -217,7 +221,7 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n             if (!pubKey.IsValid())\n                 continue;\n \n-            CTxDestination address = pubKey.GetID();\n+            CTxDestination address = PKHash(pubKey);\n             addressRet.push_back(address);\n         }\n \n@@ -250,13 +254,13 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         return false;\n     }\n \n-    bool operator()(const CKeyID &keyID) const {\n+    bool operator()(const PKHash &keyID) const {\n         script->clear();\n         *script << OP_DUP << OP_HASH160 << ToByteVector(keyID) << OP_EQUALVERIFY << OP_CHECKSIG;\n         return true;\n     }\n \n-    bool operator()(const CScriptID &scriptID) const {\n+    bool operator()(const ScriptHash &scriptID) const {\n         script->clear();\n         *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n         return true;"
      },
      {
        "sha": "e45e2d92cc15c09cbd263522800c2c50b376f1f8",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -73,6 +73,22 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct PKHash : public uint160\n+{\n+    PKHash() : uint160() {}\n+    explicit PKHash(const uint160& hash) : uint160(hash) {}\n+    explicit PKHash(const CPubKey& pubkey);\n+    using uint160::uint160;\n+};\n+\n+struct ScriptHash : public uint160\n+{\n+    ScriptHash() : uint160() {}\n+    explicit ScriptHash(const uint160& hash) : uint160(hash) {}\n+    explicit ScriptHash(const CScript& script);\n+    using uint160::uint160;\n+};\n+\n struct WitnessV0ScriptHash : public uint256\n {\n     WitnessV0ScriptHash() : uint256() {}\n@@ -113,14 +129,14 @@ struct WitnessUnknown\n /**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination (P2PKH)\n- *  * CScriptID: TX_SCRIPTHASH destination (P2SH)\n+ *  * PKHash: TX_PUBKEYHASH destination (P2PKH)\n+ *  * ScriptHash: TX_SCRIPTHASH destination (P2SH)\n  *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)\n  *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)\n  *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n+typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);"
      },
      {
        "sha": "7793466d6bd328e1161846a43a49281df0f76f89",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -166,7 +166,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         LOCK(cs_main);\n         tip = chainActive.Tip();\n     }\n-    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    CScript coinbase_script_pub_key = GetScriptForDestination(PKHash(coinbaseKey.GetPubKey()));\n     std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n     BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n     BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));"
      },
      {
        "sha": "665975ca678154761e3bc9c11c1a6d84ce28da8b",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -485,7 +485,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     BOOST_CHECK_EQUAL(cc1.fCoinBase, false);\n     BOOST_CHECK_EQUAL(cc1.nHeight, 203998U);\n     BOOST_CHECK_EQUAL(cc1.out.nValue, CAmount{60000000000});\n-    BOOST_CHECK_EQUAL(HexStr(cc1.out.scriptPubKey), HexStr(GetScriptForDestination(CKeyID(uint160(ParseHex(\"816115944e077fe7c803cfa57f29b36bf87c1d35\"))))));\n+    BOOST_CHECK_EQUAL(HexStr(cc1.out.scriptPubKey), HexStr(GetScriptForDestination(PKHash(uint160(ParseHex(\"816115944e077fe7c803cfa57f29b36bf87c1d35\"))))));\n \n     // Good example\n     CDataStream ss2(ParseHex(\"8ddf77bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\"), SER_DISK, CLIENT_VERSION);\n@@ -494,7 +494,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     BOOST_CHECK_EQUAL(cc2.fCoinBase, true);\n     BOOST_CHECK_EQUAL(cc2.nHeight, 120891U);\n     BOOST_CHECK_EQUAL(cc2.out.nValue, 110397);\n-    BOOST_CHECK_EQUAL(HexStr(cc2.out.scriptPubKey), HexStr(GetScriptForDestination(CKeyID(uint160(ParseHex(\"8c988f1a4a4de2161e0f50aac7f17e7f9555caa4\"))))));\n+    BOOST_CHECK_EQUAL(HexStr(cc2.out.scriptPubKey), HexStr(GetScriptForDestination(PKHash(uint160(ParseHex(\"8c988f1a4a4de2161e0f50aac7f17e7f9555caa4\"))))));\n \n     // Smallest possible example\n     CDataStream ss3(ParseHex(\"000006\"), SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "c7f6693c9baa8d47cc6353e1d7f304ce63044010",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -381,7 +381,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n         AddOrphanTx(MakeTransactionRef(tx), i);\n     }\n@@ -397,7 +397,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].prevout.hash = txPrev->GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n         BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n \n         AddOrphanTx(MakeTransactionRef(tx), i);\n@@ -411,7 +411,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n         tx.vin.resize(2777);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {"
      },
      {
        "sha": "ceed73b14dc7d52f3ca3cdc66522d32bc4e6c9d0",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -68,10 +68,10 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(!key2C.VerifyPubKey(pubkey2));\n     BOOST_CHECK(key2C.VerifyPubKey(pubkey2C));\n \n-    BOOST_CHECK(DecodeDestination(addr1)  == CTxDestination(pubkey1.GetID()));\n-    BOOST_CHECK(DecodeDestination(addr2)  == CTxDestination(pubkey2.GetID()));\n-    BOOST_CHECK(DecodeDestination(addr1C) == CTxDestination(pubkey1C.GetID()));\n-    BOOST_CHECK(DecodeDestination(addr2C) == CTxDestination(pubkey2C.GetID()));\n+    BOOST_CHECK(DecodeDestination(addr1)  == CTxDestination(PKHash(pubkey1)));\n+    BOOST_CHECK(DecodeDestination(addr2)  == CTxDestination(PKHash(pubkey2)));\n+    BOOST_CHECK(DecodeDestination(addr1C) == CTxDestination(PKHash(pubkey1C)));\n+    BOOST_CHECK(DecodeDestination(addr2C) == CTxDestination(PKHash(pubkey2C)));\n \n     for (int n=0; n<16; n++)\n     {"
      },
      {
        "sha": "d1f92ae43cea736bcdaae635cc3779576a53cc25",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -399,7 +399,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;\n     script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash(script));\n     hash = tx.GetHash();\n     mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;"
      },
      {
        "sha": "9c4606f1b3070499f4bbc4f5383a41a607bb6cfe",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -69,14 +69,14 @@ BOOST_AUTO_TEST_CASE(sign)\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n     standardScripts[0] << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    standardScripts[1] = GetScriptForDestination(key[1].GetPubKey().GetID());\n+    standardScripts[1] = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n     standardScripts[2] << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    standardScripts[3] = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    standardScripts[3] = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK(keystore.AddCScript(standardScripts[i]));\n-        evalScripts[i] = GetScriptForDestination(CScriptID(standardScripts[i]));\n+        evalScripts[i] = GetScriptForDestination(ScriptHash(standardScripts[i]));\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -131,7 +131,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     CScript invalidAsScript;\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n-    CScript p2sh = GetScriptForDestination(CScriptID(invalidAsScript));\n+    CScript p2sh = GetScriptForDestination(ScriptHash(invalidAsScript));\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -142,7 +142,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n     // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n-    CScript p2sh2 = GetScriptForDestination(CScriptID(p2sh));\n+    CScript p2sh2 = GetScriptForDestination(ScriptHash(p2sh));\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -165,15 +165,15 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CScript inner[4];\n-    inner[0] = GetScriptForDestination(key[0].GetPubKey().GetID());\n+    inner[0] = GetScriptForDestination(PKHash(key[0].GetPubKey()));\n     inner[1] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n     inner[2] = GetScriptForMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n     inner[3] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n \n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i] = GetScriptForDestination(CScriptID(inner[i]));\n+        outer[i] = GetScriptForDestination(ScriptHash(inner[i]));\n         BOOST_CHECK(keystore.AddCScript(inner[i]));\n     }\n \n@@ -253,7 +253,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     CScript scriptSig;\n     scriptSig << Serialize(notValid);\n \n-    CScript fund = GetScriptForDestination(CScriptID(notValid));\n+    CScript fund = GetScriptForDestination(ScriptHash(notValid));\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -284,11 +284,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout.resize(7);\n \n     // First three are standard:\n-    CScript pay1 = GetScriptForDestination(key[0].GetPubKey().GetID());\n+    CScript pay1 = GetScriptForDestination(PKHash(key[0].GetPubKey()));\n     BOOST_CHECK(keystore.AddCScript(pay1));\n     CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(pay1)); // P2SH (OP_CHECKSIG)\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash(pay1)); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n     txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_2 << ToByteVector(key[3].GetPubKey()) << ToByteVector(key[4].GetPubKey()) << ToByteVector(key[5].GetPubKey());\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     BOOST_CHECK(keystore.AddCScript(oneAndTwo));\n-    txFrom.vout[3].scriptPubKey = GetScriptForDestination(CScriptID(oneAndTwo));\n+    txFrom.vout[3].scriptPubKey = GetScriptForDestination(ScriptHash(oneAndTwo));\n     txFrom.vout[3].nValue = 4000;\n \n     // vout[4] is max sigops:\n@@ -312,24 +312,24 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         fifteenSigops << ToByteVector(key[i%3].GetPubKey());\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     BOOST_CHECK(keystore.AddCScript(fifteenSigops));\n-    txFrom.vout[4].scriptPubKey = GetScriptForDestination(CScriptID(fifteenSigops));\n+    txFrom.vout[4].scriptPubKey = GetScriptForDestination(ScriptHash(fifteenSigops));\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n     BOOST_CHECK(keystore.AddCScript(sixteenSigops));\n-    txFrom.vout[5].scriptPubKey = GetScriptForDestination(CScriptID(sixteenSigops));\n+    txFrom.vout[5].scriptPubKey = GetScriptForDestination(ScriptHash(sixteenSigops));\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     BOOST_CHECK(keystore.AddCScript(twentySigops));\n-    txFrom.vout[6].scriptPubKey = GetScriptForDestination(CScriptID(twentySigops));\n+    txFrom.vout[6].scriptPubKey = GetScriptForDestination(ScriptHash(twentySigops));\n     txFrom.vout[6].nValue = 6000;\n \n     AddCoins(coins, CTransaction(txFrom), 0);\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n-    txTo.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n+    txTo.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n \n     txTo.vin.resize(5);\n     for (int i = 0; i < 5; i++)\n@@ -352,7 +352,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n-    txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n+    txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n     txToNonStd1.vout[0].nValue = 1000;\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n@@ -364,7 +364,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd2;\n     txToNonStd2.vout.resize(1);\n-    txToNonStd2.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n+    txToNonStd2.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[1].GetPubKey()));\n     txToNonStd2.vout[0].nValue = 1000;\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;"
      },
      {
        "sha": "9f500833357e4af0e74f78234c956cf171a2a589",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -179,23 +179,23 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s.clear();\n     s << ToByteVector(pubkey) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n-                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+    BOOST_CHECK(boost::get<PKHash>(&address) &&\n+                *boost::get<PKHash>(&address) == PKHash(pubkey));\n \n     // TX_PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n-                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+    BOOST_CHECK(boost::get<PKHash>(&address) &&\n+                *boost::get<PKHash>(&address) == PKHash(pubkey));\n \n     // TX_SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<CScriptID>(&address) &&\n-                *boost::get<CScriptID>(&address) == CScriptID(redeemScript));\n+    BOOST_CHECK(boost::get<ScriptHash>(&address) &&\n+                *boost::get<ScriptHash>(&address) == ScriptHash(redeemScript));\n \n     // TX_MULTISIG\n     s.clear();\n@@ -255,8 +255,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n-                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n+                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n     // TX_PUBKEYHASH\n     s.clear();\n@@ -265,8 +265,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n-                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n+                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n     // TX_SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n@@ -276,8 +276,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<CScriptID>(&addresses[0]) &&\n-                *boost::get<CScriptID>(&addresses[0]) == CScriptID(redeemScript));\n+    BOOST_CHECK(boost::get<ScriptHash>(&addresses[0]) &&\n+                *boost::get<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n \n     // TX_MULTISIG\n     s.clear();\n@@ -289,10 +289,10 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n     BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n-    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n-                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n-    BOOST_CHECK(boost::get<CKeyID>(&addresses[1]) &&\n-                *boost::get<CKeyID>(&addresses[1]) == pubkeys[1].GetID());\n+    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n+                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(boost::get<PKHash>(&addresses[1]) &&\n+                *boost::get<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n \n     // TX_NULL_DATA\n     s.clear();\n@@ -311,17 +311,17 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n \n     CScript expected, result;\n \n-    // CKeyID\n+    // PKHash\n     expected.clear();\n     expected << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    result = GetScriptForDestination(pubkeys[0].GetID());\n+    result = GetScriptForDestination(PKHash(pubkeys[0]));\n     BOOST_CHECK(result == expected);\n \n     // CScriptID\n     CScript redeemScript(result);\n     expected.clear();\n     expected << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n-    result = GetScriptForDestination(CScriptID(redeemScript));\n+    result = GetScriptForDestination(ScriptHash(redeemScript));\n     BOOST_CHECK(result == expected);\n \n     // CNoDestination\n@@ -421,7 +421,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -436,7 +436,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n+        scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n \n         // Keystore does not have key\n         result = IsMine(keystore, scriptPubKey);\n@@ -452,8 +452,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n-        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore does not have redeemScript or key\n         result = IsMine(keystore, scriptPubKey);\n@@ -474,9 +474,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n-        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n-        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+        CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n+        CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemscript));\n \n         BOOST_CHECK(keystore.AddCScript(redeemscript));\n         BOOST_CHECK(keystore.AddCScript(redeemscript_inner));\n@@ -490,8 +490,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemscript = GetScriptForDestination(pubkeys[0].GetID());\n-        CScript witnessscript = GetScriptForDestination(CScriptID(redeemscript));\n+        CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n+        CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n         BOOST_CHECK(keystore.AddCScript(witnessscript));\n@@ -506,7 +506,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n+        CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n         BOOST_CHECK(keystore.AddCScript(witnessscript));\n@@ -520,7 +520,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     {\n         CBasicKeyStore keystore;\n \n-        CScript witnessscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n@@ -537,7 +537,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CBasicKeyStore keystore;\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n-        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n \n         // Keystore implicitly has key and P2SH redeemScript\n         BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n@@ -550,7 +550,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CBasicKeyStore keystore;\n         BOOST_CHECK(keystore.AddKey(uncompressedKey));\n \n-        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(uncompressedPubkey.GetID()));\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n \n         // Keystore has key, but no P2SH redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -598,7 +598,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK(keystore.AddKey(keys[1]));\n \n         CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n-        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore has no redeemScript\n         result = IsMine(keystore, scriptPubKey);\n@@ -664,7 +664,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n-        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n \n         // Keystore has no witnessScript, P2SH redeemScript, or keys\n         result = IsMine(keystore, scriptPubKey);"
      },
      {
        "sha": "4798909e2f0229b5bc41b80eba66974c55feb86a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -1211,7 +1211,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         BOOST_CHECK(keystore.AddKey(key));\n     }\n \n-    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n+    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(PKHash(keys[0].GetPubKey())));\n     CMutableTransaction txTo = BuildSpendingTransaction(CScript(), CScriptWitness(), CTransaction(txFrom));\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     SignatureData scriptSig;\n@@ -1237,7 +1237,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     BOOST_CHECK(keystore.AddCScript(pkSingle));\n-    scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n+    scriptPubKey = GetScriptForDestination(ScriptHash(pkSingle));\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);"
      },
      {
        "sha": "5c12ec13d2e779bac2812687b9c73db1ad7a43e9",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n-    CScript p2sh = GetScriptForDestination(CScriptID(s1));\n+    CScript p2sh = GetScriptForDestination(ScriptHash(s1));\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n-    p2sh = GetScriptForDestination(CScriptID(s2));\n+    p2sh = GetScriptForDestination(ScriptHash(s2));\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;\n@@ -144,7 +144,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     // Multisig nested in P2SH\n     {\n         CScript redeemScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n-        CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n         CScript scriptSig = CScript() << OP_0 << OP_0 << ToByteVector(redeemScript);\n \n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n@@ -185,7 +185,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     {\n         CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n         CScript scriptSig = GetScriptForWitness(p2pk);\n-        CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n+        CScript scriptPubKey = GetScriptForDestination(ScriptHash(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     {\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n         CScript redeemScript = GetScriptForWitness(witnessScript);\n-        CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n+        CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(std::vector<unsigned char>(0));"
      },
      {
        "sha": "f5ff18c0556ebfb9e8721b8f431d123d091f8db8",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -311,9 +311,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(PKHash(key[3].GetPubKey()));\n     AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n \n     return dummyTransactions;\n@@ -562,8 +562,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH pay-to-compressed-pubkey.\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2)), output2, input2);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(scriptPubkey1)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(scriptPubkey2)), output2, input2);\n     ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n@@ -587,8 +587,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH witness pay-to-compressed-pubkey (v0).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2))), output2, input2);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey1))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey2))), output2, input2);\n     ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n@@ -612,8 +612,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH pay-to-uncompressed-pubkey.\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2L)), output2, input2);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(scriptPubkey1L)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(scriptPubkey2L)), output2, input2);\n     ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n@@ -629,8 +629,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2, false);\n \n     // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n@@ -642,10 +642,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptMulti)), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(scriptMulti)), output1, input1, false);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(scriptMulti)), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(scriptMulti)), output2, input2, false);\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n     BOOST_CHECK(*output1 == *output2);\n@@ -666,10 +666,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH witness 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptMulti))), output1, input1, false);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptMulti))), output2, input2, false);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n@@ -695,7 +695,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 90*CENT;\n     CKey key;\n     key.MakeNewKey(true);\n-    t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n+    t.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n     std::string reason;\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));"
      },
      {
        "sha": "19561d4f6711bd005f5026fb7d0f2b00c73916d6",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -56,7 +56,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n \n     // Check that new transactions in new blocks make it into the index.\n     for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        CScript coinbase_script_pub_key = GetScriptForDestination(PKHash(coinbaseKey.GetPubKey()));\n         std::vector<CMutableTransaction> no_txns;\n         const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n         const CTransaction& txn = *block.vtx[0];"
      },
      {
        "sha": "1b3f57aabacef4e4db436c0519354aff5437e89d",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -151,8 +151,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     }\n \n     CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));\n-    CScript p2pkh_scriptPubKey = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    CScript p2sh_scriptPubKey = GetScriptForDestination(ScriptHash(p2pk_scriptPubKey));\n+    CScript p2pkh_scriptPubKey = GetScriptForDestination(PKHash(coinbaseKey.GetPubKey()));\n     CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n \n     CBasicKeyStore keystore;"
      },
      {
        "sha": "6d54522ad48a66612a21581c14e81fb87f837fda",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -252,7 +252,7 @@ static void ImportScript(CWallet* const pwallet, const CScript& script, const st\n         if (!pwallet->HaveCScript(id) && !pwallet->AddCScript(script)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n         }\n-        ImportAddress(pwallet, id, strLabel);\n+        ImportAddress(pwallet, ScriptHash(id), strLabel);\n     } else {\n         CTxDestination destination;\n         if (ExtractDestination(script, destination)) {\n@@ -661,17 +661,17 @@ UniValue importwallet(const JSONRPCRequest& request)\n             assert(key.VerifyPubKey(pubkey));\n             CKeyID keyid = pubkey.GetID();\n             if (pwallet->HaveKey(keyid)) {\n-                pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+                pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(PKHash(keyid)));\n                 continue;\n             }\n-            pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+            pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(PKHash(keyid)));\n             if (!pwallet->AddKeyPubKey(key, pubkey)) {\n                 fGood = false;\n                 continue;\n             }\n             pwallet->mapKeyMetadata[keyid].nCreateTime = time;\n             if (has_label)\n-                pwallet->SetAddressBook(keyid, label, \"receive\");\n+                pwallet->SetAddressBook(PKHash(keyid), label, \"receive\");\n             nTimeBegin = std::min(nTimeBegin, time);\n             progress++;\n         }\n@@ -817,8 +817,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n     for (const auto& entry : mapKeyBirth) {\n-        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n-            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        if (const PKHash* keyID = boost::get<PKHash>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, CKeyID(*keyID)));\n         }\n     }\n     mapKeyBirth.clear();\n@@ -870,7 +870,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     for (const CScriptID &scriptid : scripts) {\n         CScript script;\n         std::string create_time = \"0\";\n-        std::string address = EncodeDestination(scriptid);\n+        std::string address = EncodeDestination(ScriptHash(scriptid));\n         // get birth times for scripts with metadata\n         auto it = pwallet->m_script_metadata.find(scriptid);\n         if (it != pwallet->m_script_metadata.end()) {"
      },
      {
        "sha": "03b19eda9740dd89958eb41bdb1d7bd92642395c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -550,13 +550,14 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     }\n \n-    const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-    if (!keyID) {\n+    const PKHash *pkhash = boost::get<PKHash>(&dest);\n+    if (!pkhash) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n     CKey key;\n-    if (!pwallet->GetKey(*keyID, key)) {\n+    CKeyID keyID(*pkhash);\n+    if (!pwallet->GetKey(keyID, key)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n \n@@ -2820,7 +2821,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n-                const CScriptID& hash = boost::get<CScriptID>(address);\n+                const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n                     entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n@@ -3453,8 +3454,9 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n \n     UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n \n-    UniValue operator()(const CKeyID& keyID) const\n+    UniValue operator()(const PKHash& pkhash) const\n     {\n+        CKeyID keyID(pkhash);\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n@@ -3464,8 +3466,9 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         return obj;\n     }\n \n-    UniValue operator()(const CScriptID& scriptID) const\n+    UniValue operator()(const ScriptHash& scripthash) const\n     {\n+        CScriptID scriptID(scripthash);\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {"
      },
      {
        "sha": "90165b7d44078a4b02e808d89da9ef04610bdf92",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -322,7 +322,7 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n \n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n-    CTxDestination dest = CKeyID();\n+    CTxDestination dest = PKHash();\n     LOCK(m_wallet.cs_wallet);\n     m_wallet.AddDestData(dest, \"misc\", \"val_misc\");\n     m_wallet.AddDestData(dest, \"rr0\", \"val_rr0\");\n@@ -399,7 +399,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 1U);\n \n     // Check initial balance from one mature coinbase transaction.\n@@ -415,7 +415,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n@@ -444,7 +444,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*m_locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n }\n "
      },
      {
        "sha": "d18d33868aa4ec1355718aa45b0b7b44f1500e85",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "patch": "@@ -306,7 +306,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const C\n \n     // check if we need to remove from watch-only\n     CScript script;\n-    script = GetScriptForDestination(pubkey.GetID());\n+    script = GetScriptForDestination(PKHash(pubkey));\n     if (HaveWatchOnly(script)) {\n         RemoveWatchOnly(script);\n     }\n@@ -449,7 +449,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n      * these. Do not add them to the wallet and warn. */\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n     {\n-        std::string strAddr = EncodeDestination(CScriptID(redeemScript));\n+        std::string strAddr = EncodeDestination(ScriptHash(redeemScript));\n         WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n         return true;\n     }\n@@ -3768,7 +3768,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     // get birth times for keys with metadata\n     for (const auto& entry : mapKeyMetadata) {\n         if (entry.second.nCreateTime) {\n-            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+            mapKeyBirth[PKHash(entry.first)] = entry.second.nCreateTime;\n         }\n     }\n \n@@ -3777,7 +3777,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     const int max_height = tip_height && *tip_height > 144 ? *tip_height - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n     std::map<CKeyID, int> mapKeyFirstBlock;\n     for (const CKeyID &keyid : GetKeys()) {\n-        if (mapKeyBirth.count(keyid) == 0)\n+        if (mapKeyBirth.count(PKHash(keyid)) == 0)\n             mapKeyFirstBlock[keyid] = max_height;\n     }\n \n@@ -3805,7 +3805,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n \n     // Extract block timestamps for those keys\n     for (const auto& entry : mapKeyFirstBlock)\n-        mapKeyBirth[entry.first] = locked_chain.getBlockTime(entry.second) - TIMESTAMP_WINDOW; // block times can be 2h off\n+        mapKeyBirth[PKHash(entry.first)] = locked_chain.getBlockTime(entry.second) - TIMESTAMP_WINDOW; // block times can be 2h off\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "78e407ad0c26190a22de1bc8ed900164a44a36c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGU0MDdhZDBjMjYxOTBhMjJkZTFiYzhlZDkwMDE2NGE0NGEzNmMz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-29T14:14:47Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-29T14:15:23Z"
      },
      "message": "GetKeyBirthTimes should return key ids, not destinations",
      "tree": {
        "sha": "8ca9f17a5c90ca3bb8a5cedf811af7f2198b7ddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ca9f17a5c90ca3bb8a5cedf811af7f2198b7ddc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78e407ad0c26190a22de1bc8ed900164a44a36c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e407ad0c26190a22de1bc8ed900164a44a36c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78e407ad0c26190a22de1bc8ed900164a44a36c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78e407ad0c26190a22de1bc8ed900164a44a36c3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70946e7fee54323ce6a5ea8aeb377e2c7c790bc6"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9ca47807c29338a1902e9641add977ee41a4bf4c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=78e407ad0c26190a22de1bc8ed900164a44a36c3",
        "patch": "@@ -807,19 +807,16 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CTxDestination, int64_t> mapKeyBirth;\n+    std::map<CKeyID, int64_t> mapKeyBirth;\n     const std::map<CKeyID, int64_t>& mapKeyPool = pwallet->GetAllReserveKeys();\n     pwallet->GetKeyBirthTimes(*locked_chain, mapKeyBirth);\n \n     std::set<CScriptID> scripts = pwallet->GetCScripts();\n-    // TODO: include scripts in GetKeyBirthTimes() output instead of separate\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n     for (const auto& entry : mapKeyBirth) {\n-        if (const PKHash* keyID = boost::get<PKHash>(&entry.first)) { // set and test\n-            vKeyBirth.push_back(std::make_pair(entry.second, CKeyID(*keyID)));\n-        }\n+        vKeyBirth.push_back(std::make_pair(entry.second, entry.first));\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());"
      },
      {
        "sha": "b4eda100091711e7e7f5eeae68f5250b6a6b364b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=78e407ad0c26190a22de1bc8ed900164a44a36c3",
        "patch": "@@ -3761,14 +3761,14 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t>& mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CKeyID, int64_t>& mapKeyBirth) const {\n     AssertLockHeld(cs_wallet);\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n     for (const auto& entry : mapKeyMetadata) {\n         if (entry.second.nCreateTime) {\n-            mapKeyBirth[PKHash(entry.first)] = entry.second.nCreateTime;\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n         }\n     }\n \n@@ -3777,7 +3777,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     const int max_height = tip_height && *tip_height > 144 ? *tip_height - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n     std::map<CKeyID, int> mapKeyFirstBlock;\n     for (const CKeyID &keyid : GetKeys()) {\n-        if (mapKeyBirth.count(PKHash(keyid)) == 0)\n+        if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = max_height;\n     }\n \n@@ -3805,7 +3805,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n \n     // Extract block timestamps for those keys\n     for (const auto& entry : mapKeyFirstBlock)\n-        mapKeyBirth[PKHash(entry.first)] = locked_chain.getBlockTime(entry.second) - TIMESTAMP_WINDOW; // block times can be 2h off\n+        mapKeyBirth[entry.first] = locked_chain.getBlockTime(entry.second) - TIMESTAMP_WINDOW; // block times can be 2h off\n }\n \n /**"
      },
      {
        "sha": "b825c367c43d448137b739b68d5b8b0e8d6d504e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78e407ad0c26190a22de1bc8ed900164a44a36c3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=78e407ad0c26190a22de1bc8ed900164a44a36c3",
        "patch": "@@ -898,7 +898,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CKeyID, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**"
      }
    ]
  }
]