JeremyRubin,2021-08-10 17:48:48,"Hmm I'm mildly concept NACK on this refactoring; removeForReorg really feels like internal mempool functionality.\n\nAnother tactic to remove the module links would be to make removeForReorg generic to any T ChainState class. Then you don't need to have the specifics of the implementation of T known within mempool.\n\n(Circular deps within `.cpp` are not *that* bad IMO)",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-896190244,896190244,
DrahtBot,2021-08-10 18:51:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22282](https://github.com/bitcoin/bitcoin/pull/22282) (refactor: CheckFinalTx pass by reference instead of pointer by kl",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-896232272,896232272,
fanquake,2021-08-11 02:44:17,"```bash\nvalidation.cpp:338:25: error: calling function 'TestLockPointValidity' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\n        bool validLP =  TestLockPointValidity(m_chain, &lp);\n                        ^\nvalidation.cpp:339:41: error: calling function 'CoinsTip' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\n      ",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-896456577,896456577,
glozow,2021-08-11 10:06:39,"> removeForReorg really feels like internal mempool functionality. Another tactic to remove the module links would be to make removeForReorg generic to any T ChainState class. Then you don't need to have the specifics of the implementation of T known within mempool.\n\nYeah, I see this. Perhaps the function could instead be parametrized by tip, coins cache, etc?",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-896691512,896691512,
glozow,2021-08-18 20:34:28,"I've pushed a version that splits out the finality checking part of removeForReorg (parts that require validation functions CheckSequenceLocks and CheckFinalTx) into validation, but leaves most of it in txmempool. Perhaps a better separation?",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-901412474,901412474,
JeremyRubin,2021-08-18 21:30:28,"i don't think so :/\n\nedit: it still feels like an abstraction layer leak, the for loop is inner functionality. Have you given parametrizing by CChainState. a try? ",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-901443258,901443258,
glozow,2021-08-19 08:43:18,@JeremyRubin `CChainState` is what it's currently parametrized by - it's what causes the dependency on validation.h,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-901726060,901726060,
glozow,2021-08-19 14:01:00,Ok new approach. I added something similar to the `CConnman.ForEachNode` so we can pass in a lambda that captures what we need from chainstate. Validation isn't looking through `mapTx` anymore. The mempool gets a callable object and applies it to the entries internally.,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-901941089,901941089,
JeremyRubin,2021-08-19 21:24:32,"i meant template paramterized by a generic ChainStateProvider type, that way it's clean depedency wise.. will check out the new approach later.",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-902258227,902258227,
michaelfolkson,2021-09-02 16:05:58,"What's the latest on this PR? Am I right in thinking that an approach hasn't been settled on to avoid the circular dependency and that #22675 should be reviewed instead?\n\nedit: I guess this is just a RFC and draft PR so it is here in case an alternative approach is sketched out.",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-911839931,911839931,
glozow,2021-09-10 13:31:09,Fixed the CI issue. Ready for review.,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-916906730,916906730,
glozow,2021-09-30 12:49:25,"I've changed the circular dependency-breaking to be as minimal as possible. The `check()` function is now parametrized by a coins cache and spend height rather than chainstate. The `removeForReorg()` function now takes a callable object to apply to each mempool entry, removing the ones for which it returns true.\n\nI've also written a bench for these 2 functions and taken the opportunity to spee",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-931290980,931290980,
glozow,2021-10-01 11:44:35,"Rebased, addressed @jnewbery's comment, and separated the benches because it's a bit misleading to group them.",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-932156870,932156870,
glozow,2021-10-01 16:09:04,Split the PR up - first half is in #23157.,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-932362098,932362098,
glozow,2021-10-25 13:44:51,Rebased,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-950944753,950944753,
MarcoFalke,2021-11-12 16:08:37,Needs rebase?,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-967232495,967232495,
glozow,2021-11-15 16:23:22,Thanks @MarcoFalke! silent merge conflict with #23211. Need to rethink approach since it's no longer possible to modify lockpoints from outside txmempool...,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-969079001,969079001,
MarcoFalke,2021-11-15 16:33:13,"That was a move-only, so can be reverted if needed. Maybe a `struct update_lock_points;` forward decl is enough?",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-969088560,969088560,
glozow,2021-11-15 16:47:59,"> That was a move-only, so can be reverted if needed. Maybe a `struct update_lock_points;` forward decl is enough?\n\nForward decl isn't enough because we need the constructor in order to call `update_lock_points(lp)`.\n\nCurrently, I'm leaning towards splitting `removeForReorg` into 2 loops: `CheckLockPoints` (leave inside txmempool) and `RemoveNonFinalAndPremature` (move to validation). Ther",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-969102524,969102524,
glozow,2021-11-30 12:30:59,"Rebased. If you have time, please take another look @mjdietzx @theStack @MarcoFalke?",https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-982592235,982592235,
laanwj,2021-11-30 17:52:13,Code review ACK a64078e38563ef3ac5e5ec20c07569441c87eeee,https://github.com/bitcoin/bitcoin/pull/22677#issuecomment-982876145,982876145,
jnewbery,2021-09-22 15:35:18,"I wonder if this function should be made more generic, into `RemoveWithDescendants(const setEntries& txToRemove, MemPoolRemovalReason reason)`, and then be called with `MemPoolRemovalReason::REORG` when removing transactions for a reorg. That'd deduplicate some of the code above in `removeRecursive()`.",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r714068419,714068419,src/txmempool.cpp
jnewbery,2021-09-22 15:44:54,"`TestLockPointValidity()` can now be static in validation.cpp, since it's not used outside of that translation unit.",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r714077176,714077176,src/validation.cpp
jnewbery,2021-09-22 15:46:45,"This line has now been replaced by `return true;` in the lambda, which means that the `if (!validLP)` conditional below is not executed if we enter this branch. Is that intentional? If so, can you justify why it's safe to make that change?",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r714078655,714078655,src/txmempool.cpp
jnewbery,2021-09-22 15:49:13,"This seems like a behaviour change. Since `CTxMemPool::check()` is now called by `CChainState::CheckMempool()`, which itself has `if (GetRand(check_ratio) >= 1) return;`, then these checks will only get run 1/n^2 times.",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r714080918,714080918,src/txmempool.cpp
jnewbery,2021-09-22 16:07:27,"It'd be nice to remove these calls to mempool.check() from net_processing. It shouldn't be the client's responsibility to call into validation/mempool to check its invariants.\n\nThe diff is really easy:\n\n```diff\niff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 80655c61e7..636b4d1102 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2288,7 +2288,",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r714097289,714097289,src/net_processing.cpp
glozow,2021-09-29 20:17:42,"Good catch, switched it to be updating a `bool should_remove` and returning at the end instead :)",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r718853068,718853068,src/txmempool.cpp
glozow,2021-09-29 20:18:16,keeping `check_ratio` checking inside the mempool function now,https://github.com/bitcoin/bitcoin/pull/22677#discussion_r718853463,718853463,src/txmempool.cpp
glozow,2021-09-29 20:20:49,"Didn't end up taking this change, though I tried to at first, because I agree that it _should_ be the mempool, or at the very least, chainstate manager's job to sanity check the mempool, not net processing.\n\nThe problem is that we call ATMP from the reorg code, and we shouldn't call `check()` then because the mempool can temporarily be in a state where not all inputs are available from the cha",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r718855206,718855206,src/net_processing.cpp
glozow,2021-09-29 20:21:59,"Agree about consolidating duplicate code, but I don't think it helps much with this PR - maybe for a followup?",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r718855938,718855938,src/txmempool.cpp
jnewbery,2021-09-30 15:13:00,`TestLockPointValidity()` can now be static since it's not called from outside this translation unit.,https://github.com/bitcoin/bitcoin/pull/22677#discussion_r719508493,719508493,src/validation.cpp
jnewbery,2021-09-30 15:18:10,"> The problem is that we call ATMP from the reorg code, and we shouldn't call check() then because the mempool can temporarily be in a state where not all inputs are available from the chainstate coins cache. This causes the check() assertions to fail.\n\nYes, I'd forgotten that ATMP could be called while the mempool is in an inconsistent state.\n\nThe fix is to only call `check()` after ATMP ",https://github.com/bitcoin/bitcoin/pull/22677#discussion_r719513233,719513233,src/net_processing.cpp
glozow,2021-10-01 12:32:40,Done,https://github.com/bitcoin/bitcoin/pull/22677#discussion_r720207046,720207046,src/validation.cpp
