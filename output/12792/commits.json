[
  {
    "sha": "2ed16336ea9cbe7eb0cd852028f30281d4497086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQxNjMzNmVhOWNiZTdlYjBjZDg1MjAyOGYzMDI4MWQ0NDk3MDg2",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T17:57:27Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T17:57:27Z"
      },
      "message": "Add -disablewalletupdates: resolves #12632\n\n    When true, wallet does not rescan the chain from its last known\n    best block on startup or subscribe to CValidationInterface\n    notifications.  Useful for wallet maintenance type activities where one desires to\n    avoid the overhead of rescan on startup.",
      "tree": {
        "sha": "9f63cc3155520d62aebb57ac658c1aa27c65309e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f63cc3155520d62aebb57ac658c1aa27c65309e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed16336ea9cbe7eb0cd852028f30281d4497086",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed16336ea9cbe7eb0cd852028f30281d4497086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed16336ea9cbe7eb0cd852028f30281d4497086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed16336ea9cbe7eb0cd852028f30281d4497086/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec7dbaa37c233599e9fc68f8284ee85c1261652b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7dbaa37c233599e9fc68f8284ee85c1261652b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7dbaa37c233599e9fc68f8284ee85c1261652b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "75794af35aa42203d439a20d8699338539949e33",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed16336ea9cbe7eb0cd852028f30281d4497086/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed16336ea9cbe7eb0cd852028f30281d4497086/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=2ed16336ea9cbe7eb0cd852028f30281d4497086",
        "patch": "@@ -31,6 +31,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n+    strUsage += HelpMessageOpt(\"-disablewalletupdates\", _(\"Do not update the wallet with any new blocks that have been seen since last load\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));"
      },
      {
        "sha": "f390b2883345d97dfe575238483f573638b1bbff",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed16336ea9cbe7eb0cd852028f30281d4497086/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed16336ea9cbe7eb0cd852028f30281d4497086/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ed16336ea9cbe7eb0cd852028f30281d4497086",
        "patch": "@@ -435,6 +435,13 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    // if wallet updates are disabled ensure that we\n+    // do not update the best block seen so that we\n+    // always eventually scan the chain for transactions\n+    // that should be indexed by this wallet\n+    if(gArgs.GetBoolArg(\"-disablewalletupdates\", false))\n+        return;\n+\n     CWalletDB walletdb(*dbw);\n     walletdb.WriteBestBlock(loc);\n }\n@@ -4034,17 +4041,26 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     LOCK(cs_main);\n \n+    bool subscribe_to_chain_updates = !gArgs.GetBoolArg(\"-disablewalletupdates\", false);\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n-        CWalletDB walletdb(*walletInstance->dbw);\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        if(subscribe_to_chain_updates) {\n+            CWalletDB walletdb(*walletInstance->dbw);\n+            CBlockLocator locator;\n+            if (walletdb.ReadBestBlock(locator))\n+                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        } else {\n+            pindexRescan = chainActive.Tip();\n+        }\n     }\n \n     walletInstance->m_last_block_processed = chainActive.Tip();\n-    RegisterValidationInterface(walletInstance);\n+    if(subscribe_to_chain_updates) {\n+        RegisterValidationInterface(walletInstance);\n+    } else {\n+        LogPrintf(\"Not registering ValidationInterface for wallet as -disablewalletupdates is set\\n\");\n+    }\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {"
      }
    ]
  },
  {
    "sha": "c1f01d71885e2a7e06c40d5273ca94a928086510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWYwMWQ3MTg4NWUyYTdlMDZjNDBkNTI3M2NhOTRhOTI4MDg2NTEw",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T19:41:30Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T19:41:30Z"
      },
      "message": "Address review comments",
      "tree": {
        "sha": "be4ef25f70522751a7ecf10d0785e94b66e45139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be4ef25f70522751a7ecf10d0785e94b66e45139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1f01d71885e2a7e06c40d5273ca94a928086510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f01d71885e2a7e06c40d5273ca94a928086510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1f01d71885e2a7e06c40d5273ca94a928086510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f01d71885e2a7e06c40d5273ca94a928086510/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ed16336ea9cbe7eb0cd852028f30281d4497086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed16336ea9cbe7eb0cd852028f30281d4497086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed16336ea9cbe7eb0cd852028f30281d4497086"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7bd238de7b56e18c7a74c0c10eb0566b24b48b10",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1f01d71885e2a7e06c40d5273ca94a928086510/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1f01d71885e2a7e06c40d5273ca94a928086510/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=c1f01d71885e2a7e06c40d5273ca94a928086510",
        "patch": "@@ -31,7 +31,6 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n-    strUsage += HelpMessageOpt(\"-disablewalletupdates\", _(\"Do not update the wallet with any new blocks that have been seen since last load\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n@@ -52,6 +51,7 @@ std::string GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n+        strUsage += HelpMessageOpt(\"-walletupdates\", _(\"Update the wallet with new blocks that have been seen since last load (default: 1)\"));\n     }\n \n     return strUsage;"
      },
      {
        "sha": "0cf2df89aa6a61eaf0fe9e12bc090b15a52a2bb0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1f01d71885e2a7e06c40d5273ca94a928086510/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1f01d71885e2a7e06c40d5273ca94a928086510/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c1f01d71885e2a7e06c40d5273ca94a928086510",
        "patch": "@@ -439,7 +439,7 @@ void CWallet::SetBestChain(const CBlockLocator& loc)\n     // do not update the best block seen so that we\n     // always eventually scan the chain for transactions\n     // that should be indexed by this wallet\n-    if(gArgs.GetBoolArg(\"-disablewalletupdates\", false))\n+    if (!gArgs.GetBoolArg(\"-walletupdates\", true))\n         return;\n \n     CWalletDB walletdb(*dbw);\n@@ -4041,25 +4041,26 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     LOCK(cs_main);\n \n-    bool subscribe_to_chain_updates = !gArgs.GetBoolArg(\"-disablewalletupdates\", false);\n+    bool subscribe_to_chain_updates = gArgs.GetBoolArg(\"-walletupdates\", true);\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n-        if(subscribe_to_chain_updates) {\n+        if (subscribe_to_chain_updates) {\n             CWalletDB walletdb(*walletInstance->dbw);\n             CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n+            if (walletdb.ReadBestBlock(locator)) {\n                 pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+            }\n         } else {\n             pindexRescan = chainActive.Tip();\n         }\n     }\n \n     walletInstance->m_last_block_processed = chainActive.Tip();\n-    if(subscribe_to_chain_updates) {\n+    if (subscribe_to_chain_updates) {\n         RegisterValidationInterface(walletInstance);\n     } else {\n-        LogPrintf(\"Not registering ValidationInterface for wallet as -disablewalletupdates is set\\n\");\n+        LogPrintf(\"Not registering CValidationInterface for wallet as -walletupdates=0\\n\");\n     }\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)"
      }
    ]
  },
  {
    "sha": "afe7c3852c3d241822b26d26cb80963be582b6bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmU3YzM4NTJjM2QyNDE4MjJiMjZkMjZjYjgwOTYzYmU1ODJiNmJj",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T20:44:43Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-26T20:44:43Z"
      },
      "message": "Add test for -[no]walletupdates",
      "tree": {
        "sha": "1c351cfdadcd9aba75a5d0b3f652dbd130b705e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c351cfdadcd9aba75a5d0b3f652dbd130b705e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afe7c3852c3d241822b26d26cb80963be582b6bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe7c3852c3d241822b26d26cb80963be582b6bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afe7c3852c3d241822b26d26cb80963be582b6bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe7c3852c3d241822b26d26cb80963be582b6bc/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1f01d71885e2a7e06c40d5273ca94a928086510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f01d71885e2a7e06c40d5273ca94a928086510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1f01d71885e2a7e06c40d5273ca94a928086510"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 46,
      "deletions": 1
    },
    "files": [
      {
        "sha": "50f87ea452873fb717a55866f7cbd9b57c390a25",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe7c3852c3d241822b26d26cb80963be582b6bc/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe7c3852c3d241822b26d26cb80963be582b6bc/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=afe7c3852c3d241822b26d26cb80963be582b6bc",
        "patch": "@@ -47,7 +47,7 @@ def run_test(self):\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n         with open(self.tx_filename, 'r') as f:\n             assert_equal(sorted(txids_rpc), sorted(f.read().splitlines()))\n-        os.remove(self.tx_filename)\n+        self.cleanup_notification_files()\n \n         self.log.info(\"test -walletnotify after rescan\")\n         # restart node to rescan to force wallet notifications\n@@ -82,5 +82,50 @@ def run_test(self):\n         self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n         assert_equal(alert_text, alert_text2)\n \n+        # restart node but with wallet updates disabled\n+        # mine some blocks (should not receive tx notifications)\n+        # restart node with updates re-enabled\n+        # assert that notifications are received for the blocks mined while notifications were disabled\n+        self.log.info(\"test -[no]walletupdates\")\n+        txids_already_seen = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", 1000)))\n+\n+        # the tip is always effectively rescanned on restart (in ActivateBestChain)\n+        # have a different node generate 1 block so the coinbase does not belong to the node we'd like to test\n+        self.nodes[0].generate(1)\n+        self.cleanup_notification_files()\n+        self.restart_node(1, [\"-nowalletupdates\",\n+                              \"-walletnotify=echo %%s >> %s\" % self.tx_filename,\n+                              \"-blocknotify=echo %%s >> %s\" % self.block_filename])\n+\n+        # generate more blocks (with updates disabled we should get notified by blocknotify but NOT by walletnotify)\n+        self.nodes[1].generate(block_count)\n+\n+        # wait at most 10 seconds for expected file size before reading the content\n+        wait_until(lambda: os.path.isfile(self.block_filename) and os.stat(self.block_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # we should be notified on new blocks\n+        assert os.path.isfile(self.block_filename)\n+\n+        # but not on any wallet transactions because we have wallet updates disabled\n+        assert not os.path.isfile(self.tx_filename)\n+\n+        # restart the node again but with updates enabled - we should now get notified for only the transactions\n+        # generated while updates were disabled but none of the previous ones\n+        self.restart_node(1, [\"-walletnotify=echo %%s >> %s\" % self.tx_filename])\n+\n+        # wait at most 10 seconds for notifications\n+        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+\n+        # file should contain only the transactions generated while updates were disabled but none of the previous ones\n+        all_txids = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", 1000)))\n+        new_txids = [t for t in all_txids if t not in txids_already_seen]\n+        with open(self.tx_filename, 'r') as f:\n+            assert_equal(sorted(new_txids), sorted(f.read().splitlines()))\n+\n+    def cleanup_notification_files(self):\n+        for name in [self.alert_filename, self.block_filename, self.tx_filename]:\n+            if os.path.isfile(name):\n+                os.remove(name)\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  }
]