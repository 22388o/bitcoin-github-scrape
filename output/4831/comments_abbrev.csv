SergioDemianLerner,2014-09-05T00:57:47Z,This is excellent. Could we unify the handling and scheduling of transactions getdata/invs with block getdata/invs ?\nBecause sooner or later block fetching will require a similar method to withstand malicious block invs.\nMaybe that can be done later on top of this patch.\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54565988,54565988,
sipa,2014-09-05T01:01:44Z,"We are actually doing already something very similar for blocks, and the headersfirst branch extends it (#4468). It's a bit more complicated there, as we want a moving window of block fetching to limit out-of-orderness in which blocks arrive.\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54566239,54566239,
sipa,2014-09-05T01:08:05Z,"Big +1 on code organization: implementing independent pieces of protocol handling should definitely move to separate files, with separate data structures and separate locks (other examples that afaik could easily be converted into this style are ping/pong and alerts).\n\nIt's a bit unfortunate that the block fetching and tx fetching code are separated but implement similar functionality. It's a st",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54566663,54566663,
laanwj,2014-09-05T10:08:02Z,"@SergioDemianLerner As I see it, blocks handling is much more closely bound to main/core than this (basically independent) inventory item fetcher, making it enough of a separate concern to warrant being a different module. I'm not against unifying them if it can be done sanely, of course. But block handling is essentially different especially after headers-first.\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54606935,54606935,
rebroad,2014-09-05T11:06:24Z,Malicious block invs? What is one of those?\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54612052,54612052,
rebroad,2014-09-06T00:23:17Z,"Currently, the logic is such that large orphan txs are requested repeatedly and ignored repeatedly:-\n\n2014-09-06 00:01:46 ignoring large orphan tx (size: 5057, hash: 18098a192869ef0f9128be9bf1f3bb243575f88d072bb24f918c4e4f5a894b80) peer=1\n2014-09-06 00:01:46 ignoring large orphan tx (size: 5057, hash: 18098a192869ef0f9128be9bf1f3bb243575f88d072bb24f918c4e4f5a894b80) peer=11\n2014-09-06 00:01:47",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54696398,54696398,
laanwj,2014-09-06T02:36:36Z,"@rebroad This should simply work with #4542? It doesn't touch any part of the same code.\n\nAs I see it, the logic of _whether_ to request something is outside scope of this module. If you ask netaskfor to retrieve a transaction for you, it will do so, until being told to stop :) (or until it runs out of peers)\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54700082,54700082,
rebroad,2014-09-06T07:25:30Z,"@laanwj oh.. yes, you are right. Ok, I'll re-merge 4542 in that case (which didn't touch large orphan txs anyway I've just noticed!).\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54705180,54705180,
laanwj,2014-09-09T15:19:35Z,Looks like the timeout could indeed be reduced.\n\n```\n2014-09-09 15:15:27 askfor tx b87fabfb19b9401f20c9bb9330db0916c4781a2d06efc914556776ae6715a698  peer=7543\n2014-09-09 15:15:27 ThreadHandleAskFor: processing item tx b87fabfb19b9401f20c9bb9330db0916c4781a2d06efc914556776ae6715a698\n2014-09-09 15:15:27 QueueGetdata: Requesting item tx b87fabfb19b9401f20c9bb9330db0916c4781a2d06efc914556776ae671,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-54985231,54985231,
BitcoinPullTester,2014-09-18T10:37:30Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4831_9cbaaf61ade4b91469f3d728795ec83859c25192/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-56021882,56021882,
sipa,2014-09-20T02:20:46Z,Going to test this.\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-56254334,56254334,
sipa,2014-09-29T03:52:46Z,"Works without problems (even in valgrind, after running for a few days). I didn't actually check whether it fetches/relays things correctly, though.\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-57114497,57114497,
Diapolo,2014-09-29T08:46:46Z,"Just a general question, why are most/all comments beginning with `///`?\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-57132199,57132199,
fanquake,2014-09-29T08:58:23Z,@Diapolo It's so that they'll be picked up by doxygen. It doesn't recognise comments starting with //\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-57133431,57133431,
sipa,2014-11-17T16:27:29Z,I hope you pick this up soon after 0.10 :)\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-63331043,63331043,
rebroad,2015-06-25T16:10:05Z,Needs rebase - is this still in progress?\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-115306155,115306155,
jgarzik,2015-07-23T18:12:45Z,"Ping.  Needs refresh.\n\nI think the general consensus is that we want this, but needs more review?  Seems to have positive noises in the security discussion and on here, but no ACKs.\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-124191621,124191621,
gmaxwell,2015-09-06T08:46:53Z,I tested this previously (at some version...) but it got put down after being punted out of 0.10.  Seems to have been forgotten. Lets unforget it.\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-138057971,138057971,
dcousens,2015-09-07T13:25:36Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-138297780,138297780,
jgarzik,2015-09-15T17:14:37Z,concept ACK - let this not be forgotten\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-140469008,140469008,
sipa,2015-09-15T17:34:32Z,Perhaps this will be pushed back until after Cory's P2P refactor?\n,https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-140474922,140474922,
laanwj,2015-09-18T03:58:22Z,"Needs to be picked back up at some point, I'm not sure when.\nCertainly don't want to interfere with Cory's libevent work.\n",https://github.com/bitcoin/bitcoin/pull/4831#issuecomment-141336602,141336602,
rebroad,2014-09-04T04:30:16Z,"""tx"" instead of ""netaskfor""? And should this be added to the command line syntax messages in init.cpp?\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17095234,17095234,src/netaskfor.cpp
rebroad,2014-09-04T05:01:29Z,Just one inv per getdata message?\n\nWhy not use the old code to create a list of invs to getdata and use that one node at a time?\n,https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17095733,17095733,src/netaskfor.cpp
laanwj,2014-09-04T06:29:26Z,Could be called 'tx' but I tried to keep it as general as possible. It requests inventory items.\nACK on adding it to command-line syntax.\n,https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17097406,17097406,src/netaskfor.cpp
laanwj,2014-09-04T06:33:12Z,"It is a bit more difficult because we act per request here, not per node.\n\n~~It would be possible to accumulate getdatas per node, then submit them at once after an iteration, but as said under KNOWN ISSUES in the OP I'm not sure it's worth the extra complexity. Anyhow it's an obvious optimization that could be done.~~\nWorking on this right now...\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17097496,17097496,src/netaskfor.cpp
rebroad,2014-09-04T07:11:41Z,I've added a pull request (https://github.com/laanwj/bitcoin/pull/3) to this branch that might help with this... (also makes it easier to collect stats in later commits of mine).\n,https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17098387,17098387,src/netaskfor.cpp
SergioDemianLerner,2014-09-05T00:30:08Z,What is the trailing .first->second for?\n,https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17151277,17151277,src/netaskfor.cpp
laanwj,2014-09-05T09:52:45Z,"That's a leftover from the commented code above it. Basically, the CNodeAskForState had some initial assignments here so a reference to it was stored. This is not necessary at the moment so both the commented code and the .first->second should go.\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17164489,17164489,src/netaskfor.cpp
laanwj,2014-09-06T08:21:06Z,"This should skip nodes whose sendbuffer is full.\n\nWhat is the correct way to check this? This would be something like `pnode->nSendSize < SendBufferSize()`, but I'm not sure what lock is needed for that.\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17207604,17207604,src/netaskfor.cpp
sipa,2014-09-06T08:28:34Z,"In theory you would need pnode->cs_vSend, but if you can argue that the system keeps working correctly even if the test returns the right result only most of the time, put a big comment, and use no lock...\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17207618,17207618,src/netaskfor.cpp
laanwj,2014-09-10T09:07:50Z,There is nothing in place at the moment to make sure that data items are requested in the same order that they're announced (`std::multimap` does not preserve insertion order). There probably needs to be.\n\nOTOH when requesting from multiple nodes (or when timeouts are involved) there is no guarantee that the response will come in the same order as the requests. So maybe it's not an issue.\n,https://github.com/bitcoin/bitcoin/pull/4831#discussion_r17350180,17350180,src/netaskfor.cpp
Diapolo,2014-09-29T08:43:35Z,"Nit: This should go below our headers, so just flip this with the block below.\n",https://github.com/bitcoin/bitcoin/pull/4831#discussion_r18142682,18142682,src/netaskfor.cpp
