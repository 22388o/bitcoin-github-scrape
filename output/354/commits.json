[
  {
    "sha": "ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGMxNjk1NmIxM2RiYjFmODA3ZmM0NjE5NmRhZTBjNzMyOWNmZTNm",
    "commit": {
      "author": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T00:13:24Z"
      },
      "committer": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T00:13:33Z"
      },
      "message": "CWalletTx::GetAmounts(): Move address divination to CTxOut::GetAddress()",
      "tree": {
        "sha": "2613e250a9bd7052c68c351b436261d39c453c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2613e250a9bd7052c68c351b436261d39c453c44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc16956b13dbb1f807fc46196dae0c7329cfe3f/comments",
    "author": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0d80170a2ca73004e08fb85007fe055cbf4e411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0d80170a2ca73004e08fb85007fe055cbf4e411",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0d80170a2ca73004e08fb85007fe055cbf4e411"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "10c510195934eaab13d651a69e13313ffbae5059",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc16956b13dbb1f807fc46196dae0c7329cfe3f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc16956b13dbb1f807fc46196dae0c7329cfe3f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
        "patch": "@@ -338,6 +338,22 @@ class CTxOut\n         scriptPubKey = scriptPubKeyIn;\n     }\n \n+    std::string GetAddress() const\n+    {\n+        uint160 hash160;\n+        std::vector<unsigned char> vchPubKey;\n+        if (ExtractHash160(scriptPubKey, hash160))\n+            return Hash160ToAddress(hash160);\n+        else if (ExtractPubKey(scriptPubKey, NULL, vchPubKey))\n+            return PubKeyToAddress(vchPubKey);\n+        else\n+        {\n+            printf(\"CTxOut::GetAddress: Unknown transaction type found: %s\\n\",\n+                   scriptPubKey.ToString().c_str());\n+            return \" unknown \";\n+        }\n+    }\n+\n     IMPLEMENT_SERIALIZE\n     (\n         READWRITE(nValue);"
      },
      {
        "sha": "3640a5af2d6957d0debf9dc0830f018a231ced6f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddc16956b13dbb1f807fc46196dae0c7329cfe3f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddc16956b13dbb1f807fc46196dae0c7329cfe3f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
        "patch": "@@ -265,28 +265,15 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n         nFee = nDebit - nValueOut;\n     }\n \n-    // Sent/received.  Standard client will never generate a send-to-multiple-recipients,\n-    // but non-standard clients might (so return a list of address/amount pairs)\n+    // Sent/received.\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        string address;\n-        uint160 hash160;\n-        vector<unsigned char> vchPubKey;\n-        if (ExtractHash160(txout.scriptPubKey, hash160))\n-            address = Hash160ToAddress(hash160);\n-        else if (ExtractPubKey(txout.scriptPubKey, NULL, vchPubKey))\n-            address = PubKeyToAddress(vchPubKey);\n-        else\n-        {\n-            printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n-                   this->GetHash().ToString().c_str());\n-            address = \" unknown \";\n-        }\n-\n         // Don't report 'change' txouts\n         if (nDebit > 0 && pwallet->IsChange(txout))\n             continue;\n \n+        string address = txout.GetAddress();\n+\n         if (nDebit > 0)\n             listSent.push_back(make_pair(address, txout.nValue));\n "
      }
    ]
  },
  {
    "sha": "c591baf4185aaafdd741d5cfd356fae17b851a1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTkxYmFmNDE4NWFhYWZkZDc0MWQ1Y2ZkMzU2ZmFlMTdiODUxYTFi",
    "commit": {
      "author": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T00:15:01Z"
      },
      "committer": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T00:15:01Z"
      },
      "message": "RPC sendmany(): Move address-amount list parsing to AddressAmountList()",
      "tree": {
        "sha": "c30e608f5d3144c36646a62d81e6cfd18d4fcaed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c30e608f5d3144c36646a62d81e6cfd18d4fcaed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c591baf4185aaafdd741d5cfd356fae17b851a1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c591baf4185aaafdd741d5cfd356fae17b851a1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c591baf4185aaafdd741d5cfd356fae17b851a1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c591baf4185aaafdd741d5cfd356fae17b851a1b/comments",
    "author": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc16956b13dbb1f807fc46196dae0c7329cfe3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc16956b13dbb1f807fc46196dae0c7329cfe3f"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 25,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ce4c0e4ebfb3bfb5d45c606bfc8cbc711ee4b5d5",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 20,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c591baf4185aaafdd741d5cfd356fae17b851a1b/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c591baf4185aaafdd741d5cfd356fae17b851a1b/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=c591baf4185aaafdd741d5cfd356fae17b851a1b",
        "patch": "@@ -804,6 +804,30 @@ Value sendfrom(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+int64 AddressAmountList(Object& list, vector<pair<CScript, int64> >& vecAA)\n+{\n+    set<string> setAddress;\n+    int64 totalAmount = 0;\n+    BOOST_FOREACH(const Pair& s, list)\n+    {\n+        uint160 hash160;\n+        string strAddress = s.name_;\n+\n+        if (setAddress.count(strAddress))\n+            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+strAddress);\n+        setAddress.insert(strAddress);\n+\n+        CScript scriptPubKey;\n+        if (!scriptPubKey.SetBitcoinAddress(strAddress))\n+            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+strAddress);\n+        int64 nAmount = AmountFromValue(s.value_);\n+        totalAmount += nAmount;\n+\n+        vecAA.push_back(make_pair(scriptPubKey, nAmount));\n+    }\n+    return totalAmount;\n+}\n+\n Value sendmany(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n@@ -822,27 +846,8 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n-    set<string> setAddress;\n     vector<pair<CScript, int64> > vecSend;\n-\n-    int64 totalAmount = 0;\n-    BOOST_FOREACH(const Pair& s, sendTo)\n-    {\n-        uint160 hash160;\n-        string strAddress = s.name_;\n-\n-        if (setAddress.count(strAddress))\n-            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+strAddress);\n-        setAddress.insert(strAddress);\n-\n-        CScript scriptPubKey;\n-        if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+strAddress);\n-        int64 nAmount = AmountFromValue(s.value_); \n-        totalAmount += nAmount;\n-\n-        vecSend.push_back(make_pair(scriptPubKey, nAmount));\n-    }\n+    int64 totalAmount = AddressAmountList(sendTo, vecSend);\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)"
      }
    ]
  },
  {
    "sha": "34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGZkNzlmOWNhMTQ3Y2YyZGY3OGUxMmVjNTlmZjhkZGNlZGYyNzAz",
    "commit": {
      "author": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T00:15:29Z"
      },
      "committer": {
        "name": "Petr Baudis",
        "email": "pasky@ucw.cz",
        "date": "2011-06-27T02:03:24Z"
      },
      "message": "Support for \"exact send\" with manual coin selection\n\nThis patch introduces CWallet::CreateExactTransaction() function that\nworks like CWallet::CreateTransaction(), but takes explicit list of\nprev_out transactions for sourcing the new transaction and fixed value\nof transaction fee.\n\nFurthermore, new RPC call 'sendexact' is introduced; it works like\n'sendmany', but takes explicit list of transactions to use as coin\nsources, and explicit value of transaction fee.\n\nAll outputs of the listed transactions that the account can claim are\nused to source coins; the output of the new transaction must be exactly\nthe same amount, the user is responsible for dealing with any change.\nThe user is also responsible for setting the transaction fee to such\na value that other nodes will relay the transaction.\n\nThe point is to provide a low-level interface for making transactions\nwithout all the auto-guessing implicitly done by the client. My primary\nmotivation is that I am a control freak and I want to have precise\ncontrol over the addresses used as \"sources\" of my transactions.\n\nThere are other applications too - even if more specific interfaces\nmight be more suited to them, this interface makes them possible at all\nas the lowest common denominator. E.g. people who wish to be sure no\ntransaction fees will be paid for their transaction can use this\ninterface. Or people wishing to try out different coin selection\nalgorithms (or when coin selection makes sense at the moment of\ntransaction setup, e.g. in case of anonymizers).\n\nQ: Why use explicit transactions instead of addresses?\nA: In reality, you do not quite transfer money \"from\" an address.\nAddress is just a token that proves you are authorized to claim\na particular amount of bitcoins listed as one of outputs of some\ntransaction. Specific use-cases might be simplified, but you would\nstill be in hands of a fixed coin selection algorithm.  You can use\n(somewhat laborously) listtransactions or external service to discover\ntransactions that send money to a given address.\n\nQ: Why use account instead of explicit addresses?\nA: First, it is more consistent with the other \"send\" interfaces\nand the wallet organization. Second, I believe account is the right\nabstraction - as mentioned, address is just a token for claiming some\nbitcoins, but different kind of claim proofs might be used (e.g. the\nnow-deprecated \"send to IP address\", or it could be possible to also\nspecify password-protected coins). In the future, you could associate\nfurther methods of authentication with accounts, but addresses are\nlimited. If you require a specific set of addresses to be used, you can\nset up an ad-hoc account.\n\nQ: What does that bit about \"change\" mean?\nA: If transaction input claims some output of a previous transaction,\nit must claim all the coins in the output. If you need to transfer\nsmaller amount than that, you must specify what to do with the\nremaining amount (change). The built-in coin selection algorithm\neither sends them to a new address (for better anonymity) or returns\nthem to the source address. Here, you are responsible for manually\nspecifying the destiny of your remaining amount.\n\nQ: Can I be finally sure I pay only the TX fee I specify?\nA: Yes, the TX fee you specify is final. However, please note that\nif the new transaction is large (i.e. has many inputs and outputs)\nor transfers too small amount and you do not offer any TX fee, it\nmay not be accepted by any other nodes. Note that this is more\nserious than not being included in a block - you could just wait\nlonger for a benevolent miner. In these circumstances, your\ntransaction is not likely to even *reach* a mining node because\nthe P2P network will not relay it.",
      "tree": {
        "sha": "f6edc8e4842270071b38a661e200724307867530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6edc8e4842270071b38a661e200724307867530"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/comments",
    "author": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pasky",
      "id": 18439,
      "node_id": "MDQ6VXNlcjE4NDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pasky",
      "html_url": "https://github.com/pasky",
      "followers_url": "https://api.github.com/users/pasky/followers",
      "following_url": "https://api.github.com/users/pasky/following{/other_user}",
      "gists_url": "https://api.github.com/users/pasky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pasky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pasky/subscriptions",
      "organizations_url": "https://api.github.com/users/pasky/orgs",
      "repos_url": "https://api.github.com/users/pasky/repos",
      "events_url": "https://api.github.com/users/pasky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pasky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c591baf4185aaafdd741d5cfd356fae17b851a1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c591baf4185aaafdd741d5cfd356fae17b851a1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c591baf4185aaafdd741d5cfd356fae17b851a1b"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 167,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8f7db62daaf4a568536f9a50d9c5703aa67da77e",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 1,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
        "patch": "@@ -874,6 +874,56 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value sendexact(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 4 || params.size() > 5)\n+        throw runtime_error(\n+            \"sendexact <fromaccount> [transaction,...] {dstaddress:amount,...} <txfeeamount> [comment]\\n\"\n+            \"Claim all bitcoins received for <fromaccount> within the given list\\n\"\n+            \"of transactions and distribute them into given list of addresses while\\n\"\n+            \"paying the specified tx fee. You can use listtransactions and\\n\"\n+            \"gettransaction to pick transactions to source bitcoins from. You must\\n\"\n+            \"spend all coins from these transactions.\\n\"\n+            \"Amounts are double-precision floating point numbers.\");\n+\n+    string strAccount = AccountFromValue(params[0]);\n+    Array listTx = params[1].get_array();\n+    Object sendTo = params[2].get_obj();\n+    int64 nTxFee = 0.0;\n+    if (params[3].get_real() != 0.0)\n+        nTxFee = AmountFromValue(params[3]);        // rejects 0.0 amounts\n+\n+    CWalletTx wtx;\n+    wtx.strFromAccount = strAccount;\n+    if (params.size() > 4 && params[4].type() != null_type && !params[4].get_str().empty())\n+        wtx.mapValue[\"comment\"] = params[4].get_str();\n+\n+    set<string> setTx;\n+    vector<uint256> vecTx;\n+    BOOST_FOREACH(const Value& s, listTx)\n+    {\n+        uint256 hash;\n+        hash.SetHex(s.get_str());\n+        vecTx.push_back(hash);\n+    }\n+\n+    vector<pair<CScript, int64> > vecSend;\n+    int64 totalAmount = AddressAmountList(sendTo, vecSend);\n+\n+    CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n+    {\n+        CReserveKey keyChange(pwalletMain);\n+        bool fCreated = pwalletMain->CreateExactTransaction(vecTx, vecSend, wtx, keyChange, nTxFee);\n+        if (!fCreated)\n+            throw JSONRPCError(-4, \"Transaction creation failed\");\n+        if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+            throw JSONRPCError(-4, \"Transaction commit failed\");\n+    }\n+\n+    return wtx.GetHash().GetHex();\n+}\n+\n \n struct tallyitem\n {\n@@ -1465,6 +1515,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"move\",                  &movecmd),\n     make_pair(\"sendfrom\",              &sendfrom),\n     make_pair(\"sendmany\",              &sendmany),\n+    make_pair(\"sendexact\",             &sendexact),\n     make_pair(\"gettransaction\",        &gettransaction),\n     make_pair(\"listtransactions\",      &listtransactions),\n     make_pair(\"getwork\",               &getwork),\n@@ -2132,7 +2183,21 @@ int CommandLineRPC(int argc, char *argv[])\n                 throw runtime_error(\"type mismatch\");\n             params[1] = v.get_obj();\n         }\n-        if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+        if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+        if (strMethod == \"sendexact\"              && n > 2)\n+        {\n+            string s = params[1].get_str();\n+            Value v;\n+            if (!read_string(s, v) || v.type() != array_type)\n+                throw runtime_error(\"type mismatch\");\n+            params[1] = v.get_array();\n+\n+            s = params[2].get_str();\n+            if (!read_string(s, v) || v.type() != obj_type)\n+                throw runtime_error(\"type mismatch\");\n+            params[2] = v.get_obj();\n+        }\n+        if (strMethod == \"sendexact\"              && n > 3) ConvertTo<double>(params[3]);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "22b409915db3fee81e15e304b630db5768821a17",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
        "patch": "@@ -720,6 +720,106 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n+bool CWallet::CreateExactTransaction(const vector<uint256>& vecTxIn, const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64 nFee)\n+{\n+    int64 nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+    {\n+        if (nValue < 0)\n+            return false;\n+        nValue += s.second;\n+    }\n+    if (vecSend.empty() || nValue < 0)\n+        return false;\n+    if (vecTxIn.empty())\n+        return false;\n+\n+    wtxNew.pwallet = this;\n+\n+    CRITICAL_BLOCK(cs_main)\n+    {\n+        // txdb must be opened before the mapWallet lock\n+        CTxDB txdb(\"r\");\n+        CRITICAL_BLOCK(cs_mapWallet)\n+        {\n+            wtxNew.vin.clear();\n+            wtxNew.vout.clear();\n+            wtxNew.fFromMe = true;\n+\n+            int64 nValueIn = 0;\n+            double dPriority = 0;\n+            set<pair<const CWalletTx*,unsigned int> > setCoins;\n+\n+            BOOST_FOREACH (const uint256& hash, vecTxIn)\n+            {\n+                const CWalletTx *pcoin = &mapWallet[hash];\n+\n+                for (int i = 0; i < pcoin->vout.size(); i++)\n+                {\n+                    if (pcoin->IsSpent(i) || !IsMine(pcoin->vout[i]))\n+                        continue;\n+\n+                    int64 nValue = pcoin->vout[i].nValue;\n+                    if (nValue <= 0)\n+                        continue;\n+                    string address = pcoin->vout[i].GetAddress();\n+                    string account = mapAddressBook[address];\n+\n+                    printf(\"CreateExactTransaction: addr %s acct %s amount %lld\\n\", address.c_str(), account.c_str(), nValue);\n+                    if (account != wtxNew.strFromAccount)\n+                        continue;\n+                    setCoins.insert(make_pair(pcoin, i));\n+                    nValueIn += nValue;\n+                    dPriority += (double)nValue * pcoin->GetDepthInMainChain();\n+                }\n+            }\n+\n+            // vouts to the payees\n+            BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+                wtxNew.vout.push_back(CTxOut(s.second, s.first));\n+\n+            // Fill vin\n+            BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n+\n+            // Sign\n+            int nIn = 0;\n+            BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                if (!SignSignature(*this, *coin.first, wtxNew, nIn++))\n+                    return false;\n+\n+            // Limit size\n+            unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n+            if (nBytes >= MAX_BLOCK_SIZE_GEN/5)\n+                return false;\n+            dPriority /= nBytes;\n+\n+            // Check that enough fee is included\n+            int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+            bool fAllowFree = CTransaction::AllowFree(dPriority);\n+            int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+            if (nFee < max(nPayFee, nMinFee))\n+            {\n+                printf(\"CreateExactTransaction: Dangerously low fee %lld < max(%lld,%lld)\\n\", nFee, nPayFee, nMinFee);\n+                /* XXX: We hope the user knows what is she doing. */\n+                // return false;\n+            }\n+\n+            // Credit equals debit?\n+            int64 nTotalValue = nValue + nFee;\n+            if (nTotalValue != nValueIn) {\n+                printf(\"CreateExactTransaction: Outgoing value %lld != incoming value %lld\\n\", nTotalValue, nValueIn);\n+                return false;\n+            }\n+\n+            // Fill vtxPrev by copying from previous transactions vtxPrev\n+            wtxNew.AddSupportingTransactions(txdb);\n+            wtxNew.fTimeReceivedIsTxTime = true;\n+        }\n+    }\n+    return true;\n+}\n+\n bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n {\n     int64 nValue = 0;"
      },
      {
        "sha": "79560ddb394cf4e7654948babe2f842bd963fdd9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd79f9ca147cf2df78e12ec59ff8ddcedf2703/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=34fd79f9ca147cf2df78e12ec59ff8ddcedf2703",
        "patch": "@@ -59,6 +59,7 @@ class CWallet : public CKeyStore\n     int64 GetBalance() const;\n     bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n     bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+    bool CreateExactTransaction(const std::vector<uint256>& vecTxIn, const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64 nFee);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     bool BroadcastTransaction(CWalletTx& wtxNew);\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);"
      }
    ]
  }
]