fanquake,2017-02-14T13:34:28Z,"Failed on OSX:\n```\nqt/qt_bitcoin_qt-bitcoin.o `test -f 'qt/bitcoin.cpp' || echo './'`qt/bitcoin.cpp\nIn file included from qt/bitcoin.cpp:9:\nIn file included from ./qt/bitcoingui.h:12:\nIn file included from ./amount.h:9:\n./serialize.h:311:16: error: constexpr function's return type 'void' is not a literal type\nconstexpr void CheckVarIntMode()\n               ^\n1 error generated.\n",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-279708061,279708061,
MarcoFalke,2017-02-14T13:43:02Z,"> constexpr function's return type 'void' is not a literal type\n\nIf this is c++14 code, I wonder why the other builds succeeded, given that we are at c++11.\n",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-279709931,279709931,
CryptAxe,2017-02-15T21:38:08Z,Are the other systems using g++ > version 5? ,https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-280147546,280147546,
laanwj,2017-02-22T12:06:19Z,"Do we explicitly request compilation for stdc++11? Would make sense to do so, as the default can (and has) changed.",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-281651607,281651607,
theuni,2017-02-22T18:54:19Z,"This is a weird one.\n\ng++ accepts ```constexpr void foo()``` even when using ```-std=c++11 -pedantic -Wall -Wextra```. I assume that's a bug, but I'm not certain without looking at the language spec itself. That's the case in 4.8-5.1, anyway.\n\nNot much we can do about that, as far as I can tell. Nothing I tried made g++ complain about it.\n\n@laanwj I agree. It turned out to be unrelated",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-281765208,281765208,
ryanofsky,2017-02-23T21:03:01Z,"Thanks @theuni, that's a clever workaround. Added in dd094d6c0aede5d9e4e22caa441cdacbc95beede.\n\nSquashed dd094d6c0aede5d9e4e22caa441cdacbc95beede -> d1df497083df4116ae3bf2915cea0da6a13fa274 ([varint-assert.1](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.1) -> [varint-assert.2](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.2))\n",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-282120232,282120232,
ryanofsky,2017-03-03T19:22:53Z,"Rebased d1df497083df4116ae3bf2915cea0da6a13fa274 -> 8950418e538d02c2eb8b0ea76b9838e867e91feb ([pr/varint-assert.2](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.2) -> [pr/varint-assert.3](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.3)) because of conflict with renamed nVersion variable in #8808.\n",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-284046199,284046199,
theuni,2017-03-06T21:01:37Z,"Concept ACK. Though i'd prefer to just introduce a new macro rather than a default arg:\n```VARINT(foo, VarIntMode::NONNEGATIVE_SIGNED)``` -> ```VARINT_NONNEGATIVE_SIGNED(foo)```\n",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-284531053,284531053,
laanwj,2017-05-23T16:59:05Z,This seems to be in limbo - @ryanofsky can you please reply to @theuni's comment?,https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-303466105,303466105,
ryanofsky,2017-05-23T17:38:11Z,"> Though i'd prefer to just introduce a new macro rather than a default arg\n\nI guess I prefer the opposite. I think it's good if you can look at code like:\n\n```\nss << VARINT(i);\nss << VARINT(i, VarIntMode::DEFAULT);\nss << VARINT(i, VarIntMode::NONNEGATIVE_SIGNED);\n```\n\nand know that all 3 encodings of `i` are going to use the same underlying serialization machinery, and that yo",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-303476612,303476612,
laanwj,2017-11-09T13:08:01Z,"> ss << VARINT(i);\n> ss << VARINT(i, VarIntMode::DEFAULT);\n> ss << VARINT(i, VarIntMode::NONNEGATIVE_SIGNED);\n\nFWIW I don't like the repetition of VarInt here, the VarIntMode:: could be inside the macro instead of outside it to just have\n```\nss << VARINT(i);\nss << VARINT(i, DEFAULT);\nss << VARINT(i, NONNEGATIVE_SIGNED);\n```\n\nBut I wouldn't mind explicit VARUINT_U and VARINT_I",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-343149168,343149168,
ryanofsky,2017-11-09T16:31:27Z,"@laanwj. Implemented your suggestion in af20ce5a90aadd56d504291c754e0c60ca1f8788. Let me know if you think I should squash it.\n\nAs mentioned before though, I prefer current change because VARINT() is a simple, dumb, single macro and regular VARINT(x) cases work exactly the same as before. The only verbose case is the VarIntMode::NONNEGATIVE_SIGNED one and IMO that is verbose in a good way, bec",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-343211099,343211099,
laanwj,2017-11-09T16:36:50Z,"Thanks.\n\n> As mentioned before though, I prefer current change because VARINT() is a simple, dumb, single macro and regular VARINT(x) cases work exactly the same as before. \n\nI agree in general, but for this specific case this just seems overdone.\nWe don't ever expect more varintmodes than those two, so going all the way with specifying a long enum on every single use seems overkill, esp",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-343212805,343212805,
ryanofsky,2017-11-09T16:54:56Z,"Please let me know if af20ce5a90aadd56d504291c754e0c60ca1f8788 is ok and does what you want then. I think both the implementation and the resulting interface are gross, but if this is actually what you want, I'll squash it.",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-343218712,343218712,
ryanofsky,2017-12-01T21:57:26Z,"Still need feedback on whether to merge af20ce5a90aadd56d504291c754e0c60ca1f8788 into this PR. I don't love the macro magic it adds, and I don't see much benefit in the change since only weird legacy code should ever need to use `NONNEGATIVE_SIGNED` (normal code should just use `VARINT(value)`). But I'm fine with it if it would help move things forward.",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-348625046,348625046,
theuni,2017-12-21T00:05:09Z,"I would still prefer a separate macro, so that makes 3 differing opinions here :)\nBut as they all do the same thing, and we could argue about syntactic sugar until the end of time, utACK to either approach here.",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-353218809,353218809,
laanwj,2018-02-08T18:38:54Z,"> I would still prefer a separate macro, so that makes 3 differing opinions here :)\n\nSeperate macros was also one of my preferences, FWIW:\n\n> But I wouldn't mind explicit VARUINT_U and VARINT_I or even VARUINT and VARSINT either...\n(there's no need to make things longer and longer and more verbose)\n\nI just don't like the overly verbose construction of passing a scoped enum into every",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-364207693,364207693,
ryanofsky,2018-03-16T16:54:45Z,"Rebased 8950418e538d02c2eb8b0ea76b9838e867e91feb -> 46e649b8ff6e7a66957fc269a04ef4117bd34d7a ([pr/varint-assert.3](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.3) -> [pr/varint-assert.4](https://github.com/ryanofsky/bitcoin/commits/pr/varint-assert.4)) due to conflict with #10195\nRebased 46e649b8ff6e7a66957fc269a04ef4117bd34d7a -> 649bfb00bfb738df1b2c41c3d0c982f430c85495 ([pr/va",https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-373777050,373777050,
sipa,2018-03-16T20:54:20Z,utACK 499d95e278f34790660a2b9baf5525e0def1485a,https://github.com/bitcoin/bitcoin/pull/9753#issuecomment-373842203,373842203,
