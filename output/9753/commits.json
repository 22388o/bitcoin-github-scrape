[
  {
    "sha": "499d95e278f34790660a2b9baf5525e0def1485a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTlkOTVlMjc4ZjM0NzkwNjYwYTJiOWJhZjU1MjVlMGRlZjE0ODVh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T18:41:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-15T23:57:55Z"
      },
      "message": "Add static_assert to prevent VARINT(<signed value>)\n\nUsing VARINT with signed types is dangerous because negative values will appear\nto serialize correctly, but then deserialize as positive values mod 128.\n\nThis commit changes the VARINT macro to trigger an error by default if called\nwith an signed value, and updates broken uses of VARINT to pass a special flag\nthat lets them keep working with no change in behavior.",
      "tree": {
        "sha": "f95140f9f7ba7344345e96c5da618d48e5b5d44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f95140f9f7ba7344345e96c5da618d48e5b5d44b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/499d95e278f34790660a2b9baf5525e0def1485a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/499d95e278f34790660a2b9baf5525e0def1485a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/499d95e278f34790660a2b9baf5525e0def1485a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/499d95e278f34790660a2b9baf5525e0def1485a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be9a9a570c1140048f8781ced1111e1d930e517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be9a9a570c1140048f8781ced1111e1d930e517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be9a9a570c1140048f8781ced1111e1d930e517"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 57,
      "deletions": 33
    },
    "files": [
      {
        "sha": "757840bb236a0acdfedc7180b844a3a8d137a553",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -91,7 +91,7 @@ struct CDiskBlockPos\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile));\n+        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n         READWRITE(VARINT(nPos));\n     }\n \n@@ -386,13 +386,13 @@ class CDiskBlockIndex : public CBlockIndex\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         int _nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(VARINT(_nVersion));\n+            READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n \n-        READWRITE(VARINT(nHeight));\n+        READWRITE(VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n         READWRITE(VARINT(nStatus));\n         READWRITE(VARINT(nTx));\n         if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile));\n+            READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n         if (nStatus & BLOCK_HAVE_DATA)\n             READWRITE(VARINT(nDataPos));\n         if (nStatus & BLOCK_HAVE_UNDO)"
      },
      {
        "sha": "3f66c0c536ff0f65ed8acf331a3bccab6138535e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -834,18 +834,18 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n {\n     assert(!outputs.empty());\n     ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase, VarIntMode::NONNEGATIVE_SIGNED);\n     stats.nTransactions++;\n     for (const auto output : outputs) {\n         ss << VARINT(output.first + 1);\n         ss << output.second.out.scriptPubKey;\n-        ss << VARINT(output.second.out.nValue);\n+        ss << VARINT(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;\n         stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n                            2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n     }\n-    ss << VARINT(0);\n+    ss << VARINT(0u);\n }\n \n //! Calculate statistics about the unspent transaction output set"
      },
      {
        "sha": "91da6b0f80089f645ad59c61727c307f46f8cc04",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 33,
        "deletions": 9,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -296,9 +296,31 @@ uint64_t ReadCompactSize(Stream& is)\n  * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]\n  */\n \n-template<typename I>\n+/**\n+ * Mode for encoding VarInts.\n+ *\n+ * Currently there is no support for signed encodings. The default mode will not\n+ * compile with signed values, and the legacy \"nonnegative signed\" mode will\n+ * accept signed values, but improperly encode and decode them if they are\n+ * negative. In the future, the DEFAULT mode could be extended to support\n+ * negative numbers in a backwards compatible way, and additional modes could be\n+ * added to support different varint formats (e.g. zigzag encoding).\n+ */\n+enum class VarIntMode { DEFAULT, NONNEGATIVE_SIGNED };\n+\n+template <VarIntMode Mode, typename I>\n+struct CheckVarIntMode {\n+    constexpr CheckVarIntMode()\n+    {\n+        static_assert(Mode != VarIntMode::DEFAULT || std::is_unsigned<I>::value, \"Unsigned type required with mode DEFAULT.\");\n+        static_assert(Mode != VarIntMode::NONNEGATIVE_SIGNED || std::is_signed<I>::value, \"Signed type required with mode NONNEGATIVE_SIGNED.\");\n+    }\n+};\n+\n+template<VarIntMode Mode, typename I>\n inline unsigned int GetSizeOfVarInt(I n)\n {\n+    CheckVarIntMode<Mode, I>();\n     int nRet = 0;\n     while(true) {\n         nRet++;\n@@ -312,9 +334,10 @@ inline unsigned int GetSizeOfVarInt(I n)\n template<typename I>\n inline void WriteVarInt(CSizeComputer& os, I n);\n \n-template<typename Stream, typename I>\n+template<typename Stream, VarIntMode Mode, typename I>\n void WriteVarInt(Stream& os, I n)\n {\n+    CheckVarIntMode<Mode, I>();\n     unsigned char tmp[(sizeof(n)*8+6)/7];\n     int len=0;\n     while(true) {\n@@ -329,9 +352,10 @@ void WriteVarInt(Stream& os, I n)\n     } while(len--);\n }\n \n-template<typename Stream, typename I>\n+template<typename Stream, VarIntMode Mode, typename I>\n I ReadVarInt(Stream& is)\n {\n+    CheckVarIntMode<Mode, I>();\n     I n = 0;\n     while(true) {\n         unsigned char chData = ser_readdata8(is);\n@@ -351,7 +375,7 @@ I ReadVarInt(Stream& is)\n }\n \n #define FLATDATA(obj) CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj))\n-#define VARINT(obj) WrapVarInt(REF(obj))\n+#define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n #define COMPACTSIZE(obj) CCompactSize(REF(obj))\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n@@ -395,7 +419,7 @@ class CFlatData\n     }\n };\n \n-template<typename I>\n+template<VarIntMode Mode, typename I>\n class CVarInt\n {\n protected:\n@@ -405,12 +429,12 @@ class CVarInt\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+        WriteVarInt<Stream,Mode,I>(s, n);\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+        n = ReadVarInt<Stream,Mode,I>(s);\n     }\n };\n \n@@ -461,8 +485,8 @@ class LimitedString\n     }\n };\n \n-template<typename I>\n-CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }\n+template<VarIntMode Mode=VarIntMode::DEFAULT, typename I>\n+CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }\n \n /**\n  * Forward declarations"
      },
      {
        "sha": "7a79a77e8bd0d7b9d11c8bf04af7a1c02b972951",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -177,8 +177,8 @@ BOOST_AUTO_TEST_CASE(varints)\n     CDataStream ss(SER_DISK, 0);\n     CDataStream::size_type size = 0;\n     for (int i = 0; i < 100000; i++) {\n-        ss << VARINT(i);\n-        size += ::GetSerializeSize(VARINT(i), 0, 0);\n+        ss << VARINT(i, VarIntMode::NONNEGATIVE_SIGNED);\n+        size += ::GetSerializeSize(VARINT(i, VarIntMode::NONNEGATIVE_SIGNED), 0, 0);\n         BOOST_CHECK(size == ss.size());\n     }\n \n@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(varints)\n     // decode\n     for (int i = 0; i < 100000; i++) {\n         int j = -1;\n-        ss >> VARINT(j);\n+        ss >> VARINT(j, VarIntMode::NONNEGATIVE_SIGNED);\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }\n \n@@ -205,21 +205,21 @@ BOOST_AUTO_TEST_CASE(varints)\n BOOST_AUTO_TEST_CASE(varints_bitpatterns)\n {\n     CDataStream ss(SER_DISK, 0);\n-    ss << VARINT(0); BOOST_CHECK_EQUAL(HexStr(ss), \"00\"); ss.clear();\n-    ss << VARINT(0x7f); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n-    ss << VARINT((int8_t)0x7f); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n-    ss << VARINT(0x80); BOOST_CHECK_EQUAL(HexStr(ss), \"8000\"); ss.clear();\n+    ss << VARINT(0, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"00\"); ss.clear();\n+    ss << VARINT(0x7f, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n+    ss << VARINT((int8_t)0x7f, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n+    ss << VARINT(0x80, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"8000\"); ss.clear();\n     ss << VARINT((uint8_t)0x80); BOOST_CHECK_EQUAL(HexStr(ss), \"8000\"); ss.clear();\n-    ss << VARINT(0x1234); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n-    ss << VARINT((int16_t)0x1234); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n-    ss << VARINT(0xffff); BOOST_CHECK_EQUAL(HexStr(ss), \"82fe7f\"); ss.clear();\n+    ss << VARINT(0x1234, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n+    ss << VARINT((int16_t)0x1234, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n+    ss << VARINT(0xffff, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"82fe7f\"); ss.clear();\n     ss << VARINT((uint16_t)0xffff); BOOST_CHECK_EQUAL(HexStr(ss), \"82fe7f\"); ss.clear();\n-    ss << VARINT(0x123456); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n-    ss << VARINT((int32_t)0x123456); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n+    ss << VARINT(0x123456, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n+    ss << VARINT((int32_t)0x123456, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n     ss << VARINT(0x80123456U); BOOST_CHECK_EQUAL(HexStr(ss), \"86ffc7e756\"); ss.clear();\n     ss << VARINT((uint32_t)0x80123456U); BOOST_CHECK_EQUAL(HexStr(ss), \"86ffc7e756\"); ss.clear();\n     ss << VARINT(0xffffffff); BOOST_CHECK_EQUAL(HexStr(ss), \"8efefefe7f\"); ss.clear();\n-    ss << VARINT(0x7fffffffffffffffLL); BOOST_CHECK_EQUAL(HexStr(ss), \"fefefefefefefefe7f\"); ss.clear();\n+    ss << VARINT(0x7fffffffffffffffLL, VarIntMode::NONNEGATIVE_SIGNED); BOOST_CHECK_EQUAL(HexStr(ss), \"fefefefefefefefe7f\"); ss.clear();\n     ss << VARINT(0xffffffffffffffffULL); BOOST_CHECK_EQUAL(HexStr(ss), \"80fefefefefefefefe7f\"); ss.clear();\n }\n "
      },
      {
        "sha": "91d6c98430a910541c69e6afddc464158fa8f5ee",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -324,7 +324,7 @@ class CCoins\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         // version\n-        int nVersionDummy;\n+        unsigned int nVersionDummy;\n         ::Unserialize(s, VARINT(nVersionDummy));\n         // header code\n         ::Unserialize(s, VARINT(nCode));\n@@ -351,7 +351,7 @@ class CCoins\n                 ::Unserialize(s, CTxOutCompressor(vout[i]));\n         }\n         // coinbase height\n-        ::Unserialize(s, VARINT(nHeight));\n+        ::Unserialize(s, VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n     }\n };\n "
      },
      {
        "sha": "6fc25b9853daff0a938e3d180f080e79c85da5b3",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/499d95e278f34790660a2b9baf5525e0def1485a/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/499d95e278f34790660a2b9baf5525e0def1485a/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=499d95e278f34790660a2b9baf5525e0def1485a",
        "patch": "@@ -25,7 +25,7 @@ class TxInUndoSerializer\n public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0), VarIntMode::NONNEGATIVE_SIGNED));\n         if (txout->nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n@@ -51,7 +51,7 @@ class TxInUndoDeserializer\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n-            int nVersionDummy;\n+            unsigned int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n         ::Unserialize(s, CTxOutCompressor(REF(txout->out)));"
      }
    ]
  }
]