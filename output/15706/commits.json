[
  {
    "sha": "35c46bcb68344bb692dcc71a7c4dd6ac4442a920",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWM0NmJjYjY4MzQ0YmI2OTJkY2M3MWE3YzRkZDZhYzQ0NDJhOTIw",
    "commit": {
      "author": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2019-03-29T00:18:31Z"
      },
      "committer": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2020-01-24T22:49:49Z"
      },
      "message": "Check QT library version\n\nFixes issue #15688\n\nDue to a bug, in systems using pkg-config, the version of the Qt library is\nnot checked at configure time. Without any check, when Qt version is not\nsupported, the build process stops with unexpleined errors.\n\nThis PR introduces the control of the version of the QT library, returning\na warning or an error at configure time, when the installed version is not\nsupported.",
      "tree": {
        "sha": "ab532747377f504c07c1dd9fe65abcca369eefd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab532747377f504c07c1dd9fe65abcca369eefd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35c46bcb68344bb692dcc71a7c4dd6ac4442a920",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35c46bcb68344bb692dcc71a7c4dd6ac4442a920",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35c46bcb68344bb692dcc71a7c4dd6ac4442a920",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35c46bcb68344bb692dcc71a7c4dd6ac4442a920/comments",
    "author": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28fbe68fdcac2a06f359b1e48555a3d23015c2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fbe68fdcac2a06f359b1e48555a3d23015c2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28fbe68fdcac2a06f359b1e48555a3d23015c2b7"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 26,
      "deletions": 16
    },
    "files": [
      {
        "sha": "019a3ebfbc37cb3df38b0248af845bad5bee890c",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35c46bcb68344bb692dcc71a7c4dd6ac4442a920/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35c46bcb68344bb692dcc71a7c4dd6ac4442a920/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=35c46bcb68344bb692dcc71a7c4dd6ac4442a920",
        "patch": "@@ -81,8 +81,6 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n \n dnl Find the appropriate version of Qt libraries and includes.\n dnl Inputs: $1: Whether or not pkg-config should be used. yes|no. Default: yes.\n-dnl Inputs: $2: If $1 is \"yes\" and --with-gui=auto, which qt version should be\n-dnl         tried first.\n dnl Outputs: See _BITCOIN_QT_FIND_LIBS_*\n dnl Outputs: Sets variables for all qt-related tools.\n dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n@@ -99,6 +97,12 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG])\n   fi\n \n+  BITCOIN_QT_CHECK([\n+    if test \"x$bitcoin_cv_qt_minimumrequired\" != xyes; then\n+      BITCOIN_QT_FAIL([Qt version not supported])\n+    fi\n+  ])\n+\n   dnl This is ugly and complicated. Yuck. Works as follows:\n   dnl For Qt5, we can check a header to find out whether Qt is build\n   dnl statically. When Qt is built statically, some plugins must be linked into\n@@ -211,7 +215,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n        ])\n   esac\n \n-\n   dnl enable qt support\n   AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n   BITCOIN_QT_CHECK([\n@@ -257,9 +260,9 @@ dnl ----\n \n dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n dnl Requires: INCLUDES must be populated as necessary.\n-dnl Output: bitcoin_cv_qt5=yes|no\n-AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n-  AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n+dnl Output: bitcoin_cv_qt_minimumrequired=yes|no\n+AC_DEFUN([_BITCOIN_QT_CHECK_MINIMUM_REQUIRED],[\n+  AC_CACHE_CHECK(for Qt >= 5.5.1, bitcoin_cv_qt_minimumrequired,[\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <QtCore/qconfig.h>\n       #ifndef QT_VERSION\n@@ -271,15 +274,15 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n       choke\n       #endif\n     ]])],\n-    [bitcoin_cv_qt5=yes],\n-    [bitcoin_cv_qt5=no])\n+    [bitcoin_cv_qt_minimumrequired=yes],\n+    [bitcoin_cv_qt_minimumrequired=no])\n ])])\n \n-dnl Internal. Check if the included version of Qt is greater than Qt58.\n+dnl Internal. Check if the included version of Qt is >= 5.8.\n dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt58=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT58],[\n-  AC_CACHE_CHECK(for > Qt 5.7, bitcoin_cv_qt58,[\n+  AC_CACHE_CHECK(for >= Qt 5.8, bitcoin_cv_qt58,[\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <QtCore/qconfig.h>\n       #ifndef QT_VERSION\n@@ -410,10 +413,6 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n ])\n \n dnl Internal. Find Qt libraries using pkg-config.\n-dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n-dnl         first.\n-dnl Inputs: $1: If bitcoin_qt_want_version is \"auto\", check for this version\n-dnl         first.\n dnl Outputs: All necessary QT_* variables are set.\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n@@ -434,14 +433,25 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n         PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n       fi\n     ])\n+    BITCOIN_QT_CHECK([\n+      AC_CACHE_CHECK(for Qt >= 5.5.1,bitcoin_cv_qt_minimumrequired,\n+        PKG_CHECK_EXISTS(Qt5Core < 5.5.1,[bitcoin_cv_qt_minimumrequired=no],[bitcoin_cv_qt_minimumrequired=yes])\n+      )\n+    ])\n+    BITCOIN_QT_CHECK([\n+      AC_CACHE_CHECK(for Qt >= 5.8.0,bitcoin_cv_qt58,\n+        PKG_CHECK_EXISTS(Qt5Core < 5.8.0,[bitcoin_cv_qt58=no],[bitcoin_cv_qt58=yes])\n+      )\n+    ])\n   ])\n   true; dnl\n ])\n \n dnl Internal. Find Qt libraries without using pkg-config. Version is deduced\n dnl from the discovered headers.\n dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to use.\n-dnl         If \"auto\", the version will be discovered by _BITCOIN_QT_CHECK_QT5.\n+dnl         If \"auto\", the version will be discovered by _BITCOIN_QT_CHECK_MINIMUM_REQUIRED\n+dnl         and _BITCOIN_QT_CHECK_QT58.\n dnl Outputs: All necessary QT_* variables are set.\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n@@ -462,7 +472,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n \n   BITCOIN_QT_CHECK([\n     if test \"x$bitcoin_qt_want_version\" = xauto; then\n-      _BITCOIN_QT_CHECK_QT5\n+      _BITCOIN_QT_CHECK_MINIMUM_REQUIRED\n       _BITCOIN_QT_CHECK_QT58\n     fi\n     QT_LIB_PREFIX=Qt5"
      }
    ]
  }
]