[
  {
    "sha": "3fd850ae5e5f0e167e63782501886d7e114482e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQ4NTBhZTVlNWYwZTE2N2U2Mzc4MjUwMTg4NmQ3ZTExNDQ4MmUw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-07T10:53:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-08T16:24:14Z"
      },
      "message": "[Wallet] use CHDPubKey, don't store child priv keys in db, derive them on the fly",
      "tree": {
        "sha": "9793479b3666ffef92ccf9f4b44bf23da99712ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9793479b3666ffef92ccf9f4b44bf23da99712ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd850ae5e5f0e167e63782501886d7e114482e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYSYkvAAoJECnUvLZBb1PsqMYP/0ynymkjXXXu55pCn2vFcjk+\nX4YbydYijvVgINusNMDpOcJPvswgn2WM3F6lnluaNb8PyNiSYMFD5ZvPq+pl4lZG\nxydg3Jey97o5+BhUqpO0PEEBvigTePxzHAc9t9fFpc4JpMlmowdGkl2Abwo+ZBxc\nCVHcQecy0ueiNAZe0sHPiA94aN5IEKJ9/rvieiOlqPlXoxiH1aFL1qkBBgGWUH9B\noQ1qYj64D0KmwBj1xXLDpl89V7wGxPA4OcRNd6ntKanRMa8E7VQA+v1QXnKKfCQh\n7kM7qaizygJ9gowjd186A+BGTOYBRKSWxMzxCUUwbUaBwtkXamEFDvrnO3coIOrG\nS3vWr880TjDACDWfI7UM0M0R6e+RHZvtjtpmcGjmoGAkpfWkxZKrHw2SrzoTWneH\nG72SXzp7TVdVxaIiKMol195MB3CyXmevnuJZk5AuN5XR3aZ4LuGscQA7+Fcw+IP8\ng5L8sNQhDVCa9dB0w5fpBqNZq72gmDFTG+qv+PJw6LwsXbK3Q0kaVcHFYziu9ZO8\nqpy8IY6M5Up638ozl8OYCWAUGo1HvIOZawD5wl8iWEzG2IJpmVIlq3vxyOnmGoF7\nIm3hV+N3XPXX+egVEp5ar7AjwsRYqU3TqBSIXrUqE2r6X9cYzoOklc9Dn6IoUErr\n7n930fv2ctB0s/hsW9oh\n=4P6s\n-----END PGP SIGNATURE-----",
        "payload": "tree 9793479b3666ffef92ccf9f4b44bf23da99712ea\nparent 09c4fd157c5b88df2d97fad4826c79b094db90c9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481108028 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1481214254 +0100\n\n[Wallet] use CHDPubKey, don't store child priv keys in db, derive them on the fly\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd850ae5e5f0e167e63782501886d7e114482e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd850ae5e5f0e167e63782501886d7e114482e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd850ae5e5f0e167e63782501886d7e114482e0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09c4fd157c5b88df2d97fad4826c79b094db90c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09c4fd157c5b88df2d97fad4826c79b094db90c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09c4fd157c5b88df2d97fad4826c79b094db90c9"
      }
    ],
    "stats": {
      "total": 203,
      "additions": 185,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f5092e3bcc78840875f7003de9fe03c99a4207c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 13,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3fd850ae5e5f0e167e63782501886d7e114482e0",
        "patch": "@@ -98,26 +98,29 @@ CPubKey CWallet::GenerateNewKey()\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n+    CPubKey pubkey;\n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n         DeriveNewChildKey(metadata, secret);\n+        pubkey = secret.GetPubKey();\n     } else {\n         secret.MakeNewKey(fCompressed);\n-    }\n \n-    // Compressed public keys were introduced in version 0.6.0\n-    if (fCompressed)\n-        SetMinVersion(FEATURE_COMPRPUBKEY);\n+        // Compressed public keys were introduced in version 0.6.0\n+        if (fCompressed)\n+            SetMinVersion(FEATURE_COMPRPUBKEY);\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n+        pubkey = secret.GetPubKey();\n+        assert(secret.VerifyPubKey(pubkey));\n \n-    mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+        mapKeyMetadata[pubkey.GetID()] = metadata;\n+        if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n+            nTimeFirstKey = nCreationTime;\n+\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n \n-    if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n     return pubkey;\n }\n \n@@ -154,11 +157,116 @@ void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret)\n         // increment childkey index\n         hdChain.nExternalChainCounter++;\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+\n     secret = childKey.key;\n \n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    // store metadata\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    if (!nTimeFirstKey || metadata.nCreateTime < nTimeFirstKey)\n+        nTimeFirstKey = metadata.nCreateTime;\n+\n     // update the chain model in the database\n     if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+\n+    if (CanSupportFeature(FEATURE_WITH_HD_PUBKEY))\n+    {\n+        if (!AddHDPubKey(childKey.Neuter()))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    else\n+    {\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+}\n+\n+bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n+    if (mi != mapHdPubKeys.end())\n+    {\n+        const CHDPubKey &hdPubKey = (*mi).second;\n+        vchPubKeyOut = hdPubKey.extPubKey.pubkey;\n+        return true;\n+    }\n+    else\n+        return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut);\n+}\n+\n+bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n+    if (mi != mapHdPubKeys.end())\n+    {\n+        // if the key has been found in mapHdPubKeys, derive it on the fly\n+        const CHDPubKey &hdPubKey = (*mi).second;\n+\n+        // TODO: refactor with DeriveNewChildKey\n+        CKey key;                      //master key seed (256bit)\n+        CExtKey masterKey;             //hd master key\n+        CExtKey accountKey;            //key at m/0'\n+        CExtKey externalChainChildKey; //key at m/0'/0'\n+        CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+        // try to get the master key\n+        if (!GetKey(hdPubKey.masterKeyID, key))\n+            return false;\n+\n+        masterKey.SetMaster(key.begin(), key.size());\n+        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+        accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+        externalChainChildKey.Derive(childKey, hdPubKey.extPubKey.nChild);\n+        keyOut = childKey.key;\n+        return true;\n+    }\n+    else\n+        return CCryptoKeyStore::GetKey(address, keyOut);\n+}\n+\n+bool CWallet::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_wallet);\n+    if (mapHdPubKeys.count(address) > 0)\n+        return true;\n+    return CCryptoKeyStore::HaveKey(address);\n+}\n+\n+bool CWallet::LoadHDPubKey(const CHDPubKey &hdPubKey)\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+\n+    mapHdPubKeys[hdPubKey.extPubKey.pubkey.GetID()] = hdPubKey;\n+    return true;\n+}\n+\n+bool CWallet::AddHDPubKey(const CExtPubKey &extPubKey)\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+\n+    CHDPubKey hdPubKey;\n+    hdPubKey.extPubKey = extPubKey;\n+    hdPubKey.masterKeyID = hdChain.masterKeyID;\n+    mapHdPubKeys[extPubKey.pubkey.GetID()] = hdPubKey;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(extPubKey.pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(extPubKey.pubkey);\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+\n+    if (!fFileBacked)\n+        return true;\n+\n+    return CWalletDB(strWalletFile).WriteHDPubKey(hdPubKey, mapKeyMetadata[extPubKey.pubkey.GetID()]);\n }\n \n bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n@@ -1296,7 +1404,7 @@ bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n     LOCK(cs_wallet);\n \n     // ensure this wallet.dat can only be opened by clients supporting HD\n-    SetMinVersion(FEATURE_HD);\n+    SetMinVersion(FEATURE_WITH_HD_PUBKEY);\n \n     // store the keyid (hash160) together with\n     // the child index counter in the database\n@@ -2475,7 +2583,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     if (!signSuccess)\n                     {\n-                        strFailReason = _(\"Signing transaction failed\");\n+                        strFailReason = _(\"Signing transaction failed \");\n                         return false;\n                     } else {\n                         UpdateTransaction(txNew, nIn, sigdata);"
      },
      {
        "sha": "5222a9f456cf0c00360c78a41743525cd22e4291",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3fd850ae5e5f0e167e63782501886d7e114482e0",
        "patch": "@@ -83,6 +83,7 @@ enum WalletFeature\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n \n     FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n+    FEATURE_WITH_HD_PUBKEY = 139900, // on-the-fly private key derivation\n     FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n@@ -665,14 +666,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n-\n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n-\n     CPubKey vchDefaultKey;\n-\n     std::set<COutPoint> setLockedCoins;\n-\n     int64_t nTimeFirstKey;\n+    std::map<CKeyID, CHDPubKey> mapHdPubKeys; //<! memory map of HD extended pubkeys\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n@@ -706,6 +704,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     CPubKey GenerateNewKey();\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret);\n+    //! HaveKey implementation that also checks the mapHdPubKeys\n+    bool HaveKey(const CKeyID &address) const;\n+    //! GetPubKey implementation that also checks the mapHdPubKeys\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    //! GetKey implementation that can derive a HD private key on the fly\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n+    //! Adds a HDPubKey into the wallet(database)\n+    bool AddHDPubKey(const CExtPubKey &extPubKey);\n+    //! loads a HDPubKey into the wallets memory\n+    bool LoadHDPubKey(const CHDPubKey &hdPubKey);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)"
      },
      {
        "sha": "65099056fd94e5251bad3c37ca00f3e2f745a588",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3fd850ae5e5f0e167e63782501886d7e114482e0",
        "patch": "@@ -526,6 +526,25 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n+        else if (strType == \"hdpubkey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+\n+            CHDPubKey hdPubKey;\n+            ssValue >> hdPubKey;\n+\n+            if(vchPubKey != hdPubKey.extPubKey.pubkey)\n+            {\n+                strErr = \"Error reading wallet database: CHDPubKey corrupt\";\n+                return false;\n+            }\n+            if (!pwallet->LoadHDPubKey(hdPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadHDPubKey failed\";\n+                return false;\n+            }\n+        }\n     } catch (...)\n     {\n         return false;\n@@ -931,9 +950,18 @@ bool CWalletDB::EraseDestData(const std::string &address, const std::string &key\n     return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n \n-\n bool CWalletDB::WriteHDChain(const CHDChain& chain)\n {\n     nWalletDBUpdated++;\n     return Write(std::string(\"hdchain\"), chain);\n }\n+\n+bool CWalletDB::WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta)\n+{\n+    nWalletDBUpdated++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), hdPubKey.extPubKey.pubkey), keyMeta, false))\n+        return false;\n+\n+    return Write(std::make_pair(std::string(\"hdpubkey\"), hdPubKey.extPubKey.pubkey), hdPubKey, false);\n+}"
      },
      {
        "sha": "6526a7802a316ebf3e70048de5e2004f21e9a023",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd850ae5e5f0e167e63782501886d7e114482e0/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3fd850ae5e5f0e167e63782501886d7e114482e0",
        "patch": "@@ -69,6 +69,27 @@ class CHDChain\n     }\n };\n \n+/* hd pubkey data model */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION = 1;\n+    int nVersion;\n+    CExtPubKey extPubKey;\n+    CKeyID masterKeyID;\n+\n+    CHDPubKey() { nVersion = CHDPubKey::CURRENT_VERSION; }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(this->nVersion);\n+        READWRITE(extPubKey);\n+        READWRITE(masterKeyID);\n+    }\n+};\n+\n class CKeyMetadata\n {\n public:\n@@ -176,6 +197,8 @@ class CWalletDB : public CDB\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    bool WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta);\n+\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);"
      }
    ]
  }
]