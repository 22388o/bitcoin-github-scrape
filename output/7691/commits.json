[
  {
    "sha": "25340b7cd58c3451ae91c7b501fdff70ef05ec80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTM0MGI3Y2Q1OGMzNDUxYWU5MWM3YjUwMWZkZmY3MGVmMDVlYzgw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-15T09:30:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-22T07:20:59Z"
      },
      "message": "[Wallet] refactor wallet/init interaction",
      "tree": {
        "sha": "8adcbc5d93a710f8c955bf25d7b7ce78db07a974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8adcbc5d93a710f8c955bf25d7b7ce78db07a974"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25340b7cd58c3451ae91c7b501fdff70ef05ec80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW8PJdAAoJECnUvLZBb1PskwcP/1vTiBkfSVlmjon/aICBVQMu\n1C0CqsvKl8UrBCTovvuFjjToR9ihE0kgffvhDHW0Ub5kpal+MetrpBR0S3wJtXT0\nbfrOzwFI0SrPnAB5wXWv0m3hxdn/VGHKXX+3hB6Tk4HhQB5anjpCtDePVuv2vJc5\njYBPor0vQ4MMFcTUIwuqTnJ/dkBIyttodR5fqTHRc2R7WOH+6elkt7LPLj3xFsCS\n2PQAZZ7O7+XFkOHfvhWbPT9gPz45S/PYbMc9GWWZtBwekYU62uFEwcT37w2w31D5\nqtSHW7V2/bxae7dL7dec/CyRcEEr85uSQrxES9btRfqPe5QRrvv0TMjPBgCFd3dK\naMBTVXSyd8D5LEsYOEAIYMsLKBCG/2wQ2/He/yY/72YLaPjvwP+c9fHZ6pDcbh0c\ndy5E1IhkJtTIt/s/gCXIQ7xcnvV+JPoDilDifHulNTpMmhRTyIHOZ28p1nnpe+Hx\neyBKlvvBEULkJHUnv3LLHbS1gScY4iV8wqv52ImpAPHLcnK2ENAsBySzeS9AK1gV\n4/riI3zUNfEDLACg4xkf/0hjPhQsJ62cbjz6+/LfYWGdAJvcLkf/7Qrxjn4ntWwd\nqUzZf46eImYPpF6iNb9EjjQmASoOvEgQ3XGEDWtuEGNoWhC14/yUmrwipQBREExQ\n6Va4h+eI9EmLtAzDqWlS\n=Yyrl\n-----END PGP SIGNATURE-----",
        "payload": "tree 8adcbc5d93a710f8c955bf25d7b7ce78db07a974\nparent a6a860796a44a2805a58391a009ba22752f64e32\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1458034237 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1458631259 +0100\n\n[Wallet] refactor wallet/init interaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25340b7cd58c3451ae91c7b501fdff70ef05ec80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25340b7cd58c3451ae91c7b501fdff70ef05ec80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25340b7cd58c3451ae91c7b501fdff70ef05ec80/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6a860796a44a2805a58391a009ba22752f64e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a860796a44a2805a58391a009ba22752f64e32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a860796a44a2805a58391a009ba22752f64e32"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 118,
      "deletions": 125
    },
    "files": [
      {
        "sha": "957583870784d10f9819cb4083d60793b14cfeef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 81,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=25340b7cd58c3451ae91c7b501fdff70ef05ec80",
        "patch": "@@ -63,9 +63,6 @@\n \n using namespace std;\n \n-#ifdef ENABLE_WALLET\n-CWallet* pwalletMain = NULL;\n-#endif\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n@@ -946,56 +943,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nBytesPerSigOp = GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n #ifdef ENABLE_WALLET\n-    if (mapArgs.count(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n-            CWallet::minTxFee = CFeeRate(n);\n-        else\n-            return InitError(AmountErrMsg(\"mintxfee\", mapArgs[\"-mintxfee\"]));\n-    }\n-    if (mapArgs.count(\"-fallbackfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-fallbackfee\"], nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), mapArgs[\"-fallbackfee\"]));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(_(\"-fallbackfee is set very high! This is the transaction fee you may pay when fee estimates are not available.\"));\n-        CWallet::fallbackFee = CFeeRate(nFeePerK);\n-    }\n-    if (mapArgs.count(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", mapArgs[\"-paytxfee\"]));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    if (mapArgs.count(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", mapArgs[\"-maxtxfee\"]));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n-\n-    std::string strWalletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    if (!CWallet::ParameterInteraction())\n+        return false;\n #endif // ENABLE_WALLET\n \n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n@@ -1032,11 +981,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n \n     std::string strDataDir = GetDataDir().string();\n-#ifdef ENABLE_WALLET\n-    // Wallet file must be a plain filename without a directory\n-    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n-        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\"), strWalletFile, strDataDir));\n-#endif\n+\n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n@@ -1097,20 +1042,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 5: verify wallet database integrity\n #ifdef ENABLE_WALLET\n     if (!fDisableWallet) {\n-        LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n-        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n-\n-        std::string warningString;\n-        std::string errorString;\n-\n-        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n+        if (!CWallet::Verify())\n             return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(errorString);\n-\n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n@@ -1421,16 +1354,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-        std::string warningString;\n-        std::string errorString;\n-        pwalletMain = CWallet::InitLoadWallet(fDisableWallet, strWalletFile, warningString, errorString);\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-        {\n-            LogPrintf(\"%s\", errorString);\n-            return InitError(errorString);\n-        }\n+        CWallet::InitLoadWallet();\n         if (!pwalletMain)\n             return false;\n     }"
      },
      {
        "sha": "63e07ccb3c66a6a4889435b82db858d3d7e3d489",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=25340b7cd58c3451ae91c7b501fdff70ef05ec80",
        "patch": "@@ -16,8 +16,6 @@ namespace boost\n class thread_group;\n } // namespace boost\n \n-extern CWallet* pwalletMain;\n-\n void StartShutdown();\n bool ShutdownRequested();\n /** Interrupt threads */"
      },
      {
        "sha": "9159a4499feb809506eb8a45c735deca99f83daa",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=25340b7cd58c3451ae91c7b501fdff70ef05ec80",
        "patch": "@@ -29,7 +29,6 @@\n #include <boost/thread.hpp>\n \n CClientUIInterface uiInterface; // Declared but not defined in ui_interface.h\n-CWallet* pwalletMain;\n \n extern bool fPrintToConsole;\n extern void noui_connect();"
      },
      {
        "sha": "026bf9ac598abc33f29c975758deefc5c9e6c6e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 38,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=25340b7cd58c3451ae91c7b501fdff70ef05ec80",
        "patch": "@@ -33,6 +33,7 @@\n \n using namespace std;\n \n+CWallet* pwalletMain = NULL;\n /** Transaction fee set by the user */\n CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n@@ -364,8 +365,33 @@ void CWallet::Flush(bool shutdown)\n     bitdb.Flush(shutdown);\n }\n \n-bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)\n+bool static UIError(const std::string &str)\n {\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n+    return false;\n+}\n+\n+void static UIWarning(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n+}\n+\n+static std::string AmountErrMsg(const char * const optname, const std::string& strValue)\n+{\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n+}\n+\n+bool CWallet::Verify()\n+{\n+    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+\n+    // Wallet file must be a plain filename without a directory\n+    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n+        return UIError(strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, GetDataDir().string()));\n+\n     if (!bitdb.Open(GetDataDir()))\n     {\n         // try moving the database env out of the way\n@@ -381,9 +407,7 @@ bool CWallet::Verify(const string& walletFile, string& warningString, string& er\n         // try again\n         if (!bitdb.Open(GetDataDir())) {\n             // if it still fails, it probably means we can't even create the database env\n-            string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n-            errorString += msg;\n-            return true;\n+            return UIError(strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir()));\n         }\n     }\n     \n@@ -399,14 +423,14 @@ bool CWallet::Verify(const string& walletFile, string& warningString, string& er\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n-            warningString += strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n+            UIWarning(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                          \" Original %s saved as %s in %s; if\"\n                                          \" your balance or transactions are incorrect you should\"\n                                          \" restore from a backup.\"),\n-                walletFile, \"wallet.{timestamp}.bak\", GetDataDir());\n+                walletFile, \"wallet.{timestamp}.bak\", GetDataDir()));\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n-            errorString += strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+            return UIError(strprintf(_(\"%s corrupt, salvage failed\"), walletFile));\n     }\n     \n     return true;\n@@ -2992,20 +3016,20 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWalletFile, std::string& warningString, std::string& errorString)\n+bool CWallet::InitLoadWallet()\n {\n+    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        CWallet *tempWallet = new CWallet(strWalletFile);\n+        CWallet *tempWallet = new CWallet(walletFile);\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n-            errorString = strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile);\n-            uiInterface.InitMessage(strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile));\n-            return NULL;\n+            return UIError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n         }\n \n         delete tempWallet;\n@@ -3016,32 +3040,27 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    CWallet *walletInstance = new CWallet(strWalletFile);\n+    CWallet *walletInstance = new CWallet(walletFile);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n-            errorString += strprintf(_(\"Error loading %s: Wallet corrupted\"), strWalletFile) + \"\\n\";\n+            return UIError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n         else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n         {\n-            warningString += strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+            UIWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n                                          \" or address book entries might be missing or incorrect.\"),\n-                strWalletFile);\n+                walletFile));\n         }\n         else if (nLoadWalletRet == DB_TOO_NEW)\n-            errorString += strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n-                               strWalletFile, _(PACKAGE_NAME)) +\n-                           \"\\n\";\n+            return UIError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n+                               walletFile, _(PACKAGE_NAME)));\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n-            errorString += strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) + \"\\n\";\n-            LogPrintf(\"%s\", errorString);\n+            return UIError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n         }\n         else\n-            errorString += strprintf(_(\"Error loading %s\"), strWalletFile) + \"\\n\";\n-\n-        if (!errorString.empty())\n-            return NULL;\n+            return UIError(strprintf(_(\"Error loading %s\"), walletFile));\n     }\n \n     if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n@@ -3057,8 +3076,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n             LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            errorString += _(\"Cannot downgrade wallet\") + \"\\n\";\n-            return NULL;\n+            return UIError(_(\"Cannot downgrade wallet\"));\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n@@ -3072,10 +3090,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n             walletInstance->SetDefaultKey(newDefaultKey);\n             if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n-            {\n-                errorString += _(\"Cannot write default address\") += \"\\n\";\n-                return NULL;\n-            }\n+                return UIError(_(\"Cannot write default address\") += \"\\n\");\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n@@ -3090,7 +3105,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         pindexRescan = chainActive.Genesis();\n     else\n     {\n-        CWalletDB walletdb(strWalletFile);\n+        CWalletDB walletdb(walletFile);\n         CBlockLocator locator;\n         if (walletdb.ReadBestBlock(locator))\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n@@ -3109,10 +3124,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n                 block = block->pprev;\n \n             if (pindexRescan != block)\n-            {\n-                errorString = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n-                return NULL;\n-            }\n+                return UIError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n         }\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n@@ -3126,7 +3138,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n         {\n-            CWalletDB walletdb(strWalletFile);\n+            CWalletDB walletdb(walletFile);\n \n             BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n             {\n@@ -3150,7 +3162,62 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n     }\n     walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n-    return walletInstance;\n+    pwalletMain = walletInstance;\n+    return true;\n+}\n+\n+bool CWallet::ParameterInteraction()\n+{\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CWallet::minTxFee = CFeeRate(n);\n+        else\n+            return UIError(AmountErrMsg(\"mintxfee\", mapArgs[\"-mintxfee\"]));\n+    }\n+    if (mapArgs.count(\"-fallbackfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(mapArgs[\"-fallbackfee\"], nFeePerK))\n+            return UIError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), mapArgs[\"-fallbackfee\"]));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            UIWarning(_(\"-fallbackfee is set very high! This is the transaction fee you may pay when fee estimates are not available.\"));\n+        CWallet::fallbackFee = CFeeRate(nFeePerK);\n+    }\n+    if (mapArgs.count(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n+            return UIError(AmountErrMsg(\"paytxfee\", mapArgs[\"-paytxfee\"]));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            UIWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+        {\n+            return UIError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n+            return UIError(AmountErrMsg(\"maxtxfee\", mapArgs[\"-maxtxfee\"]));\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n+            UIWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return UIError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n+\n+    return true;\n }\n \n CKeyPool::CKeyPool()"
      },
      {
        "sha": "257d6f2e7083973982f1488dd17a0d88559ba6ce",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25340b7cd58c3451ae91c7b501fdff70ef05ec80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=25340b7cd58c3451ae91c7b501fdff70ef05ec80",
        "patch": "@@ -28,6 +28,8 @@\n \n #include <boost/shared_ptr.hpp>\n \n+extern CWallet* pwalletMain;\n+\n /**\n  * Settings\n  */\n@@ -840,7 +842,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void Flush(bool shutdown=false);\n \n     //! Verify the wallet database and perform salvage if required\n-    static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n+    static bool Verify();\n     \n     /** \n      * Address book entry changed.\n@@ -875,8 +877,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n \n-    /* initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* InitLoadWallet(bool fDisableWallet, const std::string& strWalletFile, std::string& warningString, std::string& errorString);\n+    /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n+    static bool InitLoadWallet();\n+\n+    /* Wallets parameter interaction */\n+    static bool ParameterInteraction();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  }
]