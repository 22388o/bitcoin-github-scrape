[
  {
    "sha": "50e8a9ccd78c8c20c3eac6618da7293078446b58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGU4YTljY2Q3OGM4YzIwYzNlYWM2NjE4ZGE3MjkzMDc4NDQ2YjU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-28T23:53:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T17:39:46Z"
      },
      "message": "Remove unused ReadVersion and WriteVersion\n\nCDataStream and CAutoFile had a ReadVersion and WriteVersion method\nthat was never used. Remove them.",
      "tree": {
        "sha": "458f468af02a7e8341049df9cdaa83dd5a50e776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/458f468af02a7e8341049df9cdaa83dd5a50e776"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50e8a9ccd78c8c20c3eac6618da7293078446b58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e8a9ccd78c8c20c3eac6618da7293078446b58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50e8a9ccd78c8c20c3eac6618da7293078446b58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e8a9ccd78c8c20c3eac6618da7293078446b58/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1253f8692fc3a11be9430685cd405236a68df6c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1253f8692fc3a11be9430685cd405236a68df6c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1253f8692fc3a11be9430685cd405236a68df6c3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c66a996519d8130e96b27d02fe2ee0e4a8f24eb1",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50e8a9ccd78c8c20c3eac6618da7293078446b58/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50e8a9ccd78c8c20c3eac6618da7293078446b58/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=50e8a9ccd78c8c20c3eac6618da7293078446b58",
        "patch": "@@ -254,8 +254,6 @@ class CDataStream\n     int GetType()                { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n-    void ReadVersion()           { *this >> nVersion; }\n-    void WriteVersion()          { *this << nVersion; }\n \n     CDataStream& read(char* pch, size_t nSize)\n     {\n@@ -434,8 +432,6 @@ class CAutoFile\n     int GetType()                { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n-    void ReadVersion()           { *this >> nVersion; }\n-    void WriteVersion()          { *this << nVersion; }\n \n     CAutoFile& read(char* pch, size_t nSize)\n     {"
      }
    ]
  },
  {
    "sha": "c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmM1ZDQyZjM2ZjQ0NDBhYWRkYzRhNjQ5NzRhNTJmZGIwN2FmMDhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-29T04:55:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T17:39:46Z"
      },
      "message": "Make streams' read and write return void\n\nThe stream implementations had two cascading layers (the upper one\nwith operator<< and operator>>, and a lower one with read and write).\nThe lower layer's functions are never cascaded (nor should they, as\nthey should only be used from the higher layer), so make them return\nvoid instead.",
      "tree": {
        "sha": "121eb8fbd0c3fa2378c900bd411c3a6c0eb7d2ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/121eb8fbd0c3fa2378c900bd411c3a6c0eb7d2ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50e8a9ccd78c8c20c3eac6618da7293078446b58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e8a9ccd78c8c20c3eac6618da7293078446b58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50e8a9ccd78c8c20c3eac6618da7293078446b58"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 12,
      "deletions": 22
    },
    "files": [
      {
        "sha": "88926ab31fec8179f4c89fa30b23f42f6bf643d4",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "patch": "@@ -138,9 +138,8 @@ class CHashWriter\n \n     CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CHashWriter& write(const char *pch, size_t size) {\n+    void write(const char *pch, size_t size) {\n         ctx.Write((const unsigned char*)pch, size);\n-        return (*this);\n     }\n \n     // invalidates the object"
      },
      {
        "sha": "4e2358d9a276b4c85730f75e9c81e1e0fd5812c2",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "patch": "@@ -23,7 +23,7 @@ class TxInputStream\n     m_remaining(txToLen)\n     {}\n \n-    TxInputStream& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         if (nSize > m_remaining)\n             throw std::ios_base::failure(std::string(__func__) + \": end of data\");\n@@ -37,7 +37,6 @@ class TxInputStream\n         memcpy(pch, m_data, nSize);\n         m_remaining -= nSize;\n         m_data += nSize;\n-        return *this;\n     }\n \n     template<typename T>"
      },
      {
        "sha": "f8e82edf8b909ae5daa76ed1977cfdb631176256",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "patch": "@@ -943,10 +943,9 @@ class CSizeComputer\n \n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CSizeComputer& write(const char *psz, size_t nSize)\n+    void write(const char *psz, size_t nSize)\n     {\n         this->nSize += nSize;\n-        return *this;\n     }\n \n     template<typename T>"
      },
      {
        "sha": "582443ab4f880ef8415b3d157c45155137f8f23a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2c5d42f36f4440aaddc4a64974a52fdb07af08b/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "patch": "@@ -255,7 +255,7 @@ class CDataStream\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n \n-    CDataStream& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         // Read from the beginning of the buffer\n         unsigned int nReadPosNext = nReadPos + nSize;\n@@ -268,14 +268,13 @@ class CDataStream\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n             vch.clear();\n-            return (*this);\n+            return;\n         }\n         memcpy(pch, &vch[nReadPos], nSize);\n         nReadPos = nReadPosNext;\n-        return (*this);\n     }\n \n-    CDataStream& ignore(int nSize)\n+    void ignore(int nSize)\n     {\n         // Ignore from the beginning of the buffer\n         if (nSize < 0) {\n@@ -288,17 +287,15 @@ class CDataStream\n                 throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n-            return (*this);\n+            return;\n         }\n         nReadPos = nReadPosNext;\n-        return (*this);\n     }\n \n-    CDataStream& write(const char* pch, size_t nSize)\n+    void write(const char* pch, size_t nSize)\n     {\n         // Write to the end of the buffer\n         vch.insert(vch.end(), pch, pch + nSize);\n-        return (*this);\n     }\n \n     template<typename Stream>\n@@ -433,16 +430,15 @@ class CAutoFile\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion()             { return nVersion; }\n \n-    CAutoFile& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n             throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n-        return (*this);\n     }\n \n-    CAutoFile& ignore(size_t nSize)\n+    void ignore(size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::ignore: file handle is NULL\");\n@@ -453,16 +449,14 @@ class CAutoFile\n                 throw std::ios_base::failure(feof(file) ? \"CAutoFile::ignore: end of file\" : \"CAutoFile::read: fread failed\");\n             nSize -= nNow;\n         }\n-        return (*this);\n     }\n \n-    CAutoFile& write(const char* pch, size_t nSize)\n+    void write(const char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n             throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n-        return (*this);\n     }\n \n     template<typename T>\n@@ -563,7 +557,7 @@ class CBufferedFile\n     }\n \n     // read a number of bytes\n-    CBufferedFile& read(char *pch, size_t nSize) {\n+    void read(char *pch, size_t nSize) {\n         if (nSize + nReadPos > nReadLimit)\n             throw std::ios_base::failure(\"Read attempted past buffer limit\");\n         if (nSize + nRewind > vchBuf.size())\n@@ -582,7 +576,6 @@ class CBufferedFile\n             pch += nNow;\n             nSize -= nNow;\n         }\n-        return (*this);\n     }\n \n     // return the current reading position"
      }
    ]
  },
  {
    "sha": "fad9b66504f176ed3624515f3bf4d428cf687607",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ5YjY2NTA0ZjE3NmVkMzYyNDUxNWYzYmY0ZDQyOGNmNjg3NjA3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-28T23:57:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:49:11Z"
      },
      "message": "Make nType and nVersion private and sometimes const\n\nMake the various stream implementations' nType and nVersion private\nand const (except in CDataStream where we really need a setter).",
      "tree": {
        "sha": "dbeedee85746dc16488f3ff5a4ab76bbcd083be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbeedee85746dc16488f3ff5a4ab76bbcd083be0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad9b66504f176ed3624515f3bf4d428cf687607",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9b66504f176ed3624515f3bf4d428cf687607",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad9b66504f176ed3624515f3bf4d428cf687607",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9b66504f176ed3624515f3bf4d428cf687607/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2c5d42f36f4440aaddc4a64974a52fdb07af08b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2c5d42f36f4440aaddc4a64974a52fdb07af08b"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 20,
      "deletions": 24
    },
    "files": [
      {
        "sha": "73e31580d22d743803eba195324b472f5fc172bc",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9b66504f176ed3624515f3bf4d428cf687607/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9b66504f176ed3624515f3bf4d428cf687607/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=fad9b66504f176ed3624515f3bf4d428cf687607",
        "patch": "@@ -132,9 +132,9 @@ class CHashWriter\n private:\n     CHash256 ctx;\n \n+    const int nType;\n+    const int nVersion;\n public:\n-    int nType;\n-    int nVersion;\n \n     CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n "
      },
      {
        "sha": "4ceeec2f0ca9b7695d26dec5261b9d8fa826651f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9b66504f176ed3624515f3bf4d428cf687607/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9b66504f176ed3624515f3bf4d428cf687607/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fad9b66504f176ed3624515f3bf4d428cf687607",
        "patch": "@@ -140,7 +140,7 @@ class CConnman\n     void PushMessageWithVersionAndFlag(CNode* pnode, int nVersion, int flag, const std::string& sCommand, Args&&... args)\n     {\n         auto msg(BeginMessage(pnode, nVersion, flag, sCommand));\n-        ::SerializeMany(msg, msg.nType, msg.nVersion, std::forward<Args>(args)...);\n+        ::SerializeMany(msg, msg.GetType(), msg.GetVersion(), std::forward<Args>(args)...);\n         EndMessage(msg);\n         PushMessage(pnode, msg, sCommand);\n     }"
      },
      {
        "sha": "68a8e28477ee6a46f72f65a608288cc34a7f3920",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9b66504f176ed3624515f3bf4d428cf687607/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9b66504f176ed3624515f3bf4d428cf687607/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=fad9b66504f176ed3624515f3bf4d428cf687607",
        "patch": "@@ -937,9 +937,9 @@ class CSizeComputer\n protected:\n     size_t nSize;\n \n+    const int nType;\n+    const int nVersion;\n public:\n-    int nType;\n-    int nVersion;\n \n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n "
      },
      {
        "sha": "12a36a4a70b02d6eed2f592e0a7dea560a6f48d7",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad9b66504f176ed3624515f3bf4d428cf687607/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad9b66504f176ed3624515f3bf4d428cf687607/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=fad9b66504f176ed3624515f3bf4d428cf687607",
        "patch": "@@ -26,10 +26,11 @@ template<typename Stream>\n class OverrideStream\n {\n     Stream* stream;\n-public:\n+\n     const int nType;\n     const int nVersion;\n \n+public:\n     OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}\n \n     template<typename T>\n@@ -66,9 +67,10 @@ class CDataStream\n     typedef CSerializeData vector_type;\n     vector_type vch;\n     unsigned int nReadPos;\n-public:\n+\n     int nType;\n     int nVersion;\n+public:\n \n     typedef vector_type::allocator_type   allocator_type;\n     typedef vector_type::size_type        size_type;\n@@ -251,9 +253,9 @@ class CDataStream\n     int in_avail()               { return size(); }\n \n     void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n+    int GetType() const          { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n-    int GetVersion()             { return nVersion; }\n+    int GetVersion() const       { return nVersion; }\n \n     void read(char* pch, size_t nSize)\n     {\n@@ -380,17 +382,15 @@ class CAutoFile\n     CAutoFile(const CAutoFile&);\n     CAutoFile& operator=(const CAutoFile&);\n \n-    int nType;\n-    int nVersion;\n-\t\n+    const int nType;\n+    const int nVersion;\n+\n     FILE* file;\t\n \n public:\n-    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n+    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)\n     {\n         file = filenew;\n-        nType = nTypeIn;\n-        nVersion = nVersionIn;\n     }\n \n     ~CAutoFile()\n@@ -425,10 +425,8 @@ class CAutoFile\n     //\n     // Stream subset\n     //\n-    void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n-    void SetVersion(int n)       { nVersion = n; }\n-    int GetVersion()             { return nVersion; }\n+    int GetType() const          { return nType; }\n+    int GetVersion() const       { return nVersion; }\n \n     void read(char* pch, size_t nSize)\n     {\n@@ -500,8 +498,8 @@ class CBufferedFile\n     CBufferedFile(const CBufferedFile&);\n     CBufferedFile& operator=(const CBufferedFile&);\n \n-    int nType;\n-    int nVersion;\n+    const int nType;\n+    const int nVersion;\n \n     FILE *src;            // source file\n     uint64_t nSrcPos;     // how many bytes have been read from source\n@@ -531,11 +529,9 @@ class CBufferedFile\n \n public:\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n     {\n         src = fileIn;\n-        nType = nTypeIn;\n-        nVersion = nVersionIn;\n     }\n \n     ~CBufferedFile()"
      }
    ]
  },
  {
    "sha": "657e05ab2e87ff725723fe8a375fc3f8aad02126",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTdlMDVhYjJlODdmZjcyNTcyM2ZlOGEzNzVmYzNmOGFhZDAyMTI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-28T23:51:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:22Z"
      },
      "message": "Make GetSerializeSize a wrapper on top of CSizeComputer\n\nGiven that in default GetSerializeSize implementations created by\nADD_SERIALIZE_METHODS we're already using CSizeComputer(), get rid\nof the specialized GetSerializeSize methods everywhere, and just use\nCSizeComputer. This removes a lot of code which isn't actually used\nanywhere.\n\nFor CCompactSize and CVarInt this actually removes a more efficient\nsize computing algorithm, which is brought back in a later commit.",
      "tree": {
        "sha": "e20cebbde1dee31d6d21dccdaa2223a5ca1566e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e20cebbde1dee31d6d21dccdaa2223a5ca1566e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/657e05ab2e87ff725723fe8a375fc3f8aad02126",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657e05ab2e87ff725723fe8a375fc3f8aad02126",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/657e05ab2e87ff725723fe8a375fc3f8aad02126",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657e05ab2e87ff725723fe8a375fc3f8aad02126/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad9b66504f176ed3624515f3bf4d428cf687607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad9b66504f176ed3624515f3bf4d428cf687607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad9b66504f176ed3624515f3bf4d428cf687607"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 27,
      "deletions": 210
    },
    "files": [
      {
        "sha": "03b380165f339f979902b0d64dc4b466bd5f93df",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -448,11 +448,6 @@ class CAddrMan\n         Check();\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return (CSizeComputer(nType, nVersion) << *this).size();\n-    }\n-\n     void Clear()\n     {\n         std::vector<int>().swap(vRandom);"
      },
      {
        "sha": "bde8463b337fd5c9aa6e993dffd8aecdb5c941fe",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -131,7 +131,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n             break;\n     }\n \n-    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), cmpctblock.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n \n     return READ_STATUS_OK;\n }"
      },
      {
        "sha": "3e134cf675663c9bc03155796b1dd79b971f496d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -153,29 +153,6 @@ class CCoins\n         return fCoinBase;\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        unsigned int nSize = 0;\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n-        // size of header code\n-        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        nSize += nMaskSize;\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            if (!vout[i].IsNull())\n-                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        // height\n-        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n-        return nSize;\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream &s, int nType, int nVersion) const {\n         unsigned int nMaskSize = 0, nMaskCode = 0;"
      },
      {
        "sha": "90749499d10a1eb600eaaf6b2daf5c79e326eb56",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -55,14 +55,6 @@ class CScriptCompressor\n public:\n     CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        std::vector<unsigned char> compr;\n-        if (Compress(compr))\n-            return compr.size();\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        return script.size() + VARINT(nSize).GetSerializeSize(nType, nVersion);\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream &s, int nType, int nVersion) const {\n         std::vector<unsigned char> compr;"
      },
      {
        "sha": "7728b49d93f0b3c57d10cee3d21f71d106050f00",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -60,12 +60,12 @@ class CDBBatch\n     void Write(const K& key, const V& value)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(GetSerializeSize(ssKey, key));\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(ssValue.GetSerializeSize(value));\n+        ssValue.reserve(GetSerializeSize(ssValue, value));\n         ssValue << value;\n         ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n@@ -77,7 +77,7 @@ class CDBBatch\n     void Erase(const K& key)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(GetSerializeSize(ssKey, key));\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -107,7 +107,7 @@ class CDBIterator\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(GetSerializeSize(ssKey, key));\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n         piter->Seek(slKey);\n@@ -200,7 +200,7 @@ class CDBWrapper\n     bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(GetSerializeSize(ssKey, key));\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -234,7 +234,7 @@ class CDBWrapper\n     bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(GetSerializeSize(ssKey, key));\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n "
      },
      {
        "sha": "13872c4bf20cbb09602fb633584dedab629a0e4e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -1710,7 +1710,7 @@ bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHea\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(block);\n+    unsigned int nSize = GetSerializeSize(fileout, block);\n     fileout << FLATDATA(messageStart) << nSize;\n \n     // Write block\n@@ -2100,7 +2100,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n         return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(blockundo);\n+    unsigned int nSize = GetSerializeSize(fileout, blockundo);\n     fileout << FLATDATA(messageStart) << nSize;\n \n     // Write undo data"
      },
      {
        "sha": "714ab34548a866ef0bd288cd6f4759893304002b",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -177,7 +177,7 @@ class CTxOut\n         if (scriptPubKey.IsUnspendable())\n             return 0;\n \n-        size_t nSize = GetSerializeSize(SER_DISK, 0);\n+        size_t nSize = GetSerializeSize(*this, SER_DISK, 0);\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n "
      },
      {
        "sha": "3277218bb6b722a33d73618c6f1135d8c3f27151",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -116,10 +116,6 @@ class CPubKey\n     }\n \n     //! Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return size() + 1;\n-    }\n     template <typename Stream>\n     void Serialize(Stream& s, int nType, int nVersion) const\n     {\n@@ -214,10 +210,6 @@ struct CExtPubKey {\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return BIP32_EXTKEY_SIZE+1; //add one byte for the size (compact int)\n-    }\n     template <typename Stream>\n     void Serialize(Stream& s, int nType, int nVersion) const\n     {"
      },
      {
        "sha": "ec573c31832382292a289a839cb0266f868e6409",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -87,7 +87,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n         // Regardless of the verification result, the tx did not error."
      },
      {
        "sha": "80289a365ae6fa291a2de76c0825534ca56d2dcb",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 12,
        "deletions": 126,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -169,11 +169,6 @@ enum\n  * added as members. \n  */\n #define ADD_SERIALIZE_METHODS                                                          \\\n-    size_t GetSerializeSize(int nType, int nVersion) const {                         \\\n-        CSizeComputer s(nType, nVersion);                                            \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n-        return s.size();                                                             \\\n-    }                                                                                \\\n     template<typename Stream>                                                        \\\n     void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n         NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n@@ -186,18 +181,6 @@ enum\n /*\n  * Basic Types\n  */\n-inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n-\n template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n@@ -222,7 +205,6 @@ template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int,\n template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n-inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n@@ -403,11 +385,6 @@ class CFlatData\n     char* end() { return pend; }\n     const char* end() const { return pend; }\n \n-    unsigned int GetSerializeSize(int, int=0) const\n-    {\n-        return pend - pbegin;\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream& s, int, int=0) const\n     {\n@@ -429,10 +406,6 @@ class CVarInt\n public:\n     CVarInt(I& nIn) : n(nIn) { }\n \n-    unsigned int GetSerializeSize(int, int) const {\n-        return GetSizeOfVarInt<I>(n);\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream &s, int, int) const {\n         WriteVarInt<Stream,I>(s, n);\n@@ -451,10 +424,6 @@ class CCompactSize\n public:\n     CCompactSize(uint64_t& nIn) : n(nIn) { }\n \n-    unsigned int GetSerializeSize(int, int) const {\n-        return GetSizeOfCompactSize(n);\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream &s, int, int) const {\n         WriteCompactSize<Stream>(s, n);\n@@ -493,11 +462,6 @@ class LimitedString\n         if (!string.empty())\n             s.write((char*)&string[0], string.size());\n     }\n-\n-    unsigned int GetSerializeSize(int, int=0) const\n-    {\n-        return GetSizeOfCompactSize(string.size()) + string.size();\n-    }\n };\n \n template<typename I>\n@@ -510,17 +474,13 @@ CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }\n /**\n  *  string\n  */\n-template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int=0);\n template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n /**\n  * prevector\n  * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<unsigned int N, typename T> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<unsigned int N, typename T, typename V> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<unsigned int N, typename T> inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion);\n template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&);\n template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion);\n@@ -532,9 +492,6 @@ template<typename Stream, unsigned int N, typename T> inline void Unserialize(St\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n@@ -545,21 +502,18 @@ template<typename Stream, typename T, typename A> inline void Unserialize(Stream\n /**\n  * pair\n  */\n-template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion);\n template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n \n /**\n  * map\n  */\n-template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion);\n \n /**\n  * set\n  */\n-template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion);\n \n@@ -573,12 +527,6 @@ template<typename Stream, typename K, typename Pred, typename A> void Unserializ\n  * The compiler will only cast int to long if none of the other templates matched.\n  * Thanks to Boost serialization for this idea.\n  */\n-template<typename T>\n-inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)\n-{\n-    return a.GetSerializeSize((int)nType, nVersion);\n-}\n-\n template<typename Stream, typename T>\n inline void Serialize(Stream& os, const T& a, long nType, int nVersion)\n {\n@@ -598,12 +546,6 @@ inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n /**\n  * string\n  */\n-template<typename C>\n-unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)\n-{\n-    return GetSizeOfCompactSize(str.size()) + str.size() * sizeof(str[0]);\n-}\n-\n template<typename Stream, typename C>\n void Serialize(Stream& os, const std::basic_string<C>& str, int, int)\n {\n@@ -626,28 +568,6 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n /**\n  * prevector\n  */\n-template<unsigned int N, typename T>\n-unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n-{\n-    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n-}\n-\n-template<unsigned int N, typename T, typename V>\n-unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(v.size());\n-    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        nSize += GetSerializeSize((*vi), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<unsigned int N, typename T>\n-inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize_impl(v, nType, nVersion, T());\n-}\n-\n-\n template<typename Stream, unsigned int N, typename T>\n void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n {\n@@ -716,28 +636,6 @@ inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n /**\n  * vector\n  */\n-template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n-{\n-    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n-}\n-\n-template<typename T, typename A, typename V>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(v.size());\n-    for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        nSize += GetSerializeSize((*vi), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename T, typename A>\n-inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize_impl(v, nType, nVersion, T());\n-}\n-\n-\n template<typename Stream, typename T, typename A>\n void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n@@ -806,12 +704,6 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n /**\n  * pair\n  */\n-template<typename K, typename T>\n-unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)\n-{\n-    return GetSerializeSize(item.first, nType, nVersion) + GetSerializeSize(item.second, nType, nVersion);\n-}\n-\n template<typename Stream, typename K, typename T>\n void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)\n {\n@@ -831,15 +723,6 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n /**\n  * map\n  */\n-template<typename K, typename T, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(m.size());\n-    for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n-        nSize += GetSerializeSize((*mi), nType, nVersion);\n-    return nSize;\n-}\n-\n template<typename Stream, typename K, typename T, typename Pred, typename A>\n void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n {\n@@ -867,15 +750,6 @@ void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion\n /**\n  * set\n  */\n-template<typename K, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(m.size());\n-    for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n-        nSize += GetSerializeSize((*it), nType, nVersion);\n-    return nSize;\n-}\n-\n template<typename Stream, typename K, typename Pred, typename A>\n void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)\n {\n@@ -1008,4 +882,16 @@ inline void SerReadWriteMany(Stream& s, int nType, int nVersion, CSerActionUnser\n     ::UnserializeMany(s, nType, nVersion, args...);\n }\n \n+template <typename T>\n+size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)\n+{\n+    return (CSizeComputer(nType, nVersion) << t).size();\n+}\n+\n+template <typename S, typename T>\n+size_t GetSerializeSize(const S& s, const T& t)\n+{\n+    return (CSizeComputer(s.GetType(), s.GetVersion()) << t).size();\n+}\n+\n #endif // BITCOIN_SERIALIZE_H"
      },
      {
        "sha": "d9965b534d6b4c8dc7584e24944369205b975f34",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -308,13 +308,6 @@ class CDataStream\n             s.write((char*)&vch[0], vch.size() * sizeof(vch[0]));\n     }\n \n-    template<typename T>\n-    unsigned int GetSerializeSize(const T& obj)\n-    {\n-        // Tells the size of the object if serialized to this stream\n-        return ::GetSerializeSize(obj, nType, nVersion);\n-    }\n-\n     template<typename T>\n     CDataStream& operator<<(const T& obj)\n     {\n@@ -457,13 +450,6 @@ class CAutoFile\n             throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n     }\n \n-    template<typename T>\n-    unsigned int GetSerializeSize(const T& obj)\n-    {\n-        // Tells the size of the object if serialized to this stream\n-        return ::GetSerializeSize(obj, nType, nVersion);\n-    }\n-\n     template<typename T>\n     CAutoFile& operator<<(const T& obj)\n     {"
      },
      {
        "sha": "ba8eb16ba96623e75c471d580733f74c2e98fb3a",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n     BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n     BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n-    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(R1L, 0, PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(ZeroL, 0, PROTOCOL_VERSION) == 32);\n \n     std::stringstream ss;\n     R1L.Serialize(ss,0,PROTOCOL_VERSION);\n@@ -230,8 +230,8 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n     BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n     BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(R1S, 0, PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(ZeroS, 0, PROTOCOL_VERSION) == 20);\n \n     R1S.Serialize(ss,0,PROTOCOL_VERSION);\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));"
      },
      {
        "sha": "94fe66d26cd6bde2e1be910a36bc01c22f9380c2",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -78,11 +78,6 @@ class base_blob\n         return sizeof(data);\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return sizeof(data);\n-    }\n-\n     uint64_t GetUint64(int pos) const\n     {\n         const uint8_t* ptr = data + pos * 8;"
      },
      {
        "sha": "9d6f9bd0d007372970f440d319c2237709c89295",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657e05ab2e87ff725723fe8a375fc3f8aad02126/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "patch": "@@ -27,12 +27,6 @@ class CTxInUndo\n     CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n     CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n-               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n-               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n     template<typename Stream>\n     void Serialize(Stream &s, int nType, int nVersion) const {\n         ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);"
      }
    ]
  },
  {
    "sha": "528472111b4965b1a99c4bcf08ac5ec93d87f10f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mjg0NzIxMTFiNDk2NWIxYTk5YzRiY2YwOGFjNWVjOTNkODdmMTBm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-28T23:29:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:27Z"
      },
      "message": "Get rid of nType and nVersion\n\nRemove the nType and nVersion as parameters to all serialization methods\nand functions. There is only one place where it's read and has an impact\n(in CAddress), and even there it does not impact any of the recursively\ninvoked serializers.\n\nInstead, the few places that need nType or nVersion are changed to read\nit directly from the stream object, through GetType() and GetVersion()\nmethods which are added to all stream classes.",
      "tree": {
        "sha": "2daf6bc17f8c26083d6597ad8632aa7cf2eef7ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2daf6bc17f8c26083d6597ad8632aa7cf2eef7ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/528472111b4965b1a99c4bcf08ac5ec93d87f10f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/528472111b4965b1a99c4bcf08ac5ec93d87f10f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/528472111b4965b1a99c4bcf08ac5ec93d87f10f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/528472111b4965b1a99c4bcf08ac5ec93d87f10f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657e05ab2e87ff725723fe8a375fc3f8aad02126",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/657e05ab2e87ff725723fe8a375fc3f8aad02126"
      }
    ],
    "stats": {
      "total": 584,
      "additions": 304,
      "deletions": 280
    },
    "files": [
      {
        "sha": "339943ca5af31c9fb6bc22ec3e9358ff303752cd",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -46,7 +46,7 @@ class CBanEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         READWRITE(nBanUntil);"
      },
      {
        "sha": "cabacbbea971659c31b921fbc6fe2c32b5aecc08",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -58,7 +58,7 @@ class CAddrInfo : public CAddress\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CAddress*)this);\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n@@ -293,7 +293,7 @@ class CAddrMan\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersionDummy) const\n+    void Serialize(Stream &s) const\n     {\n         LOCK(cs);\n \n@@ -343,7 +343,7 @@ class CAddrMan\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersionDummy)\n+    void Unserialize(Stream& s)\n     {\n         LOCK(cs);\n "
      },
      {
        "sha": "ba0c86040f18ca4b8ecbb491345f5bd621b6f20d",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -64,7 +64,7 @@ class CFeeRate\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nSatoshisPerK);\n     }\n };"
      },
      {
        "sha": "4035b87eb21636482c2d9e6c8ea030cfa3f22030",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -21,7 +21,7 @@ struct TransactionCompressor {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(tx); //TODO: Compress tx encoding\n     }\n };\n@@ -35,7 +35,7 @@ class BlockTransactionsRequest {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(blockhash);\n         uint64_t indexes_size = (uint64_t)indexes.size();\n         READWRITE(COMPACTSIZE(indexes_size));\n@@ -81,7 +81,7 @@ class BlockTransactions {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(blockhash);\n         uint64_t txn_size = (uint64_t)txn.size();\n         READWRITE(COMPACTSIZE(txn_size));\n@@ -109,7 +109,7 @@ struct PrefilledTransaction {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         uint64_t idx = index;\n         READWRITE(COMPACTSIZE(idx));\n         if (idx > std::numeric_limits<uint16_t>::max())\n@@ -155,7 +155,7 @@ class CBlockHeaderAndShortTxIDs {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(nonce);\n "
      },
      {
        "sha": "d3a017371f30ab58a59f30769225f405189ea079",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -73,7 +73,7 @@ class CBloomFilter\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);"
      },
      {
        "sha": "0aac5de5c22971afb6d3eee521acb69cc4a5ac03",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -28,7 +28,7 @@ class CBlockFileInfo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(VARINT(nBlocks));\n         READWRITE(VARINT(nSize));\n         READWRITE(VARINT(nUndoSize));\n@@ -76,7 +76,7 @@ struct CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(VARINT(nFile));\n         READWRITE(VARINT(nPos));\n     }\n@@ -357,8 +357,9 @@ class CDiskBlockIndex : public CBlockIndex\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n         READWRITE(VARINT(nHeight));"
      },
      {
        "sha": "d295b3c940d6637dceb88562433c05a4e7c412e6",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -154,41 +154,41 @@ class CCoins\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s) const {\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n         bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n         bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n         assert(fFirst || fSecond || nMaskCode);\n         unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n         // version\n-        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Serialize(s, VARINT(this->nVersion));\n         // header code\n-        ::Serialize(s, VARINT(nCode), nType, nVersion);\n+        ::Serialize(s, VARINT(nCode));\n         // spentness bitmask\n         for (unsigned int b = 0; b<nMaskSize; b++) {\n             unsigned char chAvail = 0;\n             for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n                 if (!vout[2+b*8+i].IsNull())\n                     chAvail |= (1 << i);\n-            ::Serialize(s, chAvail, nType, nVersion);\n+            ::Serialize(s, chAvail);\n         }\n         // txouts themself\n         for (unsigned int i = 0; i < vout.size(); i++) {\n             if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n         }\n         // coinbase height\n-        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Serialize(s, VARINT(nHeight));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         // version\n-        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Unserialize(s, VARINT(this->nVersion));\n         // header code\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode));\n         fCoinBase = nCode & 1;\n         std::vector<bool> vAvail(2, false);\n         vAvail[0] = (nCode & 2) != 0;\n@@ -197,7 +197,7 @@ class CCoins\n         // spentness bitmask\n         while (nMaskCode > 0) {\n             unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail, nType, nVersion);\n+            ::Unserialize(s, chAvail);\n             for (unsigned int p = 0; p < 8; p++) {\n                 bool f = (chAvail & (1 << p)) != 0;\n                 vAvail.push_back(f);\n@@ -209,10 +209,10 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n         }\n         // coinbase height\n-        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Unserialize(s, VARINT(nHeight));\n         Cleanup();\n     }\n "
      },
      {
        "sha": "961365d2618a480e8ad79198ab332f6a0799ce29",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -56,7 +56,7 @@ class CScriptCompressor\n     CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr)) {\n             s << CFlatData(compr);\n@@ -68,7 +68,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n@@ -104,7 +104,7 @@ class CTxOutCompressor\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (!ser_action.ForRead()) {\n             uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));"
      },
      {
        "sha": "94e7f5ea6ccb83939efd35200159c9aefce90e88",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -138,6 +138,9 @@ class CHashWriter\n \n     CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n     void write(const char *pch, size_t size) {\n         ctx.Write((const unsigned char*)pch, size);\n     }\n@@ -152,7 +155,7 @@ class CHashWriter\n     template<typename T>\n     CHashWriter& operator<<(const T& obj) {\n         // Serialize to this stream\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n };"
      },
      {
        "sha": "ff5252b7a0fd932e552d53100173f4a579b06f67",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -162,7 +162,7 @@ struct CExtKey {\n     CExtPubKey Neuter() const;\n     void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n@@ -171,7 +171,7 @@ struct CExtKey {\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];"
      },
      {
        "sha": "17c33194a95b13577ff745b86cd7715faf1e6c50",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -85,7 +85,7 @@ class CPartialMerkleTree\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nTransactions);\n         READWRITE(vHash);\n         std::vector<unsigned char> vBytes;\n@@ -148,7 +148,7 @@ class CMerkleBlock\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(txn);\n     }"
      },
      {
        "sha": "8289a06d941367603d03b58666340abaebbed034",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -140,7 +140,7 @@ class CConnman\n     void PushMessageWithVersionAndFlag(CNode* pnode, int nVersion, int flag, const std::string& sCommand, Args&&... args)\n     {\n         auto msg(BeginMessage(pnode, nVersion, flag, sCommand));\n-        ::SerializeMany(msg, msg.GetType(), msg.GetVersion(), std::forward<Args>(args)...);\n+        ::SerializeMany(msg, std::forward<Args>(args)...);\n         EndMessage(msg);\n         PushMessage(pnode, msg, sCommand);\n     }"
      },
      {
        "sha": "9dffaa57e7a6a9ea46133e5dfefb0fdced7506fe",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -85,7 +85,7 @@ class CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(FLATDATA(ip));\n         }\n \n@@ -122,7 +122,7 @@ class CSubNet\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n             READWRITE(FLATDATA(valid));\n@@ -159,7 +159,7 @@ class CService : public CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n             READWRITE(FLATDATA(portN));"
      },
      {
        "sha": "d148aec1e038972b1bc1af475f90920c811d1dc6",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -36,7 +36,7 @@ class CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n@@ -92,7 +92,7 @@ class CBlock : public CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CBlockHeader*)this);\n         READWRITE(vtx);\n     }\n@@ -137,8 +137,9 @@ struct CBlockLocator\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vHave);\n     }"
      },
      {
        "sha": "1d176e5d8cdee664e0c155ff1702138d56aff8f9",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -28,7 +28,7 @@ class COutPoint\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(hash);\n         READWRITE(n);\n     }\n@@ -104,7 +104,7 @@ class CTxIn\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n         READWRITE(*(CScriptBase*)(&scriptSig));\n         READWRITE(nSequence);\n@@ -144,7 +144,7 @@ class CTxOut\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n         READWRITE(*(CScriptBase*)(&scriptPubKey));\n     }\n@@ -219,7 +219,7 @@ class CTxInWitness\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(scriptWitness.stack);\n     }\n@@ -255,7 +255,7 @@ class CTxWitness\n     }\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         for (size_t n = 0; n < vtxinwit.size(); n++) {\n             READWRITE(vtxinwit[n]);\n@@ -287,8 +287,8 @@ struct CMutableTransaction;\n  * - uint32_t nLockTime\n  */\n template<typename Stream, typename Operation, typename TxType>\n-inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n-    const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action) {\n+    const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n@@ -385,8 +385,8 @@ class CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        SerializeTransaction(*this, s, ser_action);\n         if (ser_action.ForRead()) {\n             UpdateHash();\n         }\n@@ -456,8 +456,8 @@ struct CMutableTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        SerializeTransaction(*this, s, ser_action);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "a52d9a67b0e4b6c167f2e2158806bd1405fd05b8",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -48,7 +48,7 @@ class CMessageHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(FLATDATA(pchMessageStart));\n         READWRITE(FLATDATA(pchCommand));\n@@ -289,14 +289,15 @@ class CAddress : public CService\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         if (ser_action.ForRead())\n             Init();\n-        if (nType & SER_DISK)\n+        int nVersion = s.GetVersion();\n+        if (s.GetType() & SER_DISK)\n             READWRITE(nVersion);\n-        if ((nType & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+        if ((s.GetType() & SER_DISK) ||\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n             READWRITE(nTime);\n         uint64_t nServicesInt = nServices;\n         READWRITE(nServicesInt);\n@@ -343,7 +344,7 @@ class CInv\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(type);\n         READWRITE(hash);"
      },
      {
        "sha": "15207f89e1300ff63145be7ea5d268430880c34d",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -117,14 +117,14 @@ class CPubKey\n \n     //! Implement serialization, as if this was a byte vector.\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n         s.write((char*)vch, len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= 65) {\n@@ -211,7 +211,7 @@ struct CExtPubKey {\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n \n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n@@ -220,7 +220,7 @@ struct CExtPubKey {\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];"
      },
      {
        "sha": "8ee2c9cbac3092dc81145715c890df833fa3275c",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -27,7 +27,7 @@ class RecentRequestEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         unsigned int nDate = date.toTime_t();\n \n         READWRITE(this->nVersion);"
      },
      {
        "sha": "eedf6e8cea712277f98b61d3a1f77dd9f7758ac5",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -65,7 +65,7 @@ class SendCoinsRecipient\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();"
      },
      {
        "sha": "90cca6f48055d7b633ea33f1503ef853d01f2a52",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -50,7 +50,7 @@ struct CCoin {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nTxVer);\n         READWRITE(nHeight);"
      },
      {
        "sha": "069ac55bfba06db11f8db19543fd9636506aae8d",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -42,10 +42,12 @@ class TxInputStream\n     template<typename T>\n     TxInputStream& operator>>(T& obj)\n     {\n-        ::Unserialize(*this, obj, m_type, m_version);\n+        ::Unserialize(*this, obj);\n         return *this;\n     }\n \n+    int GetVersion() const { return m_version; }\n+    int GetType() const { return m_type; }\n private:\n     const int m_type;\n     const int m_version;"
      },
      {
        "sha": "a6403f9363745e6479ab85061617a73fe07baf33",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -1069,7 +1069,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n     template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+    void SerializeScriptCode(S &s) const {\n         CScript::const_iterator it = scriptCode.begin();\n         CScript::const_iterator itBegin = it;\n         opcodetype opcode;\n@@ -1092,53 +1092,53 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize an input of txTo */\n     template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+    void SerializeInput(S &s, unsigned int nInput) const {\n         // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n         if (fAnyoneCanPay)\n             nInput = nIn;\n         // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        ::Serialize(s, txTo.vin[nInput].prevout);\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScriptBase(), nType, nVersion);\n+            ::Serialize(s, CScriptBase());\n         else\n-            SerializeScriptCode(s, nType, nVersion);\n+            SerializeScriptCode(s);\n         // Serialize the nSequence\n         if (nInput != nIn && (fHashSingle || fHashNone))\n             // let the others update at will\n-            ::Serialize(s, (int)0, nType, nVersion);\n+            ::Serialize(s, (int)0);\n         else\n-            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+            ::Serialize(s, txTo.vin[nInput].nSequence);\n     }\n \n     /** Serialize an output of txTo */\n     template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+    void SerializeOutput(S &s, unsigned int nOutput) const {\n         if (fHashSingle && nOutput != nIn)\n             // Do not lock-in the txout payee at other indices as txin\n-            ::Serialize(s, CTxOut(), nType, nVersion);\n+            ::Serialize(s, CTxOut());\n         else\n-            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+            ::Serialize(s, txTo.vout[nOutput]);\n     }\n \n     /** Serialize txTo */\n     template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n+    void Serialize(S &s) const {\n         // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        ::Serialize(s, txTo.nVersion);\n         // Serialize vin\n         unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n         ::WriteCompactSize(s, nInputs);\n         for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n-             SerializeInput(s, nInput, nType, nVersion);\n+             SerializeInput(s, nInput);\n         // Serialize vout\n         unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n         ::WriteCompactSize(s, nOutputs);\n         for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n-             SerializeOutput(s, nOutput, nType, nVersion);\n+             SerializeOutput(s, nOutput);\n         // Serialize nLockTime\n-        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+        ::Serialize(s, txTo.nLockTime);\n     }\n };\n "
      },
      {
        "sha": "fc4291fe95ca0cb8c3bfd15fefbf2f31b54a7961",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 126,
        "deletions": 130,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -159,54 +159,51 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n-#define READWRITE(obj)      (::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n-#define READWRITEMANY(...)      (::SerReadWriteMany(s, nType, nVersion, ser_action, __VA_ARGS__))\n+#define READWRITE(obj)      (::SerReadWrite(s, (obj), ser_action))\n+#define READWRITEMANY(...)      (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n \n /** \n  * Implement three methods for serializable objects. These are actually wrappers over\n  * \"SerializationOp\" template, which implements the body of each class' serialization\n  * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n  * added as members. \n  */\n-#define ADD_SERIALIZE_METHODS                                                          \\\n-    template<typename Stream>                                                        \\\n-    void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n-    }                                                                                \\\n-    template<typename Stream>                                                        \\\n-    void Unserialize(Stream& s, int nType, int nVersion) {                           \\\n-        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n+#define ADD_SERIALIZE_METHODS                                         \\\n+    template<typename Stream>                                         \\\n+    void Serialize(Stream& s) const {                                 \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n+    }                                                                 \\\n+    template<typename Stream>                                         \\\n+    void Unserialize(Stream& s) {                                     \\\n+        SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n-/*\n- * Basic Types\n- */\n-template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n-template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n \n-template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n-template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -386,13 +383,13 @@ class CFlatData\n     const char* end() const { return pend; }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s) const\n     {\n         s.write(pbegin, pend - pbegin);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s)\n     {\n         s.read(pbegin, pend - pbegin);\n     }\n@@ -407,12 +404,12 @@ class CVarInt\n     CVarInt(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int, int) const {\n+    void Serialize(Stream &s) const {\n         WriteVarInt<Stream,I>(s, n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int) {\n+    void Unserialize(Stream& s) {\n         n = ReadVarInt<Stream,I>(s);\n     }\n };\n@@ -425,12 +422,12 @@ class CCompactSize\n     CCompactSize(uint64_t& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int, int) const {\n+    void Serialize(Stream &s) const {\n         WriteCompactSize<Stream>(s, n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int) {\n+    void Unserialize(Stream& s) {\n         n = ReadCompactSize<Stream>(s);\n     }\n };\n@@ -444,7 +441,7 @@ class LimitedString\n     LimitedString(std::string& string) : string(string) {}\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n@@ -456,7 +453,7 @@ class LimitedString\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s) const\n     {\n         WriteCompactSize(s, string.size());\n         if (!string.empty())\n@@ -474,69 +471,66 @@ CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }\n /**\n  *  string\n  */\n-template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n+template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str);\n+template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str);\n \n /**\n  * prevector\n  * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion);\n-template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v);\n+template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v);\n \n /**\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&);\n+template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&);\n+template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v);\n \n /**\n  * pair\n  */\n-template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n-template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item);\n+template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item);\n \n /**\n  * map\n  */\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m);\n \n /**\n  * set\n  */\n-template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m);\n+template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m);\n \n \n \n \n \n /**\n  * If none of the specialized versions above matched, default to calling member function.\n- * \"int nType\" is changed to \"long nType\" to keep from getting an ambiguous overload error.\n- * The compiler will only cast int to long if none of the other templates matched.\n- * Thanks to Boost serialization for this idea.\n  */\n template<typename Stream, typename T>\n-inline void Serialize(Stream& os, const T& a, long nType, int nVersion)\n+inline void Serialize(Stream& os, const T& a)\n {\n-    a.Serialize(os, (int)nType, nVersion);\n+    a.Serialize(os);\n }\n \n template<typename Stream, typename T>\n-inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n+inline void Unserialize(Stream& is, T& a)\n {\n-    a.Unserialize(is, (int)nType, nVersion);\n+    a.Unserialize(is);\n }\n \n \n@@ -547,15 +541,15 @@ inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n  * string\n  */\n template<typename Stream, typename C>\n-void Serialize(Stream& os, const std::basic_string<C>& str, int, int)\n+void Serialize(Stream& os, const std::basic_string<C>& str)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n         os.write((char*)&str[0], str.size() * sizeof(str[0]));\n }\n \n template<typename Stream, typename C>\n-void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n+void Unserialize(Stream& is, std::basic_string<C>& str)\n {\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n@@ -569,30 +563,30 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n  * prevector\n  */\n template<typename Stream, unsigned int N, typename T>\n-void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n-void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&)\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi), nType, nVersion);\n+        ::Serialize(os, (*vi));\n }\n \n template<typename Stream, unsigned int N, typename T>\n-inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion)\n+inline void Serialize(Stream& os, const prevector<N, T>& v)\n {\n-    Serialize_impl(os, v, nType, nVersion, T());\n+    Serialize_impl(os, v, T());\n }\n \n \n template<typename Stream, unsigned int N, typename T>\n-void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -608,7 +602,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, c\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n-void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&)\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -621,14 +615,14 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, c\n             nMid = nSize;\n         v.resize(nMid);\n         for (; i < nMid; i++)\n-            Unserialize(is, v[i], nType, nVersion);\n+            Unserialize(is, v[i]);\n     }\n }\n \n template<typename Stream, unsigned int N, typename T>\n-inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n+inline void Unserialize(Stream& is, prevector<N, T>& v)\n {\n-    Unserialize_impl(is, v, nType, nVersion, T());\n+    Unserialize_impl(is, v, T());\n }\n \n \n@@ -637,30 +631,30 @@ inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n  * vector\n  */\n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi), nType, nVersion);\n+        ::Serialize(os, (*vi));\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n+inline void Serialize(Stream& os, const std::vector<T, A>& v)\n {\n-    Serialize_impl(os, v, nType, nVersion, T());\n+    Serialize_impl(os, v, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -676,7 +670,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -689,14 +683,14 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n             nMid = nSize;\n         v.resize(nMid);\n         for (; i < nMid; i++)\n-            Unserialize(is, v[i], nType, nVersion);\n+            Unserialize(is, v[i]);\n     }\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n+inline void Unserialize(Stream& is, std::vector<T, A>& v)\n {\n-    Unserialize_impl(is, v, nType, nVersion, T());\n+    Unserialize_impl(is, v, T());\n }\n \n \n@@ -705,17 +699,17 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n  * pair\n  */\n template<typename Stream, typename K, typename T>\n-void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)\n+void Serialize(Stream& os, const std::pair<K, T>& item)\n {\n-    Serialize(os, item.first, nType, nVersion);\n-    Serialize(os, item.second, nType, nVersion);\n+    Serialize(os, item.first);\n+    Serialize(os, item.second);\n }\n \n template<typename Stream, typename K, typename T>\n-void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n+void Unserialize(Stream& is, std::pair<K, T>& item)\n {\n-    Unserialize(is, item.first, nType, nVersion);\n-    Unserialize(is, item.second, nType, nVersion);\n+    Unserialize(is, item.first);\n+    Unserialize(is, item.second);\n }\n \n \n@@ -724,23 +718,23 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n  * map\n  */\n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n-        Serialize(os, (*mi), nType, nVersion);\n+        Serialize(os, (*mi));\n }\n \n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n     typename std::map<K, T, Pred, A>::iterator mi = m.begin();\n     for (unsigned int i = 0; i < nSize; i++)\n     {\n         std::pair<K, T> item;\n-        Unserialize(is, item, nType, nVersion);\n+        Unserialize(is, item);\n         mi = m.insert(mi, item);\n     }\n }\n@@ -751,23 +745,23 @@ void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion\n  * set\n  */\n template<typename Stream, typename K, typename Pred, typename A>\n-void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::set<K, Pred, A>& m)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n-        Serialize(os, (*it), nType, nVersion);\n+        Serialize(os, (*it));\n }\n \n template<typename Stream, typename K, typename Pred, typename A>\n-void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::set<K, Pred, A>& m)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n     typename std::set<K, Pred, A>::iterator it = m.begin();\n     for (unsigned int i = 0; i < nSize; i++)\n     {\n         K key;\n-        Unserialize(is, key, nType, nVersion);\n+        Unserialize(is, key);\n         it = m.insert(it, key);\n     }\n }\n@@ -787,15 +781,15 @@ struct CSerActionUnserialize\n };\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)\n+inline void SerReadWrite(Stream& s, const T& obj, CSerActionSerialize ser_action)\n {\n-    ::Serialize(s, obj, nType, nVersion);\n+    ::Serialize(s, obj);\n }\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)\n+inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)\n {\n-    ::Unserialize(s, obj, nType, nVersion);\n+    ::Unserialize(s, obj);\n }\n \n \n@@ -814,7 +808,6 @@ class CSizeComputer\n     const int nType;\n     const int nVersion;\n public:\n-\n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n     void write(const char *psz, size_t nSize)\n@@ -825,61 +818,64 @@ class CSizeComputer\n     template<typename T>\n     CSizeComputer& operator<<(const T& obj)\n     {\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     size_t size() const {\n         return nSize;\n     }\n+\n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n };\n \n template<typename Stream>\n-void SerializeMany(Stream& s, int nType, int nVersion)\n+void SerializeMany(Stream& s)\n {\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, int nType, int nVersion, Arg&& arg)\n+void SerializeMany(Stream& s, Arg&& arg)\n {\n-    ::Serialize(s, std::forward<Arg>(arg), nType, nVersion);\n+    ::Serialize(s, std::forward<Arg>(arg));\n }\n \n template<typename Stream, typename Arg, typename... Args>\n-void SerializeMany(Stream& s, int nType, int nVersion, Arg&& arg, Args&&... args)\n+void SerializeMany(Stream& s, Arg&& arg, Args&&... args)\n {\n-    ::Serialize(s, std::forward<Arg>(arg), nType, nVersion);\n-    ::SerializeMany(s, nType, nVersion, std::forward<Args>(args)...);\n+    ::Serialize(s, std::forward<Arg>(arg));\n+    ::SerializeMany(s, std::forward<Args>(args)...);\n }\n \n template<typename Stream>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion)\n+inline void UnserializeMany(Stream& s)\n {\n }\n \n template<typename Stream, typename Arg>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion, Arg& arg)\n+inline void UnserializeMany(Stream& s, Arg& arg)\n {\n-    ::Unserialize(s, arg, nType, nVersion);\n+    ::Unserialize(s, arg);\n }\n \n template<typename Stream, typename Arg, typename... Args>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion, Arg& arg, Args&... args)\n+inline void UnserializeMany(Stream& s, Arg& arg, Args&... args)\n {\n-    ::Unserialize(s, arg, nType, nVersion);\n-    ::UnserializeMany(s, nType, nVersion, args...);\n+    ::Unserialize(s, arg);\n+    ::UnserializeMany(s, args...);\n }\n \n template<typename Stream, typename... Args>\n-inline void SerReadWriteMany(Stream& s, int nType, int nVersion, CSerActionSerialize ser_action, Args&&... args)\n+inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, Args&&... args)\n {\n-    ::SerializeMany(s, nType, nVersion, std::forward<Args>(args)...);\n+    ::SerializeMany(s, std::forward<Args>(args)...);\n }\n \n template<typename Stream, typename... Args>\n-inline void SerReadWriteMany(Stream& s, int nType, int nVersion, CSerActionUnserialize ser_action, Args&... args)\n+inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&... args)\n {\n-    ::UnserializeMany(s, nType, nVersion, args...);\n+    ::UnserializeMany(s, args...);\n }\n \n template <typename T>"
      },
      {
        "sha": "c3e7c9e9e4a49e7f5ceb9516cdb3bd3d74bf80dd",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -37,17 +37,30 @@ class OverrideStream\n     OverrideStream<Stream>& operator<<(const T& obj)\n     {\n         // Serialize to this stream\n-        ::Serialize(*this->stream, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     template<typename T>\n     OverrideStream<Stream>& operator>>(T& obj)\n     {\n         // Unserialize from this stream\n-        ::Unserialize(*this->stream, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n+\n+    void write(const char* pch, size_t nSize)\n+    {\n+        stream->write(pch, nSize);\n+    }\n+\n+    void read(char* pch, size_t nSize)\n+    {\n+        stream->read(pch, nSize);\n+    }\n+\n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n };\n \n template<typename S>\n@@ -118,7 +131,7 @@ class CDataStream\n     CDataStream(int nTypeIn, int nVersionIn, Args&&... args)\n     {\n         Init(nTypeIn, nVersionIn);\n-        ::SerializeMany(*this, nType, nVersion, std::forward<Args>(args)...);\n+        ::SerializeMany(*this, std::forward<Args>(args)...);\n     }\n \n     void Init(int nTypeIn, int nVersionIn)\n@@ -301,7 +314,7 @@ class CDataStream\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n@@ -312,15 +325,15 @@ class CDataStream\n     CDataStream& operator<<(const T& obj)\n     {\n         // Serialize to this stream\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     template<typename T>\n     CDataStream& operator>>(T& obj)\n     {\n         // Unserialize from this stream\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n \n@@ -456,7 +469,7 @@ class CAutoFile\n         // Serialize to this stream\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n@@ -466,7 +479,7 @@ class CAutoFile\n         // Unserialize from this stream\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n };\n@@ -525,6 +538,9 @@ class CBufferedFile\n         fclose();\n     }\n \n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n+\n     void fclose()\n     {\n         if (src) {\n@@ -603,7 +619,7 @@ class CBufferedFile\n     template<typename T>\n     CBufferedFile& operator>>(T& obj) {\n         // Unserialize from this stream\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n "
      },
      {
        "sha": "0ed5d62ef67e15f53607816e701ba4f739aafcdf",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -129,7 +129,7 @@ class TestHeaderAndShortIDs {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(nonce);\n         size_t shorttxids_size = shorttxids.size();"
      },
      {
        "sha": "25fb9ea2b757cf6da58ada571fb7456bd1d92a15",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -41,7 +41,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n     vector<char> expected(vch.size());\n@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n     vector<char> expected(vch.size());\n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n     vector<char> expected(vch.size());"
      },
      {
        "sha": "2d791ee18d5a8e17feb33367bc13fb3034dace8a",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -254,7 +254,7 @@ struct StringContentsSerializer {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (ser_action.ForRead()) {\n             str.clear();\n             char c = 0;"
      },
      {
        "sha": "87cb38daac3d2766e9d285fe3fe25820bc6ea76a",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -17,7 +17,7 @@ using namespace std;\n class CAddrManSerializationMock : public CAddrMan\n {\n public:\n-    virtual void Serialize(CDataStream& s, int nType, int nVersionDummy) const = 0;\n+    virtual void Serialize(CDataStream& s) const = 0;\n \n     //! Ensure that bucket placement is always the same for testing purposes.\n     void MakeDeterministic()\n@@ -30,16 +30,16 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    void Serialize(CDataStream& s) const\n     {\n-        CAddrMan::Serialize(s, nType, nVersionDummy);\n+        CAddrMan::Serialize(s);\n     }\n };\n \n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    void Serialize(CDataStream& s) const\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "bbadf57957c9483568342ae0ae955f630cd34cf6",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -28,7 +28,7 @@ class CSerializeMethodsTestSingle\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(intval);\n         READWRITE(boolval);\n         READWRITE(stringval);\n@@ -53,7 +53,7 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITEMANY(intval, boolval, stringval, FLATDATA(charstrval), txval);\n     }\n };"
      },
      {
        "sha": "2732948060a79f462ab1f6801927c27bc8d65f7d",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -187,22 +187,22 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(GetSerializeSize(R1L, 0, PROTOCOL_VERSION) == 32);\n     BOOST_CHECK(GetSerializeSize(ZeroL, 0, PROTOCOL_VERSION) == 32);\n \n-    std::stringstream ss;\n-    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    CDataStream ss(0, PROTOCOL_VERSION);\n+    ss << R1L;\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(R1L == TmpL);\n-    ss.str(\"\");\n-    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << ZeroL;\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(ZeroL == TmpL);\n-    ss.str(\"\");\n-    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << MaxL;\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(MaxL == TmpL);\n-    ss.str(\"\");\n+    ss.clear();\n \n     BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n     BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n@@ -233,21 +233,21 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(GetSerializeSize(R1S, 0, PROTOCOL_VERSION) == 20);\n     BOOST_CHECK(GetSerializeSize(ZeroS, 0, PROTOCOL_VERSION) == 20);\n \n-    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss << R1S;\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(R1S == TmpS);\n-    ss.str(\"\");\n-    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << ZeroS;\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(ZeroS == TmpS);\n-    ss.str(\"\");\n-    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << MaxS;\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(MaxS == TmpS);\n-    ss.str(\"\");\n+    ss.clear();\n }\n \n BOOST_AUTO_TEST_CASE( conversion )"
      },
      {
        "sha": "687c686775b03d54dfa9c492b50aa43977c31ac3",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -43,7 +43,7 @@ struct CDiskTxPos : public CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CDiskBlockPos*)this);\n         READWRITE(VARINT(nTxOffset));\n     }"
      },
      {
        "sha": "86e7c0b6c64a7d73b291b7c7a3b4c53ca3941052",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -92,13 +92,13 @@ class base_blob\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         s.write((char*)data, sizeof(data));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         s.read((char*)data, sizeof(data));\n     }"
      },
      {
        "sha": "a5d276e7f33ed6ee611a9a5f2c9b23d4ee8f7629",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -28,22 +28,22 @@ class CTxInUndo\n     CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n+    void Serialize(Stream &s) const {\n+        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n         if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n+            ::Serialize(s, VARINT(this->nVersion));\n+        ::Serialize(s, CTxOutCompressor(REF(txout)));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode));\n         nHeight = nCode / 2;\n         fCoinBase = nCode & 1;\n         if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n+            ::Unserialize(s, VARINT(this->nVersion));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n     }\n };\n \n@@ -57,7 +57,7 @@ class CTxUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vprevout);\n     }\n };\n@@ -71,7 +71,7 @@ class CBlockUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vtxundo);\n     }\n };"
      },
      {
        "sha": "e89c15b5d4a4f72732c3918fcea39d75cfaa59c6",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -47,7 +47,7 @@ class CMasterKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vchCryptedKey);\n         READWRITE(vchSalt);\n         READWRITE(nDerivationMethod);"
      },
      {
        "sha": "a527c6d84ef1bdcae39ad9700b8e86e5f9b19897",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -100,8 +100,9 @@ class CKeyPool\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(nTime);\n         READWRITE(vchPubKey);\n@@ -195,7 +196,7 @@ class CMerkleTx : public CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n         READWRITE(*(CTransaction*)this);\n         READWRITE(hashBlock);\n@@ -315,7 +316,7 @@ class CWalletTx : public CMerkleTx\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (ser_action.ForRead())\n             Init(NULL);\n         char fSpent = false;\n@@ -448,8 +449,9 @@ class CWalletKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPrivKey);\n         READWRITE(nTimeCreated);\n@@ -493,8 +495,9 @@ class CAccountingEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         //! Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n@@ -507,7 +510,7 @@ class CAccountingEntry\n \n             if (!(mapValue.empty() && _ssExtra.empty()))\n             {\n-                CDataStream ss(nType, nVersion);\n+                CDataStream ss(s.GetType(), s.GetVersion());\n                 ss.insert(ss.begin(), '\\0');\n                 ss << mapValue;\n                 ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n@@ -523,7 +526,7 @@ class CAccountingEntry\n             mapValue.clear();\n             if (std::string::npos != nSepPos)\n             {\n-                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), s.GetType(), s.GetVersion());\n                 ss >> mapValue;\n                 _ssExtra = std::vector<char>(ss.begin(), ss.end());\n             }\n@@ -986,8 +989,9 @@ class CAccount\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPubKey);\n     }"
      },
      {
        "sha": "eb25ac613dd33b261c9c4df5bd189886b2c96a6e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/528472111b4965b1a99c4bcf08ac5ec93d87f10f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "patch": "@@ -54,7 +54,7 @@ class CHDChain\n     CHDChain() { SetNull(); }\n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n@@ -93,7 +93,7 @@ class CKeyMetadata\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         if (this->nVersion >= VERSION_WITH_HDDATA)"
      }
    ]
  },
  {
    "sha": "a603925c77d7cd15c03d8028414c8917347e81b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjAzOTI1Yzc3ZDdjZDE1YzAzZDgwMjg0MTRjODkxNzM0N2U4MWI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-30T20:09:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:27Z"
      },
      "message": "Avoid -Wshadow errors\n\nSuggested by Pavel Janik.",
      "tree": {
        "sha": "44bd42c2214fc987d20459d2f2609cbde289729b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44bd42c2214fc987d20459d2f2609cbde289729b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a603925c77d7cd15c03d8028414c8917347e81b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a603925c77d7cd15c03d8028414c8917347e81b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a603925c77d7cd15c03d8028414c8917347e81b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a603925c77d7cd15c03d8028414c8917347e81b7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/528472111b4965b1a99c4bcf08ac5ec93d87f10f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/528472111b4965b1a99c4bcf08ac5ec93d87f10f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d26d2d52e6046df17b4a7d40f0cc1e51f653fc9d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a603925c77d7cd15c03d8028414c8917347e81b7/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a603925c77d7cd15c03d8028414c8917347e81b7/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a603925c77d7cd15c03d8028414c8917347e81b7",
        "patch": "@@ -438,7 +438,7 @@ class LimitedString\n protected:\n     std::string& string;\n public:\n-    LimitedString(std::string& string) : string(string) {}\n+    LimitedString(std::string& _string) : string(_string) {}\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n@@ -810,9 +810,9 @@ class CSizeComputer\n public:\n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    void write(const char *psz, size_t nSize)\n+    void write(const char *psz, size_t _nSize)\n     {\n-        this->nSize += nSize;\n+        this->nSize += _nSize;\n     }\n \n     template<typename T>"
      }
    ]
  },
  {
    "sha": "a2929a26f5cf3501804fd12071dd6cf6b464a545",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjkyOWEyNmY1Y2YzNTAxODA0ZmQxMjA3MWRkNmNmNmI0NjRhNTQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-29T00:07:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:27Z"
      },
      "message": "Make CSerAction's ForRead() constexpr\n\nThe CSerAction's ForRead() method does not depend on any runtime\ndata, so guarantee that requests to it can be optimized out by\nmaking it constexpr.\n\nSuggested by Cory Fields.",
      "tree": {
        "sha": "3b53440bdf14304706f3a29b20a25e4c2b5663ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b53440bdf14304706f3a29b20a25e4c2b5663ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2929a26f5cf3501804fd12071dd6cf6b464a545",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2929a26f5cf3501804fd12071dd6cf6b464a545",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2929a26f5cf3501804fd12071dd6cf6b464a545",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2929a26f5cf3501804fd12071dd6cf6b464a545/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a603925c77d7cd15c03d8028414c8917347e81b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a603925c77d7cd15c03d8028414c8917347e81b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a603925c77d7cd15c03d8028414c8917347e81b7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8e37f567238f09b43b568b3e0576985c05f903e7",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2929a26f5cf3501804fd12071dd6cf6b464a545/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2929a26f5cf3501804fd12071dd6cf6b464a545/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a2929a26f5cf3501804fd12071dd6cf6b464a545",
        "patch": "@@ -773,11 +773,11 @@ void Unserialize(Stream& is, std::set<K, Pred, A>& m)\n  */\n struct CSerActionSerialize\n {\n-    bool ForRead() const { return false; }\n+    constexpr bool ForRead() const { return false; }\n };\n struct CSerActionUnserialize\n {\n-    bool ForRead() const { return true; }\n+    constexpr bool ForRead() const { return true; }\n };\n \n template<typename Stream, typename T>"
      }
    ]
  },
  {
    "sha": "25a211aa9edfeccc1e65bf699e0b32619cef2157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWEyMTFhYTllZGZlY2NjMWU2NWJmNjk5ZTBiMzI2MTljZWYyMTU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-29T00:50:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:27Z"
      },
      "message": "Add optimized CSizeComputer serializers\n\nTo get the advantages of faster GetSerializeSize() implementations\nback that were removed in \"Make GetSerializeSize a wrapper on top of\nCSizeComputer\", reintroduce them in the few places in the form of a\nspecialized Serialize() implementation. This actually gets us in a\nbetter state than before, as these even get used when they're invoked\nindirectly in the serialization of another object.",
      "tree": {
        "sha": "07345f3d4cc10cd2d2c3419a6074a41c99bb20f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07345f3d4cc10cd2d2c3419a6074a41c99bb20f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25a211aa9edfeccc1e65bf699e0b32619cef2157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a211aa9edfeccc1e65bf699e0b32619cef2157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25a211aa9edfeccc1e65bf699e0b32619cef2157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a211aa9edfeccc1e65bf699e0b32619cef2157/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2929a26f5cf3501804fd12071dd6cf6b464a545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2929a26f5cf3501804fd12071dd6cf6b464a545",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2929a26f5cf3501804fd12071dd6cf6b464a545"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 40,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9499862210ae5e4402efd7dbdf745e3c56cd748a",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a211aa9edfeccc1e65bf699e0b32619cef2157/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a211aa9edfeccc1e65bf699e0b32619cef2157/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=25a211aa9edfeccc1e65bf699e0b32619cef2157",
        "patch": "@@ -210,6 +210,11 @@ struct CExtPubKey {\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n \n+    void Serialize(CSizeComputer& s) const\n+    {\n+        // Optimized implementation for ::GetSerializeSize that avoids copying.\n+        s.seek(BIP32_EXTKEY_SIZE + 1); // add one byte for the size (compact int)\n+    }\n     template <typename Stream>\n     void Serialize(Stream& s) const\n     {"
      },
      {
        "sha": "91864e1b647c0b796d7ad69fdb3d966428061050",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a211aa9edfeccc1e65bf699e0b32619cef2157/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a211aa9edfeccc1e65bf699e0b32619cef2157/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=25a211aa9edfeccc1e65bf699e0b32619cef2157",
        "patch": "@@ -151,6 +151,8 @@ inline float ser_uint32_to_float(uint32_t y)\n // i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)\n //\n \n+class CSizeComputer;\n+\n enum\n {\n     // primary actions\n@@ -225,6 +227,8 @@ inline unsigned int GetSizeOfCompactSize(uint64_t nSize)\n     else                         return sizeof(unsigned char) + sizeof(uint64_t);\n }\n \n+inline void WriteCompactSize(CSizeComputer& os, uint64_t nSize);\n+\n template<typename Stream>\n void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n@@ -319,6 +323,9 @@ inline unsigned int GetSizeOfVarInt(I n)\n     return nRet;\n }\n \n+template<typename I>\n+inline void WriteVarInt(CSizeComputer& os, I n);\n+\n template<typename Stream, typename I>\n void WriteVarInt(Stream& os, I n)\n {\n@@ -800,6 +807,17 @@ inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)\n \n \n \n+/* ::GetSerializeSize implementations\n+ *\n+ * Computing the serialized size of objects is done through a special stream\n+ * object of type CSizeComputer, which only records the number of bytes written\n+ * to it.\n+ *\n+ * If your Serialize or SerializationOp method has non-trivial overhead for\n+ * serialization, it may be worthwhile to implement a specialized version for\n+ * CSizeComputer, which uses the s.seek() method to record bytes that would\n+ * be written instead.\n+ */\n class CSizeComputer\n {\n protected:\n@@ -815,6 +833,12 @@ class CSizeComputer\n         this->nSize += _nSize;\n     }\n \n+    /** Pretend _nSize bytes are written, without specifying them. */\n+    void seek(size_t _nSize)\n+    {\n+        this->nSize += _nSize;\n+    }\n+\n     template<typename T>\n     CSizeComputer& operator<<(const T& obj)\n     {\n@@ -878,6 +902,17 @@ inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&.\n     ::UnserializeMany(s, args...);\n }\n \n+template<typename I>\n+inline void WriteVarInt(CSizeComputer &s, I n)\n+{\n+    s.seek(GetSizeOfVarInt<I>(n));\n+}\n+\n+inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)\n+{\n+    s.seek(GetSizeOfCompactSize(nSize));\n+}\n+\n template <typename T>\n size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)\n {"
      }
    ]
  },
  {
    "sha": "d59a518466f6b9012666a3f9392ec12fff8830b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTlhNTE4NDY2ZjZiOTAxMjY2NmEzZjkzOTJlYzEyZmZmODgzMGI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-29T02:12:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-07T21:56:27Z"
      },
      "message": "Use fixed preallocation instead of costly GetSerializeSize\n\nDbwrapper used GetSerializeSize() to compute the size of the buffer\nto preallocate. For some cases (specifically: CCoins) this requires\na costly compression call. Avoid this by just using fixed size\npreallocations instead.",
      "tree": {
        "sha": "d851ca45a75edab810626eed6708d11107a24dea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d851ca45a75edab810626eed6708d11107a24dea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d59a518466f6b9012666a3f9392ec12fff8830b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d59a518466f6b9012666a3f9392ec12fff8830b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d59a518466f6b9012666a3f9392ec12fff8830b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d59a518466f6b9012666a3f9392ec12fff8830b5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25a211aa9edfeccc1e65bf699e0b32619cef2157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a211aa9edfeccc1e65bf699e0b32619cef2157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25a211aa9edfeccc1e65bf699e0b32619cef2157"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4a79bbd17dfec56999445ee4f41005d21e93ce8d",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d59a518466f6b9012666a3f9392ec12fff8830b5/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d59a518466f6b9012666a3f9392ec12fff8830b5/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=d59a518466f6b9012666a3f9392ec12fff8830b5",
        "patch": "@@ -17,6 +17,9 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n+static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;\n+static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n+\n class dbwrapper_error : public std::runtime_error\n {\n public:\n@@ -60,12 +63,12 @@ class CDBBatch\n     void Write(const K& key, const V& value)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(GetSerializeSize(ssKey, key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(GetSerializeSize(ssValue, value));\n+        ssValue.reserve(DBWRAPPER_PREALLOC_VALUE_SIZE);\n         ssValue << value;\n         ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n@@ -77,7 +80,7 @@ class CDBBatch\n     void Erase(const K& key)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(GetSerializeSize(ssKey, key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -107,7 +110,7 @@ class CDBIterator\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(GetSerializeSize(ssKey, key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n         piter->Seek(slKey);\n@@ -200,7 +203,7 @@ class CDBWrapper\n     bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(GetSerializeSize(ssKey, key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -234,7 +237,7 @@ class CDBWrapper\n     bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(GetSerializeSize(ssKey, key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n "
      }
    ]
  }
]