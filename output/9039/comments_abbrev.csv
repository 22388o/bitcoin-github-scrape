sipa,2016-10-30T06:19:49Z,"A benchmark of a `-reindex-chainstate` until height 290000, with default dbcache, shows that this is around 1% faster (4 runs on master with times ranging 1370.99-1377.95s, 4 runs on this PR with times ranging 1359.90-1365.74s; measured using -bench=debug).\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257134377,257134377,
paveljanik,2016-10-30T15:21:45Z,Concept ACK. I like it!\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257157398,257157398,
sipa,2016-10-30T20:48:28Z,Addressed @paveljanik's nits.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257177975,257177975,
paveljanik,2016-10-30T21:15:15Z,"Compiling with `clang` brings new warnings (diff master->#9039):\n\n```\n+In file included from init.cpp:41:\n+./wallet/wallet.h:137:13: warning: 'static' function 'ReadOrderPos' declared in header file should be declared 'static inline' [-Wunneeded-internal-declaration]\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n             ^\n+./wallet/wallet.h:148:13: warning: 'stati",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257179793,257179793,
sipa,2016-10-30T21:21:52Z,"@paveljanik That seems completely unrelated to this PR. Is it possible that\nclang only shows a limited number of warnings, and only gets to those new\nones after the current ones fixed by this PR are fixed?\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257180179,257180179,
paveljanik,2016-10-30T21:23:26Z,"@sipa Well, maybe. I do not know yet 8)\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257180296,257180296,
paveljanik,2016-10-31T11:26:46Z,"Hmm, compiling e.g. `src/wallet/wallet.cpp` prints _NO_ warning in the current master. But this is printed after applying this PR:\n\n```\nIn file included from wallet/wallet.cpp:6:\n./wallet/wallet.h:137:13: warning: 'static' function 'ReadOrderPos' declared in header file should be declared 'static inline' [-Wunneeded-internal-declaration]\nstatic void ReadOrderPos(int64_t& nOrderPos, mapValue_t",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257270526,257270526,
theuni,2016-11-01T22:31:44Z,"Concept ACK and quick review utACK. I can confirm @paveljanik's new warning, but can't figure out why. Inlining shuts it up.\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257718941,257718941,
sipa,2016-11-02T20:55:24Z,"@theuni @paveljanik I can't explain the new warning, but it is correct. I'll add an (technically unrelated) commit here to fix it?\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-257996085,257996085,
paveljanik,2016-11-02T21:14:20Z,"Yes, please.\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258001189,258001189,
MarcoFalke,2016-11-02T22:23:32Z,"> I'll add an (technically unrelated) commit here to fix it?\n\nIf it is unrelated, better move it to a new pull request.\n\n(Could _not_ see the warning here, when rebasing on current master and typing `make`)\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258017810,258017810,
sipa,2016-11-03T00:30:38Z,@MarcoFalke @paveljanik See #9071.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258039909,258039909,
TheBlueMatt,2016-11-03T22:59:53Z,"Your commit message on ""Make streams' read and write return void"" has the description of ""Make nType and nVersion private and sometimes const"" and vice versa.\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258299325,258299325,
sipa,2016-11-03T23:44:57Z,@TheBlueMatt Fixed!\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258307277,258307277,
gmaxwell,2016-11-07T05:39:14Z,"21:22 < fanquake> Has anyone benched #9039 ? Sipa posted a 1% speedup, but I'm seeing nearly 10%. Wondering if I'm missing something..\n21:34 < sipa> fanquake: highly dependent on your system\n21:34 < sipa> i saw 5% in cpu reduction in the disk flushing code\n",https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258751436,258751436,
laanwj,2016-11-07T09:37:51Z,Needs rebase after #8708\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258788098,258788098,
sipa,2016-11-07T21:23:28Z,Rebased on top of #8708.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-258966906,258966906,
gmaxwell,2016-11-08T00:05:24Z,Rescan of recent blocks appears to be 4% faster with this on my laptop.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-259004265,259004265,
gmaxwell,2016-11-08T22:53:59Z,tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-259285317,259285317,
laanwj,2016-11-09T12:52:00Z,Code review + concept ACK d59a518\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-259407654,259407654,
jtimon,2016-11-14T22:21:06Z,Fast review on the parts related to removing nType and nVersion for serialization d59a518.\n,https://github.com/bitcoin/bitcoin/pull/9039#issuecomment-260482319,260482319,
paveljanik,2016-10-30T15:19:45Z,Can you please also change this into\n\n``` C++\nLimitedString(std::string& _string) : string(_string) {}\n```\n\nThis will remove 204 `-Wshadow` warnings...\n,https://github.com/bitcoin/bitcoin/pull/9039#discussion_r85661858,85661858,src/serialize.h
paveljanik,2016-10-30T15:20:13Z,`_nSize` please.\n,https://github.com/bitcoin/bitcoin/pull/9039#discussion_r85661863,85661863,src/serialize.h
paveljanik,2016-10-30T15:20:30Z,"ditto, `_nSize` please.\n",https://github.com/bitcoin/bitcoin/pull/9039#discussion_r85661870,85661870,src/serialize.h
TheBlueMatt,2016-11-04T15:19:21Z,Strictly speaking this is also a performance regression...do we care about the time taken to iterate over the nMastkSize bits (ie do we ever care about the performance of CCoins serialization that much?)\n,https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86567324,86567324,src/coins.h
TheBlueMatt,2016-11-04T18:41:36Z,"This breaks the uint256_tests compile, but you fixed it in ""Get rid of nType and nVersion"", should probably move that few-line diff back to this commit.\n",https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86608837,86608837,src/uint256.h
TheBlueMatt,2016-11-04T22:42:44Z,"I see no reason not to go higher here? Keys should ~always be 35 bytes (ish, but 64 is fine), but values could be higher...but might as well also prealloc more than 1K for values since they're occasionally higher and the memory usage isnt an issue. Did you benchmark this?\n",https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86644995,86644995,src/dbwrapper.h
sipa,2016-11-05T00:21:54Z,"I actually think this will be optimized out. It's a loop with known count in CCoin::Serialize, where each iteration results in a counter increment by one. Also, yes, I don't think we care.\n",https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86652666,86652666,src/coins.h
sipa,2016-11-05T00:24:07Z,"I did benchmark the change overall,  and the ""Flush to disk"" time went down by around 5% from just this. I did not benchmark any other sizes, but my expectation is that as long as the key size is over 35, and the value over 100 or so, there will not be any measurable difference, as these cases occur so infrequently, and a vector resize isn't the end of the world.\n",https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86652783,86652783,src/dbwrapper.h
sipa,2016-11-07T21:56:51Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/9039#discussion_r86878759,86878759,src/uint256.h
