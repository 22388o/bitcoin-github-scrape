JeremyRubin,2020-04-21 19:08:01,"Yes, let's do this as soon as possible.\n\nBut Concept NACK for now. The mempool project (which I've added this to) needs to make more progress before something like this is remotely feasible. Added this to the tracker for that project for when the time comes!",https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-617356761,617356761,
DrahtBot,2020-04-23 20:51:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17383 (Refactor: Move consts to their correct translation units by jnewbery)\n\nIf you consider this pull request importa",https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-618662699,618662699,
DrahtBot,2020-04-25 13:09:27,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-619377363,619377363,
ariard,2020-04-21 23:50:56,"A 1000vbyte size * 100 seems enough to one party owning multiple carve-out outputs to decrease feerate of unconfirmed parent tx enough to stuck it in the mempool. I think that's already a risk today but right now custodial service, being broadcaster, can iterative batch on its own output to reach first DEFAULT_DESCENDANT_LIMIT and avoid any junk-feerate squatting branch.\n\nThat said the batchin",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412569079,412569079,src/validation.cpp
instagibbs,2020-04-22 12:48:29,"The batching case, AFAICT is less *complicated*, and outright theft is not a result if somehow things go wrong. Instead it may simply result in certain processors not batching, or doing smaller batches to avoid pinning hundreds of user payouts, or simply paying a much higher feerate to avoid the situation.\n\nIt's a practical problem in real-world deployments today to make sure that the more gen",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412951743,412951743,src/validation.cpp
JeremyRubin,2020-04-22 20:18:54,"That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\n\nOne space of a solution would be to have a defined eviction order in the transaction; e.g., spends from output S n+1 > output n or outputs are ordered by value spent with order tiebreaker. I think the decision rule should n",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413300736,413300736,src/validation.cpp
instagibbs,2020-04-22 20:23:26,"> That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\n\nfair enough, people may be building really bad ideas on top",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413303560,413303560,src/validation.cpp
ariard,2020-04-22 23:38:31,"> That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\n\nThat would be a zero-conf channel which is already under a double-spend threat, at least understood by people who implemented it. But yes we shouldn't make it easier to build insecure protocol..",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413404885,413404885,src/validation.cpp
JeremyRubin,2020-04-23 01:36:26,"Well the issues come up in other contexts too where it's expressly not an issue if it's known the parent cannot be malleated, such as a batch where you are 1 of N parties to have signed the N of N, but the outputs are independent. Perfectly safe to use those HTLCs between any of the N people, but pinning can still be an issue.",https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413445539,413445539,src/validation.cpp
