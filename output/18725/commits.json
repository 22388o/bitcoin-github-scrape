[
  {
    "sha": "c5db55a6a00918ed74c9fd14a875635e61879510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWRiNTVhNmEwMDkxOGVkNzRjOWZkMTRhODc1NjM1ZTYxODc5NTEw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-04-21T13:58:18Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-04-21T14:00:01Z"
      },
      "message": "Expand on contracting carve-out rule test",
      "tree": {
        "sha": "41b8b017263b862a07ae5b4b6908f07b088ace37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41b8b017263b862a07ae5b4b6908f07b088ace37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5db55a6a00918ed74c9fd14a875635e61879510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5db55a6a00918ed74c9fd14a875635e61879510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5db55a6a00918ed74c9fd14a875635e61879510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5db55a6a00918ed74c9fd14a875635e61879510/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "977328338e468390feea691de744609db213281b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977328338e468390feea691de744609db213281b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/977328338e468390feea691de744609db213281b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1a3a3f093ec1944585dd84892cb9c49dfaf95d41",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5db55a6a00918ed74c9fd14a875635e61879510/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5db55a6a00918ed74c9fd14a875635e61879510/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=c5db55a6a00918ed74c9fd14a875635e61879510",
        "patch": "@@ -48,10 +48,17 @@ def run_test(self):\n         vout = utxo[0]['vout']\n         value = utxo[0]['amount']\n \n+        assert_equal(len(self.nodes[0].getrawmempool(True)), 0)\n+\n         fee = Decimal(\"0.0002\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n-        for _ in range(4):\n+        # First tx has 3 outputs\n+        (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 3)\n+        vout = 0\n+        value = sent_value\n+        chain.append([txid, value])\n+        for _ in range(3):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n             vout = 0\n             value = sent_value\n@@ -79,6 +86,10 @@ def run_test(self):\n         # and the second chain should work just fine\n         self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n \n+        # But now that we're at the additional carve-out limit, the third base output being spent will be rejected\n+        # For both ancestor's descendant limits\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [2], chain[0][1], fee, 1)\n+\n         # Make sure we can RBF the chain which used our carve-out rule\n         second_tx_outputs = {self.nodes[0].getrawtransaction(replacable_txid, True)[\"vout\"][0]['scriptPubKey']['addresses'][0]: replacable_orig_value - (Decimal(1) / Decimal(100))}\n         second_tx = self.nodes[0].createrawtransaction([{'txid': chain[0][0], 'vout': 1}], second_tx_outputs)"
      }
    ]
  },
  {
    "sha": "84ac4a1122e444094125f515d064428586fe9446",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGFjNGExMTIyZTQ0NDA5NDEyNWY1MTVkMDY0NDI4NTg2ZmU5NDQ2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-04-21T14:43:11Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-04-21T14:43:11Z"
      },
      "message": "Expand CPFP carve-out rule to 100 small spends rather than 1",
      "tree": {
        "sha": "69da72da66e5df8af48c2e84970cc238fa248174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69da72da66e5df8af48c2e84970cc238fa248174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84ac4a1122e444094125f515d064428586fe9446",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ac4a1122e444094125f515d064428586fe9446",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84ac4a1122e444094125f515d064428586fe9446",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ac4a1122e444094125f515d064428586fe9446/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5db55a6a00918ed74c9fd14a875635e61879510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5db55a6a00918ed74c9fd14a875635e61879510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5db55a6a00918ed74c9fd14a875635e61879510"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 38,
      "deletions": 21
    },
    "files": [
      {
        "sha": "04d45a8aa2f4973ecce177fdfa3265b65ab48b73",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ac4a1122e444094125f515d064428586fe9446/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ac4a1122e444094125f515d064428586fe9446/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=84ac4a1122e444094125f515d064428586fe9446",
        "patch": "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n+        }\n+\n+        setAncestors.clear();\n+        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n+        std::string dummy_err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + EXTRA_DESCENDANT_TX_COUNT_LIMIT, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT*EXTRA_DESCENDANT_TX_COUNT_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }"
      },
      {
        "sha": "31918ca28dca56b7e07e9128d5507b4d71c71ea5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ac4a1122e444094125f515d064428586fe9446/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ac4a1122e444094125f515d064428586fe9446/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=84ac4a1122e444094125f515d064428586fe9446",
        "patch": "@@ -66,6 +66,11 @@ static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n  * configurable as it doesn't materially change DoS parameters.\n  */\n static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\n+/**\n+ * Each package is allowed this many EXTRA_DESCENDANT_TX_SIZE_LIMIT sized\n+ * or less additional transactions.\n+ */\n+static const unsigned int EXTRA_DESCENDANT_TX_COUNT_LIMIT = 100;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum kilobytes for transactions to store for processing during reorg */"
      },
      {
        "sha": "dcebd6c4eee01caec6ed7bf1d4a530a49b2290d5",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ac4a1122e444094125f515d064428586fe9446/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ac4a1122e444094125f515d064428586fe9446/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=84ac4a1122e444094125f515d064428586fe9446",
        "patch": "@@ -53,8 +53,10 @@ def run_test(self):\n         fee = Decimal(\"0.0002\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n-        # First tx has 3 outputs\n-        (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 3)\n+        # First tx has EXTRA_DESCENDANT_TX_COUNT_LIMIT+2 outputs to allow for one chain,\n+        # EXTRA_DESCENDANT_TX_COUNT_LIMIT legal carve-out spends, and one rejected spend\n+        EXTRA_DESCENDANT_TX_COUNT_LIMIT = 100\n+        (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, EXTRA_DESCENDANT_TX_COUNT_LIMIT+2)\n         vout = 0\n         value = sent_value\n         chain.append([txid, value])\n@@ -81,23 +83,27 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n+\n         # But not if it chains directly off the first transaction\n-        (replacable_txid, replacable_orig_value) = self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n-        # and the second chain should work just fine\n-        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n+        (replaceable_txid, replaceable_orig_value) = self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        # Now that we're at the limit where only EXTRA_DESCENDANT_TX_COUNT_LIMIT-1 additional carve-outs are possible\n+        # let's make sure all but the very last output(+1) is spendable\n+        for i in range(EXTRA_DESCENDANT_TX_COUNT_LIMIT-1):\n+            self.chain_transaction(self.nodes[0], [chain[0][0]], [i+2], chain[0][1], fee, 1)\n \n-        # But now that we're at the additional carve-out limit, the third base output being spent will be rejected\n-        # For both ancestor's descendant limits\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [2], chain[0][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [EXTRA_DESCENDANT_TX_COUNT_LIMIT+1], chain[0][1], fee, 1)\n+\n+        # The second chain should work just fine\n+        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n \n-        # Make sure we can RBF the chain which used our carve-out rule\n-        second_tx_outputs = {self.nodes[0].getrawtransaction(replacable_txid, True)[\"vout\"][0]['scriptPubKey']['addresses'][0]: replacable_orig_value - (Decimal(1) / Decimal(100))}\n+        # Make sure we can RBF a chain which used our carve-out rule\n+        second_tx_outputs = {self.nodes[0].getrawtransaction(replaceable_txid, True)[\"vout\"][0]['scriptPubKey']['addresses'][0]: replaceable_orig_value - (Decimal(1) / Decimal(100))}\n         second_tx = self.nodes[0].createrawtransaction([{'txid': chain[0][0], 'vout': 1}], second_tx_outputs)\n         signed_second_tx = self.nodes[0].signrawtransactionwithwallet(second_tx)\n         self.nodes[0].sendrawtransaction(signed_second_tx['hex'])\n \n-        # Finally, check that we added two transactions\n-        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 3)\n+        # Finally, check that we added EXTRA_DESCENDANT_TX_COUNT_LIMIT+1 transactions\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1 + EXTRA_DESCENDANT_TX_COUNT_LIMIT + 1)\n \n if __name__ == '__main__':\n     MempoolPackagesTest().main()"
      }
    ]
  }
]