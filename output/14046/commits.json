[
  {
    "sha": "d67c0765d605be535f590cb7b95b1ef279a4fa73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjdjMDc2NWQ2MDViZTUzNWY1OTBjYjdiOTViMWVmMjc5YTRmYTcz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-06T14:22:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T09:37:48Z"
      },
      "message": "Use unique pointers for CNetMessage handling",
      "tree": {
        "sha": "cbc1a6b423666b03ecc1eeab83c107444d1eaa1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbc1a6b423666b03ecc1eeab83c107444d1eaa1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67c0765d605be535f590cb7b95b1ef279a4fa73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzidWwACgkQHrd2uwPH\nki34eg/8C2ZR+w8uy/l1Ibt8+hZ/bed5/5VRbQz+w9LHtZEVSbSKPaYJO7Ca0ZhI\nrmDeZDf3BuDYrWIV8BB94rzLgLrwnDdFhjKi7ct2V1h6Y631kSh6WLQAAkTxMfEJ\nQ2INe5XAR91EG1rGZgSil/iF7agMSKvLbfRfG4rIBLQoBPU9ENsqZHpVrVd2z6Tj\n6nDydVx1YoyeQ7s9E6Oz6uZFFPy9X59/Tm+kCRV1Yz/nYV1ACY7dr6N10BeU5xc2\nt1/+uYh4J/ZWBVF4iRSjdN/cY2BRM5sbZKycQMi3L7pkJ2fjjSdo3dVr1chYlFy2\ntNSp8fUQfbSd2ZzSHvVhkxo6vf4V58EcPfevE3hEhErgowz9dZLg6ITApZKN2cJ6\n2+xo32OmYR5uqrM8oeHuOAOc1+cfhuFPUDup1vx9wseXvu6adMeSfDg2w/Q4+LGN\n7t/OGqX05bUghIwMCheIMWq70fzFlZbztjOrT604/mgN1GDshhV+HcihHXXml13k\nJ1cHcG4o734+eQwG+zskXbf/B7di0TW7R39EMJ1rUDGo54rIdlp2orNu9XhzEkt/\nPpxH/AWNX5PtAbwYEhSHH7q9B2UM7EsZg4SrvSuKgr6aE5ffkAfrxOC/FG3XKXoy\nd8W8LFx/5HHBqrHNGqG4Evl5Hdvb/scHenLy/mByZ1hb4MNJH88=\n=Ncho\n-----END PGP SIGNATURE-----",
        "payload": "tree cbc1a6b423666b03ecc1eeab83c107444d1eaa1d\nparent 72634244580dc2e3c630ee27e47587080d064b68\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533565340 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558345068 +0200\n\nUse unique pointers for CNetMessage handling\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67c0765d605be535f590cb7b95b1ef279a4fa73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d67c0765d605be535f590cb7b95b1ef279a4fa73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67c0765d605be535f590cb7b95b1ef279a4fa73/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72634244580dc2e3c630ee27e47587080d064b68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72634244580dc2e3c630ee27e47587080d064b68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72634244580dc2e3c630ee27e47587080d064b68"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "bb1ccca87c3dd1456e58991b99eac03ff05042d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d67c0765d605be535f590cb7b95b1ef279a4fa73",
        "patch": "@@ -562,40 +562,40 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n-        if (vRecvMsg.empty() ||\n-            vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        if (vRecvMsg.empty() || vRecvMsg.back()->complete()) {\n+            vRecvMsg.emplace_back(MakeUnique<CNetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        }\n \n-        CNetMessage& msg = vRecvMsg.back();\n+        CNetMessageRef& msg = vRecvMsg.back();\n \n         // absorb network data\n         int handled;\n-        if (!msg.in_data)\n-            handled = msg.readHeader(pch, nBytes);\n+        if (!msg->in_data)\n+            handled = msg->readHeader(pch, nBytes);\n         else\n-            handled = msg.readData(pch, nBytes);\n+            handled = msg->readData(pch, nBytes);\n \n         if (handled < 0)\n             return false;\n \n-        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+        if (msg->in_data && msg->hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n \n         pch += handled;\n         nBytes -= handled;\n \n-        if (msg.complete()) {\n+        if (msg->complete()) {\n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.hdr.pchCommand);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->hdr.pchCommand);\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg.hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+            i->second += msg->hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n-            msg.nTime = nTimeMicros;\n+            msg->nTime = nTimeMicros;\n             complete = true;\n         }\n     }\n@@ -1313,9 +1313,9 @@ void CConnman::SocketHandler()\n                     size_t nSizeAdded = 0;\n                     auto it(pnode->vRecvMsg.begin());\n                     for (; it != pnode->vRecvMsg.end(); ++it) {\n-                        if (!it->complete())\n+                        if (!it->get()->complete())\n                             break;\n-                        nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                        nSizeAdded += it->get()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n                     }\n                     {\n                         LOCK(pnode->cs_vProcessMsg);"
      },
      {
        "sha": "8ed3d9d92d7e51f31a649ebae5894d9c6681d77d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d67c0765d605be535f590cb7b95b1ef279a4fa73",
        "patch": "@@ -614,6 +614,7 @@ class CNetMessage {\n     int readData(const char *pch, unsigned int nBytes);\n };\n \n+typedef std::unique_ptr<CNetMessage> CNetMessageRef;\n \n /** Information about a peer */\n class CNode\n@@ -632,7 +633,7 @@ class CNode\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n+    std::list<CNetMessageRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n     CCriticalSection cs_sendProcessing;\n@@ -753,7 +754,7 @@ class CNode\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n-    std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+    std::list<CNetMessageRef> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);"
      },
      {
        "sha": "0483c745cad6fbd79561071106d12d35157dea04",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d67c0765d605be535f590cb7b95b1ef279a4fa73/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d67c0765d605be535f590cb7b95b1ef279a4fa73",
        "patch": "@@ -3228,29 +3228,29 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (pfrom->fPauseSend)\n         return false;\n \n-    std::list<CNetMessage> msgs;\n+    std::list<CNetMessageRef> msgs;\n     {\n         LOCK(pfrom->cs_vProcessMsg);\n         if (pfrom->vProcessMsg.empty())\n             return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n-        pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n+        pfrom->nProcessQueueSize -= msgs.front()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n         pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n-    CNetMessage& msg(msgs.front());\n+    CNetMessageRef& msg(msgs.front());\n \n-    msg.SetVersion(pfrom->GetRecvVersion());\n+    msg->SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n-    if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n+    if (memcmp(msg->hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->hdr.GetCommand()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n \n     // Read header\n-    CMessageHeader& hdr = msg.hdr;\n+    CMessageHeader& hdr = msg->hdr;\n     if (!hdr.IsValid(chainparams.MessageStart()))\n     {\n         LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n@@ -3262,8 +3262,8 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     unsigned int nMessageSize = hdr.nMessageSize;\n \n     // Checksum\n-    CDataStream& vRecv = msg.vRecv;\n-    const uint256& hash = msg.GetMessageHash();\n+    CDataStream& vRecv = msg->vRecv;\n+    const uint256& hash = msg->GetMessageHash();\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n     {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n@@ -3277,7 +3277,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg->nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      }
    ]
  },
  {
    "sha": "6efdd0212303b4d5d37a1bb4e052786fb65789ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWZkZDAyMTIzMDNiNGQ1ZDM3YTFiYjRlMDUyNzg2ZmI2NTc4OWVl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-06T19:37:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T09:37:53Z"
      },
      "message": "Split off format specific details from CNetMessage",
      "tree": {
        "sha": "d65c972d0547bcb3278301691532cfcd4d298198",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d65c972d0547bcb3278301691532cfcd4d298198"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6efdd0212303b4d5d37a1bb4e052786fb65789ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzidXEACgkQHrd2uwPH\nki32tg/4kR83DLrzX2Rs1R+8NDZhPvHlqZieopTVn+0ZyAMOkavjOgru+C8P3dBb\nUY7g9MIR2UOhEbiIkE+bd4+EU+hVE6OJNWR5sis3DXhFcHNyCGcZkNtx/SFeEG6d\n0U/NsWIfEqEypIjE+yHEv5Dyu6NJGruD1tfrhx1cSx7WiFiwHrtvoj014Gjr/yiK\nFsaTFVadmSU8ksg9/lkijMlSs3dOfkbQ2wAo6FmtOajQIo9nWm0PwHOVFYB59eVR\nFdh4UGUpp8k1DcfleX8AtwTBL5fvNs7NVvJJ7tT+b541AnlTYPiW8rZsWEVeJ0ts\nE3dlvwqrO0kx51SP/wa0dkTSvUF9GqJgSDHtN6VjPNR1tdjpGQ0Y1aNzgq5Xb6Ea\nmOFyqeCOsDpHB7IVFV9/erHcgyWxzkBLhv5MdpPF4/xtY+p4UjBIp1HiqugJkg43\n36KUfr8puY6WtV2L8S3Ll2MUqjphgTZTykuk4B9weAlanj5IZ+EYOcWmLbeNrD8U\nkyZUPVaQzTYvhahOcLfGVtJBHESoJosADLfCYDbuyOJXpelFm/iKu0wTC986Bxhs\nKglvzh00kVJFg/7ToENfznAnTVpu9zVzI5g//DASenjT9BY5vrE62w2FbE3R7F7i\nFY4y9Z99VJdDhMHHvHh31wz74RwhOLEd7LRaA5exCfwbnP+oEA==\n=CWdC\n-----END PGP SIGNATURE-----",
        "payload": "tree d65c972d0547bcb3278301691532cfcd4d298198\nparent d67c0765d605be535f590cb7b95b1ef279a4fa73\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533584255 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558345073 +0200\n\nSplit off format specific details from CNetMessage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efdd0212303b4d5d37a1bb4e052786fb65789ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6efdd0212303b4d5d37a1bb4e052786fb65789ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efdd0212303b4d5d37a1bb4e052786fb65789ee/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67c0765d605be535f590cb7b95b1ef279a4fa73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67c0765d605be535f590cb7b95b1ef279a4fa73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67c0765d605be535f590cb7b95b1ef279a4fa73"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 121,
      "deletions": 50
    },
    "files": [
      {
        "sha": "4b4df3535e4d041352a407342c5f7037a03ca880",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 18,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6efdd0212303b4d5d37a1bb4e052786fb65789ee",
        "patch": "@@ -562,38 +562,34 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n-        if (vRecvMsg.empty() || vRecvMsg.back()->complete()) {\n-            vRecvMsg.emplace_back(MakeUnique<CNetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        if (vRecvMsg.empty() || vRecvMsg.back()->Complete()) {\n+            vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n         }\n \n-        CNetMessageRef& msg = vRecvMsg.back();\n+        NetMessageBaseRef& msg = vRecvMsg.back();\n \n         // absorb network data\n-        int handled;\n-        if (!msg->in_data)\n-            handled = msg->readHeader(pch, nBytes);\n-        else\n-            handled = msg->readData(pch, nBytes);\n+        int handled = msg->Read(pch, nBytes);\n \n         if (handled < 0)\n             return false;\n \n-        if (msg->in_data && msg->hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+        if (msg->GetMessageSize() > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n \n         pch += handled;\n         nBytes -= handled;\n \n-        if (msg->complete()) {\n+        if (msg->Complete()) {\n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->hdr.pchCommand);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->GetCommandName());\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg->hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+            i->second += msg->GetMessageSizeWithHeader();\n \n             msg->nTime = nTimeMicros;\n             complete = true;\n@@ -630,7 +626,12 @@ int CNode::GetSendVersion() const\n }\n \n \n-int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n+int NetMessage::Read(const char* pch, unsigned int nBytes)\n+{\n+    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n+}\n+\n+int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer\n     unsigned int nRemaining = 24 - nHdrPos;\n@@ -661,7 +662,7 @@ int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n     return nCopy;\n }\n \n-int CNetMessage::readData(const char *pch, unsigned int nBytes)\n+int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n {\n     unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n     unsigned int nCopy = std::min(nRemaining, nBytes);\n@@ -678,14 +679,37 @@ int CNetMessage::readData(const char *pch, unsigned int nBytes)\n     return nCopy;\n }\n \n-const uint256& CNetMessage::GetMessageHash() const\n+const uint256& NetMessage::GetMessageHash() const\n {\n-    assert(complete());\n+    assert(Complete());\n     if (data_hash.IsNull())\n         hasher.Finalize(data_hash.begin());\n     return data_hash;\n }\n \n+bool NetMessage::VerifyMessageStart() const\n+{\n+    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n+}\n+\n+bool NetMessage::VerifyHeader() const\n+{\n+    return hdr.IsValid(Params().MessageStart());\n+}\n+\n+bool NetMessage::VerifyChecksum(std::string& error) const\n+{\n+    const uint256& hash = GetMessageHash();\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n+        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n+            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n+            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n+        return false;\n+    }\n+    return true;\n+}\n+\n+\n size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();\n@@ -1313,9 +1337,9 @@ void CConnman::SocketHandler()\n                     size_t nSizeAdded = 0;\n                     auto it(pnode->vRecvMsg.begin());\n                     for (; it != pnode->vRecvMsg.end(); ++it) {\n-                        if (!it->get()->complete())\n+                        if (!it->get()->Complete())\n                             break;\n-                        nSizeAdded += it->get()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                        nSizeAdded += it->get()->GetMessageSizeWithHeader();\n                     }\n                     {\n                         LOCK(pnode->cs_vProcessMsg);"
      },
      {
        "sha": "bd87d74dd4cac0ffe7e7cc15e321d0d22a2c84c8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 65,
        "deletions": 14,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6efdd0212303b4d5d37a1bb4e052786fb65789ee",
        "patch": "@@ -569,9 +569,40 @@ class CNodeStats\n };\n \n \n+// base class for format agnostic network messages\n+class NetMessageBase\n+{\n+public:\n+    CDataStream vRecv; // received message data\n+    int64_t nTime;     // time (in microseconds) of message receipt.\n+\n+    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n+    {\n+        nTime = 0;\n+    }\n+    virtual ~NetMessageBase() {}\n \n+    virtual bool Complete() const = 0;\n+    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n+    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n \n-class CNetMessage {\n+    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n+\n+    virtual void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+\n+    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n+\n+    virtual bool VerifyMessageStart() const = 0;\n+    virtual bool VerifyHeader() const = 0;\n+    virtual bool VerifyChecksum(std::string& error) const = 0;\n+};\n+\n+//basic network message for the currently used unencrypted p2p communication\n+class NetMessage : public NetMessageBase\n+{\n private:\n     mutable CHash256 hasher;\n     mutable uint256 data_hash;\n@@ -582,39 +613,59 @@ class CNetMessage {\n     CMessageHeader hdr;             // complete header\n     unsigned int nHdrPos;\n \n-    CDataStream vRecv;              // received message data\n     unsigned int nDataPos;\n \n-    int64_t nTime;                  // time (in microseconds) of message receipt.\n-\n-    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n+    {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;\n         nDataPos = 0;\n-        nTime = 0;\n     }\n \n-    bool complete() const\n+    bool Complete() const override\n     {\n         if (!in_data)\n             return false;\n         return (hdr.nMessageSize == nDataPos);\n     }\n \n+    uint32_t GetMessageSize() const override\n+    {\n+        if (!in_data) {\n+            return 0;\n+        }\n+        return hdr.nMessageSize;\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return hdr.pchCommand;\n+    }\n+\n     const uint256& GetMessageHash() const;\n \n-    void SetVersion(int nVersionIn)\n+    void SetVersion(int nVersionIn) override\n     {\n         hdrbuf.SetVersion(nVersionIn);\n-        vRecv.SetVersion(nVersionIn);\n+        NetMessageBase::SetVersion(nVersionIn);\n     }\n \n-    int readHeader(const char *pch, unsigned int nBytes);\n-    int readData(const char *pch, unsigned int nBytes);\n+    int Read(const char* pch, unsigned int nBytes) override;\n+    int ReadHeader(const char *pch, unsigned int nBytes);\n+    int ReadData(const char *pch, unsigned int nBytes);\n+\n+    bool VerifyMessageStart() const override;\n+    bool VerifyHeader() const override;\n+    bool VerifyChecksum(std::string& error) const override;\n };\n \n-typedef std::unique_ptr<CNetMessage> CNetMessageRef;\n+using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n \n /** Information about a peer */\n class CNode\n@@ -633,7 +684,7 @@ class CNode\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessageRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n+    std::list<NetMessageBaseRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n     CCriticalSection cs_sendProcessing;\n@@ -754,7 +805,7 @@ class CNode\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n-    std::list<CNetMessageRef> vRecvMsg;  // Used only by SocketHandler thread\n+    std::list<NetMessageBaseRef> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);"
      },
      {
        "sha": "c0b604a78e2b4af77f1bc55e49617cfb593f470c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6efdd0212303b4d5d37a1bb4e052786fb65789ee/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6efdd0212303b4d5d37a1bb4e052786fb65789ee",
        "patch": "@@ -3228,48 +3228,44 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (pfrom->fPauseSend)\n         return false;\n \n-    std::list<CNetMessageRef> msgs;\n+    std::list<NetMessageBaseRef> msgs;\n     {\n         LOCK(pfrom->cs_vProcessMsg);\n         if (pfrom->vProcessMsg.empty())\n             return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n-        pfrom->nProcessQueueSize -= msgs.front()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+        pfrom->nProcessQueueSize -= msgs.front()->GetMessageSizeWithHeader();\n         pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n-    CNetMessageRef& msg(msgs.front());\n+    NetMessageBaseRef& msg = msgs.front();\n+    assert(msg != nullptr);\n \n     msg->SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n-    if (memcmp(msg->hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->hdr.GetCommand()), pfrom->GetId());\n+    if (!msg->VerifyMessageStart()) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->GetCommandName()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n \n     // Read header\n-    CMessageHeader& hdr = msg->hdr;\n-    if (!hdr.IsValid(chainparams.MessageStart()))\n-    {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n+    if (!msg->VerifyHeader()) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(msg->GetCommandName()), pfrom->GetId());\n         return fMoreWork;\n     }\n-    std::string strCommand = hdr.GetCommand();\n+    std::string strCommand = msg->GetCommandName();\n \n     // Message size\n-    unsigned int nMessageSize = hdr.nMessageSize;\n+    unsigned int nMessageSize = msg->GetMessageSize();\n \n     // Checksum\n     CDataStream& vRecv = msg->vRecv;\n-    const uint256& hash = msg->GetMessageHash();\n-    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n-    {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n-           SanitizeString(strCommand), nMessageSize,\n-           HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n-           HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n+    std::string possibleError;\n+    if (!msg->VerifyChecksum(possibleError)) {\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): %s\\n\", __func__,\n+            SanitizeString(strCommand), nMessageSize, possibleError);\n         return fMoreWork;\n     }\n "
      }
    ]
  },
  {
    "sha": "76dacb63b04b95c72ccee6122378fdaa1054e269",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmRhY2I2M2IwNGI5NWM3MmNjZWU2MTIyMzc4ZmRhYTEwNTRlMjY5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-09T21:04:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T09:51:21Z"
      },
      "message": "Move NetMessage (NetMessageBase) to net_message.h/cpp",
      "tree": {
        "sha": "297e8882cb7bc980b876c707d3044d54239b39e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297e8882cb7bc980b876c707d3044d54239b39e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76dacb63b04b95c72ccee6122378fdaa1054e269",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzieJoACgkQHrd2uwPH\nki0ljA//QCxJdUTTET/GbQF9bEcNq2X8ESYRhVlaJ13+/c4KDVpfn137OuxbJTMu\naq1DYXtYXml8tATaVKvUD1MkG+AqNhY0vICGOhmY2U9vqrYZFEqRO4iawckB9oDq\nLD+MGce/8FGGJtDRDsadRPoA8Yw8w6bsP6efxECJAupo2XFt8iWbewUCJp6ywfI6\noKHvB1UnLILICZMuffzTYRVd2/7yW1uI2AcqbXRZtdhp1B750+Wxrgl+jvhoEnY4\nkYdReEvJd4haidAA3VjjexmH9RLRZXLq8ok3BN6b7MQTB5wtzom8hF0r7dybjXuC\niiLs7bUU4jpt1gh3D1TL3G4DGO8cujAIwVi5Z8vA8f7l7IUO4WKLyVOJPs1P/GcV\nulbEUxC+LR5M5k+c4YhXmdTXwEkfwBvs+YQ9fHKyp/Zjom5wOuPHETOfuwp45eob\ndwv5BG8u6vMdVuOOEGABNUjEnH3TVn+d8R2B+vxVfyEKv5WDEJy44UdmV+S/dR5J\nfhUclaFaFexR2fxTqBAMzW6qezx3TqC3RznqoIDO0e4V0QUmQBxKIRWzCTVGAQxC\nyBsXLh4ey6i4MPGVKDrZQHcwjLahT3QpX/28cRpeJTEDwMvM5ycmy8bly4VeCWAu\nt4hqfV+3qh4fcukVJvo1HascDYtAxXVIJHGTdHA5jJCffD23N8g=\n=CeOp\n-----END PGP SIGNATURE-----",
        "payload": "tree 297e8882cb7bc980b876c707d3044d54239b39e4\nparent 6efdd0212303b4d5d37a1bb4e052786fb65789ee\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533848642 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558345881 +0200\n\nMove NetMessage (NetMessageBase) to net_message.h/cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dacb63b04b95c72ccee6122378fdaa1054e269",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76dacb63b04b95c72ccee6122378fdaa1054e269",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dacb63b04b95c72ccee6122378fdaa1054e269/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6efdd0212303b4d5d37a1bb4e052786fb65789ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efdd0212303b4d5d37a1bb4e052786fb65789ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6efdd0212303b4d5d37a1bb4e052786fb65789ee"
      }
    ],
    "stats": {
      "total": 399,
      "additions": 213,
      "deletions": 186
    },
    "files": [
      {
        "sha": "8b2b6e8e6c0a1520f335dc036cbb1f75e3933cfc",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dacb63b04b95c72ccee6122378fdaa1054e269/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dacb63b04b95c72ccee6122378fdaa1054e269/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=76dacb63b04b95c72ccee6122378fdaa1054e269",
        "patch": "@@ -151,6 +151,7 @@ BITCOIN_CORE_H = \\\n   merkleblock.h \\\n   miner.h \\\n   net.h \\\n+  net_message.h \\\n   net_processing.h \\\n   netaddress.h \\\n   netbase.h \\\n@@ -271,6 +272,7 @@ libbitcoin_server_a_SOURCES = \\\n   dbwrapper.cpp \\\n   miner.cpp \\\n   net.cpp \\\n+  net_message.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n   node/psbt.cpp \\"
      },
      {
        "sha": "dee90ce210f3049c655c6b470110de0ae2c074e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 85,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=76dacb63b04b95c72ccee6122378fdaa1054e269",
        "patch": "@@ -625,91 +625,6 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n-\n-int NetMessage::Read(const char* pch, unsigned int nBytes)\n-{\n-    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n-}\n-\n-int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n-{\n-    // copy data to temporary parsing buffer\n-    unsigned int nRemaining = 24 - nHdrPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n-\n-    memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n-    nHdrPos += nCopy;\n-\n-    // if header incomplete, exit\n-    if (nHdrPos < 24)\n-        return nCopy;\n-\n-    // deserialize to CMessageHeader\n-    try {\n-        hdrbuf >> hdr;\n-    }\n-    catch (const std::exception&) {\n-        return -1;\n-    }\n-\n-    // reject messages larger than MAX_SIZE\n-    if (hdr.nMessageSize > MAX_SIZE)\n-        return -1;\n-\n-    // switch state to reading message data\n-    in_data = true;\n-\n-    return nCopy;\n-}\n-\n-int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n-{\n-    unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n-\n-    if (vRecv.size() < nDataPos + nCopy) {\n-        // Allocate up to 256 KiB ahead, but never more than the total message size.\n-        vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n-    }\n-\n-    hasher.Write((const unsigned char*)pch, nCopy);\n-    memcpy(&vRecv[nDataPos], pch, nCopy);\n-    nDataPos += nCopy;\n-\n-    return nCopy;\n-}\n-\n-const uint256& NetMessage::GetMessageHash() const\n-{\n-    assert(Complete());\n-    if (data_hash.IsNull())\n-        hasher.Finalize(data_hash.begin());\n-    return data_hash;\n-}\n-\n-bool NetMessage::VerifyMessageStart() const\n-{\n-    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n-}\n-\n-bool NetMessage::VerifyHeader() const\n-{\n-    return hdr.IsValid(Params().MessageStart());\n-}\n-\n-bool NetMessage::VerifyChecksum(std::string& error) const\n-{\n-    const uint256& hash = GetMessageHash();\n-    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n-        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n-            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n-            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n-        return false;\n-    }\n-    return true;\n-}\n-\n-\n size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();"
      },
      {
        "sha": "d0b0be34d764345e5d7ec9f13f9ed0e43a2af217",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 101,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=76dacb63b04b95c72ccee6122378fdaa1054e269",
        "patch": "@@ -14,6 +14,7 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n+#include <net_message.h>\n #include <netaddress.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n@@ -51,8 +52,6 @@ static const unsigned int MAX_INV_SZ = 50000;\n static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n-/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of the user agent string in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** Maximum number of automatic outgoing nodes */\n@@ -568,105 +567,6 @@ class CNodeStats\n     CAddress addrBind;\n };\n \n-\n-// base class for format agnostic network messages\n-class NetMessageBase\n-{\n-public:\n-    CDataStream vRecv; // received message data\n-    int64_t nTime;     // time (in microseconds) of message receipt.\n-\n-    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n-    {\n-        nTime = 0;\n-    }\n-    virtual ~NetMessageBase() {}\n-\n-    virtual bool Complete() const = 0;\n-    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n-    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n-\n-    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n-\n-    virtual void SetVersion(int nVersionIn)\n-    {\n-        vRecv.SetVersion(nVersionIn);\n-    }\n-\n-    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n-\n-    virtual bool VerifyMessageStart() const = 0;\n-    virtual bool VerifyHeader() const = 0;\n-    virtual bool VerifyChecksum(std::string& error) const = 0;\n-};\n-\n-//basic network message for the currently used unencrypted p2p communication\n-class NetMessage : public NetMessageBase\n-{\n-private:\n-    mutable CHash256 hasher;\n-    mutable uint256 data_hash;\n-public:\n-    bool in_data;                   // parsing header (false) or data (true)\n-\n-    CDataStream hdrbuf;             // partially received header\n-    CMessageHeader hdr;             // complete header\n-    unsigned int nHdrPos;\n-\n-    unsigned int nDataPos;\n-\n-    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n-    {\n-        hdrbuf.resize(24);\n-        in_data = false;\n-        nHdrPos = 0;\n-        nDataPos = 0;\n-    }\n-\n-    bool Complete() const override\n-    {\n-        if (!in_data)\n-            return false;\n-        return (hdr.nMessageSize == nDataPos);\n-    }\n-\n-    uint32_t GetMessageSize() const override\n-    {\n-        if (!in_data) {\n-            return 0;\n-        }\n-        return hdr.nMessageSize;\n-    }\n-\n-    uint32_t GetMessageSizeWithHeader() const override\n-    {\n-        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n-    }\n-\n-    std::string GetCommandName() const override\n-    {\n-        return hdr.pchCommand;\n-    }\n-\n-    const uint256& GetMessageHash() const;\n-\n-    void SetVersion(int nVersionIn) override\n-    {\n-        hdrbuf.SetVersion(nVersionIn);\n-        NetMessageBase::SetVersion(nVersionIn);\n-    }\n-\n-    int Read(const char* pch, unsigned int nBytes) override;\n-    int ReadHeader(const char *pch, unsigned int nBytes);\n-    int ReadData(const char *pch, unsigned int nBytes);\n-\n-    bool VerifyMessageStart() const override;\n-    bool VerifyHeader() const override;\n-    bool VerifyChecksum(std::string& error) const override;\n-};\n-\n-using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n-\n /** Information about a peer */\n class CNode\n {"
      },
      {
        "sha": "eb7304eca578c308a6c0e9500e23a631460488de",
        "filename": "src/net_message.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_message.cpp?ref=76dacb63b04b95c72ccee6122378fdaa1054e269",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <net_message.h>\n+\n+#include <chainparams.h>\n+#include <tinyformat.h>\n+#include <util/strencodings.h>\n+\n+int NetMessage::Read(const char* pch, unsigned int nBytes)\n+{\n+    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n+}\n+\n+int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n+{\n+    // copy data to temporary parsing buffer\n+    unsigned int nRemaining = 24 - nHdrPos;\n+    unsigned int nCopy = std::min(nRemaining, nBytes);\n+\n+    memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n+    nHdrPos += nCopy;\n+\n+    // if header incomplete, exit\n+    if (nHdrPos < 24)\n+        return nCopy;\n+\n+    // deserialize to CMessageHeader\n+    try {\n+        hdrbuf >> hdr;\n+    }\n+    catch (const std::exception&) {\n+        return -1;\n+    }\n+\n+    // reject messages larger than MAX_SIZE\n+    if (hdr.nMessageSize > MAX_SIZE)\n+        return -1;\n+\n+    // switch state to reading message data\n+    in_data = true;\n+\n+    return nCopy;\n+}\n+\n+int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n+{\n+    unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n+    unsigned int nCopy = std::min(nRemaining, nBytes);\n+\n+    if (vRecv.size() < nDataPos + nCopy) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size.\n+        vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n+    }\n+\n+    hasher.Write((const unsigned char*)pch, nCopy);\n+    memcpy(&vRecv[nDataPos], pch, nCopy);\n+    nDataPos += nCopy;\n+\n+    return nCopy;\n+}\n+\n+const uint256& NetMessage::GetMessageHash() const\n+{\n+    assert(Complete());\n+    if (data_hash.IsNull())\n+        hasher.Finalize(data_hash.begin());\n+    return data_hash;\n+}\n+\n+bool NetMessage::VerifyMessageStart() const\n+{\n+    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n+}\n+\n+bool NetMessage::VerifyHeader() const\n+{\n+    return hdr.IsValid(Params().MessageStart());\n+}\n+\n+bool NetMessage::VerifyChecksum(std::string& error) const\n+{\n+    const uint256& hash = GetMessageHash();\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n+        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n+            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n+            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "a4bd92a32960fbab837a27c9e79c5ed9b2a664f8",
        "filename": "src/net_message.h",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net_message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dacb63b04b95c72ccee6122378fdaa1054e269/src/net_message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_message.h?ref=76dacb63b04b95c72ccee6122378fdaa1054e269",
        "patch": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NET_MESSAGE_H\n+#define BITCOIN_NET_MESSAGE_H\n+\n+#include <hash.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+\n+// base class for format agnostic network messages\n+class NetMessageBase\n+{\n+public:\n+    CDataStream vRecv; // received message data\n+    int64_t nTime;     // time (in microseconds) of message receipt.\n+\n+    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n+    {\n+        nTime = 0;\n+    }\n+    virtual ~NetMessageBase() {}\n+\n+    virtual bool Complete() const = 0;\n+    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n+    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n+\n+    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n+\n+    virtual void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+\n+    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n+\n+    virtual bool VerifyMessageStart() const = 0;\n+    virtual bool VerifyHeader() const = 0;\n+    virtual bool VerifyChecksum(std::string& error) const = 0;\n+};\n+\n+//basic network message for the currently used unencrypted p2p communication\n+class NetMessage : public NetMessageBase\n+{\n+private:\n+    mutable CHash256 hasher;\n+    mutable uint256 data_hash;\n+public:\n+    bool in_data;                   // parsing header (false) or data (true)\n+\n+    CDataStream hdrbuf;             // partially received header\n+    CMessageHeader hdr;             // complete header\n+    unsigned int nHdrPos;\n+\n+    unsigned int nDataPos;\n+\n+    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n+    {\n+        hdrbuf.resize(24);\n+        in_data = false;\n+        nHdrPos = 0;\n+        nDataPos = 0;\n+    }\n+\n+    bool Complete() const override\n+    {\n+        if (!in_data)\n+            return false;\n+        return (hdr.nMessageSize == nDataPos);\n+    }\n+\n+    uint32_t GetMessageSize() const override\n+    {\n+        if (!in_data) {\n+            return 0;\n+        }\n+        return hdr.nMessageSize;\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return hdr.pchCommand;\n+    }\n+\n+    const uint256& GetMessageHash() const;\n+\n+    void SetVersion(int nVersionIn) override\n+    {\n+        hdrbuf.SetVersion(nVersionIn);\n+        NetMessageBase::SetVersion(nVersionIn);\n+    }\n+\n+    int Read(const char* pch, unsigned int nBytes) override;\n+    int ReadHeader(const char *pch, unsigned int nBytes);\n+    int ReadData(const char *pch, unsigned int nBytes);\n+\n+    bool VerifyMessageStart() const override;\n+    bool VerifyHeader() const override;\n+    bool VerifyChecksum(std::string& error) const override;\n+};\n+\n+using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n+\n+#endif // BITCOIN_NET_MESSAGE_H"
      }
    ]
  },
  {
    "sha": "c5816dcee369610ec8449032f339a11c426fb0dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTgxNmRjZWUzNjk2MTBlYzg0NDkwMzJmMzM5YTExYzQyNmZiMGRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T08:42:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T09:51:24Z"
      },
      "message": "Factor out RecordRecvBytesPerMsgCmd()",
      "tree": {
        "sha": "f104e4eff1442926dc6f4c6b11f67ef1fd618555",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f104e4eff1442926dc6f4c6b11f67ef1fd618555"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5816dcee369610ec8449032f339a11c426fb0dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzieJwACgkQHrd2uwPH\nki3zng/9FDr7rxlB2s5zudu35/lagtmgnaLCgXQ8ycESrI00rpv1h31k6Ftx8pgC\nXHZoGWXvr3upVI51Abh4alWg2nWKqmFeF/o1T2H9DDVHEd8pSmDWcI27quIGojKW\nQYDjsEl8sjjTAp5xD6RWe+tGfaDAe3eAAgUWSerbkxdB+S6e3NlKXMwQfdkALy3h\nBYaJB4SPYhNhvHF8LL+PGeMyX5nwRilrKVhFQtRAjLCxhRN6Io9iLe9CNsE81B4R\nImf4YWsMqllg3lC/q/yZYYj6X5n1F6raRQbVeFma4Oj7+N6OuWDBgvQVEGLam0Pd\nTe2W/durV8Ojy7ArHK2HdufTE8cb/baY1XLx4a1uiLgMqErorwpFdJlhLYAypxF6\nej2Wj7tTScGCo1KKSlO/CPTe6BjqKE1WWqLnyFQJoYy7RsHq4UmzIJHhKH4dZF7i\nB3qYvZeUDvSZhedpqlm/DF9qih5G2a21ogKChRAckd7akMyIdmfAGw1zkFqZKA9p\ntnk9006a9IxGiMGkT/rRIqjBgZMVWIub7jTm24NxI9v1ZqqYlPpwjj0cfACwdi9B\nOM7K2gU2LkTnShS7JHSplqSBUXHX02khlPob8lRh4jjQkoESj0Pp+XGmhdxDN4F0\nRMUKq6YshVMVKbqUA2it+6mX9p+/Wj8kTYOacs2bvjSUPE2zSXA=\n=9mLp\n-----END PGP SIGNATURE-----",
        "payload": "tree f104e4eff1442926dc6f4c6b11f67ef1fd618555\nparent 76dacb63b04b95c72ccee6122378fdaa1054e269\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535100140 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558345884 +0200\n\nFactor out RecordRecvBytesPerMsgCmd()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5816dcee369610ec8449032f339a11c426fb0dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5816dcee369610ec8449032f339a11c426fb0dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5816dcee369610ec8449032f339a11c426fb0dd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76dacb63b04b95c72ccee6122378fdaa1054e269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dacb63b04b95c72ccee6122378fdaa1054e269",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76dacb63b04b95c72ccee6122378fdaa1054e269"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 14,
      "deletions": 8
    },
    "files": [
      {
        "sha": "29d5c6b4af778bc53e5430f8dca2313efa539ff8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5816dcee369610ec8449032f339a11c426fb0dd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5816dcee369610ec8449032f339a11c426fb0dd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c5816dcee369610ec8449032f339a11c426fb0dd",
        "patch": "@@ -552,6 +552,17 @@ void CNode::copyStats(CNodeStats &stats)\n }\n #undef X\n \n+void CNode::RecordRecvBytesPerMsgCmd(const std::string& cmd, uint32_t bytes)\n+{\n+    //store received bytes per message command\n+    //to prevent a memory DOS, only allow valid commands\n+    mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(cmd);\n+    if (i == mapRecvBytesPerMsgCmd.end())\n+        i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n+    assert(i != mapRecvBytesPerMsgCmd.end());\n+    i->second += bytes;\n+}\n+\n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;\n@@ -583,14 +594,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         nBytes -= handled;\n \n         if (msg->Complete()) {\n-            //store received bytes per message command\n-            //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->GetCommandName());\n-            if (i == mapRecvBytesPerMsgCmd.end())\n-                i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n-            assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg->GetMessageSizeWithHeader();\n-\n+            RecordRecvBytesPerMsgCmd(msg->GetCommandName(), msg->GetMessageSizeWithHeader());\n             msg->nTime = nTimeMicros;\n             complete = true;\n         }"
      },
      {
        "sha": "48abbe0569dd783100d42874a759a408e902ab47",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5816dcee369610ec8449032f339a11c426fb0dd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5816dcee369610ec8449032f339a11c426fb0dd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c5816dcee369610ec8449032f339a11c426fb0dd",
        "patch": "@@ -713,6 +713,8 @@ class CNode\n     // Our address, as reported by the peer\n     CService addrLocal GUARDED_BY(cs_addrLocal);\n     mutable CCriticalSection cs_addrLocal;\n+\n+    void RecordRecvBytesPerMsgCmd(const std::string& cmd, uint32_t bytes) EXCLUSIVE_LOCKS_REQUIRED(cs_vRecv);\n public:\n \n     NodeId GetId() const {"
      }
    ]
  }
]