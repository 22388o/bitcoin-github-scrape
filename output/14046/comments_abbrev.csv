promag,2018-08-24T10:01:54Z,Any reason to not use `unique_ptr` instead? I don't see sharing of message ownership.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415713817,415713817,
jonasschnelli,2018-08-24T11:14:22Z,I think shared is fine here and does allow more flexible handling in future with little cost (ref counting),https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415729082,415729082,
DrahtBot,2018-08-24T12:16:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16562](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16562.html) (Refactor message transport packaging by jon",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415741584,415741584,
MarcoFalke,2018-08-24T13:27:36Z,utACK 59a7ce0f9de950b64c5e89dd29ebcd0b607b982e,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415758458,415758458,
gmaxwell,2018-08-24T16:40:06Z,"Adding an extra memory allocation for every network message isn't free. I'm concerned that we may be falling into overusing sharedptr ""just in case"", which is bad because it leaks performance in a diffuse way that doesn't show up well in profiles.  Please don't use sharedptr where unique will work.  If something new comes in in the future that needs a sharedptr then we can switch then.",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415814511,415814511,
sipa,2018-08-24T17:15:38Z,"@gmaxwell `unique_ptr` and `shared_ptr` have the same number of allocations (if `make_shared` is used, at least), though `shared_ptr` uses more memory (both for the pointer itself and for the allocated memory), and has atomics to update the refcounts (which may reduce performance).\n\nTo be clear, I agree we should avoid `shared_ptr` unless there is a good reason.",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-415823750,415823750,
jonasschnelli,2018-08-27T11:19:43Z,"@sipa, @gmaxwell:\nThe reason why I used `shared_ptr` over `unique_ptr` is the polymorphism I'd like to use for the net messages and I once read that `shared_ptr` are recommended for polymorphic inheritance.\n\nHowever, I changed this PR now to use `unique_ptr`.\n\nThanks @251Labs for the review, implemented all your suggestions.",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-416194874,416194874,
jonasschnelli,2018-08-31T19:51:37Z,Fixed commit message issue reported by @promag ,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-417772232,417772232,
etscrivner,2018-09-27T01:13:49Z,utACK c2f9c04583a3ffcae4a54d85bb49def58e79cef2,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-424921952,424921952,
etscrivner,2018-09-27T15:34:14Z,ACK c2f9c04583a3ffcae4a54d85bb49def58e79cef2,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-425138702,425138702,
jonasschnelli,2018-10-17T14:34:17Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-430653486,430653486,
promag,2018-10-19T07:14:22Z,utACK c2f9c04.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-431267791,431267791,
sipa,2018-10-19T23:43:57Z,"Is it really necessary to make `CNetMessage` a virtual class? This seems very much overkill. Only the network deserializers should change based on what protocol is used; we don't need to have that variability put a burden on every separate message.\n\nSeems like you could just create a CNetMessageSerializer class (with different instances), to which some of the current `CNetMessage` logic is mov",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-431528330,431528330,
MarcoFalke,2018-11-07T20:07:42Z,"@jonasschnelli Mind to follow up on @sipa's question? I have removed this from high priority for now, but happy to add back when you addressed the question.",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-436759974,436759974,
jonasschnelli,2019-05-20T09:53:52Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-493917759,493917759,
sipa,2019-05-20T18:56:57Z,Approach NACK. This is overkill; the message parsing/serializing logic can just move out of CNetMessage to avoid turning it into a virtual class.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-494109722,494109722,
jonasschnelli,2019-05-20T19:04:54Z,"@sipa: Thanks for the review. Currently turning this into the approach you mentioned. I think it's doable though not super convinced right now due to the state necessary in parsing/serialization (hash, MAC).\nUntil I'm finished I keep this rebased to not lose testability of other elements in the pipeline.",https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-494112431,494112431,
jonasschnelli,2019-06-13T10:01:23Z,#16202 seems to a superior solution. Will close this PR as soon as #14032 is rebased on top of #16202.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-501637062,501637062,
DrahtBot,2019-08-14T16:21:18Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-521316508,521316508,
jonasschnelli,2020-05-07T07:38:25Z,Superseded. Closing.,https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-625085988,625085988,
scravy,2018-08-24T10:00:08Z,According to https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md these should be prefixed `m_`.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212580275,212580275,src/net_message.h
jonasschnelli,2018-08-24T10:02:27Z,I kept it because it is moved code and to simplify the review.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212581034,212581034,src/net_message.h
promag,2018-08-24T10:02:48Z,This is moved code right?,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212581106,212581106,src/net_message.h
MarcoFalke,2018-08-24T17:28:14Z,"nit: In commit "" Use shared pointers for CNetMessage handling "" you could keep this a plain reference to keep the diff smaller, I think.",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212699280,212699280,src/net.cpp
MarcoFalke,2018-08-24T17:28:32Z,Same here,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212699388,212699388,src/net_processing.cpp
l2a5b1,2018-08-26T20:31:04Z,"Implement a virtual destructor to protect against undefined behavior in the event that an object of a derived `NetMessageBase` class with a destructor is destroyed through a pointer to this base class.\n \n```c++\nvirtual ~NetMessageBase() {}\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838045,212838045,src/net_message.h
l2a5b1,2018-08-26T20:31:40Z,"Make `SetVersion` a virtual member function to be sure that derived implementations are called when called via a pointer to this base class.\n```c++\nvirtual void SetVersion(int nVersionIn)\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838062,212838062,src/net_message.h
l2a5b1,2018-08-26T20:33:15Z,"The developer notes state that for new symbols it is preferred that: ""Class names, function names and method names are UpperCamelCase (PascalCase)""\n\n```c++\n     virtual bool VerifyMessageStart() const = 0;\n     virtual bool VerifyHeader() const = 0;\n     virtual bool VerifyChecksum(std::string& error) const = 0;\n```\n\nCan you check if all the new method names are UpperCamelCase?",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838103,212838103,src/net_message.h
l2a5b1,2018-08-26T20:50:54Z,"Remove the `const CMessageHeader::MessageStartChars& pchMessageStartIn` argument from the constructor's argument list?\n```c++\nNetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n```\n",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838565,212838565,src/net_message.h
l2a5b1,2018-08-26T20:55:13Z,"Use `override` to ensure that these methods are overriding virtual methods from the base class.\n\n```c++\n    bool VerifyMessageStart() const override;\n    bool VerifyHeader() const override;\n    bool VerifyChecksum(std::string& error) const override;\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838664,212838664,src/net_message.h
l2a5b1,2018-08-26T20:56:14Z,"Specify this method as `override`\n```c++\nbool complete() const override\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838690,212838690,src/net_message.h
l2a5b1,2018-08-26T20:56:37Z,"Specify this method as `override`\n```c++\nuint32_t getMessageSize() const override\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838700,212838700,src/net_message.h
l2a5b1,2018-08-26T20:57:00Z,"Specify this method as `override`\n```c++\nuint32_t getMessageSizeWithHeader() const override\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838713,212838713,src/net_message.h
l2a5b1,2018-08-26T20:57:56Z,"Specify this method as `override`\n```c++\nstd::string getCommandName() const override\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838736,212838736,src/net_message.h
l2a5b1,2018-08-26T20:58:56Z,"Specify as `override`\n```c++\nvoid SetVersion(int nVersionIn) override\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838762,212838762,src/net_message.h
l2a5b1,2018-08-26T20:59:34Z,"Specify as `override`\n```c++\nint read(const char* pch, unsigned int nBytes) override;\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838787,212838787,src/net_message.h
l2a5b1,2018-08-26T20:59:46Z,"Prefer `using` over `typedef`?\n```c++\nusing NetMessageBaseRef = std::shared_ptr<NetMessageBase>;\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838793,212838793,src/net_message.h
l2a5b1,2018-08-26T21:00:14Z,`NetMessageRef` doesn't seem to be used. Can `NetMessageRef` be deleted? ,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212838803,212838803,src/net_message.h
jonasschnelli,2018-08-27T11:34:02Z,Done,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r212945210,212945210,src/net_message.h
promag,2018-08-29T00:29:20Z,"could move to init list `, nTime(0)`.",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r213513348,213513348,src/net.h
Empact,2018-09-01T20:28:14Z,nit: could be private,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r214522463,214522463,src/net.h
Empact,2018-09-01T21:06:04Z,"Seems these other `hdr` accesses be guarded against `!in_data`, as they're relatively uninitialized data in that case, e.g.`nMessageSize` could be `-1`.",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r214523034,214523034,src/net_message.h
promag,2018-09-04T00:18:15Z,"@Empact looks like that would be a bad call, maybe `assert(in_data)` or `hdr.nMessageSize >= 0`?",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r214764425,214764425,src/net_message.h
practicalswift,2018-09-10T17:20:45Z,"```\nsrc/net_message.cpp:78:108: warning: redundant boolean literal in ternary expression result [readability-simplify-boolean-expr]\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r216404877,216404877,src/net_message.cpp
practicalswift,2018-09-10T17:21:16Z,"```\nsrc/net_message.cpp:61:18: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]\nsrc/net_message.cpp:61:18: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]\n```",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r216405058,216405058,src/net_message.cpp
jonasschnelli,2018-09-18T07:43:02Z,I basically moved this code part... I think its fine.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218327617,218327617,src/net_message.h
jonasschnelli,2018-09-18T07:47:06Z,It's moved code and the scope of this PR is not refactor.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218328681,218328681,src/net_message.cpp
jonasschnelli,2018-09-18T07:48:48Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218329111,218329111,src/net_message.cpp
jonasschnelli,2018-09-18T07:52:44Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218330036,218330036,src/net.h
ajtowns,2018-09-18T14:47:20Z,nit: missing space after `//` ?,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218463709,218463709,src/net.h
ajtowns,2018-09-18T15:38:01Z,"Could be `(*it)->Complete()` instead, but maybe what you've got is already clearer?",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r218485000,218485000,src/net.cpp
promag,2018-09-26T14:33:02Z,"nit, `int64_t nTime{0};` and remove from the constructor.",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220588444,220588444,src/net_message.h
l2a5b1,2018-09-26T20:07:07Z,"That's a nice nit @promag. Alternatively, `nTime` can be initialized with an empty initializer list `int64_t nTime {};`",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220705364,220705364,src/net_message.h
etscrivner,2018-09-27T00:23:25Z,I see the magic constant `24` here quite a bit. Would it be useful to extract this into an appropriately named constant? Perhaps `HEADER_NUM_BYTES` or equivalent?,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220762330,220762330,src/net_message.cpp
jonasschnelli,2018-09-27T09:02:25Z,Agree. Though I'd say scope of the PR is not to refactor code parts that where moved 1:1. Lets do further refactors in another PR.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220845678,220845678,src/net_message.cpp
jonasschnelli,2018-09-27T09:02:33Z,Agree. Though I'd say scope of the PR is not to refactor code parts that where moved 1:1. Lets do further refactors in another PR.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220845723,220845723,src/net_message.h
promag,2018-09-27T09:06:55Z,SGTM.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r220846998,220846998,src/net_message.h
practicalswift,2018-10-16T20:22:59Z,"Should be ""unencrypted"" :-)",https://github.com/bitcoin/bitcoin/pull/14046#discussion_r225694659,225694659,src/net_message.h
jonasschnelli,2018-10-17T14:34:13Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14046#discussion_r225956420,225956420,src/net_message.h
