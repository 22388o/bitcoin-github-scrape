[
  {
    "sha": "ec143391ef791c15c0d4520befb8863b61bfc2ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzE0MzM5MWVmNzkxYzE1YzBkNDUyMGJlZmI4ODYzYjYxYmZjMmVh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-01T14:28:16Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-03-16T16:52:04Z"
      },
      "message": "Tests: make prioritise_transaction.py more robust",
      "tree": {
        "sha": "e2cdfa6015e7e75dab2f2355fc591fe91df386c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2cdfa6015e7e75dab2f2355fc591fe91df386c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec143391ef791c15c0d4520befb8863b61bfc2ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec143391ef791c15c0d4520befb8863b61bfc2ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec143391ef791c15c0d4520befb8863b61bfc2ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec143391ef791c15c0d4520befb8863b61bfc2ea/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d0dfdbf9f26dcda6bc8a397752bdcc59ee474f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0dfdbf9f26dcda6bc8a397752bdcc59ee474f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d0dfdbf9f26dcda6bc8a397752bdcc59ee474f4"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 31,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f8d9063b4ebc0d767bd02ce360006a68b96bf891",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec143391ef791c15c0d4520befb8863b61bfc2ea/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec143391ef791c15c0d4520befb8863b61bfc2ea/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=ec143391ef791c15c0d4520befb8863b61bfc2ea",
        "patch": "@@ -9,8 +9,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import COIN\n-\n+from test_framework.mininode import COIN, MAX_BLOCK_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n \n@@ -29,14 +28,29 @@ def setup_network(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n     def run_test(self):\n-        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], 90)\n+        utxo_count = 90\n+        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n         base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n         txids = []\n \n         # Create 3 batches of transactions at 3 different fee rate levels\n+        range_size = utxo_count // 3\n         for i in xrange(3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n+            start_range = i * range_size\n+            end_range = start_range + range_size\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[start_range:end_range], (i+1)*base_fee)\n+\n+        # Make sure that the size of each group of transactions exceeds\n+        # MAX_BLOCK_SIZE -- otherwise the test needs to be revised to create\n+        # more transactions.\n+        mempool = self.nodes[0].getrawmempool(True)\n+        sizes = [0, 0, 0]\n+        for i in xrange(3):\n+            for j in txids[i]:\n+                assert(j in mempool)\n+                sizes[i] += mempool[j]['size']\n+            assert(sizes[i] > MAX_BLOCK_SIZE) # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined (lower\n@@ -47,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transasction was mined\"\n+        print \"Assert that prioritised transaction was mined\"\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -60,7 +74,7 @@ def run_test(self):\n         assert(high_fee_tx != None)\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n-        # high-fee transaction).\n+        # high-fee transaction so that it's now low fee).\n         self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n \n         # Add everything back to mempool\n@@ -70,8 +84,11 @@ def run_test(self):\n         mempool = self.nodes[0].getrawmempool()\n         assert(high_fee_tx in mempool)\n \n-        # Now verify the high feerate transaction isn't mined.\n-        self.nodes[0].generate(5)\n+        # Now verify the modified-high feerate transaction isn't mined before\n+        # the other high fee transactions. Keep mining until our mempool has\n+        # decreased by all the high fee size that we calculated above.\n+        while (self.nodes[0].getmempoolinfo()['bytes'] > sizes[0] + sizes[1]):\n+            self.nodes[0].generate(1)\n \n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been."
      },
      {
        "sha": "8d4bd52b94f9bec9e963bde10763dced1fc88528",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec143391ef791c15c0d4520befb8863b61bfc2ea/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec143391ef791c15c0d4520befb8863b61bfc2ea/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=ec143391ef791c15c0d4520befb8863b61bfc2ea",
        "patch": "@@ -448,6 +448,8 @@ def assert_is_hash_string(string, length=64):\n def satoshi_round(amount):\n     return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+# Helper to create at least \"count\" utxos\n+# Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n     node.generate(int(0.5*count)+101)\n     utxos = node.listunspent()\n@@ -475,6 +477,8 @@ def create_confirmed_utxos(fee, node, count):\n     assert(len(utxos) >= count)\n     return utxos\n \n+# Create large OP_RETURN txouts that can be appended to a transaction\n+# to make it large (helper for constructing large transactions).\n def gen_return_txouts():\n     # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n     # So we have big transactions (and therefore can't fit very many into each block)\n@@ -501,6 +505,8 @@ def create_tx(node, coinbase, to_address, amount):\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n \n+# Create a spend of each passed-in utxo, splicing in \"txouts\" to each raw\n+# transaction to make it large.  See gen_return_txouts() above.\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []"
      }
    ]
  }
]