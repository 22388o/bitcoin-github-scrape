[
  {
    "sha": "b7cd08b717b57376d23ea550da60b00f239556db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2NkMDhiNzE3YjU3Mzc2ZDIzZWE1NTBkYTYwYjAwZjIzOTU1NmRi",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-05T19:31:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-06T19:43:32Z"
      },
      "message": "Add documentation to PeerLogicValidation interface and related functions",
      "tree": {
        "sha": "82106d1e04659d79206a98403c75afadf75a0ab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82106d1e04659d79206a98403c75afadf75a0ab7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7cd08b717b57376d23ea550da60b00f239556db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cd08b717b57376d23ea550da60b00f239556db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cd08b717b57376d23ea550da60b00f239556db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cd08b717b57376d23ea550da60b00f239556db/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480f42630cbd598c04fa59ee0e406f56904ecffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480f42630cbd598c04fa59ee0e406f56904ecffb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480f42630cbd598c04fa59ee0e406f56904ecffb"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 45,
      "deletions": 3
    },
    "files": [
      {
        "sha": "482a206c8bef65ee7ab476513a408123b5e172ec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b7cd08b717b57376d23ea550da60b00f239556db",
        "patch": "@@ -401,6 +401,12 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n+/**\n+ * When a peer sends us a valid block, instruct it to announce blocks to us\n+ * using CMPCTBLOCK if possible by adding its nodeid to the end of\n+ * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n+ * removing the first element if necessary.\n+ */\n void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n@@ -749,7 +755,11 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-// Requires cs_main.\n+/**\n+ * Mark a misbehaving peer to be banned depending upon the value of `-banscore`.\n+ *\n+ * Requires cs_main.\n+ */\n void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n@@ -808,6 +818,10 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &schedu\n     scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n+/**\n+ * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n+ * block. Also save the time of the last tip update.\n+ */\n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(g_cs_orphans);\n \n@@ -828,7 +842,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n     }\n \n-    // Erase orphan transactions include or precluded by this block\n+    // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n         for (uint256 &orphanHash : vOrphanErase) {\n@@ -847,6 +861,10 @@ static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_bloc\n static uint256 most_recent_block_hash;\n static bool fWitnessesPresentInMostRecentCompactBlock;\n \n+/**\n+ * Maintain state about the best-seen block and fast-announce a compact block \n+ * to compatible peers.\n+ */\n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n     const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n@@ -888,6 +906,10 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+/**\n+ * Update our best height and announce any block hashes which weren't previously \n+ * in chainActive to our peers.\n+ */\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n@@ -920,6 +942,10 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     nTimeBestReceived = GetTime();\n }\n \n+/**\n+ * Handle invalid block rejection and consequent peer banning, maintain which \n+ * peers announce compact blocks.\n+ */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n     LOCK(cs_main);\n "
      },
      {
        "sha": "ff1ebc59da353b46a0568dfa1a9bdacca6215ae6",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=b7cd08b717b57376d23ea550da60b00f239556db",
        "patch": "@@ -42,13 +42,26 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n public:\n     explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n-\n+    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;\n+    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n     void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n     /** Process protocol messages received from a given node */\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n@@ -61,8 +74,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n+    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds);\n \n private:"
      }
    ]
  }
]