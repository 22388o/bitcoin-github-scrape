DrahtBot,2019-07-23 18:29:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18638 (net: Use mockable time for ping/pong, add tests by MarcoFalke)\n* #18450 (util: Use locale independent ToString(…)",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514329131,514329131,
jonasschnelli,2019-07-23 18:41:54,"Nice! Thanks for working on this.\n\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\n\nI think so,... because some users may want to use the blockfilters only ""internal"", more specific, to rescan wallets (especially in prune mode), though functionality hasn't been added to Bitcoin Core yet\n\n> Is the mechanism to only signal t",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514333563,514333563,
jamesob,2019-07-24 13:58:07,Concept ACK - will review within the next few days.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514643609,514643609,
Sjors,2019-08-13 16:01:12,"Concept ACK\n\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\n\nYes, suggest defaulting to `true`. It can wait until #15845.\n\n> Is the mechanism to only signal the service flag once the index is in sync OK?\n\nI guess it's already built, but I'd be fine with moving that to a followup (and kick the `src/net.cpp` discussion ",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-520897695,520897695,
luke-jr,2019-08-20 00:38:44,"> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\n\nBIP 157 is controversial, so I think yes.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-522805991,522805991,
Sjors,2019-09-01 11:13:53,I spun up a temporary testnet node in case anyone wants to test the p2p behavior: `uskjxnd7tud7qkeg.onion:18333`,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-526909565,526909565,
jamesob,2019-09-27 15:33:59,@jimpo any plans to address feedback here? It'd be great to see this PR move towards merge.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-535989758,535989758,
jimpo,2019-10-19 10:32:13,"@jamesob Sorry for the delay, just pushed up changes.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-544125600,544125600,
Sjors,2019-10-23 09:52:26,"I lightly tested 8d08df4 on macOS 10.15 using `-bind=127.0.0.1 -debug=net -blockfilterindex=1 -peercfilters=1 -blocksonly` against a locally running Lnd node (master @ 8ed75834480e7be3f42d77f5d96e2880c94156fb) with `bitcoin.node=neutrino` and `neutrino.connect=127.0.0.1`. It initially catches up to the tip nicely.\n\nI then connect to the using Zap desktop, at which point Lnd starts complaining ",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545364727,545364727,
Sjors,2019-10-23 11:38:25,"Should there be a limit to how much filter data we give a peer? My Lnd is going berserk (https://github.com/lightningnetwork/lnd/issues/3630), and bitcoind happily sent it 15 GB of filters and counting:\n\n```\n{\n    ""id"": 1,\n    ""addr"": ""127.0.0.1:56456"",\n    ...\n    ""servicesnames"": [\n      ""WITNESS""\n    ],\n    ""relaytxes"": false,\n    ""lastsend"": 1571830501,\n    ""lastrecv"": ",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545402053,545402053,
jimpo,2019-10-31 13:46:07,@Sjors Why would you limit filter data? We don't limit the amount of block data served to a peer...,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-548382656,548382656,
Sjors,2019-11-02 17:30:19,"@jimpo indeed, we discussed this during the IRC meeting. No need to rate limit this specific message.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549064548,549064548,
jamesob,2019-11-04 21:03:35,Ping @jimpo for a rebase. Looking to review shortly.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549545829,549545829,
Sjors,2019-11-11 12:55:24,"There's still some ongoing discussion about `getcfilters` limit in the BIP https://github.com/bitcoin/bips/pull/857 (cc @TheBlueMatt, @harding)",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-552434757,552434757,
TheBlueMatt,2019-11-14 02:02:13,"Note that if you want to use the new max limit, you’ll need to do something closer to what we do for getdatas - dumping the full set of requested filters into the send buffer opens us up to a massive dos attack (based purely on Harding’s estimated size I haven’t checked the match myself).\n\n> On Nov 11, 2019, at 07:55, Sjors Provoost <notifications@github.com> wrote:\n> \n> ﻿\n> There's still som",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-553689319,553689319,
Sjors,2019-11-14 10:56:47,"Should net_processing maintain a queue of filter messages (20 kb each) we want to send, and then drip them out 10(?) at a time each time `SendMessages` is called? Or not even the messages themselves, but instead construct on the fly?",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-553835807,553835807,
TheBlueMatt,2019-11-15 21:33:51,"See ProcessGetData - we'll want to do that, yea, keep a queue of what was requested and, just like ProcessGetData, hit that every time we get to ProcessMessage for the peer or SendMessages for the peer, and do nothing else until afterwards. In fact, why is there a new message for fetching these things anyway? Is there any reason to not literally just do it via invs? Would be a smaller diff and pre",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-554537231,554537231,
jnewbery,2019-11-18 23:21:00,"Concept ACK. This looks really good. The commits are nicely laid out and the change set is very easy to follow. I haven't yet done a in-depth review, but I've skimmed through the code and have some high-level feedback:\n\n- some of the later commits could be squashed into earlier commits to avoid code churn (eg _net: Raise MAX_GETCFILTERS_SIZE following change to BIP 158._ into _net: Message han",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-555256244,555256244,
jimpo,2019-11-20 13:02:48,"@jnewbery @jkczyz Thanks for the reviews!\n\nOn point 2, I've heard the feedback that dynamically switching the service flags is a bad idea a few times. I also don't like the idea of leaving the service flag on before the index is in sync as it complicates client logic. Maybe it's OK to just not allow the `-peercfilters` flag until the index is in sync. So the user experience is that a fresh nod",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-555994220,555994220,
jimpo,2019-11-20 13:20:10,"@TheBlueMatt \n\n> See ProcessGetData - we'll want to do that, yea, keep a queue of what was requested and, just like ProcessGetData, hit that every time we get to ProcessMessage for the peer or SendMessages for the peer, and do nothing else until afterwards. In fact, why is there a new message for fetching these things anyway? Is there any reason to not literally just do it via invs? Would be a",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556000306,556000306,
benthecarman,2019-11-20 21:58:44,`NODE_COMPACT_FILTERS` should be added to [GetServicesNames](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/util.cpp#L735),https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556453838,556453838,
Talkless,2019-12-04 19:50:44,"my `getnetworkinfo` shows:\n```\n""localservicesnames"": [\n    ""NETWORK"",\n    ""WITNESS"",\n    ""NETWORK_LIMITED""\n  ],\n```\nWhy I don't see `NODE_COMPACT_FILTERS`? `lnd` is working fine in my regtest setup, using `bitcoin.node=neutrino`, so it seems working (received mined coins into lnd wallet), just curious about that service flag.\n\nI've launched:\n```\n ./bitcoin-qt -chain=regtest",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-561811357,561811357,
marcinja,2019-12-04 22:52:33,"> Why I don't see `NODE_COMPACT_FILTERS`?\n\n@Talkless I believe that is because `GetServicesNames` hasn't been updated yet. See: https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-556453838\n",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-561876826,561876826,
Talkless,2019-12-05 17:08:01,"Uhg, I've missed that part. Thanks @marcinja .",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-562222259,562222259,
jonasschnelli,2020-02-06 19:04:50,Needs rebase,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-583060208,583060208,
sipa,2020-03-25 21:04:41,Looks like there is a data race now (see Travis output https://travis-ci.org/github/bitcoin/bitcoin/jobs/665594933).,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-604086819,604086819,
MarcoFalke,2020-04-08 16:20:05,"It looks like the test times out when run in valgrind. Maybe you could bump the timeout like some of the other tests do?\n\n```py\nself.rpc_timeout = 120",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-611054359,611054359,
brakmic,2020-04-30 17:10:08,"Concept ACK. \n\nBuilt, run and tested on macOS Catalina 10.15.4.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-621985134,621985134,
prusnak,2020-04-30 17:21:48,What is the target release of bitcoin-core to have this included?,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-621991277,621991277,
MarcoFalke,2020-04-30 19:18:42,Removed from high-prio for now because it needs rebase. Can be re-added right after the rebase.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622052330,622052330,
jonatack,2020-04-30 19:34:01,@prusnak afaik it depends on review; master currently targets v0.21,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622060837,622060837,
jnewbery,2020-04-30 22:05:45,@jimpo would you like me to maintain this branch/pull request? Happy to rebase it and squash the fixup commits.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622140888,622140888,
jimpo,2020-05-02 03:16:56,"Yes, that would be very appreciated. Thank you @jnewbery!",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622660886,622660886,
prusnak,2020-05-02 08:47:28,The current changeset seems to be failing the `p2p_cfilters.py` test on some configurations.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-622892081,622892081,
MarcoFalke,2020-05-03 01:16:10,"ACK 72784c3dac 📶\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 72784c3dac 📶\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhRkwv9GYZx75PbE6Q6VqEuDomfW8amF89WneIQOES2IG69dMBT9QVDjwyBiAhW\nJUZBEd5+QruLK+F7zaVSA0MWBTrytjbOPJooVW4zqwz6pvmCGDf",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623037890,623037890,
MarcoFalke,2020-05-03 01:23:44,"Re-added to the high-prio project, per my previous comment.\n\nAlso assigned 0.21.0 milestone to get this merged hopefully early in the timeline, so that additional long-term testing can be conducted.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623038565,623038565,
ariard,2020-05-04 09:22:48,"@jimpo what's the bandwidth consumption by month of a BIP157 client ? I guess you have done simulations but how many clients you can onboard for a given number of public peers servicing filters, these peers allocating half of their 350GB/month available bandwidth to light clients ?",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623354890,623354890,
MarcoFalke,2020-05-04 11:45:01,"re-ACK 6782deb365cc5a9db763aad1bd0604f515ee9a68 , only change is bumping the test timeout 🦑\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 6782deb365cc5a9db763aad1bd0604f515ee9a68 , only change is bumping the test timeout 🦑\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623415561,623415561,
MarcoFalke,2020-05-04 11:47:13,@ariard I think maxuploadtarget documentation can be added in a follow-up. No need to solve all issues in one pull request.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623416425,623416425,
jnewbery,2020-05-04 17:19:45,"> Yes, that would be very appreciated. Thank you @jnewbery!\n\nThanks @jimpo . I plan to do the following:\n\n- squash all fixup commits into their respective commits\n- rebase on master\n- re-order commits and then open PRs for subsets of the functionality so we can make some progress towards merging this.\n\nThanks again for all your work on this :)",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623593981,623593981,
ariard,2020-05-04 20:34:28,"@MarcoFalke It's not a question of node resources management, but a more broader concern about light clients current scalability model. Even with a low-bandwidth protocol such as BIP157/158, you may still have a huge discrepancy between the numbers of requesting clients and opt-in public peers to serve them.\n\nAt its heart, you will always have a incentives conflict between clients asking for r",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623690795,623690795,
jnewbery,2020-05-04 20:53:04,@ariard please take discussion of light-client scalability to the mailing list. Comments on this PR should be for review of the implementation.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623699520,623699520,
luke-jr,2020-05-04 21:39:19,"@ariard This is an optional feature, not enabled by default. It might make some sense to support it for trusted peers only (missing from this PR), although protocols like Stratum are probably better for that purpose (but nobody has implemented it for Core to date).\n\n@jnewbery Concept NACKs, and the explanation therefore (required by dev notes!) do belong on PRs...\n\nI think I'm going to mir",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623722125,623722125,
sipa,2020-05-04 21:56:10,"@ariard Of course there are always questions about incentives to provide public data for free by nodes, but that problem isn't unique to BIP157 - you can also question if nodes have reason to provide blocks, transactions, to participate in relay, ... etc. Perhaps there is a future where all these things eventually have to be paid for, but for now, trying to solve this perfectly would just lead you",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623729168,623729168,
sipa,2020-05-04 22:03:17,"@luke-jr Certainly reasons to reject an implementation of a BIP should go on a PR, but you have principled objections to a BIP - which seems to be the case here - it is much more useful to have that criticism be visible more widely. It would be strange if there is apparent consensus that a BIP is a good idea, and then having it not be implemented in Core because of an argument only presented there",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623731993,623731993,
jnewbery,2020-05-05 02:59:53,"Github doesn't allow PRs to be transferred, so I've opened #18876 for the new branch.",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623808184,623808184,
fanquake,2020-05-05 03:08:47,Closing this for #18876. Discussion / review should move to #18876 and the sub-PRs.,https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623809735,623809735,
ariard,2020-05-05 10:26:36,"@luke-jr Yes I noticed that's an optional feature, used the term opt-in somehow IIRC.\n\n@sipa that's the right but you may have an indirect incentive to relay blocks and likely-to-be-blocks to foster network robustness and make your transactions more censorship-resistant. Killing a light client doesn't increase or decrease network security ?\n\nAnyway, thanks for your comments, throw a length",https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-623975146,623975146,
TheBlueMatt,2019-07-29 20:10:24,"Please dont add more node logic in net.cpp - if you want node logic put it in net_processing. But, honestly, this should be handled either by init checking these conditions or by the filtering code itself.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562,308415562,src/net.cpp
TheBlueMatt,2019-07-29 20:37:36,Is this defined behavior?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316,308426316,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:42:16,This is redundant with BlockRequestAllowed.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158,308428158,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:43:11,nit: bad indentation here.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510,308428510,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:43:42,nit: bad indentation here.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727,308428727,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:46:27,"I don't actually think this is sufficient. The stop block may be BlockRequestAllowed while the previous block(s) may not. I think it is sufficient to check BlockRequestAllowed both on the stop block and the start block, but you should also update the comment there to make that an invariant in the future.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740,308429740,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:48:25,"Because you haven't checked filter_type is sane yet, this allows DoS by filling someone's debug.log with garbage by repeatedly requesting undefined filter types.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487,308430487,src/net_processing.cpp
TheBlueMatt,2019-07-29 20:49:04,Why is max_height_diff a parameter? Why not just use the constant directly?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811,308430811,src/net_processing.cpp
TheBlueMatt,2019-07-29 21:13:30,I actually don't think we want to return false here and a few other places. All it does is change logging but no need to print twice when you just printed the error.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314,308440314,src/net_processing.cpp
TheBlueMatt,2019-07-29 21:15:12,"This should use the peer protocol version, not that I think it matters.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053,308441053,src/net_processing.cpp
jimpo,2019-07-30 12:47:11,Good point!,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585,308699585,src/net_processing.cpp
jimpo,2019-07-30 12:47:37,It'll be obvious in subsequent commits.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798,308699798,src/net_processing.cpp
jimpo,2019-07-30 12:49:53,Filter type is checked at the top of this function?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863,308700863,src/net_processing.cpp
jimpo,2019-07-30 12:53:39,"The point of this code is that the filter index may be building in the background and we don't want to signal NODE_COMPACT_FILTERS to peers until it is in sync. Then as soon as it does finish syncing, turn it on. \n\nI'm not sure this is the best way to do this so, I'm open to suggestions (this is the subject of two of the questions in the PR description). Another option would be to have a separ",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676,308702676,src/net.cpp
jimpo,2019-07-30 12:54:21,"Yes, BlockFilterType is `enum class BlockFilterType : uint8_t`.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023,308703023,src/net_processing.cpp
jimpo,2019-07-30 20:12:55,"Upon further reflection, this seems to not be an issue. Discussed offline with @TheBlueMatt.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904,308920904,src/net_processing.cpp
TheBlueMatt,2019-07-30 20:13:03,"Hmmm, actually I don't think so? SO quotes:\n\n    C++ standard 5.2.9 Static cast [expr.static.cast] paragraph 7\n\n    A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting enumeration value is unspecified / undefined (since C++17).\",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968,308920968,src/net_processing.cpp
sipa,2019-07-30 20:20:14,Converting a uint8_t to a uint8_t-based enum should always result in something in range?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954,308923954,src/net_processing.cpp
jimpo,2019-07-30 20:26:05,"""For an enumeration whose underlying type is fixed, the values of the enumeration are the values of the underlying type.""\n\nhttps://stackoverflow.com/questions/18195312/what-happens-if-you-static-cast-invalid-value-to-enum-class",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293,308926293,src/net_processing.cpp
jimpo,2019-07-30 20:28:39,Makes sense. Changed to return true.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259,308927259,src/net_processing.cpp
jamesob,2019-08-06 20:36:03,"I spent a few minutes writing an indignant comment about how we should be okay with taking this small hack on as technical debt, but it actually looks like it might be pretty easy to address @TheBlueMatt's concerns by adding a method to `CConman` (eg `AddLocalService(ServiceFlags flag)`) that just modifies `nLocalServices`. The indexing code could call it on sync completion. Any reason not to do t",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606,311262606,src/net.cpp
jamesob,2019-08-06 20:37:19,"(FWIW I hate the idea of blocking net threads while waiting for filter indices to sync, and slightly less hate requiring a restart to serve the filters.)",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083,311263083,src/net.cpp
jimpo,2019-08-07 09:33:03,"@jamesob Yes, that would work too, but I wouldn't want to index to call CConmann directly. It should do it through some sort of callback to avoid coupling them, which just creates more indirection. I think this approach is a bit easier, but I'd be OK with a callback that updates `nLocalServices` as well.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705,311457705,src/net.cpp
jamesob,2019-08-07 19:46:18,"https://github.com/bitcoin/bitcoin/pull/16442/commits/9da9daad6053934009448344bae77f4e18f36869\n\nWhy isn't this `true` as in `ProcessGetCFilters()`? (Same question for `ProcessGetCFHeaders()`.)",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513,311731513,src/net_processing.cpp
jamesob,2019-08-07 20:01:12,"https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\n\nMight want to make a note here about why we're adding more boost usage instead of using the utilities in `sync` (ie `std::mutex`). I assume this is because we want to allow multiple threads to be able to read the headers cache simultaneously?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473,311737473,src/net_processing.cpp
jimpo,2019-08-08 11:52:56,"Yeah, the rationale is that `std` doesn't get `shared_mutex` until C++17. I'll add a comment.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311993840,311993840,src/net_processing.cpp
jamesob,2019-08-08 14:48:52,"These changes *don't* require reindexing because we [manually spell out the serialization format](https://github.com/jamesob/bitcoin/blob/3499e8877b3be1a629647353ddb8bb380c10a513/src/index/blockfilterindex.cpp#L211) when writing to disk (and same with reads) instead of using these serialization ops, right?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312078105,312078105,src/blockfilter.h
jamesob,2019-08-08 18:29:50,"https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\n\nFWIW could make this `const`.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312182612,312182612,src/net_processing.cpp
jamesob,2019-08-08 18:38:21,"To be clear: at the moment, the `shared_lock` is more or less moot because this is only ever called into from a single thread (`msghand`). I'm not necessarily opposed to using the shared_lock before necessary, but might be worth falling back to our standard `RecursiveMutex` (which comes with lock diagnostics) until and if we actually hit this from multiple threads.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312186387,312186387,src/net_processing.cpp
jimpo,2019-08-09 12:59:25,Right,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312467117,312467117,src/blockfilter.h
jimpo,2019-08-09 13:06:54,"Oh, for some reason I thought there were multiple message handler threads. Since there's just one and this doesn't require recursive locking, I think going to a `std::mutex` makes sense. Agree?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312470069,312470069,src/net_processing.cpp
jamesob,2019-08-09 13:45:31,"@jimpo yep, that'd be my inclination.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312485687,312485687,src/net_processing.cpp
marcinja,2019-08-27 01:06:28,"nit: \n```suggestion\n        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n```",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317856404,317856404,test/functional/p2p_cfilters.py
marcinja,2019-08-27 01:27:55,"I was a bit confused reviewing ab0ea72734ee0bcf7fdf8201d611941ea86ed15f here before seeing the synchronization code added later. If you decide to remove synchronization between the net thread and the filter-index thread, you can use the `syncwithvalidationinterface` RPC here and after reorging `node0` to keep the tests working consistently.\n\nOtherwise (without 77653ec568628291f69ea1b5a31bee35a",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317859935,317859935,test/functional/p2p_cfilters.py
marcinja,2019-08-27 01:38:15,"Looks like @jimpo may have just forgotten to update the corresponding return statements when updating the PR earlier. See: https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314 ""All it does is change logging but no need to print twice when you just printed the error.""\n\nIt should be consistent though.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317861704,317861704,src/net_processing.cpp
marcinja,2019-08-27 02:11:37,"Rather than block the message handler thread until the filter index has synced, is there much downside to ignoring messages when a filter query fails because it is not yet synced? (i.e. not sending anything back to the peer as implemented before 77653ec568628291f69ea1b5a31bee35a6492a4a) \n\nBy the spec in BIP 157, clients should be downloading from multiple peers so they wouldn't be wasting much",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317867252,317867252,src/net_processing.cpp
practicalswift,2019-09-07 09:32:13,"Should be ""that""? :-)",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r321962707,321962707,test/functional/p2p_cfilters.py
jamesob,2019-09-10 18:29:34,"Just had an offline conversation with @sdaftuar here (with regard to #16847) which I think is relevant. Dynamically flipping `nLocalServices` bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\n\nWhen thinking about this, it's instructive to look at how IBD works: we don't flip `NODE_NETWORK` off and on onc",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r322897395,322897395,src/net.cpp
jimpo,2019-10-19 10:11:21,"> Dynamically flipping nLocalServices bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\n\nI disagree with this. New inbound connections will see that the service bit has been flipped. And clients who need the filters wouldn't connect until it is on, so it's not like any inbound connections need to periodi",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731085,336731085,src/net.cpp
jimpo,2019-10-19 10:18:32,"It just makes the client logic more complicated as they need to have timeouts and if the index is active (like it has gotten in sync once since the node has been running), it should catch up to the tip pretty fast.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731315,336731315,src/net_processing.cpp
luke-jr,2019-11-14 01:47:08,"In any case, can you simply modify `nLocalServices` directly when the index has finished syncing? Or does other code that accesses it directly need to see the bit set even before sync is done?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r346092157,346092157,src/net.cpp
jkczyz,2019-11-19 04:13:52,Should be the previous filter header and a vector of filter hashes.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r347724051,347724051,src/protocol.h
jkczyz,2019-11-19 04:31:58,Would this logic be more suitable encapsulated as a method of `CNode`?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r347726881,347726881,src/net_processing.cpp
pinheadmz,2019-11-19 22:27:35,"What do you mean by this comment? Looking at the tests, it seems like we should be able to retrieve filters, headers and checkpoint headers on stale chains.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348203012,348203012,src/net_processing.cpp
jkczyz,2019-11-19 23:59:56,Looks like you are swallowing the return value below. Can this function be void instead? Or is this a common pattern when you want to log and return early?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348231611,348231611,src/net_processing.cpp
jkczyz,2019-11-20 00:16:41,The preceding condition is checking if the cfheader (i.e. filter header) is cached and thus for a block on the active chain. It breaks early and populates the remaining results from the cache. The comment here is for stale blocks where an index lookup is required since the filter header won't be in the cache. Once the active chain is reached (on a later iteration) the loop breaks and the cache is ,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348235765,348235765,src/net_processing.cpp
jkczyz,2019-11-20 01:02:55,"Both the interface and implementation of `QueryFilterIndexWithRetry` are quite complex and a bit difficult to reason about, especially when the output parameter `in_sync` is not used by the caller.\n\nWould it be detrimental to first unconditionally call `index->BlockUntilSyncedToCurrentChain()` at each call site instead of only calling it before retrying? It would make the code more readable by",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348246889,348246889,src/net_processing.cpp
fjahr,2019-11-20 17:01:45,nit: could print a message to logs in this case too IMO.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348631764,348631764,src/net.cpp
jimpo,2019-11-20 17:39:34,"Yes, the return value of this function is ignored, but returning a success indicator is a pretty common pattern and I don't see any downside.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348651034,348651034,src/net_processing.cpp
jimpo,2019-11-20 17:43:21,"I don't see any places where it's duplicated, so I don't feel the need to move it.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348652799,348652799,src/net_processing.cpp
jimpo,2019-11-20 17:46:19,"Yes, I agree that `QueryFilterIndexWithRetry` is quite ugly, but I really don't like the idea of blocking the net thread on background processing unless necessary. In fact, I don't like the idea of doing it at all, but there's not really infrastructure for doing proper async logic here.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r348654175,348654175,src/net_processing.cpp
Talkless,2019-11-21 18:53:22,"nit: trivial, could be `noexcept`",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349259713,349259713,src/index/base.h
Talkless,2019-11-21 18:54:03,nit: could be **const** bool index_enabled,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349260084,349260084,src/init.cpp
Talkless,2019-11-21 19:01:09,"Kinda off-topic I guess, bug locking two mutex'es makes you think, maybe bitcoin codebase would need something like `std::lock`, or better `std::scoped_lock` (C++17) to lock multiple locks in deadlock-free way, with same LOCK() debugging features.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349263563,349263563,src/net_processing.cpp
Talkless,2019-11-21 19:11:09,"Suggestion: consider simplifying this bit to remove these manual ""off-by-one'ness-ness"" like `>`, `-1`, etc, using reverse iterators and `find_if`, with something like this:\n```\nconst auto it = std::find_if(active_chain_cf_headers.crbegin(), active_chain_cf_headers.crend(), [&](const std::pair<const CBlockIndex*, uint256> &i) {\n    return active_chain.Contains(i.first);\n});\nactive_chain_",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349267940,349267940,src/net_processing.cpp
Talkless,2019-11-21 19:11:57,nit: could be const CBlockIndex* **const** block_index,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349268350,349268350,src/net_processing.cpp
Talkless,2019-11-21 19:13:00,nit: could be **const** bool supported_filter_type,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349268778,349268778,src/net_processing.cpp
Talkless,2019-11-21 19:16:29,nit: could be **const** BlockFilterType filter_type,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349270345,349270345,src/net_processing.cpp
Talkless,2019-11-21 19:19:54,nit: could be **const** bool lookup_success,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349271947,349271947,src/net_processing.cpp
Talkless,2019-11-21 19:20:52,nit: could be **const** BlockFilterType filter_type,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349272389,349272389,src/net_processing.cpp
Talkless,2019-11-21 19:25:17,"nit: could be const CBlockIndex* **const** prev_block\n\nAlso, IDE notes about `start_height - 1` being implicitly converted to `int` (`GetAncestor()` takes int), maybe worth ""documenting""/""warning"" by using `static_cast`? Though maybe overkill, idk.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349274558,349274558,src/net_processing.cpp
Talkless,2019-11-21 19:25:36,nit: could be **const** bool lookup_success,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349274727,349274727,src/net_processing.cpp
Talkless,2019-11-21 19:26:20,"nit: ditto, could be **const** bool lookup_success",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349275064,349275064,src/net_processing.cpp
Talkless,2019-11-21 19:27:37,nit: could be **const** BlockFilterType filter_type,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349275707,349275707,src/net_processing.cpp
Talkless,2019-11-21 19:28:55,nit: could be **const** bool lookup_success,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349276315,349276315,src/net_processing.cpp
jkczyz,2019-11-21 23:18:55,"Duplication is one reason to refactor code, but there are others such as improving readability by hiding complexity. Compare:\n\n```c++\nif (!pfrom->SupportsBlockFilter(BlockFilterType::BASIC)) {\n    // ...\n}",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349366658,349366658,src/net_processing.cpp
jkczyz,2019-11-21 23:43:44,"That seems like an orthogonal concern to my point. From what I can tell, `BlockUntilSyncedToCurrentChain` won't block needlessly:\n\nhttps://github.com/bitcoin/bitcoin/blob/46d6930f8c7ba7cbcd7d86dd5d0117642fcbc819/src/index/base.h#L95-L100\n\nThat is, it is short-circuited if the index is current:\n\nhttps://github.com/bitcoin/bitcoin/blob/b2a6b0216192b6e8428f1a80b47f5178fccb961a/src/index/b",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r349373734,349373734,src/net_processing.cpp
ariard,2020-01-07 03:28:46,"aaceafd\n\nIs generic BIP 157 support can be checked at beginning of ProcessMessage like it's done for NODE_BLOOM ? It would avoid to busy ThreadMessageHandler for nothing?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363578596,363578596,src/net_processing.cpp
ariard,2020-01-07 03:33:07,"aaceafd\n\nThis seems to assume than both client and server blockchain views are in sync. In case of diverging tips seen, client may be disconnected for a non-reprehensible request, just for being too fast ? (BlockRequestAllowed is for block which has been validated at least once)",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579193,363579193,src/net_processing.cpp
ariard,2020-01-07 03:36:37,"aaceafd\n\nAs you said, filter type support is already checked at first step. What does this check add ? ",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579742,363579742,src/net_processing.cpp
ariard,2020-01-07 03:38:00,"07dd762\n\nWhat the purpose of checking filters header availability before start of the range ? It seems like zeal on the bip",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363579935,363579935,src/net_processing.cpp
ariard,2020-01-07 03:38:38,"07dd762\n\nnit: filter_headers, also log message",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580053,363580053,src/net_processing.cpp
ariard,2020-01-07 03:41:23,"8788254\n\nWhat the perf improvement of caching checkpoints ? If clients are configured with trusted checkpoints, they are only going to use the higher range, or maybe a rolling checkpoints for last X headers/filters would be better as they are likely to be requested by everyone",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580460,363580460,src/net_processing.cpp
ariard,2020-01-07 03:43:38,"But you may have race condition between client and server where block isn't fully processed before request is handled, so client would have to bear this case anyway",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580801,363580801,src/net_processing.cpp
ariard,2020-01-07 03:44:58,"1b7fbb5\n\nIMO you can set -blockfilterindex by transivity if -peercfilters is already set, just mention it in the helper.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r363580980,363580980,src/init.cpp
luke-jr,2020-01-16 23:23:25,"This doesn't seem to be the right place to test default node services... Suggest initialising `default_services` to `node1.nServices`, and checking that it excludes `NODE_COMPACT_FILTERS`.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r367700676,367700676,test/functional/p2p_cfilters.py
Empact,2020-02-03 20:13:44,nit: `const` `stop_hash` would make the role the arg plays more clear - absent that pass by reference could be misleading,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r374317003,374317003,src/net_processing.cpp
jonasnick,2020-02-16 17:26:24,"`NODE_COMPACT_FILTERS` does not show up in the `getnetworkinfo` RPC's `""localservices""` key, presumably because there's no entry for it in `GetServicesNames`.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r379919162,379919162,src/protocol.h
jimpo,2020-02-29 00:45:47,"Yes, you are right. I guess I wanted to avoid taking cs_main, but it already does in `PrepareBlockFilterRequest` so maybe that's an unnecessary optimization.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385982696,385982696,src/net_processing.cpp
jimpo,2020-02-29 00:49:46,This doesn't seem actionable here. Probably best to open an issue or discuss in IRC or something?,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385983243,385983243,src/net_processing.cpp
jimpo,2020-02-29 01:12:38,"This isn't a check, this is a lookup? I agree that the check below this *should* never fail though. It's just there for defensive purposes to prevent a segfault.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986232,385986232,src/net_processing.cpp
jimpo,2020-02-29 01:14:39,What do you mean? Like fetching the filter at `start_height - 1`? The purpose is that the one filter header before the start of the range is required to compute the filter headers for all filters in the range given their hashes (it's a hash chain).,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986457,385986457,src/net_processing.cpp
jimpo,2020-02-29 01:15:30,"No, I think `filter_hashes` is right.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986536,385986536,src/net_processing.cpp
jimpo,2020-02-29 01:16:42,The `GETCFCHECKPT` request returns all filter checkpoints. There's no parameter to request a subset from a different start height because the message is small and only requested once per catchup generally.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r385986689,385986689,src/net_processing.cpp
jimpo,2020-03-01 19:37:22,The node is only guaranteed to serve a block filter/filter header if it has already advertised the block through a `headers` or `block` message to the requesting peer.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r386134269,386134269,src/net_processing.cpp
jimpo,2020-03-03 20:53:22,I have removed the dynamic flipping in accordance with reviewers' suggestions.,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r387286843,387286843,src/net.cpp
kilrau,2020-04-01 08:32:15,"I ran into this error when I had to restart a still-syncing node. So while I can add the `-peercfilters` flag when starting the node for the first time and syncing from scratch, I have to remove it when restarting a syncing node (otherwise it'd refuse to start with this error). I think it's better to either always allow the `-peercfilters` flag or only allow it once the filter index is ready. Form",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r401443707,401443707,src/init.cpp
MarcoFalke,2020-05-02 23:56:57,"in commit 14df7f7b17: Seems a bit odd to return true here, but not in the error case (which is also) logged. I suggest making the return type here `void`",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419023456,419023456,src/net_processing.cpp
MarcoFalke,2020-05-03 01:12:29,"nit in commit 14df7f7b17f1936ae641c619ae95989090f5a063\n\n```suggestion\n                                      const uint256& stop_hash, uint32_t max_height_diff,\n```",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419029945,419029945,src/net_processing.cpp
MarcoFalke,2020-05-03 01:25:03,"note to reviewers, in commit 14df7f7b17f1936ae641c619ae95989090f5a063 \n\nThe BIP https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#getcfilters says 1000. This is fixed up in a later commit 7f59550cb176ad2ea3ef6e9a75422bc8ffcc5c7e",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419031024,419031024,src/net_processing.cpp
MarcoFalke,2020-05-03 16:16:12,"in commit a7b375a4469fcef823a274e3f05db0f9ab7aa035 : \n\nThe test still times out on valgrind. Please bump the timeout.\n\n```diff\ndiff --git a/test/functional/p2p_cfilters.py b/test/functional/p2p_cfilters.py\nindex dca35f4e89..d16946510b 100755\n--- a/test/functional/p2p_cfilters.py\n+++ b/test/functional/p2p_cfilters.py\n@@ -42,6 +42,7 @@ class CFiltersClient(P2PInterface):\n \n cla",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419125215,419125215,test/functional/p2p_cfilters.py
MarcoFalke,2020-05-03 16:16:48,"in commit a7b375a4469fcef823a274e3f05db0f9ab7aa035 : \n\nCould you please squash 72784c3dac1e9d482cf5499170f689f483c1da51 into this commit?",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419125307,419125307,test/functional/test_framework/messages.py
jimpo,2020-05-04 07:10:37,"It returns `false` in cases that are unexpected, our-fault errors (more like exceptions) and returns true and logs when it's just an invalid request.",https://github.com/bitcoin/bitcoin/pull/16442#discussion_r419246556,419246556,src/net_processing.cpp
alejagapatrick,2021-01-06 00:46:36,# # # # # # #,https://github.com/bitcoin/bitcoin/pull/16442#discussion_r552292721,552292721,src/init.cpp
