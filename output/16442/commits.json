[
  {
    "sha": "1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2ExMzFjM2Q5MzA3ZWEzN2RmZjFmZjc0MDZkNGE3YzI4NzE2MjZl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T12:25:03Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-01T18:10:43Z"
      },
      "message": "net: Signal NODE_COMPACT_FILTERS if the block filter index is on.\n\nThe node will enable the NODE_COMPACT_FILTERS service flag once the\nblock filter index catches up to the active chain.",
      "tree": {
        "sha": "a2dd3657c67ffd715cdc04dc02988589050ddd88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dd3657c67ffd715cdc04dc02988589050ddd88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/608359b071dac82a9cf33a6c9e01f87abfcb90eb"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 28,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f4071ee50d6a35f5c54f5b9f35db6546f8c2959e",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "patch": "@@ -91,6 +91,10 @@ class BaseIndex : public CValidationInterface\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n \n+    /// Returns whether index has completed the initial sync with the active chain.\n+    /// After returning true once, this function will return true on all subsequent calls.\n+    bool IsSynced() const { return m_synced; }\n+\n     /// Blocks the current thread until the index is caught up to the current\n     /// state of the block chain. This only blocks if the index has gotten in\n     /// sync once and only needs to process blocks in the ValidationInterface"
      },
      {
        "sha": "12e43a2051d6dcfac96c831bcabb0ed711886b28",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "patch": "@@ -1767,6 +1767,13 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    bool cfilters_enabled = std::find(g_enabled_filter_types.begin(),\n+                                      g_enabled_filter_types.end(),\n+                                      BlockFilterType::BASIC) != g_enabled_filter_types.end();\n+    if (cfilters_enabled) {\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "37b5086ae10f0b15c05cea2c7ee6253863d5488d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "patch": "@@ -10,10 +10,12 @@\n #include <net.h>\n \n #include <banman.h>\n+#include <blockfilter.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <consensus/consensus.h>\n #include <crypto/sha256.h>\n+#include <index/blockfilterindex.h>\n #include <netbase.h>\n #include <net_permissions.h>\n #include <random.h>\n@@ -2673,7 +2675,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {\n+        BlockFilterIndex* basic_filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            LogPrintf(\"WARNING: NODE_COMPACT_FILTERS is signaled, but filter index is not available\\n\");\n+        }\n+        if (!basic_filter_index || !basic_filter_index->IsSynced()) {\n+            // If block filter index is still syncing, do not advertise the service bit.\n+            local_services &= ~NODE_COMPACT_FILTERS;\n+        }\n+    }\n+    return ServiceFlags(local_services);\n }\n \n void CConnman::SetBestHeight(int height)"
      },
      {
        "sha": "c3b8dc9b2c79caeeab9f4d942f9c67b30487fc5d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ca131c3d9307ea37dff1ff7406d4a7c2871626e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "patch": "@@ -258,6 +258,9 @@ enum ServiceFlags : uint64_t {\n     // NODE_WITNESS indicates that a node can be asked for blocks and transactions including\n     // witness data.\n     NODE_WITNESS = (1 << 3),\n+    // NODE_COMPACT_FILTERS means the node will service basic block filter requests.\n+    // See BIP157 and BIP158 for details on how this is implemented.\n+    NODE_COMPACT_FILTERS = (1 << 6),\n     // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n     // serving the last 288 (2 day) blocks\n     // See BIP159 for details on how this is implemented."
      }
    ]
  },
  {
    "sha": "e80db7c4401e43e081029407f15d9083f5329e13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODBkYjdjNDQwMWU0M2UwODEwMjk0MDdmMTVkOTA4M2Y1MzI5ZTEz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:20:10Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-01T18:10:43Z"
      },
      "message": "net: Define new BIP 157 protocol messages.",
      "tree": {
        "sha": "7687bbc69d9305bdd62d57e31b5ef72d0c3afe87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7687bbc69d9305bdd62d57e31b5ef72d0c3afe87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e80db7c4401e43e081029407f15d9083f5329e13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e80db7c4401e43e081029407f15d9083f5329e13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e80db7c4401e43e081029407f15d9083f5329e13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e80db7c4401e43e081029407f15d9083f5329e13/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ca131c3d9307ea37dff1ff7406d4a7c2871626e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ca131c3d9307ea37dff1ff7406d4a7c2871626e"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2710bb03210c9670bc25ecfb02d511c770e8d99a",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e80db7c4401e43e081029407f15d9083f5329e13/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e80db7c4401e43e081029407f15d9083f5329e13/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=e80db7c4401e43e081029407f15d9083f5329e13",
        "patch": "@@ -40,6 +40,12 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFILTERS=\"getcfilters\";\n+const char *CFILTER=\"cfilter\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n+const char *GETCFCHECKPT=\"getcfcheckpt\";\n+const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of"
      },
      {
        "sha": "edca3499b03818860dd81e3e4ad670a59faa1d7c",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e80db7c4401e43e081029407f15d9083f5329e13/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e80db7c4401e43e081029407f15d9083f5329e13/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=e80db7c4401e43e081029407f15d9083f5329e13",
        "patch": "@@ -234,6 +234,43 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+\n+/**\n+ * getcfilters requests compact filters for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFILTERS;\n+/**\n+ * cfilter is a response to a getcfilters request containing a single compact\n+ * filter.\n+ */\n+extern const char *CFILTER;\n+/**\n+ * getcfheaders requests compact filter headers for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a vector of\n+ * filter headers for each block in the requested range.\n+ */\n+extern const char *CFHEADERS;\n+/**\n+ * getcfcheckpt requests evenly spaced compact filter headers, enabling\n+ * parallelized download and validation of the headers between them.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFCHECKPT;\n+/**\n+ * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n+ * evenly spaced filter headers for blocks on the requested chain.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *CFCHECKPT;\n };\n \n /* Get a vector of all valid message types (see above) */"
      }
    ]
  },
  {
    "sha": "94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE3Y2I3ODVmMmRjNDZlZmNjYWJhZWFiZjY3YTE3OTdlMzJkOWU2",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:42:13Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:08Z"
      },
      "message": "net: Message handling for GETCFILTERS.",
      "tree": {
        "sha": "b68df1a8db7cd3a1eeffbeedf7fbd0c48b2bc169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b68df1a8db7cd3a1eeffbeedf7fbd0c48b2bc169"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e80db7c4401e43e081029407f15d9083f5329e13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e80db7c4401e43e081029407f15d9083f5329e13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e80db7c4401e43e081029407f15d9083f5329e13"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9a32fd232593c1dd16730f06fdd088d29c3915f0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a7cb785f2dc46efccabaeabf67a1797e32d9e6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a7cb785f2dc46efccabaeabf67a1797e32d9e6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
        "patch": "@@ -8,9 +8,11 @@\n #include <addrman.h>\n #include <banman.h>\n #include <blockencodings.h>\n+#include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <hash.h>\n+#include <index/blockfilterindex.h>\n #include <validation.h>\n #include <merkleblock.h>\n #include <netmessagemaker.h>\n@@ -127,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 100;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1965,6 +1969,98 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+\n+    return true;\n+}\n+\n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n@@ -3271,6 +3367,10 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFILTERS) {\n+        return ProcessGetCFilters(pfrom, vRecv, chainparams, connman);\n+    }\n+\n     if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTRmODM3MjlmNmFjOGViMTFlZWZhYzQwMDlmMGU5YzA5ZDQ3YjBk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:48:53Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Message handling for GETCFHEADERS.",
      "tree": {
        "sha": "522d9057cd7ad5fe524eee895077897f23ba9d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/522d9057cd7ad5fe524eee895077897f23ba9d93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a7cb785f2dc46efccabaeabf67a1797e32d9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94a7cb785f2dc46efccabaeabf67a1797e32d9e6"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "928795d5e7ac229950e0e27df6aff88203f3e0ca",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/454f83729f6ac8eb11eefac4009f0e9c09d47b0d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/454f83729f6ac8eb11eefac4009f0e9c09d47b0d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
        "patch": "@@ -131,6 +131,8 @@ static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n /** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n static constexpr uint32_t MAX_GETCFILTERS_SIZE = 100;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -2061,6 +2063,51 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n     return true;\n }\n \n+static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        return error(\"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n@@ -3370,6 +3417,9 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n     if (msg_type == NetMsgType::GETCFILTERS) {\n         return ProcessGetCFilters(pfrom, vRecv, chainparams, connman);\n     }\n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        return ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+    }\n \n     if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer"
      }
    ]
  },
  {
    "sha": "2a83db21040e13ccd6b361b256e74d46e59029a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTgzZGIyMTA0MGUxM2NjZDZiMzYxYjI1NmU3NGQ0NmU1OTAyOWE1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:19:40Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Message handling for GETCFCHECKPT.",
      "tree": {
        "sha": "0151a454b42e565cc450124abf9b0a8b931d069a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0151a454b42e565cc450124abf9b0a8b931d069a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a83db21040e13ccd6b361b256e74d46e59029a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a83db21040e13ccd6b361b256e74d46e59029a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a83db21040e13ccd6b361b256e74d46e59029a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a83db21040e13ccd6b361b256e74d46e59029a5/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/454f83729f6ac8eb11eefac4009f0e9c09d47b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/454f83729f6ac8eb11eefac4009f0e9c09d47b0d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3153faca4942a22da90f1889a2d09d4989f0f4b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a83db21040e13ccd6b361b256e74d46e59029a5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a83db21040e13ccd6b361b256e74d46e59029a5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2a83db21040e13ccd6b361b256e74d46e59029a5",
        "patch": "@@ -133,6 +133,8 @@ static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n static constexpr uint32_t MAX_GETCFILTERS_SIZE = 100;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n+/** Interval between compact filter checkpoints. See BIP 157. */\n+static constexpr uint32_t CFCHECKPT_INTERVAL = 1000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -2108,6 +2110,50 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        // Return true because the issue with the invalid request has already been logged.\n+        return true;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+\n+    // Populate headers.\n+    const CBlockIndex* block_index = stop_index;\n+    for (int i = headers.size() - 1; i >= 0; i--) {\n+        uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+        block_index = block_index->GetAncestor(height);\n+\n+        // Filter header requested for stale block.\n+        if (!filter_index->LookupFilterHeader(block_index, headers[i])) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_type), block_index->GetBlockHash().ToString());\n+        }\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFCHECKPT,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              headers);\n+    connman->PushMessage(pfrom, std::move(msg));\n+\n+    return true;\n+}\n+\n bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n@@ -3420,6 +3466,9 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n     if (msg_type == NetMsgType::GETCFHEADERS) {\n         return ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n     }\n+    if (msg_type == NetMsgType::GETCFCHECKPT) {\n+        return ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n+    }\n \n     if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer"
      }
    ]
  },
  {
    "sha": "6b76adb4f85045aa76eee921676376ac7145581a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yjc2YWRiNGY4NTA0NWFhNzZlZWU5MjE2NzYzNzZhYzcxNDU1ODFh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:23:44Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "blockfilter: Fix default (de)?serialization of BlockFilter.",
      "tree": {
        "sha": "1a92e157d6c917a8f5e478d54a9b2b4824c960dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a92e157d6c917a8f5e478d54a9b2b4824c960dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b76adb4f85045aa76eee921676376ac7145581a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b76adb4f85045aa76eee921676376ac7145581a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b76adb4f85045aa76eee921676376ac7145581a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b76adb4f85045aa76eee921676376ac7145581a/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a83db21040e13ccd6b361b256e74d46e59029a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a83db21040e13ccd6b361b256e74d46e59029a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a83db21040e13ccd6b361b256e74d46e59029a5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "96cefbf3b2f9ffb0c688eee6d00249ad1ad75cc5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b76adb4f85045aa76eee921676376ac7145581a/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b76adb4f85045aa76eee921676376ac7145581a/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=6b76adb4f85045aa76eee921676376ac7145581a",
        "patch": "@@ -144,8 +144,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash\n           << m_filter.GetEncoded();\n     }\n \n@@ -154,8 +154,8 @@ class BlockFilter\n         std::vector<unsigned char> encoded_filter;\n         uint8_t filter_type;\n \n-        s >> m_block_hash\n-          >> filter_type\n+        s >> filter_type\n+          >> m_block_hash\n           >> encoded_filter;\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);"
      }
    ]
  },
  {
    "sha": "4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YThhZDcyNGExOThlNDhhNjFkNzVjODIxNTcyN2Y2NWNmYTdhMGZl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:22:44Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "test: Functional tests for cfilters P2P interface.",
      "tree": {
        "sha": "3bbb423109acadd144ef5a5f3abba9b111cbd8c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bbb423109acadd144ef5a5f3abba9b111cbd8c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b76adb4f85045aa76eee921676376ac7145581a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b76adb4f85045aa76eee921676376ac7145581a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b76adb4f85045aa76eee921676376ac7145581a"
      }
    ],
    "stats": {
      "total": 410,
      "additions": 410,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7bd21ec2260856497a65281e54e44ef92a58ec0e",
        "filename": "test/functional/p2p_cfilters.py",
        "status": "added",
        "additions": 246,
        "deletions": 0,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/p2p_cfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/p2p_cfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_cfilters.py?ref=4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "patch": "@@ -0,0 +1,246 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC, NODE_COMPACT_FILTERS,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 480\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 blocks in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Reorg node 0 to a new chain\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n+        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+\n+        # Check that the localservices is as expected.\n+        assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n+        assert int(self.nodes[1].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS == 0\n+\n+        # Check that peers can fetch cfcheckpt on active chain.\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+\n+        main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n+        tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+        )\n+\n+        # Check that peers can fetch cfcheckpt on stale chain.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+\n+        stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (stale_cfcheckpt,)]\n+        )\n+\n+        # Check that peers can fetch cfheaders on active chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        main_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfheaders on stale chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        stale_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfilters.\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stop_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 10)\n+\n+        # Check that cfilter responses are correct.\n+        for cfilter, cfhash, height in zip(response, main_cfhashes, range(1, 11)):\n+            block_hash = self.nodes[0].getblockhash(height)\n+            assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+            assert_equal(cfilter.block_hash, int(block_hash, 16))\n+            computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+            assert_equal(computed_cfhash, cfhash)\n+\n+        # Check that peers can fetch cfilters for stale blocks.\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1000,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 1)\n+\n+        cfilter = response[0]\n+        assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+        assert_equal(cfilter.block_hash, int(stale_block_hash, 16))\n+        computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+        assert_equal(computed_cfhash, stale_cfhashes[999])\n+\n+        # Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\n+        requests = [\n+            msg_getcfcheckpt(\n+                filter_type=FILTER_TYPE_BASIC,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+        ]\n+        for request in requests:\n+            node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+            node1.send_message(request)\n+            node1.wait_for_disconnect()\n+\n+        # Check that invalid requests result in disconnection.\n+        requests = [\n+            # Requesting too many filters results in disconnection.\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=900,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+            # Requesting too many filter headers results in disconnection.\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(tip_hash, 16)\n+            ),\n+            # Requesting unknown filter type results in disconnection.\n+            msg_getcfcheckpt(\n+                filter_type=255,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n+            # Requesting unknown hash results in disconnection.\n+            msg_getcfcheckpt(\n+                filter_type=FILTER_TYPE_BASIC,\n+                stop_hash=123456789,\n+            ),\n+        ]\n+        for request in requests:\n+            node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+            node0.send_message(request)\n+            node0.wait_for_disconnect()\n+\n+def compute_last_header(prev_header, hashes):\n+    \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n+    header = ser_uint256(prev_header)\n+    for filter_hash in hashes:\n+        header = hash256(ser_uint256(filter_hash) + header)\n+    return uint256_from_str(header)\n+\n+if __name__ == '__main__':\n+    CompactFiltersTest().main()"
      },
      {
        "sha": "cd62e84bfa9af3eb6b33a7d5f01a08074cd905c8",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "patch": "@@ -49,6 +49,7 @@\n NODE_GETUTXO = (1 << 1)\n NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n+NODE_COMPACT_FILTERS = (1 << 6)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n MSG_TX = 1\n@@ -57,6 +58,8 @@\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n \n+FILTER_TYPE_BASIC = 0\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -1512,3 +1515,154 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n \n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n+\n+\n+class msg_getcfilters:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfilters\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfilters(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfilter:\n+    __slots__ = (\"filter_type\", \"block_hash\", \"filter_data\")\n+    msgtype =  b\"cfilter\"\n+\n+    def __init__(self, filter_type=None, block_hash=None, filter_data=None):\n+        self.filter_type = filter_type\n+        self.block_hash = block_hash\n+        self.filter_data = filter_data\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.block_hash = deser_uint256(f)\n+        self.filter_data = deser_string(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.block_hash)\n+        r += ser_string(self.filter_data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfilter(filter_type={:#x}, block_hash={:x})\".format(\n+            self.filter_type, self.block_hash)\n+\n+class msg_getcfheaders:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfheaders\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfheaders:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"prev_header\", \"hashes\")\n+    msgtype =  b\"cfheaders\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, prev_header=None, hashes=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.prev_header = prev_header\n+        self.hashes = hashes\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.prev_header = deser_uint256(f)\n+        self.hashes = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256(self.prev_header)\n+        r += ser_uint256_vector(self.hashes)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n+class msg_getcfcheckpt:\n+    __slots__ = (\"filter_type\", \"stop_hash\")\n+    msgtype =  b\"getcfcheckpt\"\n+\n+    def __init__(self, filter_type, stop_hash):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n+class msg_cfcheckpt:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"headers\")\n+    msgtype =  b\"cfcheckpt\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, headers=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.headers = headers\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.headers = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256_vector(self.headers)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)"
      },
      {
        "sha": "65eeae639702671c81f6bdfafae5761496c4d741",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "patch": "@@ -31,6 +31,9 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfilter,\n+    msg_cfheaders,\n+    msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n     msg_filteradd,\n@@ -67,6 +70,9 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfilter\": msg_cfilter,\n+    b\"cfheaders\": msg_cfheaders,\n+    b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n     b\"filteradd\": msg_filteradd,\n@@ -327,6 +333,9 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfilter(self, message): pass\n+    def on_cfheaders(self, message): pass\n+    def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass\n     def on_filteradd(self, message): pass"
      },
      {
        "sha": "f64cb000cecd0d372ba9c4cb91e1b6c5fe65137c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8ad724a198e48a61d75c8215727f65cfa7a0fe/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "patch": "@@ -225,6 +225,7 @@\n     'feature_loadblock.py',\n     'p2p_dos_header_tree.py',\n     'p2p_unrequested_blocks.py',\n+    'p2p_cfilters.py',\n     'feature_includeconf.py',\n     'feature_asmap.py',\n     'mempool_unbroadcast.py',"
      }
    ]
  },
  {
    "sha": "6f846a477127f8f98ecd347170b3038ba30c4c99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjg0NmE0NzcxMjdmOGY5OGVjZDM0NzE3MGIzMDM4YmEzMGM0Yzk5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T15:01:58Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Synchronize cfilter request handling with block filter index.\n\nSince the block filter index is updated asynchronously by proxy of the\nValidationInterface queue, lazily synchronize the net thread with the\nblock filter index in case lookups fail.",
      "tree": {
        "sha": "35305a35809bf5322f93ec6365992fd637674f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35305a35809bf5322f93ec6365992fd637674f22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f846a477127f8f98ecd347170b3038ba30c4c99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f846a477127f8f98ecd347170b3038ba30c4c99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f846a477127f8f98ecd347170b3038ba30c4c99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f846a477127f8f98ecd347170b3038ba30c4c99/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8ad724a198e48a61d75c8215727f65cfa7a0fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8ad724a198e48a61d75c8215727f65cfa7a0fe"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f3573cf9d5c54392a62618958094e0210ce6a455",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=6f846a477127f8f98ecd347170b3038ba30c4c99",
        "patch": "@@ -84,13 +84,13 @@ class BaseIndex : public CValidationInterface\n \n     virtual DB& GetDB() const = 0;\n \n-    /// Get the name of the index for display in logs.\n-    virtual const char* GetName() const = 0;\n-\n public:\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n \n+    /// Get the name of the index for display in logs.\n+    virtual const char* GetName() const = 0;\n+\n     /// Returns whether index has completed the initial sync with the active chain.\n     /// After returning true once, this function will return true on all subsequent calls.\n     bool IsSynced() const { return m_synced; }"
      },
      {
        "sha": "08b938b8d0be6e64a19fba794edaf36c33faefa9",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=6f846a477127f8f98ecd347170b3038ba30c4c99",
        "patch": "@@ -41,13 +41,13 @@ class BlockFilterIndex final : public BaseIndex\n \n     BaseIndex::DB& GetDB() const override { return *m_db; }\n \n-    const char* GetName() const override { return m_name.c_str(); }\n-\n public:\n     /** Constructs the index, which becomes available to be queried. */\n     explicit BlockFilterIndex(BlockFilterType filter_type,\n                               size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n+    const char* GetName() const override { return m_name.c_str(); }\n+\n     BlockFilterType GetFilterType() const { return m_filter_type; }\n \n     /** Get a single filter by block. */"
      },
      {
        "sha": "4f1b4e8e2b61126224306ee07065b24ee5f4946e",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f846a477127f8f98ecd347170b3038ba30c4c99/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=6f846a477127f8f98ecd347170b3038ba30c4c99",
        "patch": "@@ -30,15 +30,15 @@ class TxIndex final : public BaseIndex\n \n     BaseIndex::DB& GetDB() const override;\n \n-    const char* GetName() const override { return \"txindex\"; }\n-\n public:\n     /// Constructs the index, which becomes available to be queried.\n     explicit TxIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n     virtual ~TxIndex() override;\n \n+    const char* GetName() const override { return \"txindex\"; }\n+\n     /// Look up a transaction by hash.\n     ///\n     /// @param[in]   tx_hash  The hash of the transaction to be returned."
      },
      {
        "sha": "0c1cdccf1ce55af452b62a777f6006dfb91950c9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f846a477127f8f98ecd347170b3038ba30c4c99/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f846a477127f8f98ecd347170b3038ba30c4c99/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6f846a477127f8f98ecd347170b3038ba30c4c99",
        "patch": "@@ -2026,6 +2026,9 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     if (!filter_index) {\n         return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n     }\n+    if (!filter_index->BlockUntilSyncedToCurrentChain()) {\n+        return error(\"%s is not ready yet\", filter_index->GetName());\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjNkMmNlZTgwYjdmY2ZlZDVlZjY5MGI3YTc5ZDZiZjQ0NDFkNGQ1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:31:07Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "test: Exercise cache update code during getcfcheckpt handling.",
      "tree": {
        "sha": "a10dca36e490223a7c0cd8b778db7de16d3e960e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a10dca36e490223a7c0cd8b778db7de16d3e960e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f846a477127f8f98ecd347170b3038ba30c4c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f846a477127f8f98ecd347170b3038ba30c4c99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f846a477127f8f98ecd347170b3038ba30c4c99"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "08b0169018307da33d4280b6e8f3e8670c28fa62",
        "filename": "test/functional/p2p_cfilters.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5/test/functional/p2p_cfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5/test/functional/p2p_cfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_cfilters.py?ref=763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
        "patch": "@@ -66,6 +66,20 @@ def run_test(self):\n         self.nodes[1].generate(1001)\n         wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n \n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n         # Reorg node 0 to a new chain\n         connect_nodes(self.nodes[0], 1)\n         sync_blocks(self.nodes)"
      }
    ]
  },
  {
    "sha": "be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTVmN2M1ZjhlOTg0MTZmOTVkM2JkOTFhYjU2MzliNjdiMjhlZWYy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:41:28Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Cache compact filter checkpoints in memory.",
      "tree": {
        "sha": "61e2c7053f598e73c6550eef21b3382a06696fe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61e2c7053f598e73c6550eef21b3382a06696fe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763d2cee80b7fcfed5ef690b7a79d6bf4441d4d5"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 65,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2d7222c5cf2c02720f095a3be3136ac472f59597",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 9,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
        "patch": "@@ -30,6 +30,7 @@\n #include <util/strencodings.h>\n \n #include <memory>\n+#include <mutex>\n #include <typeinfo>\n \n #if defined(NDEBUG)\n@@ -436,6 +437,10 @@ limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static std::mutex active_chain_cf_headers_mtx;\n+\n static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n@@ -1299,6 +1304,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    const CChain& active_chain = ::ChainActive();\n+\n+    // Drop any entries in the checkpoint cache that have been reorganized off the active chain.\n+    int new_size = active_chain_cf_headers.size();\n+    for (; new_size > 0; new_size--) {\n+        if (active_chain.Contains(active_chain_cf_headers[new_size - 1].first)) {\n+            break;\n+        }\n+    }\n+    active_chain_cf_headers.resize(new_size);\n+\n+    // Populate the checkpoint cache with headers for blocks on the active chain.\n+    for (uint32_t height = (new_size + 1) * CFCHECKPT_INTERVAL;\n+         height <= static_cast<uint32_t>(active_chain.Height());\n+         height += CFCHECKPT_INTERVAL) {\n+        const CBlockIndex* block_index = active_chain[height];\n+        uint256 filter_header;\n+\n+        if (!filter_index.LookupFilterHeader(block_index, filter_header)) {\n+            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n+                         BlockFilterTypeName(filter_index.GetFilterType()),\n+                         block_index->GetBlockHash().ToString());\n+        }\n+        active_chain_cf_headers.emplace_back(block_index, filter_header);\n+    }\n+\n+    return true;\n+}\n+\n /**\n  * Update our best height and announce any block hashes which weren't previously\n  * in ::ChainActive() to our peers.\n@@ -1331,6 +1370,10 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n         });\n         connman->WakeMessageHandler();\n     }\n+\n+    ForEachBlockFilterIndex(\n+        [](BlockFilterIndex& index) { UpdateCFHeadersCache(index); }\n+    );\n }\n \n /**\n@@ -2133,17 +2176,30 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     }\n \n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);\n \n-    // Populate headers.\n-    const CBlockIndex* block_index = stop_index;\n-    for (int i = headers.size() - 1; i >= 0; i--) {\n-        uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n-        block_index = block_index->GetAncestor(height);\n+        // Populate headers.\n+        int i = headers.size() - 1;\n+        const CBlockIndex* block_index = stop_index;\n+        for (; i >= 0; i--) {\n+            uint32_t height = (i + 1) * CFCHECKPT_INTERVAL;\n+            block_index = block_index->GetAncestor(height);\n \n-        // Filter header requested for stale block.\n-        if (!filter_index->LookupFilterHeader(block_index, headers[i])) {\n-            return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n-                         BlockFilterTypeName(filter_type), block_index->GetBlockHash().ToString());\n+            if (static_cast<size_t>(i) < active_chain_cf_headers.size() &&\n+                active_chain_cf_headers[i].first == block_index) {\n+                break;\n+            }\n+\n+            // Filter header requested for stale block.\n+            if (!filter_index->LookupFilterHeader(block_index, headers[i])) {\n+                return error(\"Failed to find block filter header in index: \"\n+                             \"filter_type=%s, block_hash=%s\",\n+                             BlockFilterTypeName(filter_type), block_index->GetBlockHash().ToString());\n+            }\n+        }\n+        for (; i >= 0; i--) {\n+            headers[i] = active_chain_cf_headers[i].second;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "82713cd7274f6f78b9c71f6429cf617ec024cf34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjcxM2NkNzI3NGY2Zjc4YjljNzFmNjQyOWNmNjE3ZWMwMjRjZjM0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-10-19T10:23:47Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "init: Separate CLI flag for block filter index and serving cfilters.",
      "tree": {
        "sha": "26f1450597624f3385b8327f2fca15c232082a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26f1450597624f3385b8327f2fca15c232082a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82713cd7274f6f78b9c71f6429cf617ec024cf34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be5f7c5f8e98416f95d3bd91ab5639b67b28eef2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 18,
      "deletions": 8
    },
    "files": [
      {
        "sha": "73f40b724510b1173adf7b21c1f5daba896080ec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82713cd7274f6f78b9c71f6429cf617ec024cf34/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82713cd7274f6f78b9c71f6429cf617ec024cf34/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=82713cd7274f6f78b9c71f6429cf617ec024cf34",
        "patch": "@@ -446,6 +446,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peercfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERCFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -986,6 +987,18 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {\n+        bool index_enabled = std::find(g_enabled_filter_types.begin(),\n+                                       g_enabled_filter_types.end(),\n+                                       BlockFilterType::BASIC) != g_enabled_filter_types.end();\n+        if (!index_enabled) {\n+            return InitError(_(\"Cannot set -peercfilters without -blockfilterindex.\").translated);\n+        }\n+\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n@@ -1767,13 +1780,6 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n-    bool cfilters_enabled = std::find(g_enabled_filter_types.begin(),\n-                                      g_enabled_filter_types.end(),\n-                                      BlockFilterType::BASIC) != g_enabled_filter_types.end();\n-    if (cfilters_enabled) {\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n-    }\n-\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "3a31841ed37d2e992ce1a295cb0d6f0ef78e8597",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82713cd7274f6f78b9c71f6429cf617ec024cf34/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82713cd7274f6f78b9c71f6429cf617ec024cf34/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=82713cd7274f6f78b9c71f6429cf617ec024cf34",
        "patch": "@@ -21,6 +21,7 @@ static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n static const bool DEFAULT_PEERBLOOMFILTERS = false;\n+static const bool DEFAULT_PEERCFILTERS = false;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:"
      },
      {
        "sha": "ed86d7e7a274e2aad345a7f3b267a0ea5ae0b5f6",
        "filename": "test/functional/p2p_cfilters.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82713cd7274f6f78b9c71f6429cf617ec024cf34/test/functional/p2p_cfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82713cd7274f6f78b9c71f6429cf617ec024cf34/test/functional/p2p_cfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_cfilters.py?ref=82713cd7274f6f78b9c71f6429cf617ec024cf34",
        "patch": "@@ -45,7 +45,10 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.rpc_timeout = 480\n         self.num_nodes = 2\n-        self.extra_args = [[\"-blockfilterindex\"], []]\n+        self.extra_args = [\n+            [\"-blockfilterindex\", \"-peercfilters\"],\n+            [\"-blockfilterindex\"],\n+        ]\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not."
      }
    ]
  },
  {
    "sha": "5d8a8251733960177cfa56b8aa0eeaac35833cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDhhODI1MTczMzk2MDE3N2NmYTU2YjhhYTBlZWFhYzM1ODMzY2Yz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-11-11T20:00:41Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Raise MAX_GETCFILTERS_SIZE following change to BIP 157.",
      "tree": {
        "sha": "8ed4bb6ad8fe6040e3c37f9c023c6efe5e07ed09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed4bb6ad8fe6040e3c37f9c023c6efe5e07ed09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82713cd7274f6f78b9c71f6429cf617ec024cf34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82713cd7274f6f78b9c71f6429cf617ec024cf34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82713cd7274f6f78b9c71f6429cf617ec024cf34"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3b616c3a958d1dedd1729c444f8bd741992510c4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d8a8251733960177cfa56b8aa0eeaac35833cf3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d8a8251733960177cfa56b8aa0eeaac35833cf3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5d8a8251733960177cfa56b8aa0eeaac35833cf3",
        "patch": "@@ -131,7 +131,7 @@ static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n /** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n-static constexpr uint32_t MAX_GETCFILTERS_SIZE = 100;\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** Interval between compact filter checkpoints. See BIP 157. */"
      },
      {
        "sha": "8b7f0f93628f6829aa0d2aa6134117267d0ab8d8",
        "filename": "test/functional/p2p_cfilters.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d8a8251733960177cfa56b8aa0eeaac35833cf3/test/functional/p2p_cfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d8a8251733960177cfa56b8aa0eeaac35833cf3/test/functional/p2p_cfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_cfilters.py?ref=5d8a8251733960177cfa56b8aa0eeaac35833cf3",
        "patch": "@@ -227,7 +227,7 @@ def run_test(self):\n             # Requesting too many filters results in disconnection.\n             msg_getcfilters(\n                 filter_type=FILTER_TYPE_BASIC,\n-                start_height=900,\n+                start_height=0,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n             # Requesting too many filter headers results in disconnection."
      }
    ]
  },
  {
    "sha": "793ee7775d4d29fd5648d15bb8db8da0755efb07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTNlZTc3NzVkNGQyOWZkNTY0OGQxNWJiOGRiOGRhMDc1NWVmYjA3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T00:39:47Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "util: Add NODE_COMPACT_FILTERS to GetServicesNames.",
      "tree": {
        "sha": "1bb72dbab9acafe5edf261a7d26bb216f679ad40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb72dbab9acafe5edf261a7d26bb216f679ad40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/793ee7775d4d29fd5648d15bb8db8da0755efb07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d8a8251733960177cfa56b8aa0eeaac35833cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8a8251733960177cfa56b8aa0eeaac35833cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8a8251733960177cfa56b8aa0eeaac35833cf3"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6ee826018f6be9eba6c93d8fe397c2f707c9d4a4",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793ee7775d4d29fd5648d15bb8db8da0755efb07/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793ee7775d4d29fd5648d15bb8db8da0755efb07/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=793ee7775d4d29fd5648d15bb8db8da0755efb07",
        "patch": "@@ -745,6 +745,7 @@ QString serviceFlagToStr(const quint64 mask, const int bit)\n     case NODE_GETUTXO:         return \"GETUTXO\";\n     case NODE_BLOOM:           return \"BLOOM\";\n     case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_COMPACT_FILTERS: return \"COMPACT_FILTERS\";\n     case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n     // Not using default, so we get warned when a case is missing\n     }"
      },
      {
        "sha": "772c629baa1fd7f2d59a07b380527bc5c26d2d23",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793ee7775d4d29fd5648d15bb8db8da0755efb07/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793ee7775d4d29fd5648d15bb8db8da0755efb07/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=793ee7775d4d29fd5648d15bb8db8da0755efb07",
        "patch": "@@ -851,6 +851,8 @@ UniValue GetServicesNames(ServiceFlags services)\n         servicesNames.push_back(\"BLOOM\");\n     if (services & NODE_WITNESS)\n         servicesNames.push_back(\"WITNESS\");\n+    if (services & NODE_COMPACT_FILTERS)\n+        servicesNames.push_back(\"COMPACT_FILTERS\");\n     if (services & NODE_NETWORK_LIMITED)\n         servicesNames.push_back(\"NETWORK_LIMITED\");\n "
      }
    ]
  },
  {
    "sha": "94a662e2699bf23ce4aae5e12915bf8467359f76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE2NjJlMjY5OWJmMjNjZTRhYWU1ZTEyOTE1YmY4NDY3MzU5Zjc2",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T01:05:44Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "const all the things.",
      "tree": {
        "sha": "91513c5d4f1b6292964ae4adbed6a1f06ff92ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91513c5d4f1b6292964ae4adbed6a1f06ff92ee5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a662e2699bf23ce4aae5e12915bf8467359f76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a662e2699bf23ce4aae5e12915bf8467359f76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94a662e2699bf23ce4aae5e12915bf8467359f76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a662e2699bf23ce4aae5e12915bf8467359f76/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "793ee7775d4d29fd5648d15bb8db8da0755efb07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793ee7775d4d29fd5648d15bb8db8da0755efb07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/793ee7775d4d29fd5648d15bb8db8da0755efb07"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bca245530cab21bea25fa40bfb027293650c0f4e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a662e2699bf23ce4aae5e12915bf8467359f76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a662e2699bf23ce4aae5e12915bf8467359f76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=94a662e2699bf23ce4aae5e12915bf8467359f76",
        "patch": "@@ -989,9 +989,9 @@ bool AppInitParameterInteraction()\n \n     // Signal NODE_COMPACT_FILTERS if peercfilters and required index are both enabled.\n     if (gArgs.GetBoolArg(\"-peercfilters\", DEFAULT_PEERCFILTERS)) {\n-        bool index_enabled = std::find(g_enabled_filter_types.begin(),\n-                                       g_enabled_filter_types.end(),\n-                                       BlockFilterType::BASIC) != g_enabled_filter_types.end();\n+        const bool index_enabled = std::find(g_enabled_filter_types.begin(),\n+                                             g_enabled_filter_types.end(),\n+                                             BlockFilterType::BASIC) != g_enabled_filter_types.end();\n         if (!index_enabled) {\n             return InitError(_(\"Cannot set -peercfilters without -blockfilterindex.\").translated);\n         }"
      },
      {
        "sha": "61d7cfd74f08481efa8471c242a42339ed3aa9b2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94a662e2699bf23ce4aae5e12915bf8467359f76/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94a662e2699bf23ce4aae5e12915bf8467359f76/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=94a662e2699bf23ce4aae5e12915bf8467359f76",
        "patch": "@@ -1324,7 +1324,7 @@ static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n     for (uint32_t height = (new_size + 1) * CFCHECKPT_INTERVAL;\n          height <= static_cast<uint32_t>(active_chain.Height());\n          height += CFCHECKPT_INTERVAL) {\n-        const CBlockIndex* block_index = active_chain[height];\n+        const CBlockIndex* const block_index = active_chain[height];\n         uint256 filter_header;\n \n         if (!filter_index.LookupFilterHeader(block_index, filter_header)) {\n@@ -2027,7 +2027,7 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n                                       const CBlockIndex*& stop_index,\n                                       BlockFilterIndex*& filter_index)\n {\n-    bool supported_filter_type =\n+    const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n          (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n     if (!supported_filter_type) {\n@@ -2085,7 +2085,7 @@ static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainPar\n \n     vRecv >> filter_type_ser >> start_height >> stop_hash;\n \n-    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n@@ -2120,7 +2120,7 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     vRecv >> filter_type_ser >> start_height >> stop_hash;\n \n-    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n@@ -2132,7 +2132,8 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     uint256 prev_header;\n     if (start_height > 0) {\n-        const CBlockIndex* prev_block = stop_index->GetAncestor(start_height - 1);\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n         if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n             return error(\"Failed to find block filter header in index: filter_type=%s, block_hash=%s\",\n                          BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n@@ -2164,7 +2165,7 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     vRecv >> filter_type_ser >> stop_hash;\n \n-    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;"
      }
    ]
  },
  {
    "sha": "0dcd363060dbcfdf49235a61db3667b99c58cc1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGNkMzYzMDYwZGJjZmRmNDkyMzVhNjFkYjM2NjdiOTljNThjYzFk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-02-29T01:57:09Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Remove dynamic setting of local service flags.",
      "tree": {
        "sha": "6ff00b79110215c790e1292667e9cabc82d3ed8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ff00b79110215c790e1292667e9cabc82d3ed8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94a662e2699bf23ce4aae5e12915bf8467359f76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94a662e2699bf23ce4aae5e12915bf8467359f76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94a662e2699bf23ce4aae5e12915bf8467359f76"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4c58bd266a07ac6add4da58156318122d8901d65",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0dcd363060dbcfdf49235a61db3667b99c58cc1d",
        "patch": "@@ -1780,6 +1780,19 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (nLocalServices & NODE_COMPACT_FILTERS) {\n+        const BlockFilterIndex* const basic_filter_index =\n+            GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            error(\"NODE_COMPACT_FILTERS is signaled, but filter index is not available\");\n+            return false;\n+        }\n+        if (!basic_filter_index->IsSynced()) {\n+            InitError(strprintf(_(\"Cannot enable -peercfilters until basic block filter index is in sync. Please disable and reenable once filters have been indexed.\").translated));\n+            return false;\n+        }\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "ddcfb6816fdd470cb50c0bb571cbb3ef769a4943",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0dcd363060dbcfdf49235a61db3667b99c58cc1d",
        "patch": "@@ -2675,18 +2675,7 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    uint64_t local_services = nLocalServices;\n-    if (local_services & NODE_COMPACT_FILTERS) {\n-        BlockFilterIndex* basic_filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n-        if (!basic_filter_index) {\n-            LogPrintf(\"WARNING: NODE_COMPACT_FILTERS is signaled, but filter index is not available\\n\");\n-        }\n-        if (!basic_filter_index || !basic_filter_index->IsSynced()) {\n-            // If block filter index is still syncing, do not advertise the service bit.\n-            local_services &= ~NODE_COMPACT_FILTERS;\n-        }\n-    }\n-    return ServiceFlags(local_services);\n+    return nLocalServices;\n }\n \n void CConnman::SetBestHeight(int height)"
      },
      {
        "sha": "71832972f8fd8659429edf9cca23e25beeee5090",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcd363060dbcfdf49235a61db3667b99c58cc1d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0dcd363060dbcfdf49235a61db3667b99c58cc1d",
        "patch": "@@ -1371,9 +1371,9 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n         connman->WakeMessageHandler();\n     }\n \n-    ForEachBlockFilterIndex(\n-        [](BlockFilterIndex& index) { UpdateCFHeadersCache(index); }\n-    );\n+    if (connman->GetLocalServices() & NODE_COMPACT_FILTERS) {\n+        ForEachBlockFilterIndex([](BlockFilterIndex& index) { UpdateCFHeadersCache(index); });\n+    }\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "6782deb365cc5a9db763aad1bd0604f515ee9a68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzgyZGViMzY1Y2M1YTlkYjc2M2FhZDFiZDA2MDRmNTE1ZWU5YTY4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-03-28T23:54:52Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T07:09:09Z"
      },
      "message": "net: Fix concurrency issues with CF checkpts cache updates.",
      "tree": {
        "sha": "d04b965e47e3e5b38434b1768ea0d736050fc2f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d04b965e47e3e5b38434b1768ea0d736050fc2f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6782deb365cc5a9db763aad1bd0604f515ee9a68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6782deb365cc5a9db763aad1bd0604f515ee9a68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6782deb365cc5a9db763aad1bd0604f515ee9a68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6782deb365cc5a9db763aad1bd0604f515ee9a68/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dcd363060dbcfdf49235a61db3667b99c58cc1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcd363060dbcfdf49235a61db3667b99c58cc1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcd363060dbcfdf49235a61db3667b99c58cc1d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0f7af38e1528c50bebbd1349ca3c8446d54a0ed8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6782deb365cc5a9db763aad1bd0604f515ee9a68/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6782deb365cc5a9db763aad1bd0604f515ee9a68/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6782deb365cc5a9db763aad1bd0604f515ee9a68",
        "patch": "@@ -1370,10 +1370,6 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n         });\n         connman->WakeMessageHandler();\n     }\n-\n-    if (connman->GetLocalServices() & NODE_COMPACT_FILTERS) {\n-        ForEachBlockFilterIndex([](BlockFilterIndex& index) { UpdateCFHeadersCache(index); });\n-    }\n }\n \n /**\n@@ -2176,6 +2172,8 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return true;\n     }\n \n+    UpdateCFHeadersCache(*filter_index);\n+\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n     {\n         std::lock_guard<std::mutex> _lock(active_chain_cf_headers_mtx);"
      }
    ]
  }
]