[
  {
    "sha": "a327e8ea30e10abdce910a3e37c78e00d0918548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzI3ZThlYTMwZTEwYWJkY2U5MTBhM2UzN2M3OGUwMGQwOTE4NTQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-13T15:09:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-13T15:13:38Z"
      },
      "message": "devtools: Make github-merge compute SHA512 from git, instead of worktree\n\nThis changes tree_sha512sum() to requests the objects for hashing from\ngit instead of from the working tree.\n\nThe change should make the process more deterministic (it hashes what\nwill be pushed) and hopefully avoids the frequent miscomputed SHA512's\nthat happen now.",
      "tree": {
        "sha": "06c554f84c450923774a1a1dcad5cc04ef15224f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06c554f84c450923774a1a1dcad5cc04ef15224f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a327e8ea30e10abdce910a3e37c78e00d0918548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a327e8ea30e10abdce910a3e37c78e00d0918548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a327e8ea30e10abdce910a3e37c78e00d0918548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a327e8ea30e10abdce910a3e37c78e00d0918548/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8040ae6fc576e9504186f2ae3ff2c8125de1095c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8040ae6fc576e9504186f2ae3ff2c8125de1095c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8040ae6fc576e9504186f2ae3ff2c8125de1095c"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 37,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3fee39143dad7541b8319ef304426df0107b2e47",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 37,
        "deletions": 8,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a327e8ea30e10abdce910a3e37c78e00d0918548/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a327e8ea30e10abdce910a3e37c78e00d0918548/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=a327e8ea30e10abdce910a3e37c78e00d0918548",
        "patch": "@@ -78,24 +78,53 @@ def get_symlink_files():\n             ret.append(f.decode('utf-8').split(\"\\t\")[1])\n     return ret\n \n-def tree_sha512sum():\n-    files = sorted(subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', '--name-only', 'HEAD']).splitlines())\n+def tree_sha512sum(commit='HEAD'):\n+    # request metadata for entire tree, recursively\n+    files = []\n+    blob_by_name = {}\n+    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n+        name_sep = line.index(b'\\t')\n+        metadata = line[:name_sep].split() # perms, 'blob', blobid\n+        assert(metadata[1] == b'blob')\n+        name = line[name_sep+1:]\n+        files.append(name)\n+        blob_by_name[name] = metadata[2]\n+\n+    files.sort()\n+    # open connection to git-cat-file in batch mode to request data for all blobs\n+    # this is much faster than launching it per file\n+    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n     overall = hashlib.sha512()\n     for f in files:\n+        blob = blob_by_name[f]\n+        # request blob\n+        p.stdin.write(blob + b'\\n')\n+        p.stdin.flush()\n+        # read header: blob, \"blob\", size\n+        reply = p.stdout.readline().split()\n+        assert(reply[0] == blob and reply[1] == b'blob')\n+        size = int(reply[2])\n+        # hash the blob data\n         intern = hashlib.sha512()\n-        fi = open(f, 'rb')\n-        while True:\n-            piece = fi.read(65536)\n-            if piece:\n+        ptr = 0\n+        while ptr < size:\n+            bs = min(65536, size - ptr)\n+            piece = p.stdout.read(bs)\n+            if len(piece) == bs:\n                 intern.update(piece)\n             else:\n-                break\n-        fi.close()\n+                raise IOError('Premature EOF reading git cat-file output')\n+            ptr += bs\n         dig = intern.hexdigest()\n+        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n+        # update overall hash with file hash\n         overall.update(dig.encode(\"utf-8\"))\n         overall.update(\"  \".encode(\"utf-8\"))\n         overall.update(f)\n         overall.update(\"\\n\".encode(\"utf-8\"))\n+    p.stdin.close()\n+    if p.wait():\n+        raise IOError('Non-zero return value executing git cat-file')\n     return overall.hexdigest()\n \n "
      }
    ]
  }
]