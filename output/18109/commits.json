[
  {
    "sha": "470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzBlMmFjNjAyZWQyZDZlNjJlNWM4MGYyN2NkMGE2MGM3Y2Y2YmNl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-10T16:59:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-12T14:27:19Z"
      },
      "message": "tests: Avoid hitting some known minor tinyformat issues when fuzzing strprintf(...)",
      "tree": {
        "sha": "98b726c8305d026050b444b6075052d99b388ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98b726c8305d026050b444b6075052d99b388ea3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b063cb690f5735db87e760afc6ace30a7a219447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b063cb690f5735db87e760afc6ace30a7a219447",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b063cb690f5735db87e760afc6ace30a7a219447"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 33,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d5be1070bd481fe2103d77e1cb294b4a4495280d",
        "filename": "src/test/fuzz/strprintf.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 14,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce/src/test/fuzz/strprintf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce/src/test/fuzz/strprintf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/strprintf.cpp?ref=470e2ac602ed2d6e62e5c80f27cd0a60c7cf6bce",
        "patch": "@@ -8,7 +8,6 @@\n #include <util/strencodings.h>\n \n #include <algorithm>\n-#include <cassert>\n #include <cstdint>\n #include <string>\n #include <vector>\n@@ -27,15 +26,15 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     // * strprintf(\"%.222222200000000$\", 1.1);\n     //\n     // Upstream bug report: https://github.com/c42f/tinyformat/issues/70\n-    if (format_string.find(\"%\") != std::string::npos && digits_in_format_specifier >= 7) {\n+    if (format_string.find('%') != std::string::npos && digits_in_format_specifier >= 7) {\n         return;\n     }\n \n     // Avoid triggering the following crash bug:\n     // * strprintf(\"%1$*1$*\", -11111111);\n     //\n     // Upstream bug report: https://github.com/c42f/tinyformat/issues/70\n-    if (format_string.find(\"%\") != std::string::npos && format_string.find(\"$\") != std::string::npos && format_string.find(\"*\") != std::string::npos && digits_in_format_specifier > 0) {\n+    if (format_string.find('%') != std::string::npos && format_string.find('$') != std::string::npos && format_string.find('*') != std::string::npos && digits_in_format_specifier > 0) {\n         return;\n     }\n \n@@ -96,7 +95,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     try {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 13)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 5)) {\n         case 0:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeRandomLengthString(32));\n             break;\n@@ -115,32 +114,52 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 5:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeBool());\n             break;\n-        case 6:\n+        }\n+    } catch (const tinyformat::format_error&) {\n+    }\n+\n+    if (format_string.find('%') != std::string::npos && format_string.find('c') != std::string::npos) {\n+        // Avoid triggering the following:\n+        // * strprintf(\"%c\", 1.31783e+38);\n+        // tinyformat.h:244:36: runtime error: 1.31783e+38 is outside the range of representable values of type 'char'\n+        return;\n+    }\n+\n+    if (format_string.find('%') != std::string::npos && format_string.find('*') != std::string::npos) {\n+        // Avoid triggering the following:\n+        // * strprintf(\"%*\", -2.33527e+38);\n+        // tinyformat.h:283:65: runtime error: -2.33527e+38 is outside the range of representable values of type 'int'\n+        // * strprintf(\"%*\", -2147483648);\n+        // tinyformat.h:763:25: runtime error: negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself\n+        return;\n+    }\n+\n+    try {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 7)) {\n+        case 0:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<float>());\n             break;\n-        case 7:\n+        case 1:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<double>());\n             break;\n-        case 8:\n+        case 2:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int16_t>());\n             break;\n-        case 9:\n+        case 3:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint16_t>());\n             break;\n-        case 10:\n+        case 4:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int32_t>());\n             break;\n-        case 11:\n+        case 5:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n             break;\n-        case 12:\n+        case 6:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int64_t>());\n             break;\n-        case 13:\n+        case 7:\n             (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n             break;\n-        default:\n-            assert(false);\n         }\n     } catch (const tinyformat::format_error&) {\n     }"
      }
    ]
  }
]