laanwj,2020-04-30 13:48:07,"Not sure if we care about this case, but this adds a strict assumption that CAmount is a typedef of an primitive integer type.",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-621863930,621863930,
MarcoFalke,2020-04-30 14:05:24,"Yeah, I thought about making a simple setter/getter to not leak the std::atomic implementation detail from `net` to `net_processing`, but that seemed over-engineering that can be done when it is needed.",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-621874268,621874268,
hebasto,2020-04-30 20:56:06,"> Not sure if we care about this case, but this adds a strict assumption that CAmount is a typedef of an primitive integer type.\n\nThis assumption is already used: https://github.com/bitcoin/bitcoin/blob/e5b9308920a151946b83694fe1701d90316a2a9e/src/qt/bitcoin.cpp#L442-L443\n\n~But I'd not exposing `CAmount` implementation details.~\n\n~Concept \~0.~\n\nEDIT: I've [reconsidered](https://gi",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-622107009,622107009,
MarcoFalke,2020-05-04 11:12:12,"> But I'd not exposing CAmount implementation details.\n\n@hebasto I can't parse this sentence. Mind to explain? We already assume that the type is `CAmount` everywhere. The only thing this pull changes is removing a bunch of boilerplate code used for overkill locking behavior.",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-623402244,623402244,
laanwj,2020-05-04 13:31:31,Unless a performance improvement can be demonstrated I'm not sure this change is really worth it.,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-623465452,623465452,
MarcoFalke,2020-05-04 13:35:22,"It is mostly about the removed code (11 lines), and cutting down on the number of locks put on the stack at the same time, which complicates review looking out for potential lock contention.",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-623467705,623467705,
MarcoFalke,2020-05-04 13:38:05,Performance wise this should have no effect. Reading from the mempool is orders of magnitude slower than taking a lock on a recursive mutex (even with lock contention debugging enabled).,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-623469216,623469216,
hebasto,2020-05-05 10:29:10,"> > But I'd not exposing CAmount implementation details.\n> \n> @hebasto I can't parse this sentence. Mind to explain? We already assume that the type is `CAmount` everywhere. The only thing this pull changes is removing a bunch of boilerplate code used for overkill locking behavior.\n\n@MarcoFalke Apologies for my confusing comment.\nI forgot that `std::atomic` template may be instantiated w",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-623976173,623976173,
DrahtBot,2020-05-27 21:40:01,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-634956550,634956550,
MarcoFalke,2020-06-09 00:51:31,Rebased,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-640963260,640963260,
jnewbery,2020-11-07 11:32:55,"utACK fa3c2c25e\n\nAll this stuff should move to `Peer` in net_processing, but there's no harm simplifying it where it is now.",https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-723434414,723434414,
MarcoFalke,2021-01-07 14:31:52,Rebased due to trivial conflict in adjacent line,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-756151894,756151894,
jnewbery,2021-01-07 15:00:29,utACK fad1f0fd33e5e7a65b702237c7ca8e1b694852d2,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-756168637,756168637,
practicalswift,2021-01-10 18:57:41,cr ACK fad1f0fd33e5e7a65b702237c7ca8e1b694852d2: patch looks correct,https://github.com/bitcoin/bitcoin/pull/18819#issuecomment-757525666,757525666,
promag,2020-05-04 10:24:45,Alternative is `const CFeeRate filterrate{CAmount(pto->m_tx_relay->minFeeFilter)}` but I prefer being explicit with atomic load.,https://github.com/bitcoin/bitcoin/pull/18819#discussion_r419341197,419341197,src/net_processing.cpp
hebasto,2020-05-14 07:44:50,"For consistency, could be used both `load()` and `store()`, or none of them?",https://github.com/bitcoin/bitcoin/pull/18819#discussion_r424933927,424933927,src/net_processing.cpp
hebasto,2020-11-07 08:53:33,"nit: Make atomic operations explicit:\n```suggestion\n        stats.minFeeFilter = m_tx_relay->minFeeFilter.load();\n```",https://github.com/bitcoin/bitcoin/pull/18819#discussion_r519154635,519154635,src/net.cpp
hebasto,2020-11-07 08:54:17,"nit: Make atomic operations explicit:\n```suggestion\n                pfrom.m_tx_relay->minFeeFilter.store(newFeeFilter);\n```",https://github.com/bitcoin/bitcoin/pull/18819#discussion_r519154706,519154706,src/net_processing.cpp
MarcoFalke,2021-01-07 14:32:52,Going to leave as is to minimize the diff,https://github.com/bitcoin/bitcoin/pull/18819#discussion_r553363621,553363621,src/net_processing.cpp
MarcoFalke,2021-01-07 14:33:10,"\n\nGoing to leave as is to minimize the diff\n",https://github.com/bitcoin/bitcoin/pull/18819#discussion_r553363834,553363834,src/net.cpp
MarcoFalke,2021-01-07 14:33:40,"\n\nGoing to leave as is",https://github.com/bitcoin/bitcoin/pull/18819#discussion_r553364199,553364199,src/net_processing.cpp
