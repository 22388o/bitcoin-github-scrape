DrahtBot,2019-08-23 00:52:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17562](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17562.html) (WIP: Validation: Remove ConnectTrace and Pe",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524131064,524131064,
jnewbery,2019-08-24 17:56:10,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524569491,524569491,
jkczyz,2019-09-03 18:14:03,"Addressed all comments and add correct formatting for valid `CValidationState` in b303865.\n\nAlso updated `CValidationState` accessors in 3ff8755 to return strings by constant reference to avoid copying. Although this means the references are only valid for the lifetime of the object, which should be okay.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841,527575841,
jnewbery,2019-10-09 22:03:26,"I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\n\n> updated CValidationState accessors in 3ff8755 to return strings by constant reference to avoid copying.\n\nWas this required for the PR? Those accessors aren't use",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-540222219,540222219,
jkczyz,2019-10-17 19:40:23,"> I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\n> \n\nI would be hesitant to add a functional test only to check for informational logging. Is there an existing a test where all these events are exercised? Not sure",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180,543330180,
jkczyz,2019-10-17 22:33:23,"@jnewbery I have some concerns about this additional logging. Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category. This was not the case prior to that PR since a macro was used for logging.\n\nGiven the heavy amount of logging added in this PR, should the function vs macro approach for logging be revisited? Typically, ",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763,543388763,
MarcoFalke,2019-10-18 13:03:52,"> Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\n\nHuh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543733154,543733154,
jkczyz,2019-10-18 16:36:59,"> > Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\n> \n> Huh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.\n\nBy evaluation I mean at the call site of `LogPrint`. While this doesn't make a dif",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543826931,543826931,
MarcoFalke,2019-10-18 16:57:12,"Ah, right",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543835460,543835460,
jkczyz,2019-10-20 21:35:54,"> IMO, [6c730c3](https://github.com/bitcoin/bitcoin/commit/6c730c3926d1871d8ce4c63eb6752808d7c3484a) commit is outside the original PR goal.\n> Also `string` (i.e., `basic_string<char>`) offers move semantics; so it can be efficiently return by value.\n\nI removed the commit. But I don't believe move semantics apply here as the function is returning a member variable.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544295197,544295197,
jnewbery,2019-10-21 18:18:44,"> I removed the commit. (https://github.com/bitcoin/bitcoin/commit/6c730c3926d1871d8ce4c63eb6752808d7c3484a)\n\nThanks!\n\nI've tested this and it works great. I think we need to resolve this question: https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763 before merging this PR. It seems reasonable to me to change logging back to using a macro for the reasons you suggest. Adding",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544641770,544641770,
jkczyz,2019-10-22 00:01:16,"> I've tested this and it works great. I think we need to resolve this question: [#16688 (comment)](https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763) before merging this PR. It seems reasonable to me to change logging back to using a macro for the reasons you suggest. Adding a `GetHash()` call to every validation interface call, even when logging is disabled, seems a shame. I'd",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544756845,544756845,
MarcoFalke,2019-10-22 12:47:27,"If you revert #14209, please make it as slim as possible (without the USE_COVERAGE guard, which mostly did only harm)",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544945041,544945041,
jnewbery,2019-10-22 14:42:25,"> I would be hesitant to add a functional test only to check for informational logging. Is there an existing a test where all these events are exercised? Not sure if it is worth adding regardless.\n\nYeah, I agree that this isn't necessary.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544996828,544996828,
jkczyz,2019-10-31 18:29:54,"> _Rename CMainSignals::MempoolEntryRemoved to TransactionRemovedFromMempool_ and _Format CValidationState properly in all cases_ could be pulled out into their own PR while we're waiting for that, although note that _Format CValidationState properly in all cases_ conflicts with [0053e16](https://github.com/bitcoin/bitcoin/commit/0053e16714323c1694c834fdca74f064a1a33529).\n\nI've rebased and res",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548510011,548510011,
jnewbery,2019-11-01 15:12:28,"It appears that the function name isn't being captured properly:\n\n```\n2019-11-01T15:06:44.834237Z [loadblk] Enqueuing BlockConnected: block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 block height=0\n2019-11-01T15:06:44.834255Z [loadblk] Enqueuing UpdatedBlockTip: new block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 fork block hash=null (",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548825215,548825215,
jkczyz,2019-11-01 20:32:29,"> It appears that the function name isn't being captured properly:\n\nFixed in 9eb373c.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548940603,548940603,
jnewbery,2019-11-05 18:41:38,Tested ACK f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-549961497,549961497,
ariard,2019-11-05 23:09:16,Tested ACK f871e27,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-550064918,550064918,
jnewbery,2019-11-08 20:47:16,Rebased on master and added height logging to `BlockDisconnected` here: https://github.com/jnewbery/bitcoin/tree/pr16688.1 . Feel free to take it!,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-551984040,551984040,
jnewbery,2019-11-08 23:25:02,"Tested ACK 741cab0a7dcfe07860db8ad73678fbfde7eb6ada\n\nYour latest push has different emails for the Author and Committer in the commits. I'm not sure if that was intentional or you want to change it back.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552029949,552029949,
jkczyz,2019-11-11 21:21:07,"> Tested ACK [741cab0](https://github.com/bitcoin/bitcoin/commit/741cab0a7dcfe07860db8ad73678fbfde7eb6ada)\n> \n> Your latest push has different emails for the Author and Committer in the commits. I'm not sure if that was intentional or you want to change it back.\n\nUpdated and rebased.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552621471,552621471,
jnewbery,2019-11-11 22:12:55,ACK cd6bf9970fdebc878cfc2d3b80bfc6cd4d39ffd7,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552640474,552640474,
ariard,2019-11-14 16:42:34,ACK cd6bf99. Change since last time is block height in `BlockDisconnected` log.,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-553972937,553972937,
jkczyz,2019-11-22 20:11:14,Rebased and resolved merge conflicts. The commits for formatting `MemPoolRemovalReason` and renaming `CMainSignals::MempoolEntryRemoved` have been removed since #14384 made them obsolete. But just realized @jnewbery asked to have the reason added in this PR if the #14384 was merged first.,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557676990,557676990,
jnewbery,2019-11-22 20:40:08,"> @jnewbery asked to have the reason added in this PR\n\nIt's not essential but I think logging the reason is definitely a nice-to-have. None of the clients need access to the reason (yet) so it could just be logged and dropped in the validationinterface.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557685952,557685952,
jkczyz,2019-11-22 21:24:57,"> It's not essential but I think logging the reason is definitely a nice-to-have. None of the clients need access to the reason (yet) so it could just be logged and dropped in the validationinterface.\n\nDone in 34d6486.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557700110,557700110,
jnewbery,2019-11-22 21:43:41,Tested ACK 34d6486de309d24d040a900fe3492582dc6bbb45,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557705599,557705599,
jnewbery,2019-11-22 21:48:31,"I'd love to see this merged soon. Once you've had validationinterface logging for test debugging, you don't want to go back!",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557707056,557707056,
jkczyz,2019-11-23 01:23:34,"The linter says 34d6486 introduced a circular dependency:\n\n```\nA new circular dependency in the form of ""txmempool -> validationinterface -> txmempool"" appears to have been introduced.\n```\n\nTo break this, I'd have to move both `MemPoolRemovalReason` and `MemPoolRemovalReasonString` elsewhere. Thoughts?",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557751161,557751161,
jnewbery,2019-11-23 03:09:13,"> To break this, I'd have to move both MemPoolRemovalReason and MemPoolRemovalReasonString elsewhere. Thoughts?\n\nJust remove that commit. No need to make this PR more complex just to log the removal reason. It can be done in a follow-up.",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557760416,557760416,
jnewbery,2019-11-25 15:28:31,Tested ACK 0cadb123b,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-558206079,558206079,
ariard,2019-11-25 19:26:41,"ACK 0cadb12, only changes are dropping commits/removing arg following #14384 merge",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-558303961,558303961,
hebasto,2019-12-21 21:10:03,Concept ACK. Will test.,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-568212213,568212213,
hebasto,2019-12-22 08:50:13,"There are some code organization concerns.\n\nI believe that headers and forward class declaration should not be touched in the ""_Format CValidationState properly in all cases_"" commit (ee4d66a38c5c09161f8a3e63047db6b6908687f4).\n\nInstead, `<consensus/validation.h>` should be included to `validationinterface.cpp` in the ""_Add logging for CValidationInterface events_"" commit (0cadb123bad37a2c2",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-568243356,568243356,
jkczyz,2020-01-03 20:17:43,@hebasto @ryanofsky Thanks for the review! I've addressed all comments.,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570686368,570686368,
jnewbery,2020-01-03 21:07:38,ACK f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570698525,570698525,
hebasto,2020-01-03 22:06:11,ACK f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f,https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570712502,570712502,
ariard,2020-01-03 23:10:38,"ACK f9abf4a, only changes since 0cadb12 are replacing log indication `VALIDATIONINTERFACE` by `VALIDATION` and avoiding a forward declaration with a new include",https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570725502,570725502,
ariard,2019-08-23 00:21:43,Compiling without including transaction header (already included in txmempool.h),https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316934773,316934773,src/validationinterface.cpp
ariard,2019-08-23 00:56:46,What's the rational defining func instead of directly as LogPrint arg ?,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940139,316940139,src/validationinterface.cpp
ariard,2019-08-23 00:59:03,Could you use a ternary to check pindexFork instead of two call to LogPrint? Also fInitialDownload could be logged,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940553,316940553,src/validationinterface.cpp
ariard,2019-08-23 01:03:00,"Thanks to pindex, maybe log the height too",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316941180,316941180,src/validationinterface.cpp
ariard,2019-08-23 01:09:35,"nit: maybe ""top block hash %s bottom block hash""",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942251,316942251,src/validationinterface.cpp
ariard,2019-08-23 01:11:03,"You may add MemPoolRemovalReasonString somewhere, like TransactionErrorString in util/error.cp. IMO that's an interesting info to log",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942492,316942492,src/validationinterface.cpp
hebasto,2019-08-23 07:12:56,"From the [Developer Notes - Source code organization](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization):\n> - Every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.\n>    -  _Rationale_: Excluding headers",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317000871,317000871,src/validationinterface.cpp
ariard,2019-08-23 13:56:48,"Ah thanks, didn't know it!",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317143843,317143843,src/validationinterface.cpp
jkczyz,2019-08-26 15:58:14,"Using it directly will give the name of the lambda, i.e. `operator()`, which is not desirable.\n\nIdeally, I could use `__func__` in the lambda capture. However, this is not allowed because it has static storage duration. With C++14, we could use capture initializers instead.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317672379,317672379,src/validationinterface.cpp
jkczyz,2019-08-28 21:55:34,"I believe the bottom block hash will always be the genesis block hash, so logging it probably won't be very useful. Plus it may be a little confusing given only the top block is being flushed.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r318809816,318809816,src/validationinterface.cpp
jkczyz,2019-09-03 18:07:11,Good call! I had misinterpreted the frequency of this being non-null. Fixed in 4bacb54.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406870,320406870,src/validationinterface.cpp
jkczyz,2019-09-03 18:07:16,Added in 4bacb54.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406900,320406900,src/validationinterface.cpp
jkczyz,2019-09-03 18:07:19,Done in 504d009.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406935,320406935,src/validationinterface.cpp
jnewbery,2019-10-08 20:59:48,"nit: Refer to this as ""IBD"" or ""Initial Block Download"" rather than ""initial download"". I suggest: `""%s: new block hash=%s fork block hash=%s (In IBD=%d)\n""` or similar.\n\n(These are low-level logs. Anyone reading them should understand what IBD means.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332730670,332730670,src/validationinterface.cpp
jnewbery,2019-10-08 21:06:15,"nit: call this the 'txid' instead of 'tx hash', and also log the wtxid (use `GetWitnessHash()`)",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332733417,332733417,src/validationinterface.cpp
jnewbery,2019-10-08 21:11:25,"nit: I think these strings could just be `EXPIRY`, `SIZELIMIT`, etc. These strings are for logs only, so will only be read by engineers.\n\nTrying to make these strings more generally accessible obscures some of the nuance. For example `MemPoolRemovalReason::REORG` means that a transaction was removed during a re-org because it spent a coinbase transaction that is no longer mature, or because it",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332735487,332735487,src/txmempool.cpp
jnewbery,2019-10-08 21:37:39,"For all of these async validationinterface callbacks, I think it'd be useful to log both when the event is enqueued and dequeued, with some kind of counter to correlate the two logs. Thoughts?",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332745377,332745377,src/validationinterface.cpp
jkczyz,2019-10-16 00:01:31,"The scheduler client guarantees these callbacks are executed serially in the order in which they were enqueued. Unless there is a need to correlate the enqueuing with the execution of `BlockChecked` and `NewPowValidBlock`, I'm hesitant to add more complexity to the code.\n\nIs there a specific case where you think the additional logging would be useful? If so, would correlation using data from t",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335228213,335228213,src/validationinterface.cpp
jnewbery,2019-10-16 15:35:52,"I think this: https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381265760 would have been easier to spot with logging when the callbacks were enqueued, and it would have been easier to correlate those enqueue events with the thread that was running.\n\nYou're probably right that there's no need for a counter and that the data from the log message is enough to correlate the enqueue/deq",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335552731,335552731,src/validationinterface.cpp
jkczyz,2019-10-17 19:11:44,"Done. In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this though let me know if there is a better way. Defining the helpers in the header would have required moving `MainSignalsInstance` into the header.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336179659,336179659,src/validationinterface.cpp
jkczyz,2019-10-17 22:11:09,"FYI, I had to make some minor changes to placate the linter. It was giving the following failures:\n\n```\nsrc/validationinterface.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrint(BCLog::VALIDATIONINTERFACE, fmt, args...)\n^---- failure generated from test/lint/lint-format-strings.sh\nAll calls to LogPrintf() and LogPrint() should be terminated with \n\nsrc/v",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336249532,336249532,src/validationinterface.cpp
mzumsande,2019-10-18 23:06:26,"> In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this(...)\n\nThis could lead to portability issues, see e.g. https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file. I tried something similar recently in another PR, and the li",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336703301,336703301,src/validationinterface.cpp
jkczyz,2019-10-19 00:38:19,"Yeah, that could very well be the case. That said, if we want to avoid argument evaluation when the logging category is not enabled, I would need to turn these into macros. See discussion starting in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763. Then I could remove those template method declarations from the header.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336713974,336713974,src/validationinterface.cpp
practicalswift,2019-10-19 15:56:32,Why this change? :),https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336742750,336742750,src/consensus/validation.h
jkczyz,2019-10-19 18:08:38,"See https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180.\n\n@jnewbery Regarding my previous comment, I'm also happy to remove this commit if that's preferred. Seems I had not read your comment closely enough about it not being performance critical. Though note my concerns about macro vs function logging.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336747711,336747711,src/consensus/validation.h
practicalswift,2019-10-19 18:34:39,"What is the object lifetime of `strRejectReason` and `strDebugMessage`?\n\nAre they guaranteed to outlive the callers of `GetRejectReason` or `GetDebugMessage`?",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336748680,336748680,src/consensus/validation.h
jkczyz,2019-10-20 01:45:18,Their lifetimes are that of the corresponding `CValidationState` as mentioned in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841. All current uses are guaranteed to outlive the callers as they either make a copy or are passed by const reference to other functions that do something similar. There's no such guarantee for future callers though.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336759875,336759875,src/consensus/validation.h
practicalswift,2019-10-20 14:12:10,"I don't think 6c730c3926d1871d8ce4c63eb6752808d7c3484a is a good idea: it introduces a very sharp edge in consensus critical code which is not offset by any measurable gain AFAICT.\n\nWe should always err on the side of caution when touching consensus critical code: if there is a trade-off between safety (current or future) and speed, then safety is generally much more important. In the cases wh",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336780553,336780553,src/consensus/validation.h
hebasto,2019-10-20 16:40:13,"```suggestion\n    } // no default case, so the compiler can warn about missing cas\n```\n\nSee: [Developer Notes - `switch` statement on an enumeration example](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures)",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336786215,336786215,src/txmempool.cpp
hebasto,2019-10-20 17:09:15,Could `event` parameter be a const reference?,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336787375,336787375,src/validationinterface.cpp
jkczyz,2019-10-20 21:27:00,Fair enough. I've removed 6c730c3.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336798395,336798395,src/consensus/validation.h
jnewbery,2019-10-21 18:02:17,This does indeed seem to have caused a build failure: https://travis-ci.org/bitcoin/bitcoin/jobs/600461225,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337159481,337159481,src/validationinterface.cpp
jkczyz,2019-10-21 18:40:19,"Indeed. It seems variadic arguments within lambda captures are not supported by that compilation environment. At least that's what I've gleaned from a similar issue (https://github.com/Ultimaker/CuraEngine/issues/426#issuecomment-269451925). However, this shouldn't be a problem if I change it into a macro.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337177094,337177094,src/validationinterface.cpp
jkczyz,2019-10-30 23:14:06,"Turns out changing `EnqueueAndLogEvent` into a macro has some implications that are making this infeasible. Consider:\n\n```c++\n#define ENQUEUE_AND_LOG_EVENT(event, fmt, ...)                                             \\n    do {                                                                                   \\n        LOG_EVENT(""Enqueuing "" fmt, __VA_ARGS__);                             ",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340900721,340900721,src/validationinterface.cpp
jkczyz,2019-10-31 00:30:11,"Actually, it looks like using a default capture instead of `__VA_ARGS__` will do what I need!",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340917763,340917763,src/validationinterface.cpp
jkczyz,2019-10-31 18:23:15,Implemented as a macro in 6ab424c.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299111,341299111,src/validationinterface.cpp
jkczyz,2019-10-31 18:23:53,No longer applicable as this is now a macros in 6ab424c.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299386,341299386,src/validationinterface.cpp
jnewbery,2019-11-01 20:58:02,"At this point, it might just be easier to hard-code the function name into the log strings, or do you see a down-side to that?",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341748783,341748783,src/validationinterface.cpp
jkczyz,2019-11-01 22:09:23,"The downside is that the logging can go out of sync if the method is renamed (like in dd2855d) and that the format string is longer.\n\nNote this implementation was used in an earlier version of the PR: https://github.com/bitcoin/bitcoin/pull/16688#pullrequestreview-278747465 (see second outdated comment). It was no longer needed when I added a helper method but needed again once I switched to a",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341767912,341767912,src/validationinterface.cpp
jnewbery,2019-11-04 20:21:36,nit: `fInitialDownload ? 'true' : 'false'`,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342251600,342251600,src/validationinterface.cpp
jnewbery,2019-11-04 20:31:38,Observation: This should be updated to also log the height when #15931 is merged (specifically commit https://github.com/bitcoin/bitcoin/pull/15931/commits/7d0f76a83e50328aaa8e7836b533ea0ea10d3c53),https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342255685,342255685,src/validationinterface.cpp
jkczyz,2019-11-05 18:37:41,"Done in f871e27 by changing `%d` to `%s`, as tinyformat does the conversion if using that specifier.\n\nhttps://github.com/c42f/tinyformat#special-cases-for-p-c-and-s",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342728594,342728594,src/validationinterface.cpp
jkczyz,2019-11-05 18:39:30,ACK. Happy to wait for that to be merged if you prefer.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342729535,342729535,src/validationinterface.cpp
ariard,2019-11-05 22:14:54,nit: const? ,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342825836,342825836,src/txmempool.h
ariard,2019-11-05 22:20:24,"Not a C++ expert, could you explain or point to why macro prevent to evaluate argument there? I mean aren't they replaced at preprocessing and we know flag only at runtime?",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342827985,342827985,src/validationinterface.cpp
sipa,2019-11-05 22:41:01,"compare the macro expansion:\n\n```c++\nif (debug_foo) {\n    LogPrintf(""Foobar %i"", ExpensiveToComputeFunction());\n}\n```\n\nwith\n\n```c++\nLogPrint(BCLog::FOO, ""Foobar %i"", ExpensiveToComputeFunction());\n```\n\nIn the first example, `ExpensiveToComputeFunction` is not invoked if `debug_foo` is false. In the second one it's invoked, but then disregarded by `LogPrint`.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342835637,342835637,src/validationinterface.cpp
ariard,2019-11-05 23:06:38,"Thanks but got it, `LogPrint` has been changed to a macro in https://github.com/bitcoin/bitcoin/pull/17218, was still thinking it was a function...\n\nThat's said shouldn't we use the `LOG_PRINT` convention as for any other macro ?",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342844017,342844017,src/validationinterface.cpp
jkczyz,2019-11-05 23:21:26,Do you mean remove the const from the parameter?,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342848451,342848451,src/txmempool.h
ariard,2019-11-06 01:14:29,"Nevermind, that's not a class method, useless to put const in function signature",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342876449,342876449,src/txmempool.h
jkczyz,2019-11-07 04:57:32,"I'm using the convention in this PR but did not change it in the referenced PR for `LogPrint` since it was simply partially reverting a commit. It would have been a much larger change to update all the call sites, and that's something I'd be hesitant in undertaking without enough support for the change.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r343476465,343476465,src/validationinterface.cpp
jnewbery,2019-11-08 11:36:13,#15931 is merged,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344134808,344134808,src/validationinterface.cpp
jkczyz,2019-11-08 22:52:44,Updated in 741cab0.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344397553,344397553,src/validationinterface.cpp
jkczyz,2019-11-22 20:02:32,No longer needed since rebasing removed the need for this code.,https://github.com/bitcoin/bitcoin/pull/16688#discussion_r349771939,349771939,src/txmempool.cpp
ryanofsky,2019-12-26 22:08:05,"In commit ""Add VALIDATIONINTERFACE to BCLog::LogFlags"" (389d423a252e43d0b08871f8ae5b66a84a8a217c)\n\nWould change names to `VALIDATION, ""validation""`. These are just validation events. Fact that they are printed in the validationinterface source file instead of the validation one is an implementation detail that could change and would be arcane to someone just trying to configure logging categor",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541021,361541021,src/logging.cpp
ryanofsky,2019-12-26 22:12:38,"In commit ""Format CValidationState properly in all cases"" (ee4d66a38c5c09161f8a3e63047db6b6908687f4)\n\nReplacing forward declaration with a full include seems unnecessary here, just making the diff bigger and perhaps unnecessarily slowing down compilation.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541576,361541576,src/util/validation.h
ryanofsky,2019-12-26 22:22:29,"In commit ""Format CValidationState properly in all cases"" (ee4d66a38c5c09161f8a3e63047db6b6908687f4)\n\nI'm a little confused by all the changes in this commit. As far as I can tell the only change that affects behavior is adding `if (state.IsValid()) return ""Valid"";` at the top of this function, and everything else is a rewrite / style cleanup. Not a big deal, but in the future it might be good",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361542659,361542659,src/util/validation.cpp
ryanofsky,2019-12-26 22:27:18,"In commit ""Add logging for CValidationInterface events"" (0cadb123bad37a2c224834a3d98bed474c661c21)\n\nWhitespace is changing unnecessarily (and format is nonstandard, brace should go on new line)",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361543177,361543177,src/validationinterface.cpp
jkczyz,2020-01-03 19:10:26,"I was largely trying to avoid style changes and conform with the local conventions in the file. However, in the interim the brace was moved in https://github.com/bitcoin/bitcoin/commit/10b4729e33f76092bd8cfa06d1a5e0a066436f76#diff-e8d9e22d9683f73a9fb8399be0dab640R159 to use the standard conventions.\n\nNot sure what is preferred, but I don't mind changing it back to reduce the diff size.",https://github.com/bitcoin/bitcoin/pull/16688#discussion_r362925681,362925681,src/validationinterface.cpp
