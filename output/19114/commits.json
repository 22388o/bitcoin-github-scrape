[
  {
    "sha": "fa41c657022b8f99c8e6718a0e33c5838c412a0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxYzY1NzAyMmI4Zjk5YzhlNjcxOGEwZTMzYzU4MzhjNDEyYTBi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-30T14:11:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-21T10:40:18Z"
      },
      "message": "rpc: Simplify GetAllOutputTypes with the Join helper\n\nThis commit does not change behavior",
      "tree": {
        "sha": "04e5a52fbc8bc87062e841559c50ce7a5970925a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04e5a52fbc8bc87062e841559c50ce7a5970925a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa41c657022b8f99c8e6718a0e33c5838c412a0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg/Swv/YvXwn4Lz8yvxKL2ixOHnM1oBLB6YwUTiNsWuSXWS14zSiz5zkuBVx4nn\nbBQox+eL/SHMPkMySfqDWg1G23g/F2kZ46yyFp1j/WtmIq/cVRRn9v3WK7Z46bVw\njlwGFstatGk0DM4Zpc6ncR14jVj0/e2i2O6K96MuATUn1BsyShGz6ATHjiu1RaTJ\nleTND25nHRtkzGKmagYtORgsQvtA1/o3M807KulvhXA8zKscLOz6Tbod3KDl/VI9\ngcWcnzNnjqwCvPQHEuc/gnJETVIQ1M9v7T2vhJegjZL3LoaYAKsbuqX+cmLhqFCz\nvdgKzkYLCfMqA2MjnvSuIhnUkDKn5XPfQA6MDVWShtXrOqRwF5Mx5OmhUpjVZUQb\nZ02QG0Rau/1pK7tXpxc604ymkM5SGEZvhPkB6tZbIVJRk1b6lZWCdi6P4sjJWiDE\nawpkbTWgydWR1nOP4PNB4yM+ZxHgN5qnEAxUf68rtHxYkKxOfoQiXeannzIbCz/5\nHgDS724E\n=/lFt\n-----END PGP SIGNATURE-----",
        "payload": "tree 04e5a52fbc8bc87062e841559c50ce7a5970925a\nparent 02b26ba1c119c7732f09f09e3b94f75effa569c0\nauthor MarcoFalke <falke.marco@gmail.com> 1590847862 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592736018 -0400\n\nrpc: Simplify GetAllOutputTypes with the Join helper\n\nThis commit does not change behavior\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41c657022b8f99c8e6718a0e33c5838c412a0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41c657022b8f99c8e6718a0e33c5838c412a0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41c657022b8f99c8e6718a0e33c5838c412a0b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02b26ba1c119c7732f09f09e3b94f75effa569c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b26ba1c119c7732f09f09e3b94f75effa569c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02b26ba1c119c7732f09f09e3b94f75effa569c0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a05ed8695486e9651e45e2672fd81f0978d519f3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41c657022b8f99c8e6718a0e33c5838c412a0b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41c657022b8f99c8e6718a0e33c5838c412a0b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa41c657022b8f99c8e6718a0e33c5838c412a0b",
        "patch": "@@ -511,12 +511,11 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n \n static std::string GetAllOutputTypes()\n {\n-    std::string ret;\n+    std::vector<std::string> ret;\n     for (int i = TX_NONSTANDARD; i <= TX_WITNESS_UNKNOWN; ++i) {\n-        if (i != TX_NONSTANDARD) ret += \", \";\n-        ret += GetTxnOutputType(static_cast<txnouttype>(i));\n+        ret.emplace_back(GetTxnOutputType(static_cast<txnouttype>(i)));\n     }\n-    return ret;\n+    return Join(ret, \", \");\n }\n \n static UniValue decodescript(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "fa58469c770d8c935a86462634e4e8cd806aa6e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU4NDY5Yzc3MGQ4YzkzNWE4NjQ2MjYzNGU0ZThjZDgwNmFhNmUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-30T14:13:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-21T10:40:26Z"
      },
      "message": "rpc: Properly use underlying type in GetAllOutputTypes\n\nDon't blindly assume it is int.\n\nIn practice this is usually `unsigned` or `int`, so this commit should\nnot change behavior.",
      "tree": {
        "sha": "148684d56f7a95a997f2afcf03730a657bc86435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/148684d56f7a95a997f2afcf03730a657bc86435"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa58469c770d8c935a86462634e4e8cd806aa6e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgmjwwArPjWgPBIzRoYsDXyETPkjG7K4T7BKrY8GKaAXR9MXskYpq5S5+ZUX3d+\ntuUawLynkn4OCwqrgjkxTzpYsEA+kie1akwQ2Egb/9EbtsT4WPk0RzLmN1kdMKEC\n37YBpjDl4wr47mfyandJbn5IR2c1VWHhB9cno9GwjYKo6jENkgSV2xkuapwBwUKd\ncpZWbupEtWjk/UuGEE/yvNfOICWJDj917QDOGLMkSpHtfigKw8tMGWh4WyHZgevS\nx6tGEJe8mbWX2EOsxdkGWJy/8tLOmSUTpQFUuLS0eApvcQ88VsJCZ4g0IDMdXwAj\nXZWxZYUf3mw1QAGSH9CkYhmDm0+JovKdyuFfsvMfM9/6+p59bgrOhHi0QoDWgNw8\niYphlg5PQ+bLmlU54gPjsqPT3nW5pjuCKUzXjMJucaPaIIayX1iZDxE3w88ZjHR9\ne8h8ENN12VqGbBIjNCngd/majOVUTDb/VlKwcAGj3C9uP0I2vFUIBgrqvX/C6vRN\naPpXpV+H\n=gvuE\n-----END PGP SIGNATURE-----",
        "payload": "tree 148684d56f7a95a997f2afcf03730a657bc86435\nparent fa41c657022b8f99c8e6718a0e33c5838c412a0b\nauthor MarcoFalke <falke.marco@gmail.com> 1590848028 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592736026 -0400\n\nrpc: Properly use underlying type in GetAllOutputTypes\n\nDon't blindly assume it is int.\n\nIn practice this is usually `unsigned` or `int`, so this commit should\nnot change behavior.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa58469c770d8c935a86462634e4e8cd806aa6e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa58469c770d8c935a86462634e4e8cd806aa6e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa58469c770d8c935a86462634e4e8cd806aa6e3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa41c657022b8f99c8e6718a0e33c5838c412a0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41c657022b8f99c8e6718a0e33c5838c412a0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41c657022b8f99c8e6718a0e33c5838c412a0b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e6fe0a7bf0e2297bb1dd9d9849290311079be0e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa58469c770d8c935a86462634e4e8cd806aa6e3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa58469c770d8c935a86462634e4e8cd806aa6e3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa58469c770d8c935a86462634e4e8cd806aa6e3",
        "patch": "@@ -512,7 +512,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n static std::string GetAllOutputTypes()\n {\n     std::vector<std::string> ret;\n-    for (int i = TX_NONSTANDARD; i <= TX_WITNESS_UNKNOWN; ++i) {\n+    using U = std::underlying_type<txnouttype>::type;\n+    for (U i = (U)TX_NONSTANDARD; i <= (U)TX_WITNESS_UNKNOWN; ++i) {\n         ret.emplace_back(GetTxnOutputType(static_cast<txnouttype>(i)));\n     }\n     return Join(ret, \", \");"
      }
    ]
  },
  {
    "sha": "fa95a694c492b267e4038674fd3f338dd215ab48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk1YTY5NGM0OTJiMjY3ZTQwMzg2NzRmZDNmMzM4ZGQyMTVhYjQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-30T14:23:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-21T10:40:33Z"
      },
      "message": "doc: Update outdated txnouttype documentation\n\nAlso, remove scope of txnouttype in fuzz tests temporarily. The next\ncommit will add scopes to all txnouttype.",
      "tree": {
        "sha": "5e4e4dbb1c6cdbb9760a6b2816cb4398a7532241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e4e4dbb1c6cdbb9760a6b2816cb4398a7532241"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa95a694c492b267e4038674fd3f338dd215ab48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUhtnAwAzt7mOoF9CqgtiPPIZmvGGITgo34j+uDWkUguxdys0QhivaVYPG0h1SVt\nlQbHrsHjnbiLEPCvn9hvEetUEASPiuz5lgeYw6e79CpRvMu/C8o0lOJUtqRCR4pb\nQ+Lmi7LR75K2XkDTnKjOBUH7bMqSxAIrXdBeC6DbI5dTzSMsIjZ/vYaPf7NE8JLz\nX63Ba6ps6hHDxufq+2387nrkfYq4SWGR3zdS0lpbWX8qN9v54XjzH28hhLtazi7U\nadSG8wpmlzR5J8YP46zU1BYa14hRnhri5oYJGxlgfjPs2rjaB0cEwQEl51CfLAju\nvKsneHEnx0//C550Us4pSoHBRlEyI+1htxeHtXlcWofrAIasdshIawgYK6Bhwknx\nJTRcgURukFPcnMBmAt6iIZonWSUUSANMp85Pm3/GdnC77R5/ktiNhEcgLSKzU11k\nBZNoO7WANlMMQQch4ri56e0j1/D+SPFFIDbg046Fu5L0nJbl9elmCrEPXPBjVn55\nr5/ivKX3\n=DmcG\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e4e4dbb1c6cdbb9760a6b2816cb4398a7532241\nparent fa58469c770d8c935a86462634e4e8cd806aa6e3\nauthor MarcoFalke <falke.marco@gmail.com> 1590848601 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592736033 -0400\n\ndoc: Update outdated txnouttype documentation\n\nAlso, remove scope of txnouttype in fuzz tests temporarily. The next\ncommit will add scopes to all txnouttype.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa95a694c492b267e4038674fd3f338dd215ab48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa95a694c492b267e4038674fd3f338dd215ab48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa95a694c492b267e4038674fd3f338dd215ab48/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa58469c770d8c935a86462634e4e8cd806aa6e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa58469c770d8c935a86462634e4e8cd806aa6e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa58469c770d8c935a86462634e4e8cd806aa6e3"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "35794deafa2b42bd38b3ea32ab0389b2edda1da3",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa95a694c492b267e4038674fd3f338dd215ab48/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa95a694c492b267e4038674fd3f338dd215ab48/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=fa95a694c492b267e4038674fd3f338dd215ab48",
        "patch": "@@ -56,7 +56,7 @@ std::string GetTxnOutputType(txnouttype t)\n     case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n "
      },
      {
        "sha": "1dbae9d5680561c019489943b88241c0c83562d8",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa95a694c492b267e4038674fd3f338dd215ab48/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa95a694c492b267e4038674fd3f338dd215ab48/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fa95a694c492b267e4038674fd3f338dd215ab48",
        "patch": "@@ -116,8 +116,7 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-enum txnouttype\n-{\n+enum txnouttype {\n     TX_NONSTANDARD,\n     // 'standard' transaction types:\n     TX_PUBKEY,\n@@ -212,7 +211,7 @@ typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash,\n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n \n-/** Get the name of a txnouttype as a C string, or nullptr if unknown. */\n+/** Get the name of a txnouttype as a string */\n std::string GetTxnOutputType(txnouttype t);\n \n /**"
      },
      {
        "sha": "b8541fd037a3c96b1d87c103d66d978754d86a50",
        "filename": "src/test/fuzz/key.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa95a694c492b267e4038674fd3f338dd215ab48/src/test/fuzz/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa95a694c492b267e4038674fd3f338dd215ab48/src/test/fuzz/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key.cpp?ref=fa95a694c492b267e4038674fd3f338dd215ab48",
        "patch": "@@ -160,22 +160,22 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         txnouttype which_type_tx_pubkey;\n         const bool is_standard_tx_pubkey = IsStandard(tx_pubkey_script, which_type_tx_pubkey);\n         assert(is_standard_tx_pubkey);\n-        assert(which_type_tx_pubkey == txnouttype::TX_PUBKEY);\n+        assert(which_type_tx_pubkey == TX_PUBKEY);\n \n         txnouttype which_type_tx_multisig;\n         const bool is_standard_tx_multisig = IsStandard(tx_multisig_script, which_type_tx_multisig);\n         assert(is_standard_tx_multisig);\n-        assert(which_type_tx_multisig == txnouttype::TX_MULTISIG);\n+        assert(which_type_tx_multisig == TX_MULTISIG);\n \n         std::vector<std::vector<unsigned char>> v_solutions_ret_tx_pubkey;\n         const txnouttype outtype_tx_pubkey = Solver(tx_pubkey_script, v_solutions_ret_tx_pubkey);\n-        assert(outtype_tx_pubkey == txnouttype::TX_PUBKEY);\n+        assert(outtype_tx_pubkey == TX_PUBKEY);\n         assert(v_solutions_ret_tx_pubkey.size() == 1);\n         assert(v_solutions_ret_tx_pubkey[0].size() == 33);\n \n         std::vector<std::vector<unsigned char>> v_solutions_ret_tx_multisig;\n         const txnouttype outtype_tx_multisig = Solver(tx_multisig_script, v_solutions_ret_tx_multisig);\n-        assert(outtype_tx_multisig == txnouttype::TX_MULTISIG);\n+        assert(outtype_tx_multisig == TX_MULTISIG);\n         assert(v_solutions_ret_tx_multisig.size() == 3);\n         assert(v_solutions_ret_tx_multisig[0].size() == 1);\n         assert(v_solutions_ret_tx_multisig[1].size() == 33);"
      },
      {
        "sha": "05b76e5979974061388354eb65b131c18de7538e",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa95a694c492b267e4038674fd3f338dd215ab48/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa95a694c492b267e4038674fd3f338dd215ab48/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=fa95a694c492b267e4038674fd3f338dd215ab48",
        "patch": "@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n     BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n \n-    // TX_WITNESS with incorrect program size\n+    // TX_WITNESS_UNKNOWN with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n     BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n@@ -227,7 +227,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     BOOST_CHECK(ExtractDestination(s, address));\n     BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n \n-    // TX_WITNESS with unknown version\n+    // TX_WITNESS_UNKNOWN with unknown version\n     s.clear();\n     s << OP_1 << ToByteVector(pubkey);\n     BOOST_CHECK(ExtractDestination(s, address));"
      }
    ]
  },
  {
    "sha": "fa32adf9dc25540ad27f5b82654c7057d7738627",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMyYWRmOWRjMjU1NDBhZDI3ZjViODI2NTRjNzA1N2Q3NzM4NjI3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-30T13:16:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-21T10:41:55Z"
      },
      "message": "scripted-diff: TxoutType C++11 scoped enum class\n\n-BEGIN VERIFY SCRIPT-\n # General rename helper: $1 -> $2\n rename_global() { sed -i \"s/\\<$1\\>/$2/g\" $(git grep -l \"$1\"); }\n\n # Helper to rename TxoutType $1\n rename_value() {\n   sed -i \"s/    TX_$1,/    $1,/g\" src/script/standard.h;  # First strip the prefix in the definition (header)\n   rename_global TX_$1 \"TxoutType::$1\";                    # Then replace globally\n }\n\n # Change the type globally to bring it in line with the style-guide\n # (clsses are UpperCamelCase)\n rename_global 'enum txnouttype' 'enum class TxoutType'\n rename_global      'txnouttype'            'TxoutType'\n\n # Now rename each enum value\n rename_value 'NONSTANDARD'\n rename_value 'PUBKEY'\n rename_value 'PUBKEYHASH'\n rename_value 'SCRIPTHASH'\n rename_value 'MULTISIG'\n rename_value 'NULL_DATA'\n rename_value 'WITNESS_V0_KEYHASH'\n rename_value 'WITNESS_V0_SCRIPTHASH'\n rename_value 'WITNESS_UNKNOWN'\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "088637f80e9b393d505c6404b2c76dc28e884c62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/088637f80e9b393d505c6404b2c76dc28e884c62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa32adf9dc25540ad27f5b82654c7057d7738627",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiSCAv+K0Sq6QIIVs9MjpflNUwrVixu4MLD7I4YobJAEKdAtO8W/STBq4F603YY\nshk7vInMojZoe6ayY/raZ2anqrwzLBFeXRHJynONnPXCv5ipA1E0zJ9BgQ8MmLYY\nbAhYvkg4oAmGtM01lCvoV1Pgj9nioQsCO7w3oZ/pcVitTfG+spRfk7qS7STLs3dJ\nomnFjLhfre45jqqPmkb/q8j1R8v47CedKEXNVS9PCMKKd+cjxZ4hvPqoUEXjgwRe\nqYv/MXSH85YifHWC3F/3fxIzgSG/lBw4IkqbecrCT7T9HLRH385+HvptCwgXgiUr\n1HTQEj9iNUNITApnr9RxO6V95FMk/4dtp0VXiD+PfKQuwmGUnVQQrA/MAxY5afMk\njmL4m5MPlFckW/6EX9SCsCeA6McKt5WUT2BfAbKv3xpwgEQ+xtBRhCt6LuE776Ph\nyNtuxwPcgjzeFdkoQ79PY3wK0Q04Y054kQynb+x1mbqXnsuvUgDP0ij6LzzqPrQw\nlcG4gzFF\n=2ZKI\n-----END PGP SIGNATURE-----",
        "payload": "tree 088637f80e9b393d505c6404b2c76dc28e884c62\nparent fa95a694c492b267e4038674fd3f338dd215ab48\nauthor MarcoFalke <falke.marco@gmail.com> 1590844565 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592736115 -0400\n\nscripted-diff: TxoutType C++11 scoped enum class\n\n-BEGIN VERIFY SCRIPT-\n # General rename helper: $1 -> $2\n rename_global() { sed -i \"s/\\<$1\\>/$2/g\" $(git grep -l \"$1\"); }\n\n # Helper to rename TxoutType $1\n rename_value() {\n   sed -i \"s/    TX_$1,/    $1,/g\" src/script/standard.h;  # First strip the prefix in the definition (header)\n   rename_global TX_$1 \"TxoutType::$1\";                    # Then replace globally\n }\n\n # Change the type globally to bring it in line with the style-guide\n # (clsses are UpperCamelCase)\n rename_global 'enum txnouttype' 'enum class TxoutType'\n rename_global      'txnouttype'            'TxoutType'\n\n # Now rename each enum value\n rename_value 'NONSTANDARD'\n rename_value 'PUBKEY'\n rename_value 'PUBKEYHASH'\n rename_value 'SCRIPTHASH'\n rename_value 'MULTISIG'\n rename_value 'NULL_DATA'\n rename_value 'WITNESS_V0_KEYHASH'\n rename_value 'WITNESS_V0_SCRIPTHASH'\n rename_value 'WITNESS_UNKNOWN'\n\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32adf9dc25540ad27f5b82654c7057d7738627",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa32adf9dc25540ad27f5b82654c7057d7738627",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32adf9dc25540ad27f5b82654c7057d7738627/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa95a694c492b267e4038674fd3f338dd215ab48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa95a694c492b267e4038674fd3f338dd215ab48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa95a694c492b267e4038674fd3f338dd215ab48"
      }
    ],
    "stats": {
      "total": 416,
      "additions": 208,
      "deletions": 208
    },
    "files": [
      {
        "sha": "d182f0728e7a7595a0665bb2e7ad3bcc5c7548bf",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -135,8 +135,8 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     std::vector<std::vector<unsigned char> > vSolutions;\n-                    txnouttype type = Solver(txout.scriptPubKey, vSolutions);\n-                    if (type == TX_PUBKEY || type == TX_MULTISIG) {\n+                    TxoutType type = Solver(txout.scriptPubKey, vSolutions);\n+                    if (type == TxoutType::PUBKEY || type == TxoutType::MULTISIG) {\n                         insert(COutPoint(hash, i));\n                     }\n                 }"
      },
      {
        "sha": "503640042b8947c6ff4a4f5b46f4cc1d5485ea7b",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -140,27 +140,27 @@ void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n     out.pushKV(\"hex\", HexStr(script.begin(), script.end()));\n \n     std::vector<std::vector<unsigned char>> solns;\n-    txnouttype type = Solver(script, solns);\n+    TxoutType type = Solver(script, solns);\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     CTxDestination address;\n-    if (include_address && ExtractDestination(script, address) && type != TX_PUBKEY) {\n+    if (include_address && ExtractDestination(script, address) && type != TxoutType::PUBKEY) {\n         out.pushKV(\"address\", EncodeDestination(address));\n     }\n }\n \n void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex)\n {\n-    txnouttype type;\n+    TxoutType type;\n     std::vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));\n     if (fIncludeHex)\n         out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired) || type == TX_PUBKEY) {\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired) || type == TxoutType::PUBKEY) {\n         out.pushKV(\"type\", GetTxnOutputType(type));\n         return;\n     }"
      },
      {
        "sha": "c56abaf6c9631ce83a4ebf514ee0cb4a4baaef64",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -50,22 +50,22 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     return (txout.nValue < GetDustThreshold(txout, dustRelayFeeIn));\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     whichType = Solver(scriptPubKey, vSolutions);\n \n-    if (whichType == TX_NONSTANDARD) {\n+    if (whichType == TxoutType::NONSTANDARD) {\n         return false;\n-    } else if (whichType == TX_MULTISIG) {\n+    } else if (whichType == TxoutType::MULTISIG) {\n         unsigned char m = vSolutions.front()[0];\n         unsigned char n = vSolutions.back()[0];\n         // Support up to x-of-3 multisig txns as standard\n         if (n < 1 || n > 3)\n             return false;\n         if (m < 1 || m > n)\n             return false;\n-    } else if (whichType == TX_NULL_DATA &&\n+    } else if (whichType == TxoutType::NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes)) {\n           return false;\n     }\n@@ -110,16 +110,16 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n     }\n \n     unsigned int nDataOut = 0;\n-    txnouttype whichType;\n+    TxoutType whichType;\n     for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n \n-        if (whichType == TX_NULL_DATA)\n+        if (whichType == TxoutType::NULL_DATA)\n             nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!permit_bare_multisig)) {\n+        else if ((whichType == TxoutType::MULTISIG) && (!permit_bare_multisig)) {\n             reason = \"bare-multisig\";\n             return false;\n         } else if (IsDust(txout, dust_relay_fee)) {\n@@ -163,10 +163,10 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n-        txnouttype whichType = Solver(prev.scriptPubKey, vSolutions);\n-        if (whichType == TX_NONSTANDARD) {\n+        TxoutType whichType = Solver(prev.scriptPubKey, vSolutions);\n+        if (whichType == TxoutType::NONSTANDARD) {\n             return false;\n-        } else if (whichType == TX_SCRIPTHASH) {\n+        } else if (whichType == TxoutType::SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))"
      },
      {
        "sha": "7f168ee20fa2a36a4a457e26262f3be5a6158172",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -81,7 +81,7 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms"
      },
      {
        "sha": "4acf180779ce0567013e3a266221a56d9bf30d19",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -512,9 +512,9 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n static std::string GetAllOutputTypes()\n {\n     std::vector<std::string> ret;\n-    using U = std::underlying_type<txnouttype>::type;\n-    for (U i = (U)TX_NONSTANDARD; i <= (U)TX_WITNESS_UNKNOWN; ++i) {\n-        ret.emplace_back(GetTxnOutputType(static_cast<txnouttype>(i)));\n+    using U = std::underlying_type<TxoutType>::type;\n+    for (U i = (U)TxoutType::NONSTANDARD; i <= (U)TxoutType::WITNESS_UNKNOWN; ++i) {\n+        ret.emplace_back(GetTxnOutputType(static_cast<TxoutType>(i)));\n     }\n     return Join(ret, \", \");\n }\n@@ -580,10 +580,10 @@ static UniValue decodescript(const JSONRPCRequest& request)\n         // is a witness program, don't return addresses for a segwit programs.\n         if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n             std::vector<std::vector<unsigned char>> solutions_data;\n-            txnouttype which_type = Solver(script, solutions_data);\n+            TxoutType which_type = Solver(script, solutions_data);\n             // Uncompressed pubkeys cannot be used with segwit checksigs.\n             // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n-            if ((which_type == TX_PUBKEY) || (which_type == TX_MULTISIG)) {\n+            if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {\n                 for (const auto& solution : solutions_data) {\n                     if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n                         return r;\n@@ -592,9 +592,9 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             }\n             UniValue sr(UniValue::VOBJ);\n             CScript segwitScr;\n-            if (which_type == TX_PUBKEY) {\n+            if (which_type == TxoutType::PUBKEY) {\n                 segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0].begin(), solutions_data[0].end())));\n-            } else if (which_type == TX_PUBKEYHASH) {\n+            } else if (which_type == TxoutType::PUBKEYHASH) {\n                 segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n             } else {\n                 // Scripts that are not fit for P2WPKH are encoded as P2WSH."
      },
      {
        "sha": "1c8c1df2beb16dd634d11c20261434abe367c98d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -985,39 +985,39 @@ std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptCo\n std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)\n {\n     std::vector<std::vector<unsigned char>> data;\n-    txnouttype txntype = Solver(script, data);\n+    TxoutType txntype = Solver(script, data);\n \n-    if (txntype == TX_PUBKEY) {\n+    if (txntype == TxoutType::PUBKEY) {\n         CPubKey pubkey(data[0].begin(), data[0].end());\n         if (pubkey.IsValid()) {\n             return MakeUnique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TX_PUBKEYHASH) {\n+    if (txntype == TxoutType::PUBKEYHASH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return MakeUnique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TX_WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return MakeUnique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TX_MULTISIG) {\n+    if (txntype == TxoutType::MULTISIG) {\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n         for (size_t i = 1; i + 1 < data.size(); ++i) {\n             CPubKey pubkey(data[i].begin(), data[i].end());\n             providers.push_back(InferPubkey(pubkey, ctx, provider));\n         }\n         return MakeUnique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n     }\n-    if (txntype == TX_SCRIPTHASH && ctx == ParseScriptContext::TOP) {\n+    if (txntype == TxoutType::SCRIPTHASH && ctx == ParseScriptContext::TOP) {\n         uint160 hash(data[0]);\n         CScriptID scriptid(hash);\n         CScript subscript;\n@@ -1026,7 +1026,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return MakeUnique<SHDescriptor>(std::move(sub));\n         }\n     }\n-    if (txntype == TX_WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n         CScriptID scriptid;\n         CRIPEMD160().Write(data[0].data(), data[0].size()).Finalize(scriptid.begin());\n         CScript subscript;"
      },
      {
        "sha": "f4252155497267ff53d60cb03c35e67312962a4c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -92,11 +92,11 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n /**\n  * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n- * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n+ * unless whichTypeRet is TxoutType::SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     std::vector<valtype>& ret, txnouttype& whichTypeRet, SigVersion sigversion, SignatureData& sigdata)\n+                     std::vector<valtype>& ret, TxoutType& whichTypeRet, SigVersion sigversion, SignatureData& sigdata)\n {\n     CScript scriptRet;\n     uint160 h160;\n@@ -108,15 +108,15 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n \n     switch (whichTypeRet)\n     {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-    case TX_WITNESS_UNKNOWN:\n+    case TxoutType::NONSTANDARD:\n+    case TxoutType::NULL_DATA:\n+    case TxoutType::WITNESS_UNKNOWN:\n         return false;\n-    case TX_PUBKEY:\n+    case TxoutType::PUBKEY:\n         if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         return true;\n-    case TX_PUBKEYHASH: {\n+    case TxoutType::PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n         CPubKey pubkey;\n         if (!GetPubKey(provider, sigdata, keyID, pubkey)) {\n@@ -129,7 +129,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n-    case TX_SCRIPTHASH:\n+    case TxoutType::SCRIPTHASH:\n         h160 = uint160(vSolutions[0]);\n         if (GetCScript(provider, sigdata, CScriptID{h160}, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n@@ -139,7 +139,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         sigdata.missing_redeem_script = h160;\n         return false;\n \n-    case TX_MULTISIG: {\n+    case TxoutType::MULTISIG: {\n         size_t required = vSolutions.front()[0];\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n@@ -159,11 +159,11 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         }\n         return ok;\n     }\n-    case TX_WITNESS_V0_KEYHASH:\n+    case TxoutType::WITNESS_V0_KEYHASH:\n         ret.push_back(vSolutions[0]);\n         return true;\n \n-    case TX_WITNESS_V0_SCRIPTHASH:\n+    case TxoutType::WITNESS_V0_SCRIPTHASH:\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n         if (GetCScript(provider, sigdata, CScriptID{h160}, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n@@ -198,44 +198,44 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     if (sigdata.complete) return true;\n \n     std::vector<valtype> result;\n-    txnouttype whichType;\n+    TxoutType whichType;\n     bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE, sigdata);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n \n-    if (solved && whichType == TX_SCRIPTHASH)\n+    if (solved && whichType == TxoutType::SCRIPTHASH)\n     {\n         // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n         subscript = CScript(result[0].begin(), result[0].end());\n         sigdata.redeem_script = subscript;\n-        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE, sigdata) && whichType != TX_SCRIPTHASH;\n+        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE, sigdata) && whichType != TxoutType::SCRIPTHASH;\n         P2SH = true;\n     }\n \n-    if (solved && whichType == TX_WITNESS_V0_KEYHASH)\n+    if (solved && whichType == TxoutType::WITNESS_V0_KEYHASH)\n     {\n         CScript witnessscript;\n         witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        txnouttype subType;\n+        TxoutType subType;\n         solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata);\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;\n         result.clear();\n     }\n-    else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n+    else if (solved && whichType == TxoutType::WITNESS_V0_SCRIPTHASH)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n-        txnouttype subType;\n-        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        TxoutType subType;\n+        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TxoutType::SCRIPTHASH && subType != TxoutType::WITNESS_V0_SCRIPTHASH && subType != TxoutType::WITNESS_V0_KEYHASH;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;\n         result.clear();\n-    } else if (solved && whichType == TX_WITNESS_UNKNOWN) {\n+    } else if (solved && whichType == TxoutType::WITNESS_UNKNOWN) {\n         sigdata.witness = true;\n     }\n \n@@ -301,11 +301,11 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n \n     // Get scripts\n     std::vector<std::vector<unsigned char>> solutions;\n-    txnouttype script_type = Solver(txout.scriptPubKey, solutions);\n+    TxoutType script_type = Solver(txout.scriptPubKey, solutions);\n     SigVersion sigversion = SigVersion::BASE;\n     CScript next_script = txout.scriptPubKey;\n \n-    if (script_type == TX_SCRIPTHASH && !stack.script.empty() && !stack.script.back().empty()) {\n+    if (script_type == TxoutType::SCRIPTHASH && !stack.script.empty() && !stack.script.back().empty()) {\n         // Get the redeemScript\n         CScript redeem_script(stack.script.back().begin(), stack.script.back().end());\n         data.redeem_script = redeem_script;\n@@ -315,7 +315,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n         script_type = Solver(next_script, solutions);\n         stack.script.pop_back();\n     }\n-    if (script_type == TX_WITNESS_V0_SCRIPTHASH && !stack.witness.empty() && !stack.witness.back().empty()) {\n+    if (script_type == TxoutType::WITNESS_V0_SCRIPTHASH && !stack.witness.empty() && !stack.witness.back().empty()) {\n         // Get the witnessScript\n         CScript witness_script(stack.witness.back().begin(), stack.witness.back().end());\n         data.witness_script = witness_script;\n@@ -328,7 +328,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n         stack.witness.clear();\n         sigversion = SigVersion::WITNESS_V0;\n     }\n-    if (script_type == TX_MULTISIG && !stack.script.empty()) {\n+    if (script_type == TxoutType::MULTISIG && !stack.script.empty()) {\n         // Build a map of pubkey -> signature by matching sigs to pubkeys:\n         assert(solutions.size() > 1);\n         unsigned int num_pubkeys = solutions.size()-2;\n@@ -454,13 +454,13 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n     std::vector<valtype> solutions;\n     auto whichtype = Solver(script, solutions);\n-    if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n-    if (whichtype == TX_SCRIPTHASH) {\n+    if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n+    if (whichtype == TxoutType::SCRIPTHASH) {\n         auto h160 = uint160(solutions[0]);\n         CScript subscript;\n         if (provider.GetCScript(CScriptID{h160}, subscript)) {\n             whichtype = Solver(subscript, solutions);\n-            if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n+            if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n         }\n     }\n     return false;"
      },
      {
        "sha": "39dd4ff39fbd7ec65b5abd7d22a0f6ad3e8c1aea",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -43,19 +43,19 @@ WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n     CSHA256().Write(in.data(), in.size()).Finalize(begin());\n }\n \n-std::string GetTxnOutputType(txnouttype t)\n+std::string GetTxnOutputType(TxoutType t)\n {\n     switch (t)\n     {\n-    case TX_NONSTANDARD: return \"nonstandard\";\n-    case TX_PUBKEY: return \"pubkey\";\n-    case TX_PUBKEYHASH: return \"pubkeyhash\";\n-    case TX_SCRIPTHASH: return \"scripthash\";\n-    case TX_MULTISIG: return \"multisig\";\n-    case TX_NULL_DATA: return \"nulldata\";\n-    case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n-    case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n-    case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n+    case TxoutType::NONSTANDARD: return \"nonstandard\";\n+    case TxoutType::PUBKEY: return \"pubkey\";\n+    case TxoutType::PUBKEYHASH: return \"pubkeyhash\";\n+    case TxoutType::SCRIPTHASH: return \"scripthash\";\n+    case TxoutType::MULTISIG: return \"multisig\";\n+    case TxoutType::NULL_DATA: return \"nulldata\";\n+    case TxoutType::WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n+    case TxoutType::WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n+    case TxoutType::WITNESS_UNKNOWN: return \"witness_unknown\";\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -106,7 +106,7 @@ static bool MatchMultisig(const CScript& script, unsigned int& required, std::ve\n     return (it + 1 == script.end());\n }\n \n-txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet)\n+TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet)\n {\n     vSolutionsRet.clear();\n \n@@ -116,26 +116,26 @@ txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned\n     {\n         std::vector<unsigned char> hashBytes(scriptPubKey.begin()+2, scriptPubKey.begin()+22);\n         vSolutionsRet.push_back(hashBytes);\n-        return TX_SCRIPTHASH;\n+        return TxoutType::SCRIPTHASH;\n     }\n \n     int witnessversion;\n     std::vector<unsigned char> witnessprogram;\n     if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_KEYHASH_SIZE) {\n             vSolutionsRet.push_back(witnessprogram);\n-            return TX_WITNESS_V0_KEYHASH;\n+            return TxoutType::WITNESS_V0_KEYHASH;\n         }\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n             vSolutionsRet.push_back(witnessprogram);\n-            return TX_WITNESS_V0_SCRIPTHASH;\n+            return TxoutType::WITNESS_V0_SCRIPTHASH;\n         }\n         if (witnessversion != 0) {\n             vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n             vSolutionsRet.push_back(std::move(witnessprogram));\n-            return TX_WITNESS_UNKNOWN;\n+            return TxoutType::WITNESS_UNKNOWN;\n         }\n-        return TX_NONSTANDARD;\n+        return TxoutType::NONSTANDARD;\n     }\n \n     // Provably prunable, data-carrying output\n@@ -144,18 +144,18 @@ txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned\n     // byte passes the IsPushOnly() test we don't care what exactly is in the\n     // script.\n     if (scriptPubKey.size() >= 1 && scriptPubKey[0] == OP_RETURN && scriptPubKey.IsPushOnly(scriptPubKey.begin()+1)) {\n-        return TX_NULL_DATA;\n+        return TxoutType::NULL_DATA;\n     }\n \n     std::vector<unsigned char> data;\n     if (MatchPayToPubkey(scriptPubKey, data)) {\n         vSolutionsRet.push_back(std::move(data));\n-        return TX_PUBKEY;\n+        return TxoutType::PUBKEY;\n     }\n \n     if (MatchPayToPubkeyHash(scriptPubKey, data)) {\n         vSolutionsRet.push_back(std::move(data));\n-        return TX_PUBKEYHASH;\n+        return TxoutType::PUBKEYHASH;\n     }\n \n     unsigned int required;\n@@ -164,46 +164,46 @@ txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned\n         vSolutionsRet.push_back({static_cast<unsigned char>(required)}); // safe as required is in range 1..16\n         vSolutionsRet.insert(vSolutionsRet.end(), keys.begin(), keys.end());\n         vSolutionsRet.push_back({static_cast<unsigned char>(keys.size())}); // safe as size is in range 1..16\n-        return TX_MULTISIG;\n+        return TxoutType::MULTISIG;\n     }\n \n     vSolutionsRet.clear();\n-    return TX_NONSTANDARD;\n+    return TxoutType::NONSTANDARD;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     std::vector<valtype> vSolutions;\n-    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+    TxoutType whichType = Solver(scriptPubKey, vSolutions);\n \n-    if (whichType == TX_PUBKEY) {\n+    if (whichType == TxoutType::PUBKEY) {\n         CPubKey pubKey(vSolutions[0]);\n         if (!pubKey.IsValid())\n             return false;\n \n         addressRet = PKHash(pubKey);\n         return true;\n     }\n-    else if (whichType == TX_PUBKEYHASH)\n+    else if (whichType == TxoutType::PUBKEYHASH)\n     {\n         addressRet = PKHash(uint160(vSolutions[0]));\n         return true;\n     }\n-    else if (whichType == TX_SCRIPTHASH)\n+    else if (whichType == TxoutType::SCRIPTHASH)\n     {\n         addressRet = ScriptHash(uint160(vSolutions[0]));\n         return true;\n-    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+    } else if (whichType == TxoutType::WITNESS_V0_KEYHASH) {\n         WitnessV0KeyHash hash;\n         std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n         addressRet = hash;\n         return true;\n-    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+    } else if (whichType == TxoutType::WITNESS_V0_SCRIPTHASH) {\n         WitnessV0ScriptHash hash;\n         std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n         addressRet = hash;\n         return true;\n-    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+    } else if (whichType == TxoutType::WITNESS_UNKNOWN) {\n         WitnessUnknown unk;\n         unk.version = vSolutions[0][0];\n         std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);\n@@ -215,19 +215,19 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     return false;\n }\n \n-bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)\n+bool ExtractDestinations(const CScript& scriptPubKey, TxoutType& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)\n {\n     addressRet.clear();\n     std::vector<valtype> vSolutions;\n     typeRet = Solver(scriptPubKey, vSolutions);\n-    if (typeRet == TX_NONSTANDARD) {\n+    if (typeRet == TxoutType::NONSTANDARD) {\n         return false;\n-    } else if (typeRet == TX_NULL_DATA) {\n+    } else if (typeRet == TxoutType::NULL_DATA) {\n         // This is data, not addresses\n         return false;\n     }\n \n-    if (typeRet == TX_MULTISIG)\n+    if (typeRet == TxoutType::MULTISIG)\n     {\n         nRequiredRet = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n@@ -319,10 +319,10 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n CScript GetScriptForWitness(const CScript& redeemscript)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n-    txnouttype typ = Solver(redeemscript, vSolutions);\n-    if (typ == TX_PUBKEY) {\n+    TxoutType typ = Solver(redeemscript, vSolutions);\n+    if (typ == TxoutType::PUBKEY) {\n         return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0].begin(), vSolutions[0].end())));\n-    } else if (typ == TX_PUBKEYHASH) {\n+    } else if (typ == TxoutType::PUBKEYHASH) {\n         return GetScriptForDestination(WitnessV0KeyHash(uint160{vSolutions[0]}));\n     }\n     return GetScriptForDestination(WitnessV0ScriptHash(redeemscript));"
      },
      {
        "sha": "fd29353886f7f683e65fe354fbf2b9af39e67c32",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -99,11 +99,11 @@ static const unsigned int MAX_OP_RETURN_RELAY = 83;\n \n /**\n  * A data carrying output is an unspendable output containing data. The script\n- * type is designated as TX_NULL_DATA.\n+ * type is designated as TxoutType::NULL_DATA.\n  */\n extern bool fAcceptDatacarrier;\n \n-/** Maximum size of TX_NULL_DATA scripts that this node considers standard. */\n+/** Maximum size of TxoutType::NULL_DATA scripts that this node considers standard. */\n extern unsigned nMaxDatacarrierBytes;\n \n /**\n@@ -116,17 +116,17 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-enum txnouttype {\n-    TX_NONSTANDARD,\n+enum class TxoutType {\n+    NONSTANDARD,\n     // 'standard' transaction types:\n-    TX_PUBKEY,\n-    TX_PUBKEYHASH,\n-    TX_SCRIPTHASH,\n-    TX_MULTISIG,\n-    TX_NULL_DATA, //!< unspendable OP_RETURN script that carries data\n-    TX_WITNESS_V0_SCRIPTHASH,\n-    TX_WITNESS_V0_KEYHASH,\n-    TX_WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n+    PUBKEY,\n+    PUBKEYHASH,\n+    SCRIPTHASH,\n+    MULTISIG,\n+    NULL_DATA, //!< unspendable OP_RETURN script that carries data\n+    WITNESS_V0_SCRIPTHASH,\n+    WITNESS_V0_KEYHASH,\n+    WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n };\n \n class CNoDestination {\n@@ -199,20 +199,20 @@ struct WitnessUnknown\n /**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n- *  * PKHash: TX_PUBKEYHASH destination (P2PKH)\n- *  * ScriptHash: TX_SCRIPTHASH destination (P2SH)\n- *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)\n- *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)\n- *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n+ *  * PKHash: TxoutType::PUBKEYHASH destination (P2PKH)\n+ *  * ScriptHash: TxoutType::SCRIPTHASH destination (P2SH)\n+ *  * WitnessV0ScriptHash: TxoutType::WITNESS_V0_SCRIPTHASH destination (P2WSH)\n+ *  * WitnessV0KeyHash: TxoutType::WITNESS_V0_KEYHASH destination (P2WPKH)\n+ *  * WitnessUnknown: TxoutType::WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n \n-/** Get the name of a txnouttype as a string */\n-std::string GetTxnOutputType(txnouttype t);\n+/** Get the name of a TxoutType as a string */\n+std::string GetTxnOutputType(TxoutType t);\n \n /**\n  * Parse a scriptPubKey and identify script type for standard scripts. If\n@@ -222,9 +222,9 @@ std::string GetTxnOutputType(txnouttype t);\n  *\n  * @param[in]   scriptPubKey   Script to parse\n  * @param[out]  vSolutionsRet  Vector of parsed pubkeys and hashes\n- * @return                     The script type. TX_NONSTANDARD represents a failed solve.\n+ * @return                     The script type. TxoutType::NONSTANDARD represents a failed solve.\n  */\n-txnouttype Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet);\n+TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned char>>& vSolutionsRet);\n \n /**\n  * Parse a standard scriptPubKey for the destination address. Assigns result to\n@@ -245,7 +245,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n  * encodable as an address) with key identifiers (of keys involved in a\n  * CScript), and its use should be phased out.\n  */\n-bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n+bool ExtractDestinations(const CScript& scriptPubKey, TxoutType& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n /**\n  * Generate a Bitcoin scriptPubKey for the given CTxDestination. Returns a P2PKH"
      },
      {
        "sha": "c42a45f4f312d2a6a4a6831b8a4ac8b9dd46d5ab",
        "filename": "src/test/fuzz/key.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/fuzz/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/fuzz/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -157,25 +157,25 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(ok_add_key_pubkey);\n         assert(fillable_signing_provider_pub.HaveKey(pubkey.GetID()));\n \n-        txnouttype which_type_tx_pubkey;\n+        TxoutType which_type_tx_pubkey;\n         const bool is_standard_tx_pubkey = IsStandard(tx_pubkey_script, which_type_tx_pubkey);\n         assert(is_standard_tx_pubkey);\n-        assert(which_type_tx_pubkey == TX_PUBKEY);\n+        assert(which_type_tx_pubkey == TxoutType::PUBKEY);\n \n-        txnouttype which_type_tx_multisig;\n+        TxoutType which_type_tx_multisig;\n         const bool is_standard_tx_multisig = IsStandard(tx_multisig_script, which_type_tx_multisig);\n         assert(is_standard_tx_multisig);\n-        assert(which_type_tx_multisig == TX_MULTISIG);\n+        assert(which_type_tx_multisig == TxoutType::MULTISIG);\n \n         std::vector<std::vector<unsigned char>> v_solutions_ret_tx_pubkey;\n-        const txnouttype outtype_tx_pubkey = Solver(tx_pubkey_script, v_solutions_ret_tx_pubkey);\n-        assert(outtype_tx_pubkey == TX_PUBKEY);\n+        const TxoutType outtype_tx_pubkey = Solver(tx_pubkey_script, v_solutions_ret_tx_pubkey);\n+        assert(outtype_tx_pubkey == TxoutType::PUBKEY);\n         assert(v_solutions_ret_tx_pubkey.size() == 1);\n         assert(v_solutions_ret_tx_pubkey[0].size() == 33);\n \n         std::vector<std::vector<unsigned char>> v_solutions_ret_tx_multisig;\n-        const txnouttype outtype_tx_multisig = Solver(tx_multisig_script, v_solutions_ret_tx_multisig);\n-        assert(outtype_tx_multisig == TX_MULTISIG);\n+        const TxoutType outtype_tx_multisig = Solver(tx_multisig_script, v_solutions_ret_tx_multisig);\n+        assert(outtype_tx_multisig == TxoutType::MULTISIG);\n         assert(v_solutions_ret_tx_multisig.size() == 3);\n         assert(v_solutions_ret_tx_multisig[0].size() == 1);\n         assert(v_solutions_ret_tx_multisig[1].size() == 33);"
      },
      {
        "sha": "cad548178d6c97936b70d8964736a67c9aa9cc06",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -58,7 +58,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CTxDestination address;\n     (void)ExtractDestination(script, address);\n \n-    txnouttype type_ret;\n+    TxoutType type_ret;\n     std::vector<CTxDestination> addresses;\n     int required_ret;\n     (void)ExtractDestinations(script, type_ret, addresses, required_ret);\n@@ -72,7 +72,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     (void)IsSolvable(signing_provider, script);\n \n-    txnouttype which_type;\n+    TxoutType which_type;\n     (void)IsStandard(script, which_type);\n \n     (void)RecursiveDynamicUsage(script);"
      },
      {
        "sha": "e14d2dd72d9fdbfaddd20db89c10ee55c58d7431",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -141,7 +141,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n-    txnouttype whichType;\n+    TxoutType whichType;\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;"
      },
      {
        "sha": "77d748241be19207095c43c13199d50bdf0c6589",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -31,35 +31,35 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     CScript s;\n     std::vector<std::vector<unsigned char> > solutions;\n \n-    // TX_PUBKEY\n+    // TxoutType::PUBKEY\n     s.clear();\n     s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::PUBKEY);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n \n-    // TX_PUBKEYHASH\n+    // TxoutType::PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::PUBKEYHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n-    // TX_SCRIPTHASH\n+    // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::SCRIPTHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n \n-    // TX_MULTISIG\n+    // TxoutType::MULTISIG\n     s.clear();\n     s << OP_1 <<\n         ToByteVector(pubkeys[0]) <<\n         ToByteVector(pubkeys[1]) <<\n         OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::MULTISIG);\n     BOOST_CHECK_EQUAL(solutions.size(), 4U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n@@ -72,45 +72,45 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         ToByteVector(pubkeys[1]) <<\n         ToByteVector(pubkeys[2]) <<\n         OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::MULTISIG);\n     BOOST_CHECK_EQUAL(solutions.size(), 5U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n     BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n     BOOST_CHECK(solutions[3] == ToByteVector(pubkeys[2]));\n     BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n \n-    // TX_NULL_DATA\n+    // TxoutType::NULL_DATA\n     s.clear();\n     s << OP_RETURN <<\n         std::vector<unsigned char>({0}) <<\n         std::vector<unsigned char>({75}) <<\n         std::vector<unsigned char>({255});\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NULL_DATA);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NULL_DATA);\n     BOOST_CHECK_EQUAL(solutions.size(), 0U);\n \n-    // TX_WITNESS_V0_KEYHASH\n+    // TxoutType::WITNESS_V0_KEYHASH\n     s.clear();\n     s << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_WITNESS_V0_KEYHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::WITNESS_V0_KEYHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n-    // TX_WITNESS_V0_SCRIPTHASH\n+    // TxoutType::WITNESS_V0_SCRIPTHASH\n     uint256 scriptHash;\n     CSHA256().Write(&redeemScript[0], redeemScript.size())\n         .Finalize(scriptHash.begin());\n \n     s.clear();\n     s << OP_0 << ToByteVector(scriptHash);\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_WITNESS_V0_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::WITNESS_V0_SCRIPTHASH);\n     BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n \n-    // TX_NONSTANDARD\n+    // TxoutType::NONSTANDARD\n     s.clear();\n     s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n@@ -123,50 +123,50 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     CScript s;\n     std::vector<std::vector<unsigned char> > solutions;\n \n-    // TX_PUBKEY with incorrectly sized pubkey\n+    // TxoutType::PUBKEY with incorrectly sized pubkey\n     s.clear();\n     s << std::vector<unsigned char>(30, 0x01) << OP_CHECKSIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_PUBKEYHASH with incorrectly sized key hash\n+    // TxoutType::PUBKEYHASH with incorrectly sized key hash\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_SCRIPTHASH with incorrectly sized script hash\n+    // TxoutType::SCRIPTHASH with incorrectly sized script hash\n     s.clear();\n     s << OP_HASH160 << std::vector<unsigned char>(21, 0x01) << OP_EQUAL;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_MULTISIG 0/2\n+    // TxoutType::MULTISIG 0/2\n     s.clear();\n     s << OP_0 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_MULTISIG 2/1\n+    // TxoutType::MULTISIG 2/1\n     s.clear();\n     s << OP_2 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_MULTISIG n = 2 with 1 pubkey\n+    // TxoutType::MULTISIG n = 2 with 1 pubkey\n     s.clear();\n     s << OP_1 << ToByteVector(pubkey) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_MULTISIG n = 1 with 0 pubkeys\n+    // TxoutType::MULTISIG n = 1 with 0 pubkeys\n     s.clear();\n     s << OP_1 << OP_1 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_NULL_DATA with other opcodes\n+    // TxoutType::NULL_DATA with other opcodes\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n \n-    // TX_WITNESS_UNKNOWN with incorrect program size\n+    // TxoutType::WITNESS_UNKNOWN with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n-    BOOST_CHECK_EQUAL(Solver(s, solutions), TX_NONSTANDARD);\n+    BOOST_CHECK_EQUAL(Solver(s, solutions), TxoutType::NONSTANDARD);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n@@ -179,55 +179,55 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     CScript s;\n     CTxDestination address;\n \n-    // TX_PUBKEY\n+    // TxoutType::PUBKEY\n     s.clear();\n     s << ToByteVector(pubkey) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n     BOOST_CHECK(boost::get<PKHash>(&address) &&\n                 *boost::get<PKHash>(&address) == PKHash(pubkey));\n \n-    // TX_PUBKEYHASH\n+    // TxoutType::PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n     BOOST_CHECK(boost::get<PKHash>(&address) &&\n                 *boost::get<PKHash>(&address) == PKHash(pubkey));\n \n-    // TX_SCRIPTHASH\n+    // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestination(s, address));\n     BOOST_CHECK(boost::get<ScriptHash>(&address) &&\n                 *boost::get<ScriptHash>(&address) == ScriptHash(redeemScript));\n \n-    // TX_MULTISIG\n+    // TxoutType::MULTISIG\n     s.clear();\n     s << OP_1 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n     BOOST_CHECK(!ExtractDestination(s, address));\n \n-    // TX_NULL_DATA\n+    // TxoutType::NULL_DATA\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75});\n     BOOST_CHECK(!ExtractDestination(s, address));\n \n-    // TX_WITNESS_V0_KEYHASH\n+    // TxoutType::WITNESS_V0_KEYHASH\n     s.clear();\n     s << OP_0 << ToByteVector(pubkey.GetID());\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n     BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n-    // TX_WITNESS_V0_SCRIPTHASH\n+    // TxoutType::WITNESS_V0_SCRIPTHASH\n     s.clear();\n     WitnessV0ScriptHash scripthash;\n     CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n     s << OP_0 << ToByteVector(scripthash);\n     BOOST_CHECK(ExtractDestination(s, address));\n     BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n \n-    // TX_WITNESS_UNKNOWN with unknown version\n+    // TxoutType::WITNESS_UNKNOWN with unknown version\n     s.clear();\n     s << OP_1 << ToByteVector(pubkey);\n     BOOST_CHECK(ExtractDestination(s, address));\n@@ -248,57 +248,57 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     }\n \n     CScript s;\n-    txnouttype whichType;\n+    TxoutType whichType;\n     std::vector<CTxDestination> addresses;\n     int nRequired;\n \n-    // TX_PUBKEY\n+    // TxoutType::PUBKEY\n     s.clear();\n     s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEY);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n                 *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n-    // TX_PUBKEYHASH\n+    // TxoutType::PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(whichType, TxoutType::PUBKEYHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n                 *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n \n-    // TX_SCRIPTHASH\n+    // TxoutType::SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(whichType, TxoutType::SCRIPTHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<ScriptHash>(&addresses[0]) &&\n                 *boost::get<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n \n-    // TX_MULTISIG\n+    // TxoutType::MULTISIG\n     s.clear();\n     s << OP_2 <<\n         ToByteVector(pubkeys[0]) <<\n         ToByteVector(pubkeys[1]) <<\n         OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n-    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(whichType, TxoutType::MULTISIG);\n     BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n     BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n                 *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n     BOOST_CHECK(boost::get<PKHash>(&addresses[1]) &&\n                 *boost::get<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n \n-    // TX_NULL_DATA\n+    // TxoutType::NULL_DATA\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75});\n     BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));"
      },
      {
        "sha": "4bf6e734ce25315e05a08acefbb534a3026c4092",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -716,12 +716,12 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n     BOOST_CHECK_EQUAL(reason, \"scriptpubkey\");\n \n-    // MAX_OP_RETURN_RELAY-byte TX_NULL_DATA (standard)\n+    // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n-    // MAX_OP_RETURN_RELAY+1-byte TX_NULL_DATA (non-standard)\n+    // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     reason.clear();\n@@ -745,12 +745,12 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n     BOOST_CHECK_EQUAL(reason, \"scriptpubkey\");\n \n-    // TX_NULL_DATA w/o PUSHDATA\n+    // TxoutType::NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n-    // Only one TX_NULL_DATA permitted in all cases\n+    // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");"
      },
      {
        "sha": "6f2faeec6c250cb9b9d681bb18f6f258f366af1c",
        "filename": "src/test/util/transaction_utils.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/util/transaction_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/test/util/transaction_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/transaction_utils.h?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -22,8 +22,8 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int n\n CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CTransaction& txCredit);\n \n // Helper: create two dummy transactions, each with two outputs.\n-// The first has nValues[0] and nValues[1] outputs paid to a TX_PUBKEY,\n-// the second nValues[2] and nValues[3] outputs paid to a TX_PUBKEYHASH.\n+// The first has nValues[0] and nValues[1] outputs paid to a TxoutType::PUBKEY,\n+// the second nValues[2] and nValues[3] outputs paid to a TxoutType::PUBKEYHASH.\n std::vector<CMutableTransaction> SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet, const std::array<CAmount,4>& nValues);\n \n #endif // BITCOIN_TEST_UTIL_TRANSACTION_UTILS_H"
      },
      {
        "sha": "3a5459006d4f2239e5fa6d27fee32a0b837e0574",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -856,20 +856,20 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n {\n     // Use Solver to obtain script type and parsed pubkeys or hashes:\n     std::vector<std::vector<unsigned char>> solverdata;\n-    txnouttype script_type = Solver(script, solverdata);\n+    TxoutType script_type = Solver(script, solverdata);\n \n     switch (script_type) {\n-    case TX_PUBKEY: {\n+    case TxoutType::PUBKEY: {\n         CPubKey pubkey(solverdata[0].begin(), solverdata[0].end());\n         import_data.used_keys.emplace(pubkey.GetID(), false);\n         return \"\";\n     }\n-    case TX_PUBKEYHASH: {\n+    case TxoutType::PUBKEYHASH: {\n         CKeyID id = CKeyID(uint160(solverdata[0]));\n         import_data.used_keys[id] = true;\n         return \"\";\n     }\n-    case TX_SCRIPTHASH: {\n+    case TxoutType::SCRIPTHASH: {\n         if (script_ctx == ScriptContext::P2SH) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside another P2SH\");\n         if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2SH inside a P2WSH\");\n         CHECK_NONFATAL(script_ctx == ScriptContext::TOP);\n@@ -880,14 +880,14 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n         import_data.import_scripts.emplace(*subscript);\n         return RecurseImportData(*subscript, import_data, ScriptContext::P2SH);\n     }\n-    case TX_MULTISIG: {\n+    case TxoutType::MULTISIG: {\n         for (size_t i = 1; i + 1< solverdata.size(); ++i) {\n             CPubKey pubkey(solverdata[i].begin(), solverdata[i].end());\n             import_data.used_keys.emplace(pubkey.GetID(), false);\n         }\n         return \"\";\n     }\n-    case TX_WITNESS_V0_SCRIPTHASH: {\n+    case TxoutType::WITNESS_V0_SCRIPTHASH: {\n         if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WSH inside another P2WSH\");\n         uint256 fullid(solverdata[0]);\n         CScriptID id;\n@@ -901,7 +901,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n         import_data.import_scripts.emplace(*subscript);\n         return RecurseImportData(*subscript, import_data, ScriptContext::WITNESS_V0);\n     }\n-    case TX_WITNESS_V0_KEYHASH: {\n+    case TxoutType::WITNESS_V0_KEYHASH: {\n         if (script_ctx == ScriptContext::WITNESS_V0) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Trying to nest P2WPKH inside P2WSH\");\n         CKeyID id = CKeyID(uint160(solverdata[0]));\n         import_data.used_keys[id] = true;\n@@ -910,10 +910,10 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n         }\n         return \"\";\n     }\n-    case TX_NULL_DATA:\n+    case TxoutType::NULL_DATA:\n         return \"unspendable script\";\n-    case TX_NONSTANDARD:\n-    case TX_WITNESS_UNKNOWN:\n+    case TxoutType::NONSTANDARD:\n+    case TxoutType::WITNESS_UNKNOWN:\n     default:\n         return \"unrecognized script\";\n     }"
      },
      {
        "sha": "7a9089456d0b56d4f23c6e530711ce4a1ec95345",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -3489,7 +3489,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         // Always present: script type and redeemscript\n         std::vector<std::vector<unsigned char>> solutions_data;\n-        txnouttype which_type = Solver(subscript, solutions_data);\n+        TxoutType which_type = Solver(subscript, solutions_data);\n         obj.pushKV(\"script\", GetTxnOutputType(which_type));\n         obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n \n@@ -3506,7 +3506,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n             if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n             obj.pushKV(\"embedded\", std::move(subobj));\n-        } else if (which_type == TX_MULTISIG) {\n+        } else if (which_type == TxoutType::MULTISIG) {\n             // Also report some information on multisig scripts (which do not have a corresponding address).\n             // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n             obj.pushKV(\"sigsrequired\", solutions_data[0][0]);"
      },
      {
        "sha": "893db5dcc2e6e35ca8131593286d706bfacfb06f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32adf9dc25540ad27f5b82654c7057d7738627/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fa32adf9dc25540ad27f5b82654c7057d7738627",
        "patch": "@@ -88,16 +88,16 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n     IsMineResult ret = IsMineResult::NO;\n \n     std::vector<valtype> vSolutions;\n-    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+    TxoutType whichType = Solver(scriptPubKey, vSolutions);\n \n     CKeyID keyID;\n     switch (whichType)\n     {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-    case TX_WITNESS_UNKNOWN:\n+    case TxoutType::NONSTANDARD:\n+    case TxoutType::NULL_DATA:\n+    case TxoutType::WITNESS_UNKNOWN:\n         break;\n-    case TX_PUBKEY:\n+    case TxoutType::PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n         if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n             return IsMineResult::INVALID;\n@@ -106,7 +106,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n             ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n-    case TX_WITNESS_V0_KEYHASH:\n+    case TxoutType::WITNESS_V0_KEYHASH:\n     {\n         if (sigversion == IsMineSigVersion::WITNESS_V0) {\n             // P2WPKH inside P2WSH is invalid.\n@@ -121,7 +121,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n         break;\n     }\n-    case TX_PUBKEYHASH:\n+    case TxoutType::PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (!PermitsUncompressed(sigversion)) {\n             CPubKey pubkey;\n@@ -133,7 +133,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n             ret = std::max(ret, IsMineResult::SPENDABLE);\n         }\n         break;\n-    case TX_SCRIPTHASH:\n+    case TxoutType::SCRIPTHASH:\n     {\n         if (sigversion != IsMineSigVersion::TOP) {\n             // P2SH inside P2WSH or P2SH is invalid.\n@@ -146,7 +146,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         }\n         break;\n     }\n-    case TX_WITNESS_V0_SCRIPTHASH:\n+    case TxoutType::WITNESS_V0_SCRIPTHASH:\n     {\n         if (sigversion == IsMineSigVersion::WITNESS_V0) {\n             // P2WSH inside P2WSH is invalid.\n@@ -165,7 +165,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         break;\n     }\n \n-    case TX_MULTISIG:\n+    case TxoutType::MULTISIG:\n     {\n         // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n         if (sigversion == IsMineSigVersion::TOP) {\n@@ -825,7 +825,7 @@ bool LegacyScriptPubKeyMan::HaveWatchOnly() const\n static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n {\n     std::vector<std::vector<unsigned char>> solutions;\n-    return Solver(dest, solutions) == TX_PUBKEY &&\n+    return Solver(dest, solutions) == TxoutType::PUBKEY &&\n         (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n }\n "
      }
    ]
  }
]