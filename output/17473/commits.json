[
  {
    "sha": "3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjdkYzliODA4MzE2YzFlNWQ2NzdhZjhkOWE5OTExMjU2OGM4Y2Ni",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-11T23:32:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Clean up long lines in settings code\n\nSuggested by James O'Beirne <james.obeirne@gmail.com>\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r344366743\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "147925f360df9dbccb3ba4f936163ea8cd0ee6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/147925f360df9dbccb3ba4f936163ea8cd0ee6ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7dc9b808316c1e5d677af8d9a99112568c8ccb/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd6cb9745e13a62e130b11f78a13bcc1d424b05e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd6cb9745e13a62e130b11f78a13bcc1d424b05e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd6cb9745e13a62e130b11f78a13bcc1d424b05e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d20f509e24a76354895751ebfc1715015edc9844",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7dc9b808316c1e5d677af8d9a99112568c8ccb/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7dc9b808316c1e5d677af8d9a99112568c8ccb/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
        "patch": "@@ -68,7 +68,9 @@ SettingsValue GetSetting(const Settings& settings,\n         // precedence over early settings, but for backwards compatibility in\n         // the config file the precedence is reversed for all settings except\n         // chain name settings.\n-        const bool reverse_precedence = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !get_chain_name;\n+        const bool reverse_precedence =\n+            (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n+            !get_chain_name;\n \n         // Weird behavior preserved for backwards compatibility: Negated\n         // -regtest and -testnet arguments which you would expect to override\n@@ -78,7 +80,10 @@ SettingsValue GetSetting(const Settings& settings,\n         const bool skip_negated_command_line = get_chain_name;\n \n         // Ignore settings in default config section if requested.\n-        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION && !never_ignore_negated_setting) return;\n+        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION &&\n+            !never_ignore_negated_setting) {\n+            return;\n+        }\n \n         // Skip negated command line settings.\n         if (skip_negated_command_line && span.last_negated()) return;\n@@ -111,7 +116,9 @@ std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n         // value is followed by non-negated value, in which case config file\n         // settings will be brought back from the dead (but earlier command\n         // line settings will still be ignored).\n-        const bool add_zombie_config_values = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !prev_negated_empty;\n+        const bool add_zombie_config_values =\n+            (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n+            !prev_negated_empty;\n \n         // Ignore settings in default config section if requested.\n         if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION) return;"
      },
      {
        "sha": "9ca581109df7ec7ec4ba070308c07897087c57c3",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7dc9b808316c1e5d677af8d9a99112568c8ccb/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7dc9b808316c1e5d677af8d9a99112568c8ccb/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
        "patch": "@@ -43,11 +43,18 @@ struct Settings {\n //!                                        [section] keywords)\n //! @param get_chain_name - enable special backwards compatible behavior\n //!                         for GetChainName\n-SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name);\n \n //! Get combined setting value similar to GetSetting(), except if setting was\n //! specified multiple times, return a list of all the values specified.\n-std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config);\n \n //! Return true if a setting is set in the default config file section, and not\n //! overridden by a higher priority command-line or network section value."
      }
    ]
  },
  {
    "sha": "57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2U4YjdhNzI3MzU2N2FhNGE0YWVlODdjY2UxOGU5YmZmOGYzMTk2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-11T23:40:52Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Clean up includeconf comments\n\nSuggested by Antoine Riard <ariard@student.42.fr>\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r344291875\n\nand John Newbery <john@johnnewbery.com>\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "a2dae3a9da1ee978904a0e076dc583a5c2917276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dae3a9da1ee978904a0e076dc583a5c2917276"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e8b7a7273567aa4a4aee87cce18e9bff8f3196/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7dc9b808316c1e5d677af8d9a99112568c8ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7dc9b808316c1e5d677af8d9a99112568c8ccb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9043d02f0a5be16c37b621633ba52f86a587bc01",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e8b7a7273567aa4a4aee87cce18e9bff8f3196/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e8b7a7273567aa4a4aee87cce18e9bff8f3196/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
        "patch": "@@ -344,7 +344,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         }\n     }\n \n-    // we do not allow -includeconf from command line, so we clear it here\n+    // we do not allow -includeconf from command line\n     bool success = true;\n     if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n         for (const auto& include : util::SettingsSpan(*includes)) {\n@@ -780,7 +780,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             return false;\n         }\n         // `-includeconf` cannot be included in the command line arguments except\n-        // as `-noincludeconf` (which indicates that no conf file should be used).\n+        // as `-noincludeconf` (which indicates that no included conf file should be used).\n         bool use_conf_file{true};\n         {\n             LOCK(cs_args);"
      }
    ]
  },
  {
    "sha": "dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzBmMTQ4MDc0NmIzNGFhM2NhMmQ5YzBmMWVjNzY0MDgzMDI2YjQw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-12T00:05:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Replace FlagsOfKnownArg with GetArgFlags\n\nRename suggested by Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>\nhttps://github.com/bitcoin/bitcoin/pull/16545#issuecomment-519048000\n\nThis also gets rid of ArgsManager::NONE constant, which was an implementation\ndetail not meant to be used by ArgsManager callers.\n\nFinally this reverts a change from 7f40528cd50fc43ac0bd3e785de24d661adddb7a\nhttps://github.com/bitcoin/bitcoin/pull/15934 adding \"-\" characters to argument\nnames. Better for GetArgFlags to require \"-\" prefixes for consistency with\nother ArgsManager methods, and to be more efficient later when GetArg functions\nneed to call GetArgFlags (https://github.com/bitcoin/bitcoin/pull/16545)\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "71bf0642facbb3f60abab127e03b7d7be2b4ff44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71bf0642facbb3f60abab127e03b7d7be2b4ff44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e8b7a7273567aa4a4aee87cce18e9bff8f3196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57e8b7a7273567aa4a4aee87cce18e9bff8f3196"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9601777b318892ddbd50a55af64f99b443aca169",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc0f1480746b34aa3ca2d9c0f1ec764083026b40/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc0f1480746b34aa3ca2d9c0f1ec764083026b40/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
        "patch": "@@ -326,9 +326,9 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         key.erase(0, 1);\n         std::string section;\n         util::SettingsValue value = InterpretOption(section, key, val);\n-        const unsigned int flags = FlagsOfKnownArg(key);\n+        Optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, flags, error)) {\n+            if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n             }\n             // Weird behavior preserved for backwards compatibility: command\n@@ -355,16 +355,16 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     return success;\n }\n \n-unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n+Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n {\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        const auto search = arg_map.second.find('-' + key);\n+        const auto search = arg_map.second.find(name);\n         if (search != arg_map.second.end()) {\n             return search->second.m_flags;\n         }\n     }\n-    return ArgsManager::NONE;\n+    return nullopt;\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n@@ -745,9 +745,9 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         std::string section;\n         std::string key = option.first;\n         util::SettingsValue value = InterpretOption(section, key, option.second);\n-        const unsigned int flags = FlagsOfKnownArg(key);\n+        Optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, flags, error)) {\n+            if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n             }\n             m_settings.ro_config[section][key].push_back(value);"
      },
      {
        "sha": "d02d3f274ac1b3aa077db6aa1c28424472a6d610",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc0f1480746b34aa3ca2d9c0f1ec764083026b40/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc0f1480746b34aa3ca2d9c0f1ec764083026b40/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
        "patch": "@@ -19,6 +19,7 @@\n #include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n+#include <optional.h>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/memory.h>\n@@ -132,7 +133,6 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n         // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n         ALLOW_BOOL = 0x01,\n         ALLOW_INT = 0x02,\n@@ -296,9 +296,9 @@ class ArgsManager\n \n     /**\n      * Return Flags for known arg.\n-     * Return ArgsManager::NONE for unknown arg.\n+     * Return nullopt for unknown arg.\n      */\n-    unsigned int FlagsOfKnownArg(const std::string& key) const;\n+    Optional<unsigned int> GetArgFlags(const std::string& name) const;\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  },
  {
    "sha": "3e185522ace1678e0a25b9cf8a5553a4bc279bea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTE4NTUyMmFjZTE2NzhlMGEyNWI5Y2Y4YTU1NTNhNGJjMjc5YmVh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-12T18:47:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Get rid of ArgsManagerHelper class\n\nSuggested by John Newbery <john@johnnewbery.com>\nhttps://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551969778\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "681c0aec38c32ed881cc18bcb7a9eae365b0a434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/681c0aec38c32ed881cc18bcb7a9eae365b0a434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e185522ace1678e0a25b9cf8a5553a4bc279bea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e185522ace1678e0a25b9cf8a5553a4bc279bea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e185522ace1678e0a25b9cf8a5553a4bc279bea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e185522ace1678e0a25b9cf8a5553a4bc279bea/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc0f1480746b34aa3ca2d9c0f1ec764083026b40"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 37,
      "deletions": 28
    },
    "files": [
      {
        "sha": "8ea82342254ee80cd94e287c6be861fb2c500ead",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 26,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e185522ace1678e0a25b9cf8a5553a4bc279bea/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e185522ace1678e0a25b9cf8a5553a4bc279bea/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3e185522ace1678e0a25b9cf8a5553a4bc279bea",
        "patch": "@@ -167,23 +167,6 @@ static std::string SettingName(const std::string& arg)\n     return arg.size() > 0 && arg[0] == '-' ? arg.substr(1) : arg;\n }\n \n-/** Internal helper functions for ArgsManager */\n-class ArgsManagerHelper {\n-public:\n-    /** Determine whether to use config settings in the default section,\n-     *  See also comments around ArgsManager::ArgsManager() below. */\n-    static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n-    }\n-\n-    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg)\n-    {\n-        LOCK(am.cs_args);\n-        return GetSetting(am.m_settings, am.m_network, SettingName(arg), !UseDefaultSection(am, arg), /* get_chain_name= */ false);\n-    }\n-};\n-\n /**\n  * Interpret -nofoo as if the user supplied -foo=0.\n  *\n@@ -370,7 +353,7 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n     LOCK(cs_args);\n-    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    bool ignore_default_section_config = !UseDefaultSection(strArg);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value :\n         util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n@@ -381,29 +364,29 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n+    return !GetSetting(strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n+    return GetSetting(strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n }\n \n@@ -854,9 +837,9 @@ std::string ArgsManager::GetChainName() const\n {\n     auto get_net = [&](const std::string& arg) {\n         LOCK(cs_args);\n-        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n-                                               /* ignore_default_section_config= */ false,\n-                                               /* get_chain_name= */ true);\n+        util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+            /* ignore_default_section_config= */ false,\n+            /* get_chain_name= */ true);\n         return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n     };\n \n@@ -874,6 +857,18 @@ std::string ArgsManager::GetChainName() const\n     return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n \n+bool ArgsManager::UseDefaultSection(const std::string& arg) const\n+{\n+    return m_network == CBaseChainParams::MAIN || m_network_only_args.count(arg) == 0;\n+}\n+\n+util::SettingsValue ArgsManager::GetSetting(const std::string& arg) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSetting(\n+        m_settings, m_network, SettingName(arg), !UseDefaultSection(arg), /* get_chain_name= */ false);\n+}\n+\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "4db30281968fa634c7826faf39ed87c142c824d0",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e185522ace1678e0a25b9cf8a5553a4bc279bea/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e185522ace1678e0a25b9cf8a5553a4bc279bea/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3e185522ace1678e0a25b9cf8a5553a4bc279bea",
        "patch": "@@ -148,8 +148,6 @@ class ArgsManager\n     };\n \n protected:\n-    friend class ArgsManagerHelper;\n-\n     struct Arg\n     {\n         std::string m_help_param;\n@@ -166,6 +164,22 @@ class ArgsManager\n \n     NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n+    /**\n+     * Returns true if settings values from the default section should be used,\n+     * depending on the current network and whether the setting is\n+     * network-specific.\n+     */\n+    bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n+\n+    /**\n+     * Get setting value.\n+     *\n+     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n+     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * argument was passed.\n+     */\n+    util::SettingsValue GetSetting(const std::string& arg) const;\n+\n public:\n     ArgsManager();\n "
      }
    ]
  },
  {
    "sha": "0fa54358b06b58f4d17073bcc8a959eb9498aadc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmE1NDM1OGIwNmI1OGY0ZDE3MDczYmNjOGE5NTllYjk0OThhYWRj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-12T18:56:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Add ArgsManager::GetSettingsList method\n\nAdd for consistency with ArgsManager::GetSetting method and to make setting\ntypes accessible to ArgsManager callers and tests (test added next commit).\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "1b525815e05e08b6af223202da9b9a6679d7b8a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b525815e05e08b6af223202da9b9a6679d7b8a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fa54358b06b58f4d17073bcc8a959eb9498aadc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa54358b06b58f4d17073bcc8a959eb9498aadc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fa54358b06b58f4d17073bcc8a959eb9498aadc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa54358b06b58f4d17073bcc8a959eb9498aadc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e185522ace1678e0a25b9cf8a5553a4bc279bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e185522ace1678e0a25b9cf8a5553a4bc279bea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e185522ace1678e0a25b9cf8a5553a4bc279bea"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b6a026b02a7d71258b1a8e5ed238c119c5b55d55",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fa54358b06b58f4d17073bcc8a959eb9498aadc/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fa54358b06b58f4d17073bcc8a959eb9498aadc/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=0fa54358b06b58f4d17073bcc8a959eb9498aadc",
        "patch": "@@ -352,11 +352,8 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-    bool ignore_default_section_config = !UseDefaultSection(strArg);\n     std::vector<std::string> result;\n-    for (const util::SettingsValue& value :\n-        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+    for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n         result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n     return result;\n@@ -869,6 +866,12 @@ util::SettingsValue ArgsManager::GetSetting(const std::string& arg) const\n         m_settings, m_network, SettingName(arg), !UseDefaultSection(arg), /* get_chain_name= */ false);\n }\n \n+std::vector<util::SettingsValue> ArgsManager::GetSettingsList(const std::string& arg) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSettingsList(m_settings, m_network, SettingName(arg), !UseDefaultSection(arg));\n+}\n+\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "633560d70ced9216560240a892a4e86d68e4e923",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fa54358b06b58f4d17073bcc8a959eb9498aadc/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fa54358b06b58f4d17073bcc8a959eb9498aadc/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=0fa54358b06b58f4d17073bcc8a959eb9498aadc",
        "patch": "@@ -180,6 +180,11 @@ class ArgsManager\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n \n+    /**\n+     * Get list of setting values.\n+     */\n+    std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n+\n public:\n     ArgsManager();\n "
      }
    ]
  },
  {
    "sha": "425bb307252cf4dec9b3ef6426e6548b2be7a303",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjViYjMwNzI1MmNmNGRlYzliM2VmNjQyNmU2NTQ4YjJiZTdhMzAz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-04T13:21:54Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "refactor: Add util_CheckValue test\n\nTest GetSetting and GetArg type coercion, negation, and default value handling.\nTest is expanded later to cover other flags besides ALLOW_ANY when they are\nimplemented in https://github.com/bitcoin/bitcoin/pull/16545\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "c0d8e41004878c193c41af953b1c2e3828bc032a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0d8e41004878c193c41af953b1c2e3828bc032a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/425bb307252cf4dec9b3ef6426e6548b2be7a303",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425bb307252cf4dec9b3ef6426e6548b2be7a303",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/425bb307252cf4dec9b3ef6426e6548b2be7a303",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425bb307252cf4dec9b3ef6426e6548b2be7a303/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fa54358b06b58f4d17073bcc8a959eb9498aadc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa54358b06b58f4d17073bcc8a959eb9498aadc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fa54358b06b58f4d17073bcc8a959eb9498aadc"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f079b2bae36aa72591a3c9eba9e81eda5ca35380",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/425bb307252cf4dec9b3ef6426e6548b2be7a303/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/425bb307252cf4dec9b3ef6426e6548b2be7a303/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=425bb307252cf4dec9b3ef6426e6548b2be7a303",
        "patch": "@@ -5,6 +5,7 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n+#include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util.h>\n@@ -189,12 +190,119 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    using ArgsManager::GetSetting;\n+    using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n     using ArgsManager::m_settings;\n };\n \n+//! Test GetSetting and GetArg type coercion, negation, and default value handling.\n+class CheckValueTest : public TestChain100Setup\n+{\n+public:\n+    struct Expect {\n+        util::SettingsValue setting;\n+        bool default_string = false;\n+        bool default_int = false;\n+        bool default_bool = false;\n+        const char* string_value = nullptr;\n+        Optional<int64_t> int_value;\n+        Optional<bool> bool_value;\n+        Optional<std::vector<std::string>> list_value;\n+        const char* error = nullptr;\n+\n+        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        Expect& DefaultString() { default_string = true; return *this; }\n+        Expect& DefaultInt() { default_int = true; return *this; }\n+        Expect& DefaultBool() { default_bool = true; return *this; }\n+        Expect& String(const char* s) { string_value = s; return *this; }\n+        Expect& Int(int64_t i) { int_value = i; return *this; }\n+        Expect& Bool(bool b) { bool_value = b; return *this; }\n+        Expect& List(std::vector<std::string> m) { list_value = std::move(m); return *this; }\n+        Expect& Error(const char* e) { error = e; return *this; }\n+    };\n+\n+    void CheckValue(unsigned int flags, const char* arg, const Expect& expect)\n+    {\n+        TestArgsManager test;\n+        test.SetupArgs({{\"-value\", flags}});\n+        const char* argv[] = {\"ignored\", arg};\n+        std::string error;\n+        bool success = test.ParseParameters(arg ? 2 : 1, (char**)argv, error);\n+\n+        BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n+        auto settings_list = test.GetSettingsList(\"-value\");\n+        if (expect.setting.isNull() || expect.setting.isFalse()) {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+        } else {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n+        }\n+\n+        if (expect.error) {\n+            BOOST_CHECK(!success);\n+            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+        } else {\n+            BOOST_CHECK(success);\n+            BOOST_CHECK_EQUAL(error, \"\");\n+        }\n+\n+        if (expect.default_string) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n+        } else if (expect.string_value) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.default_int) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+        } else if (expect.int_value) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.default_bool) {\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), false);\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), true);\n+        } else if (expect.bool_value) {\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.list_value) {\n+            auto l = test.GetArgs(\"-value\");\n+            BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool().List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false).List({\"0\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+}\n+\n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n     TestArgsManager testArgs;"
      }
    ]
  },
  {
    "sha": "cba2710220d76bbe790b04088839cbbd410436de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmEyNzEwMjIwZDc2YmJlNzkwYjA0MDg4ODM5Y2JiZDQxMDQzNmRl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-12T22:01:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T09:20:30Z"
      },
      "message": "scripted-diff: Remove unused ArgsManager type flags in tests\n\nThe bool/int/string flags were added speculatively in #16097 and trigger errors\nwhen type checking is actually implemented in\nhttps://github.com/bitcoin/bitcoin/pull/16545\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/ALLOW_\\(BOOL\\|INT\\|STRING\\)/ALLOW_ANY/g' src/test/util_tests.cpp src/test/getarg_tests.cpp\n-END VERIFY SCRIPT-\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "f982dd524e036df926ab65826db024ead62ecabd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f982dd524e036df926ab65826db024ead62ecabd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cba2710220d76bbe790b04088839cbbd410436de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cba2710220d76bbe790b04088839cbbd410436de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cba2710220d76bbe790b04088839cbbd410436de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cba2710220d76bbe790b04088839cbbd410436de/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "425bb307252cf4dec9b3ef6426e6548b2be7a303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/425bb307252cf4dec9b3ef6426e6548b2be7a303",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/425bb307252cf4dec9b3ef6426e6548b2be7a303"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "4c64d8c8334f3c4682f3a8ea7d25aca7530d6b77",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cba2710220d76bbe790b04088839cbbd410436de/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cba2710220d76bbe790b04088839cbbd410436de/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=cba2710220d76bbe790b04088839cbbd410436de",
        "patch": "@@ -43,7 +43,7 @@ static void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& a\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo});\n     ResetArgs(\"-foo\");\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n@@ -97,8 +97,8 @@ BOOST_AUTO_TEST_CASE(boolarg)\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_STRING);\n-    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_STRING);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n@@ -124,8 +124,8 @@ BOOST_AUTO_TEST_CASE(stringarg)\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_INT);\n-    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_INT);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n@@ -159,8 +159,8 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n-    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_BOOL);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"-nofoo\");\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));"
      },
      {
        "sha": "9b8f5254de990ae5b2646e678916661a8cd019fe",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cba2710220d76bbe790b04088839cbbd410436de/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cba2710220d76bbe790b04088839cbbd410436de/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=cba2710220d76bbe790b04088839cbbd410436de",
        "patch": "@@ -397,12 +397,12 @@ BOOST_AUTO_TEST_CASE(util_ArgParsing)\n BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n {\n     TestArgsManager testArgs;\n-    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_BOOL);\n-    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_BOOL);\n-    const auto c = std::make_pair(\"-c\", ArgsManager::ALLOW_BOOL);\n-    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_BOOL);\n-    const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_BOOL);\n-    const auto f = std::make_pair(\"-f\", ArgsManager::ALLOW_BOOL);\n+    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n+    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n+    const auto c = std::make_pair(\"-c\", ArgsManager::ALLOW_ANY);\n+    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n+    const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n+    const auto f = std::make_pair(\"-f\", ArgsManager::ALLOW_ANY);\n \n     const char *argv_test[] = {\n         \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n@@ -441,8 +441,8 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n-    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_BOOL);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.SetupArgs({foo, bar});\n     std::string error;\n@@ -514,16 +514,16 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     TestArgsManager test_args;\n     LOCK(test_args.cs_args);\n-    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_BOOL);\n-    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_BOOL);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_STRING);\n-    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_STRING);\n+    const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n+    const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n     const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n-    const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_BOOL);\n-    const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_BOOL);\n-    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_BOOL);\n-    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_BOOL);\n-    const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_INT);\n+    const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_ANY);\n+    const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_ANY);\n+    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY);\n+    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY);\n+    const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_ANY);\n     test_args.SetupArgs({a, b, ccc, d, e, fff, ggg, h, i, iii});\n \n     test_args.ReadConfigString(str_config);\n@@ -726,8 +726,8 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n BOOST_AUTO_TEST_CASE(util_GetChainName)\n {\n     TestArgsManager test_args;\n-    const auto testnet = std::make_pair(\"-testnet\", ArgsManager::ALLOW_BOOL);\n-    const auto regtest = std::make_pair(\"-regtest\", ArgsManager::ALLOW_BOOL);\n+    const auto testnet = std::make_pair(\"-testnet\", ArgsManager::ALLOW_ANY);\n+    const auto regtest = std::make_pair(\"-regtest\", ArgsManager::ALLOW_ANY);\n     test_args.SetupArgs({testnet, regtest});\n \n     const char* argv_testnet[] = {\"cmd\", \"-testnet\"};"
      }
    ]
  },
  {
    "sha": "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWZkMzY2MDQ0ZTI3MTYzMmRjMGU0Zjk2ZTFjMTRmOGU4NzIxM2Fl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T20:23:06Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-13T20:23:06Z"
      },
      "message": "refactor: Remove null setting check in GetSetting()\n\nAlso rename the \"result_complete\" variable in GetSettingsList() to \"done\" to be\nmore consistent with GetSetting().\n\nThis change doesn't affect current behavior but could be useful in the future\nto support dynamically changing settings at runtime and adding new settings\nsources, because it lets high priority sources reset settings back to default\n(see test).\n\nBy removing a special case for null, this change also helps merge code treat\nsettings values more like black boxes, and interfere less with settings parsing\nand retrieval.",
      "tree": {
        "sha": "58801c53deeef9119dbba18ac765d967637e7bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58801c53deeef9119dbba18ac765d967637e7bc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9fd366044e271632dc0e4f96e1c14f8e87213ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9fd366044e271632dc0e4f96e1c14f8e87213ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9fd366044e271632dc0e4f96e1c14f8e87213ae/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cba2710220d76bbe790b04088839cbbd410436de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cba2710220d76bbe790b04088839cbbd410436de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cba2710220d76bbe790b04088839cbbd410436de"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 22,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7e30fbcf68f0a6d0540bfb3c3eada6711b0b1fd4",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9fd366044e271632dc0e4f96e1c14f8e87213ae/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9fd366044e271632dc0e4f96e1c14f8e87213ae/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=e9fd366044e271632dc0e4f96e1c14f8e87213ae",
        "patch": "@@ -45,6 +45,19 @@ BOOST_AUTO_TEST_CASE(Simple)\n     CheckValues(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n }\n \n+// Confirm that a high priority setting overrides a lower priority setting even\n+// if the high priority setting is null. This behavior is useful for a high\n+// priority setting source to be able to effectively reset any setting back to\n+// its default value.\n+BOOST_AUTO_TEST_CASE(NullOverride)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"value\");\n+    BOOST_CHECK_EQUAL(R\"(\"value\")\", GetSetting(settings, \"section\", \"name\", false, false).write().c_str());\n+    settings.forced_settings[\"name\"] = {};\n+    BOOST_CHECK_EQUAL(R\"(null)\", GetSetting(settings, \"section\", \"name\", false, false).write().c_str());\n+}\n+\n // Test different ways settings can be merged, and verify results. This test can\n // be used to confirm that updates to settings code don't change behavior\n // unintentionally."
      },
      {
        "sha": "e4979df75522c35737c24e77229696c2ee672afa",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9fd366044e271632dc0e4f96e1c14f8e87213ae/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9fd366044e271632dc0e4f96e1c14f8e87213ae/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=e9fd366044e271632dc0e4f96e1c14f8e87213ae",
        "patch": "@@ -56,6 +56,7 @@ SettingsValue GetSetting(const Settings& settings,\n     bool get_chain_name)\n {\n     SettingsValue result;\n+    bool done = false; // Done merging any more settings sources.\n     MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n         // Weird behavior preserved for backwards compatibility: Apply negated\n         // setting even if non-negated setting would be ignored. A negated\n@@ -79,6 +80,8 @@ SettingsValue GetSetting(const Settings& settings,\n         // negated values, or at least warn they are ignored.\n         const bool skip_negated_command_line = get_chain_name;\n \n+        if (done) return;\n+\n         // Ignore settings in default config section if requested.\n         if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION &&\n             !never_ignore_negated_setting) {\n@@ -88,13 +91,12 @@ SettingsValue GetSetting(const Settings& settings,\n         // Skip negated command line settings.\n         if (skip_negated_command_line && span.last_negated()) return;\n \n-        // Stick with highest priority value, keeping result if already set.\n-        if (!result.isNull()) return;\n-\n         if (!span.empty()) {\n             result = reverse_precedence ? span.begin()[0] : span.end()[-1];\n+            done = true;\n         } else if (span.last_negated()) {\n             result = false;\n+            done = true;\n         }\n     });\n     return result;\n@@ -106,7 +108,7 @@ std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n     bool ignore_default_section_config)\n {\n     std::vector<SettingsValue> result;\n-    bool result_complete = false;\n+    bool done = false; // Done merging any more settings sources.\n     bool prev_negated_empty = false;\n     MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n         // Weird behavior preserved for backwards compatibility: Apply config\n@@ -125,7 +127,7 @@ std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n \n         // Add new settings to the result if isn't already complete, or if the\n         // values are zombies.\n-        if (!result_complete || add_zombie_config_values) {\n+        if (!done || add_zombie_config_values) {\n             for (const auto& value : span) {\n                 if (value.isArray()) {\n                     result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n@@ -136,8 +138,8 @@ std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n         }\n \n         // If a setting was negated, or if a setting was forced, set\n-        // result_complete to true to ignore any later lower priority settings.\n-        result_complete |= span.negated() > 0 || source == Source::FORCED;\n+        // done to true to ignore any later lower priority settings.\n+        done |= span.negated() > 0 || source == Source::FORCED;\n \n         // Update the negated and empty state used for the zombie values check.\n         prev_negated_empty |= span.last_negated() && result.empty();"
      }
    ]
  }
]