dcousens,2017-03-13T23:22:43Z,"If it shouldn't happen,  maybe an `assert` is better?",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-286274444,286274444,
pstratem,2017-03-14T00:22:13Z,@TheBlueMatt what was the behavior before if the elements list was empty?,https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-286284458,286284458,
pstratem,2017-03-14T00:24:17Z,wait no that's @sipa ,https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-286284800,286284800,
pstratem,2017-03-14T00:26:32Z,nvm it returned 0 so this maintains the original behavior,https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-286285121,286285121,
TheBlueMatt,2017-03-17T23:32:27Z,"Probably best to assert that vTxid has non-zero length, as that would represent generating a tree for an invalid block.",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-287496029,287496029,
Christewart,2017-03-26T14:09:44Z,"Changed to what @dcousens and @TheBlueMatt suggested. I think that makes sense at the end of the day. Also, from what I can tell, that assert cannot be hit from the p2p code. ",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-289286967,289286967,
NicolasDorier,2017-03-27T06:20:32Z,"I would have set `fBad`, so we don't risk later to reach a network reachable `assert(0)` by inadvertance. :)",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-289363639,289363639,
jnewbery,2017-04-06T15:33:09Z,"Looks good. Lightly tested ACK 51802ccc4561bd5a94499c665a333517f5eadd10\n\nif you're adding an assert, can you put some commenting in explaining the assumptions that you're testing (either around the assert or the function declaration).\n\nAlso please remove the merge commits from this PR.\n\nEDIT: cool that this was found using your property-based testing. I've been meaning to review #8469 ",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-292212126,292212126,
Christewart,2017-04-07T02:13:53Z,"@jnewbery Addressed the concerns you had. \n\nIf you want to chat about 8469 don't be afraid to ping me on irc. I think it will allow us to streamline testing AND exhaustively test invariants better than we are now. ",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-292401880,292401880,
NicolasDorier,2017-04-07T08:44:02Z,"why no just setting `fBad` and returning ? I really don't like having an assert, this code might be reached from the network one day for some reason (maybe unsuspecting new feature). Putting an assert here is a tragedy waiting to happen.",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-292478342,292478342,
jnewbery,2017-04-07T13:36:22Z,"@NicolasDorier - I had the same concerns as you, so I spent some time reading around the code to convince myself that this was ok. This code is only called from the CMerkleBlock constructor, which is only called from the gettxoutproof RPC or in response to a MSG_FILTERED_BLOCK getdata request. In both cases, we're constructing the Merkle Block from a block that's already in our mapBlockIndex. Ther",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-292537995,292537995,
TheBlueMatt,2017-07-11T23:18:10Z,"utACK bbdd771e4c1a9ae405a266c0b158bf6825acef15, though it would be nice to add a comment to CMerkleBlock noting that the block containing transactions will be asserted-on.",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-314598537,314598537,
Christewart,2017-07-12T15:14:14Z,"@TheBlueMatt Added the comment, is this ready for merge?\n\nEDIT: Also rebased",https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-314801495,314801495,
TheBlueMatt,2017-07-17T17:54:36Z,utACK 8276e70de15c5c3a7525471ad619edd1237b424a,https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-315830898,315830898,
sipa,2017-07-17T18:07:34Z,utACK 8276e70de15c5c3a7525471ad619edd1237b424a,https://github.com/bitcoin/bitcoin/pull/9980#issuecomment-315834649,315834649,
TheBlueMatt,2017-07-12T15:34:09Z,"Wait, *what* is asserted? Also note extra space at EOL here.",https://github.com/bitcoin/bitcoin/pull/9980#discussion_r126989604,126989604,src/merkleblock.h
