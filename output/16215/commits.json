[
  {
    "sha": "db4edc51daad64d8588e12aa17c1c00752e7c5fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjRlZGM1MWRhYWQ2NGQ4NTg4ZTEyYWExN2MxYzAwNzUyZTdjNWZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-24T19:14:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-13T13:41:52Z"
      },
      "message": "Optionally allow AskPassphraseDialog to output the passphrase",
      "tree": {
        "sha": "014e62c1ed904fa88979696e6bcef7490f74d327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/014e62c1ed904fa88979696e6bcef7490f74d327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db4edc51daad64d8588e12aa17c1c00752e7c5fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4edc51daad64d8588e12aa17c1c00752e7c5fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db4edc51daad64d8588e12aa17c1c00752e7c5fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4edc51daad64d8588e12aa17c1c00752e7c5fa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65c4bbe629bbb6eb4347d35a12b0b1c90eeabce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c4bbe629bbb6eb4347d35a12b0b1c90eeabce9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65c4bbe629bbb6eb4347d35a12b0b1c90eeabce9"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 33,
      "deletions": 18
    },
    "files": [
      {
        "sha": "a8cf625029b9560bca0bcd3b5419459516b346bd",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 17,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db4edc51daad64d8588e12aa17c1c00752e7c5fa/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db4edc51daad64d8588e12aa17c1c00752e7c5fa/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=db4edc51daad64d8588e12aa17c1c00752e7c5fa",
        "patch": "@@ -18,12 +18,13 @@\n #include <QMessageBox>\n #include <QPushButton>\n \n-AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n+AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent, SecureString* passphrase_out) :\n     QDialog(parent),\n     ui(new Ui::AskPassphraseDialog),\n     mode(_mode),\n     model(nullptr),\n-    fCapsLock(false)\n+    fCapsLock(false),\n+    m_passphrase_out(passphrase_out)\n {\n     ui->setupUi(this);\n \n@@ -90,7 +91,7 @@ void AskPassphraseDialog::setModel(WalletModel *_model)\n void AskPassphraseDialog::accept()\n {\n     SecureString oldpass, newpass1, newpass2;\n-    if(!model)\n+    if (!model && mode != Encrypt)\n         return;\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);\n@@ -119,24 +120,35 @@ void AskPassphraseDialog::accept()\n         {\n             if(newpass1 == newpass2)\n             {\n-                if(model->setWalletEncrypted(true, newpass1))\n-                {\n-                    QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n+                if (m_passphrase_out) {\n+                    m_passphrase_out->assign(newpass1);\n+                    QMessageBox::warning(this, tr(\"Wallet to be encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"Your wallet is now encrypted. \"\n+                                         tr(\"Your wallet is about to be encrypted. \"\n                                          \"Remember that encrypting your wallet cannot fully protect \"\n                                          \"your bitcoins from being stolen by malware infecting your computer.\") +\n-                                         \"<br><br><b>\" +\n-                                         tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n-                                         \"should be replaced with the newly generated, encrypted wallet file. \"\n-                                         \"For security reasons, previous backups of the unencrypted wallet file \"\n-                                         \"will become useless as soon as you start using the new, encrypted wallet.\") +\n                                          \"</b></qt>\");\n-                }\n-                else\n-                {\n-                    QMessageBox::critical(this, tr(\"Wallet encryption failed\"),\n-                                         tr(\"Wallet encryption failed due to an internal error. Your wallet was not encrypted.\"));\n+                } else {\n+                    assert(model != nullptr);\n+                    if(model->setWalletEncrypted(true, newpass1))\n+                    {\n+                        QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n+                                             \"<qt>\" +\n+                                             tr(\"Your wallet is now encrypted. \"\n+                                             \"Remember that encrypting your wallet cannot fully protect \"\n+                                             \"your bitcoins from being stolen by malware infecting your computer.\") +\n+                                             \"<br><br><b>\" +\n+                                             tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n+                                             \"should be replaced with the newly generated, encrypted wallet file. \"\n+                                             \"For security reasons, previous backups of the unencrypted wallet file \"\n+                                             \"will become useless as soon as you start using the new, encrypted wallet.\") +\n+                                             \"</b></qt>\");\n+                    }\n+                    else\n+                    {\n+                        QMessageBox::critical(this, tr(\"Wallet encryption failed\"),\n+                                             tr(\"Wallet encryption failed due to an internal error. Your wallet was not encrypted.\"));\n+                    }\n                 }\n                 QDialog::accept(); // Success\n             }"
      },
      {
        "sha": "bdfd3fb9a0695971df52c9cccbcb93f70c903929",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db4edc51daad64d8588e12aa17c1c00752e7c5fa/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db4edc51daad64d8588e12aa17c1c00752e7c5fa/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=db4edc51daad64d8588e12aa17c1c00752e7c5fa",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <QDialog>\n \n+#include <support/allocators/secure.h>\n+\n class WalletModel;\n \n namespace Ui {\n@@ -27,7 +29,7 @@ class AskPassphraseDialog : public QDialog\n         Decrypt     /**< Ask passphrase and decrypt wallet */\n     };\n \n-    explicit AskPassphraseDialog(Mode mode, QWidget *parent);\n+    explicit AskPassphraseDialog(Mode mode, QWidget *parent, SecureString* passphrase_out = nullptr);\n     ~AskPassphraseDialog();\n \n     void accept();\n@@ -39,6 +41,7 @@ class AskPassphraseDialog : public QDialog\n     Mode mode;\n     WalletModel *model;\n     bool fCapsLock;\n+    SecureString* m_passphrase_out;\n \n private Q_SLOTS:\n     void textChanged();"
      }
    ]
  },
  {
    "sha": "839bc4dcba74d0dc6131c57c19b13f25893caa3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzliYzRkY2JhNzRkMGRjNjEzMWM1N2MxOWIxM2YyNTg5M2NhYTNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-24T21:13:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-13T13:41:52Z"
      },
      "message": "Move wallet creation out of the createwallet rpc into its own function",
      "tree": {
        "sha": "c341ff83e5f558c9809a0ba1fb8c9810859477d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c341ff83e5f558c9809a0ba1fb8c9810859477d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/839bc4dcba74d0dc6131c57c19b13f25893caa3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839bc4dcba74d0dc6131c57c19b13f25893caa3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/839bc4dcba74d0dc6131c57c19b13f25893caa3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839bc4dcba74d0dc6131c57c19b13f25893caa3c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db4edc51daad64d8588e12aa17c1c00752e7c5fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4edc51daad64d8588e12aa17c1c00752e7c5fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db4edc51daad64d8588e12aa17c1c00752e7c5fa"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 82,
      "deletions": 43
    },
    "files": [
      {
        "sha": "23e48550c2dbe96f4f96fefadc582a9b0c340401",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 43,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=839bc4dcba74d0dc6131c57c19b13f25893caa3c",
        "patch": "@@ -2665,17 +2665,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n         throw std::runtime_error(help.ToString());\n     }\n-    std::string error;\n-    std::string warning;\n \n     uint64_t flags = 0;\n     if (!request.params[1].isNull() && request.params[1].get_bool()) {\n         flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n \n-    bool create_blank = false; // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        create_blank = true;\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n     SecureString passphrase;\n@@ -2686,51 +2682,22 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             // Empty string is invalid\n             throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Cannot encrypt a wallet with a blank password\");\n         }\n-        // Born encrypted wallets need to be blank first so that wallet creation doesn't make any unencrypted keys\n-        flags |= WALLET_FLAG_BLANK_WALLET;\n-    }\n-\n-    WalletLocation location(request.params[0].get_str());\n-    if (location.Exists()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n-    }\n-\n-    // Wallet::Verify will check if we're trying to create a wallet with a duplication name.\n-    if (!CWallet::Verify(*g_rpc_interfaces->chain, location, false, error, warning)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, flags);\n+    std::string error;\n+    std::string warning;\n+    WalletCreationStatus status;\n+    std::shared_ptr<CWallet> wallet = CreateWallet(*g_rpc_interfaces->chain, request.params[0].get_str(), error, warning, status, passphrase, flags);\n     if (!wallet) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n-    }\n-\n-    // Encrypt the wallet if there's a passphrase\n-    if (!passphrase.empty() && !(flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        if (!wallet->EncryptWallet(passphrase)) {\n-            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet created but failed to encrypt.\");\n-        }\n-\n-        if (!create_blank) {\n-            // Unlock the wallet\n-            if (!wallet->Unlock(passphrase)) {\n-                throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet was encrypted but could not be unlocked\");\n-            }\n-\n-            // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n-\n-            // Relock the wallet\n-            wallet->Lock();\n+        if (status == WalletCreationStatus::CREATION_FAILED) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, error);\n+        } else if (status == WalletCreationStatus::CREATION_FAILED) {\n+            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, error);\n+        } else {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed\");\n         }\n     }\n \n-    AddWallet(wallet);\n-\n-    wallet->postInitProcess();\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", warning);"
      },
      {
        "sha": "5ee3af0385d3c4cf8b999c563baef8fd0f4852a6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=839bc4dcba74d0dc6131c57c19b13f25893caa3c",
        "patch": "@@ -157,6 +157,70 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return LoadWallet(chain, WalletLocation(name), error, warning);\n }\n \n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags)\n+{\n+    // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n+    bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n+\n+    // Born encrypted wallets need to be created blank first.\n+    if (!passphrase.empty()) {\n+        wallet_creation_flags |= WALLET_FLAG_BLANK_WALLET;\n+    }\n+\n+    // Check the wallet file location\n+    WalletLocation location(name);\n+    if (location.Exists()) {\n+        error = \"Wallet \" + location.GetName() + \" already exists.\";\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n+    std::string wallet_error;\n+    if (!CWallet::Verify(chain, location, false, wallet_error, warning)) {\n+        error = \"Wallet file verification failed: \" + wallet_error;\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Make the wallet\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, wallet_creation_flags);\n+    if (!wallet) {\n+        error = \"Wallet creation failed\";\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Encrypt the wallet\n+    if (!passphrase.empty() && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!wallet->EncryptWallet(passphrase)) {\n+            error = \"Error: Wallet created but failed to encrypt.\";\n+            status = WalletCreationStatus::ENCRYPTION_FAILED;\n+            return nullptr;\n+        }\n+        if (!create_blank) {\n+            // Unlock the wallet\n+            if (!wallet->Unlock(passphrase)) {\n+                error = \"Error: Wallet was encrypted but could not be unlocked\";\n+                status = WalletCreationStatus::ENCRYPTION_FAILED;\n+                return nullptr;\n+            }\n+\n+            // Set a seed for the wallet\n+            CPubKey master_pub_key = wallet->GenerateNewSeed();\n+            wallet->SetHDSeed(master_pub_key);\n+            wallet->NewKeyPool();\n+\n+            // Relock the wallet\n+            wallet->Lock();\n+        }\n+    }\n+    AddWallet(wallet);\n+    wallet->postInitProcess();\n+    status = WalletCreationStatus::SUCCESS;\n+    return wallet;\n+}\n+\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));"
      },
      {
        "sha": "bac219946fa840ed04e5c437b95ad09d8610ef76",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/839bc4dcba74d0dc6131c57c19b13f25893caa3c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=839bc4dcba74d0dc6131c57c19b13f25893caa3c",
        "patch": "@@ -49,6 +49,14 @@ std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n \n+enum WalletCreationStatus {\n+    SUCCESS,\n+    CREATION_FAILED,\n+    ENCRYPTION_FAILED\n+};\n+\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags);\n+\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default"
      }
    ]
  },
  {
    "sha": "71fe23b5a811ae67d20211001b2647c656d08c7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWZlMjNiNWE4MTFhZTY3ZDIwMjExMDAxYjI2NDdjNjU2ZDA4Yzdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-24T21:14:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-13T13:41:52Z"
      },
      "message": "Expose wallet creation to the GUI via WalletController",
      "tree": {
        "sha": "d4f559992b1a6f7d67a62bc2d62ea61e91112ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4f559992b1a6f7d67a62bc2d62ea61e91112ffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71fe23b5a811ae67d20211001b2647c656d08c7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fe23b5a811ae67d20211001b2647c656d08c7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71fe23b5a811ae67d20211001b2647c656d08c7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fe23b5a811ae67d20211001b2647c656d08c7d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "839bc4dcba74d0dc6131c57c19b13f25893caa3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/839bc4dcba74d0dc6131c57c19b13f25893caa3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/839bc4dcba74d0dc6131c57c19b13f25893caa3c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "234a4800f360b1521748e84b20c3e734246be791",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fe23b5a811ae67d20211001b2647c656d08c7d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fe23b5a811ae67d20211001b2647c656d08c7d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=71fe23b5a811ae67d20211001b2647c656d08c7d",
        "patch": "@@ -5,8 +5,10 @@\n #include <stdio.h>\n #include <util/system.h>\n #include <walletinitinterface.h>\n+#include <support/allocators/secure.h>\n \n class CWallet;\n+enum class WalletCreationStatus;\n \n namespace interfaces {\n class Chain;\n@@ -74,6 +76,11 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n namespace interfaces {\n \n class Wallet;"
      },
      {
        "sha": "55a45e7959435f1fe24faa38961504200c7a86d6",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fe23b5a811ae67d20211001b2647c656d08c7d/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fe23b5a811ae67d20211001b2647c656d08c7d/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=71fe23b5a811ae67d20211001b2647c656d08c7d",
        "patch": "@@ -25,6 +25,7 @@\n #include <rpc/server.h>\n #include <scheduler.h>\n #include <shutdown.h>\n+#include <support/allocators/secure.h>\n #include <sync.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n@@ -40,10 +41,12 @@\n #include <univalue.h>\n \n class CWallet;\n+enum class WalletCreationStatus;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags);\n \n namespace interfaces {\n \n@@ -257,6 +260,11 @@ class NodeImpl : public Node\n     {\n         return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n     }\n+    std::unique_ptr<Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags) override\n+    {\n+        WalletCreationStatus status;\n+        return MakeWallet(CreateWallet(*m_interfaces.chain, name, error, warning, status, passphrase, wallet_creation_flags));\n+    }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage_connect(fn));"
      },
      {
        "sha": "2e39caef379b7a83ceaf4466ef73549ba1a51108",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fe23b5a811ae67d20211001b2647c656d08c7d/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fe23b5a811ae67d20211001b2647c656d08c7d/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=71fe23b5a811ae67d20211001b2647c656d08c7d",
        "patch": "@@ -9,6 +9,7 @@\n #include <amount.h>     // For CAmount\n #include <net.h>        // For CConnman::NumConnections\n #include <netaddress.h> // For Network\n+#include <support/allocators/secure.h> // For SecureString\n \n #include <functional>\n #include <memory>\n@@ -194,6 +195,9 @@ class Node\n     //! with handleLoadWallet.\n     virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n \n+    //! Create a wallet from file\n+    virtual std::unique_ptr<Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags) = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "83095cdf69ea62fcfee41f6832c061fc84c3e1f7",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fe23b5a811ae67d20211001b2647c656d08c7d/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fe23b5a811ae67d20211001b2647c656d08c7d/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=71fe23b5a811ae67d20211001b2647c656d08c7d",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/askpassphrasedialog.h>\n #include <qt/walletcontroller.h>\n \n #include <interfaces/handler.h>\n@@ -64,6 +65,11 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n     return activity;\n }\n \n+std::unique_ptr<interfaces::Wallet> WalletController::createWallet(const std::string& name, std::string& error, std::string& warning, SecureString& passphrase, uint64_t wallet_creation_flags)\n+{\n+    return m_node.createWallet(name, error, warning, passphrase, wallet_creation_flags);\n+}\n+\n void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n {\n     QMessageBox box(parent);"
      },
      {
        "sha": "d37e6553a9ee313d9b1866f6eb809f5642220de3",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fe23b5a811ae67d20211001b2647c656d08c7d/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fe23b5a811ae67d20211001b2647c656d08c7d/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=71fe23b5a811ae67d20211001b2647c656d08c7d",
        "patch": "@@ -33,17 +33,18 @@ class WalletController : public QObject\n {\n     Q_OBJECT\n \n-    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n     void removeAndDeleteWallet(WalletModel* wallet_model);\n \n public:\n     WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent);\n     ~WalletController();\n \n     std::vector<WalletModel*> getWallets() const;\n+    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n     OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n+    std::unique_ptr<interfaces::Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, SecureString& passphrase, uint64_t wallet_creation_flags);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:"
      }
    ]
  },
  {
    "sha": "b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTIwNWJmYTRjNzFmZjU4MDM2ZWQxZmQwMzJkMWIzNzQwNjY5ZDRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-20T17:22:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-13T14:19:35Z"
      },
      "message": "Add CreateWalletDialog to create wallets from the GUI",
      "tree": {
        "sha": "0d412935e1f0d8216049368fb5d7e3a0f4673b3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d412935e1f0d8216049368fb5d7e3a0f4673b3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71fe23b5a811ae67d20211001b2647c656d08c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fe23b5a811ae67d20211001b2647c656d08c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71fe23b5a811ae67d20211001b2647c656d08c7d"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 308,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0e4eeee0a7ad9ebc49c30d30c285ccd41a752771",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -16,6 +16,7 @@ FORMS += \\\n     ../src/qt/forms/sendcoinsentry.ui \\\n     ../src/qt/forms/signverifymessagedialog.ui \\\n     ../src/qt/forms/transactiondescdialog.ui \\\n+    ../src/qt/forms/createwalletdialog.ui\n \n RESOURCES += \\\n     ../src/qt/bitcoin.qrc"
      },
      {
        "sha": "cea1dca463dee625cd89cd1c268a196df8c12525",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -98,6 +98,7 @@ QT_FORMS_UI = \\\n   qt/forms/addressbookpage.ui \\\n   qt/forms/askpassphrasedialog.ui \\\n   qt/forms/coincontroldialog.ui \\\n+  qt/forms/createwalletdialog.ui \\\n   qt/forms/editaddressdialog.ui \\\n   qt/forms/helpmessagedialog.ui \\\n   qt/forms/intro.ui \\\n@@ -117,6 +118,7 @@ QT_MOC_CPP = \\\n   qt/moc_addressbookpage.cpp \\\n   qt/moc_addresstablemodel.cpp \\\n   qt/moc_askpassphrasedialog.cpp \\\n+  qt/moc_createwalletdialog.cpp \\\n   qt/moc_bantablemodel.cpp \\\n   qt/moc_bitcoinaddressvalidator.cpp \\\n   qt/moc_bitcoinamountfield.cpp \\\n@@ -202,6 +204,7 @@ BITCOIN_QT_H = \\\n   qt/clientmodel.h \\\n   qt/coincontroldialog.h \\\n   qt/coincontroltreewidget.h \\\n+  qt/createwalletdialog.h \\\n   qt/csvmodelwriter.h \\\n   qt/editaddressdialog.h \\\n   qt/guiconstants.h \\\n@@ -338,6 +341,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/askpassphrasedialog.cpp \\\n   qt/coincontroldialog.cpp \\\n   qt/coincontroltreewidget.cpp \\\n+  qt/createwalletdialog.cpp \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\"
      },
      {
        "sha": "4e1e72341fcb32467d449ed66216262381209827",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/askpassphrasedialog.h>\n+#include <qt/createwalletdialog.h>\n+#include <qt/forms/ui_createwalletdialog.h>\n+#include <qt/guiconstants.h>\n+#include <support/allocators/secure.h>\n+#include <wallet/wallet.h>\n+\n+#include <QMessageBox>\n+#include <QProgressDialog>\n+#include <QPushButton>\n+#include <QString>\n+\n+CreateWalletDialog::CreateWalletDialog(QWidget* parent, WalletController* wallet_controller) :\n+    QDialog(parent),\n+    ui(new Ui::CreateWalletDialog)\n+{\n+    ui->setupUi(this);\n+    this->m_wallet_controller = wallet_controller;\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setText(\"Create\");\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    ui->wallet_name_line_edit->setFocus(Qt::ActiveWindowFocusReason);\n+\n+    connect(ui->wallet_name_line_edit, &QLineEdit::textEdited, this, &CreateWalletDialog::WalletNameChanged);\n+}\n+\n+CreateWalletDialog::~CreateWalletDialog()\n+{\n+    delete ui;\n+}\n+\n+void CreateWalletDialog::WalletNameChanged(const QString& text)\n+{\n+    if (text.isEmpty()) {\n+        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    } else {\n+        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n+    }\n+}\n+\n+void CreateWalletDialog::accept()\n+{\n+    // Disable the buttons\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    ui->buttonBox->button(QDialogButtonBox::Cancel)->setEnabled(false);\n+\n+    // Get the options\n+    std::string wallet_name = ui->wallet_name_line_edit->text().toStdString();\n+    bool disable_priv_keys = ui->disable_privkeys_checkbox->isChecked();\n+    bool blank = ui->blank_wallet_checkbox->isChecked();\n+    bool encrypt = ui->encrypt_wallet_checkbox->isChecked();\n+\n+    // Get wallet creation flags\n+    uint64_t flags = 0;\n+    if (disable_priv_keys) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    }\n+    if (blank) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n+    }\n+\n+    // Show a progress dialog\n+    QProgressDialog* dialog = new QProgressDialog(this);\n+    dialog->setLabelText(tr(\"Creating Wallet <b>%1</b>...\").arg(QString(wallet_name.c_str()).toHtmlEscaped()));\n+    dialog->setRange(0, 0);\n+    dialog->setCancelButton(nullptr);\n+    dialog->setWindowModality(Qt::ApplicationModal);\n+    dialog->show();\n+\n+    // Get the passphrase if encryption is used\n+    SecureString passphrase;\n+    passphrase.reserve(MAX_PASSPHRASE_SIZE);\n+    if (encrypt) {\n+        AskPassphraseDialog dlg(AskPassphraseDialog::Encrypt, this, &passphrase);\n+        dlg.exec();\n+        if (passphrase.empty()) {\n+            dialog->hide();\n+            QDialog::reject();\n+            return;\n+        }\n+    }\n+\n+    // Create the wallet\n+    std::string error;\n+    std::string warning;\n+    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->createWallet(wallet_name, error, warning, passphrase, flags);\n+\n+    if (!error.empty()) {\n+        QMessageBox::critical(this, tr(\"Wallet creation failed\"), QString::fromStdString(error));\n+        return;\n+    }\n+    if (!warning.empty()) {\n+        QMessageBox::warning(this, tr(\"Wallet creation warning\"), QString::fromStdString(warning));\n+    }\n+    dialog->hide();\n+    QDialog::accept();\n+}"
      },
      {
        "sha": "d84665076798a6d47e94a2aba3278737edd685c8",
        "filename": "src/qt/createwalletdialog.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_CREATEWALLETDIALOG_H\n+#define BITCOIN_QT_CREATEWALLETDIALOG_H\n+\n+#include <qt/walletcontroller.h>\n+\n+#include <QDialog>\n+\n+class WalletModel;\n+\n+namespace Ui {\n+    class CreateWalletDialog;\n+}\n+\n+/** Dialog for creating wallets\n+ */\n+class CreateWalletDialog : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit CreateWalletDialog(QWidget *parent, WalletController *wallet_controller);\n+    virtual ~CreateWalletDialog();\n+\n+    void accept();\n+    void WalletNameChanged(const QString& text);\n+\n+private:\n+    Ui::CreateWalletDialog *ui;\n+    WalletController *m_wallet_controller;\n+};\n+\n+#endif // BITCOIN_QT_CREATEWALLETDIALOG_H"
      },
      {
        "sha": "3fbfea8dc6ab1afce4675204283986f7ad5cb90d",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "added",
        "additions": 161,
        "deletions": 0,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -0,0 +1,161 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>CreateWalletDialog</class>\n+ <widget class=\"QDialog\" name=\"CreateWalletDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>370</width>\n+    <height>213</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Create Wallet</string>\n+  </property>\n+  <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>10</x>\n+     <y>160</y>\n+     <width>341</width>\n+     <height>32</height>\n+    </rect>\n+   </property>\n+   <property name=\"orientation\">\n+    <enum>Qt::Horizontal</enum>\n+   </property>\n+   <property name=\"standardButtons\">\n+    <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+   </property>\n+  </widget>\n+  <widget class=\"QLineEdit\" name=\"wallet_name_line_edit\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>120</x>\n+     <y>20</y>\n+     <width>231</width>\n+     <height>24</height>\n+    </rect>\n+   </property>\n+  </widget>\n+  <widget class=\"QLabel\" name=\"label\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>20</y>\n+     <width>101</width>\n+     <height>21</height>\n+    </rect>\n+   </property>\n+   <property name=\"text\">\n+    <string>Wallet Name</string>\n+   </property>\n+  </widget>\n+  <widget class=\"QGroupBox\" name=\"groupBox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>50</y>\n+     <width>331</width>\n+     <height>101</height>\n+    </rect>\n+   </property>\n+   <property name=\"title\">\n+    <string/>\n+   </property>\n+   <widget class=\"QCheckBox\" name=\"encrypt_wallet_checkbox\">\n+    <property name=\"geometry\">\n+     <rect>\n+      <x>10</x>\n+      <y>10</y>\n+      <width>171</width>\n+      <height>22</height>\n+     </rect>\n+    </property>\n+    <property name=\"toolTip\">\n+     <string>Encrypt the wallet. The wallet will be encrypted with a password of your choice.</string>\n+    </property>\n+    <property name=\"text\">\n+     <string>Encrypt Wallet</string>\n+    </property>\n+    <property name=\"checked\">\n+     <bool>true</bool>\n+    </property>\n+   </widget>\n+   <widget class=\"QCheckBox\" name=\"blank_wallet_checkbox\">\n+    <property name=\"geometry\">\n+     <rect>\n+      <x>10</x>\n+      <y>70</y>\n+      <width>171</width>\n+      <height>22</height>\n+     </rect>\n+    </property>\n+    <property name=\"toolTip\">\n+     <string>Make a blank wallet. Blank wallets do not initially have private keys or scripts. Private keys and addresses can be imported, or an HD seed can be set, at a later time.</string>\n+    </property>\n+    <property name=\"text\">\n+     <string>Make Blank Wallet</string>\n+    </property>\n+   </widget>\n+   <widget class=\"QCheckBox\" name=\"disable_privkeys_checkbox\">\n+    <property name=\"geometry\">\n+     <rect>\n+      <x>10</x>\n+      <y>40</y>\n+      <width>171</width>\n+      <height>22</height>\n+     </rect>\n+    </property>\n+    <property name=\"toolTip\">\n+     <string>Disable private keys for this wallet. Wallets with private keys disabled will have no private keys and cannot have an HD seed or imported private keys. This is ideal for watch-only wallets.</string>\n+    </property>\n+    <property name=\"text\">\n+     <string>Disable Private Keys</string>\n+    </property>\n+   </widget>\n+  </widget>\n+ </widget>\n+ <tabstops>\n+  <tabstop>wallet_name_line_edit</tabstop>\n+  <tabstop>encrypt_wallet_checkbox</tabstop>\n+  <tabstop>disable_privkeys_checkbox</tabstop>\n+  <tabstop>blank_wallet_checkbox</tabstop>\n+ </tabstops>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>CreateWalletDialog</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>248</x>\n+     <y>254</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>157</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>CreateWalletDialog</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>316</x>\n+     <y>260</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>286</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "b967583a8969c71e9aa92106c534d9694dedfe26",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -65,7 +65,7 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n     return activity;\n }\n \n-std::unique_ptr<interfaces::Wallet> WalletController::createWallet(const std::string& name, std::string& error, std::string& warning, SecureString& passphrase, uint64_t wallet_creation_flags)\n+std::unique_ptr<interfaces::Wallet> WalletController::createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags)\n {\n     return m_node.createWallet(name, error, warning, passphrase, wallet_creation_flags);\n }"
      },
      {
        "sha": "8b345d5bb456c34c0b9ee6348e8879ecae7a03b6",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1205bfa4c71ff58036ed1fd032d1b3740669d4c/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "patch": "@@ -44,7 +44,7 @@ class WalletController : public QObject\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n     OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n-    std::unique_ptr<interfaces::Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, SecureString& passphrase, uint64_t wallet_creation_flags);\n+    std::unique_ptr<interfaces::Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:"
      }
    ]
  },
  {
    "sha": "2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWU2OGEzYTMzNjA2Y2M1MzkxYzg2ZWQ2YTQzYzc5OGUzZGQzZWVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-20T17:22:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-13T14:19:35Z"
      },
      "message": "Add Create Wallet menu action",
      "tree": {
        "sha": "898babc0955ba14d93aaacc5ff2831101ba7f08f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/898babc0955ba14d93aaacc5ff2831101ba7f08f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1205bfa4c71ff58036ed1fd032d1b3740669d4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1205bfa4c71ff58036ed1fd032d1b3740669d4c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ee60c4bdb31baea8631bed172556170bc802a35d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <qt/bitcoinunits.h>\n #include <qt/clientmodel.h>\n+#include <qt/createwalletdialog.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/modaloverlay.h>\n@@ -341,6 +342,9 @@ void BitcoinGUI::createActions()\n     m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n \n+    m_create_wallet_action = new QAction(tr(\"Create Wallet...\"), this);\n+    m_create_wallet_action->setStatusTip(tr(\"Create a new wallet\"));\n+\n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n@@ -417,6 +421,10 @@ void BitcoinGUI::createActions()\n         connect(m_close_wallet_action, &QAction::triggered, [this] {\n             m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);\n         });\n+        connect(m_create_wallet_action, &QAction::triggered, [this] {\n+            CreateWalletDialog dlg(this, m_wallet_controller);\n+            dlg.exec();\n+        });\n     }\n #endif // ENABLE_WALLET\n \n@@ -438,6 +446,7 @@ void BitcoinGUI::createMenuBar()\n     QMenu *file = appMenuBar->addMenu(tr(\"&File\"));\n     if(walletFrame)\n     {\n+        file->addAction(m_create_wallet_action);\n         file->addAction(m_open_wallet_action);\n         file->addAction(m_close_wallet_action);\n         file->addSeparator();"
      },
      {
        "sha": "a7d3b4a30bfe1f3da74f215a4b70072e1edc3951",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
        "patch": "@@ -147,6 +147,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openRPCConsoleAction = nullptr;\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n+    QAction* m_create_wallet_action{nullptr};\n     QAction* m_open_wallet_action{nullptr};\n     QAction* m_close_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;"
      }
    ]
  },
  {
    "sha": "9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjU1YmQ2MzBhNWEyOWE4YTNiYWYyY2M4ZjE4MDdmNmY0YzE2YzNj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-14T15:13:14Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-14T15:13:14Z"
      },
      "message": "refactor: Add missing include cstdint",
      "tree": {
        "sha": "92cb7007ff20f04663d8b6b3059669c76dd07350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92cb7007ff20f04663d8b6b3059669c76dd07350"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae68a3a33606cc5391c86ed6a43c798e3dd3eea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcdb2479770f875ccbf09c287a845f1d8ef60683",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_QT_GUICONSTANTS_H\n #define BITCOIN_QT_GUICONSTANTS_H\n \n+#include <cstdint>\n+\n /* Milliseconds between model updates */\n static const int MODEL_UPDATE_DELAY = 250;\n "
      }
    ]
  },
  {
    "sha": "3e69f0c9e3819f76ab946765745a6b22563d4e11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTY5ZjBjOWUzODE5Zjc2YWI5NDY3NjU3NDVhNmIyMjU2M2Q0ZTEx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-14T15:21:13Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-14T15:21:19Z"
      },
      "message": "gui: Refactor WalletController activities",
      "tree": {
        "sha": "ef01517a0d423c0549090b2a8821f08ae82d7d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef01517a0d423c0549090b2a8821f08ae82d7d88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e69f0c9e3819f76ab946765745a6b22563d4e11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e69f0c9e3819f76ab946765745a6b22563d4e11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e69f0c9e3819f76ab946765745a6b22563d4e11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e69f0c9e3819f76ab946765745a6b22563d4e11/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f55bd630a5a29a8a3baf2cc8f1807f6f4c16c3c"
      }
    ],
    "stats": {
      "total": 386,
      "additions": 246,
      "deletions": 140
    },
    "files": [
      {
        "sha": "e1eb4871bff0c42f35a87ef70094fbef5a4f94d5",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 25,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3e69f0c9e3819f76ab946765745a6b22563d4e11",
        "patch": "@@ -386,31 +386,11 @@ void BitcoinGUI::createActions()\n                     continue;\n                 }\n \n-                connect(action, &QAction::triggered, [this, name, path] {\n-                    OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n-\n-                    QProgressDialog* dialog = new QProgressDialog(this);\n-                    dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n-                    dialog->setRange(0, 0);\n-                    dialog->setCancelButton(nullptr);\n-                    dialog->setWindowModality(Qt::ApplicationModal);\n-                    dialog->show();\n-\n-                    connect(activity, &OpenWalletActivity::message, this, [this] (QMessageBox::Icon icon, QString text) {\n-                        QMessageBox box;\n-                        box.setIcon(icon);\n-                        box.setText(tr(\"Open Wallet Failed\"));\n-                        box.setInformativeText(text);\n-                        box.setStandardButtons(QMessageBox::Ok);\n-                        box.setDefaultButton(QMessageBox::Ok);\n-                        connect(this, &QObject::destroyed, &box, &QDialog::accept);\n-                        box.exec();\n-                    });\n+                connect(action, &QAction::triggered, [this, path] {\n+                    auto activity = new OpenWalletActivity(m_wallet_controller, this);\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n-                    connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n-                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n-                    assert(invoked);\n+                    activity->open(path);\n                 });\n             }\n             if (wallets.empty()) {\n@@ -422,8 +402,10 @@ void BitcoinGUI::createActions()\n             m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);\n         });\n         connect(m_create_wallet_action, &QAction::triggered, [this] {\n-            CreateWalletDialog dlg(this, m_wallet_controller);\n-            dlg.exec();\n+            auto activity = new CreateWalletActivity(m_wallet_controller, this);\n+            connect(activity, &CreateWalletActivity::created, this, &BitcoinGUI::setCurrentWallet);\n+            connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n+            activity->create();\n         });\n     }\n #endif // ENABLE_WALLET"
      },
      {
        "sha": "8bc11948018bf71dd8dcb15876a3632a60d09005",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 69,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=3e69f0c9e3819f76ab946765745a6b22563d4e11",
        "patch": "@@ -6,99 +6,46 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <qt/askpassphrasedialog.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n-#include <qt/guiconstants.h>\n-#include <support/allocators/secure.h>\n-#include <wallet/wallet.h>\n \n-#include <QMessageBox>\n-#include <QProgressDialog>\n #include <QPushButton>\n-#include <QString>\n \n-CreateWalletDialog::CreateWalletDialog(QWidget* parent, WalletController* wallet_controller) :\n+CreateWalletDialog::CreateWalletDialog(QWidget* parent) :\n     QDialog(parent),\n     ui(new Ui::CreateWalletDialog)\n {\n     ui->setupUi(this);\n-    this->m_wallet_controller = wallet_controller;\n     ui->buttonBox->button(QDialogButtonBox::Ok)->setText(\"Create\");\n     ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n     ui->wallet_name_line_edit->setFocus(Qt::ActiveWindowFocusReason);\n \n-    connect(ui->wallet_name_line_edit, &QLineEdit::textEdited, this, &CreateWalletDialog::WalletNameChanged);\n+    connect(ui->wallet_name_line_edit, &QLineEdit::textEdited, [this](const QString& text) {\n+        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(!text.isEmpty());\n+    });\n }\n \n CreateWalletDialog::~CreateWalletDialog()\n {\n     delete ui;\n }\n \n-void CreateWalletDialog::WalletNameChanged(const QString& text)\n+QString CreateWalletDialog::walletName() const\n {\n-    if (text.isEmpty()) {\n-        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n-    } else {\n-        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n-    }\n+    return ui->wallet_name_line_edit->text();\n }\n \n-void CreateWalletDialog::accept()\n+bool CreateWalletDialog::encrypt() const\n {\n-    // Disable the buttons\n-    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n-    ui->buttonBox->button(QDialogButtonBox::Cancel)->setEnabled(false);\n-\n-    // Get the options\n-    std::string wallet_name = ui->wallet_name_line_edit->text().toStdString();\n-    bool disable_priv_keys = ui->disable_privkeys_checkbox->isChecked();\n-    bool blank = ui->blank_wallet_checkbox->isChecked();\n-    bool encrypt = ui->encrypt_wallet_checkbox->isChecked();\n-\n-    // Get wallet creation flags\n-    uint64_t flags = 0;\n-    if (disable_priv_keys) {\n-        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n-    }\n-    if (blank) {\n-        flags |= WALLET_FLAG_BLANK_WALLET;\n-    }\n-\n-    // Show a progress dialog\n-    QProgressDialog* dialog = new QProgressDialog(this);\n-    dialog->setLabelText(tr(\"Creating Wallet <b>%1</b>...\").arg(QString(wallet_name.c_str()).toHtmlEscaped()));\n-    dialog->setRange(0, 0);\n-    dialog->setCancelButton(nullptr);\n-    dialog->setWindowModality(Qt::ApplicationModal);\n-    dialog->show();\n-\n-    // Get the passphrase if encryption is used\n-    SecureString passphrase;\n-    passphrase.reserve(MAX_PASSPHRASE_SIZE);\n-    if (encrypt) {\n-        AskPassphraseDialog dlg(AskPassphraseDialog::Encrypt, this, &passphrase);\n-        dlg.exec();\n-        if (passphrase.empty()) {\n-            dialog->hide();\n-            QDialog::reject();\n-            return;\n-        }\n-    }\n+    return ui->encrypt_wallet_checkbox->isChecked();\n+}\n \n-    // Create the wallet\n-    std::string error;\n-    std::string warning;\n-    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->createWallet(wallet_name, error, warning, passphrase, flags);\n+bool CreateWalletDialog::disablePrivateKeys() const\n+{\n+    return ui->disable_privkeys_checkbox->isChecked();\n+}\n \n-    if (!error.empty()) {\n-        QMessageBox::critical(this, tr(\"Wallet creation failed\"), QString::fromStdString(error));\n-        return;\n-    }\n-    if (!warning.empty()) {\n-        QMessageBox::warning(this, tr(\"Wallet creation warning\"), QString::fromStdString(warning));\n-    }\n-    dialog->hide();\n-    QDialog::accept();\n+bool CreateWalletDialog::blank() const\n+{\n+    return ui->blank_wallet_checkbox->isChecked();\n }"
      },
      {
        "sha": "a1365b59694e9c7bec1722f58fa02d8e3b8fb6f5",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=3e69f0c9e3819f76ab946765745a6b22563d4e11",
        "patch": "@@ -5,8 +5,6 @@\n #ifndef BITCOIN_QT_CREATEWALLETDIALOG_H\n #define BITCOIN_QT_CREATEWALLETDIALOG_H\n \n-#include <qt/walletcontroller.h>\n-\n #include <QDialog>\n \n class WalletModel;\n@@ -22,15 +20,16 @@ class CreateWalletDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CreateWalletDialog(QWidget *parent, WalletController *wallet_controller);\n+    explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n-    void accept();\n-    void WalletNameChanged(const QString& text);\n+    QString walletName() const;\n+    bool encrypt() const;\n+    bool disablePrivateKeys() const;\n+    bool blank() const;\n \n private:\n     Ui::CreateWalletDialog *ui;\n-    WalletController *m_wallet_controller;\n };\n \n #endif // BITCOIN_QT_CREATEWALLETDIALOG_H"
      },
      {
        "sha": "23f5e340caea559a9d967afb4ec1793f41ef1bc8",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 153,
        "deletions": 28,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=3e69f0c9e3819f76ab946765745a6b22563d4e11",
        "patch": "@@ -3,8 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <qt/askpassphrasedialog.h>\n+#include <qt/createwalletdialog.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n #include <qt/walletcontroller.h>\n \n+#include <wallet/wallet.h>\n+\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n \n@@ -14,10 +19,13 @@\n #include <QMessageBox>\n #include <QMutexLocker>\n #include <QThread>\n+#include <QTimer>\n #include <QWindow>\n \n WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n     : QObject(parent)\n+    , m_activity_thread(new QThread(this))\n+    , m_activity_worker(new QObject)\n     , m_node(node)\n     , m_platform_style(platform_style)\n     , m_options_model(options_model)\n@@ -30,15 +38,17 @@ WalletController::WalletController(interfaces::Node& node, const PlatformStyle*\n         getOrCreateWallet(std::move(wallet));\n     }\n \n-    m_activity_thread.start();\n+    m_activity_worker->moveToThread(m_activity_thread);\n+    m_activity_thread->start();\n }\n \n // Not using the default destructor because not all member types definitions are\n // available in the header, just forward declared.\n WalletController::~WalletController()\n {\n-    m_activity_thread.quit();\n-    m_activity_thread.wait();\n+    m_activity_thread->quit();\n+    m_activity_thread->wait();\n+    delete m_activity_worker;\n }\n \n std::vector<WalletModel*> WalletController::getWallets() const\n@@ -58,18 +68,6 @@ std::vector<std::string> WalletController::getWalletsAvailableToOpen() const\n     return wallets;\n }\n \n-OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)\n-{\n-    OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n-    activity->moveToThread(&m_activity_thread);\n-    return activity;\n-}\n-\n-std::unique_ptr<interfaces::Wallet> WalletController::createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags)\n-{\n-    return m_node.createWallet(name, error, warning, passphrase, wallet_creation_flags);\n-}\n-\n void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n {\n     QMessageBox box(parent);\n@@ -153,23 +151,150 @@ void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n     delete wallet_model;\n }\n \n+WalletControllerActivity::WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : QObject(wallet_controller)\n+    , m_wallet_controller(wallet_controller)\n+    , m_parent_widget(parent_widget)\n+{\n+}\n+\n+WalletControllerActivity::~WalletControllerActivity()\n+{\n+    delete m_progress_dialog;\n+}\n+\n+void WalletControllerActivity::showProgressDialog(const QString& label_text)\n+{\n+    m_progress_dialog = new QProgressDialog(m_parent_widget);\n+\n+    m_progress_dialog->setLabelText(label_text);\n+    m_progress_dialog->setRange(0, 0);\n+    m_progress_dialog->setCancelButton(nullptr);\n+    m_progress_dialog->setWindowModality(Qt::ApplicationModal);\n+    GUIUtil::PolishProgressDialog(m_progress_dialog);\n+\n+    connect(m_progress_dialog, &QObject::destroyed, [this] {\n+        m_progress_dialog = nullptr;\n+    });\n+}\n+\n+CreateWalletActivity::CreateWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+    m_passphrase.reserve(MAX_PASSPHRASE_SIZE);\n+}\n \n-OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)\n-    : m_wallet_controller(wallet_controller)\n-    , m_name(name)\n-{}\n+CreateWalletActivity::~CreateWalletActivity()\n+{\n+    delete m_create_wallet_dialog;\n+    delete m_passphrase_dialog;\n+}\n+\n+void CreateWalletActivity::askPasshprase()\n+{\n+    m_passphrase_dialog = new AskPassphraseDialog(AskPassphraseDialog::Encrypt, m_parent_widget, &m_passphrase);\n+    m_passphrase_dialog->show();\n+\n+    connect(m_passphrase_dialog, &QObject::destroyed, [this] {\n+        m_passphrase_dialog = nullptr;\n+    });\n+    connect(m_passphrase_dialog, &QDialog::accepted, [this] {\n+        createWallet();\n+    });\n+    connect(m_passphrase_dialog, &QDialog::rejected, [this] {\n+        Q_EMIT finished();\n+    });\n+}\n \n-void OpenWalletActivity::open()\n+void CreateWalletActivity::createWallet()\n {\n-    std::string error, warning;\n-    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n-    if (!warning.empty()) {\n-        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n+    showProgressDialog(tr(\"Creating Wallet <b>%1</b>...\").arg(m_create_wallet_dialog->walletName().toHtmlEscaped()));\n+\n+    std::string name = m_create_wallet_dialog->walletName().toStdString();\n+    uint64_t flags = 0;\n+    if (m_create_wallet_dialog->disablePrivateKeys()) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n-    if (wallet) {\n-        Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n-    } else {\n-        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n+    if (m_create_wallet_dialog->blank()) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n+\n+    QTimer::singleShot(500, worker(), [this, name, flags] {\n+        std::unique_ptr<interfaces::Wallet> wallet = node().createWallet(name, m_error_message, m_warning_message, m_passphrase, flags);\n+\n+        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+\n+        QTimer::singleShot(500, this, &CreateWalletActivity::finish);\n+    });\n+}\n+\n+void CreateWalletActivity::finish()\n+{\n+    m_progress_dialog->hide();\n+\n+    if (!m_error_message.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message));\n+    } else if (!m_warning_message.empty()) {\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(m_warning_message));\n+    }\n+\n+    if (m_wallet_model) Q_EMIT created(m_wallet_model);\n+\n     Q_EMIT finished();\n }\n+\n+void CreateWalletActivity::create()\n+{\n+    m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n+    m_create_wallet_dialog->setWindowModality(Qt::ApplicationModal);\n+    m_create_wallet_dialog->show();\n+\n+    connect(m_create_wallet_dialog, &QObject::destroyed, [this] {\n+        m_create_wallet_dialog = nullptr;\n+    });\n+    connect(m_create_wallet_dialog, &QDialog::rejected, [this] {\n+        Q_EMIT finished();\n+    });\n+    connect(m_create_wallet_dialog, &QDialog::accepted, [this] {\n+        if (m_create_wallet_dialog->encrypt()) {\n+            askPasshprase();\n+        } else {\n+            createWallet();\n+        }\n+    });\n+}\n+\n+OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+}\n+\n+void OpenWalletActivity::finish()\n+{\n+    m_progress_dialog->hide();\n+\n+    if (!m_error_message.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n+    } else if (!m_warning_message.empty()) {\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(m_warning_message));\n+    }\n+\n+    if (m_wallet_model) Q_EMIT opened(m_wallet_model);\n+\n+    Q_EMIT finished();\n+}\n+\n+void OpenWalletActivity::open(const std::string& path)\n+{\n+    QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n+\n+    showProgressDialog(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n+\n+    QTimer::singleShot(500, worker(), [this, path] {\n+        std::unique_ptr<interfaces::Wallet> wallet = node().loadWallet(path, m_error_message, m_warning_message);\n+\n+        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+\n+        QTimer::singleShot(500, this, &OpenWalletActivity::finish);\n+    });\n+}"
      },
      {
        "sha": "539d16723e3bd702e69fddcc8614488544a159c3",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 65,
        "deletions": 12,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e69f0c9e3819f76ab946765745a6b22563d4e11/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=3e69f0c9e3819f76ab946765745a6b22563d4e11",
        "patch": "@@ -6,15 +6,20 @@\n #define BITCOIN_QT_WALLETCONTROLLER_H\n \n #include <qt/walletmodel.h>\n+#include <support/allocators/secure.h>\n #include <sync.h>\n \n #include <list>\n #include <memory>\n+#include <string>\n #include <vector>\n \n #include <QMessageBox>\n #include <QMutex>\n+#include <QProgressDialog>\n #include <QThread>\n+#include <QTimer>\n+#include <QString>\n \n class OptionsModel;\n class PlatformStyle;\n@@ -24,7 +29,11 @@ class Handler;\n class Node;\n } // namespace interfaces\n \n+class AskPassphraseDialog;\n+class CreateWalletActivity;\n+class CreateWalletDialog;\n class OpenWalletActivity;\n+class WalletControllerActivity;\n \n /**\n  * Controller between interfaces::Node, WalletModel instances and the GUI.\n@@ -43,8 +52,6 @@ class WalletController : public QObject\n     WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n-    OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n-    std::unique_ptr<interfaces::Wallet> createWallet(const std::string& name, std::string& error, std::string& warning, const SecureString& passphrase, uint64_t wallet_creation_flags);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:\n@@ -57,35 +64,81 @@ private Q_SLOTS:\n     void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n \n private:\n-    QThread m_activity_thread;\n+    QThread* const m_activity_thread;\n+    QObject* const m_activity_worker;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;\n     mutable QMutex m_mutex;\n     std::vector<WalletModel*> m_wallets;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n \n-    friend class OpenWalletActivity;\n+    friend class WalletControllerActivity;\n };\n \n-class OpenWalletActivity : public QObject\n+class WalletControllerActivity : public QObject\n {\n     Q_OBJECT\n \n public:\n-    OpenWalletActivity(WalletController* wallet_controller, const std::string& name);\n-\n-public Q_SLOTS:\n-    void open();\n+    WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+    virtual ~WalletControllerActivity();\n \n Q_SIGNALS:\n-    void message(QMessageBox::Icon icon, const QString text);\n     void finished();\n+\n+protected:\n+    interfaces::Node& node() const { return m_wallet_controller->m_node; }\n+    QObject* worker() const { return m_wallet_controller->m_activity_worker; }\n+\n+    void showProgressDialog(const QString& label_text);\n+\n+    WalletController* const m_wallet_controller;\n+    QWidget* const m_parent_widget;\n+    QProgressDialog* m_progress_dialog{nullptr};\n+    WalletModel* m_wallet_model{nullptr};\n+    std::string m_error_message;\n+    std::string m_warning_message;\n+};\n+\n+\n+class CreateWalletActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    CreateWalletActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+    virtual ~CreateWalletActivity();\n+\n+    void create();\n+\n+Q_SIGNALS:\n+    void created(WalletModel* wallet_model);\n+\n+private:\n+    void askPasshprase();\n+    void createWallet();\n+    void finish();\n+\n+    SecureString m_passphrase;\n+    CreateWalletDialog* m_create_wallet_dialog{nullptr};\n+    AskPassphraseDialog* m_passphrase_dialog{nullptr};\n+};\n+\n+class OpenWalletActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+\n+    void open(const std::string& path);\n+\n+Q_SIGNALS:\n     void opened(WalletModel* wallet_model);\n \n private:\n-    WalletController* const m_wallet_controller;\n-    std::string const m_name;\n+    void finish();\n };\n \n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      }
    ]
  }
]