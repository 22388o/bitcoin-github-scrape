[
  {
    "sha": "9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDg0N2QyNDc0YTIyOWY3YTEwZDZlNWZmZmQ0MzNhYmE3Y2U4NWNj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-13T20:02:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-13T20:02:41Z"
      },
      "message": "Add final where appropriate",
      "tree": {
        "sha": "ee316b45060b8898cc5a8edd61f3b978d6efb957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee316b45060b8898cc5a8edd61f3b978d6efb957"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 34,
      "deletions": 34
    },
    "files": [
      {
        "sha": "87e00f5f2faf7d7dacb1a2a9212963742fb5bdba",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -48,11 +48,11 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n-    const char* Name()\n+    const char* Name() final\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis) final\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "8a35f27656d4cb447df3c990858cceb7e213f0ff",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -46,7 +46,7 @@ class HTTPWorkItem : public HTTPClosure\n         req(std::move(_req)), path(_path), func(_func)\n     {\n     }\n-    void operator()()\n+    void operator()() final\n     {\n         func(req.get(), path);\n     }"
      },
      {
        "sha": "cde371acc97f69a2d53db5aa60b80dd1998cdfe2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -150,7 +150,7 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n     CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const final {\n         try {\n             return CCoinsViewBacked::GetCoins(txid, coins);\n         } catch(const std::runtime_error& e) {"
      },
      {
        "sha": "5bc2671ccf4eee4125fa8f1768230300e6b66435",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -700,7 +700,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {};\n \n protected:\n-    virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {\n+    void BlockChecked(const CBlock& block, const CValidationState& stateIn) final {\n         if (block.GetHash() != hash)\n             return;\n         found = true;"
      },
      {
        "sha": "ce2a7ca3c934d8b1f5ce57fcd4d2e9cb157a2673",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -396,7 +396,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const final\n     {\n         return true;\n     }"
      },
      {
        "sha": "c8dc09afd50677150de8793aa0dc90409aa8521b",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -200,9 +200,9 @@ class PosixLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     PosixLockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) final;\n+    void FreeLocked(void* addr, size_t len) final;\n+    size_t GetLimit() final;\n private:\n     size_t page_size;\n };"
      },
      {
        "sha": "a345e2b3d36b83f29ac0ef2f3f12be79a766b254",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -27,7 +27,7 @@ class CAddrManTest : public CAddrMan\n         insecure_rand = FastRandomContext(true);\n     }\n \n-    int RandomInt(int nMax)\n+    int RandomInt(int nMax) final\n     {\n         state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n         return (unsigned int)(state % nMax);"
      },
      {
        "sha": "36a2914d5e5251455b09156bfe9c9e5494066b93",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -131,7 +131,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n-    void* AllocateLocked(size_t len, bool *lockingSuccess)\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) final\n     {\n         *lockingSuccess = false;\n         if (count > 0) {\n@@ -146,10 +146,10 @@ class TestLockedPageAllocator: public LockedPageAllocator\n         }\n         return 0;\n     }\n-    void FreeLocked(void* addr, size_t len)\n+    void FreeLocked(void* addr, size_t len) final\n     {\n     }\n-    size_t GetLimit()\n+    size_t GetLimit() final\n     {\n         return std::numeric_limits<size_t>::max();\n     }"
      },
      {
        "sha": "920de76f7aefdb962cee4706b65801568f6843c0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -28,7 +28,7 @@ class CCoinsViewTest : public CCoinsView\n     std::map<uint256, CCoins> map_;\n \n public:\n-    bool GetCoins(const uint256& txid, CCoins& coins) const\n+    bool GetCoins(const uint256& txid, CCoins& coins) const final\n     {\n         std::map<uint256, CCoins>::const_iterator it = map_.find(txid);\n         if (it == map_.end()) {\n@@ -42,15 +42,15 @@ class CCoinsViewTest : public CCoinsView\n         return true;\n     }\n \n-    bool HaveCoins(const uint256& txid) const\n+    bool HaveCoins(const uint256& txid) const final\n     {\n         CCoins coins;\n         return GetCoins(txid, coins);\n     }\n \n-    uint256 GetBestBlock() const { return hashBestBlock_; }\n+    uint256 GetBestBlock() const final { return hashBestBlock_; }\n \n-    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) final\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {"
      },
      {
        "sha": "6c8c64f7b73a703c1ace5d9bf7a59ff3fd000274",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -28,7 +28,7 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const final\n     {\n         CAddrMan::Serialize(s);\n     }\n@@ -37,7 +37,7 @@ class CAddrManUncorrupted : public CAddrManSerializationMock\n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const final\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "f12eea435dac7858cff4e01cf63b1d050a30e613",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -23,11 +23,11 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const { return 1000; }\n-    int Threshold(const Consensus::Params& params) const { return 900; }\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+    int64_t BeginTime(const Consensus::Params& params) const final { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const final { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const final { return 1000; }\n+    int Threshold(const Consensus::Params& params) const final { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const final { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }"
      },
      {
        "sha": "b9e35cc9fd5d0ec03a039e249b487959d7e96ac7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -1673,12 +1673,12 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const final { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const final { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const final { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const final { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const final\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&"
      },
      {
        "sha": "fd05459c187ad3bf5e98190fd3c6995837d10a53",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d847d2474a229f7a10d6e5fffd433aba7ce85cc/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=9d847d2474a229f7a10d6e5fffd433aba7ce85cc",
        "patch": "@@ -145,12 +145,12 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const final { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const final { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const final { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const final { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const final\n     {\n         return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n     }"
      }
    ]
  }
]