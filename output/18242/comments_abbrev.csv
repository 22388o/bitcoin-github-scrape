DrahtBot,2020-03-02 16:41:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21000 (fuzz: Add UBSan suppressions needed for fuzz tests to not warn under -fsanitize=integer by practicalswift)\n* #206",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593496115,593496115,
hebasto,2020-03-02 22:54:12,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593665514,593665514,
practicalswift,2020-03-02 23:22:18,"Concept:\n\nConcept ACK - thanks for working on this!\n\n---\n\nImplementation:\n\nSome comments after first read-through of the implementation:\n\n**1. Uninitialized read in case of invalid command name**\n\nIn the ""Invalid command name"" case then a read (and use) of the uninitialized variable `size_or_shortid` will take place on L808:\n\nhttps://github.com/bitcoin/bitcoin/blob/73db",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593674721,593674721,
practicalswift,2020-03-02 23:36:42,"Very nice to see that the `V2TransportDeserializer` is fuzzed already from birth! I hope that fuzz testing will be as natural as unit testing when introducing security critical code in the future. Kudos for taking care of it here!\n\nA small comment regarding the fuzzer:\n\nI think the assertion ‚Ä¶\n\n```\nassert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\n",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593678921,593678921,
practicalswift,2020-03-21 11:09:32,"Add ""Waiting for author"" tag? :)",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-602028339,602028339,
jonasschnelli,2020-03-27 09:04:15,"Thanks @practicalswift for the review. I tried to fix the exception handling as well as uninitialised read. I also fixed the invalid fuzzing assertion (for V2).\n\nI'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-604891842,604891842,
practicalswift,2020-03-27 14:08:11,"@jonasschnelli \n\n> I'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?\n\nI recommend `ToString(‚Ä¶)` (`util/string.h`) :)",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-605020188,605020188,
practicalswift,2020-04-02 04:32:18,"@PastaPastaPasta Worth mentioning for future reviews: we use `clang-format` in the project so the 11 specific whitespace review comments could be simplified to a one general review comment ""Nit: Please use `clang-format-diff.py ` on this diff"" :)",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-607614762,607614762,
jonasschnelli,2020-04-02 19:23:15,Thanks @PastaPastaPasta and @practicalswift. Applied clang-format now.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-608056625,608056625,
jonasschnelli,2020-04-14 10:11:34,"Thanks @hebasto, @dongcarl and @MarcoFalke for the review.\nI tried to address all the points. You'r invited to go again through the PR for further findings.\n",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-613350737,613350737,
jonasschnelli,2020-04-17 15:52:29,Rebased.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-615322957,615322957,
jonatack,2020-05-02 07:55:10,"Fuzzer updates:\n\nv1. `src/test/fuzz/p2p_v1_transport_deserializer ../qa-assets/fuzz_seed_corpus/` still running after 11 million iterations.\n```\n#11209522	REDUCE cov: 1175 ft: 7368 corp: 138/1841Kb exec/s: 170 rss: 806Mb L: 1510/1048576 MS: 4 CMP-CMP-InsertRepeatedBytes-EraseBytes- DE: ""d\x00""-""\x01\x00\x00\x00\x00\x00\x00\x16""-\n#11215383	REDUCE cov: 1175 ft: 7368 corp: 138/1841Kb exec/s",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-622825133,622825133,
jonasschnelli,2020-05-08 08:43:16,"I found the issue revealed by the fuzzer crash (reported by @jonatack).\n\nThe fuzzer assertion `assert(msg.m_raw_message_size == header_size + msg.m_message_size);` assumes that the `msg.m_message_size` never contains the size of the header (in V2, the header is the `MAC` & the `AD` [AD == encrypted message length]).\n\nThough, if the decryption failed (due to a valid size message but an inva",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-625710068,625710068,
jonasschnelli,2020-05-08 08:46:35,"I added another commit (222d5334681c517636c933c9491200fbbabf3c8d) that fixes the issue reported by @ariard (https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933381).\nThe bytes counter for detecting a violation of the 1GB rekey limit was not correctly incremented.\nIn case a valid size message had an invalid MAC, the bytes counter was not incremented leading to the problem that a flo",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-625711283,625711283,
jonatack,2020-05-09 13:00:18,"Ran the new fuzzer for 24 hours with the qa-assets seeds, which previously crashed immediately (https://github.com/bitcoin/bitcoin/pull/18242#pullrequestreview-404120272)... looks good after 5.5M execs.\n```\n$ src/test/fuzz/p2p_v2_transport_deserializer ../qa-assets/fuzz_seed_corpus/\n\n#5332942	REDUCE cov: 3039 ft: 6681 corp: 55/10942Kb exec/s: 58 rss: 712Mb L: 738789/1040651 MS: 1 EraseByte",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-626172638,626172638,
jonasschnelli,2020-05-13 07:37:26,Rebased.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-627806757,627806757,
jonasschnelli,2020-05-21 10:32:55,Rebased (only code formatting conflicts in `protocol.h`).,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-632012221,632012221,
dongcarl,2020-06-02 16:30:12,Rebased this PR for you :relaxed:: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-06-net_v2-rebased,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-637666341,637666341,
jonasschnelli,2020-06-02 18:00:02,Thanks @dongcarl. Was a trivial closing bracket rebase. Rebase pushed.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-637711905,637711905,
laanwj,2020-07-30 15:27:18,Needs rebase and comments addressed (there's a lot by now).,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-666455394,666455394,
PastaPastaPasta,2020-08-09 04:11:02,"Hopefully this helps this PR continue:\n\nI went ahead and rebased this PR, there were a bit of conflicts that I had to resolve. The branch can be found here https://github.com/bitcoin/bitcoin/compare/master...PastaPastaPasta:pr_btc_18242 https://github.com/PastaPastaPasta/dash/commits/pr_btc_18242 This branch builds and passes all tests locally\n\nAdditionally, I have created a branch that ad",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-671003584,671003584,
jonasschnelli,2020-08-11 09:43:10,Sorry for the delay. Will pick this up in the next days.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-671844569,671844569,
jonasschnelli,2020-08-12 14:16:31,Improved PR; followed recommendations in various comments. Fixed many nits.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-672898394,672898394,
jonatack,2020-08-13 08:33:29,Nice. Will re-review soon.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-673342550,673342550,
jules23,2020-08-21 01:09:04,"I've compiled, and run the unit tests with no issues at b1ef92a on macOS Catalina.",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-677982274,677982274,
jonatack,2020-08-25 11:45:23,"Two conversations with outstanding unresolved issues buried in the discussion above:\n\n- https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424750339 - comparison always true\n\n- https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418937474 - time clock attacks",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-679974920,679974920,
jonasschnelli,2020-09-03 15:53:37,Rebased.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-686586509,686586509,
jonasschnelli,2020-09-08 11:41:12,"@jonatack:\n* I think the ""always true comparison"" is fixed (#18242 (comment) - comparison always true). Agree?\n* The time clock attack is something that needs to be discussed first on the BIP draft (which is happening).",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-688812330,688812330,
jonatack,2020-09-08 12:58:35,"Thanks @jonasschnelli, I've been planning to get back to this, and study Lloyd's last comment in the BIP draft as well.",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-688848674,688848674,
jonatack,2020-11-03 16:34:27,IRC discussion today about rekey implementation: http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-03.html#l-504,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-721239244,721239244,
PastaPastaPasta,2020-12-15 02:58:14,@jonasschnelli Do you think you could summarize / talk about what is blocking this PR from moving forward at this point? ,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-745019545,745019545,
jonasschnelli,2020-12-15 07:23:58,@PastaPastaPasta: there is an attempt to overhaul and optimise the AEAD construct. I'd like to work that into the BIP. See https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52 for discussion.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-745106873,745106873,
DrahtBot,2021-01-26 09:08:01,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-767405698,767405698,
fanquake,2021-08-18 12:24:18,"My understanding is that someone else is helping with / taking over these changes, and that the BIP is still being overhauled. \nI think we'll be better off with new PRs, and clean discussion when work on the implementation resumes in this repo.\nChanges from here are be cherry-picked if / when needed. So I'm going to close this PR for now. ",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901069138,901069138,
jonatack,2021-08-18 13:12:26,"FWIW, I reviewed this repeatedly, hosted a review club meeting on BIP324 (https://bitcoincore.reviews/16202), and proposed a few times to @jonasschnelli to help move this forward. The reply was that help wasn't needed. So I am curious when that changed and who is helping with it, as little seems to be happening?",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901104043,901104043,
fanquake,2021-08-19 00:03:29,"The [BIP overhaul](https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52) has been ongoing for a long time, and [recently](https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52#gistcomment-3863598) @dhruv has taken it over in https://gist.github.com/dhruv/5b1275751bc98f3b64bcafce7876b489.",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901508086,901508086,
jonatack,2021-08-19 10:19:33,"Thanks for the update, @fanquake.",https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901793360,901793360,
dhruv,2021-10-08 22:51:02,This PR is superseded by #23233 which is ready for review. I've tried to go over the comment history here and address anything that's wasn't previously.,https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-939155233,939155233,
PastaPastaPasta,2020-04-02 00:38:12,"Nit remove extra newline \n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046,401989046,src/protocol.cpp
PastaPastaPasta,2020-04-02 00:39:41,"```suggestion\n    // use 32 byte keys with all zeros\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454,401989454,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:43:06,"I could be wrong but style guide seems to say these should be on the same line https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\n```suggestion\n    } else {\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279,401990279,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:43:50,"Proper social distancing should be followed and pre-inc is preferred.\n```suggestion\n    for (unsigned int i = 0; i < 100; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508,401990508,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:44:10,"Not sure if this was intended or not, but if it was intended I don't understand why\n```suggestion\n            // first: read header\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612,401990612,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:44:34,"```suggestion\n            // second: read the encrypted payload (if required)\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710,401990710,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:46:09,"```suggestion\n    for (unsigned int i = 0;i < 1000; ++i) { \n        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\n    }\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160,401991160,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:47:10,"```suggestion\n    for (unsigned int i = 0; i < 100; ++i) { \n        dummy += ""020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466,401991466,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:49:50,"maybe \n```suggestion\n    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204,401992204,src/net.cpp
PastaPastaPasta,2020-04-02 00:50:40,"```suggestion\n    for (unsigned int i = 0; i <= 76; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396,401992396,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:51:08,"```suggestion\n    for (unsigned int i = 0; i <= 100; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502,401992502,src/test/net_tests.cpp
PastaPastaPasta,2020-04-02 00:51:49,"```suggestion\nvoid test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) \n{\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678,401992678,src/test/fuzz/p2p_transport_deserializer.cpp
hebasto,2020-04-12 22:30:06,"nit:\n```suggestion\n        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260396,407260396,src/net.cpp
hebasto,2020-04-12 22:34:20,"nit:\n```suggestion\n        const unsigned int copy_bytes = std::min(remaining, bytes);\n```\n\nAlso `#include <algorithm>` header for `std::min()`.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260785,407260785,src/net.cpp
hebasto,2020-04-12 22:39:59,"An explicit type conversion could improve readability:\n```suggestion\n        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261271,407261271,src/net.cpp
hebasto,2020-04-12 22:41:29,What is the purpose of `m_message_size` in the log message?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261365,407261365,src/net.cpp
hebasto,2020-04-12 22:44:00,"nit:\n```suggestion\n        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n        const unsigned int copy_bytes = std::min(remaining, bytes);\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261568,407261568,src/net.cpp
hebasto,2020-04-12 22:46:45,"```suggestion\n        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n```\n\n... and drop the line 762:\n```\n       const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261836,407261836,src/net.cpp
hebasto,2020-04-12 22:50:46,What if `size_or_shortid` is still `== 0` ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262244,407262244,src/net.cpp
hebasto,2020-04-12 22:56:44,"nit:\n```suggestion\n    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262788,407262788,src/net.cpp
hebasto,2020-04-12 23:00:42,"Could be combined:\n```suggestion\n    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263182,407263182,src/net.cpp
hebasto,2020-04-12 23:01:07,"```suggestion\n    // append the short-ID or (eventually) the varstr of the command\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263223,407263223,src/net.cpp
hebasto,2020-04-12 23:02:00,"typo:\n```suggestion\n    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263272,407263272,src/net.cpp
hebasto,2020-04-12 23:06:06,"nit:\n```suggestion\n    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263619,407263619,src/net.cpp
hebasto,2020-04-12 23:15:51,"Actually, `bit24` is equivalent to `rekey`. Maybe drop `bit24` in lines 934-935 and:\n```suggestion\n    bool rekey = msg.data[2] & (1U << 7);\n    assert(!rekey);\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264511,407264511,src/net.cpp
hebasto,2020-04-12 23:19:39,"Mind using a named constant:\n```suggestion\n    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n```\n?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264883,407264883,src/net.cpp
hebasto,2020-04-12 23:22:49,"Mind using a named constant:\n```suggestion\n    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - CHACHA20_POLY1305_AEAD_TAG_LEN, true);\n```\n?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265167,407265167,src/net.cpp
hebasto,2020-04-12 23:24:30,Mind moving the member initializer list to next line to improve readability?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265366,407265366,src/net.h
hebasto,2020-04-12 23:27:29,style nit: could be placed into one line or in braces.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265633,407265633,src/net.h
hebasto,2020-04-12 23:28:46,Mind moving the member initializer list to next line to improve readability?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265779,407265779,src/net.h
hebasto,2020-04-12 23:30:49,Have you consider a `switch` statement as an alternative?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265968,407265968,src/protocol.cpp
hebasto,2020-04-12 23:31:04,Have you consider a `switch` statement as an alternative?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265992,407265992,src/protocol.cpp
hebasto,2020-04-12 23:33:59,"nit: hereinafter\n```suggestion\nconstexpr uint8_t VERSION_SHORT_ID = 38;\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266260,407266260,src/protocol.h
hebasto,2020-04-12 23:38:24,`MIN_REKEY_TIME` is unused now. Is it added intended on purpose in the future?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266630,407266630,src/net.h
dongcarl,2020-04-13 20:54:12,Could you explain a bit what you envision the `-netencryptionfastrekey` flag to do? Is it a command line flag for testing purposes?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407715006,407715006,src/test/net_tests.cpp
dongcarl,2020-04-13 21:16:25,"Perhaps I'm mistaken, but it seems like this `pchMessageStartIn` is not needed. I tried compiling with it removed and that seemed to work.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407726340,407726340,src/net.h
dongcarl,2020-04-13 21:23:14,Perhaps we could use in-class member initializers to de-clutter the constructor signature,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407729684,407729684,src/net.h
MarcoFalke,2020-04-13 21:48:06,"Please replace occurrences of ""command"" with something like ""msg_type"" at least in new code. See also #18533 ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407741063,407741063,src/protocol.cpp
jonasschnelli,2020-04-14 08:37:36,I'd like to keep it to be consistent with BIP324 (and other bips). Changing it might make it more confusing.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407962780,407962780,src/protocol.cpp
jonasschnelli,2020-04-14 09:36:46,Thanks. I added the check for not violating the `MIN_REKEY_TIME`.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408000719,408000719,src/net.h
jonasschnelli,2020-04-14 09:37:17,Can you elaborate on the differences? Aren't the compiler differences marginal?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001077,408001077,src/protocol.cpp
jonasschnelli,2020-04-14 09:38:22,It was initially to debug the most significant bit. I'll remove it.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001745,408001745,src/net.cpp
jonasschnelli,2020-04-14 09:57:00,Good catch. Add `0` now to the `unknown` branch.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408013698,408013698,src/net.cpp
jonasschnelli,2020-04-14 10:05:17,Let's keep it for readability.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408018775,408018775,src/net.cpp
MarcoFalke,2020-04-24 19:43:44,"Can you explain the fuzzer a bit more? It seems you are reusing the buffer for both deserializers. Assuming that the structure of the buffer for both deserializers should be different, this might cause the fuzz engine to only focus on one of them (the ""easier"" one) and rarely explore paths in the v2 one, no?\n\nIf so, maybe you can split them up in two targets. See `./src/test/fuzz/deserialize.c",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r414820256,414820256,src/test/fuzz/p2p_transport_deserializer.cpp
jonasschnelli,2020-04-27 09:55:02,"Thanks!\nI switched to the same preprocessor bridge then used in `deserialize.cpp`.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r415674338,415674338,src/test/fuzz/p2p_transport_deserializer.cpp
ariard,2020-04-30 06:42:34,"Alternatively have you considered a translation table, defining a struct \n\n```\nstruct {\n           std::string  long_cmd;\n           std::string  short_cmd;\n} short_id_table\n```\nYou statically declare an array of such structs, with one element for every pair. And `GetCommandFromShortCommandID` just iter through array until funding a match.\n\nThat way in the future we may have a ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417787978,417787978,src/protocol.cpp
ariard,2020-04-30 07:05:01,"I think here or BIP should lay out what the advantage and example of p2p agreement mapping. I can foresee people willingly to experiment or deploy their own light-clients protocols inside v2, and therefore favor bandwidth-reduction for what make sense for them.\n\nHowever, I can't see how peer may signal custom mapping or at least agree they are on the default ones. You can agree out-of-band but",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417797877,417797877,src/protocol.h
ariard,2020-04-30 07:12:47,You may add a reference saying serializer/deserializer are BIP-324 compliant,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417801470,417801470,src/net.h
ariard,2020-04-30 07:42:27,You may want to add old_ prefix and precise at first key rotation m_old_aead == m_aead,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417816870,417816870,src/net.h
ariard,2020-04-30 08:04:45,Why the encrypted length doesn't get its own MAC to guarantee integrity ? It can decrypt to some garbage and therefore open to manipulating ciphertext-MAC seek in message ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417829120,417829120,src/net.cpp
ariard,2020-04-30 08:13:50,"Hmmm isn't the spec making the assumption you rely on some ordered transport protocol (TCP) ? If yes I think that's okay because you should be guarantee against network failure and peers may out-of-sync. But BIP should precise message shouldn't be resend with same sequence number?\n\nNote IIRC Fibre is using UDP.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417833895,417833895,src/net.cpp
ariard,2020-04-30 08:22:55,`vRecv` doesn't contain also AAD ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417839203,417839203,src/net.cpp
ariard,2020-04-30 08:27:57,Even if decryption fails ? Also comment about increasing AAD sequence number is allusive can you precise a unsuccessful decryption still increase sequence number. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417842245,417842245,src/net.cpp
ariard,2020-04-30 08:33:59,What if len==0? Or is this case can't be hit due to previous Read logic?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417845830,417845830,src/net.cpp
ariard,2020-04-30 08:48:35,"I think checksum is also not revelant and always true, so comment may be generic for three of them? But generally if this field are always true for v2, a future refactor may just call public methods on messages in `ProcessMessage` like `{Header,Checksum,Netmagic}Valid`.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417854354,417854354,src/net.cpp
ariard,2020-04-30 08:50:56,"Maybe it would be better to drop unknown message, or at least as soon as we can to avoid some upstream buffer growing unbounded.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417855756,417855756,src/net.cpp
ariard,2020-04-30 08:52:50,"This line was confusing at first read, precise its size of command we parse or a reference to BIP ""The command field MUST start with a byte that defines the length...""",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417856950,417856950,src/net.cpp
jonasschnelli,2020-04-30 12:05:09,I think we can make the assumptions that messages are processing in order and that the underlaying transport layer takes care of transmission failures. I don't think we need to add error/out-of-sequence detection in out message transport protocol.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417959916,417959916,src/net.cpp
jonasschnelli,2020-04-30 12:07:09,I think we should tolerate unknown short IDs the same way as we tolerate unknown string commands (which we currently do for future backward compatibility).,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417960845,417960845,src/net.cpp
jonatack,2020-04-30 15:53:04,"> Can you elaborate on the differences? Aren't the compiler differences marginal?\n\nIt does seem like a switch statement might be a good alternative to the `if...else ifs` here, to make explicit the nature of the operation (testing a single value against a set of scoped enumerations or array of values) and possibly generate better code with a jump table instead of repeatedly checking individual",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418113575,418113575,src/protocol.cpp
jonatack,2020-04-30 18:23:31,Agree this would be nice.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418204408,418204408,src/net.h
jonatack,2020-04-30 18:44:31,"I think a comment for this conditional branch would be helpful.\n```diff\n     } else {\n+        // Read the message data\n         const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418215753,418215753,src/net.cpp
jonatack,2020-04-30 18:46:44,9f81125 nit: perhaps start with the truthy branch (that reads the message) e.g. `if (m_in_data) {`,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418216979,418216979,src/net.cpp
jonatack,2020-04-30 18:58:10,"9f81125 could replace the two `-1` fail values returned in `V2TransportDeserializer::Read` (as well as the two in `V1TransportDeserializer::readHeader`) with a static constant whose name could make their meaning explicit, e.g. `static constexpr int MESSAGE_FAILURE = -1;` or similar",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418223280,418223280,src/net.cpp
jonatack,2020-04-30 21:58:26,caa6c58 Could invert the `GetCommandFromShortCommandID` parameter order? This would make it like `read()` and also allow it to have the same first param as `GetShortCommandIDFromCommand`.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418312693,418312693,src/protocol.h
jonatack,2020-04-30 22:06:56,"caa6c58 can reference instead of copy?\n```diff\n-uint8_t GetShortCommandIDFromCommand(const std::string cmd);\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd);\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316264,418316264,src/protocol.h
jonatack,2020-04-30 22:08:32,"caa6c58 can reference instead of copy?\n```diff\n-uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316911,418316911,src/protocol.cpp
jonatack,2020-04-30 22:24:35,9f81125 could replace the int value of `12` here and line 809 above with an explicit `CMD_MAX_CHARS_SIZE` (or similar) int static constant,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418323240,418323240,src/net.cpp
jonatack,2020-05-01 11:57:30,"e04eddb3 this conditional with 2 nested ternary conditionals on one line is pretty hard to read.\n\n<details>\n<summary>Here are two ideas.</summary>\n<p>\n\n```diff\n-    if (m_bytes_encrypted >= (gArgs.GetBoolArg(""-netencryptionfastrekey"", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(""-netencryptionfastrekey"", false) ? 10 : REKEY_LIMIT_TIME)) {\",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418513786,418513786,src/net.cpp
jonatack,2020-05-01 12:12:19,"e04eddb suggestion (like your code at line 983 below). It also clarifies that `m_bytes_decrypted` is a counter of bytes decrypted for the same key.\n```diff\n             m_aad_pos = 0;\n-            m_bytes_decrypted = 0;\n+\n+            // reset rekey counters\n             m_time_last_rekey = now;\n+            m_bytes_decrypted = 0;\n```\n\nIn general, there is a fair amount of reke",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418517170,418517170,src/net.cpp
jonatack,2020-05-01 12:26:37,"e04eddb suggested change\n```diff\n-static constexpr unsigned int MIN_REKEY_TIME = 10;      // minimal rekey time to avoid DOS\n+static constexpr unsigned int MIN_REKEY_TIME = 10;      // minimum rekey time in seconds to avoid DOS\n```\n",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418520848,418520848,src/net.h
jonatack,2020-05-01 12:29:35,"It seems that `GetTime()` is deprecated, see `util/time.h`\n```cpp\n/**\n * DEPRECATED\n * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)\n */\nint64_t GetTime();\n```\n",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418521589,418521589,src/net.cpp
jonatack,2020-05-01 12:41:12,e04eddb what is the difference between `msg.data.size() > read_bytes` and `msg.data.size() - read_bytes > 0`? I'm trying to understand why both checks are needed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418525037,418525037,src/test/net_tests.cpp
ariard,2020-05-02 07:57:46,"Ah yes, I always forgot that Bitcoin isn't network-byte order, maybe it could be part of the spec as a nice reminder.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418927974,418927974,src/net.cpp
ariard,2020-05-02 08:08:10,"I don't know if std::vector::insert would do preventive reallocation, and that's implementation specific, but do resize first with both header_size + tag_len and then insert would be better?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418928926,418928926,src/net.cpp
ariard,2020-05-02 08:41:50,"I think it would be nice to comment what this test aims to verify. AFAICT it checks for round-trip _correctness_, all others cases like non-encrypted packets, extended packets, shorter packets, zeroed-MAC, garbage MAC are they deferred to fuzzer ?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932056,418932056,src/test/net_tests.cpp
ariard,2020-05-02 08:49:49,"What do you mean by ""post-this-message"" in this context? Is this coming from RFC 4253?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932760,418932760,src/net.cpp
ariard,2020-05-02 08:54:50,Maybe also log `session_id` or anything to tie a rekeying to a given session/peer?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933231,418933231,src/net.cpp
ariard,2020-05-02 08:56:32,You should precise in BIP that we account only after a successful decryption. Also the accounting data scope on MAC+AEAD.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933381,418933381,src/net.cpp
ariard,2020-05-02 09:14:08,You should precise in BIP that a rekey initiator should be conservative but rekey responder liberal in its window acceptance.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418934931,418934931,src/net.h
ariard,2020-05-02 09:33:40,"If you want to avoid a syscall in hot path, I think you can fetch time only X messages, its okay to be a bit late, for time responder only check if rekey initiator is too early.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418936652,418936652,src/net.cpp
ariard,2020-05-02 09:42:05,"I don't know about relying on timeclock for rekey. I know it comes from SSH recommendation but it's a client-server architecture, where a connection closing due to clock not being synchronized isn't dramatic. \n\nI'm worried about some clock manipulation to interfere with outbound connections and start some eclipse escalation. Current timedata (bug) logic seems to prevent any exploitation by thi",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418937474,418937474,src/net.h
ariard,2020-05-02 10:02:52,Where do we abort connection based on invalid checksum and header? It's only checked in `ProcessMessages` but doesn't trigger a connection AFAICT?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418939510,418939510,src/net.cpp
elichai,2020-05-03 09:33:24,I agree that a switch statement is easier to read(and see what's missing if we'll have more `NetMsgType` types),https://github.com/bitcoin/bitcoin/pull/18242#discussion_r419076027,419076027,src/protocol.cpp
jonasschnelli,2020-05-06 15:45:27,Seems to be a matter of taste. I'd like to keep it as is.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420895865,420895865,src/protocol.cpp
jonasschnelli,2020-05-06 15:48:23,"This is probably a discussion that belong to the BIP rather to the implementation. I guess there are multiple ways how peers want to agree on a mapping (protocol version, dedicated command exchange, versionstring, port, etc.).",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420897941,420897941,src/protocol.h
jonasschnelli,2020-05-06 15:52:22,BIP discussion. The length is covered by the MAC.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420900793,420900793,src/net.cpp
jonasschnelli,2020-05-06 15:55:31,What is the problem of increasing the sequence number if decryption fails? We detect it and can respond (disconnecting) on the layer above the transport.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420903105,420903105,src/net.cpp
jonasschnelli,2020-05-06 15:56:54,Yes. `m_aead->Crypt` would fail. This is an additional assertion to make sure the code below survives changes of the crypto system.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420904274,420904274,src/net.cpp
jonasschnelli,2020-05-06 15:59:05,"`msg.m_valid_checksum` is a field we should populate to respect the abstract `TransportDeserializer` class.\nIn the v2 case, the `checksum` is the MAC. We set the field whenever the MAC has validated. How to deal with it is a matter of the layer above.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420905957,420905957,src/net.cpp
jonasschnelli,2020-05-06 16:03:19,Fair point. Added a comment.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909099,420909099,src/net.cpp
jonasschnelli,2020-05-06 16:03:32,Added,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909232,420909232,src/net.h
jonasschnelli,2020-05-06 16:04:05,"AFAIK clang-format ""approved"" (not changed) this.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909652,420909652,src/net.h
jonasschnelli,2020-05-06 16:06:27,I guess this evolved from legacy code with the focus to keep the diff small (V1 deserialiser has the `in_data` boolean). I'd say: lets keep it for consistency (better readability if one compared both deserializers).,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420911232,420911232,src/net.cpp
jonasschnelli,2020-05-06 16:07:52,Good point. Added.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420912183,420912183,src/net.cpp
jonasschnelli,2020-05-06 16:29:03,I agree that this would be a nice cleanup. But it should also be done for the V1 deserializer. I think we should do that after this PR since it contains lines not changes otherwise.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420926437,420926437,src/net.cpp
jonasschnelli,2020-05-06 16:31:14,Absolutely. Changed now.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420927923,420927923,src/protocol.h
jonasschnelli,2020-05-06 16:34:38,Good point. Changed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420930331,420930331,src/net.cpp
jonasschnelli,2020-05-06 17:56:54,Can you give me a rational why resize before insert would be better?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420983720,420983720,src/net.cpp
jonasschnelli,2020-05-06 17:58:42,"Could be my bad English. What I mean with that comment is that the rekey signals that ""after"" this message (the next message and all following), a new key will be used.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420984895,420984895,src/net.cpp
jonasschnelli,2020-05-06 18:06:52,"This is a very good point.\nI think the BIP is correct about the ""data sent"" (every byte on the wire). But I think the implementation is wrong in the way that it doesn't count messages with invalid headers,... which might be exploitable. I'll work on that.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990022,420990022,src/net.cpp
jonasschnelli,2020-05-06 18:07:39,Yes. That could help.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990519,420990519,src/net.h
jonasschnelli,2020-05-06 18:10:07,"Yes. We don't right now as this is currently identical to V1 (where we don't disconnect if a message has an invalid header or an invalid SHA256 checksum).\nSee #15206 and #15197.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420991902,420991902,src/net.cpp
jonasschnelli,2020-05-06 18:11:14,"This is a valid point...\nwould you be interested to analyse attack possibilities?\nand what would you suggest? Dropping the time based limit?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420992578,420992578,src/net.h
jonatack,2020-05-06 19:09:43,"perhaps ""the counterparty can signal a post-message re-key, e.g. after this message a new key will be used, by setting the""",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421027923,421027923,src/net.cpp
ariard,2020-05-08 06:22:50,I agree it's good for now as an assumption. I think in the future there is valid use-cases where you want to send bitcoin traffic over some non-ordered communication channels like headers-over-radio and still benefit of encryption.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421962534,421962534,src/net.cpp
ariard,2020-05-08 06:24:29,"Right, decryption failure is fatal, there is no such ban-per-point in this case.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421963177,421963177,src/net.cpp
ariard,2020-05-08 06:27:41,"Right can we tolerate them, i,e not disconnecting peer and still drop them? We won't be able to process them anyway.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421964401,421964401,src/net.cpp
ariard,2020-05-08 06:37:43,"At `std::vector::insert`, if `msg.data` capacity isn't enough an allocation is realized. Then at `std::vector::resize`, if capacity is too short again, a newer allocation is realized and a memcopy processed. You avoid one memory allocator call which may trigger a syscall in worst-case scenario ?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421968517,421968517,src/net.cpp
ariard,2020-05-08 06:39:33,"Or perhaps ""the counterparty can signal a re-key, after this message a new key will be used, by setting the""?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421969270,421969270,src/net.cpp
ariard,2020-05-08 06:42:25,"Thanks, will review them with context.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421970415,421970415,src/net.cpp
ariard,2020-05-08 06:59:24,"Yes actually time-clock attacks has caught my attention while working on other thing so I'm already investigating this. May I come back to you soon on this and if I don't feel free to ping me ?\n\nAs a robust fix we can't rely on receiver-side tracking, like requiring we sent at least X bytes before a re-keying, I think there is protocol messages to triggering querying from us. And relying on bl",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421977423,421977423,src/net.h
ariard,2020-05-08 08:02:07,"Thinking further, I would keep the timeclock for triggering a re-key but not checking at re-key acceptance. It would obtain the effect aimed, which it is renew key after 1h. A time-clock manipulation that way wouldn't be able to close connections, just triggering re-key ?\n\nAnd for a malicious connected peer, it would make the DoS-cpu vector the same that an attacker retrying and abandoning ses",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422004967,422004967,src/net.h
jonatack,2020-05-09 17:31:42,"nit/note for follow-up:\n```diff\n-        // try for short ID in case the first byte is a number larger than 12\n+        // try for short ID in case the first byte is a number larger than NET_P2P_V2_CMD_MAX_CHARS_SIZE\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422523503,422523503,src/net.cpp
jonatack,2020-05-13 21:47:34,"`size_or_shortid` is `uint8_t`. Since it is unsigned, `size_or_shortid >= 0` will always be true. Should this be `if (!valid_header && size_or_shortid > 0) {`?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424750339,424750339,src/net.cpp
jonasschnelli,2020-05-14 06:44:19,"Not sure. If `size_or_shortid` is `0` (due to a `std::ios_base::failure` or if `vRecv` contain `0`), I'd like to enter this `if` to set `command_name` to `unknown-0`.\nOtherwise `command_name` would be unset for a size of `0` (which is somehow a undefined short-id).",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424904659,424904659,src/net.cpp
jonatack,2020-05-15 13:45:01,"Ok, if I understand correctly:\n```diff\n-    bool valid_header = false;\n     std::string command_name;\n@@ -812,15 +811,12 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n         }\n         if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n             // first byte is a number between ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r425811823,425811823,src/net.cpp
jonasschnelli,2020-05-18 07:00:37,What if the buffer contains a `0x09` as first bytes (a valid string based command with the size of 9 chars) but those 9 bytes would actually not follow? Wouldn't it become `valid_header=true` in your suggestions? ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426406735,426406735,src/net.cpp
jonatack,2020-05-18 15:14:35,"Unless I'm confused, I think the suggestion above is still correct for the case you describe, assuming you want it to fail both of the conditional checks, and `net_tests` and the `p2p_v2_transport_deserializer` fuzzer both pass. \n\nIn the current code, it's not clear to me what purpose `valid_header` serves because it always becomes true at the latest by line 823.\n\nUnrelated, but it looks l",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426701026,426701026,src/net.cpp
rajarshimaitra,2020-06-16 07:45:35,"poly1305 tag length of 16 bytes is already defined in https://github.com/bitcoin/bitcoin/blob/1c86ed41483471929840eec09b93d7de3a4aeacf/src/crypto/poly1305.h#L12\nIs it necessary to explicitly define it here again? ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440650990,440650990,src/crypto/chacha_poly_aead.h
rajarshimaitra,2020-06-16 14:06:56,BIP324 removes the Message Magic bytes. Is `CMessageHeader::MessageStartChars` required here? ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440878852,440878852,src/net.cpp
rajarshimaitra,2020-06-16 14:30:04,Nit: Should be `MAC tag + AAD`? ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440896136,440896136,src/net.cpp
rajarshimaitra,2020-06-16 14:31:11,Nit: should be `(even if decryption fails)`?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440897035,440897035,src/net.cpp
rajarshimaitra,2020-06-16 15:47:28,"Nit:\n```suggestion\n         // first byte is a number between 1 and 12. Must be a string command.\n        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n```\nPutting the comment above the if statement seems more appropriate like it's done for short id. ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440956404,440956404,src/net.cpp
rajarshimaitra,2020-06-16 15:50:30,"IMO it feels easier to read if variables values are explicitly specified in comments. I tend to check variable values all the time when reading using the editor functionality. That goes away when it's in a comment.   \n\nThis is in regard to this  [comment](https://github.com/bitcoin/bitcoin/pull/18242/files#r422523503) in case git doesn't show it in its intended place. ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440958678,440958678,src/net.cpp
rajarshimaitra,2020-06-16 16:02:44,Nit: AAD,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440967503,440967503,src/net.cpp
rajarshimaitra,2020-06-17 09:19:34,Nit: AAD,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441404966,441404966,src/net.cpp
rajarshimaitra,2020-06-17 09:20:58,"Nit: AAD. \nAt this point, I am wondering if it's intentional, if it is then ignore. There are many more, Not commenting the same for the rests. ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441405885,441405885,src/net.cpp
rajarshimaitra,2020-06-17 10:09:49,Why reset again? ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441435792,441435792,src/net.cpp
rajarshimaitra,2020-06-17 10:27:36,it seems the `header` is redundant here? ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441445522,441445522,src/net.cpp
rajarshimaitra,2020-06-17 11:13:35,`//reset sequence numbers and key counters`? Or maybe add `//reset key counters` before last two? like done in `prepareForTransport`.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441468386,441468386,src/net.cpp
rajarshimaitra,2020-06-17 11:27:44,"As per the comment on `net_tests.cpp` line 380\n\n>  // Setting the netencryptionfastrekey flag results in using a threshold of 64kb / 10 seconds for requiring a rekey\n\nHere `m_bytes_encrypted` is checked against 32 kb. Is this intentional? \nShould the BIP draft add `netencryptionfastrekey` policy for better reference?\nAlso whats the rationale behind fastrekey? ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441475023,441475023,src/net.cpp
rajarshimaitra,2020-06-17 11:38:09,Suggested comment (in the spirit of the rest) `// recorded time when the last rekey happened`,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441480135,441480135,src/net.h
rajarshimaitra,2020-06-17 11:40:44,"We are already checking `m_message_size` against `MAX_SIZE` in `Read`. Here the check is happening against `MAX_PROTOCOL_MESSAGE_LENGTH`.\n1. `MAX_SIZE` = 33.5MB,  `MAX_PROTOCOL_MESSAGE_LENGTH` = 4MB. What does these two limits signify? \n2. if we are already checking for some size limit in `Read` why have a separate check here? So far  `OversizedMessageDetected` is not used anywhere. Any specia",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441481441,441481441,src/net.h
rajarshimaitra,2020-06-17 12:04:16,Comments from `V2TransportDeserializer` can be copied here. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493342,441493342,src/net.h
rajarshimaitra,2020-06-17 12:04:59,Same comment here from `V2TransportDeserializer` can help. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493700,441493700,src/net.h
rajarshimaitra,2020-06-17 12:10:27,A single comment specifying this is used for V2 messaging protocol as per BIP324 might help here. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441496441,441496441,src/protocol.cpp
rajarshimaitra,2020-06-17 12:21:34,"Is the mapping a p2p agreement at this point? It seems hardcoded. Which seems all right to me. Trying to have the mapping process here seems like going out of scope for this PR. Maybe a followup PR or even a BIP should be done? In that light maybe removing this comment here can help, or tagging it by a todo or something else? Can be confusing as its not implemented yet. ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441502434,441502434,src/protocol.h
rajarshimaitra,2020-06-17 13:25:03,It seems it is intended here that serialized header will be returned into the `serialized_header`? But `prepareForTransport` doesn't assign the serialized header into the `header` arguement. Not sure what is happening here. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441542048,441542048,src/test/net_tests.cpp
rajarshimaitra,2020-06-17 13:36:07,Session IDs are important for rekey calculation. Shouldn't this be initialized to something for better expression of that intent? I can see how a fixed garbage value can work too. Wondering if that was the motivation to keep it uninitialized. ,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441549936,441549936,src/test/net_tests.cpp
rajarshimaitra,2020-06-17 13:41:27,Why `read_message` needs a `serialized_header`? Cant it just compute the header from `CSerializedNetMsg` like it was done in `prepareForTransport`?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441553760,441553760,src/test/net_tests.cpp
rajarshimaitra,2020-06-17 14:07:52,Nit: 76th?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441573505,441573505,src/test/net_tests.cpp
narula,2020-06-17 17:24:55,"Add `override` keyword to be consistent with `V1TransportSerializer` (the same conditions apply here as well, no?)",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441707547,441707547,src/net.h
narula,2020-06-17 17:51:32,"Agreed this is a bit confusing, and I'm not exactly sure what you're trying to achieve. `size_or_shortid >= 0` will *always* evaluate to true. `valid_header` will *always* eventually be set to true. Under what circumstances do you think `valid_header` should be false?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441723494,441723494,src/net.cpp
narula,2020-06-17 17:54:33,I think this should be `header.reserve(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);` and all instances of `serialized_header` should be replaced with `header`.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441725357,441725357,src/net.cpp
narula,2020-06-17 18:20:15,"Note, after I changed this, the V2 tests fail:\n\n<details><summary>log</summary>\n<p>\n\n```\nneha@mumford:~/src/bitcoin (HEAD detached at e13accd43a)$ src/test/test_bitcoin -t net_tests -l test_suite\nRunning 11 test cases...\nEntering test module ""Bitcoin Core Test Suite""\ntest/net_tests.cpp(83): Entering test suite ""net_tests""\ntest/net_tests.cpp(85): Entering test case ""cnode_listen",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441740223,441740223,src/net.cpp
laanwj,2020-06-18 14:08:18,I would prefer to return an `Option<uint8_t>` here to make it clearer when there is no short id available for a command (instead of special-casing `0`).,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442254509,442254509,src/protocol.cpp
laanwj,2020-06-18 14:09:35,It'd definitely result in shorter code use a hash table here.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255349,442255349,src/protocol.cpp
laanwj,2020-06-18 14:10:07,Why an empty statement here? (some more below),https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255740,442255740,src/protocol.cpp
laanwj,2020-06-18 14:11:00,"I see @MarcoFalke's point. A P2P protocol has no commands, just messages and message ids. But yea it's unfortunate that was not caught in the BIP.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442256403,442256403,src/protocol.cpp
laanwj,2020-06-18 14:13:12,"I think the advantage of a (hash)table is that it could be built in one central function, making the mapping in both directions, which leaves only one place to update for new message types (and making sure they never go out of sync).",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442257870,442257870,src/protocol.cpp
laanwj,2020-06-18 14:14:21,"Please use doxygen-compatible comments e.g.\n```\n/** returns the short command ID for a command‚Ä¶\n */\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442258785,442258785,src/protocol.h
laanwj,2020-06-18 14:14:57,"> A single comment specifying this is used for V2 messaging protocol as per BIP324 might help here.\n\nThe comment is in the `.h` file, where it belongs for public functions.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442259229,442259229,src/protocol.cpp
fjahr,2020-06-23 14:41:08,"I do prefer the current order here because I find it more intuitive to have the input first and then the output. But I think in `GetCommandFromShortCommandID` the input (`shortID`) should be `const` and casing should be fixed to `short_id`. nit: Overall I would prefer a more consistent API between the two functions so that they have the same return type:\n\n```suggestion\n// returns the short c",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444278079,444278079,src/protocol.h
fjahr,2020-06-23 14:51:34,"nit: The dummy message seems to be reused several times, could be a constant.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444286263,444286263,src/test/net_tests.cpp
fjahr,2020-06-23 15:15:24,nit: Should be doxygen comment I think.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444303624,444303624,src/net.h
fjahr,2020-06-23 15:16:09,nit: Could also add a doxygen comment here.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444304206,444304206,src/net.h
fjahr,2020-06-23 15:26:22,remove empty statement,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444311734,444311734,src/test/net_tests.cpp
fjahr,2020-06-23 18:12:34,nit: Would be nice if that typo was fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444415469,444415469,src/test/net_tests.cpp
jonasschnelli,2020-08-12 12:25:10,I prefer to keep the AEAD contents separate.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469218647,469218647,src/crypto/chacha_poly_aead.h
jonasschnelli,2020-08-12 12:27:49,The transport deserializer(s) use an abstract class for the runtime flexibility. The network magic is required for V1. I think it makes no sense to try to get rid of it here as long as V1 is supported.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469220779,469220779,src/net.cpp
jonasschnelli,2020-08-12 12:30:29,Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223149,469223149,src/net.cpp
jonasschnelli,2020-08-12 12:30:34,Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223235,469223235,src/net.cpp
jonasschnelli,2020-08-12 12:33:28,fixed,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469225251,469225251,src/net.cpp
jonasschnelli,2020-08-12 12:35:11,Oops. Rebase issue. Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226209,469226209,src/net.cpp
jonasschnelli,2020-08-12 12:36:36,Same issue as [this](https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440878852). It's required for V1.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226989,469226989,src/net.cpp
jonasschnelli,2020-08-12 12:38:26,The fast rekey function is not something that needs to be specified in the BIP. The purpose of it is for pure implementation testability and has nothing to do with the specification.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469227995,469227995,src/net.cpp
jonasschnelli,2020-08-12 12:39:58,Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469228811,469228811,src/net.h
jonasschnelli,2020-08-12 12:50:14,"Good point. I think this got ""rebased-away"". Just removed `OversizedMessageDetected()`.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469234339,469234339,src/net.h
jonasschnelli,2020-08-12 12:59:54,uint256 has a default constructor the sets the memory to all zeros. Should be enough?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240328,469240328,src/test/net_tests.cpp
jonasschnelli,2020-08-12 13:00:38,Keep in mind that `prepareForTransport` must have the flexibility to work with other transport types including the V1 transport.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240865,469240865,src/test/net_tests.cpp
jonasschnelli,2020-08-12 13:07:34,Right. Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469245175,469245175,src/net.h
jonasschnelli,2020-08-12 13:12:45,"I see your point.\nThe pass-by-reference `header` field in `prepareForTransport()` is only used in V1.\nIn V2, there is actually no header (well, you could argue that the MAC-tag and the encrypted length is the header but since the MAC is at the end of the message, it makes little sense to try to use that header field).\n\nTherefor, in V2, the pass-by-reference `header` field is unused and the",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248481,469248481,src/net.cpp
jonasschnelli,2020-08-12 13:12:58,Switched to a std::map.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248596,469248596,src/protocol.cpp
jonasschnelli,2020-08-12 13:13:09,Rebase issues. Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248711,469248711,src/protocol.cpp
jonasschnelli,2020-08-12 13:15:04,Fixed.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469249972,469249972,src/protocol.h
jonatack,2020-08-21 13:02:12,"In commit 52a2032 ""Add BIP324 v2 transport serializer and deserializer""\n\n<details><summary>some suggested changes in <code>src/net.h::V2TransportDeserializer</code></summary><p>\n\n```diff\ndiff --git a/src/net.h b/src/net.h\nindex bf909d82d7..ee2f174ad8 100644\n--- a/src/net.h\n+++ b/src/net.h\n@@ -790,19 +790,19 @@ public:\n         m_data_pos = 0;\n         m_rekey_flag = false;\n",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474682022,474682022,src/net.h
jonatack,2020-08-21 13:07:06,"When rebuilding, the compiler is warning about this now:\n```\nnet.cpp: In member function ‚Äòvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)‚Äô:\nnet.cpp:839:46: warning: comparison is always true due to limited range of data type [-Wtype-limits]\n  839 |         if (!valid_header && size_or_shortid >= 0) {\n      |                  ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474684477,474684477,src/net.cpp
jonatack,2020-08-25 06:43:30,"7fb32f34 nit, here and lines 387, 394, 418, and 499, prefix increment iterator `++i` preferred",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476212704,476212704,src/test/net_tests.cpp
jonatack,2020-08-25 06:54:44,"2bc6e8b here in `GetMessage()`, as well as below, line 967 in `prepareForTransport`, `GetTime()` is deprecated per `util/time.h`:\n```cpp\n/**\n * DEPRECATED\n * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)\n */\nint64_t GetTime();\n```\n",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476217691,476217691,src/net.cpp
jonatack,2020-08-25 07:02:37,2bc6e8bc6e9 perhaps set a default value for `m_session_id`,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476221476,476221476,src/net.h
jonasschnelli,2020-08-27 11:35:18,AFAIK uint256 has always a default of zero.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478349547,478349547,src/net.h
jonasschnelli,2020-08-27 12:05:02,"I just removed the `size_or_shortid >= 0` check (your right,.. it's always true).\nThe `(!valid_header)` check is necessary though,... in case `vRecv >> size_or_shortid` failed (can't happen?!) or if it contains a value greater than 12 or if below 12, the remaining buffer doesn't have the expected size.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478366404,478366404,src/net.cpp
jonatack,2020-08-27 22:27:52,"Indeed, you are right; in `uint256.h` the default constructor zeroes it out with \n`memset(data, 0, sizeof(data));`.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478730164,478730164,src/net.h
ariard,2020-09-09 15:30:27,The 4 bytes reservation is optimistically ? Maybe a ternary above to pick up between 1-byte short-ID and ASCII command string ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485704527,485704527,src/net.cpp
ariard,2020-09-09 15:36:31,Maybe add a constant for `32 * 1024` as we have for time ? Also do we have a setting prefix for testing only flag like `netencryptionfastrekey` to underscore further it's a test-only flag ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485708764,485708764,src/net.cpp
ariard,2020-09-09 15:57:20,nit: Add reference to BIP324 compliance.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485723574,485723574,src/net.h
ariard,2020-09-09 15:59:02,"""with a default pre-shared one as provided by BIP324""?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485724726,485724726,src/protocol.h
ariard,2020-09-09 16:11:28,"I can't find this requirement in the BIP, not in ""Packet Handling"". Maybe you've already the change just withhold ?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485736126,485736126,src/net.cpp
ariard,2020-09-09 16:28:44,I compile without ?,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485751513,485751513,src/net.cpp
ariard,2020-09-09 16:32:44,"Not straightforward to understand IMO. Maybe ""first byte encode the char-length of a string command bounded between 1 to 12"" ?",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485754978,485754978,src/net.cpp
jonasschnelli,2020-09-10 09:19:54,"I was trying to avoid additional constants for internal test purposes only. Sadly, we don't have a general test-only flag so far.",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486191890,486191890,src/net.cpp
jonasschnelli,2020-09-10 09:23:42,"Do you mean reserve additional bytes to avoid further buffer re-allocations? I guess 4 bytes will be sufficient for a couple of messages (like `ping`, `sendheaders`, etc.). I would also expect that the internal allocation is larger then 4 bytes anyways. Though I'm not opposed to reserve always a minimum of 64bytes which should find a single inv (most sent message?).",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486194276,486194276,src/net.cpp
jonatack,2020-09-10 09:32:45,"The added code uses functions from `https://en.cppreference.com/w/cpp/header/algorithm`. Per the developer notes, every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers. ",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486199951,486199951,src/net.cpp
jonatack,2020-11-03 10:59:48,"88f1e620b maybe a typo \n```suggestion\ntest_fuzz_out_point_deserialize_SOURCES = test/fuzz/deserialize.cpp\n```",https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516582625,516582625,src/Makefile.test.include
jonasschnelli,2020-11-03 11:08:24,Indeed. Rebase mistake. Fixed now.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516587453,516587453,src/Makefile.test.include
jonatack,2020-11-03 11:56:41,Thanks. Noting `git range-diff 218fe60 e549e76 76ce46f` here for my re-reviewing. Would be great to get this in soon.,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516613219,516613219,src/Makefile.test.include
fanquake,2021-03-12 00:38:58,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r592829922,592829922,src/test/fuzz/p2p_transport_deserializer.cpp
fanquake,2021-03-15 02:18:10,Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).,https://github.com/bitcoin/bitcoin/pull/18242#discussion_r594009430,594009430,src/net.cpp
