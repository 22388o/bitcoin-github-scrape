MarcoFalke,2017-12-12T23:14:47Z,Concept ACK on setting the rbf flag on transactions where it is unclear if they confirm with the default fallback fee fee. Not yet sure about adding a command line arg just to disable and disallow fallbackfee.,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351226718,351226718,
jonasschnelli,2017-12-13T06:24:10Z,"> Not yet sure about adding a command line arg just to disable and disallow fallbackfee.\n\nUsing a static (!) fallback fee seems an incorrect concept. It will very likely result in significant overpay or significant underpay (==stuck transaction).\nI would strongly recommend to either reject during the time when no estimations are available or to collect fee estimations from somewhere else (pr",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351295439,351295439,
NicolasDorier,2017-12-13T06:44:12Z,I think `walletallowfallbackfee` should be disabled by default.,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351298866,351298866,
greenaddress,2017-12-14T10:57:03Z,"If fee estimates are not available perhaps is best to ask the user to wait or to manually set a fee rate (if they are a sufficiently advanced user, maybe even behind a config flag to reduce mistakes). BIP125 replacement enabled helps only the case when you underpay and does nothing for overpaying.",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351678019,351678019,
MarcoFalke,2017-12-14T18:12:45Z,"Well, instead of adding a command line arg to disable fallbackfee, why not remove the default value for fallbackfee and require that it is set whenever it is used?",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351792159,351792159,
jonasschnelli,2017-12-14T18:58:00Z,"Removing the fallback fee entirely would be an abrupt task and it would probably make regression tests more difficult.\nReasonable steps are:\n1. Allow to disable (but enable by default)\n2. Disable by default\n3. Eventually remove",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351803689,351803689,
MarcoFalke,2017-12-14T23:04:16Z,"I think I am bad at choosing words. Let me explain by example:\n\n* fallbackfee not set in `conf` or on command line -> Consider as fallbackfee disabled\n* fallbackfee set in `conf` or on command line -> Consider fallbackfee enabled",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351863118,351863118,
jonasschnelli,2017-12-15T06:04:09Z,"> fallbackfee not set in conf or on command line -> Consider as fallbackfee disabled\n\nThat would disable the fallback fee by default. Right?",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-351921825,351921825,
MarcoFalke,2017-12-15T19:16:41Z,"Jup, if we want to disable by default, I'd prefer that way.",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352088737,352088737,
morcos,2017-12-15T19:47:28Z,"Agree with @MarcoFalke \n\nwe already have too many configuration options\nif you want to use fallbackfee, then set one, otherwise you don't get one.\n\nSometimes we err too much on maintaining every aspect of backwards compatibility.  \nJust tell people in the release notes that RPC and GUI will now refuse to send  when fee estimates are not initialized UNLESS you specifically instruct what",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352095438,352095438,
jonasschnelli,2017-12-15T19:48:55Z,How would we handle regression tests (enable fallbackfee by default there)?,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352095747,352095747,
jonasschnelli,2017-12-15T19:50:43Z,"However, I'm fine with skipping step 1) (allow to disable) and directly disable it by default (with allow to enable).",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352096133,352096133,
morcos,2017-12-15T19:53:04Z,"Thats a good question.\nMaybe for testnet and regtest we have fallbackfee enabled by default?  I'm not sure..  It does seem we're prone to errors that aren't caught by testing that way, but fundamentally testing fee estimation is hard.   Another option is to just hard code in a fee estimate file for the functional tests that use the cached directory.  But you'd still have the problem for all the ",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352096638,352096638,
MarcoFalke,2017-12-15T20:07:35Z,"> How would we handle regression tests (enable fallbackfee by default there)?\n\nJup, that makes sense to me. Don't worry too much about the tests for now, you can ignore the travis result and then later push a test-fix commit that follows your implementation and is acceptable to everyone.",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352099676,352099676,
jonasschnelli,2017-12-16T06:48:00Z,"* Changes this PR so it disables the fallback fee on mainnet, but keeps it enabled on testnet/regtest. Kept the option to change the state (renamed to `enablefallbackfee=<state>`).\n* Renamed the `-walletfallbackfeerbf125` to `fallbackfeerbf125`.\n",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352165349,352165349,
morcos,2017-12-16T13:01:13Z,"@jonasschnelli Can we please get rid of both of the new options?\n\nI haven't understood why they are necessary.\n\nWe already have `-fallbackfee`, it seems to me if you set that then you pretty clearly want to enable it and it doesn't make sense to have an option to enable fallbackfee without explicitly specifying what you want it to be.  \n\n`-fallbackfeerbf125` also seems unnecessary. In ",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352182153,352182153,
jonasschnelli,2017-12-19T23:25:09Z,"Followed @morcos advice.\nThis does now simply disable the default fallback fee on mainnet (keeps it on testnet/regtest).\nTransactions using the fallbackfee in case the fallback fee has not been set are getting rejected (on mainnet).",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-352917515,352917515,
MarcoFalke,2017-12-20T15:26:39Z,@jonasschnelli Needs rebase if still relevant. Also see #11918,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-353093240,353093240,
laanwj,2017-12-21T11:23:44Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-353327345,353327345,
MarcoFalke,2017-12-25T15:43:08Z,"Thanks for adding the tests. I also slightly tested a previous version in the gui.\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nutACK 93ba98a6dcab49965e9080adeaf84984b3677e29\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJaQRwAAAoJENLqSFDnUoslcdsP/241UP7KxSViikJmkv0XHYvx\nCKgsTPCnDBudbJoNYQ/dJ6pVuTcVUFUpJroOlsksUTX4SX1iz0t9zpXOqo1x+fQy\nVOD6vNqgOIHuhbbaDgc2kjeEcMLYTnLTL",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-353876673,353876673,
jonasschnelli,2018-02-09T07:09:55Z,"Rebased and fixed the test nit reported by @promag.\n\n>> Concept ACK on setting the rbf flag on transactions where it is unclear if they confirm with the default fallback fee\n\n> I see 2 distinct options here: 1) automatically set RBF; 2) give error if coin control RBF is not set. From the UI point of view, being ""preventive"" is not that bad, I would go for option 2).\n\nThe idea 1) has be",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-364353753,364353753,
MarcoFalke,2018-02-10T19:56:03Z,Should probably use underscore for the test name (see other test script names),https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-364685380,364685380,
jonasschnelli,2018-02-12T10:19:11Z,Fixed the test name (uses now underscore).,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-364880754,364880754,
jonasschnelli,2018-02-25T01:39:04Z,Fixed points reported by @promag ,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-368275626,368275626,
MarcoFalke,2018-02-25T16:14:27Z,"Only changes were feedback addressed by promag.\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 3f592b81dcca3d2ef11403a623a6ba5b017567d7\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJakuCeAAoJENLqSFDnUosl6WYP/AzLIKmB1aPMbpjXekqbBnqO\njVzOfPXN2GIxGqbynZHKvof6EYYAwVG47hNVWy9wO6+vGiZtmAC/qlQnorb9pfZb\noKNv1CDqK8dk8+LqHMSKggqAUHiJd0cP4mm8/GhySgewFCmjDVnYuHrpRNilsdHd\n",https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-368321819,368321819,
promag,2018-02-25T21:24:13Z,utACK 3f592b8.,https://github.com/bitcoin/bitcoin/pull/11882#issuecomment-368345991,368345991,
MarcoFalke,2017-12-20T20:26:06Z,"shorter, faster and clearer:\n\n```cpp\nif (fee_needed == 0)",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158127267,158127267,src/wallet/fees.cpp
MarcoFalke,2017-12-20T20:26:16Z,How is this not dead code?,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158127307,158127307,src/wallet/fees.cpp
MarcoFalke,2017-12-20T20:27:24Z,"nit: off by two years, almost",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158127524,158127524,test/functional/wallet-fallbackfee.py
MarcoFalke,2017-12-20T20:28:07Z,Could move up by a few lines to avoid merge conflicts,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158127689,158127689,test/functional/test_runner.py
jonasschnelli,2017-12-22T06:41:42Z,"`fee_needed == 0` seems the wrong check, it could be 0 in case you would run through with `nTxBytes=0`, very unlikely, but testing the fallbackfee instead the current `fee_needed` seems correct.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158436819,158436819,src/wallet/fees.cpp
jonasschnelli,2017-12-22T07:03:57Z,Why would that be dead code?,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158438882,158438882,src/wallet/fees.cpp
jonasschnelli,2017-12-22T07:04:20Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158438909,158438909,test/functional/test_runner.py
jonasschnelli,2017-12-22T07:04:30Z,Oh. Yes. Fixed.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158438980,158438980,test/functional/wallet-fallbackfee.py
MarcoFalke,2017-12-22T09:11:01Z,"Excuse my brevity, but I fail to see why fallbackfee is special cased here.\n\nLet's assume the user sets paytxfee to one satoshi per byte, but the required fee is higher. It will correctly report that the required fee rate was used.\nLet's assume the user sets fallbackfee to something very low and the required fee is higher. It will incorrectly report in the debug.log that the fallbackfee was ",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158453193,158453193,src/wallet/fees.cpp
MarcoFalke,2017-12-22T09:11:05Z,"Right, should only matter for unit tests, but makes sense to keep it that way.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158453203,158453203,src/wallet/fees.cpp
MarcoFalke,2017-12-22T09:15:44Z,"Could also add tests for the other rpc that potentially hit this error:\n\nE.g.\n\n```py\n        assert_raises_rpc_error(-4, ""Fee estimation failed. Fallbackfee is disabled"", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n        assert_raises_rpc_error(-4, ""Fee estimation failed. Fallbackfee is disabled"", lambda: self.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158453874,158453874,test/functional/wallet-fallbackfee.py
jonasschnelli,2017-12-22T19:08:07Z,"You right. It's no longer in use.\nThe question here is, that we return a single flag where a bitset would be required.\nReason can be FeeReason::REQUIRED but also (AND) FeeReason::FALLBACK.\n\nThis code part was required to enable RBF125 in case a fallback fee has been used regardless of the mintxrelayfee.\nBut no longer relevant, will remove.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158544358,158544358,src/wallet/fees.cpp
jonasschnelli,2017-12-22T19:36:06Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158548132,158548132,src/wallet/fees.cpp
jonasschnelli,2017-12-22T19:36:16Z,"Thanks.\nAdded those tests.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r158548155,158548155,test/functional/wallet-fallbackfee.py
promag,2018-02-05T14:09:58Z,Remove `stop` above and change here to `restart`.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r165981150,165981150,test/functional/wallet-fallbackfee.py
promag,2018-02-12T11:33:23Z,"Unused, remove? same below.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167528774,167528774,src/wallet/init.cpp
promag,2018-02-12T11:34:55Z,"Nit\n```cpp\ng_wallet_allow_fallback_fee = nFeePerK != 0;\n```",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167529110,167529110,src/wallet/init.cpp
promag,2018-02-12T11:35:35Z,Missing newline before.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167529249,167529249,test/functional/wallet_fallbackfee.py
promag,2018-02-12T11:38:10Z,"Nit, could be after `fMineBlocksOnDemand` above.",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167529739,167529739,src/chainparams.h
promag,2018-02-12T11:39:32Z,"Nit, shorter:\n```cpp\ng_wallet_allow_fallback_fee = Params().IsFallbackFeeEnabled();\n```",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167530170,167530170,src/wallet/init.cpp
promag,2018-02-12T11:41:13Z,"Following the same concept of #12408, move to wallet member?",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r167530676,167530676,src/wallet/wallet.cpp
jonasschnelli,2018-02-25T01:33:35Z,Can you explain why?,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r170438453,170438453,src/chainparams.h
jonasschnelli,2018-02-25T01:36:16Z,Fallback fee yes or now seems to me after a global setting (not per wallet).,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r170438488,170438488,src/wallet/wallet.cpp
promag,2018-02-25T21:21:55Z,"Take the following example:\n```cpp\n#include <iostream>\nusing namespace std;\n\nstruct s1 {\n  char a;\n  int b;\n};\n\nstruct s2 {\n  char a;\n  int b;\n  char c;\n};\n\nstruct s3 {\n  char a;\n  char c;\n  int b;\n};\n\nint main() {\n  cout << sizeof(s1) << endl;\n  cout << sizeof(s2) << endl;\n  cout << sizeof(s3) << endl;\n  return 0;\n}\n```\non my system the ou",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r170467929,170467929,src/chainparams.h
promag,2018-02-25T21:23:41Z,Ok then.,https://github.com/bitcoin/bitcoin/pull/11882#discussion_r170467985,170467985,src/wallet/wallet.cpp
MarcoFalke,2018-03-03T15:33:27Z,"In which case it could be a static member, just saying",https://github.com/bitcoin/bitcoin/pull/11882#discussion_r172019988,172019988,src/wallet/wallet.cpp
