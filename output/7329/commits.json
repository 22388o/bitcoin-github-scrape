[
  {
    "sha": "9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDI2M2JkMTdjMmJkZDViYTllMzFiZDVmYjExMGMzMzJlYjgwNjkx",
    "commit": {
      "author": {
        "name": "Chris Wheeler",
        "email": "chris@haydenwheeler.com",
        "date": "2016-01-17T11:03:56Z"
      },
      "committer": {
        "name": "Chris Wheeler",
        "email": "chris@haydenwheeler.com",
        "date": "2016-01-17T11:03:56Z"
      },
      "message": "Typo fixes in comments",
      "tree": {
        "sha": "e52d90fb446cd0039d2f39b707fe549a89234371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52d90fb446cd0039d2f39b707fe549a89234371"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/comments",
    "author": {
      "login": "chriswheeler",
      "id": 2039180,
      "node_id": "MDQ6VXNlcjIwMzkxODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2039180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriswheeler",
      "html_url": "https://github.com/chriswheeler",
      "followers_url": "https://api.github.com/users/chriswheeler/followers",
      "following_url": "https://api.github.com/users/chriswheeler/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriswheeler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriswheeler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriswheeler/subscriptions",
      "organizations_url": "https://api.github.com/users/chriswheeler/orgs",
      "repos_url": "https://api.github.com/users/chriswheeler/repos",
      "events_url": "https://api.github.com/users/chriswheeler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriswheeler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "chriswheeler",
      "id": 2039180,
      "node_id": "MDQ6VXNlcjIwMzkxODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2039180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriswheeler",
      "html_url": "https://github.com/chriswheeler",
      "followers_url": "https://api.github.com/users/chriswheeler/followers",
      "following_url": "https://api.github.com/users/chriswheeler/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriswheeler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriswheeler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriswheeler/subscriptions",
      "organizations_url": "https://api.github.com/users/chriswheeler/orgs",
      "repos_url": "https://api.github.com/users/chriswheeler/repos",
      "events_url": "https://api.github.com/users/chriswheeler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriswheeler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd1304ec216c7d4bdb302195e184b15503819f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd1304ec216c7d4bdb302195e184b15503819f67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd1304ec216c7d4bdb302195e184b15503819f67"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "94775f84ceed76ee5ef6823344593376e3e8bc7d",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -72,7 +72,7 @@ def run_test(self):\n         txid_spent = txin_spent[\"txid\"]\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n-        # We cant find the block from a fully-spent tx\n+        # We can't find the block from a fully-spent tx\n         assert_raises(JSONRPCException, self.nodes[2].gettxoutproof, [txid_spent])\n         # ...but we can if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])"
      },
      {
        "sha": "db8f97abc26464f19b4504fd412edf39a1d39b0d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -2177,7 +2177,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n \n     if (historicalBlockServingLimit)\n     {\n-        // keep a large enought buffer to at least relay each block once\n+        // keep a large enough buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n         uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)"
      },
      {
        "sha": "7f79dd02c605209849d80719c3a5d3918b69c691",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -140,7 +140,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         return false;\n \n     do {\n-        // Should set the timeout limit to a resonable value to avoid\n+        // Should set the timeout limit to a reasonable value to avoid\n         // generating unnecessary checking call during the polling loop,\n         // while it can still response to stop request quick enough.\n         // 2 seconds looks fine in our situation."
      },
      {
        "sha": "de3c060d6a6d9e5187fa18572694cbf8328e9d76",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -87,7 +87,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     int maxbucketindex = buckets.size() - 1;\n \n     // requireGreater means we are looking for the lowest fee/priority such that all higher\n-    // values pass, so we start at maxbucketindex (highest fee) and look at succesively\n+    // values pass, so we start at maxbucketindex (highest fee) and look at successively\n     // smaller buckets until we reach failure.  Otherwise, we are looking for the highest\n     // fee/priority such that all lower values fail, and we go in the opposite direction.\n     unsigned int startbucket = requireGreater ? maxbucketindex : 0;"
      },
      {
        "sha": "3fa31c39e745b194af4fd964b13b1c382a67e670",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -29,7 +29,7 @@ class CTxMemPool;\n  * included in blocks before transactions of lower fee/priority.   So for\n  * example if you wanted to know what fee you should put on a transaction to\n  * be included in a block within the next 5 blocks, you would start by looking\n- * at the bucket with with the highest fee transactions and verifying that a\n+ * at the bucket with the highest fee transactions and verifying that a\n  * sufficiently high percentage of them were confirmed within 5 blocks and\n  * then you would look at the next highest fee bucket, and so on, stopping at\n  * the last bucket to pass the test.   The average fee of transactions in this\n@@ -87,13 +87,13 @@ class TxConfirmStats\n     // Count the total # of txs in each bucket\n     // Track the historical moving average of this total over blocks\n     std::vector<double> txCtAvg;\n-    // and calcuate the total for the current block to update the moving average\n+    // and calculate the total for the current block to update the moving average\n     std::vector<int> curBlockTxCt;\n \n     // Count the total # of txs confirmed within Y blocks in each bucket\n     // Track the historical moving average of theses totals over blocks\n     std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n-    // and calcuate the totals for the current block to update the moving averages\n+    // and calculate the totals for the current block to update the moving averages\n     std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n \n     // Sum the total priority/fee of all tx's in each bucket"
      },
      {
        "sha": "fb502b3c81acc98aa07b76085cc49b7207b43c16",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -112,7 +112,7 @@ double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n void ClientModel::updateTimer()\n {\n     // no locking required at this point\n-    // the following calls will aquire the required lock\n+    // the following calls will acquire the required lock\n     Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n     Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }"
      },
      {
        "sha": "95d4bd56f9c2d3c7073280b9a69928cad8bda8b4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -789,7 +789,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n \n     if (model->getOptionsModel()->getCoinControlFeatures())\n     {\n-        // enable minium absolute fee UI controls\n+        // enable minimum absolute fee UI controls\n         ui->radioCustomAtLeast->setVisible(true);\n \n         // only enable the feature if inputs are selected"
      },
      {
        "sha": "b40ab848dcdb472ea4ed5e9e87b39d5c5b9be1c5",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n             int duplicate2 = mutate >= 2 ? 1 << ctz(ntx1) : 0; // Likewise for the second mutation.\n             if (duplicate2 >= ntx1) break;\n             int ntx2 = ntx1 + duplicate2;\n-            int duplicate3 = mutate >= 3 ? 1 << ctz(ntx2) : 0; // And for the the third mutation.\n+            int duplicate3 = mutate >= 3 ? 1 << ctz(ntx2) : 0; // And for the third mutation.\n             if (duplicate3 >= ntx2) break;\n             int ntx3 = ntx2 + duplicate3;\n             // Build a block with ntx different transactions."
      },
      {
        "sha": "2fd20ae4230c4a2523db591f6a70507e9030ab99",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -303,7 +303,7 @@ static std::map<std::string,std::string> ParseTorReplyMapping(const std::string\n \n /** Read full contents of a file and return them in a std::string.\n  * Returns a pair <status, string>.\n- * If an error occured, status will be false, otherwise status will be true and the data will be returned in string.\n+ * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n  *\n  * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n  *         (with len > maxsize) will be returned."
      },
      {
        "sha": "12e80f4c24bd5d3ab4ce931f10f7f8d24b530165",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -1424,7 +1424,7 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n             \"                                         'receive' category of transactions. Negative confirmations indicate the\\n\"\n-            \"                                         transation conflicts with the block chain\\n\"\n+            \"                                         transaction conflicts with the block chain\\n\"\n             \"    \\\"trusted\\\": xxx            (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\""
      },
      {
        "sha": "51afd1b1402cb4ad9aebe202271d7665d90f1de7",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d263bd17c2bdd5ba9e31bd5fb110c332eb80691/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=9d263bd17c2bdd5ba9e31bd5fb110c332eb80691",
        "patch": "@@ -17,7 +17,7 @@ class CScript;\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    //! Indicates that we don't know how to create a scriptSig that would solve this if we were given the appropriate private keys\n     ISMINE_WATCH_UNSOLVABLE = 1,\n     //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n     ISMINE_WATCH_SOLVABLE = 2,"
      }
    ]
  }
]