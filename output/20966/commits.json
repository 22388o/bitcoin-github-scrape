[
  {
    "sha": "d197977ae2076903ed12ab7616a7f93e88be02e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTk3OTc3YWUyMDc2OTAzZWQxMmFiNzYxNmE3ZjkzZTg4YmUwMmUx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-14T08:33:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T12:39:44Z"
      },
      "message": "banman: save the banlist in a JSON format on disk\n\nSave the banlist in `banlist.json` instead of `banlist.dat`.\n\nThis makes it possible to store Tor v3 entries in the banlist on disk\n(and any other addresses that cannot be serialized in addrv1 format).\n\nOnly read `banlist.dat` if it exists and `banlist.json` does not\nexist (first start after an upgrade).\n\nSupersedes https://github.com/bitcoin/bitcoin/pull/20904\nResolves https://github.com/bitcoin/bitcoin/issues/19748",
      "tree": {
        "sha": "f52c91c3abad65cffa13a8334c37da415c708c70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f52c91c3abad65cffa13a8334c37da415c708c70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQiJIACgkQVN8G9ktV\ny78Aeh//SU4/z0Y/SasL7PccKF92qRwCAERlBafFloeZFLVrf27gVVW5a1Ojy2xb\n0FvWb8UwLXNhm7FqeuH+Lt62Y0NJm1fQTlewFwcPAxk2tW/l0F6S34wfizc7TpOT\n7A0ZjySslrnQfxYflB5OdAmOWykaS093s+RSifoC27b7M7J0wxNaSSJKq5Qd2U/e\n5DBLVLX9uu9gPnzBS00GcfV/Ze/a0drMaev+DSY3J47C2tFcpLdTCz2sHUaYC43e\nPzL56bvTbjpMQUJ2o5VlM4KmzfHpvKf83FKESbtPKdBBVUkGoWlEmugC5QxBR8ma\n1+MtMsOFzRvghHcG++HMSs/7DCwxkewCk7sTIAr8SvoslAl3c9uE2ywHcsFXTtsT\nVbmVtD5wHwhaLW8dythK7+nykZZ0vRs2iw939rCtAH+uu93nyTeYG9BqqzE+x2LA\ntu/VL1qgXhbL9dYoXWmY8lDlAf9x6gUUBT59fpTP/+kz9T5HT/dufe0kPvzEM8e0\nbin6AMw30SCAuSj96Fk/MHUERPlluAl2eCRbwuD6fzXe0JPI6QYINfyB5WzVHRMl\neCSk94Pdx1gchPs1TQF2cZdA2BDmiPsg+TPe0Yx3SeJbU4awV9bJpCHz425Iqb9d\n7L8qQpgj51Kip2RhZ/P1CGMTZh7TSSOGHkrngCmLx/BXbEkqBIu0ZBe3v4mrPZnT\nq3Je3atORxkWsC5wHAPMcLD/gPTAlrkivK6aqUxD8PdoOKDqfCu0Sugno4aNbc4j\nATtSaD2KGMJo2P3++vnJY1H79EVGj3UrmUrzVPKaDWkSEgHLy+LF2CkdKo5w3OYV\n0be3R9Q7H0e6NtXnDGYyMNybs80GvBAylM9hdtJl7rrOIG6CpEWvjuX2tCkljqZG\nSN1oFKZ/mBlEsoms3QidTJSx2i+TjsyUD8TTQWYz0kywaZuUDjMGg5plKcoj9zwz\nADyzlkWrTWvqtiBTDo9112CcExsJIeD5gyEqTMexPIaUAgCgaHsUcgnsbpRBsNPY\nak0X0HNJSH1WitK32tKexof/kKpaTZrZ6102KgASjHl7mojkPtGkSQBARISNw7n9\n+jjc4hMjocBCiWShoGgCIxD+DiQCjmlnS2aYu+inwwrNDDI65VmwwssHedv6oj/w\nlWTGotOLqXeuJDE5d+F/s/9bX9Kt4wPBcx+SPsOKqhLpUzR5/IMqMAb43ROLIORG\nq0Q8xIiE7K6iTrc6wAayulToShYXj8Q94SMzt2hiciYbTO6kaKiiljSDaVosEiTB\n+8CdmY2xvygjXsvblA6xlPBYh23a6qjACWz4a68/fwVdNto3LsuQmw9wMTaiv/dV\nTEkds2xtcgDpuWNuaaC2mQUuL99O4g==\n=CT6E\n-----END PGP SIGNATURE-----",
        "payload": "tree f52c91c3abad65cffa13a8334c37da415c708c70\nparent 6a67366fdc3e1d383fe7cbfa209d7e85f0d96638\nauthor Vasil Dimov <vd@FreeBSD.org> 1610613184 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624279184 +0200\n\nbanman: save the banlist in a JSON format on disk\n\nSave the banlist in `banlist.json` instead of `banlist.dat`.\n\nThis makes it possible to store Tor v3 entries in the banlist on disk\n(and any other addresses that cannot be serialized in addrv1 format).\n\nOnly read `banlist.dat` if it exists and `banlist.json` does not\nexist (first start after an upgrade).\n\nSupersedes https://github.com/bitcoin/bitcoin/pull/20904\nResolves https://github.com/bitcoin/bitcoin/issues/19748\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d197977ae2076903ed12ab7616a7f93e88be02e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 170,
      "deletions": 39
    },
    "files": [
      {
        "sha": "2283186eca67b8eecc9441e2204b9187972ab413",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -56,7 +56,8 @@ Subdirectory       | File(s)               | Description\n `indexes/coinstats/db/` | LevelDB database | Coinstats index; *optional*, used if `-coinstatsindex=1`\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)\n `./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup\n-`./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n+`./`               | `banlist.dat`         | Stores the addresses/subnets of banned nodes (deprecated). `bitcoind` or `bitcoin-qt` no longer save the banlist to this file, but read it on startup if `banlist.json` is not present.\n+`./`               | `banlist.json`        | Stores the addresses/subnets of banned nodes.\n `./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option"
      },
      {
        "sha": "b8fd019bab9c335410a50e21ba4abff8a16dceeb",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 4,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -11,13 +11,72 @@\n #include <cstdint>\n #include <hash.h>\n #include <logging/timer.h>\n+#include <netbase.h>\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/settings.h>\n #include <util/system.h>\n \n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n namespace {\n \n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n@@ -119,18 +178,54 @@ bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n }\n } // namespace\n \n-CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))\n+CBanDB::CBanDB(fs::path ban_list_path)\n+    : m_banlist_dat(ban_list_path.string() + \".dat\"),\n+      m_banlist_json(ban_list_path.string() + \".json\")\n {\n }\n \n bool CBanDB::Write(const banmap_t& banSet)\n {\n-    return SerializeFileDB(\"banlist\", m_ban_list_path, banSet, CLIENT_VERSION);\n+    std::vector<std::string> errors;\n+    if (util::WriteSettings(m_banlist_json, {{JSON_KEY, BanMapToJson(banSet)}}, errors)) {\n+        return true;\n+    }\n+\n+    for (const auto& err : errors) {\n+        error(\"%s\", err);\n+    }\n+    return false;\n }\n \n-bool CBanDB::Read(banmap_t& banSet)\n+bool CBanDB::Read(banmap_t& banSet, bool& dirty)\n {\n-    return DeserializeFileDB(m_ban_list_path, banSet, CLIENT_VERSION);\n+    // If the JSON banlist does not exist, then try to read the non-upgraded banlist.dat.\n+    if (!fs::exists(m_banlist_json)) {\n+        // If this succeeds then we need to flush to disk in order to create the JSON banlist.\n+        dirty = true;\n+        return DeserializeFileDB(m_banlist_dat, banSet, CLIENT_VERSION);\n+    }\n+\n+    dirty = false;\n+\n+    std::map<std::string, util::SettingsValue> settings;\n+    std::vector<std::string> errors;\n+\n+    if (!util::ReadSettings(m_banlist_json, settings, errors)) {\n+        for (const auto& err : errors) {\n+            LogPrintf(\"Cannot load banlist %s: %s\\n\", m_banlist_json.string(), err);\n+        }\n+        return false;\n+    }\n+\n+    try {\n+        BanMapFromJson(settings[JSON_KEY], banSet);\n+    } catch (const std::runtime_error& e) {\n+        LogPrintf(\"Cannot parse banlist %s: %s\\n\", m_banlist_json.string(), e.what());\n+        return false;\n+    }\n+\n+    return true;\n }\n \n CAddrDB::CAddrDB()"
      },
      {
        "sha": "399103c99199d661c12e6c21de20cfd563a2085b",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -9,6 +9,7 @@\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <serialize.h>\n+#include <univalue.h>\n \n #include <string>\n #include <vector>\n@@ -36,6 +37,13 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n     SERIALIZE_METHODS(CBanEntry, obj)\n     {\n         uint8_t ban_reason = 2; //! For backward compatibility\n@@ -48,6 +56,12 @@ class CBanEntry\n         nCreateTime = 0;\n         nBanUntil = 0;\n     }\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n };\n \n /** Access to the (IP) address database (peers.dat) */\n@@ -62,15 +76,30 @@ class CAddrDB\n     static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n-/** Access to the banlist database (banlist.dat) */\n+/** Access to the banlist databases (banlist.json and banlist.dat) */\n class CBanDB\n {\n private:\n-    const fs::path m_ban_list_path;\n+    /**\n+     * JSON key under which the data is stored in the json database.\n+     */\n+    static constexpr const char* JSON_KEY = \"banned_nets\";\n+\n+    const fs::path m_banlist_dat;\n+    const fs::path m_banlist_json;\n public:\n     explicit CBanDB(fs::path ban_list_path);\n     bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n+\n+    /**\n+     * Read the banlist from disk.\n+     * @param[out] banSet The loaded list. Set if `true` is returned, otherwise it is left\n+     * in an undefined state.\n+     * @param[out] dirty Indicates whether the loaded list needs flushing to disk. Set if\n+     * `true` is returned, otherwise it is left in an undefined state.\n+     * @return true on success\n+     */\n+    bool Read(banmap_t& banSet, bool& dirty);\n };\n \n /**"
      },
      {
        "sha": "d2437e67338cee2f592d85ea92fe2c7786992144",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -18,20 +18,18 @@ BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t\n     if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist\u2026\").translated);\n \n     int64_t n_start = GetTimeMillis();\n-    m_is_dirty = false;\n-    banmap_t banmap;\n-    if (m_ban_db.Read(banmap)) {\n-        SetBanned(banmap);        // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned();            // sweep out unused entries\n+    if (m_ban_db.Read(m_banned, m_is_dirty)) {\n+        SweepBanned(); // sweep out unused entries\n \n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            m_banned.size(), GetTimeMillis() - n_start);\n+        LogPrint(BCLog::NET, \"Loaded %d banned node addresses/subnets  %dms\\n\", m_banned.size(),\n+                 GetTimeMillis() - n_start);\n     } else {\n-        LogPrintf(\"Recreating banlist.dat\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n+        LogPrintf(\"Recreating the banlist database\\n\");\n+        m_banned = {};\n+        m_is_dirty = true;\n     }\n+\n+    DumpBanlist();\n }\n \n BanMan::~BanMan()\n@@ -53,8 +51,8 @@ void BanMan::DumpBanlist()\n         SetBannedSetDirty(false);\n     }\n \n-    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - n_start);\n+    LogPrint(BCLog::NET, \"Flushed %d banned node addresses/subnets to disk  %dms\\n\", banmap.size(),\n+             GetTimeMillis() - n_start);\n }\n \n void BanMan::ClearBanned()\n@@ -167,13 +165,6 @@ void BanMan::GetBanned(banmap_t& banmap)\n     banmap = m_banned; //create a thread safe copy\n }\n \n-void BanMan::SetBanned(const banmap_t& banmap)\n-{\n-    LOCK(m_cs_banned);\n-    m_banned = banmap;\n-    m_is_dirty = true;\n-}\n-\n void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n@@ -188,7 +179,7 @@ void BanMan::SweepBanned()\n                 m_banned.erase(it++);\n                 m_is_dirty = true;\n                 notify_ui = true;\n-                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+                LogPrint(BCLog::NET, \"Removed banned node address/subnet: %s\\n\", sub_net.ToString());\n             } else\n                 ++it;\n         }"
      },
      {
        "sha": "8c75d4037e5fbd17b9174849a190798b0c4710e9",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -17,7 +17,8 @@\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n-// How often to dump addresses to banlist.dat\n+\n+/// How often to dump banned addresses/subnets to disk.\n static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n@@ -30,7 +31,7 @@ class CSubNet;\n // If an address or subnet is banned, we never accept incoming connections from\n // it and never create outgoing connections to it. We won't gossip its address\n // to other peers in addr messages. Banned addresses and subnets are stored to\n-// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// disk on shutdown and reloaded on startup. Banning can be used to\n // prevent connections with spy nodes or other griefers.\n //\n // 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n@@ -79,7 +80,6 @@ class BanMan\n     void DumpBanlist();\n \n private:\n-    void SetBanned(const banmap_t& banmap);\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     void SetBannedSetDirty(bool dirty = true);"
      },
      {
        "sha": "da0447ca79ce2bd61fcc09921723561260f42a42",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -1161,7 +1161,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n "
      },
      {
        "sha": "5668ead1fbc3f4620ba9551e9eec3e195eb847d4",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n@@ -285,7 +285,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);"
      },
      {
        "sha": "cca41e79aec1cdb23d909087c24944b11c02e8a9",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -9,8 +9,10 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <test/util/setup_common.h>\n+#include <util/readwritefile.h>\n #include <util/system.h>\n \n+#include <cassert>\n #include <cstdint>\n #include <limits>\n #include <string>\n@@ -38,8 +40,20 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     int limit_max_ops{300};\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    const fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist.dat\";\n-    fs::remove(banlist_file);\n+    fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n+\n+    const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n+    if (start_with_corrupted_banlist) {\n+        const std::string sfx{fuzzed_data_provider.ConsumeBool() ? \".dat\" : \".json\"};\n+        assert(WriteBinaryFile(banlist_file.string() + sfx,\n+                               fuzzed_data_provider.ConsumeRandomLengthString()));\n+    } else {\n+        const bool force_read_and_write_to_err{fuzzed_data_provider.ConsumeBool()};\n+        if (force_read_and_write_to_err) {\n+            banlist_file = fs::path{\"path\"} / \"to\" / \"inaccessible\" / \"fuzzed_banlist\";\n+        }\n+    }\n+\n     {\n         BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n@@ -80,5 +94,6 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                 });\n         }\n     }\n-    fs::remove(banlist_file);\n+    fs::remove(banlist_file.string() + \".dat\");\n+    fs::remove(banlist_file.string() + \".json\");\n }"
      },
      {
        "sha": "f71d9148b65cb42dd76502f3127b290ab27aea90",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d197977ae2076903ed12ab7616a7f93e88be02e1/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=d197977ae2076903ed12ab7616a7f93e88be02e1",
        "patch": "@@ -196,7 +196,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     m_node.addrman = std::make_unique<CAddrMan>();\n-    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,"
      }
    ]
  },
  {
    "sha": "dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDRlOTU3ZGNkZmM5NzFhNGE5NzE5OTVmZjJkYjlmYjc4N2QyM2Mz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-11T16:25:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:27:03Z"
      },
      "message": "test: ensure banlist can be read from disk after restart\n\nWith `banlist.dat` (being written in addrv1 format) if we would try to\nwrite a Tor v3 subnet, it would serialize as a dummy-all-0s IPv6\naddress and subsequently, when deserialized will not result in the same\nsubnet.\n\nThis problem does not exist with `banlist.json` where the data is saved\nin textual, human-readable form.",
      "tree": {
        "sha": "f0942d6f7cad7ec5a43094d07337c71644112d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0942d6f7cad7ec5a43094d07337c71644112d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQk6kACgkQVN8G9ktV\ny79VdR/8D1hos5EHvB2xc41bX673kCjLYfrxH68mlYMxoCPcDjqBD5m3APZdNUiR\nYk6EQcAWE9OKvXZfCKAGjxyJtyxjcxBX2Lx/tT9qTvu2eT+qmylqhxXnNLYV1dqD\n1hjDsETgUhEKmGvct31T82pNMYyzacIvdUG2q97ku3zjLanSsKjDIMMLtj29VvRu\nq8GJjkZLKoBxbdfFDwY6idKFMMVsa6whCUDPPGwJ//jILEKwKYAXtQPbD5GyEFM5\nKCrkZtBHJk2B+etf7OadAIE/hp6DboLhJ3YGAUk7Ow2BxvZj5At8ogoNaDqMOG9i\nHffEPXctB33xDunJCxwoilNZ/P8L+l8jt1IAlHycIcPq5PTXFMmTiw0M4OipVi+Q\ne1HFtVarszGaOwwipUnuJsrsfRKu3HcrgJDeaNGvaTRbBW8THemEnWUSQ0Y+/apR\nWQgqWGkNQhHBgqOiuOwvCBsojW+YM2vKOywQHA4vls0jsmh7ssCUvF/vfDhzGj6f\nNwIGNt5V06EXaFymbL8OGJNSZRdeiY7tYyYmss/50j83Bm+QgZ0i/fM2NmKs6fbl\ncho8nJAEuKPyt0D/asC7DGd6+YfIz7On/nSQAz41YZDlY+q4m5FezqS5CYtxvOTH\nJ7mI1CEile2ckwugMfa4oXb/+TzeIY2Ov6LaYjIZQlJPWqrchyJA84rj2SoXXUto\nth7eWGTdPVy9i+gQuK/CFGAPaa7G+/r0ozNcoK1cZ9VYEOeBH0Hi/34IX1/Yg1BI\ni/6bk11Iw2V86h4AAyqyHPm5gvXdN8AIF4hBiCD+iz+2Dn2lwfHYVO+DFNjUOb1a\nmM8tGw4lHzm8mD1O0FIaaGVd3t2LzCm3KZqPPV4/d4tjVcdVLZ1r3Md2x8dnlQ67\nGz4wPNkLYQKhKqn2uBQsaf2gJtqyIzzf1+Iteg4DGBmzDR3JwgtveYbTKB5WNlS+\nVJgP1PSnu2lgGOyHlYSJjs44si9JSrJgbt1xy6+foXLav/n2k5R/kghHbgxxUarM\n0WEGZFot+WnwC4Jih2twpxOaBYMQUa0kAwM70Gj3d66n+Gv6ZOZMXq2KaNaiUszz\nmmu0F+5B6FVX+RH/2RVKlnaaZ6Qg+OWmHVX6lHZJCqNEzJNL07H9ZkMHHxUzCb2R\nVLmZvaDGtlEQc5Mwj6nnPaWlIoO5VnQa69VlnfHjFjy49bZV0D+O2fxVyztp3FUF\nIwuu87244SLyp+fnFKn1e0Wzth2TeLSJgcu+mjjg1qsLd8tYTwNQsA5slHcsLrpr\nJKvPSk3lti4lHoiU+pqefXwMRw5g9Dfpp56Ehdgw9nGAo7Ko2P4/xEp59cTOmHtY\niqKGKIJ6z7ssJ1DBjaBpX8iv+Dr1JQ==\n=rT8E\n-----END PGP SIGNATURE-----",
        "payload": "tree f0942d6f7cad7ec5a43094d07337c71644112d6d\nparent d197977ae2076903ed12ab7616a7f93e88be02e1\nauthor Vasil Dimov <vd@FreeBSD.org> 1610382340 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282023 +0200\n\ntest: ensure banlist can be read from disk after restart\n\nWith `banlist.dat` (being written in addrv1 format) if we would try to\nwrite a Tor v3 subnet, it would serialize as a dummy-all-0s IPv6\naddress and subsequently, when deserialized will not result in the same\nsubnet.\n\nThis problem does not exist with `banlist.json` where the data is saved\nin textual, human-readable form.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d197977ae2076903ed12ab7616a7f93e88be02e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d197977ae2076903ed12ab7616a7f93e88be02e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d197977ae2076903ed12ab7616a7f93e88be02e1"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e91ed3b0452c4d2949cb6530d84a8f4f8c291574",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd4e957dcdfc971a4a971995ff2db9fb787d23c3/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "patch": "@@ -51,12 +51,24 @@ def run_test(self):\n         ip_addr = \"1.2.3.4\"\n         assert(not self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"add\")\n         assert(self.is_banned(node, tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n+\n+        self.log.info(\"Test the ban list is preserved through restart\")\n+\n+        self.restart_node(1)\n+        assert(self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n         node.setban(tor_addr, \"remove\")\n         assert(not self.is_banned(self.nodes[1], tor_addr))\n         assert(not self.is_banned(node, ip_addr))\n \n+        self.restart_node(1)\n+        assert(not self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGIxMGViZGEzMDE1NDhiOGZmNGIwYzczZmVmYzM2N2FkNWRjMjJi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-26T07:38:46Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:27:57Z"
      },
      "message": "doc: fix grammar in doc/files.md",
      "tree": {
        "sha": "b1ad280bf48649352faa938c61971d9d1366b4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1ad280bf48649352faa938c61971d9d1366b4e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQk90ACgkQVN8G9ktV\ny79Y2R/9FIwDnS7pd3j8FEBYmGbuhhJMwxx9gbeMpO9fw1PC9AgcDZWndiX1SPKK\nfJ5vKavERcWY6Hiws3x8RqSJXZynZw9Nr3dneCQd6kpxlToBIkp3LvzlRYyfpQbE\n/5t0NhRxxrVpwMmCwf9OYjdkqrUUF2QL9WGZvHg9RrI5YWoJ2OE/FsMnunLVI7PS\n1VbGNKjFsMAoYJhgktyYkoBvqP39aIJTX8Kvox/vIHHJ2Mkw6RSw3r+A/jCZyKaQ\nu4NWvP2ugd5xb2kVUMebFi7BM1ZFIQ94CnSXVZGVlq6xPaPmZqXU6QmkQmQrKkCK\nrstV1U8B5g5eMx+b49TWcwkxlgC3ITXJ9VIqJENlL5tGt0+xzlUm98nrNN5nzMy7\njLUFxz0xl2AKtSsXC+C3pFEfwfsrd5YDhmQux7jEsp4TC2+FTLcI0xQhLfLK+qJY\ndOHQXh10SL/GCvzvAfKe4SNyJdu9PEbk4TYaUThZATrRnf3Tzr9jXUNCeDwePnMk\nn6UYAKOmKONT2Znu4omgTO9gLc9lU7L4p7Ljive55nW6MdTh0VHq7gU4A+86xj9F\nVVX8EtAja2nnRjX4eGp+4RjRYxUgKCPF771HBSwHBqSZmgKhXduZJMZc4c3Zx620\nA5CtETl5HzuDtop7Wl/drqscEBkLU99bD9RJRWYF5rOpeKr/l92aKhieBkryS3mX\nUl0SvUlRTH0ftploxRBwNNF3Wk0caNLTWMdXjQnc9Tom6X87g1qTGxw3uPqETX9M\nhv1OME0WiPillGG/HeDrxjcRBhByYtP5G/FTq6X3zoUdvwDwg0jhfSO54dp8/stB\nM21ivt6We4/xHPUOLzDdIoh4/vMWLZwE2K7wSeSkpckr7hR9ZT0e8chKNO9O3Zus\nhKulN2IaygUJR2a9c0CijCG+BaLEA399uqqIEuyeWg0/MyOule/Y8VJaX4EjXTNd\nqE/m41weiqbfc58UKbmwGyLfSnoQb6kO2sQuE4KeiiI7MnoO/wFyBRHb1bMzFrtr\nos5N60IbXO5lsyMofgkrfTCoXSpTgLAyDx5iJUmXafYcrHQoX59YyCkyLUdXOuWJ\n+nneHFoP1xITqDBoql1tL5X8F72QfRSH/HgvF79wbGPiTctXv5WpTvnqwGtsblUe\nbhVP3FQ76kVGFhB28UqVoDb6U5XurLFdzlo3g0sshQe7AaSiAZmbn5xJbiLBpcR8\n4TVTnpLrUiQbThALP/4IQXBvPK61HnrnsD3q23hv6Yp0Clem1oQ8rZ2ExVj2IDAR\n0wFkqv/pTvpfYfdax5/8LdtVSf+q9VT0qZUBPbO5yHu6C5GeKFcIfIeEuE96Jhzz\nzaLWFPsArWM1EoKzTqIFdjPhdsbXwQ==\n=PM/5\n-----END PGP SIGNATURE-----",
        "payload": "tree b1ad280bf48649352faa938c61971d9d1366b4e5\nparent dd4e957dcdfc971a4a971995ff2db9fb787d23c3\nauthor Vasil Dimov <vd@FreeBSD.org> 1619422726 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282077 +0200\n\ndoc: fix grammar in doc/files.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd4e957dcdfc971a4a971995ff2db9fb787d23c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd4e957dcdfc971a4a971995ff2db9fb787d23c3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e670d77ae5d24ca10c40182fc759ea18b9fbc50f",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24b10ebda301548b8ff4b0c73fefc367ad5dc22b/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "patch": "@@ -110,7 +110,7 @@ Subdirectory | File                 | Description\n \n ## Legacy subdirectories and files\n \n-These subdirectories and files are no longer used by the Bitcoin Core:\n+These subdirectories and files are no longer used by Bitcoin Core:\n \n Path           | Description | Repository notes\n ---------------|-------------|-----------------"
      }
    ]
  },
  {
    "sha": "bb719a08db173a753984a04534de6f148b87b17a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjcxOWEwOGRiMTczYTc1Mzk4NGEwNDUzNGRlNmYxNDhiODdiMTdh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-26T07:56:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-06-21T13:29:28Z"
      },
      "message": "style: remove () from assert in rpc_setban.py",
      "tree": {
        "sha": "1e06457542b727befd67e731d7d5c1d6f59f9363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e06457542b727befd67e731d7d5c1d6f59f9363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb719a08db173a753984a04534de6f148b87b17a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDQlDoACgkQVN8G9ktV\ny78DdB/8D7XII6MWIG9gMHgz5tV6zmCeMoO6qEDT4YpPV4rVT+r5+YuvxbbMmWsi\n9fnLzt2KbQ9esl5ibgpHBViaeqXgfzYvhgwDQyFEbNm48VxzhgY8Onotx3T8mDED\nj/Gf6L8UD76Ew7J39F44iaWCBITZojDvt2Mkf4ZAScfFDkLpnj4Zwv/KrrEyn0FG\niPF5IH3D5L6Rs3CRvjWNhjPl32qcgNdMqu69RReuXZ/klovVPeVmw3W0HU1VPrKp\nC+4jkVv6pJaOg1MXfK/kvr9Ej2DNY3eJTvXJI/m4rKr0x0HmIIZwTG9fCctgqebh\naAoGkYbM7zEhl6sz6W3r+1kFHMOBVyA5qMV5+lhA/41X+aDWrOKHanesWbewmAAV\n8aoRsgdP6j+kw291cT9ewXGHIrXJJ/jgcDHQ33ZLjv6xH3DH3NaHpnjDcoPKllG4\nsu3ggDwn4MPEqpnAnnR/u2p7nonlAUBcs5E4fHpCv2e7HnW1Fepx/Bfsq01FUj44\npBU0YNdl2VFv7BZVhWeifkmg3dawh1Ywi/e8o0KWBeDQyZMxuNxvZkdh6bCdvoaP\nw/1a1Z5ByuntfaJy4MDHRRaXQKRg/ge/6rcViON/lu1MgghWzzUR3MUo8T5/tn94\n830vu49WscOM9mnmFAoC0lJZPBkIEnafYAW3PQzloh1Ysc4wAwuAwtv2WsgxLwyM\nR7kOgXfXvpzJ28ZhNFd6eac+O9IsxDFiTvdlnqWqK8hBx3bgbVYpOBq7GHhc91Lx\nEVvh1KBPeXhsiE2lErtgwAv6ljJbiMDT8gCxiCc+su8bkNt2fKPqcwVjgwtluQen\nm6OUZXatGCUjmf67tHddUpjBVJA4dQf7ibGrEcZw3w/S8lwhVlhrpkEGdQpOHhZS\nnXDY2tPkZqfjKQprROJaCiOA38gYeD96bTxkpkCOCTkC6SMhada3Ng2Z6+mbzcH1\nilRxoXtRKrCagGh89IirmSt/1KxE4UZCwaS03tbxhbKpH1a9D29PtVuDqvUCxa5K\n64DGjoQBLfeLT5ynAMUp0gFimwe90rBoYp0th1f8exJQKNzM4CTf6Jrw8eL3Y5Zz\nBhkMV+aNc5bEaTzS8U+S5HTQA4x6Sw9F+qRQu903IMUnf6/qlwMrCkrVqaKZUeIl\nZPRK1lhW1P5/vcazrNDywCIPSspaQvU5Nuppz636exPc7GnqUPE75zXH2jNUnu8X\nbE9pghhd1zZYxoiJaaDdlgsQ8Np+d9XnGd76hrefIcMKoRD+3KFHd9FPuUqvsjX0\n9ycyrE7/uoK4xly9debIeLx/224SNh8zZnmM9tDZ1Qw8G867NnrRYq84HvcHkQip\nA2PR1u1mjXBObKl/m/ocKQtuZluhKg==\n=tBNf\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e06457542b727befd67e731d7d5c1d6f59f9363\nparent 24b10ebda301548b8ff4b0c73fefc367ad5dc22b\nauthor Vasil Dimov <vd@FreeBSD.org> 1619423809 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1624282168 +0200\n\nstyle: remove () from assert in rpc_setban.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb719a08db173a753984a04534de6f148b87b17a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb719a08db173a753984a04534de6f148b87b17a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb719a08db173a753984a04534de6f148b87b17a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24b10ebda301548b8ff4b0c73fefc367ad5dc22b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24b10ebda301548b8ff4b0c73fefc367ad5dc22b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "36873f964b3e58cf829306bf7fb281c06836ba2d",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb719a08db173a753984a04534de6f148b87b17a/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb719a08db173a753984a04534de6f148b87b17a/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=bb719a08db173a753984a04534de6f148b87b17a",
        "patch": "@@ -22,7 +22,7 @@ def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         # Node 0 get banned by Node 1\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n@@ -36,39 +36,40 @@ def run_test(self):\n         self.restart_node(1, ['-whitelist=127.0.0.1'])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert('noban' in peerinfo['permissions'])\n+        assert \"noban\" in peerinfo[\"permissions\"]\n \n         # If we remove the ban, Node 0 should be able to reconnect even without noban permission\n         self.nodes[1].setban(\"127.0.0.1\", \"remove\")\n         self.restart_node(1, [])\n         self.connect_nodes(0, 1)\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n-        assert(not 'noban' in peerinfo['permissions'])\n+        assert not \"noban\" in peerinfo[\"permissions\"]\n \n         self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n         node = self.nodes[1]\n         tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n         ip_addr = \"1.2.3.4\"\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         node.setban(tor_addr, \"add\")\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         self.log.info(\"Test the ban list is preserved through restart\")\n \n         self.restart_node(1)\n-        assert(self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         node.setban(tor_addr, \"remove\")\n-        assert(not self.is_banned(self.nodes[1], tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(self.nodes[1], tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n \n         self.restart_node(1)\n-        assert(not self.is_banned(node, tor_addr))\n-        assert(not self.is_banned(node, ip_addr))\n+        assert not self.is_banned(node, tor_addr)\n+        assert not self.is_banned(node, ip_addr)\n+\n \n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  }
]