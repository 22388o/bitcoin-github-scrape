practicalswift,2017-11-20T18:09:35Z,"Any style changes should probably be kept consistent across the following files :-)\n\n```\nsrc/crypto/hmac_sha256.h\nsrc/crypto/hmac_sha512.h\nsrc/crypto/ripemd160.h\nsrc/crypto/sha1.h\nsrc/crypto/sha256.h\nsrc/crypto/sha512.h\nsrc/hash.h\n```",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-345780039,345780039,
jonasschnelli,2017-11-20T19:17:39Z,"Please read: https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#refactoring\n\nI don't like the magic numbers this PR tries to change, though I less like changing *some* of the magic values. Also the code is less readable afterwards (IMO).\n\nIt's like with code formatting. Lets just accept how it is and concentrate on new code.",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-345799001,345799001,
ldm5180,2017-11-21T01:54:06Z,"I intend to move this to a more compile-time and compiler-optimizer friendly generic implementation of all of the crypto algos. This is just step 1. I think most of this code can be eliminated through usage of templates.\n\nSince I am new, I am trying to adhere to the CONTRIBUTING.md guidelines. @jonasschnelli, can you point to which ones you want me to focus on more directly?",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-345891040,345891040,
sipa,2017-11-21T04:16:24Z,"I'm not convinced about the long term goal of eliminating code through templates. Cryptographic code like this is incredibly stable, so the usual reasons for doing refactoring like this (easier maintenance) don't really apply - it's likely possible to not ever touch it.\n\nHowever, as such all the changes here look fine to me. Not sure the `auto` variables are necessary, but moving to a more C++",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-345912084,345912084,
practicalswift,2017-11-21T08:42:52Z,"Concept ACK modulo @sipa's feedback and assuming that any changes performed are applied consistently across:\n\n```\nsrc/crypto/hmac_sha256.h\nsrc/crypto/hmac_sha512.h\nsrc/crypto/ripemd160.h\nsrc/crypto/sha1.h\nsrc/crypto/sha256.h\nsrc/crypto/sha512.h\nsrc/hash.h\n```",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-345955467,345955467,
fanquake,2017-11-21T23:37:38Z,"I agree with @sipa. This code (and the other algorithm implementations) are critically important, already very stable, and could probably exist ""as is"" for a very long time. \n\nRefactoring for the sake of refactoring or ""clean up"" is basically all risk, with seemingly very little potential reward. \n\nWhat there is the potential for is introducing subtle/obscure bugs. Amplified by the fact th",https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-346196507,346196507,
ldm5180,2017-11-22T14:19:31Z,I will re-write this an reopen when ready.,https://github.com/bitcoin/bitcoin/pull/11735#issuecomment-346363048,346363048,
laanwj,2017-11-21T07:57:15Z,"I'd prefer not to use 'auto' here, keeping integer signedness explicit makes it easier to reason about.",https://github.com/bitcoin/bitcoin/pull/11735#discussion_r152199125,152199125,src/crypto/hmac_sha256.cpp
