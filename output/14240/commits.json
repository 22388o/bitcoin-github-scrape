[
  {
    "sha": "fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThjN2UyYTMyMmYyOTdlZDJkNmQ0MWQ3MTYxMjVkNjAwYjUwYzRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-15T23:51:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-17T13:54:44Z"
      },
      "message": "[qa] Test inter-bucket privacy leakage",
      "tree": {
        "sha": "74bcf9d07c83f9f3093e5e1a2fccfce94f1bb80e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74bcf9d07c83f9f3093e5e1a2fccfce94f1bb80e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbn7IkAAoJEM4rdWl+aaVISasL/39cIg8/3oXEu2SV7jQX0MLP\nNvbiuf8IXe/t7qZV8j3ygXdS8Pm0wRecACJLAAeRjhiaUN5CnZeJe2+6GXcwO6Jp\nWqkGy+aKkVGV8Tuoh2vTsa4ReqI2jHdU4YWHsN+UR8kjjY3iiD17k4kTin6TM7eH\ncGcq+vmLKYfK9l5ZWyqb7J15zYCh2nG4T8B/yG5z+96a5SgWZMkIbf/53VVx5Ynk\n8JMJnFPOtKMRKJW0SIExIuPyEMMMsPkz2smVc1EPfeaWpHp6xuMLjnioMIvj8Ibt\nVM92ooFJRd+DuQYOuK+xIarBBeAlHW6gFa6TjEoi2AU0wNsnSDV3/RFCGhB0XTt+\n8CSMfCIJvNzErALj21Fo8aT6/R8rRvejqAQTFlbW/Ak5SCE2tgKOyxkhswy7Bd22\nL6hMCuDrbNnC7AehwYGvHEvznGrYJp+ahyOB3mXqZ7lPNTWZcb74pFfeKuw9oynp\nGzJq12DHN+HaN6KhK1aVMAxKtbm44fBPOPZMRlphtQ==\n=lKEE\n-----END PGP SIGNATURE-----",
        "payload": "tree 74bcf9d07c83f9f3093e5e1a2fccfce94f1bb80e\nparent c53e083a49291b611d278a8db24ff235c1202e43\nauthor MarcoFalke <falke.marco@gmail.com> 1537055480 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1537192484 -0400\n\n[qa] Test inter-bucket privacy leakage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c53e083a49291b611d278a8db24ff235c1202e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e083a49291b611d278a8db24ff235c1202e43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53e083a49291b611d278a8db24ff235c1202e43"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 144,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7cbf3f54b56e8871b7ba7d4732697b75fc9b355",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\n+\n+from test_framework.messages import msg_getdata, CInv\n+from test_framework.mininode import mininode_lock, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    wait_until,\n+)\n+\n+\n+class P2PLeakTxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        gen_node = self.nodes[0]  # The block and tx generating node\n+        gen_node.generate(1)\n+        self.sync_all()\n+\n+        inbound_peer = self.nodes[0].add_p2p_connection(P2PDataStore())  # An \"attacking\" inbound peer\n+        outbound_peer = self.nodes[1]  # Our outbound peer\n+\n+        # In an adversiarial setting we can generally assume that inbound peers\n+        # are more likely to spy on us than outbound peers. Thus, on average,\n+        # we announce transactions first to outbound peers, then to (all)\n+        # inbound peers. Inbound peers must not be able to request the\n+        # transaction they haven't yet received the announcement for it.\n+        #\n+        # With only one outbound peer, we expect that a tx is first announced\n+        # to (all) inbound peers (and thus present a potential leak) in 28.5% of\n+        # the cases.\n+        #\n+        # Probability( time_ann_inbound < time_ann_outbound )                 =\n+        # \u222b f_in(x)                           * F_out(x)                   dx =\n+        # \u222b (lambda_in * exp(-lambda_in * x)) * (1 - exp(-lambda_out * x)) dx =\n+        # 0.285714\n+        #\n+        # Where,\n+        # * f_in is the pdf of the exponential distribution for inbound peers,\n+        #   with lambda_in = 1 / INVENTORY_BROADCAST_INTERVAL = 1/5\n+        # * F_out is the cdf of the expon. distribuiton for outbound peers,\n+        #   with lambda_out = 1 / (INVENTORY_BROADCAST_INTERVAL >> 1) = 1/2\n+        #\n+        # Due to measurement delays, the actual monte-carlo leak is a bit\n+        # higher. Assume a total delay of 0.6 s (Includes network delays and\n+        # rpc delay to poll the raw mempool)\n+        #\n+        # Probability( time_ann_inbound < time_ann_outbound + 0.6 )           =\n+        # \u222b f_in(x)                           * F_out(x + 0.6)             dx =\n+        # \u222b (lambda_in * exp(-lambda_in * x)) * (1 - exp(-lambda_out * (x+.6))) dx =\n+        # 0.366485\n+        EXPECTED_MEASURED_LEAK = .366485\n+\n+        REPEATS = 100\n+        measured_leak = 0\n+        self.log.info('Start simulation for {} repeats'.format(REPEATS))\n+        for i in range(REPEATS):\n+            self.log.debug('Run {}/{}'.format(i, REPEATS))\n+            txid = gen_node.sendtoaddress(gen_node.getnewaddress(), 0.033)\n+            want_tx = msg_getdata()\n+            want_tx.inv.append(CInv(t=1, h=int(txid, 16)))\n+\n+            wait_until(lambda: txid in outbound_peer.getrawmempool(), lock=mininode_lock)\n+            inbound_peer.send_message(want_tx)\n+            inbound_peer.sync_with_ping()\n+\n+            if inbound_peer.last_message.get('notfound'):\n+                assert_equal(inbound_peer.last_message['notfound'].vec[0].hash, int(txid, 16))\n+                inbound_peer.last_message.pop('notfound')\n+            else:\n+                measured_leak += 1\n+\n+        measured_leak /= REPEATS\n+        self.log.info('Measured leak of {}'.format(measured_leak))\n+\n+        assert_greater_than(EXPECTED_MEASURED_LEAK, measured_leak)\n+\n+\n+if __name__ == '__main__':\n+    P2PLeakTxTest().main()"
      },
      {
        "sha": "549a7c019a703fb4c5e295dd1df01098bd909aeb",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
        "patch": "@@ -1160,6 +1160,26 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_mempool()\"\n \n+\n+class msg_notfound():\n+    command = b\"notfound\"\n+\n+    def __init__(self, vec=None):\n+        if vec is None:\n+            self.vec = []\n+        else:\n+            self.vec = vec\n+\n+    def deserialize(self, f):\n+        self.vec = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.vec)\n+\n+    def __repr__(self):\n+        return \"msg_notfound(vec=%s)\" % (repr(self.vec))\n+\n+\n class msg_sendheaders():\n     command = b\"sendheaders\"\n "
      },
      {
        "sha": "69edff5e5660fc48f9c3cfff2169bdfdb46eb206",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
        "patch": "@@ -21,7 +21,38 @@\n import sys\n import threading\n \n-from test_framework.messages import CBlockHeader, MIN_VERSION_SUPPORTED, msg_addr, msg_block, MSG_BLOCK, msg_blocktxn, msg_cmpctblock, msg_feefilter, msg_getaddr, msg_getblocks, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_mempool, msg_ping, msg_pong, msg_reject, msg_sendcmpct, msg_sendheaders, msg_tx, MSG_TX, MSG_TYPE_MASK, msg_verack, msg_version, NODE_NETWORK, NODE_WITNESS, sha256\n+from test_framework.messages import (\n+    CBlockHeader,\n+    MIN_VERSION_SUPPORTED,\n+    msg_addr,\n+    msg_block,\n+    MSG_BLOCK,\n+    msg_blocktxn,\n+    msg_cmpctblock,\n+    msg_feefilter,\n+    msg_getaddr,\n+    msg_getblocks,\n+    msg_getblocktxn,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_mempool,\n+    msg_notfound,\n+    msg_ping,\n+    msg_pong,\n+    msg_reject,\n+    msg_sendcmpct,\n+    msg_sendheaders,\n+    msg_tx,\n+    MSG_TX,\n+    MSG_TYPE_MASK,\n+    msg_verack,\n+    msg_version,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    sha256,\n+)\n from test_framework.util import wait_until\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n@@ -40,6 +71,7 @@\n     b\"headers\": msg_headers,\n     b\"inv\": msg_inv,\n     b\"mempool\": msg_mempool,\n+    b\"notfound\": msg_notfound,\n     b\"ping\": msg_ping,\n     b\"pong\": msg_pong,\n     b\"reject\": msg_reject,\n@@ -295,6 +327,7 @@ def on_getdata(self, message): pass\n     def on_getheaders(self, message): pass\n     def on_headers(self, message): pass\n     def on_mempool(self, message): pass\n+    def on_notfound(self, message): pass\n     def on_pong(self, message): pass\n     def on_reject(self, message): pass\n     def on_sendcmpct(self, message): pass"
      },
      {
        "sha": "5a096c0aec8974d9b52b6fb69ca39f402aa758ed",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8c7e2a322f297ed2d6d41d716125d600b50c4d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa8c7e2a322f297ed2d6d41d716125d600b50c4d",
        "patch": "@@ -122,6 +122,7 @@\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n+    'p2p_leak_tx.py',\n     'rpc_zmq.py',\n     'rpc_signmessage.py',\n     'feature_nulldummy.py',"
      }
    ]
  }
]