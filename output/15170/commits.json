[
  {
    "sha": "cbd9091ed5a76bb2e1e57cd0d8db035c15529341",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmQ5MDkxZWQ1YTc2YmIyZTFlNTdjZDBkOGRiMDM1YzE1NTI5MzQx",
    "commit": {
      "author": {
        "name": "Vidar Holen",
        "email": "spam@vidarholen.net",
        "date": "2019-01-15T02:55:20Z"
      },
      "committer": {
        "name": "Vidar Holen",
        "email": "spam@vidarholen.net",
        "date": "2019-01-15T02:58:57Z"
      },
      "message": "refactor/lint: Add ignored suggestions to an array\n\nThis avoids duplicating the codes between command and comments.",
      "tree": {
        "sha": "eda4c8c1e589f76c08238862adfc4287f2e66293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eda4c8c1e589f76c08238862adfc4287f2e66293"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbd9091ed5a76bb2e1e57cd0d8db035c15529341",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd9091ed5a76bb2e1e57cd0d8db035c15529341",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd9091ed5a76bb2e1e57cd0d8db035c15529341",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd9091ed5a76bb2e1e57cd0d8db035c15529341/comments",
    "author": {
      "login": "koalaman",
      "id": 2818758,
      "node_id": "MDQ6VXNlcjI4MTg3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2818758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koalaman",
      "html_url": "https://github.com/koalaman",
      "followers_url": "https://api.github.com/users/koalaman/followers",
      "following_url": "https://api.github.com/users/koalaman/following{/other_user}",
      "gists_url": "https://api.github.com/users/koalaman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koalaman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koalaman/subscriptions",
      "organizations_url": "https://api.github.com/users/koalaman/orgs",
      "repos_url": "https://api.github.com/users/koalaman/repos",
      "events_url": "https://api.github.com/users/koalaman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koalaman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "koalaman",
      "id": 2818758,
      "node_id": "MDQ6VXNlcjI4MTg3NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2818758?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koalaman",
      "html_url": "https://github.com/koalaman",
      "followers_url": "https://api.github.com/users/koalaman/followers",
      "following_url": "https://api.github.com/users/koalaman/following{/other_user}",
      "gists_url": "https://api.github.com/users/koalaman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koalaman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koalaman/subscriptions",
      "organizations_url": "https://api.github.com/users/koalaman/orgs",
      "repos_url": "https://api.github.com/users/koalaman/repos",
      "events_url": "https://api.github.com/users/koalaman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koalaman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf0c67b62c2037dc9e70ea84ffee3b205a9b1bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0c67b62c2037dc9e70ea84ffee3b205a9b1bef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0c67b62c2037dc9e70ea84ffee3b205a9b1bef"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 25,
      "deletions": 23
    },
    "files": [
      {
        "sha": "cf8a37c3a108f4f244a456a0c12024c9169a1d66",
        "filename": "test/lint/lint-shell.sh",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbd9091ed5a76bb2e1e57cd0d8db035c15529341/test/lint/lint-shell.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbd9091ed5a76bb2e1e57cd0d8db035c15529341/test/lint/lint-shell.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell.sh?ref=cbd9091ed5a76bb2e1e57cd0d8db035c15529341",
        "patch": "@@ -22,27 +22,29 @@ if ! command -v shellcheck > /dev/null; then\n fi\n \n # Disabled warnings:\n-# SC1087: Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).\n-# SC1117: Backslash is literal in \"\\.\". Prefer explicit escaping: \"\\\\.\".\n-# SC2001: See if you can use ${variable//search/replace} instead.\n-# SC2004: $/${} is unnecessary on arithmetic variables.\n-# SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.\n-# SC2006: Use $(..) instead of legacy `..`.\n-# SC2016: Expressions don't expand in single quotes, use double quotes for that.\n-# SC2028: echo won't expand escape sequences. Consider printf.\n-# SC2046: Quote this to prevent word splitting.\n-# SC2048: Use \"$@\" (with quotes) to prevent whitespace problems.\n-# SC2066: Since you double quoted this, it will not word split, and the loop will only run once.\n-# SC2086: Double quote to prevent globbing and word splitting.\n-# SC2116: Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.\n-# SC2148: Tips depend on target shell and yours is unknown. Add a shebang.\n-# SC2162: read without -r will mangle backslashes.\n-# SC2166: Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.\n-# SC2166: Prefer [ p ] || [ q ] as [ p -o q ] is not well defined.\n-# SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.\n-# SC2206: Quote to prevent word splitting, or split robustly with mapfile or read -a.\n-# SC2207: Prefer mapfile or read -a to split command output (or quote to avoid splitting).\n-# SC2230: which is non-standard. Use builtin 'command -v' instead.\n-# SC2236: Don't force -n instead of ! -z.\n-shellcheck -e SC1087,SC1117,SC2001,SC2004,SC2005,SC2006,SC2016,SC2028,SC2046,SC2048,SC2066,SC2086,SC2116,SC2148,SC2162,SC2166,SC2181,SC2206,SC2207,SC2230,SC2236 \\\n+disabled=(\n+    SC1087 # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).\n+    SC1117 # Backslash is literal in \"\\.\". Prefer explicit escaping: \"\\\\.\".\n+    SC2001 # See if you can use ${variable//search/replace} instead.\n+    SC2004 # $/${} is unnecessary on arithmetic variables.\n+    SC2005 # Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.\n+    SC2006 # Use $(..) instead of legacy `..`.\n+    SC2016 # Expressions don't expand in single quotes, use double quotes for that.\n+    SC2028 # echo won't expand escape sequences. Consider printf.\n+    SC2046 # Quote this to prevent word splitting.\n+    SC2048 # Use \"$@\" (with quotes) to prevent whitespace problems.\n+    SC2066 # Since you double quoted this, it will not word split, and the loop will only run once.\n+    SC2086 # Double quote to prevent globbing and word splitting.\n+    SC2116 # Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.\n+    SC2148 # Tips depend on target shell and yours is unknown. Add a shebang.\n+    SC2162 # read without -r will mangle backslashes.\n+    SC2166 # Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.\n+    SC2166 # Prefer [ p ] || [ q ] as [ p -o q ] is not well defined.\n+    SC2181 # Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.\n+    SC2206 # Quote to prevent word splitting, or split robustly with mapfile or read -a.\n+    SC2207 # Prefer mapfile or read -a to split command output (or quote to avoid splitting).\n+    SC2230 # which is non-standard. Use builtin 'command -v' instead.\n+    SC2236 # Don't force -n instead of ! -z.\n+)\n+shellcheck -e \"$(IFS=\",\"; echo \"${disabled[*]}\")\" \\\n     $(git ls-files -- \"*.sh\" | grep -vE 'src/(secp256k1|univalue)/')"
      }
    ]
  }
]