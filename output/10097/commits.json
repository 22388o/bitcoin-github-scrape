[
  {
    "sha": "6803e09e6eeb2dbc820bb1025475a50a4352e30d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODAzZTA5ZTZlZWIyZGJjODIwYmIxMDI1NDc1YTUwYTQzNTJlMzBk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T22:36:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-20T15:25:33Z"
      },
      "message": "Move zmq test skipping logic into individual test case.\n\nThis commit uses the new skip test funcationality added in\n232b6665bc3e5b134821dc7584968fb439fd5f44 to skip the zmq tests if the\npython zmq module is not available or if bitcoind has been built without\nzmq support.\n\nThis removes the zmq-specific logic from test_runner.py. In general it's\nbetter if test_runner.py has no knowledge of special cases for\nindividual tests and is a general purpose test runner.",
      "tree": {
        "sha": "fd0c65c5f69e4d85ec4a247abefa07aef3b91294",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd0c65c5f69e4d85ec4a247abefa07aef3b91294"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6803e09e6eeb2dbc820bb1025475a50a4352e30d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6803e09e6eeb2dbc820bb1025475a50a4352e30d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6803e09e6eeb2dbc820bb1025475a50a4352e30d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6803e09e6eeb2dbc820bb1025475a50a4352e30d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/987a6c09562e1e1e9d6623b999ae9de268490e4b"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "44c049dca886a4c22d8e93f39d500216efbb65bc",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 21,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6803e09e6eeb2dbc820bb1025475a50a4352e30d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6803e09e6eeb2dbc820bb1025475a50a4352e30d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6803e09e6eeb2dbc820bb1025475a50a4352e30d",
        "patch": "@@ -77,6 +77,7 @@\n     'rawtransactions.py',\n     'reindex.py',\n     # vv Tests less than 30s vv\n+    \"zmq_test.py\",\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',\n@@ -110,11 +111,6 @@\n     'p2p-leaktests.py',\n ]\n \n-ZMQ_SCRIPTS = [\n-    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n-    # call test_runner.py with -nozmq to explicitly exclude these tests.\n-    'zmq_test.py']\n-\n EXTENDED_SCRIPTS = [\n     # These tests are not run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n@@ -149,7 +145,7 @@\n ]\n \n # Place EXTENDED_SCRIPTS first since it has the 3 longest running tests\n-ALL_SCRIPTS = EXTENDED_SCRIPTS + BASE_SCRIPTS + ZMQ_SCRIPTS\n+ALL_SCRIPTS = EXTENDED_SCRIPTS + BASE_SCRIPTS\n \n NON_SCRIPTS = [\n     # These are python files that live in the functional tests directory, but are not test scripts.\n@@ -174,7 +170,6 @@ def main():\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n     parser.add_argument('--keepcache', '-k', action='store_true', help='the default behavior is to flush the cache directory on startup. --keepcache retains the cache from the previous testrun.')\n     parser.add_argument('--quiet', '-q', action='store_true', help='only print results summary and failure logs')\n-    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n     args, unknown_args = parser.parse_known_args()\n \n     # Create a set to store arguments and create the passon string\n@@ -192,7 +187,6 @@ def main():\n     enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n     enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n-    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n         # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n@@ -205,27 +199,16 @@ def main():\n         print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n         sys.exit(0)\n \n-    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-    if enable_zmq:\n-        try:\n-            import zmq\n-        except ImportError:\n-            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n-                  \"To run zmq tests, see dependency info in /test/README.md.\")\n-            raise\n-\n     # Build list of tests\n     if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n     else:\n-        # No individual tests have been specified. Run base tests, and\n-        # optionally ZMQ tests and extended tests.\n+        # No individual tests have been specified.\n+        # Run all base tests, and optionally run extended tests.\n         test_list = BASE_SCRIPTS\n-        if enable_zmq:\n-            test_list += ZMQ_SCRIPTS\n         if args.extended:\n             # place the EXTENDED_SCRIPTS first since the three longest ones\n             # are there and the list is shorter"
      },
      {
        "sha": "891b609ffa8320698b6ac30698e10534faceaae5",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6803e09e6eeb2dbc820bb1025475a50a4352e30d/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6803e09e6eeb2dbc820bb1025475a50a4352e30d/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=6803e09e6eeb2dbc820bb1025475a50a4352e30d",
        "patch": "@@ -3,11 +3,13 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the ZMQ API.\"\"\"\n+import configparser\n+import os\n+import struct\n+import sys\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import zmq\n-import struct\n \n class ZMQTest (BitcoinTestFramework):\n \n@@ -18,6 +20,21 @@ def __init__(self):\n     port = 28332\n \n     def setup_nodes(self):\n+        # Try to import python3-zmq. Skip this test if the import fails.\n+        try:\n+            import zmq\n+        except ImportError:\n+            self.log.warning(\"python3-zmq module not available. Skipping zmq tests!\")\n+            sys.exit(self.TEST_EXIT_SKIPPED)\n+\n+        # Check that bitcoin has been built with ZMQ enabled\n+        config = configparser.ConfigParser()\n+        config.read_file(open(os.path.dirname(__file__) + \"/config.ini\"))\n+\n+        if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n+            self.log.warning(\"bitcoind has not been built with zmq enabled. Skipping zmq tests!\")\n+            sys.exit(self.TEST_EXIT_SKIPPED)\n+\n         self.zmqContext = zmq.Context()\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")"
      }
    ]
  }
]