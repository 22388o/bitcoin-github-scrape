gavinandresen,2011-05-07T13:58:49Z,How did you test that this does the right thing through a block split/reorg?\n,https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1115449,1115449,
cdhowie,2011-05-07T17:35:06Z,"I didn't, since I'm not sure how I could create such a situation with the amount of computing power I have.  I believe it will do the right thing since I've read the CBlockLocator sources.\n",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1115931,1115931,
gavinandresen,2011-05-07T18:41:07Z,"You should be able to pretty easily simulate block splits by setting up a small ""testnet-in-a-box"" network -- see https://sourceforge.net/projects/bitcoin/files/Bitcoin/testnet-in-a-box/\n\nProcess would be something like:\n\nSend a transaction or three while generating on testnet-in-a-box.  Verify that the transactions are confirmed.  Then shutdown that testnet-in-a-box and start a new one.\n\nGe",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1116108,1116108,
sipa,2011-05-08T12:13:21Z,"CMerkleTx's (and by extension CWalletTx's) support looking up in which block they are (see CMerkleTx::GetDepthInMainChain(CBlockIndex\* &)). I believe it is better to loop over all wallet transactions, and filter them by looking up where they are in the main chain, than to loop over the whole block chain (loading it from disk), and then finding wallet transactions that match it. The block chain wo",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1118931,1118931,
cdhowie,2011-05-25T18:59:25Z,"Gavin, I did the test today and the command does do what I expect.  This was after modifying the command's implementation per sipa's suggestion.\n",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1237464,1237464,
brandonjank,2011-06-03T21:01:01Z,"Patched 322rc4 with this the other day. Seems to be working, great feature. Merge :D\n",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1299420,1299420,
pixelglow,2011-06-28T03:35:56Z,"Might be useful to have block id against each txn, not just the last block id. For example, perhaps I'm searching for all txn's with confirmations > n. If I find some txn's with confirmations <= n, I have to note them down in the sync'ed database and recheck them later. But if we got block id's back for the txn's, we could restart the scan somewhere else other than the last block to look for these",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1452128,1452128,
cdhowie,2011-06-28T19:40:12Z,"@pixelglow: I had that in at some point and Gavin asked that I remove it.  :)  But it's a one line change to add it.\n\nThe transactions should be listed sorted by block.  So in terms of the time that the blocks were created, you can infer that from the time the transaction happened.  If all you care about is which blocks came before which blocks, then you don't even have to look at the transactio",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1458399,1458399,
pixelglow,2011-06-28T23:58:59Z,"I suppose there are two ways of adding block id's for txn's. You could tag each txn with the block id e.g.[ { txid: 1, block: abc }, {txid: 2, block: abc} ... ] but since there are multiple txn per block and you are already sorted by block order you can do a more normalized { block: abc; txns: [ { txid: 1}, {txid : 2} ...] }. The feature in general would make it so convenient to pick an arbitrary ",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1460011,1460011,
gavinandresen,2011-06-29T14:02:26Z,"Block chain re-orgs change what blocks a given transaction is in, which is why I'm dead-set against putting them in transaction information.  Transactions already have confirmations, which tells you how far back in the best-block-chain to look for the block that contains that transaction.\n",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1467210,1467210,
cdhowie,2011-06-29T17:32:52Z,"I'm thinking that a ""minimum confirmations"" parameter would solve this nicely.  If you only want transactions with six confirmations or more, you call ""listsinceblock (block-id) 6"" and all of the recent transactions with 6+ confirmations would be reported.  The ""lastblock"" property on the result object would then contain the hash of the sixth most recent block instead of the most recent.  This way",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1468848,1468848,
pixelglow,2011-06-29T23:20:56Z,"@cdhowie that is an excellent idea and solves exactly the issue I have with confirmations. I can't see any other reason why someone would need to look at earlier blocks than the last, other than checking confirmations. (But then again, I'm a newbie when it comes to bitcoin :-) ).\n",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1471413,1471413,
cdhowie,2011-07-06T20:25:11Z,"I've implemented the requested change; the second parameter specifies the depth of the block you want to obtain as the ""lastblock"" return property.  The default of 1 will return the latest block ID, while 2 will return the second-latest block ID, and so on.\n\nThe command now outputs transactions with zero confirmations in addition to those in the newer blocks so that applications can act on them ",https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1514952,1514952,
pixelglow,2011-07-18T07:05:48Z,I've integrated this into my bitcoin exchange (currently only as a JSON API to the backend) and it works quite well in replaying transactions into the PostgreSQL backend. Thanks. Can't wait to see this in the mainline.\n\nhttp://forum.bitcoin.org/index.php?topic=29057.0\n,https://github.com/bitcoin/bitcoin/pull/199#issuecomment-1593253,1593253,
