laanwj,2017-05-15T05:03:36Z,"> After thinking a bit on how to perform this task, I concluded that the easiest way to do it is to check the modification time of the bitcoind.pid file. \n\nThere is no need to look at the timestamp of any files - the server could simply remember its own startup timestamp and use that as a reference. This would work just as well on windows.\n",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301376969,301376969,
rvelhote,2017-05-15T07:48:56Z,"Thank you for replying Wladimir. You are correct of course. Checking the PID file was the most simple and with the least changes to the codebase I could think of - while still being useful (I am not familiar with the Bitcoin core and have not worked with C++ since 2010).\n\nSo, if you think this command is useful for inclusion in the core, I could work on improving it and then squash the commits",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301401587,301401587,
jonasschnelli,2017-05-15T07:50:44Z,"It seems to be useful.\nConcept ACK.\n\nAgree with @laanwj. Just set a variable during startup with `GetTime()` (now) and calculate the delta to ""`now()`"" when someone want's to know the current uptime.",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301402044,301402044,
paveljanik,2017-05-15T09:00:10Z,"Concept ACK\n\nThe other way could be adding starttime to `getinfo` RPC. But I prefer your solution, separate simple approach, new RPC. Please also add a test case for this.\n",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301417207,301417207,
laanwj,2017-05-15T10:40:12Z,"> The other way could be adding starttime to getinfo RPC. But I prefer your solution, separate simple approach, new RPC. Please also add a test case for this.\n\nA gentle reminder that `getinfo` should not be extended, see https://github.com/bitcoin/bitcoin/blob/master/src/rpc/misc.cpp#L34:\n```c++\n/**\n * @note Do not add or change anything in the information returned by this\n * method. `",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301439545,301439545,
achow101,2017-05-15T15:24:18Z,"There's already a variable in the GUI for getting the startup time: https://github.com/bitcoin/bitcoin/blob/86ea3c2ff247bb2ba0fb50013c8ecdbaf8a9fe8f/src/qt/clientmodel.cpp#L29\n\nYou could probably just move it so that it can be used for both the GUI and for this RPC call.",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301509533,301509533,
rvelhote,2017-05-16T07:55:49Z,"Thank you for your feedback. I went ahead and made some modifications according to your suggestions.\n\nI have pushed a new commit that removes `nClientStartupTime` from being specific to the QT interface and moved it to `util.h` where it can be used by both the QT interface and the RPC server.\n\nI called it `nStartupTime` instead of `nClientStartupTime` because now it related to both the cli",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301704949,301704949,
rvelhote,2017-05-16T23:24:13Z,"I have made a new commit with some changes suggested by Pavel.\n\nWhile searching for examples of documentation I noticed `getconnectioncount` which only returns a single value (the node count). Previously the `uptime` command was returning an object with an `uptime` key so I followed the example of `getconnectioncount` and changed the return value to a single integer that represents the amount ",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-301942431,301942431,
rvelhote,2017-05-17T21:58:12Z,"I've added a functional test to check for the uptime value. In this test I've placed a `time.sleep` before calling the `uptime` command. The test then checks if the current uptime value reported by the RPC command is greater or equal than the value used in `time.sleep`.\n\nAs I've noted in the test comment:\n> Depending on how fast the setup executes, the RPC server starts and this test\n> exe",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-302243286,302243286,
rvelhote,2017-05-18T19:33:54Z,"@paveljanik I made the change to `setmocktime` in the test and ~~held off on the name change of the test file until I get your final feedback after my reply to your comment.~~ renamed the testcase file for the `uptime` command.\n\nLet me know when you think everything is in order and I will go ahead and squash the commits. Thank you for your help (and patience) in reviewing everything :)",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-302518302,302518302,
paveljanik,2017-05-26T09:29:29Z,"OK, let's squash please. The travis failure is unrelated (actually fixed in #10429).",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-304236375,304236375,
rvelhote,2017-06-19T08:47:56Z,"@jnewbery @paveljanik When you have the opportunity, please let me know if you have any further feedback on this PR? The TravisCI build is failing but it's because of #10429 and I have not updated my branch since I started the PR. Thank you.",https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-309377674,309377674,
paveljanik,2017-06-19T11:12:35Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-309409903,309409903,
laanwj,2017-06-27T09:34:13Z,Tested ACK c074752,https://github.com/bitcoin/bitcoin/pull/10400#issuecomment-311305940,311305940,
paveljanik,2017-05-16T10:25:33Z,// Application startup time (used for uptime calculation),https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116707000,116707000,src/util.h
paveljanik,2017-05-16T10:30:03Z,Do we need this at all?,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116707831,116707831,src/rpc/server.cpp
paveljanik,2017-05-16T10:35:11Z,Started in the future!? ;-),https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116708692,116708692,src/rpc/server.cpp
paveljanik,2017-05-16T10:36:25Z,Let's document output as Result: as other RPCs. Add unit specification (seconds).,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116708918,116708918,src/rpc/server.cpp
rvelhote,2017-05-16T10:44:42Z,I imagined that for some weird reason the clock would change to before the start and the user would get a negative value. Maybe I'm over-thinking this? ;),https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116710350,116710350,src/rpc/server.cpp
paveljanik,2017-05-16T10:52:48Z,"Yup, I do not have a problem with this. Just return negative value and do not crash.\n",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r116711773,116711773,src/rpc/server.cpp
paveljanik,2017-05-18T06:23:29Z,You can use `setmocktime` to not really sleep/slow down tests for 6 seconds.,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r117168589,117168589,test/functional/server.py
paveljanik,2017-05-18T06:24:14Z,"Please use the name `uptime.py` or so, not generic `server.py`.\n",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r117168665,117168665,test/functional/test_runner.py
rvelhote,2017-05-18T07:50:29Z,I took as an example the `net.py` test file that referred to tests in `rpc/net.cpp`. Since the uptime command is in the `server.cpp` - although there are no tests for this file - I chose to create a `server.py` test file. Do you still think it's best to use `uptime.py`?,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r117180467,117180467,test/functional/test_runner.py
rvelhote,2017-05-18T07:50:35Z,Arghh I didn't know about this `setmocktime`. Didn't think of searching either. Will get to it.,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r117180499,117180499,test/functional/server.py
paveljanik,2017-05-18T20:05:27Z,"@rvelhote Yup, OK.",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r117340852,117340852,test/functional/test_runner.py
jnewbery,2017-06-08T18:21:27Z,I think it makes more sense for this RPC to live in src/rpc/misc.cpp. I think server.cpp should be kept as lightweight and generic as possible.,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r120962463,120962463,src/rpc/server.cpp
jnewbery,2017-06-08T18:25:32Z,"I'd prefer not to add a whole extra test for just this one command. I think it'd be better to move the uptime rpc into misc.cpp and then combine `signmessages.py`, `rpcnamedargs.py` and this new test into a new test file names `misc.py`.\n\nHowever, that tidying can definitely be done in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r120963495,120963495,test/functional/uptime.py
jnewbery,2017-06-08T18:26:38Z,"nit: I don't really like `ttt` here. I think it's fine just to have:\n\n`                        ""\""time\""        (numeric) The number of seconds that the Bitcoin server has been running\n""`",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r120963777,120963777,src/rpc/server.cpp
jnewbery,2017-06-08T19:06:35Z,"This shouldn't be static (a static variable in a header file means that any .cpp file that includes the header will have its own local variable called `nStartupTime`).\n\nInstead, I think you should define this variable in util.cpp and then have an extern declaration here. See ` BITCOIN_CONF_FILENAME` below for example.\n\nI don't know if you just copied the `DEFAULT_LOG...` constants below, b",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r120973402,120973402,src/util.h
rvelhote,2017-06-08T21:26:22Z,"Thank you very much for your feedback John.\n\nI placed it on `src/rpc/server.php` because the command was information related to the server rather than a utility command (although it can certainly be considered an utility command). That is my only argument for using `server.cpp`. Maybe let's wait for other people's opinion on this?",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121002856,121002856,src/rpc/server.cpp
rvelhote,2017-06-08T21:26:26Z,I used `ttt` because I saw it referenced in other commands for usage with time related values. For example in `getpeerinfo` you have `conntime` for a timestamp and also `timeoffset` for a time-based value in seconds. I think `ttt` will keep it consistent with other commands.,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121002865,121002865,src/rpc/server.cpp
rvelhote,2017-06-08T21:26:30Z,"The `DEFAULT_LOG` constants are [already in master](https://github.com/bitcoin/bitcoin/blob/master/src/util.h#L33). Might be something to improve then.\n\nAlso, I don't know if you noticed, this variable was [moved](https://github.com/bitcoin/bitcoin/blob/master/src/qt/clientmodel.cpp#L29) from `src/qt/clientmodel.cpp` to a more global area so that it can be reused by both the server and the QT ",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121002879,121002879,src/util.h
jnewbery,2017-06-08T21:44:13Z,"> Maybe let's wait for other people's opinion on this?\n\ncertainly. Just my opinion that this should live in misc.cpp. I'm happy to defer to the consensus opinion.",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121006426,121006426,src/rpc/server.cpp
jnewbery,2017-06-08T21:45:04Z,"sure. Again, just my personal preference. `ttt` is fine.",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121006629,121006629,src/rpc/server.cpp
jnewbery,2017-06-08T21:50:07Z,"Yes, sorry I wasn't clear - I didn't expect you to change the DEFAULT_LOG constants. I do however think you need to move the nStartupTime definition to avoid the following build warnings:\n\n```\nIn file included from addrman.h:14:0,\n                 from addrdb.cpp:8:\nutil.h:33:22: warning: ‘nStartupTime’ defined but not used [-Wunused-variable]\n static const int64_t nStartupTime = GetTi",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121007556,121007556,src/util.h
rvelhote,2017-06-08T22:20:24Z,"No problem John, I understood what you meant :) When I mentioned I would make the change I was referring to moving `nStartupTime` to `util.cpp`. I pushed a new commit with this change.",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r121012560,121012560,src/util.h
laanwj,2017-06-19T14:04:09Z,Please add a `GetStartupTime` function instead of exporting this variable.,https://github.com/bitcoin/bitcoin/pull/10400#discussion_r122715489,122715489,src/util.h
laanwj,2017-06-19T14:06:07Z,"I understand both sides so don't have a strong opinion. We want to have multiple JSON-RPC endpoints at some point, so the class should be reusable without adding a lot of clutter, but it seems harmless if they all export `uptime`.\n\nHowever: `server.cpp` should be independent of bitcoin, so if you plan on keeping it there, please remove the explicit reference to Bitcoin below in the documentati",https://github.com/bitcoin/bitcoin/pull/10400#discussion_r122716110,122716110,src/rpc/server.cpp
