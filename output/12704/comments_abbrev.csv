promag,2018-03-16T07:39:37Z,Have you measured performance improvement?,https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373629165,373629165,
bitkevin,2018-03-16T08:09:46Z,"> Have you measured performance improvement?\n\nPerformance improvement is about 40%. 1,000,000 rounds, it's about `450ms` vs `250ms`.\n\n```\nuint64_t getCurrentTime() {\n  struct timeval tv;\n  gettimeofday(&tv, NULL);\n  return tv.tv_sec * 1000 + tv.tv_usec / 1000;\n}\n\nconst std::string b58Str(""3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy"");\nsize_t len = b58Str.length();\n\nuint64_t cnt;",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373635705,373635705,
laanwj,2018-03-16T10:36:06Z,"Concept ACK. Seems very straightforward (haven't checked the table yet, though).\n\n> Performance improvement is about 40%. 1,000,000 rounds, it's about 450ms vs 250ms.\n\nNice. Though here you're not benchmarking the entire `DecodeBase58` function, but the specific part that you sped up, so that will give somewhat distored results.\n\nFWIW there's a benchmark for base58 in `src/bench` - it'",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373673350,373673350,
promag,2018-03-17T09:45:42Z,Kicked travis due to timeout.,https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373907704,373907704,
donaloconnor,2018-03-17T12:30:51Z,"utACK. Your test in comment 0 threw me off because it only has 128 elements.\n\nI think we need tests also submitted in this to test all values 0-255.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373916601,373916601,
MarcoFalke,2018-03-17T14:41:29Z,Would you mind removing the test in comment 0 and adding it to the unit test suite?,https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373925091,373925091,
sipa,2018-03-17T18:36:44Z,"I benchmarked this on my desktop system: a full address decode goes from 1.50 us to 1.29 us (including checksum check).\n\nI'm not convinced this is worth it.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-373942681,373942681,
randolf,2018-03-19T03:54:40Z,"@sipa One use case I can think of immediately is that Vanity Address Generators can benefit from this performance increase because they repeatedly use the Base58-encoded addresses in attempting to match the desired string(s).\n\nGenerally I also value speed optimizations, even in normal application use, and I don't regard the increased size of the resulting binary to be significant enough to war",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374094151,374094151,
promag,2018-03-21T00:36:42Z,"utACK 5d71e4d, please squash.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374803877,374803877,
sipa,2018-03-21T00:58:47Z,"utACK, needs squash.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374807074,374807074,
eklitzke,2018-03-21T01:13:43Z,This is good for a 20% speedup for me with GCC 7.3 (median goes from 8.70969e-07 to 7.00866e-07). ACK once squashed.,https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374809146,374809146,
JeremyRubin,2018-03-21T04:08:18Z,"I'd like to see a comparison with one or two other methods of doing a table lookup to make sure this is optimal.\n\nFor instance\n\n```c++\nswitch(ch) {\n  case '1': \n    carry = 0;\n    break;\n  // ....\n  case 'z':\n    carry = 57;\n    break;\n  default:\n    return false;\n}\n```\nAdditionally you can try some outputs from gperf https://www.gnu.org/software/gperf/\n\n",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374829451,374829451,
eklitzke,2018-03-21T04:36:07Z,"I don't think you can get any faster than this approach, which is a flat lookup table that maps ints to ints (without any hashing).\n\nThe typical use case of gperf is for something kind of different: you'd provide it to a tokenizer where you have a grammar of long human readable strings, and you want to hash all of the tokens in the grammar to small ints without collisions.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374832184,374832184,
sipa,2018-03-21T05:08:51Z,"Stop wasting time on discussing the performance. This does not matter. Decoding an address could take 50 us and I don't think anyone would notice.\n\nIf the resulting code looks better, go for it. Otherwise, don't.\n\n-0",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374835228,374835228,
JeremyRubin,2018-03-21T05:18:31Z,"I have some notes on why some alternatives that would be faster, but as @sipa notes, there are bigger fish to fry.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-374836205,374836205,
laanwj,2018-03-22T08:58:17Z,"> If the resulting code looks better, go for it. Otherwise, don't.\n\nYes, I do prefer the code like this, because it's more consistent with how we handle base32 and hex for ex. So utACK bcab47b. Agree that this is a dead end in regard to performance, if you are interested in performance please review @eklitzke's work he's doing great things.",https://github.com/bitcoin/bitcoin/pull/12704#issuecomment-375223715,375223715,
ken2812221,2018-03-16T06:33:29Z,Should you check the character `*psz` is less than 128?,https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175006888,175006888,src/base58.cpp
bitkevin,2018-03-16T07:40:51Z,"Oops...I was thought size of `mapBase58` is 256, thanks",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175015019,175015019,src/base58.cpp
laanwj,2018-03-16T10:42:17Z,"Just make the mapBase58 array 256 bytes large, and you don't need the range check.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175051867,175051867,src/base58.cpp
promag,2018-03-16T14:48:39Z,IMO just leave this as a comment or make it `static_assert`?,https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175113304,175113304,src/base58.cpp
promag,2018-03-16T15:28:18Z,"Fixed, as per @laanwj suggestion `mapBase58` has 256 elements.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175126458,175126458,src/base58.cpp
MarcoFalke,2018-03-17T14:44:18Z,"With c++11 it should be easy to make it a static_assert.\n\n```diff\n--- a/src/base58.cpp\n+++ b/src/base58.cpp\n@@ -20,7 +20,7 @@\n \n /** All alphanumeric characters except for ""0"", ""I"", ""O"", and ""l"" */\n static const char* pszBase58 = ""123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"";\n-static const int8_t mapBase58[] = {\n+constexpr std::array<int8_t, 256> mapBase58{\n   ",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175260050,175260050,src/base58.cpp
laanwj,2018-03-19T08:21:10Z,A run-time assertion is certainly overkill here.,https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175355958,175355958,src/base58.cpp
laanwj,2018-03-19T08:22:10Z,"If you make this\n```\nstatic const int8_t mapBase58[256] = {\n```\nThat's pretty much a static assertion that the size will be 256.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175356134,175356134,src/base58.cpp
dcousens,2018-03-19T15:46:29Z,The `static_assert` is pointless now? Maybe?,https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175483711,175483711,src/base58.cpp
donaloconnor,2018-03-19T15:56:33Z,"missing \n`#include <array>`\n?",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175487660,175487660,src/base58.cpp
bitkevin,2018-03-19T16:22:28Z,"Just in case, after all `static_assert()` is no harm.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175496508,175496508,src/base58.cpp
bitkevin,2018-03-19T16:23:30Z,"sorry, I don't familiar with c++11, so just change it  back to old school style.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175496899,175496899,src/base58.cpp
dcousens,2018-03-20T00:30:41Z,"IMHO,  the `.size()` method was worth the import... but anyway.",https://github.com/bitcoin/bitcoin/pull/12704#discussion_r175626510,175626510,src/base58.cpp
