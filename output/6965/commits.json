[
  {
    "sha": "77f1f59d12b8ea097e8ccba83bd329011817bdf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2YxZjU5ZDEyYjhlYTA5N2U4Y2NiYTgzYmQzMjkwMTE4MTdiZGY4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-11-06T23:12:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-11-06T23:21:14Z"
      },
      "message": "Benchmark sanity checks and fork checks in ConnectBlock",
      "tree": {
        "sha": "3b3077d2a8b2ae28a756b75739f1f58d3eba3854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b3077d2a8b2ae28a756b75739f1f58d3eba3854"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77f1f59d12b8ea097e8ccba83bd329011817bdf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77f1f59d12b8ea097e8ccba83bd329011817bdf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77f1f59d12b8ea097e8ccba83bd329011817bdf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77f1f59d12b8ea097e8ccba83bd329011817bdf8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ee149a6db25cde31432f83369b40c92be13021c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ee149a6db25cde31432f83369b40c92be13021c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ee149a6db25cde31432f83369b40c92be13021c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a93a2d850568da07ec533c6ffa7b2d0eaa1dc7d9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 9,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77f1f59d12b8ea097e8ccba83bd329011817bdf8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77f1f59d12b8ea097e8ccba83bd329011817bdf8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=77f1f59d12b8ea097e8ccba83bd329011817bdf8",
        "patch": "@@ -1711,6 +1711,8 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     }\n }\n \n+static int64_t nTimeCheck = 0;\n+static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n static int64_t nTimeConnect = 0;\n static int64_t nTimeIndex = 0;\n@@ -1721,6 +1723,9 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n {\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n+\n+    int64_t nTimeStart = GetTimeMicros();\n+\n     // Check it again in case a previous version let a bad block in\n     if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n         return false;\n@@ -1746,6 +1751,9 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         }\n     }\n \n+    int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n+    LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);\n+\n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n@@ -1788,11 +1796,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n+    LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n-    int64_t nTimeStart = GetTimeMicros();\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -1845,8 +1855,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n-    int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n-    LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n+    int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n+    LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n \n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n     if (block.vtx[0].GetValueOut() > blockReward)\n@@ -1857,8 +1867,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n-    int64_t nTime2 = GetTimeMicros(); nTimeVerify += nTime2 - nTimeStart;\n-    LogPrint(\"bench\", \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]\\n\", nInputs - 1, 0.001 * (nTime2 - nTimeStart), nInputs <= 1 ? 0 : 0.001 * (nTime2 - nTimeStart) / (nInputs-1), nTimeVerify * 0.000001);\n+    int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n+    LogPrint(\"bench\", \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]\\n\", nInputs - 1, 0.001 * (nTime4 - nTime2), nInputs <= 1 ? 0 : 0.001 * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * 0.000001);\n \n     if (fJustCheck)\n         return true;\n@@ -1889,16 +1899,16 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n \n-    int64_t nTime3 = GetTimeMicros(); nTimeIndex += nTime3 - nTime2;\n-    LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime3 - nTime2), nTimeIndex * 0.000001);\n+    int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n+    LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001);\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n     GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n-    int64_t nTime4 = GetTimeMicros(); nTimeCallbacks += nTime4 - nTime3;\n-    LogPrint(\"bench\", \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime4 - nTime3), nTimeCallbacks * 0.000001);\n+    int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n+    LogPrint(\"bench\", \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001);\n \n     return true;\n }"
      }
    ]
  }
]