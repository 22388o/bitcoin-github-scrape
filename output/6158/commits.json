[
  {
    "sha": "2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjUyZmI5MWNkMTk4MzJjOGJhYTYzYTEwYWFmN2NlMzJiYjQwMGY4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-19T08:07:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "[net] extend core functionallity for ban/unban/listban",
      "tree": {
        "sha": "07178f8e0798bd1ab34da6df00c672c68cbbcf03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07178f8e0798bd1ab34da6df00c672c68cbbcf03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2252fb91cd19832c8baa63a10aaf7ce32bb400f8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9849c663b10f4d90776d606aa3e36850c32d44e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9849c663b10f4d90776d606aa3e36850c32d44e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9849c663b10f4d90776d606aa3e36850c32d44e1"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 25,
      "deletions": 7
    },
    "files": [
      {
        "sha": "51d1c53331ab861afdb53619b36608f1b7e1c599",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2252fb91cd19832c8baa63a10aaf7ce32bb400f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2252fb91cd19832c8baa63a10aaf7ce32bb400f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
        "patch": "@@ -458,16 +458,31 @@ bool CNode::IsBanned(CNetAddr ip)\n     return fResult;\n }\n \n-bool CNode::Ban(const CNetAddr &addr) {\n+bool CNode::Ban(const CNetAddr &addr, int64_t bantimeoffset) {\n     int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n-    {\n-        LOCK(cs_setBanned);\n-        if (setBanned[addr] < banTime)\n-            setBanned[addr] = banTime;\n-    }\n+    if (bantimeoffset > 0)\n+        banTime = GetTime()+bantimeoffset;\n+\n+    LOCK(cs_setBanned);\n+    if (setBanned[addr] < banTime)\n+        setBanned[addr] = banTime;\n+\n     return true;\n }\n \n+bool CNode::Unban(const CNetAddr &addr) {\n+    LOCK(cs_setBanned);\n+    if (setBanned.erase(addr))\n+        return true;\n+    return false;\n+}\n+\n+void CNode::GetBanned(std::map<CNetAddr, int64_t> &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    banMap = setBanned; //create a thread safe copy\n+}\n+\n \n std::vector<CSubNet> CNode::vWhitelistedRange;\n CCriticalSection CNode::cs_vWhitelistedRange;"
      },
      {
        "sha": "dd6fca3960d5182785e31e426f8c8003096034ed",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2252fb91cd19832c8baa63a10aaf7ce32bb400f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2252fb91cd19832c8baa63a10aaf7ce32bb400f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
        "patch": "@@ -606,7 +606,10 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n-    static bool Ban(const CNetAddr &ip);\n+    static bool Ban(const CNetAddr &ip, int64_t bantimeoffset = 0);\n+    static bool Unban(const CNetAddr &ip);\n+    static void GetBanned(std::map<CNetAddr, int64_t> &banmap);\n+\n     void copyStats(CNodeStats &stats);\n \n     static bool IsWhitelistedRange(const CNetAddr &ip);"
      }
    ]
  },
  {
    "sha": "d930b26a264ed7eae6ce239f3bfb4ff023df8195",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTMwYjI2YTI2NGVkN2VhZTZjZTIzOWYzYmZiNGZmMDIzZGY4MTk1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-19T08:07:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "[RPC] add setban/listbanned/clearbanned RPC commands",
      "tree": {
        "sha": "cb7fbc9f01aac0da47b4ff2c67f8045c576ee4c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb7fbc9f01aac0da47b4ff2c67f8045c576ee4c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d930b26a264ed7eae6ce239f3bfb4ff023df8195",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d930b26a264ed7eae6ce239f3bfb4ff023df8195",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d930b26a264ed7eae6ce239f3bfb4ff023df8195",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d930b26a264ed7eae6ce239f3bfb4ff023df8195/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2252fb91cd19832c8baa63a10aaf7ce32bb400f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2252fb91cd19832c8baa63a10aaf7ce32bb400f8"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 96,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1cc516e7be5b893a5fff3a56dbb66f99512d9db9",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "patch": "@@ -93,6 +93,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimatepriority\", 0 },\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n+    { \"setban\", 2 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "6157a2d0a0e6730726c08fa8b520cb499b43ef70",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "patch": "@@ -465,3 +465,92 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n     return obj;\n }\n+\n+Value setban(const Array& params, bool fHelp)\n+{\n+    string strCommand;\n+    if (params.size() >= 2)\n+        strCommand = params[1].get_str();\n+    if (fHelp || params.size() < 2 ||\n+        (strCommand != \"add\" && strCommand != \"remove\"))\n+        throw runtime_error(\n+                            \"setban \\\"node\\\" \\\"add|remove\\\" (bantime)\\n\"\n+                            \"\\nAttempts add or remove a IP from the banned list.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"ip\\\"       (string, required) The IP (see getpeerinfo for nodes ip)\\n\"\n+                            \"2. \\\"command\\\"  (string, required) 'add' to add a IP to the list, 'remove' to remove a IP from the list\\n\"\n+                            \"1. \\\"bantime\\\"  (numeric, optional) time in seconds how long the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n+                            + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\" 86400\")\n+                            );\n+\n+    CNetAddr netAddr(params[0].get_str());\n+    if (!netAddr.IsValid())\n+        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP Address\");\n+\n+    if (strCommand == \"add\")\n+    {\n+        if (CNode::IsBanned(netAddr))\n+            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP already banned\");\n+\n+        int64_t banTime = 0; //use standard bantime if not specified\n+        if (params.size() == 3 && !params[2].is_null())\n+            banTime = params[2].get_int64();\n+\n+        CNode::Ban(netAddr, banTime);\n+\n+        //disconnect possible nodes\n+        while(CNode *bannedNode = FindNode(netAddr))\n+            bannedNode->CloseSocketDisconnect();\n+    }\n+    else if(strCommand == \"remove\")\n+    {\n+        if (!CNode::Unban(netAddr))\n+            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Unban failed\");\n+    }\n+\n+    return Value::null;\n+}\n+\n+Value listbanned(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"listbanned\\n\"\n+                            \"\\nList all banned IPs.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"listbanned\", \"\")\n+                            + HelpExampleRpc(\"listbanned\", \"\")\n+                            );\n+\n+    std::map<CNetAddr, int64_t> banMap;\n+    CNode::GetBanned(banMap);\n+\n+    Array bannedAddresses;\n+    for (std::map<CNetAddr, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    {\n+        Object rec;\n+        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n+        rec.push_back(Pair(\"bannedtill\", (*it).second));\n+        bannedAddresses.push_back(rec);\n+    }\n+\n+    return bannedAddresses;\n+}\n+\n+Value clearbanned(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"clearbanned\\n\"\n+                            \"\\nClear all banned IPs.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"clearbanned\", \"\")\n+                            + HelpExampleRpc(\"clearbanned\", \"\")\n+                            );\n+\n+    CNode::ClearBanned();\n+\n+    return Value::null;\n+}"
      },
      {
        "sha": "6d089c6738ec9c05c2e634f6e60ad99e8e6f54f1",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "patch": "@@ -279,6 +279,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n     { \"network\",            \"ping\",                   &ping,                   true  },\n+    { \"network\",            \"setban\",                 &setban,                 true  },\n+    { \"network\",            \"listbanned\",             &listbanned,             true  },\n+    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n \n     /* Block chain and UTXO */\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },"
      },
      {
        "sha": "2b3a59a7baa5cea514d92c9814395cd03311ca84",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930b26a264ed7eae6ce239f3bfb4ff023df8195/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "patch": "@@ -154,6 +154,9 @@ extern UniValue addnode(const UniValue& params, bool fHelp);\n extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n extern UniValue getnettotals(const UniValue& params, bool fHelp);\n+extern UniValue setban(const json_spirit::Array& params, bool fHelp);\n+extern UniValue listbanned(const json_spirit::Array& params, bool fHelp);\n+extern UniValue clearbanned(const json_spirit::Array& params, bool fHelp);\n \n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "1086ffba2639098558422935eba1cae9983dd913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDg2ZmZiYTI2MzkwOTg1NTg0MjI5MzVlYmExY2FlOTk4M2RkOTEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-19T08:20:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "[QA] add setban/listbanned/clearbanned tests",
      "tree": {
        "sha": "e9a5391a9af07fb896602ff0a48b99df12cfbaba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9a5391a9af07fb896602ff0a48b99df12cfbaba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1086ffba2639098558422935eba1cae9983dd913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1086ffba2639098558422935eba1cae9983dd913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1086ffba2639098558422935eba1cae9983dd913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1086ffba2639098558422935eba1cae9983dd913/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d930b26a264ed7eae6ce239f3bfb4ff023df8195",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d930b26a264ed7eae6ce239f3bfb4ff023df8195"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 36,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f35fe27ddeac7deedb774b62a8213df84787466a",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1086ffba2639098558422935eba1cae9983dd913/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1086ffba2639098558422935eba1cae9983dd913/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=1086ffba2639098558422935eba1cae9983dd913",
        "patch": "@@ -20,83 +20,94 @@\n except ImportError:\n     import urlparse\n \n-class HTTPBasicsTest (BitcoinTestFramework):        \n+class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n         return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n \n-    def run_test(self):        \n-        \n+    def run_test(self):\n+\n         #################################################\n         # lowlevel check for http persistent connection #\n         #################################################\n         url = urlparse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-        \n+\n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-        \n+\n         #same should be if we add keep-alive because this should be the std. behaviour\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\": \"keep-alive\"}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n-        \n+\n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n-        \n+\n         #now do the same with \"Connection: close\"\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\":\"close\"}\n-        \n+\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response        \n-        \n+        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n+\n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-                \n+\n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n-        \n+\n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n-                \n+\n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n-        \n+\n+        ###########################\n+        # setban/listbanned tests #\n+        ###########################\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4); #we should have 4 nodes at this point\n+        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n+        time.sleep(3) #wait till the nodes are disconected\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0); #all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[2].listbanned()), 1);\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0);\n+\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "3cec4b76ddd492b95ea86e046f67a4e282c25f87",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1086ffba2639098558422935eba1cae9983dd913/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1086ffba2639098558422935eba1cae9983dd913/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1086ffba2639098558422935eba1cae9983dd913",
        "patch": "@@ -177,4 +177,13 @@ BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n     BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_ban)\n+{\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.1 add\")));\n+    BOOST_CHECK_THROW(CallRPC(string(\"setban 127.0.0.1:8334\")), runtime_error); //portnumber for setban not allowed\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"listbanned\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.1 remove\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e8b93473f12ec901f965cd244a7437646ee66c43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGI5MzQ3M2YxMmVjOTAxZjk2NWNkMjQ0YTc0Mzc2NDZlZTY2YzQz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-19T15:15:25Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "[net] remove unused return type bool from CNode::Ban()",
      "tree": {
        "sha": "205e3bc737ce3b3c7cf4abcec9a5a6e83e4e30af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/205e3bc737ce3b3c7cf4abcec9a5a6e83e4e30af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8b93473f12ec901f965cd244a7437646ee66c43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b93473f12ec901f965cd244a7437646ee66c43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b93473f12ec901f965cd244a7437646ee66c43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b93473f12ec901f965cd244a7437646ee66c43/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1086ffba2639098558422935eba1cae9983dd913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1086ffba2639098558422935eba1cae9983dd913",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1086ffba2639098558422935eba1cae9983dd913"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a065bb29bb2baca45e0da0ffb7a92e85a3c69ff4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8b93473f12ec901f965cd244a7437646ee66c43/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8b93473f12ec901f965cd244a7437646ee66c43/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e8b93473f12ec901f965cd244a7437646ee66c43",
        "patch": "@@ -458,16 +458,14 @@ bool CNode::IsBanned(CNetAddr ip)\n     return fResult;\n }\n \n-bool CNode::Ban(const CNetAddr &addr, int64_t bantimeoffset) {\n+void CNode::Ban(const CNetAddr &addr, int64_t bantimeoffset) {\n     int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n     if (bantimeoffset > 0)\n         banTime = GetTime()+bantimeoffset;\n \n     LOCK(cs_setBanned);\n     if (setBanned[addr] < banTime)\n         setBanned[addr] = banTime;\n-\n-    return true;\n }\n \n bool CNode::Unban(const CNetAddr &addr) {"
      },
      {
        "sha": "ee3da16aa6729ccdd663da82a8f22bc582a52164",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8b93473f12ec901f965cd244a7437646ee66c43/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8b93473f12ec901f965cd244a7437646ee66c43/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e8b93473f12ec901f965cd244a7437646ee66c43",
        "patch": "@@ -606,7 +606,7 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n-    static bool Ban(const CNetAddr &ip, int64_t bantimeoffset = 0);\n+    static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0);\n     static bool Unban(const CNetAddr &ip);\n     static void GetBanned(std::map<CNetAddr, int64_t> &banmap);\n "
      }
    ]
  },
  {
    "sha": "433fb1a95d7a96a033d7454e198d274e92108865",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzNmYjFhOTVkN2E5NmEwMzNkNzQ1NGUxOThkMjc0ZTkyMTA4ODY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-25T18:03:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "[RPC] extend setban to allow subnets",
      "tree": {
        "sha": "51e371e3e270d5b7485414549b4e27e19cde1a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51e371e3e270d5b7485414549b4e27e19cde1a87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/433fb1a95d7a96a033d7454e198d274e92108865",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433fb1a95d7a96a033d7454e198d274e92108865",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/433fb1a95d7a96a033d7454e198d274e92108865",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433fb1a95d7a96a033d7454e198d274e92108865/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b93473f12ec901f965cd244a7437646ee66c43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b93473f12ec901f965cd244a7437646ee66c43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b93473f12ec901f965cd244a7437646ee66c43"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 139,
      "deletions": 34
    },
    "files": [
      {
        "sha": "6d6ef9df76d27283c7824d69e7656ba1082a7d28",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -101,13 +101,28 @@ def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4); #we should have 4 nodes at this point\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n         self.nodes[2].setban(\"127.0.0.1\", \"add\")\n         time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0); #all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1);\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0);\n-\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "3ba2379ea0cd4d1dc04145f339a1e6148cb387c6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 7,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -332,6 +332,15 @@ CNode* FindNode(const CNetAddr& ip)\n     return NULL;\n }\n \n+CNode* FindNode(const CSubNet& subNet)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    if (subNet.Match((CNetAddr)pnode->addr))\n+        return (pnode);\n+    return NULL;\n+}\n+\n CNode* FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n@@ -434,7 +443,7 @@ void CNode::PushVersion()\n \n \n \n-std::map<CNetAddr, int64_t> CNode::setBanned;\n+std::map<CSubNet, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n \n void CNode::ClearBanned()\n@@ -447,7 +456,24 @@ bool CNode::IsBanned(CNetAddr ip)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        std::map<CNetAddr, int64_t>::iterator i = setBanned.find(ip);\n+        for (std::map<CSubNet, int64_t>::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n+        {\n+            CSubNet subNet = (*it).first;\n+            int64_t t = (*it).second;\n+\n+            if(subNet.Match(ip) && GetTime() < t)\n+                fResult = true;\n+        }\n+    }\n+    return fResult;\n+}\n+\n+bool CNode::IsBanned(CSubNet subnet)\n+{\n+    bool fResult = false;\n+    {\n+        LOCK(cs_setBanned);\n+        std::map<CSubNet, int64_t>::iterator i = setBanned.find(subnet);\n         if (i != setBanned.end())\n         {\n             int64_t t = (*i).second;\n@@ -458,24 +484,34 @@ bool CNode::IsBanned(CNetAddr ip)\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr &addr, int64_t bantimeoffset) {\n+void CNode::Ban(const CNetAddr& addr, int64_t bantimeoffset) {\n+    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n+    Ban(subNet, bantimeoffset);\n+}\n+\n+void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset) {\n     int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n     if (bantimeoffset > 0)\n         banTime = GetTime()+bantimeoffset;\n \n     LOCK(cs_setBanned);\n-    if (setBanned[addr] < banTime)\n-        setBanned[addr] = banTime;\n+    if (setBanned[subNet] < banTime)\n+        setBanned[subNet] = banTime;\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n+    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n+    return Unban(subNet);\n+}\n+\n+bool CNode::Unban(const CSubNet &subNet) {\n     LOCK(cs_setBanned);\n-    if (setBanned.erase(addr))\n+    if (setBanned.erase(subNet))\n         return true;\n     return false;\n }\n \n-void CNode::GetBanned(std::map<CNetAddr, int64_t> &banMap)\n+void CNode::GetBanned(std::map<CSubNet, int64_t> &banMap)\n {\n     LOCK(cs_setBanned);\n     banMap = setBanned; //create a thread safe copy"
      },
      {
        "sha": "d800aa22c6ef44db8245b1353fe2acf5730c9199",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -66,6 +66,7 @@ unsigned int SendBufferSize();\n void AddOneShot(const std::string& strDest);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n+CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n@@ -284,7 +285,7 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static std::map<CNetAddr, int64_t> setBanned;\n+    static std::map<CSubNet, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n@@ -606,9 +607,12 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n+    static bool IsBanned(CSubNet subnet);\n     static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0);\n+    static void Ban(const CSubNet &subNet, int64_t bantimeoffset = 0);\n     static bool Unban(const CNetAddr &ip);\n-    static void GetBanned(std::map<CNetAddr, int64_t> &banmap);\n+    static bool Unban(const CSubNet &ip);\n+    static void GetBanned(std::map<CSubNet, int64_t> &banmap);\n \n     void copyStats(CNodeStats &stats);\n "
      },
      {
        "sha": "b7c77fda6bc51625cdb6289839ba95602988bdde",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -1330,6 +1330,11 @@ bool operator!=(const CSubNet& a, const CSubNet& b)\n     return !(a==b);\n }\n \n+bool operator<(const CSubNet& a, const CSubNet& b)\n+{\n+    return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16)));\n+}\n+\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {"
      },
      {
        "sha": "27f0eac2a216f8163291670c31965db14f6d8521",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -125,6 +125,7 @@ class CSubNet\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);\n+        friend bool operator<(const CSubNet& a, const CSubNet& b);\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */"
      },
      {
        "sha": "e6c33e1d06c0d2c9877b5ca201bb8d082ca9d563",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 16,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -474,39 +474,51 @@ Value setban(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n-                            \"setban \\\"node\\\" \\\"add|remove\\\" (bantime)\\n\"\n-                            \"\\nAttempts add or remove a IP from the banned list.\\n\"\n+                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime)\\n\"\n+                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"ip\\\"       (string, required) The IP (see getpeerinfo for nodes ip)\\n\"\n-                            \"2. \\\"command\\\"  (string, required) 'add' to add a IP to the list, 'remove' to remove a IP from the list\\n\"\n-                            \"1. \\\"bantime\\\"  (numeric, optional) time in seconds how long the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"1. \\\"ip(/netmask)\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n+                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n+                            \"1. \\\"bantime\\\"      (numeric, optional) time in seconds how long the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n+                            + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\" 86400\")\n                             );\n \n-    CNetAddr netAddr(params[0].get_str());\n-    if (!netAddr.IsValid())\n-        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP Address\");\n+    CSubNet subNet;\n+    CNetAddr netAddr;\n+    bool isSubnet = false;\n+\n+    if (params[0].get_str().find(\"/\") != string::npos)\n+        isSubnet = true;\n+\n+    if (!isSubnet)\n+        netAddr = CNetAddr(params[0].get_str());\n+    else\n+        subNet = CSubNet(params[0].get_str());\n+\n+    if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n+        throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n \n     if (strCommand == \"add\")\n     {\n-        if (CNode::IsBanned(netAddr))\n-            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP already banned\");\n+        if (isSubnet ? CNode::IsBanned(subNet) : CNode::IsBanned(netAddr))\n+            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n         if (params.size() == 3 && !params[2].is_null())\n             banTime = params[2].get_int64();\n \n-        CNode::Ban(netAddr, banTime);\n+        isSubnet ? CNode::Ban(subNet, banTime) : CNode::Ban(netAddr, banTime);\n \n         //disconnect possible nodes\n-        while(CNode *bannedNode = FindNode(netAddr))\n+        while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n             bannedNode->CloseSocketDisconnect();\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!CNode::Unban(netAddr))\n+        if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Unban failed\");\n     }\n \n@@ -518,17 +530,17 @@ Value listbanned(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n                             \"listbanned\\n\"\n-                            \"\\nList all banned IPs.\\n\"\n+                            \"\\nList all banned IPs/Subnets.\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                             );\n \n-    std::map<CNetAddr, int64_t> banMap;\n+    std::map<CSubNet, int64_t> banMap;\n     CNode::GetBanned(banMap);\n \n     Array bannedAddresses;\n-    for (std::map<CNetAddr, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    for (std::map<CSubNet, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n     {\n         Object rec;\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));"
      },
      {
        "sha": "26588a43ed171fecb2f807394f7d0f0d65573414",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 4,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/433fb1a95d7a96a033d7454e198d274e92108865/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/433fb1a95d7a96a033d7454e198d274e92108865/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=433fb1a95d7a96a033d7454e198d274e92108865",
        "patch": "@@ -179,11 +179,43 @@ BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n \n BOOST_AUTO_TEST_CASE(rpc_ban)\n {\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.1 add\")));\n-    BOOST_CHECK_THROW(CallRPC(string(\"setban 127.0.0.1:8334\")), runtime_error); //portnumber for setban not allowed\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"listbanned\")));\n-    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.1 remove\")));\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    \n+    Value r;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.0:8334\")), runtime_error); //portnumber for setban not allowed\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    Array ar = r.get_array();\n+    Object o1 = ar[0].get_obj();\n+    Value adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.255\");\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n+\n+    // must throw an exception because 127.0.0.1 is in already banned suubnet range\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.1 add\")), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0/24 remove\")));;\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/255.255.0.0 add\")));\n+    BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.1.1 add\")), runtime_error);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    BOOST_CHECK_EQUAL(ar.size(), 0);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "3de24d7647db2b9167cee25549c3c603582e19e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGUyNGQ3NjQ3ZGIyYjkxNjdjZWUyNTU0OWMzYzYwMzU4MmUxOWU2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-12T15:42:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "rename json field \"bannedtill\" to \"banned_until\"",
      "tree": {
        "sha": "d3728145fcbed760f2516ac5befdb791043429e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3728145fcbed760f2516ac5befdb791043429e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3de24d7647db2b9167cee25549c3c603582e19e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de24d7647db2b9167cee25549c3c603582e19e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3de24d7647db2b9167cee25549c3c603582e19e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de24d7647db2b9167cee25549c3c603582e19e6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "433fb1a95d7a96a033d7454e198d274e92108865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/433fb1a95d7a96a033d7454e198d274e92108865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/433fb1a95d7a96a033d7454e198d274e92108865"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35ef92ecfdfbb11fe5694e68922a08bc646c211e",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3de24d7647db2b9167cee25549c3c603582e19e6/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3de24d7647db2b9167cee25549c3c603582e19e6/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=3de24d7647db2b9167cee25549c3c603582e19e6",
        "patch": "@@ -544,7 +544,7 @@ Value listbanned(const Array& params, bool fHelp)\n     {\n         Object rec;\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));\n-        rec.push_back(Pair(\"bannedtill\", (*it).second));\n+        rec.push_back(Pair(\"banned_untill\", (*it).second));\n         bannedAddresses.push_back(rec);\n     }\n "
      }
    ]
  },
  {
    "sha": "4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTM2ZTliY2M3ZDA3MWJiYTRjNDVmZDg5YzBjZmQyZTIzNjFmZmUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-12T16:31:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "setban: rewrite to UniValue, allow absolute bantime",
      "tree": {
        "sha": "2703eacb4f5dd62e6d6bb95193412cbcbf0e8ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2703eacb4f5dd62e6d6bb95193412cbcbf0e8ad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3de24d7647db2b9167cee25549c3c603582e19e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de24d7647db2b9167cee25549c3c603582e19e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3de24d7647db2b9167cee25549c3c603582e19e6"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 46,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6b8a0a2b1e1c0eff7791fd6158a58e1aa2d3d3b7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -484,15 +484,15 @@ bool CNode::IsBanned(CSubNet subnet)\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr& addr, int64_t bantimeoffset) {\n+void CNode::Ban(const CNetAddr& addr, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n-    Ban(subNet, bantimeoffset);\n+    Ban(subNet, bantimeoffset, sinceUnixEpoch);\n }\n \n-void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset) {\n+void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n     if (bantimeoffset > 0)\n-        banTime = GetTime()+bantimeoffset;\n+        banTime = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n     LOCK(cs_setBanned);\n     if (setBanned[subNet] < banTime)"
      },
      {
        "sha": "69e4c592a94f84f4f161dffa9bb88e8865ecee23",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -608,8 +608,8 @@ class CNode\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n     static bool IsBanned(CSubNet subnet);\n-    static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0);\n-    static void Ban(const CSubNet &subNet, int64_t bantimeoffset = 0);\n+    static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CSubNet &subNet, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     static bool Unban(const CNetAddr &ip);\n     static bool Unban(const CSubNet &ip);\n     static void GetBanned(std::map<CSubNet, int64_t> &banmap);"
      },
      {
        "sha": "1d94e4f61bf8104f5e981e933f19b5436f8f75bd",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -94,6 +94,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 1 },\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },\n+    { \"setban\", 3 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "97d5ccbff8005c1b1f82970844ec9c7b94038d7d",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -466,20 +466,21 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-Value setban(const Array& params, bool fHelp)\n+UniValue setban(const UniValue& params, bool fHelp)\n {\n     string strCommand;\n     if (params.size() >= 2)\n         strCommand = params[1].get_str();\n     if (fHelp || params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n-                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime)\\n\"\n+                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n                             \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"ip(/netmask)\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n                             \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n-                            \"1. \\\"bantime\\\"      (numeric, optional) time in seconds how long the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n@@ -507,10 +508,14 @@ Value setban(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n-        if (params.size() == 3 && !params[2].is_null())\n+        if (params.size() >= 3 && !params[2].isNull())\n             banTime = params[2].get_int64();\n \n-        isSubnet ? CNode::Ban(subNet, banTime) : CNode::Ban(netAddr, banTime);\n+        bool absolute = false;\n+        if (params.size() == 4 && params[3].isTrue())\n+            absolute = true;\n+\n+        isSubnet ? CNode::Ban(subNet, banTime, absolute) : CNode::Ban(netAddr, banTime, absolute);\n \n         //disconnect possible nodes\n         while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n@@ -522,10 +527,10 @@ Value setban(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Unban failed\");\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n-Value listbanned(const Array& params, bool fHelp)\n+UniValue listbanned(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -539,10 +544,10 @@ Value listbanned(const Array& params, bool fHelp)\n     std::map<CSubNet, int64_t> banMap;\n     CNode::GetBanned(banMap);\n \n-    Array bannedAddresses;\n+    UniValue bannedAddresses(UniValue::VARR);\n     for (std::map<CSubNet, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n     {\n-        Object rec;\n+        UniValue rec(UniValue::VOBJ);\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));\n         rec.push_back(Pair(\"banned_untill\", (*it).second));\n         bannedAddresses.push_back(rec);\n@@ -551,7 +556,7 @@ Value listbanned(const Array& params, bool fHelp)\n     return bannedAddresses;\n }\n \n-Value clearbanned(const Array& params, bool fHelp)\n+UniValue clearbanned(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n@@ -564,5 +569,5 @@ Value clearbanned(const Array& params, bool fHelp)\n \n     CNode::ClearBanned();\n \n-    return Value::null;\n+    return NullUniValue;\n }"
      },
      {
        "sha": "d08ae72f5cc67ecf8045b8a08fb5be24fbb3bde3",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -154,9 +154,9 @@ extern UniValue addnode(const UniValue& params, bool fHelp);\n extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n extern UniValue getnettotals(const UniValue& params, bool fHelp);\n-extern UniValue setban(const json_spirit::Array& params, bool fHelp);\n-extern UniValue listbanned(const json_spirit::Array& params, bool fHelp);\n-extern UniValue clearbanned(const json_spirit::Array& params, bool fHelp);\n+extern UniValue setban(const UniValue& params, bool fHelp);\n+extern UniValue listbanned(const UniValue& params, bool fHelp);\n+extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "e60281949e011c5ec4b3a0b9ed179440633b31e6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "patch": "@@ -181,25 +181,40 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n     \n-    Value r;\n+    UniValue r;\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0 add\")));\n     BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.0:8334\")), runtime_error); //portnumber for setban not allowed\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n-    Array ar = r.get_array();\n-    Object o1 = ar[0].get_obj();\n-    Value adr = find_value(o1, \"address\");\n+    UniValue ar = r.get_array();\n+    UniValue o1 = ar[0].get_obj();\n+    UniValue adr = find_value(o1, \"address\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.255\");\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"setban 127.0.0.0 remove\")));;\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     BOOST_CHECK_EQUAL(ar.size(), 0);\n \n-    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n+    ar = r.get_array();\n+    o1 = ar[0].get_obj();\n+    adr = find_value(o1, \"address\");\n+    UniValue banned_until = find_value(o1, \"banned_untill\");\n+    BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n+    BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));\n+\n+    BOOST_CHECK_NO_THROW(r = CallRPC(string(\"setban 127.0.0.0/24 add 200\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(string(\"listbanned\")));\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n+    banned_until = find_value(o1, \"banned_untill\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n+    int64_t now = GetTime();    \n+    BOOST_CHECK(banned_until.get_int64() > now);\n+    BOOST_CHECK(banned_until.get_int64()-now <= 200);\n \n     // must throw an exception because 127.0.0.1 is in already banned suubnet range\n     BOOST_CHECK_THROW(r = CallRPC(string(\"setban 127.0.0.1 add\")), runtime_error);"
      }
    ]
  },
  {
    "sha": "d624167387a658c9b2c25ad13492262ccd2592bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjI0MTY3Mzg3YTY1OGM5YjJjMjVhZDEzNDkyMjYyY2NkMjU5MmJm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-12T17:51:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:55Z"
      },
      "message": "fix CSubNet comparison operator",
      "tree": {
        "sha": "920bba7c8926753fff16e77e7ae55ccb1ab7d141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/920bba7c8926753fff16e77e7ae55ccb1ab7d141"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d624167387a658c9b2c25ad13492262ccd2592bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d624167387a658c9b2c25ad13492262ccd2592bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d624167387a658c9b2c25ad13492262ccd2592bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d624167387a658c9b2c25ad13492262ccd2592bf/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e36e9bcc7d071bba4c45fd89c0cfd2e2361ffe3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "adac5c2d07e1dbacf2e2b81b0763fc06733a1e83",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d624167387a658c9b2c25ad13492262ccd2592bf/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d624167387a658c9b2c25ad13492262ccd2592bf/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d624167387a658c9b2c25ad13492262ccd2592bf",
        "patch": "@@ -1332,7 +1332,7 @@ bool operator!=(const CSubNet& a, const CSubNet& b)\n \n bool operator<(const CSubNet& a, const CSubNet& b)\n {\n-    return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16)));\n+    return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n }\n \n #ifdef WIN32"
      }
    ]
  },
  {
    "sha": "1f02b802538ff16313c27f1539860ee06b907c7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjAyYjgwMjUzOGZmMTYzMTNjMjdmMTUzOTg2MGVlMDZiOTA3Yzdj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-12T20:27:03Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:56Z"
      },
      "message": "setban: add RPCErrorCode",
      "tree": {
        "sha": "cdbae7afe4111dd907670395c0568cce5734c5a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbae7afe4111dd907670395c0568cce5734c5a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f02b802538ff16313c27f1539860ee06b907c7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f02b802538ff16313c27f1539860ee06b907c7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f02b802538ff16313c27f1539860ee06b907c7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f02b802538ff16313c27f1539860ee06b907c7c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d624167387a658c9b2c25ad13492262ccd2592bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d624167387a658c9b2c25ad13492262ccd2592bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d624167387a658c9b2c25ad13492262ccd2592bf"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5a26c7c3ae8c60f4eeb677da402cada9bbe73e7d",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f02b802538ff16313c27f1539860ee06b907c7c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f02b802538ff16313c27f1539860ee06b907c7c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=1f02b802538ff16313c27f1539860ee06b907c7c",
        "patch": "@@ -524,7 +524,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n-            throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Unban failed\");\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "ccd2439c9f14c7b9ba0a345ccc414c6839111411",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f02b802538ff16313c27f1539860ee06b907c7c/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f02b802538ff16313c27f1539860ee06b907c7c/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=1f02b802538ff16313c27f1539860ee06b907c7c",
        "patch": "@@ -64,6 +64,7 @@ enum RPCErrorCode\n     RPC_CLIENT_NODE_ALREADY_ADDED   = -23, //! Node is already added\n     RPC_CLIENT_NODE_NOT_ADDED       = -24, //! Node has not been added before\n     RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //! Node to disconnect not found in connected nodes\n+    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //! Invalid IP/Subnet\n \n     //! Wallet errors\n     RPC_WALLET_ERROR                = -4,  //! Unspecified problem with wallet (key not found etc.)"
      }
    ]
  },
  {
    "sha": "9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDc5YWZlOWE5MjVjNGFhZWQ1ZDkyMmVlNDMyZTliM2FhNGQ4Nzdh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-16T16:21:03Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-17T19:40:56Z"
      },
      "message": "add RPC tests for setban & disconnectnode",
      "tree": {
        "sha": "ba7fe24b1e1112d727fe0c47466e8e7fc3355733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba7fe24b1e1112d727fe0c47466e8e7fc3355733"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f02b802538ff16313c27f1539860ee06b907c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f02b802538ff16313c27f1539860ee06b907c7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f02b802538ff16313c27f1539860ee06b907c7c"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 71,
      "deletions": 27
    },
    "files": [
      {
        "sha": "426d81fa90d3fe20226eaa06d415fcb1bad73ab6",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
        "patch": "@@ -32,6 +32,7 @@ testScripts=(\n     'merkle_blocks.py'\n     'signrawtransactions.py'\n     'walletbackup.py'\n+    'nodehandling.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "8ccb8212869589a3a6d45aac37d2978041cf7d1f",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 27,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test REST interface\n+# Test rpc http basics\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -98,31 +98,5 @@ def run_test(self):\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n \n-        ###########################\n-        # setban/listbanned tests #\n-        ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n-        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n-        except:\n-            pass\n-        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        try:\n-            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n-        except:\n-            pass\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "9a77bd97e8e23147467a50077e700b0cac5c10e5",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d79afe9a925c4aaed5d922ee432e9b3aa4d877a/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=9d79afe9a925c4aaed5d922ee432e9b3aa4d877a",
        "patch": "@@ -0,0 +1,69 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test node handling\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import base64\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class NodeHandlingTest (BitcoinTestFramework):\n+    def run_test(self):\n+        ###########################\n+        # setban/listbanned tests #\n+        ###########################\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n+        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n+        time.sleep(3) #wait till the nodes are disconected\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"add\") #throws exception because 127.0.0.1 is within range 127.0.0.0/24\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        try:\n+            self.nodes[2].setban(\"127.0.0.1\", \"remove\")\n+        except:\n+            pass\n+        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        self.nodes[2].clearbanned()\n+        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        \n+        ###########################\n+        # RPC disconnectnode test #\n+        ###########################\n+        url = urlparse.urlparse(self.nodes[1].url)\n+        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n+        time.sleep(2) #disconnecting a node needs a little bit of time\n+        for node in self.nodes[0].getpeerinfo():\n+            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n+\n+        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n+        found = False\n+        for node in self.nodes[0].getpeerinfo():\n+            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n+                found = True\n+        assert(found)\n+\n+if __name__ == '__main__':\n+    NodeHandlingTest ().main ()"
      }
    ]
  }
]