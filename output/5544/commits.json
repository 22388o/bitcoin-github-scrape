[
  {
    "sha": "22101f08edfc339c9aeceadec223536a3819c54a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjEwMWYwOGVkZmMzMzljOWFlY2VhZGVjMjIzNTM2YTM4MTljNTRh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-26T13:06:37Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-26T13:06:37Z"
      },
      "message": "[minor] indentation fixes (no code changes)",
      "tree": {
        "sha": "8af20fcc0920a96268d01d14cd3ad81480340df9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8af20fcc0920a96268d01d14cd3ad81480340df9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22101f08edfc339c9aeceadec223536a3819c54a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22101f08edfc339c9aeceadec223536a3819c54a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22101f08edfc339c9aeceadec223536a3819c54a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22101f08edfc339c9aeceadec223536a3819c54a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4312c8fc1892fd01a59cbccffffbb5082e36b695",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4312c8fc1892fd01a59cbccffffbb5082e36b695",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4312c8fc1892fd01a59cbccffffbb5082e36b695"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 54,
      "deletions": 54
    },
    "files": [
      {
        "sha": "5081bd881f3f4da8785d71de99e569b999ae2d8b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 48,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22101f08edfc339c9aeceadec223536a3819c54a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22101f08edfc339c9aeceadec223536a3819c54a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=22101f08edfc339c9aeceadec223536a3819c54a",
        "patch": "@@ -1534,21 +1534,21 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n         {\n-        CCoins outsEmpty;\n-        CCoinsModifier outs = view.ModifyCoins(hash);\n-        outs->ClearUnspendable();\n-\n-        CCoins outsBlock(tx, pindex->nHeight);\n-        // The CCoins serialization does not serialize negative numbers.\n-        // No network rules currently depend on the version here, so an inconsistency is harmless\n-        // but it must be corrected before txout nversion ever influences a network rule.\n-        if (outsBlock.nVersion < 0)\n-            outs->nVersion = outsBlock.nVersion;\n-        if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n-\n-        // remove outputs\n-        outs->Clear();\n+            CCoins outsEmpty;\n+            CCoinsModifier outs = view.ModifyCoins(hash);\n+            outs->ClearUnspendable();\n+\n+            CCoins outsBlock(tx, pindex->nHeight);\n+            // The CCoins serialization does not serialize negative numbers.\n+            // No network rules currently depend on the version here, so an inconsistency is harmless\n+            // but it must be corrected before txout nversion ever influences a network rule.\n+            if (outsBlock.nVersion < 0)\n+                outs->nVersion = outsBlock.nVersion;\n+            if (*outs != outsBlock)\n+                fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+\n+            // remove outputs\n+            outs->Clear();\n         }\n \n         // restore inputs\n@@ -2080,43 +2080,43 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            PruneBlockIndexCandidates();\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                PruneBlockIndexCandidates();\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)"
      },
      {
        "sha": "e3b758ee18b8d3045e974c26b0d0a465ca8b02d6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22101f08edfc339c9aeceadec223536a3819c54a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22101f08edfc339c9aeceadec223536a3819c54a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22101f08edfc339c9aeceadec223536a3819c54a",
        "patch": "@@ -233,7 +233,7 @@ void AdvertizeLocal(CNode *pnode)\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n-             GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n+            GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n             addrLocal.SetIP(pnode->addrLocal);\n         }\n@@ -1177,8 +1177,8 @@ void DumpAddresses()\n     CAddrDB adb;\n     adb.Write(addrman);\n \n-    LogPrint(\"net\", \"Flushed %d addresses to peers.dat  %dms\\n\",\n-           addrman.size(), GetTimeMillis() - nStart);\n+    LogPrint(\"net\", \"Flushed %d addresses to peers.dat %dms\\n\",\n+        addrman.size(), GetTimeMillis() - nStart);\n }\n \n void static ProcessOneShot()"
      },
      {
        "sha": "5459ffe0e3ddd88a0a2cafe1319b9fe6179538b8",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22101f08edfc339c9aeceadec223536a3819c54a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22101f08edfc339c9aeceadec223536a3819c54a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=22101f08edfc339c9aeceadec223536a3819c54a",
        "patch": "@@ -1440,9 +1440,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n-                    //The priority after the next block (depth+1) is used instead of the current,\n-                    //reflecting an assumption the user would accept a bit more delay for\n-                    //a chance at a free transaction.\n+                    // The priority after the next block (depth+1) is used instead of the current,\n+                    // reflecting an assumption the user would accept a bit more delay for\n+                    // a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n "
      }
    ]
  }
]