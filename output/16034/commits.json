[
  {
    "sha": "cc2588579c3fbc133a7ca762fa213ca18b736551",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzI1ODg1NzljM2ZiYzEzM2E3Y2E3NjJmYTIxM2NhMThiNzM2NTUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T09:25:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-17T11:29:04Z"
      },
      "message": "Move LockAnnotation from threadsafety.h (imported code) to sync.h (our code)",
      "tree": {
        "sha": "08d7d6ec8fd9d73ddd306eca95f9e0609b4d2903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08d7d6ec8fd9d73ddd306eca95f9e0609b4d2903"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc2588579c3fbc133a7ca762fa213ca18b736551",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2588579c3fbc133a7ca762fa213ca18b736551",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc2588579c3fbc133a7ca762fa213ca18b736551",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2588579c3fbc133a7ca762fa213ca18b736551/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a822a0e4f6317f98cde6f0d5abe952b4e8992ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a822a0e4f6317f98cde6f0d5abe952b4e8992ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a822a0e4f6317f98cde6f0d5abe952b4e8992ac9"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a4c22f67cc7f67e16b0c27882f6c31e97ae6a6bf",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc2588579c3fbc133a7ca762fa213ca18b736551/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc2588579c3fbc133a7ca762fa213ca18b736551/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=cc2588579c3fbc133a7ca762fa213ca18b736551",
        "patch": "@@ -304,4 +304,15 @@ class CSemaphoreGrant\n     }\n };\n \n+// Utility class for indicating to compiler thread analysis that a mutex is\n+// locked (when it couldn't be determined otherwise).\n+struct SCOPED_LOCKABLE LockAnnotation\n+{\n+    template <typename Mutex>\n+    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    {\n+    }\n+    ~LockAnnotation() UNLOCK_FUNCTION() {}\n+};\n+\n #endif // BITCOIN_SYNC_H"
      },
      {
        "sha": "47e6b2ea381a4382dbd0aca65c00b3d52b5323cd",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc2588579c3fbc133a7ca762fa213ca18b736551/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc2588579c3fbc133a7ca762fa213ca18b736551/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=cc2588579c3fbc133a7ca762fa213ca18b736551",
        "patch": "@@ -54,15 +54,4 @@\n #define ASSERT_EXCLUSIVE_LOCK(...)\n #endif // __GNUC__\n \n-// Utility class for indicating to compiler thread analysis that a mutex is\n-// locked (when it couldn't be determined otherwise).\n-struct SCOPED_LOCKABLE LockAnnotation\n-{\n-    template <typename Mutex>\n-    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n-    {\n-    }\n-    ~LockAnnotation() UNLOCK_FUNCTION() {}\n-};\n-\n #endif // BITCOIN_THREADSAFETY_H"
      }
    ]
  },
  {
    "sha": "3a809446b3881e1a6853da78cccf42643c9a5927",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTgwOTQ0NmIzODgxZTFhNjg1M2RhNzhjY2NmNDI2NDNjOWE1OTI3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T09:45:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-17T11:29:04Z"
      },
      "message": "Move LockAnnotation to make it reflect the truth",
      "tree": {
        "sha": "cc16f18732842158c75e549b986b5ca10984c86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc16f18732842158c75e549b986b5ca10984c86e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a809446b3881e1a6853da78cccf42643c9a5927",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a809446b3881e1a6853da78cccf42643c9a5927",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a809446b3881e1a6853da78cccf42643c9a5927",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a809446b3881e1a6853da78cccf42643c9a5927/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc2588579c3fbc133a7ca762fa213ca18b736551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc2588579c3fbc133a7ca762fa213ca18b736551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc2588579c3fbc133a7ca762fa213ca18b736551"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b230000a919bf5d956e1ccac641896081f32000f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a809446b3881e1a6853da78cccf42643c9a5927/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a809446b3881e1a6853da78cccf42643c9a5927/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3a809446b3881e1a6853da78cccf42643c9a5927",
        "patch": "@@ -272,8 +272,8 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n-        LockAnnotation lock(::cs_main);\n         auto locked_chain = wallet.chain().lock();\n+        LockAnnotation lock(::cs_main);\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;"
      }
    ]
  },
  {
    "sha": "de9b5dbca34230b8213ce612036fccabdb6ee53b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTliNWRiY2EzNDIzMGI4MjEzY2U2MTIwMzZmY2NhYmRiNmVlNTNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T09:36:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-17T11:29:04Z"
      },
      "message": "Make sure the compile-time locking promises given via LockAnnotation:s hold also in practice at runtime (ifdef DEBUG_LOCKORDER)",
      "tree": {
        "sha": "2abefce0b56e73aad348ddcdeadc740074fbee2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2abefce0b56e73aad348ddcdeadc740074fbee2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de9b5dbca34230b8213ce612036fccabdb6ee53b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9b5dbca34230b8213ce612036fccabdb6ee53b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de9b5dbca34230b8213ce612036fccabdb6ee53b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9b5dbca34230b8213ce612036fccabdb6ee53b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a809446b3881e1a6853da78cccf42643c9a5927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a809446b3881e1a6853da78cccf42643c9a5927",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a809446b3881e1a6853da78cccf42643c9a5927"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43473534db0798bc542ada3e6a06a7281e7d5167",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de9b5dbca34230b8213ce612036fccabdb6ee53b/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de9b5dbca34230b8213ce612036fccabdb6ee53b/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=de9b5dbca34230b8213ce612036fccabdb6ee53b",
        "patch": "@@ -311,6 +311,9 @@ struct SCOPED_LOCKABLE LockAnnotation\n     template <typename Mutex>\n     explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n     {\n+#ifdef DEBUG_LOCKORDER\n+        AssertLockHeld(mutex);\n+#endif\n     }\n     ~LockAnnotation() UNLOCK_FUNCTION() {}\n };"
      }
    ]
  },
  {
    "sha": "9f85e9cb3d687862128ddf464d2bc2462b8627f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Zjg1ZTljYjNkNjg3ODYyMTI4ZGRmNDY0ZDJiYzI0NjJiODYyN2Yw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-16T13:10:38Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-17T11:29:04Z"
      },
      "message": "scripted-diff: Rename LockAnnotation to LockAssertion\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l LockAnnotation | xargs sed -i 's/LockAnnotation/LockAssertion/'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e4241f1ab16a72f154ebe2a6945ad12265ec803c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4241f1ab16a72f154ebe2a6945ad12265ec803c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f85e9cb3d687862128ddf464d2bc2462b8627f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f85e9cb3d687862128ddf464d2bc2462b8627f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f85e9cb3d687862128ddf464d2bc2462b8627f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f85e9cb3d687862128ddf464d2bc2462b8627f0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de9b5dbca34230b8213ce612036fccabdb6ee53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9b5dbca34230b8213ce612036fccabdb6ee53b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de9b5dbca34230b8213ce612036fccabdb6ee53b"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a864f21f04c46df0bd1de13aa93a33488c2c13e6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=9f85e9cb3d687862128ddf464d2bc2462b8627f0",
        "patch": "@@ -41,7 +41,7 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n {\n     Optional<int> getHeight() override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         int height = ::ChainActive().Height();\n         if (height >= 0) {\n             return height;\n@@ -50,7 +50,7 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     }\n     Optional<int> getBlockHeight(const uint256& hash) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = LookupBlockIndex(hash);\n         if (block && ::ChainActive().Contains(block)) {\n             return block->nHeight;\n@@ -65,34 +65,34 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     }\n     uint256 getBlockHash(int height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetBlockHash();\n     }\n     int64_t getBlockTime(int height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetBlockTime();\n     }\n     int64_t getBlockMedianTimePast(int height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetMedianTimePast();\n     }\n     bool haveBlockOnDisk(int height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n     Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n         if (block) {\n             if (hash) *hash = block->GetBlockHash();\n@@ -102,7 +102,7 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     }\n     Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         if (::fPruneMode) {\n             CBlockIndex* block = stop_height ? ::ChainActive()[*stop_height] : ::ChainActive().Tip();\n             while (block && block->nHeight >= start_height) {\n@@ -116,7 +116,7 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     }\n     Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         const CBlockIndex* block = LookupBlockIndex(hash);\n         const CBlockIndex* fork = block ? ::ChainActive().FindFork(block) : nullptr;\n         if (height) {\n@@ -133,25 +133,25 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     }\n     CBlockLocator getTipLocator() override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         return ::ChainActive().GetLocator();\n     }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n             return fork->nHeight;\n         }\n         return nullopt;\n     }\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n     bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) override\n     {\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n             false /* bypass limits */, absurd_fee);\n     }"
      },
      {
        "sha": "ab40e9962bbee6d6bf04a55a2727caea3497b851",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=9f85e9cb3d687862128ddf464d2bc2462b8627f0",
        "patch": "@@ -145,7 +145,7 @@ void TestGUI()\n     }\n     {\n         auto locked_chain = wallet->chain().lock();\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n \n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();"
      },
      {
        "sha": "bdbdde1a2a49b7e71403bd74f1a9bfb76a3d073d",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=9f85e9cb3d687862128ddf464d2bc2462b8627f0",
        "patch": "@@ -306,16 +306,16 @@ class CSemaphoreGrant\n \n // Utility class for indicating to compiler thread analysis that a mutex is\n // locked (when it couldn't be determined otherwise).\n-struct SCOPED_LOCKABLE LockAnnotation\n+struct SCOPED_LOCKABLE LockAssertion\n {\n     template <typename Mutex>\n-    explicit LockAnnotation(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n+    explicit LockAssertion(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION(mutex)\n     {\n #ifdef DEBUG_LOCKORDER\n         AssertLockHeld(mutex);\n #endif\n     }\n-    ~LockAnnotation() UNLOCK_FUNCTION() {}\n+    ~LockAssertion() UNLOCK_FUNCTION() {}\n };\n \n #endif // BITCOIN_SYNC_H"
      },
      {
        "sha": "922bb0fe6503454912d21d5a887288cabf484675",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f85e9cb3d687862128ddf464d2bc2462b8627f0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9f85e9cb3d687862128ddf464d2bc2462b8627f0",
        "patch": "@@ -44,7 +44,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n-    LockAnnotation lock(::cs_main);\n+    LockAssertion lock(::cs_main);\n \n     // Verify ScanForWalletTransactions accommodates a null start block.\n     {\n@@ -123,7 +123,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n \n     auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n-    LockAnnotation lock(::cs_main);\n+    LockAssertion lock(::cs_main);\n \n     // Prune the older block file.\n     PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n@@ -190,7 +190,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n-    LockAnnotation lock(::cs_main);\n+    LockAssertion lock(::cs_main);\n \n     std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n \n@@ -248,7 +248,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n     auto locked_chain = chain->lock();\n-    LockAnnotation lock(::cs_main);\n+    LockAssertion lock(::cs_main);\n     LOCK(wallet.cs_wallet);\n \n     wtx.hashBlock = ::ChainActive().Tip()->GetBlockHash();\n@@ -273,7 +273,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n         auto locked_chain = wallet.chain().lock();\n-        LockAnnotation lock(::cs_main);\n+        LockAssertion lock(::cs_main);\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;"
      }
    ]
  }
]