vasild,2020-04-21 13:17:32,"Full output from the benchmark (`./src/bench/bench_bitcoin -filter=""AddrMan.*""`):\n\n`std::map`\nBenchmark | evals | iterations | total | min | max | median\n-|-|-|-|-|-|-\nAddrManAdd | 5 | 5 | **4.45807** | 0.176704 | 0.179945 | 0.178443\nAddrManGetAddr | 5 | 500 | **4.09847** | 0.00163663 | 0.00164301 | 0.0016392\nAddrManGood | 5 | 2 | **4.66502** | 0.460193 | 0.474046 | 0.467368\nAddrMa",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-617173590,617173590,
MarcoFalke,2020-04-22 14:53:32,"Would it be possible to submit the benchmark upfront as a separate pull, so that https://codespeed.bitcoinperf.com/ can start running it?",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-617828865,617828865,
vasild,2020-04-24 09:40:05,Done: https://github.com/bitcoin/bitcoin/pull/18754,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-618911494,618911494,
vasild,2020-04-27 10:25:30,"Removed the first commit (which introduced the benchmark), now that it is already merged into `master` and rebased.",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-619887287,619887287,
DrahtBot,2020-05-20 21:52:32,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19238 (refactor: Make CAddrMan::cs non-recursive by hebasto)\n\nIf you consider this pull request important, please also ",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-631747090,631747090,
sipa,2020-06-10 06:00:17,utACK 7cc317285f388f0cda974a321761992248257fb8,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-641742786,641742786,
hebasto,2020-06-12 18:27:20,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-643423000,643423000,
vasild,2020-06-15 15:00:19,"> nit: If #includes in addrman.h are already touched, mind moving...\n\nGood catch, they should be moved! Given that there is already one ACK, I will move the headers if I alter this PR or as a followup PR if this gets merged as is now.",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-644188260,644188260,
vasild,2020-06-25 11:47:59,Prefixed `salt_k0` and `salt_k1` with `m_` to abide to the naming convention. [diff](https://github.com/bitcoin/bitcoin/compare/7cc317285f388f0cda974a321761992248257fb8..a72fee672a2da10a620136d3b3ddfb0336b95969).,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-649491545,649491545,
hebasto,2020-06-25 16:42:08,"@vasild \n> Prefixed `salt_k0` and `salt_k1` with `m_` to abide to the naming convention. [diff](https://github.com/bitcoin/bitcoin/compare/7cc317285f388f0cda974a321761992248257fb8..a72fee672a2da10a620136d3b3ddfb0336b95969).\n\nIf some changes are made already, maybe make these ones ((https://github.com/bitcoin/bitcoin/pull/18722#discussion_r440238143), https://github.com/bitcoin/bitcoin/pull/1",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-649683708,649683708,
vasild,2020-06-25 18:18:05,"I forgot about those, sorry. Done now.\n\nSince the ACKs - renamed variables to follow convention, added `const`, moved `#include`s. [diff](https://github.com/bitcoin/bitcoin/compare/7cc317285f388f0cda974a321761992248257fb8..d6e782174)",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-649741403,649741403,
adamjonas,2020-08-14 01:30:30,"Updated benchmarking results (now with [nanobench](https://github.com/martinus/nanobench), which meant I had to look up what these categories represented). In sum, it looks like a performance upgrade, especially for `AddrManGetAddr` though the error rate did jump up for me and I had to run the PR version a bunch of times to get something stable while master was stable the first time (though readin",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-673809045,673809045,
vasild,2020-09-01 13:08:33,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-684839830,684839830,
jnewbery,2020-11-12 10:23:24,concept ACK. Will review after split-off when the pre-C++14 code is removed.,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-725986995,725986995,
vasild,2020-11-13 13:59:33,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-726779843,726779843,
vasild,2020-11-13 14:02:15,"Addressed a [nit](https://github.com/bitcoin/bitcoin/pull/18722#discussion_r487708556) and removed pre-C++14 code.\n\nThis should be merged only after `-std=c++17` becomes mandatory.",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-726781253,726781253,
vasild,2020-12-17 15:12:54,"> ... after `-std=c++17` becomes mandatory\n\nit is now",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-747498666,747498666,
vasild,2021-02-10 15:43:39,d517c9d37...6f0c9f539: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-776802497,776802497,
vasild,2021-05-21 11:25:54,"`6f0c9f5390...6a1a28f2ad`: rebased due to conflicts, plus add `m_net` to the `CNetAddr` hashing.",https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-845883260,845883260,
sipa,2021-05-21 17:43:35,utACK 6a1a28f2ad0d84bf30debbe94c5bd8db80a45702,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-846129577,846129577,
vasild,2021-05-24 08:40:00,`6a1a28f2ad...c22e98b30d`: address review suggestion,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-846883581,846883581,
vasild,2021-05-28 11:16:37,`c22e98b30d...1f4ee9c905`: rebase due to conflicts and address review suggestion,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-850345825,850345825,
vasild,2021-05-28 14:42:03,`1f4ee9c905...a92485b2c2`: address review suggestion,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-850468604,850468604,
jonatack,2021-05-28 17:30:45,ACK a92485b2c250fd18f55d22aa32722bf52ab32bfe,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-850566084,850566084,
achow101,2021-06-11 19:24:39,ACK a92485b2c250fd18f55d22aa32722bf52ab32bfe,https://github.com/bitcoin/bitcoin/pull/18722#issuecomment-859792458,859792458,
Empact,2020-04-21 17:17:43,nit: `using` and capitalize class,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r412342718,412342718,src/addrman.h
Empact,2020-04-21 17:23:31,nit: looks like you can move the `<map>` include to `addrman.cpp` now.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r412346830,412346830,src/addrman.h
vasild,2020-04-21 19:45:01,Done: https://github.com/bitcoin/bitcoin/pull/18722/commits/0c3becc83f2cd53ffb5495430d27380f6eda248a#diff-0681caa5b164f2de0cf944039f84b19aR184-R185,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r412442298,412442298,src/addrman.h
vasild,2020-04-21 19:55:39,"Right! And even better - `std::map` is only used inside `CAddrMan::Check_()` in a way that fits `unordered_map` better - we only insert elements, query elements by key and check container size.\n\nSo I changed `CAddrMan::Check_()` to use `unordered_(set|map)` and removed the `#include <map>`.",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r412448849,412448849,src/addrman.h
sipa,2020-04-27 17:40:36,You'll want to use a salted hash here (use CSipHasher from crypto/siphash.h or a specialization; see SaltedOutpointHasher in coins.h for inspiration). Otherwise an attacker may be able to degrade our performance by giving us a bunch of entries that all end up in the same bucket).,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r416016316,416016316,src/netaddress.h
sipa,2020-04-27 17:41:45,Nit: new code should use the coding style described in doc/developer-.nodes.md (e.g. `to_delete` instead).,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r416017144,416017144,src/addrman.h
vasild,2020-05-04 19:53:31,"Done, thanks for the suggestion!",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r419688805,419688805,src/netaddress.h
vasild,2020-05-04 19:53:37,Done,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r419688854,419688854,src/addrman.h
hebasto,2020-06-13 05:50:56,"```suggestion\n    const auto it = mapAddr.find(addr);\n```",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r439712259,439712259,src/addrman.cpp
hebasto,2020-06-13 05:51:27,"```suggestion\n    const auto it2 = mapInfo.find((*it).second);\n```",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r439712280,439712280,src/addrman.cpp
hebasto,2020-06-13 07:09:33,"Is this safe on 32-bit system (e.g., ARM7)?",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r439716624,439716624,src/netaddress.h
vasild,2020-06-15 14:55:57,"Yes, I think it is.\n\n`Finalize()` returns `uint64_t` and even if `size_t` is 32 bits, then it will just take ""half"" of the hash. [`SaltedOutpointHasher`](https://github.com/bitcoin/bitcoin/blob/1c86ed4/src/coins.h#L108) already does such a conversion from `uint64_t` to `size_t` and it contains some comment that `size_t` must be returned.",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r440236772,440236772,src/netaddress.h
vasild,2020-06-15 14:57:33,"Right, I will add the `const` if I end up modifying this PR for some bigger reason. But I think it is not worth invalidating the ACK.",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r440237953,440237953,src/addrman.cpp
vasild,2020-06-15 14:57:49,"Right, I will add the `const` if I end up modifying this PR for some bigger reason. But I think it is not worth invalidating the ACK.",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r440238143,440238143,src/addrman.cpp
hebasto,2020-06-25 10:01:32,"nit: All calls could be chained:\n```suggestion\n        return CSipHasher(salt_k0, salt_k1).Write(a.ip, sizeof(a.ip)).Finalize();\n```",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445447401,445447401,src/netaddress.h
hebasto,2020-06-25 10:02:12,nit: Class member naming convention?,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445447721,445447721,src/netaddress.h
vasild,2020-06-25 11:48:26,Right! A convention is a convention. Renamed.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445499195,445499195,src/netaddress.h
vasild,2020-06-25 11:51:38,"I actually find the 3-line variant easier to read (that could be subjective). The 3-line variant is more manageable wrt setting a breakpoint or reading a backtrace (e.g. if you only see it crashed on that multi-chained-line it wouldn't be clear whether it crashed in the constructor, in the `Write()` method or in the `Finalize()` method).\n\nI would prefer to leave it as is.",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445500725,445500725,src/netaddress.h
vasild,2020-06-25 18:15:01,Done.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445747902,445747902,src/addrman.cpp
vasild,2020-06-25 18:15:09,Done.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r445747996,445747996,src/addrman.cpp
hebasto,2020-09-12 17:33:10,nit: The latest rebasing destroyed alphabetic order of headers :),https://github.com/bitcoin/bitcoin/pull/18722#discussion_r487431133,487431133,src/netaddress.h
vasild,2020-09-14 07:18:45,"Fixed, someday we may consider to have an automated clang-format enforcement in CI...",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r487699523,487699523,src/netaddress.h
jonatack,2020-09-14 07:36:11,"nit if you retouch, inverse the order of these two `friend class` declarements (both for alphabetical order and code order of the two classes, below)",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r487708556,487708556,src/netaddress.h
vasild,2020-11-13 14:02:25,Done,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r522968314,522968314,src/netaddress.h
sipa,2021-05-20 20:40:15,Any reason to not include `m_net` as well?,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r636455097,636455097,src/netaddress.h
vasild,2021-05-21 11:24:16,"No. That code is from before `m_net` existed! I added it now, thanks!",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r636842389,636842389,src/netaddress.h
sipa,2021-05-21 17:29:05,Micronit: this reinterpret cast is a bit ugly. You could avoid it by just doing `hasher.Write(a.m_net);`; it'll interpret `a.m_net` as a uint64_t and use the optimized integer hasher.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r637088500,637088500,src/netaddress.h
vasild,2021-05-24 08:41:09,Done. I hope the implicit conversion from `int` to `uint64_t` will not upset some compiler.,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r637785372,637785372,src/netaddress.h
jonatack,2021-05-24 09:57:31,"The ugliness could maybe be considered a virtue; it's explicit that this is an *""on your head be it!""* type of cast and highlights that the code could ideally be improved. https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r637830174,637830174,src/netaddress.h
vasild,2021-05-24 10:10:26,Here we can do without a cast since there is `Write()` method that takes an integer argument (modulo `int` -> `uint64` conversion which is ok because we never pass negative values).,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r637837642,637837642,src/netaddress.h
hebasto,2021-05-24 11:54:33,"nit:\n```suggestion\n        for (auto it = mapInfo.cbegin(); it != mapInfo.cend(); ) {\n```",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r637891305,637891305,src/addrman.h
vasild,2021-05-28 11:11:54,"Done. Also, skipping the mention of `MapInfo` here makes it used in just one place. Dropped it and used `std::unordered_map<...` directly since there is no repetition of the tedious `std::unordered_map<...` now. Thanks!",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r641468473,641468473,src/addrman.h
jonatack,2021-05-28 12:42:45,"nit\n```diff\n-                auto itCopy = it++;\n+                const auto itCopy = it++;\n                 Delete(itCopy->first);\n-                nLostUnk++;\n+                ++nLostUnk;\n```\n",https://github.com/bitcoin/bitcoin/pull/18722#discussion_r641518411,641518411,src/addrman.h
vasild,2021-05-28 14:41:51,Done,https://github.com/bitcoin/bitcoin/pull/18722#discussion_r641604402,641604402,src/addrman.h
