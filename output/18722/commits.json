[
  {
    "sha": "a92485b2c250fd18f55d22aa32722bf52ab32bfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTI0ODViMmMyNTBmZDE4ZjU1ZDIyYWEzMjcyMmJmNTJhYjMyYmZl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-04-20T15:11:08Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-28T14:40:15Z"
      },
      "message": "addrman: use unordered_map instead of map\n\n`CAddrMan` uses `std::map` internally even though it does not require\nthat the map's elements are sorted. `std::map`'s access time is\n`O(log(map size))`. `std::unordered_map` is more suitable as it has a\n`O(1)` access time.\n\nThis patch lowers the execution times of `CAddrMan`'s methods as follows\n(as per `src/bench/addrman.cpp`):\n\n```\nAddrMan::Add(): -3.5%\nAddrMan::GetAddr(): -76%\nAddrMan::Good(): -0.38%\nAddrMan::Select(): -45%\n```",
      "tree": {
        "sha": "152c562ce3b0ac2e95f4b84061a3b05cf298506b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/152c562ce3b0ac2e95f4b84061a3b05cf298506b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a92485b2c250fd18f55d22aa32722bf52ab32bfe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmCxANAACgkQVN8G9ktV\ny78EJR/8CgF0x4mRGD6PKqfMXW480+cp250kQ/I+QpnnUeuegc2XIYWaGMqGo4Mx\nk2afn28R2C/1kc3SVuynbN3Fqjpd2+A40t4+wGi7m3BzvwWGwaIjhamOSwadiLAd\nTX0ySnQSNWhGZ2NE5tKmAyyAzxTGUlNvVYiik4rTO6Gkcauy08+Zm9kn21yZpqY/\nEXmYBIrOj5EHA/1a4frNQ1oiFW4XvBhzrRlzwTVaG/ChyR6qWFofMq5eYqeo/Gs7\n5JZ+AoR4ynYKIB6ij91V6TZgpjlfbTfRY1IRFAYNybx+5CSkFXxer1QLLnYkkpZL\nIwVAkRE2UdA47quBqMGT8ES2iPAhhCQwgPBFsoY6KQ6PiC6fqaWOexaVLi9sS8bX\nzW8Q2NDEzbR2y32Gy1JNathxRe9bt2KXKeNY32D2NTaNVeu6qu98lGtZRajYMOIK\n0/pYlUBGPqLIABghBEO4O7678J1dCO3s9jdHXVDn+EgWbTEYlqQ+FILiyfwnP1gc\ngldGz4SJcqF3I4UawPrOBE3M7ZGYEITMVN35FTwECQcPXTubsJxmSmoY1FzizMuj\ntbNYeVl/ujTN88Eod3vmJNGWcN0e57Qj7EKtQbXYczAH6uIDCqIlO1nKlRZoiceT\nwD/RZYsTHwPi8WhNAObBVeGo6i2zvJmMIHEwvtfhZNVy6Rb0g6VyAOo4Xl8NsOhE\nbxycNt8aZpN8Vuk3N3WvG3Vq9vm8UN4NTHBupI+wE7074aEm76HHgh6ov5oxsjjf\ngTvYInrZgAsYUYRcYjfFWHzg3PBfiHmmFHOFmnyKR1xXJyWvJfdQg/djdJ1HsIaH\nniNtgm68+IhPFPQZK/zG2BV9RxzQIMoWmI8iCp80AE0jlGC/8bWC9tIPWfy8f4SP\n0CXIHtVfNNWLxTeVCIHugYUN7m1TeS9TQHK7nQ37jvAvPkb66ksLG8Kmy0I8atXH\n2MzA6nYJltOTTD6Qdj9GC2wSiG7FtfWRsDyEC33feyoR4Q0spHY9w8h2/APylPhf\ntG9S7eFc6vNjp2ft4i22UWk7jmPB6dh2+pJHdgUdPcS0hfs3izWLds3MvvgDQl8i\noTudaADCSkwYoz2djkkdXFlLaIo9jIpecNA62Kv0YH0uaL0ICI3QxQ3Y8K5wpF3/\nvCwyZlPxlxpRQlk9tPmOUA0uy8pGGY/UM8U5Cad0twxE46AcA1Jr7dsxPouiV8xQ\nQJJzlm8GJ53vI9bBmYILIgwHvarrzFIugIloAsT3jvTShepQ2IIXF8SeaNztKeop\n1RFoNgI1qycXbVugiqMsd+AMRMw4DVuR0pfvGVxYsrFOxFGpUCDNAuuJrj+xdiEq\n78jqEbfnke/EFRnieYqhdTKbqX1ZiA==\n=JRx5\n-----END PGP SIGNATURE-----",
        "payload": "tree 152c562ce3b0ac2e95f4b84061a3b05cf298506b\nparent 8115c2ad7dc87cc37662421875b728ffc29aaffd\nauthor Vasil Dimov <vd@FreeBSD.org> 1587395468 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1622212815 +0200\n\naddrman: use unordered_map instead of map\n\n`CAddrMan` uses `std::map` internally even though it does not require\nthat the map's elements are sorted. `std::map`'s access time is\n`O(log(map size))`. `std::unordered_map` is more suitable as it has a\n`O(1)` access time.\n\nThis patch lowers the execution times of `CAddrMan`'s methods as follows\n(as per `src/bench/addrman.cpp`):\n\n```\nAddrMan::Add(): -3.5%\nAddrMan::GetAddr(): -76%\nAddrMan::Good(): -0.38%\nAddrMan::Select(): -45%\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92485b2c250fd18f55d22aa32722bf52ab32bfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a92485b2c250fd18f55d22aa32722bf52ab32bfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92485b2c250fd18f55d22aa32722bf52ab32bfe/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8115c2ad7dc87cc37662421875b728ffc29aaffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8115c2ad7dc87cc37662421875b728ffc29aaffd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8115c2ad7dc87cc37662421875b728ffc29aaffd"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 36,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bc5d87e5f185c77bbe8489640ce218632690894f",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a92485b2c250fd18f55d22aa32722bf52ab32bfe",
        "patch": "@@ -12,6 +12,8 @@\n \n #include <cmath>\n #include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool> &asmap) const\n {\n@@ -77,12 +79,12 @@ double CAddrInfo::GetChance(int64_t nNow) const\n \n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n-    std::map<CNetAddr, int>::iterator it = mapAddr.find(addr);\n+    const auto it = mapAddr.find(addr);\n     if (it == mapAddr.end())\n         return nullptr;\n     if (pnId)\n         *pnId = (*it).second;\n-    std::map<int, CAddrInfo>::iterator it2 = mapInfo.find((*it).second);\n+    const auto it2 = mapInfo.find((*it).second);\n     if (it2 != mapInfo.end())\n         return &(*it2).second;\n     return nullptr;\n@@ -408,8 +410,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n #ifdef DEBUG_ADDRMAN\n int CAddrMan::Check_()\n {\n-    std::set<int> setTried;\n-    std::map<int, int> mapNew;\n+    std::unordered_set<int> setTried;\n+    std::unordered_map<int, int> mapNew;\n \n     if (vRandom.size() != (size_t)(nTried + nNew))\n         return -7;"
      },
      {
        "sha": "4929fd2ecf1b49880e2e71763d5d4c543ea53e35",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a92485b2c250fd18f55d22aa32722bf52ab32bfe",
        "patch": "@@ -8,22 +8,22 @@\n \n #include <clientversion.h>\n #include <config/bitcoin-config.h>\n+#include <fs.h>\n+#include <hash.h>\n #include <netaddress.h>\n #include <protocol.h>\n #include <random.h>\n+#include <streams.h>\n #include <sync.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <util/system.h>\n \n-#include <fs.h>\n-#include <hash.h>\n #include <iostream>\n-#include <map>\n #include <optional>\n #include <set>\n #include <stdint.h>\n-#include <streams.h>\n+#include <unordered_map>\n #include <vector>\n \n /**\n@@ -251,7 +251,7 @@ class CAddrMan\n \n         int nUBuckets = ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30);\n         s << nUBuckets;\n-        std::map<int, int> mapUnkIds;\n+        std::unordered_map<int, int> mapUnkIds;\n         int nIds = 0;\n         for (const auto& entry : mapInfo) {\n             mapUnkIds[entry.first] = nIds;\n@@ -435,13 +435,13 @@ class CAddrMan\n \n         // Prune new entries with refcount 0 (as a result of collisions).\n         int nLostUnk = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); ) {\n+        for (auto it = mapInfo.cbegin(); it != mapInfo.cend(); ) {\n             if (it->second.fInTried == false && it->second.nRefCount == 0) {\n-                std::map<int, CAddrInfo>::const_iterator itCopy = it++;\n+                const auto itCopy = it++;\n                 Delete(itCopy->first);\n-                nLostUnk++;\n+                ++nLostUnk;\n             } else {\n-                it++;\n+                ++it;\n             }\n         }\n         if (nLost + nLostUnk > 0) {\n@@ -662,10 +662,10 @@ class CAddrMan\n     int nIdCount GUARDED_BY(cs);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+    std::unordered_map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n \n     //! randomly-ordered vector of all nIds\n     std::vector<int> vRandom GUARDED_BY(cs);"
      },
      {
        "sha": "5c2d68150b84b3ba6e7a0ae22d5c534dce3682b4",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92485b2c250fd18f55d22aa32722bf52ab32bfe/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=a92485b2c250fd18f55d22aa32722bf52ab32bfe",
        "patch": "@@ -11,7 +11,9 @@\n \n #include <attributes.h>\n #include <compat.h>\n+#include <crypto/siphash.h>\n #include <prevector.h>\n+#include <random.h>\n #include <serialize.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n@@ -254,6 +256,7 @@ class CNetAddr\n             }\n         }\n \n+        friend class CNetAddrHash;\n         friend class CSubNet;\n \n     private:\n@@ -477,6 +480,22 @@ class CNetAddr\n         }\n };\n \n+class CNetAddrHash\n+{\n+public:\n+    size_t operator()(const CNetAddr& a) const noexcept\n+    {\n+        CSipHasher hasher(m_salt_k0, m_salt_k1);\n+        hasher.Write(a.m_net);\n+        hasher.Write(a.m_addr.data(), a.m_addr.size());\n+        return static_cast<size_t>(hasher.Finalize());\n+    }\n+\n+private:\n+    const uint64_t m_salt_k0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    const uint64_t m_salt_k1 = GetRand(std::numeric_limits<uint64_t>::max());\n+};\n+\n class CSubNet\n {\n     protected:"
      }
    ]
  }
]