[
  {
    "sha": "dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmQxMzdhNGVhOGYxYjVkZmM1Y2RjNzJjZWU5OWM4ZjgzMjhiNzkz",
    "commit": {
      "author": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2019-06-14T11:50:12Z"
      },
      "committer": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2019-06-14T11:50:12Z"
      },
      "message": "Improve build-osx formatting",
      "tree": {
        "sha": "8ff12bd20884a35385d684f3288b3b513e0d393f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ff12bd20884a35385d684f3288b3b513e0d393f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7+97C5BqgmhVGzQ3/ph1GE19efcFAl0DifQACgkQ/ph1GE19\neffwMA//W8pHhf6lSpAAnKVZGL4+bHEVM+lqFiVoZcuHNThW91j5yLp/NwoT1i7w\ngS13RKNZ7FIz/raUSyXpoLS7dHzLrHqn92xcYyH19KZeNSZFsUvdOtFANw0Mfjwi\nwqoNKgpMX6QKnD4yr8QsvbcKVcv0O0BAyPMI0oI4d5mwNeHC+mCFQRHj4KuXOdKP\nK0/eR9qxdhjzB33hOvSfuyaY2q6CSGSQw0IUQ7yZFeyuKSZ9MZ7R8QH7WYemhCpU\nReMEbXwizwwjpNfIx1/e8j9GVAYby5IzTrJmQdmBdOQAnSLO8va7K23TGl8ZOI/r\nbOblmEBX8pf8su/LOZL9RxLalOMZHi16kcMWbdl4tR4fEzz/RnzI1hBo97qFB1jW\nLWLai+SYjMNic5ZrKlpcNvaTruXOwa1NefQykiO5ezbm39v0rkYbgDyybNkxXvwl\n4+KNQTt7fWzi1jWjlPU/gyac5hLW083lodu9pBF2Co4E6uGMFTAJZ+F3DL++ZRMa\nqV2slI5/x0yXryLfCGxhya+0WwfAGI05dhy6H8Oc0PsL7NA0kA2y9kiRjqGLVnjd\nFKbyYutLad3xQ2X/8k7GGNUWVxrJRS7QoBrSccSlqF5WqYFLrNpBiEz0sF2CMz92\n/oEitG/KnMJbEBGg/ZvPNkIdbcyqsi9j7yU2L5meTWaKllYNc5s=\n=NrW3\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ff12bd20884a35385d684f3288b3b513e0d393f\nparent c5ffe8d5155b21d0099259416436d09fc20d7017\nauthor Giulio Lombardo <giulio.lombardo@gmail.com> 1560513012 +0200\ncommitter Giulio Lombardo <giulio.lombardo@gmail.com> 1560513012 +0200\n\nImprove build-osx formatting\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793/comments",
    "author": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5ffe8d5155b21d0099259416436d09fc20d7017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ffe8d5155b21d0099259416436d09fc20d7017",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ffe8d5155b21d0099259416436d09fc20d7017"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 131,
      "deletions": 132
    },
    "files": [
      {
        "sha": "efe162683a9024f070802810d95eb8bd7435910d",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 131,
        "deletions": 132,
        "changes": 263,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=dbd137a4ea8f1b5dfc5cdc72cee99c8f8328b793",
        "patch": "@@ -1,33 +1,37 @@\n-macOS Build Instructions and Notes\n-====================================\n+# macOS Build Instructions and Notes\n+\n The commands in this guide should be executed in a Terminal application.\n-The built-in one is located in `/Applications/Utilities/Terminal.app`.\n+The built-in one is located in\n+```\n+/Applications/Utilities/Terminal.app\n+```\n \n-Preparation\n------------\n+## Preparation\n Install the macOS command line tools:\n \n-`xcode-select --install`\n+```shell\n+xcode-select --install\n+```\n \n When the popup appears, click `Install`.\n \n Then install [Homebrew](https://brew.sh).\n \n-Dependencies\n-----------------------\n-\n-    brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n+## Dependencies\n+```shell\n+brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n+```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n+```shell\n+brew install librsvg\n+```\n \n-    brew install librsvg\n-\n-Berkeley DB\n------------\n+## Berkeley DB\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n-you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n+you can use [this](/contrib/install_db4.sh) script to install it\n like so:\n \n ```shell\n@@ -38,172 +42,167 @@ from the root of the repository.\n \n **Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n \n-Build Bitcoin Core\n-------------------------\n+## Build Bitcoin Core\n \n 1. Clone the Bitcoin Core source code:\n-\n-        git clone https://github.com/bitcoin/bitcoin\n-        cd bitcoin\n+    ```shell\n+    git clone https://github.com/bitcoin/bitcoin\n+    cd bitcoin\n+    ```\n \n 2.  Build Bitcoin Core:\n \n     Configure and build the headless Bitcoin Core binaries as well as the GUI (if Qt is found).\n \n     You can disable the GUI build by passing `--without-gui` to configure.\n-\n-        ./autogen.sh\n-        ./configure\n-        make\n+    ```shell\n+    ./autogen.sh\n+    ./configure\n+    make\n+    ```\n \n 3.  It is recommended to build and run the unit tests:\n-\n-        make check\n-\n-4.  You can also create a .dmg that contains the .app bundle (optional):\n-\n-        make deploy\n-\n-Disable-wallet mode\n---------------------\n-When the intention is to run only a P2P node without a wallet, Bitcoin Core may be compiled in\n-disable-wallet mode with:\n-\n-    ./configure --disable-wallet\n+    ```shell\n+    make check\n+    ```\n+\n+4.  You can also create a  `.dmg` that contains the `.app` bundle (optional):\n+    ```shell\n+    make deploy\n+    ```\n+\n+## `disable-wallet` mode\n+When the intention is to run only a P2P node without a wallet, Bitcoin Core may be\n+compiled in `disable-wallet` mode with:\n+```shell\n+./configure --disable-wallet\n+```\n \n In this case there is no dependency on Berkeley DB 4.8.\n \n Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n \n-Running\n--------\n-\n+## Running\n Bitcoin Core is now available at `./src/bitcoind`\n \n Before running, you may create an empty configuration file:\n+```shell\n+mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n \n-    mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n-\n-    touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-    chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+```\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could take many hours, or even days on slower than average systems.\n+The first time you run bitcoind, it will start downloading the blockchain. This process could\n+take many hours, or even days on slower than average systems.\n \n You can monitor the download process by looking at the debug.log file:\n+```shell\n+tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n+```\n \n-    tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n-\n-Other commands:\n--------\n-\n-    ./src/bitcoind -daemon # Starts the bitcoin daemon.\n-    ./src/bitcoin-cli --help # Outputs a list of command-line options.\n-    ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n-\n-Notes\n------\n-\n-* Tested on OS X 10.10 Yosemite through macOS 10.13 High Sierra on 64-bit Intel processors only.\n-\n-* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)\n+## Other commands:\n+```shell\n+./src/bitcoind -daemon      # Starts the bitcoin daemon.\n+./src/bitcoin-cli --help    # Outputs a list of command-line options.\n+./src/bitcoin-cli help      # Outputs a list of RPC commands when the daemon is running.\n+```\n \n-Deterministic macOS DMG Notes\n------------------------------\n+## Notes\n+* Tested on OS X 10.10 Yosemite through macOS 10.14 Mojave on 64-bit Intel\n+processors only.\n+* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/issues/7714)\n \n-Working macOS DMGs are created in Linux by combining a recent clang,\n-the Apple binutils (ld, ar, etc) and DMG authoring tools.\n+## Deterministic macOS DMG Notes\n+Working macOS DMGs are created in Linux by combining a recent `clang`, the Apple\n+`binutils` (`ld`, `ar`, etc) and DMG authoring tools.\n \n-Apple uses clang extensively for development and has upstreamed the necessary\n-functionality so that a vanilla clang can take advantage. It supports the use\n-of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for macOS.\n+Apple uses `clang` extensively for development and has upstreamed the necessary\n+functionality so that a vanilla clang can take advantage. It supports the use of `-F`,\n+`-target`, `-mmacosx-version-min`, and `--sysroot`, which are all necessary when\n+building for macOS.\n \n-Apple's version of binutils (called cctools) contains lots of functionality\n-missing in the FSF's binutils. In addition to extra linker options for\n-frameworks and sysroots, several other tools are needed as well such as\n-install_name_tool, lipo, and nmedit. These do not build under linux, so they\n-have been patched to do so. The work here was used as a starting point:\n-[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n+Apple's version of `binutils` (called `cctools`) contains lots of functionality missing in the\n+FSF's `binutils`. In addition to extra linker options for frameworks and sysroots, several\n+other tools are needed as well such as `install_name_tool`, `lipo`, and `nmedit`. These\n+do not build under Linux, so they have been patched to do so. The work here was used as\n+a starting point: [mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n \n-In order to build a working toolchain, the following source packages are needed\n-from Apple: cctools, dyld, and ld64.\n+In order to build a working toolchain, the following source packages are needed from\n+Apple: `cctools`, `dyld`, and `ld64`.\n \n-These tools inject timestamps by default, which produce non-deterministic\n-binaries. The ZERO_AR_DATE environment variable is used to disable that.\n+These tools inject timestamps by default, which produce non-deterministic binaries. The\n+`ZERO_AR_DATE` environment variable is used to disable that.\n \n-This version of cctools has been patched to use the current version of clang's\n-headers and its libLTO.so rather than those from llvmgcc, as it was\n-originally done in toolchain4.\n+This version of `cctools` has been patched to use the current version of `clang`'s headers\n+and its `libLTO.so` rather than those from `llvmgcc`, as it was originally done in `toolchain4`.\n \n-To complicate things further, all builds must target an Apple SDK. These SDKs\n-are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n+To complicate things further, all builds must target an Apple SDK. These SDKs are free to\n+download, but not redistributable. To obtain it, register for an Apple Developer Account,\n+then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n \n-This file is several gigabytes in size, but only a single directory inside is\n-needed:\n+This file is several gigabytes in size, but only a single directory inside is needed:\n ```\n Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n ```\n \n-Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for Gitian input, there are two options:\n+Unfortunately, the usual Linux tools (7zip, hpmount, loopback mount) are incapable of\n+opening this file. To create a tarball suitable for Gitian input, there are two options:\n \n-Using macOS, you can mount the dmg, and then create it with:\n-```\n-  $ hdiutil attach Xcode_7.3.1.dmg\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+Using macOS, you can mount the DMG, and then create it with:\n+```shell\n+hdiutil attach Xcode_7.3.1.dmg\n+tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n ```\n \n-Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n-The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n-the dmg file is in the current directory, and then run the script. You may wish\n-to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n-you've confirmed the extraction succeeded.\n+Alternatively, you can use 7zip and SleuthKit to extract the files one by one. The script\n+[`extract-osx-sdk.sh`](./../contrib/macdeploy/extract-osx-sdk.sh) automates this. First\n+ensure the DMG file is in the current directory, and then run the script. You may wish to\n+delete the `intermediate 5.hfs` file and `MacOSX10.11.sdk` (the directory) when you've\n+confirmed the extraction succeeded.\n \n-```bash\n+```shell\n apt-get install p7zip-full sleuthkit\n contrib/macdeploy/extract-osx-sdk.sh\n rm -rf 5.hfs MacOSX10.11.sdk\n ```\n \n-The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n-which are created using these tools. The build process has been designed to\n-avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n-fully deterministic and may be freely redistributed.\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries which are\n+created using these tools. The build process has been designed to avoid including the\n+SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n+redistributed.\n \n-genisoimage is used to create the initial DMG. It is not deterministic as-is,\n-so it has been patched. A system genisoimage will work fine, but it will not\n-be deterministic because the file-order will change between invocations.\n-The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n-No effort was made to fix this cleanly, so it likely leaks memory badly. But\n-it's only used for a single invocation, so that's no real concern.\n+`genisoimage` is used to create the initial DMG. It is not deterministic as-is, so it has been\n+patched. A system `genisoimage` will work fine, but it will not be deterministic because\n+the file-order will change between invocations. The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n+No effort was made to fix this cleanly, so it likely leaks memory badly. But it's only used for\n+a single invocation, so that's no real concern.\n \n-genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n-libdmg-hfsplus project is used to compress it. There are several bugs in this\n-tool and its maintainer has seemingly abandoned the project. It has been forked\n-and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n+`genisoimage` cannot compress DMGs, so afterwards, the DMG tool from the\n+`libdmg-hfsplus` project is used to compress it. There are several bugs in this tool and its\n+maintainer has seemingly abandoned the project. It has been forked and is available\n+(with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n \n-The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n-functionality is broken. Only the compression feature is currently used.\n-Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n+The DMG tool has the ability to create DMGs from scratch as well, but this functionality is\n+broken. Only the compression feature is currently used. Ideally, the creation could be fixed\n+and `genisoimage` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-.DS_Store before creation. This is generated by the script\n-contrib/macdeploy/custom_dsstore.py.\n-\n-As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a\n-requirement in order to satisfy the new Gatekeeper requirements. Because this\n-private key cannot be shared, we'll have to be a bit creative in order for the\n-build process to remain somewhat deterministic. Here's how it works:\n-\n-- Builders use Gitian to create an unsigned release. This outputs an unsigned\n-  dmg which users may choose to bless and run. It also outputs an unsigned app\n-  structure in the form of a tarball, which also contains all of the tools\n-  that have been previously (deterministically) built in order to create a\n-  final dmg.\n-- The Apple keyholder uses this unsigned app to create a detached signature,\n-  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Gitian. It\n-  uses the pre-built tools to recombine the pieces into a deterministic dmg.\n+`.DS_Store` before creation. This is generated by the script\n+`contrib/macdeploy/custom_dsstore.py`.\n+\n+As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n+order to satisfy the new Gatekeeper requirements. Because this private key cannot be\n+shared, we'll have to be a bit creative in order for the build process to remain somewhat\n+deterministic. Here's how it works:\n+\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n+  users may choose to bless and run. It also outputs an unsigned app structure in the form\n+  of a tarball, which also contains all of the tools that have been previously (deterministically)\n+  built in order to create a final DMG.\n+- The Apple keyholder uses this unsigned app to create a detached signature, using the\n+  script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n+- Builders feed the unsigned app + detached signature back into Gitian. It uses the\n+  pre-built tools to recombine the pieces into a deterministic DMG.\n "
      }
    ]
  }
]