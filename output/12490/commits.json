[
  {
    "sha": "df905e390e5f8b0201bda62c55227e9dc85194cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjkwNWUzOTBlNWY4YjAyMDFiZGE2MmM1NTIyN2U5ZGM4NTE5NGNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-20T14:02:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T18:36:08Z"
      },
      "message": "[rpc] Remove deprecated validateaddress usage.",
      "tree": {
        "sha": "7fe907160fd8e1c0b252fdf53be79b95ecd50b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe907160fd8e1c0b252fdf53be79b95ecd50b0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df905e390e5f8b0201bda62c55227e9dc85194cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df905e390e5f8b0201bda62c55227e9dc85194cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df905e390e5f8b0201bda62c55227e9dc85194cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df905e390e5f8b0201bda62c55227e9dc85194cd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f180e81d5780805a28bcc71c2bb6b16076336c3c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 8,
      "deletions": 30
    },
    "files": [
      {
        "sha": "3668b0cd046108b2e99fa5dea5c4c37c09d89a35",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 23,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df905e390e5f8b0201bda62c55227e9dc85194cd/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df905e390e5f8b0201bda62c55227e9dc85194cd/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=df905e390e5f8b0201bda62c55227e9dc85194cd",
        "patch": "@@ -19,11 +19,6 @@\n #include <timedata.h>\n #include <util.h>\n #include <utilstrencodings.h>\n-#ifdef ENABLE_WALLET\n-#include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n-#include <wallet/walletdb.h>\n-#endif\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -67,29 +62,18 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n+        std::string currentAddress = EncodeDestination(dest);\n+        ret.pushKV(\"address\", currentAddress);\n \n-#ifdef ENABLE_WALLET\n-        if (HasWallets() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n-            ret.pushKVs(getaddressinfo(request));\n-        }\n-#endif\n-        if (ret[\"address\"].isNull()) {\n-            std::string currentAddress = EncodeDestination(dest);\n-            ret.pushKV(\"address\", currentAddress);\n-\n-            CScript scriptPubKey = GetScriptForDestination(dest);\n-            ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        CScript scriptPubKey = GetScriptForDestination(dest);\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-            UniValue detail = DescribeAddress(dest);\n-            ret.pushKVs(detail);\n-        }\n+        UniValue detail = DescribeAddress(dest);\n+        ret.pushKVs(detail);\n     }\n     return ret;\n }\n \n-// Needed even with !ENABLE_WALLET, to pass (ignored) pointers around\n-class CWallet;\n-\n static UniValue createmultisig(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -461,7 +445,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          {\"mode\"} },\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n-    { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} }, /* uses wallet if enabled */\n+    { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },"
      },
      {
        "sha": "58074803ccd7bcf669852b3330333b65d0c4697f",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df905e390e5f8b0201bda62c55227e9dc85194cd/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df905e390e5f8b0201bda62c55227e9dc85194cd/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=df905e390e5f8b0201bda62c55227e9dc85194cd",
        "patch": "@@ -18,13 +18,7 @@ def run_test(self):\n         # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-\n-        self.log.info(\"Test validateaddress deprecation\")\n-        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\"  # This is just some random address to pass as a parameter to validateaddress\n-        dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n-        assert \"ismine\" not in dep_validate_address\n-        not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n-        assert \"ismine\" in not_dep_val\n+        pass\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGM4MzQwODlhM2ZmNmViODI0M2NmN2YzMzNkMmMyY2Q5YWUzNjI2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-06T15:49:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T18:36:12Z"
      },
      "message": "[RPC] Remove warning about wallet addresses in createmultisig()\n\ncreatemultisig() was updated in V0.16 to not use the wallet. Warning\ntext was included to warn the user. Remove that now.",
      "tree": {
        "sha": "a31e42e8ffc736e6d5b16f0391a3ac2f7a195142",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31e42e8ffc736e6d5b16f0391a3ac2f7a195142"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df905e390e5f8b0201bda62c55227e9dc85194cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df905e390e5f8b0201bda62c55227e9dc85194cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df905e390e5f8b0201bda62c55227e9dc85194cd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7d05cef1142950b4778cafce922b021a60a3178",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
        "patch": "@@ -114,8 +114,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n         if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys[i].get_str()));\n         } else {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\nNote that from v0.16, createmultisig no longer accepts addresses.\"\n-            \" Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.\", keys[i].get_str()));\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\n.\", keys[i].get_str()));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "f7e9e704683be4d6be4c9ea600a479bc02976313",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2U5ZTcwNDY4M2JlNGQ2YmU0YzllYTYwMGE0NzliYzAyOTc2MzEz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-20T14:15:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T18:36:12Z"
      },
      "message": "[rpc] Remove deprecated sigrawtransaction rpc method.",
      "tree": {
        "sha": "2cff9c7bb3fe0da6bbe515f18558ed7c0eb0a991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cff9c7bb3fe0da6bbe515f18558ed7c0eb0a991"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7e9e704683be4d6be4c9ea600a479bc02976313",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e9e704683be4d6be4c9ea600a479bc02976313",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7e9e704683be4d6be4c9ea600a479bc02976313",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7e9e704683be4d6be4c9ea600a479bc02976313/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c834089a3ff6eb8243cf7f333d2c2cd9ae3626"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 9,
      "deletions": 118
    },
    "files": [
      {
        "sha": "93d4acdf1ffe25d73ecc54b9547ed32b8b2aba63",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 105,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e9e704683be4d6be4c9ea600a479bc02976313/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e9e704683be4d6be4c9ea600a479bc02976313/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f7e9e704683be4d6be4c9ea600a479bc02976313",
        "patch": "@@ -27,9 +27,6 @@\n #include <txmempool.h>\n #include <uint256.h>\n #include <utilstrencodings.h>\n-#ifdef ENABLE_WALLET\n-#include <wallet/rpcwallet.h>\n-#endif\n \n #include <future>\n #include <stdint.h>\n@@ -824,8 +821,7 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n                 view.AddCoin(out, std::move(newcoin), true);\n             }\n \n-            // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the keystore so it can be signed:\n+            // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n             if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n@@ -980,102 +976,10 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n \n UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n-#ifdef ENABLE_WALLET\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n-            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n-            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n-    JSONRPCRequest new_request;\n-    new_request.id = request.id;\n-    new_request.params.setArray();\n-\n-    // For signing with private keys\n-    if (!request.params[2].isNull()) {\n-        new_request.params.push_back(request.params[0]);\n-        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n-        new_request.params.push_back(request.params[2]);\n-        new_request.params.push_back(request.params[1]);\n-        new_request.params.push_back(request.params[3]);\n-        return signrawtransactionwithkey(new_request);\n-    } else {\n-#ifdef ENABLE_WALLET\n-        // Otherwise sign with the wallet which does not take a privkeys parameter\n-        new_request.params.push_back(request.params[0]);\n-        new_request.params.push_back(request.params[1]);\n-        new_request.params.push_back(request.params[3]);\n-        return signrawtransactionwithwallet(new_request);\n-#else\n-        // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n-#endif\n-    }\n+    // This method should be removed entirely in V0.19, along with the entries in the\n+    // CRPCCommand table and rpc/client.cpp.\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction was removed in v0.18.\\n\"\n+        \"Clients should transition to using signrawtransactionwithkey and signrawtransactionwithwallet\");\n }\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)\n@@ -1084,7 +988,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n-            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+            \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n             \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n@@ -1094,7 +998,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             \"\\nCreate a transaction\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n             \"Sign the transaction, and get back the hex\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n             \"\\nSend the transaction (signed hex)\\n\"\n             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n@@ -1199,7 +1103,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             \"\\nCreate a transaction\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n             \"Sign the transaction, and get back the hex\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n             \"\\nTest acceptance of the transaction (signed hex)\\n\"\n             + HelpExampleCli(\"testmempoolaccept\", \"\\\"signedhex\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n@@ -1808,7 +1712,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"hidden\",             \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n     { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"decodepsbt\",                   &decodepsbt,                {\"psbt\"} },"
      },
      {
        "sha": "f6eea1a0276fc4ed2a08ede9423840b3171d6106",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e9e704683be4d6be4c9ea600a479bc02976313/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e9e704683be4d6be4c9ea600a479bc02976313/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=f7e9e704683be4d6be4c9ea600a479bc02976313",
        "patch": "@@ -42,10 +42,6 @@ def successful_signing_test(self):\n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n-        # Perform the same test on signrawtransaction\n-        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n-        assert_equal(rawTxSigned, rawTxSigned2)\n-\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -112,10 +108,6 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n-        # Perform same test with signrawtransaction\n-        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n-        assert_equal(rawTxSigned, rawTxSigned2)\n-\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n@@ -140,10 +132,6 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n-        # Perform same test with signrawtransaction\n-        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n-        assert_equal(rawTxSigned, rawTxSigned2)\n-\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      },
      {
        "sha": "3972baed1d49687e25bd5f9757af9a8dea2f8a2e",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7e9e704683be4d6be4c9ea600a479bc02976313/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7e9e704683be4d6be4c9ea600a479bc02976313/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=f7e9e704683be4d6be4c9ea600a479bc02976313",
        "patch": "@@ -25,7 +25,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\"\n     \"qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\"\n     \"qt/walletmodel -> qt/walletmodeltransaction -> qt/walletmodel\"\n-    \"rpc/rawtransaction -> wallet/rpcwallet -> rpc/rawtransaction\"\n     \"txmempool -> validation -> txmempool\"\n     \"validation -> validationinterface -> validation\"\n     \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\""
      }
    ]
  }
]