[
  {
    "sha": "50930536773fd17012e526cd0af8349f0c75c717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDkzMDUzNjc3M2ZkMTcwMTJlNTI2Y2QwYWY4MzQ5ZjBjNzVjNzE3",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-25T14:13:15Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-25T14:13:15Z"
      },
      "message": "Replace static with anonymous namespaces.\n\nUse anonymous namespaces in some places instead of the static keyword.\nBoth result in internal linkage, but anonymous namespaces are a more\nmodern way to do it.",
      "tree": {
        "sha": "f71bba17cfe77b9cf235d7e14249b1a44a10a9eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f71bba17cfe77b9cf235d7e14249b1a44a10a9eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50930536773fd17012e526cd0af8349f0c75c717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50930536773fd17012e526cd0af8349f0c75c717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50930536773fd17012e526cd0af8349f0c75c717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50930536773fd17012e526cd0af8349f0c75c717/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d14ef5721ffcf07321704dc21f1ab9df4952a44d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "bf6314a5dc0dbc0efd0a8bb0338da96aaa12b654",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50930536773fd17012e526cd0af8349f0c75c717/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50930536773fd17012e526cd0af8349f0c75c717/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=50930536773fd17012e526cd0af8349f0c75c717",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -135,19 +135,23 @@ struct HTTPPathHandler\n \n /** HTTP module state */\n \n+namespace {\n+\n //! libevent event loop\n-static struct event_base* eventBase = nullptr;\n+struct event_base* eventBase = nullptr;\n //! HTTP server\n struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n-static std::vector<CSubNet> rpc_allow_subnets;\n+std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = nullptr;\n+WorkQueue<HTTPClosure>* workQueue = nullptr;\n //! Handlers for (sub)paths\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n std::vector<evhttp_bound_socket *> boundSockets;\n \n+} // anonymous namespace\n+\n /** Check if a network address is allowed to access the HTTP server */\n static bool ClientAllowed(const CNetAddr& netaddr)\n {"
      },
      {
        "sha": "3359df452c639cbccba5559db1d8e20c8dc34290",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50930536773fd17012e526cd0af8349f0c75c717/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50930536773fd17012e526cd0af8349f0c75c717/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=50930536773fd17012e526cd0af8349f0c75c717",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,14 +22,16 @@\n #include <memory> // for unique_ptr\n #include <unordered_map>\n \n-static CCriticalSection cs_rpcWarmup;\n-static std::atomic<bool> g_rpc_running{false};\n-static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n-static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";\n+namespace {\n+\n+CCriticalSection cs_rpcWarmup;\n+std::atomic<bool> g_rpc_running{false};\n+bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n+std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";\n /* Timer-creating functions */\n-static RPCTimerInterface* timerInterface = nullptr;\n+RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n-static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n \n struct RPCCommandExecutionInfo\n {\n@@ -43,7 +45,7 @@ struct RPCServerInfo\n     std::list<RPCCommandExecutionInfo> active_commands GUARDED_BY(mutex);\n };\n \n-static RPCServerInfo g_rpc_server_info;\n+RPCServerInfo g_rpc_server_info;\n \n struct RPCCommandExecution\n {\n@@ -60,12 +62,14 @@ struct RPCCommandExecution\n     }\n };\n \n-static struct CRPCSignals\n+struct CRPCSignals\n {\n     boost::signals2::signal<void ()> Started;\n     boost::signals2::signal<void ()> Stopped;\n } g_rpcSignals;\n \n+} // anonymous namespace\n+\n void RPCServer::OnStarted(std::function<void ()> slot)\n {\n     g_rpcSignals.Started.connect(slot);"
      }
    ]
  },
  {
    "sha": "79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWVlYWE0OGU4ZmMxZTE3OGJkOGE5NWU4ZjJiZTY2YjNiNTU2MzI0",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-25T14:14:55Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-28T09:27:21Z"
      },
      "message": "Use real HTTP bind address in curl RPC help.\n\nThis change exposes the bind address (one of them if multiple) of the HTTP\nserver.  This allows us to use a real bind address in the \"curl\" example\nin RPC help texts.\n\nIn particular, this now reports the correct port if it was either\nexplicitly changed through -rpcport or is from a different chain than\nmainnet.",
      "tree": {
        "sha": "e188cdf31d0b46640da8415525b3d4cec2b5f111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e188cdf31d0b46640da8415525b3d4cec2b5f111"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50930536773fd17012e526cd0af8349f0c75c717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50930536773fd17012e526cd0af8349f0c75c717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50930536773fd17012e526cd0af8349f0c75c717"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 59,
      "deletions": 7
    },
    "files": [
      {
        "sha": "08340a123cef9f21bb25a1fc80c226ce23504fee",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -240,6 +240,11 @@ bool StartHTTPRPC()\n     if (!InitRPCAuthentication())\n         return false;\n \n+    std::string bindAddress;\n+    if (GetHTTPBindAddress(bindAddress)) {\n+        SetRPCHelpAddress(bindAddress);\n+    }\n+\n     RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n     if (g_wallet_init_interface.HasWalletSupport()) {\n         RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);"
      },
      {
        "sha": "f456b3da9ad6d4acf0bfa5131e88a8fb0e2e7a87",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -15,6 +15,7 @@\n #include <ui_interface.h>\n \n #include <memory>\n+#include <sstream>\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n@@ -149,6 +150,8 @@ WorkQueue<HTTPClosure>* workQueue = nullptr;\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n std::vector<evhttp_bound_socket *> boundSockets;\n+//! One bind address of the server (if not empty)\n+std::string bindAddress;\n \n } // anonymous namespace\n \n@@ -331,6 +334,10 @@ static bool HTTPBindAddresses(struct evhttp* http)\n                 LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n             boundSockets.push_back(bind_handle);\n+\n+            std::ostringstream addressStr;\n+            addressStr << \"http://\" << i->first << \":\" << i->second;\n+            bindAddress = addressStr.str();\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n@@ -461,6 +468,7 @@ void StopHTTPServer()\n         delete workQueue;\n         workQueue = nullptr;\n     }\n+    bindAddress.clear();\n     // Unlisten sockets, these are what make the event loop running, which means\n     // that after this and all connections are closed the event loop will quit.\n     for (evhttp_bound_socket *socket : boundSockets) {\n@@ -482,6 +490,15 @@ void StopHTTPServer()\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n \n+bool GetHTTPBindAddress(std::string& address)\n+{\n+    if (bindAddress.empty()) {\n+        return false;\n+    }\n+    address = bindAddress;\n+    return true;\n+}\n+\n struct event_base* EventBase()\n {\n     return eventBase;"
      },
      {
        "sha": "e483a1c5584c4fcd70ca72dd7b5e2343892928ae",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,6 +32,12 @@ void InterruptHTTPServer();\n /** Stop HTTP server */\n void StopHTTPServer();\n \n+/**\n+ * Tries to get (one) address at which the HTTP server is bound.  Returns\n+ * false if the server is not bound anywhere at the moment.\n+ */\n+bool GetHTTPBindAddress(std::string& address);\n+\n /** Change logging level for libevent. Removes BCLog::LIBEVENT from log categories if\n  * libevent doesn't support debug logging.*/\n bool UpdateHTTPServerLogging(bool enable);"
      },
      {
        "sha": "123ff4b73fe9e60db3ed742a1cdda3947db7f85f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -20,6 +20,7 @@\n #include <boost/algorithm/string/split.hpp>\n \n #include <memory> // for unique_ptr\n+#include <sstream>\n #include <unordered_map>\n \n namespace {\n@@ -33,6 +34,9 @@ RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n \n+/** The bind address that is used for the RPC help example.  */\n+std::string rpcHelpBindAddress = \"http://localhost:8336\";\n+\n struct RPCCommandExecutionInfo\n {\n     std::string method;\n@@ -405,6 +409,11 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n+void SetRPCHelpAddress(const std::string& address)\n+{\n+    rpcHelpBindAddress = address;\n+}\n+\n void JSONRPCRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n@@ -571,8 +580,14 @@ std::string HelpExampleCli(const std::string& methodname, const std::string& arg\n \n std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n {\n-    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n-        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n+    std::ostringstream helpText;\n+    helpText << \"> curl --user myusername --data-binary \"\n+             << \"'{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n+             << \"\\\"method\\\": \\\"\" + methodname + \"\\\", \"\n+             << \"\\\"params\\\": [\" + args + \"] }' \"\n+             << \"-H 'content-type: text/plain;' \"\n+             << rpcHelpBindAddress << \"\\n\";\n+    return helpText.str();\n }\n \n void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)"
      },
      {
        "sha": "b1de80a4aed402814367ffb83f470f00d61ff8a4",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -65,6 +65,9 @@ void SetRPCWarmupFinished();\n /* returns the current warmup state.  */\n bool RPCIsInWarmup(std::string *outStatus);\n \n+/** Sets the bind address to use in the RPC help examples.  */\n+void SetRPCHelpAddress(const std::string& address);\n+\n /**\n  * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n  * the right number of arguments are passed, just that any passed are the correct type."
      },
      {
        "sha": "e0772ec63388b0b33874f3fb35bb18996ce66b76",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79eeaa48e8fc1e178bd8a95e8f2be66b3b556324/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=79eeaa48e8fc1e178bd8a95e8f2be66b3b556324",
        "patch": "@@ -1,13 +1,14 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, assert_raises_rpc_error, rpc_port\n \n import os\n+import re\n \n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -16,6 +17,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.test_categories()\n+        self.test_example_bind_address()\n         self.dump_help()\n \n     def test_categories(self):\n@@ -43,6 +45,10 @@ def test_categories(self):\n \n         assert_equal(titles, components)\n \n+    def test_example_bind_address(self):\n+        help_text = self.nodes[0].help('getblockchaininfo')\n+        assert re.search('curl .* http://127.0.0.1:%d' % rpc_port(0), help_text) is not None\n+\n     def dump_help(self):\n         dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')\n         os.mkdir(dump_dir)"
      }
    ]
  }
]