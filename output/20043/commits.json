[
  {
    "sha": "faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY2MGRlZTM0YWUzZGJlOGUxMDNhMmMxYjA2NzlmMTNkZjZhOTIx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-30T07:20:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-30T07:28:33Z"
      },
      "message": "doc: Remove double-whitespace from help string, other whitespace fixups",
      "tree": {
        "sha": "9ae97e84862cfb77da6739b475403efebf6422bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ae97e84862cfb77da6739b475403efebf6422bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUghEAv+Ll25bcAMDFZQc2+omM37a8UX1nNfsn/QIh24Uslt/n5B1WXaWFA1wEMq\n1nfHBlkzfaA6lypnZOZ3Jf2IT1ax0VVmqllllnh8xocNCWyvbYw15a/F/5pBMVH9\nV4NxObjoFiI7SCyWqvBgavbjM60h6lIOiHcLbLxF/3O5XYpLKeA/nbic1McsrNW/\nB7ztllxInwAUUhXL/H7LrTA9UJgbiSwX25n9KNV7UfyLLyS7gLkZn/Mx1j8Tcknv\nOubWeX6M9ARL+wWv8jEKv1mNoyHtfzLTa4TiD4T6GwGGwTD7zVyvECXtSp5++EQa\nr33VLO6QDh/u33I1vwvF6ecmzY20hCBaXaScaagC7OEZC2/ZzvBZvLVWdS7r4mso\n1S0Nb36+XQcs2uE763uLl73exfHMQCQg5FpgrCNCA5SRe0R60hCrUuaDxn4BIskC\nWV2S27KpcnFPQa0Q6akbzbHXglrrV7dUr2h3CYucAZUFEavdTBM/NgRRhySAmXXm\ndAFiDrmg\n=FRvD\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ae97e84862cfb77da6739b475403efebf6422bf\nparent 1769828684f16b53e5fbf65173f508b9ea1b4b9c\nauthor MarcoFalke <falke.marco@gmail.com> 1601450437 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601450913 +0200\n\ndoc: Remove double-whitespace from help string, other whitespace fixups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf60dee34ae3dbe8e103a2c1b0679f13df6a921/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1769828684f16b53e5fbf65173f508b9ea1b4b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1769828684f16b53e5fbf65173f508b9ea1b4b9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1769828684f16b53e5fbf65173f508b9ea1b4b9c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 39,
      "deletions": 38
    },
    "files": [
      {
        "sha": "10af5c36c8ffc09a498292b32c71b00e33ac67c6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf60dee34ae3dbe8e103a2c1b0679f13df6a921/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf60dee34ae3dbe8e103a2c1b0679f13df6a921/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
        "patch": "@@ -433,18 +433,18 @@ static RPCHelpMan sendtoaddress()\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n                     {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n-            \"                             This is not part of the transaction, just kept in your wallet.\"},\n+                                         \"This is not part of the transaction, just kept in your wallet.\"},\n                     {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n-            \"                             to which you're sending the transaction. This is not part of the \\n\"\n-            \"                             transaction, just kept in your wallet.\"},\n+                                         \"to which you're sending the transaction. This is not part of the \\n\"\n+                                         \"transaction, just kept in your wallet.\"},\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n-            \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n+                                         \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n-            \"                             dirty if they have previously been used in a transaction.\"},\n+                                         \"dirty if they have previously been used in a transaction.\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra information about the transaction.\"},\n                 },\n                 {\n@@ -860,9 +860,9 @@ static RPCHelpMan sendmany()\n                     {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n                     {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n                     {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The addresses.\\n\"\n-            \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n-            \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-            \"                           If no addresses are specified here, the sender pays the fee.\",\n+                                       \"The fee will be equally deducted from the amount of each selected address.\\n\"\n+                                       \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                       \"If no addresses are specified here, the sender pays the fee.\",\n                         {\n                             {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n                         },\n@@ -875,7 +875,7 @@ static RPCHelpMan sendmany()\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n-                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only  1 transaction is created regardless of\\n\"\n+                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n                 \"the number of addresses.\"\n                     },\n                     RPCResult{\"if verbose is set to true\",\n@@ -1513,7 +1513,7 @@ static RPCHelpMan listsinceblock()\n                     {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                     {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n-            \"                                                           (not guaranteed to work on pruned nodes)\"},\n+                                                                       \"(not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -2832,7 +2832,7 @@ static RPCHelpMan listunspent()\n                         },\n                     },\n                     {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n-            \"                  See description of \\\"safe\\\" attribute below.\"},\n+                              \"See description of \\\"safe\\\" attribute below.\"},\n                     {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n                         {\n                             {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n@@ -3196,15 +3196,15 @@ static RPCHelpMan fundrawtransaction()\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n-                            \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n-                            \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                            \"                              If no outputs are specified here, the sender pays the fee.\",\n+                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                                          \"If no outputs are specified here, the sender pays the fee.\",\n                                 {\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n                             {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n@@ -3384,15 +3384,15 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n                     {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n-    \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n+                             \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n                              \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n-    \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n-    \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n-    \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n-    \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-    \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-    \"                         are replaceable).\"},\n+                             \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+                             \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+                             \"original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+                             \"so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+                             \"still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n+                             \"are replaceable).\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n     \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n@@ -3774,7 +3774,7 @@ RPCHelpMan getaddressinfo()\n                         {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program.\"},\n                         {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program.\"},\n                         {RPCResult::Type::STR, \"script\", /* optional */ true, \"The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n-            \"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n+                                                                     \"types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n                             \"witness_v0_scripthash, witness_unknown.\"},\n                         {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The redeemscript for the p2sh address.\"},\n                         {RPCResult::Type::ARR, \"pubkeys\", /* optional */ true, \"Array of pubkeys associated with the known redeemscript (only if script is multisig).\",\n@@ -3993,7 +3993,7 @@ static RPCHelpMan send()\n         \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n         \"\\nSend a transaction.\\n\",\n         {\n-            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A JSON array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                     \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                     \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n                 {\n@@ -4044,7 +4044,7 @@ static RPCHelpMan send()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n-                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                                                  \"Allows this transaction to be replaced by a transaction with higher fees\"},\n                 },\n                 \"options\"},\n         },\n@@ -4174,11 +4174,11 @@ static RPCHelpMan sethdseed()\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n                     {\"newkeypool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n-            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n-            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n-            \"                             keypool will be used until it has been depleted.\"},\n+                                         \"If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+                                         \"If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n+                                         \"keypool will be used until it has been depleted.\"},\n                     {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n-            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n+                                         \"The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n@@ -4323,7 +4323,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                     {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-                            \"                             accepted as second parameter.\",\n+                            \"accepted as second parameter.\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -4348,15 +4348,15 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The outputs to subtract the fee from.\\n\"\n-                            \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n-                            \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                            \"                              If no outputs are specified here, the sender pays the fee.\",\n+                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                                          \"If no outputs are specified here, the sender pays the fee.\",\n                                 {\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n-                            \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n                             {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fall back to wallet's confirmation target (txconfirmtarget)\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},"
      },
      {
        "sha": "689a0fa4df232dc267d4c2288a3f2735f4642992",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf60dee34ae3dbe8e103a2c1b0679f13df6a921/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf60dee34ae3dbe8e103a2c1b0679f13df6a921/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
        "patch": "@@ -663,15 +663,16 @@ def run_test(self):\n \n         self.log.info(\"Test send* RPCs with verbose=True\")\n         address = self.nodes[0].getnewaddress(\"test\")\n-        txid_feeReason_one = self.nodes[2].sendtoaddress(address = address, amount = 5, verbose = True)\n+        txid_feeReason_one = self.nodes[2].sendtoaddress(address=address, amount=5, verbose=True)\n         assert_equal(txid_feeReason_one[\"fee_reason\"], \"Fallback fee\")\n-        txid_feeReason_two = self.nodes[2].sendmany(dummy = '', amounts = {address: 5}, verbose = True)\n+        txid_feeReason_two = self.nodes[2].sendmany(dummy='', amounts={address: 5}, verbose=True)\n         assert_equal(txid_feeReason_two[\"fee_reason\"], \"Fallback fee\")\n         self.log.info(\"Test send* RPCs with verbose=False\")\n-        txid_feeReason_three = self.nodes[2].sendtoaddress(address = address, amount = 5, verbose = False)\n+        txid_feeReason_three = self.nodes[2].sendtoaddress(address=address, amount=5, verbose=False)\n         assert_equal(self.nodes[2].gettransaction(txid_feeReason_three)['txid'], txid_feeReason_three)\n-        txid_feeReason_four = self.nodes[2].sendmany(dummy = '', amounts = {address: 5}, verbose = False)\n+        txid_feeReason_four = self.nodes[2].sendmany(dummy='', amounts={address: 5}, verbose=False)\n         assert_equal(self.nodes[2].gettransaction(txid_feeReason_four)['txid'], txid_feeReason_four)\n \n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "fa710a6d67b2de64bde90def77c70d0a052f9030",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTcxMGE2ZDY3YjJkZTY0YmRlOTBkZWY3N2M3MGQwYTA1MmY5MDMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-30T07:19:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-30T07:28:50Z"
      },
      "message": "doc: Add 19501 release notes",
      "tree": {
        "sha": "4fdf485398bc0c89c4f73d4f713b3386b9a833a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fdf485398bc0c89c4f73d4f713b3386b9a833a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa710a6d67b2de64bde90def77c70d0a052f9030",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiMyAv+M30nsIY95zsLFF7I+vBQQOor5JJG2KxliJCZPATO0cuwzwH0wyJdP4n1\nzp3w3DbM+5v7St92smIYuB0+FD3fpHpjF4HDS3e5eIHIQE7fM+vU2AyeQBNpuiFq\ntGSO7b02fU11PoW20C3sxoYbpcHniQUIGlohwVmgrY9PW9cVSUC3gFUws+fK0EB1\nliTnqS+WJLhjkyt0Dfn/AvbHIgGYQp/nq1iKSy4mgT3XGrdoS+PJEkUybnLqY/Tq\nMjq//sbSspAR9cGwgu7SHmyuLB4IARXs6DX5l2a39TvD+WEa0tFSv0KUc4/IkhKQ\nw1njtKHLv1SFFxznWS9VOh1hQ6bSlZw+lrqKSkZFESFFGIt7jLoeCAZ+wBL3e1aI\n2MhtNZ6K1x7MrQB/MzrVBjNHSBUMOCeVLSTDgNpwNY27YfrPgRQesH4ymO7UU/k9\nH+hac566E7GlxsELgJ2FtS/ov+Zi9jUJsoe78lDdCS5/+bviO7JcRyRWHSQMZXi+\ny38TwRug\n=Lv+n\n-----END PGP SIGNATURE-----",
        "payload": "tree 4fdf485398bc0c89c4f73d4f713b3386b9a833a5\nparent faf60dee34ae3dbe8e103a2c1b0679f13df6a921\nauthor MarcoFalke <falke.marco@gmail.com> 1601450386 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601450930 +0200\n\ndoc: Add 19501 release notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa710a6d67b2de64bde90def77c70d0a052f9030",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa710a6d67b2de64bde90def77c70d0a052f9030",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa710a6d67b2de64bde90def77c70d0a052f9030/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf60dee34ae3dbe8e103a2c1b0679f13df6a921",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf60dee34ae3dbe8e103a2c1b0679f13df6a921"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2b7faad35ee42915a4c1b1c2e4e2b711c972051a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa710a6d67b2de64bde90def77c70d0a052f9030/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa710a6d67b2de64bde90def77c70d0a052f9030/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa710a6d67b2de64bde90def77c70d0a052f9030",
        "patch": "@@ -190,6 +190,9 @@ Wallet\n   introduced unbroadcast set. See the \"P2P and network changes\" section for\n   more information on the unbroadcast set. (#18038)\n \n+- The `sendtoaddress` and `sendmany` RPCs accept an optional `verbose=True`\n+  argument to also return the fee reason about the sent tx. (#19501)\n+\n - The wallet can create a transaction without change even when the keypool is\n   empty. Previously it failed. (#17219)\n "
      }
    ]
  }
]