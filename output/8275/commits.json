[
  {
    "sha": "ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjhiZTk4ZmRiMjViNjc4YThjZDdlODlhZGYwNmQxYjFmNmJkZDYy",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-06-14T11:26:59Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-06-14T11:26:59Z"
      },
      "message": "Remove bad chain alert partition check\n\nAs per meeting 2016-03-31\nhttps://bitcoincore.org/en/meetings/2016/03/31/#bad-chain-alerts\n\nThe partition checker was producing huge number of false-positives\nand was disabled in 0.12.1 on the understanding it would either be\nfixed in 0.13 or removed entirely from master if not.",
      "tree": {
        "sha": "678d214b0577f979f6a3eca5f0b3afe3dcf70f7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/678d214b0577f979f6a3eca5f0b3afe3dcf70f7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "520161480eb12e50c8c3cbebf27a4f78751a6472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520161480eb12e50c8c3cbebf27a4f78751a6472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/520161480eb12e50c8c3cbebf27a4f78751a6472"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 0,
      "deletions": 150
    },
    "files": [
      {
        "sha": "0b6f306f83e816d5cd01b24e9919c7ade00ccbc1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
        "patch": "@@ -38,7 +38,6 @@ BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/scriptnum10.h \\\n   test/addrman_tests.cpp \\\n-  test/alert_tests.cpp \\\n   test/amount_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\"
      },
      {
        "sha": "323d1cedcf2e4be264243735383ec74e484f90e6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
        "patch": "@@ -1416,12 +1416,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     StartNode(threadGroup, scheduler);\n \n-    // Monitor the chain, and alert if we get blocks much quicker or slower than expected\n-    int64_t nPowTargetSpacing = Params().GetConsensus().nPowTargetSpacing;\n-    CScheduler::Function f = boost::bind(&PartitionCheck, &IsInitialBlockDownload,\n-                                         boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n-    scheduler.scheduleEvery(f, nPowTargetSpacing);\n-\n     // ********************************************************* Step 12: finished\n \n     SetRPCWarmupFinished();"
      },
      {
        "sha": "91da3f47a590502e0a0580c0342b81b65e0036d4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
        "patch": "@@ -2118,68 +2118,6 @@ void ThreadScriptCheck() {\n     scriptcheckqueue.Thread();\n }\n \n-//\n-// Called periodically asynchronously; alerts if it smells like\n-// we're being fed a bad chain (blocks being generated much\n-// too slowly or too quickly).\n-//\n-void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader,\n-                    int64_t nPowTargetSpacing)\n-{\n-    if (bestHeader == NULL || initialDownloadCheck()) return;\n-\n-    static int64_t lastAlertTime = 0;\n-    int64_t now = GetAdjustedTime();\n-    if (lastAlertTime > now-60*60*24) return; // Alert at most once per day\n-\n-    const int SPAN_HOURS=4;\n-    const int SPAN_SECONDS=SPAN_HOURS*60*60;\n-    int BLOCKS_EXPECTED = SPAN_SECONDS / nPowTargetSpacing;\n-\n-    boost::math::poisson_distribution<double> poisson(BLOCKS_EXPECTED);\n-\n-    std::string strWarning;\n-    int64_t startTime = GetAdjustedTime()-SPAN_SECONDS;\n-\n-    LOCK(cs);\n-    const CBlockIndex* i = bestHeader;\n-    int nBlocks = 0;\n-    while (i->GetBlockTime() >= startTime) {\n-        ++nBlocks;\n-        i = i->pprev;\n-        if (i == NULL) return; // Ran out of chain, we must not be fully sync'ed\n-    }\n-\n-    // How likely is it to find that many by chance?\n-    double p = boost::math::pdf(poisson, nBlocks);\n-\n-    LogPrint(\"partitioncheck\", \"%s: Found %d blocks in the last %d hours\\n\", __func__, nBlocks, SPAN_HOURS);\n-    LogPrint(\"partitioncheck\", \"%s: likelihood: %g\\n\", __func__, p);\n-\n-    // Aim for one false-positive about every fifty years of normal running:\n-    const int FIFTY_YEARS = 50*365*24*60*60;\n-    double alertThreshold = 1.0 / (FIFTY_YEARS / SPAN_SECONDS);\n-\n-    if (p <= alertThreshold && nBlocks < BLOCKS_EXPECTED)\n-    {\n-        // Many fewer blocks than expected: alert!\n-        strWarning = strprintf(_(\"WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\"),\n-                               nBlocks, SPAN_HOURS, BLOCKS_EXPECTED);\n-    }\n-    else if (p <= alertThreshold && nBlocks > BLOCKS_EXPECTED)\n-    {\n-        // Many more blocks than expected: alert!\n-        strWarning = strprintf(_(\"WARNING: abnormally high number of blocks generated, %d blocks received in the last %d hours (%d expected)\"),\n-                               nBlocks, SPAN_HOURS, BLOCKS_EXPECTED);\n-    }\n-    if (!strWarning.empty())\n-    {\n-        strMiscWarning = strWarning;\n-        AlertNotify(strWarning);\n-        lastAlertTime = now;\n-    }\n-}\n-\n // Protected by cs_main\n VersionBitsCache versionbitscache;\n "
      },
      {
        "sha": "05f7d4d9204a02fec9f57972ae0a24a2df1d0598",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ab8be98fdb25b678a8cd7e89adf06d1b1f6bdd62",
        "patch": "@@ -242,8 +242,6 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n-/** Try to detect Partition (network isolation) attacks against us */\n-void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader, int64_t nPowTargetSpacing);\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core."
      },
      {
        "sha": "70f1f12273a82f0003e86ed00893fe4df59323fe",
        "filename": "src/test/alert_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 79,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520161480eb12e50c8c3cbebf27a4f78751a6472/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520161480eb12e50c8c3cbebf27a4f78751a6472/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=520161480eb12e50c8c3cbebf27a4f78751a6472",
        "patch": "@@ -1,79 +0,0 @@\n-// Copyright (c) 2013-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-// Unit tests for alert system\n-\n-#include \"chainparams.h\"\n-#include \"main.h\" // For PartitionCheck\n-\n-#include \"test/testutil.h\"\n-#include \"test/test_bitcoin.h\"\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_FIXTURE_TEST_SUITE(Alert_tests, TestingSetup)\n-\n-\n-static bool falseFunc() { return false; }\n-\n-BOOST_AUTO_TEST_CASE(PartitionAlert)\n-{\n-    // Test PartitionCheck\n-    CCriticalSection csDummy;\n-    CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n-\n-    // Generate fake blockchain timestamps relative to\n-    // an arbitrary time:\n-    int64_t now = 1427379054;\n-    SetMockTime(now);\n-    for (int i = 0; i < 100; i++)\n-    {\n-        indexDummy[i].phashBlock = NULL;\n-        if (i == 0) indexDummy[i].pprev = NULL;\n-        else indexDummy[i].pprev = &indexDummy[i-1];\n-        indexDummy[i].nHeight = i;\n-        indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n-        // Other members don't matter, the partition check code doesn't\n-        // use them\n-    }\n-\n-    strMiscWarning = \"\";\n-\n-    // Test 1: chain with blocks every nPowTargetSpacing seconds,\n-    // as normal, no worries:\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n-\n-    // Test 2: go 3.5 hours without a block, expect a warning:\n-    now += 3*60*60+30*60;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n-\n-    // Test 3: test the \"partition alerts only go off once per day\"\n-    // code:\n-    now += 60*10;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n-\n-    // Test 4: get 2.5 times as many blocks as expected:\n-    now += 60*60*24; // Pretend it is a day later\n-    SetMockTime(now);\n-    int64_t quickSpacing = nPowTargetSpacing*2/5;\n-    for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n-        indexDummy[i].nTime = now - (100-i)*quickSpacing;\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n-\n-    SetMockTime(0);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      }
    ]
  }
]