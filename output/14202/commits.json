[
  {
    "sha": "7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzQ2Zjk1NmZkYzk3YzQzZWI3YzA5YThiOTJhM2NhOGFiNTE5NWEw",
    "commit": {
      "author": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-12T01:48:08Z"
      },
      "committer": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-14T15:45:51Z"
      },
      "message": "Add HTTP Server Statistics Gathering\n\nThis change is the first part of adding a new RPC call to report stats from the\nHTTP server. It modifies the HTTP server functionality to collect and report\nthe gathered statistics.\n\n`httpserver.h`:\n  * Add private member variable `receivedAtTimeMicros` to `HTTPRequest` to record the time at which the request was started.\n  * Add data-type, `RPCServerStats`, that holds all gathered HTTP server stats.\n  * Add function, `GetRPCServerStats`, that returns the current RPC server stats via the provider pointer.\n\n`httpserver.cpp`:\n  * Add static global `g_rpcserverstats` to hold HTTP server stats across all requests.\n  * Add static global `g_rpcserverstats_mutex` to serialize writes to `g_rpcserverstats`.\n  * Modify several functions to collect the RPC server stats.\n  * Implement `GetRPCServerStats`.",
      "tree": {
        "sha": "734fe9d187c5ae301f05bab5f56fc6ba368edbef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/734fe9d187c5ae301f05bab5f56fc6ba368edbef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdKjzMai3xdgIeVK0Wi56p4N8wjMFAlub17QACgkQWi56p4N8\nwjPfUA/+Ihk7I6AjtrRlqxW0gnhYEs7wG1y1Etmr89cazW1d6PCCKmx02KSsUD+8\nIO7IcQWuOLAvAmlEjHdEywDrSaLSGUHfu4evIADoXVFzpSha2uey2YoaFg0rPMM3\n11Yd3jrrhQZJ0K4/NulQibatuan0Q/p8uhIbRjAftMAfeklT1Tuaq3FZXzmn4zHT\nEulJzXAPWLWZbCwCwZehrQ9f2mygtD3ci5kVQ0B7znY0C5abHC+7UhMCtfm0bb9e\nN93TNmybIiDXUehe+F8O2DQ5p1OE6hXZqvCYfEJ64e13o3UHeR79RYsdsZ4W8C4a\n2kzah/bo2yj/p33JbtZ44RBrYQTGnABtRMjwyQAF3UI7ihS8GVJ5ygb1tM8fDQOI\nLgu3c88tObAB23e3goh2hHo6Q6yc8BT9tR9Z8McVBG5/6+GCxx+PMuFABgGEIRKR\nSJUbeA2ccIlLt+6xwQ9YKHW3YdrbJhPiTTumKCxmGr5RZLVSU1BDc2XXVlahT1tI\nhb+YRBg45YY3/ZnV+QMx+OicQMsVbrJ6YGa8JXazAYSfdqf9wopQYSeP0gU/r5a3\noTiqXrBr9TkP3OKVrKIIfM5Inpp5oyOwCGGOoqxB+nYWUmxboi4uOjC70/NgdPDr\nydbXuLm7E57aS+DIR++jSr5AxVGSICR5x2t3QLT1JqEFTZWNcTM=\n=sSK8\n-----END PGP SIGNATURE-----",
        "payload": "tree 734fe9d187c5ae301f05bab5f56fc6ba368edbef\nparent 4103cc31690e5be21854a9628f57c54b880ee195\nauthor Eric Scrivner <escrivner@coinbase.com> 1536716888 -0700\ncommitter Eric Scrivner <escrivner@coinbase.com> 1536939951 -0700\n\nAdd HTTP Server Statistics Gathering\n\nThis change is the first part of adding a new RPC call to report stats from the\nHTTP server. It modifies the HTTP server functionality to collect and report\nthe gathered statistics.\n\n`httpserver.h`:\n  * Add private member variable `receivedAtTimeMicros` to `HTTPRequest` to record the time at which the request was started.\n  * Add data-type, `RPCServerStats`, that holds all gathered HTTP server stats.\n  * Add function, `GetRPCServerStats`, that returns the current RPC server stats via the provider pointer.\n\n`httpserver.cpp`:\n  * Add static global `g_rpcserverstats` to hold HTTP server stats across all requests.\n  * Add static global `g_rpcserverstats_mutex` to serialize writes to `g_rpcserverstats`.\n  * Modify several functions to collect the RPC server stats.\n  * Implement `GetRPCServerStats`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0/comments",
    "author": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4103cc31690e5be21854a9628f57c54b880ee195",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4103cc31690e5be21854a9628f57c54b880ee195",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4103cc31690e5be21854a9628f57c54b880ee195"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 34,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e16af5ea93ac0b64f9bc67757509dd879bc8cac0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
        "patch": "@@ -41,6 +41,12 @@\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n+/** Global record containing HTTP server performance statistics */\n+static RPCServerStats g_rpcserverstats = {0, 0};\n+\n+/** Mutex to serialize writes to server performance statistics */\n+static std::recursive_mutex g_rpcserverstats_mutex;\n+\n /** HTTP request work item */\n class HTTPWorkItem final : public HTTPClosure\n {\n@@ -227,6 +233,9 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n              RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n \n+    std::lock_guard<std::recursive_mutex> rpcserverstats_guard(g_rpcserverstats_mutex);\n+    ++g_rpcserverstats.num_http_requests;\n+\n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n         hreq->WriteReply(HTTP_FORBIDDEN);\n@@ -432,9 +441,14 @@ void StartHTTPServer()\n     threadResult = task.get_future();\n     threadHTTP = std::thread(std::move(task), eventBase);\n \n+    std::lock_guard<std::recursive_mutex> rpcserverstats_guard(g_rpcserverstats_mutex);\n+    g_rpcserverstats.num_http_requests = 0;\n+\n     for (int i = 0; i < rpcThreads; i++) {\n         g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n     }\n+\n+    g_rpcserverstats.start_time_micros = GetTimeMicros();\n }\n \n void InterruptHTTPServer()\n@@ -523,7 +537,7 @@ void HTTPEvent::trigger(struct timeval* tv)\n         evtimer_add(ev, tv); // trigger after timeval passed\n }\n HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),\n-                                                       replySent(false)\n+                                                      replySent(false)\n {\n }\n HTTPRequest::~HTTPRequest()\n@@ -602,6 +616,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n         }\n     });\n     ev->trigger(nullptr);\n+\n     replySent = true;\n     req = nullptr; // transferred back to main thread\n }\n@@ -677,3 +692,8 @@ std::string urlDecode(const std::string &urlEncoded) {\n     }\n     return res;\n }\n+\n+RPCServerStats GetRPCServerStats() {\n+    std::lock_guard<std::recursive_mutex> rpcserverstats_guard(g_rpcserverstats_mutex);\n+    return g_rpcserverstats;\n+}"
      },
      {
        "sha": "25ab8b3870d1d26440c35c0a69503f58e5e52104",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
        "patch": "@@ -150,4 +150,17 @@ class HTTPEvent\n \n std::string urlDecode(const std::string &urlEncoded);\n \n+/** RPC server related metrics.\n+ */\n+class RPCServerStats\n+{\n+public:\n+    int64_t start_time_micros;\n+    uint64_t num_http_requests;\n+};\n+\n+/** Compute and return RPC metrics.\n+ */\n+RPCServerStats GetRPCServerStats();\n+\n #endif // BITCOIN_HTTPSERVER_H"
      }
    ]
  },
  {
    "sha": "a43c23e59a523ff4f4f5d51a87882663f1419935",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDNjMjNlNTlhNTIzZmY0ZjRmNWQ1MWE4Nzg4MjY2M2YxNDE5OTM1",
    "commit": {
      "author": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-12T02:27:23Z"
      },
      "committer": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-14T15:46:01Z"
      },
      "message": "Add getnetworkrpcinfo RPC Command\n\nAdd a new RPC command, `getnetworkrpcinfo`, that returns an object containing\nvarious state information about the HTTP server providing a JSON RPC interface.\nThis information can be used to derive information such as requests per second\nand average request processing time.\n\nThe information is provided in a raw form leaving the clients to derive such\nuseful metrics, this is intentional and allows this RPC call to avoid issues\naround floating point accuracy and floating point error accumulation. Instead,\nthese issues are left to the consumers of the response object to handle in\nwhatever fashion they like.",
      "tree": {
        "sha": "dbad89323ac905a25250d3ea4c406a0f846c8db9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbad89323ac905a25250d3ea4c406a0f846c8db9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a43c23e59a523ff4f4f5d51a87882663f1419935",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdKjzMai3xdgIeVK0Wi56p4N8wjMFAlub17kACgkQWi56p4N8\nwjMcaQ//aS93s0LrF/TKnZHf6fmHKvE48JQ6h2W0p3JvLw4EHZY0UBJdDqA7/Kla\nUdWJaLhv6qD6YA8PujkzeYSg/VDOEXtY8ecmA1OMxi3kXmqRxOUsuUK9HCGd3C5U\nxEPJ0q+NBB8IfwNDhJoQJccdaizkiEPTPBf9DON72HrM3LafbLLG4QewVU8Xftr7\nRmtzeRH6ATDMn8m7sD2olh4LoKyyVXVUJO+BD87F+ibtjj5g4b3MwbyZebxm0nYB\nb65KXdrgVLRze2qZy4E9WsGctAtkZIKFa8AP4Sl0q6Uu7jpFKTF4ONUBn2BdPWBR\ncaXIOFKno9hlNjVMiZa97mTVJhMQTGON25g5YFKA0vCT8uh6EqH1KEwf1wElJqgE\nHioZocMyFaYLM20aYyqpIkDTxzga59E/69cEgUOCeZ+fbmrmCzct75cgCCnKdXiJ\nZGuAVGJ2c3WndXwU1kkPYJ8DULVi+PeN5sVXLbpRrI66vIJwNw4jm8Q7TWUxrOIS\nDoEevHx0DGNFuoJebe/MF20MvOQYzub6D2MV+v1pQBhEkQDGVOn75LvWlH11UFJo\nyaBilcLP86MCOHYyEgz4CSA+vzcE6AGYhblEWdjj4dT21cR1oQn304A/h0aZijOo\nvCn+6GcnxEd4SjJuSgkm2d2fVs6LMTWfK61Zo2SQUeueCKfMPwc=\n=GpPT\n-----END PGP SIGNATURE-----",
        "payload": "tree dbad89323ac905a25250d3ea4c406a0f846c8db9\nparent 7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0\nauthor Eric Scrivner <escrivner@coinbase.com> 1536719243 -0700\ncommitter Eric Scrivner <escrivner@coinbase.com> 1536939961 -0700\n\nAdd getnetworkrpcinfo RPC Command\n\nAdd a new RPC command, `getnetworkrpcinfo`, that returns an object containing\nvarious state information about the HTTP server providing a JSON RPC interface.\nThis information can be used to derive information such as requests per second\nand average request processing time.\n\nThe information is provided in a raw form leaving the clients to derive such\nuseful metrics, this is intentional and allows this RPC call to avoid issues\naround floating point accuracy and floating point error accumulation. Instead,\nthese issues are left to the consumers of the response object to handle in\nwhatever fashion they like.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43c23e59a523ff4f4f5d51a87882663f1419935",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a43c23e59a523ff4f4f5d51a87882663f1419935",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43c23e59a523ff4f4f5d51a87882663f1419935/comments",
    "author": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7346f956fdc97c43eb7c09a8b92a3ca8ab5195a0"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "74f5f50a3604441a8b9b7e0eaae5a97d8d813169",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a43c23e59a523ff4f4f5d51a87882663f1419935/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a43c23e59a523ff4f4f5d51a87882663f1419935/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a43c23e59a523ff4f4f5d51a87882663f1419935",
        "patch": "@@ -8,6 +8,7 @@\n #include <clientversion.h>\n #include <core_io.h>\n #include <validation.h>\n+#include <httpserver.h>\n #include <net.h>\n #include <net_processing.h>\n #include <netbase.h>\n@@ -491,6 +492,33 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n+static UniValue getnetworkrpcinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 0)\n+        throw std::runtime_error(\n+            \"getnetworkrpcinfo\\n\"\n+            \"Returns an object containing various state info regarding RPC service.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"total_requests\\\": xxxxx,  (numeric) Lifetime total number of RPC requests processed.\\n\"\n+            \"  \\\"uptime_micros\\\": xxxxx,   (numeric) Uptime of RPC server in microseconds.\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnetworkrpcinfo\", \"\")\n+            + HelpExampleRpc(\"getnetworkrpcinfo\", \"\")\n+        );\n+\n+    RPCServerStats rpc_stats = GetRPCServerStats();\n+\n+    int64_t uptime_micros = GetTimeMicros() - rpc_stats.start_time_micros;\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"total_requests\", rpc_stats.num_http_requests);\n+    obj.pushKV(\"uptime_micros\", uptime_micros);\n+\n+    return obj;\n+}\n+\n static UniValue setban(const JSONRPCRequest& request)\n {\n     std::string strCommand;\n@@ -638,6 +666,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       {\"node\"} },\n     { \"network\",            \"getnettotals\",           &getnettotals,           {} },\n     { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         {} },\n+    { \"network\",            \"getnetworkrpcinfo\",      &getnetworkrpcinfo,      {} },\n     { \"network\",            \"setban\",                 &setban,                 {\"subnet\", \"command\", \"bantime\", \"absolute\"} },\n     { \"network\",            \"listbanned\",             &listbanned,             {} },\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },"
      }
    ]
  },
  {
    "sha": "32e45ae1e72d3388e845a85f63d6c814ffb6b7d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmU0NWFlMWU3MmQzMzg4ZTg0NWE4NWY2M2Q2YzgxNGZmYjZiN2Q0",
    "commit": {
      "author": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-12T03:07:09Z"
      },
      "committer": {
        "name": "Eric Scrivner",
        "email": "escrivner@coinbase.com",
        "date": "2018-09-14T15:46:01Z"
      },
      "message": "Add Functional Test For getnetworkrpcinfo",
      "tree": {
        "sha": "4a68e2e12b4978d74b8444cf7a6a07439d9c15ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a68e2e12b4978d74b8444cf7a6a07439d9c15ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEdKjzMai3xdgIeVK0Wi56p4N8wjMFAlub17kACgkQWi56p4N8\nwjN8Sw/3Wmz2T/3WQXObHvF5EKMv/nl0pl01qfzpr/qEbKQ9w3eE1GPpLYoiFnXM\nRROQYxSqcQ4hW265mRpLuic+MiVMK6wKBQAlcf6QOHAREbpHwMo+oNLGu2zpjR5v\n8FMgq7E2S+H0lghnZ00Vqwd6A0hFAY4fBtjkT2RQm+Sqqho/+kAmXWr96NoYiXFH\nv9eOdc0rLppGSH32Ru3bXbF/UDhzIHPeryVv4r2xJeqnC90gxZHwk+C4EGa4XxY9\n1Y0vXMaIG+XzNXsxZAYTuwsDZLPH7Gs7CsUs5fzhOL6EqvoPOq8Qam9R6iSYX/3p\nPS3kYww8+UuO1UkCSAiKDU0NVFBjccd0wGSd8qFcerRJqX4dMsXFyc/SN2MYl//W\nIlm96epNZPoNwirc6rE/j9LL0ZfcEm2rmietxjXICLzipgA9NvKCv6TD7xNK/ujm\nZkUqErOOKJ/O9ZvUxaI23QFHK8yYjkVa2gsjL/4XccbvgZFbtRBiyJ7CAb6zaBXp\ng1TZw+RudtyFmxmZ5lV/1NUP+EYDromAerFAPEtrLU3MKs7K4eS5UW212JkaeRB2\ny+Gh99XXzTmU3hMyEsNklX2vbR4kY5ECi8Zk3viKBevpFQmzRKaUbBgqUs2luLKm\nHIYlrr/jLwP9RzDGLNc84ezYHA78fPdhZZ4DNQooLcqj+EhZ/w==\n=RgEA\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a68e2e12b4978d74b8444cf7a6a07439d9c15ea\nparent a43c23e59a523ff4f4f5d51a87882663f1419935\nauthor Eric Scrivner <escrivner@coinbase.com> 1536721629 -0700\ncommitter Eric Scrivner <escrivner@coinbase.com> 1536939961 -0700\n\nAdd Functional Test For getnetworkrpcinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4/comments",
    "author": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a43c23e59a523ff4f4f5d51a87882663f1419935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43c23e59a523ff4f4f5d51a87882663f1419935",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a43c23e59a523ff4f4f5d51a87882663f1419935"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f02212112aced98cdcbbf97f224ae1e4ad9f39e4",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e45ae1e72d3388e845a85f63d6c814ffb6b7d4/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=32e45ae1e72d3388e845a85f63d6c814ffb6b7d4",
        "patch": "@@ -12,6 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n@@ -31,6 +32,7 @@ def run_test(self):\n         self._test_getnetworkinginfo()\n         self._test_getaddednodeinfo()\n         self._test_getpeerinfo()\n+        self._test_getnetworkrpcinfo()\n \n     def _test_connection_count(self):\n         # connect_nodes_bi connects each node to the other\n@@ -101,5 +103,12 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[0][0]['minfeefilter'], Decimal(\"0.00000500\"))\n         assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n \n+    def _test_getnetworkrpcinfo(self):\n+        first_result = self.nodes[0].getnetworkrpcinfo()\n+        second_result = self.nodes[0].getnetworkrpcinfo()\n+\n+        assert_greater_than(second_result['uptime_micros'], first_result['uptime_micros'])\n+        assert_greater_than(second_result['total_requests'], first_result['total_requests'])\n+\n if __name__ == '__main__':\n     NetTest().main()"
      }
    ]
  }
]