[
  {
    "sha": "fa64306520156af1d1fe90e92f6cc22ffa097c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY0MzA2NTIwMTU2YWYxZDFmZTkwZTkyZjZjYzIyZmZhMDk3YzAy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-17T11:28:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-17T11:25:25Z"
      },
      "message": "[qa] abandonconflict: Use assert_equal",
      "tree": {
        "sha": "dfdfc608900c1281cb3e1dfeb142073d0aa1ebc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfdfc608900c1281cb3e1dfeb142073d0aa1ebc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa64306520156af1d1fe90e92f6cc22ffa097c02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa64306520156af1d1fe90e92f6cc22ffa097c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa64306520156af1d1fe90e92f6cc22ffa097c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa64306520156af1d1fe90e92f6cc22ffa097c02/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e6ab2c3238264b34c0c83ebf703502f5ec72848"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "874df487777cf6d9e4f028d282782eec7536b23f",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa64306520156af1d1fe90e92f6cc22ffa097c02/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa64306520156af1d1fe90e92f6cc22ffa097c02/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=fa64306520156af1d1fe90e92f6cc22ffa097c02",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n \n         # In mempool txs from self should increase balance from change\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance - Decimal(\"30\") + Decimal(\"24.9996\"))\n+        assert_equal(newbalance, balance - Decimal(\"30\") + Decimal(\"24.9996\"))\n         balance = newbalance\n \n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n@@ -78,16 +78,16 @@ def run_test(self):\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in mempool\n-        assert(len(self.nodes[0].getrawmempool()) == 0)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         # Not in mempool txs from self should only reduce balance\n         # inputs are still spent, but change not received\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance - Decimal(\"24.9996\"))\n+        assert_equal(newbalance, balance - Decimal(\"24.9996\"))\n         # Unconfirmed received funds that are not in mempool, also shouldn't show\n         # up in unconfirmed balance\n         unconfbalance = self.nodes[0].getunconfirmedbalance() + self.nodes[0].getbalance()\n-        assert(unconfbalance == newbalance)\n+        assert_equal(unconfbalance, newbalance)\n         # Also shouldn't show up in listunspent\n         assert(not txABC2 in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)])\n         balance = newbalance\n@@ -96,35 +96,35 @@ def run_test(self):\n         # including that the child tx was also abandoned\n         self.nodes[0].abandontransaction(txAB1)\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance + Decimal(\"30\"))\n+        assert_equal(newbalance, balance + Decimal(\"30\"))\n         balance = newbalance\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         stop_node(self.nodes[0],0)\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.00001\"])\n-        assert(len(self.nodes[0].getrawmempool()) == 0)\n-        assert(self.nodes[0].getbalance() == balance)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(self.nodes[0].getbalance(), balance)\n \n         # But if its received again then it is unabandoned\n         # And since now in mempool, the change is available\n         # But its child tx remains abandoned\n         self.nodes[0].sendrawtransaction(signed[\"hex\"])\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance - Decimal(\"20\") + Decimal(\"14.99998\"))\n+        assert_equal(newbalance, balance - Decimal(\"20\") + Decimal(\"14.99998\"))\n         balance = newbalance\n \n         # Send child tx again so its unabandoned\n         self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance - Decimal(\"10\") - Decimal(\"14.99998\") + Decimal(\"24.9996\"))\n+        assert_equal(newbalance, balance - Decimal(\"10\") - Decimal(\"14.99998\") + Decimal(\"24.9996\"))\n         balance = newbalance\n \n         # Remove using high relay fee again\n         stop_node(self.nodes[0],0)\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n-        assert(len(self.nodes[0].getrawmempool()) == 0)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance - Decimal(\"24.9996\"))\n+        assert_equal(newbalance, balance - Decimal(\"24.9996\"))\n         balance = newbalance\n \n         # Create a double spend of AB1 by spending again from only A's 10 output\n@@ -143,15 +143,15 @@ def run_test(self):\n \n         # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted\n         newbalance = self.nodes[0].getbalance()\n-        assert(newbalance == balance + Decimal(\"20\"))\n+        assert_equal(newbalance, balance + Decimal(\"20\"))\n         balance = newbalance\n \n         # There is currently a minor bug around this and so this test doesn't work.  See Issue #7315\n         # Invalidate the block with the double spend and B's 10 BTC output should no longer be available\n         # Don't think C's should either\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         newbalance = self.nodes[0].getbalance()\n-        #assert(newbalance == balance - Decimal(\"10\"))\n+        #assert_equal(newbalance, balance - Decimal(\"10\"))\n         print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n         print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n         print(str(balance) + \" -> \" + str(newbalance) + \" ?\")"
      }
    ]
  }
]