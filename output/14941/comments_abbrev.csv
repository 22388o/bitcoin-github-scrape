DrahtBot,2018-12-13T02:03:48Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14144](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14144.html) (Refactoring: Clarify code using encrypted_b",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-446815213,446815213,
promag,2018-12-13T09:07:13Z,@ryanofsky @MarcoFalke,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-446893716,446893716,
laanwj,2018-12-13T10:39:53Z,"Concept ACK - I think this can be useful outside of the tests, as well.\n\n> Also I'd like to discuss the wait default value, currently it avoid changing behavior. If wait=true is considered the correct behavior then this could be backport to 0.17.2?\n\nStrictly spoken this is a feature, not a bugfix, though if it's optional and improves testing I think a point can be made to backport it anyho",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-446922214,446922214,
ryanofsky,2018-12-13T14:11:46Z,"Code change looks ok, but this shouldn't be an option. Making `wait=false` the default makes `unloadwallet` pointlessly difficult to use, and inconsistent with other methods, including closely related methods like `createwallet` and `loadwallet`.\n\nIf you think there is reason to support `wait=false`, I think you need to say what the use-case is, and why it wouldn't be better served by having t",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-446981743,446981743,
promag,2018-12-13T16:09:35Z,"Changed to synchronous unload. Locally added some sleeps to see if there were any connection timeout, but didn't manage to cause one.\n\n> doesn't (I guess?) block on acquiring `cs_wallet`\n\nno it doesn't, it waits until the weak pointer is expired.",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-447024884,447024884,
promag,2018-12-18T21:01:43Z,@ryanofsky looks like you started reviewing before my latest push?,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-448368900,448368900,
promag,2019-01-02T16:18:29Z,@ryanofsky would appreciate another review! ðŸ˜„ty,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-450907806,450907806,
gmaxwell,2019-01-03T19:41:22Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-451254447,451254447,
promag,2019-01-04T01:42:42Z,"Updated after @ryanofsky review, added release notes and updated description.",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-451332830,451332830,
gmaxwell,2019-01-04T05:34:22Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-451357080,451357080,
laanwj,2019-01-08T15:17:31Z,utACK c2ae9d9c295ca75f6653892b5f5e1ad6f5c1a9e7,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-452334836,452334836,
jnewbery,2019-01-10T21:38:48Z,"Lightly tested ACK c2ae9d9c295ca75f6653892b5f5e1ad6f5c1a9e7, although I have a preference for @ryanofsky's proposed simplification here: https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245133485",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-453263769,453263769,
promag,2019-01-14T16:35:32Z,"Pushed the simplification, also split code from assertions.",https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-454070484,454070484,
promag,2019-01-14T22:02:25Z,Latest changes in 4a50dce. Squashed.,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-454178665,454178665,
jnewbery,2019-01-15T16:06:02Z,utACK 645e905c327411555073fa7964b36f652998059f,https://github.com/bitcoin/bitcoin/pull/14941#issuecomment-454447614,454447614,
ryanofsky,2018-12-13T17:59:08Z,Might be good to use Mutex and WAIT_LOCK from `sync.h` instead of `mutex` and `unique_lock` for thread annotations & debugging.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241502828,241502828,src/wallet/wallet.cpp
ryanofsky,2018-12-13T18:02:27Z,It seems more common in bitcoin code to abbreviate condition variables as `cv` instead of `cond` and name locks `lock` instead of `lk`.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241503869,241503869,src/wallet/wallet.cpp
ryanofsky,2018-12-13T18:10:39Z,I think we need to confirm that `!weak_wallet.expired()` in the other thread is true at the point of this call (and guaranteed by the c++ standard to be true). Otherwise there could be a lost-wakeup bug here because this would be signalling the condition variable before the condition is true.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241506339,241506339,src/wallet/wallet.cpp
promag,2018-12-13T18:38:43Z,"Good catch, I'll investigate.",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241515588,241515588,src/wallet/wallet.cpp
ryanofsky,2018-12-13T19:33:03Z,"It looks like this might not be sufficient if we want to guarantee that the wallet is really destroyed. From https://en.cppreference.com/w/cpp/memory/weak_ptr/expired:\n\n> The destructor for the managed object may not yet have been called, but this object's destruction is imminent (or may have already happened).\n\nA more reliable but cumbersome approach might be to add wallet members:\n\n`",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241533541,241533541,src/wallet/wallet.cpp
promag,2018-12-14T02:28:32Z,Will change.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241627996,241627996,src/wallet/wallet.cpp
promag,2018-12-14T02:28:41Z,Will change.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241628011,241628011,src/wallet/wallet.cpp
promag,2018-12-14T02:29:09Z,Please see current approach.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241628087,241628087,src/wallet/wallet.cpp
promag,2018-12-14T02:40:03Z,"Not sure about this, I think it should be called before `UnregisterValidationInterface` otherwise `SyncWithValidationInterfaceQueue` does nothing than waiting..",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241629703,241629703,src/wallet/wallet.cpp
promag,2018-12-14T12:50:06Z,"This no longer applies, @ryanofsky concern was valid.",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r241744392,241744392,src/wallet/wallet.cpp
ryanofsky,2018-12-18T19:50:58Z,You could make the argument type `std::shared_ptr<CWallet>&&` to make the compiler require an rvalue.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242681682,242681682,src/wallet/wallet.h
ryanofsky,2018-12-18T19:54:25Z,This seems sensible. I have the same change in aa67dc7681337a3de79641981820b4b08ba35f03 from #10973.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242682871,242682871,src/init.cpp
ryanofsky,2018-12-18T20:07:25Z,"Would suggest:\n\n```c++\nsize_t erased = g_unloading_wallet_set.erase(wallet) == 1\nassert(erased == 1);\n```\n\nEven though we don't support building bitcoin with NDEBUG, I think most people just expect asserts to contain error checking, not code that is important to run.",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242687361,242687361,src/wallet/wallet.cpp
ryanofsky,2018-12-18T20:24:17Z,"This does seem unnecessary. But I'd also expect this code to calling UnregisterValidationInterface before flushing. I.e. stop requesting new notifications, then save state, instead of saving state first and then hoping new notifications don't arrive after the flush...",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242692629,242692629,src/wallet/wallet.cpp
promag,2018-12-18T22:04:03Z,`Delegate wallet deletion to UnloadWallet caller`,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242722853,242722853,src/wallet/wallet.cpp
promag,2018-12-18T22:04:08Z,Could say it's not necessary to call `NotifyUnload` because at this point there are no shared pointers to this wallet.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r242722868,242722868,src/wallet/wallet.cpp
ryanofsky,2019-01-03T21:07:53Z,"Is there a reason this needs to delegate deletion? It seems if you removed the DeleteWallet call from UnloadWallet, you could simplify this function to just:\n\n```c++\nDeleteWallet(wallet);\nLOCK(g_wallet_release_mutex);\ng_unloading_wallet_set.erase(wallet);\ng_wallet_release_cv.notify_all();\n```",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245133485,245133485,src/wallet/wallet.cpp
ryanofsky,2019-01-03T21:16:58Z,Comment could say that it's not necessary to call this function unless you need to block waiting the unload.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245135910,245135910,src/wallet/wallet.h
ryanofsky,2019-01-03T21:24:32Z,Could we `assert(NotifyUnload.empty())` in the wallet destructor to verify delete isn't happening too early and clients are fully detached?,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245137905,245137905,src/wallet/wallet.cpp
promag,2019-01-03T21:56:19Z,"No strong reason, just thought the unload burden/time should be left to the `unloadwallet` caller. The way you suggest both the `unloadwallet` caller and the last wallet client wait for the complete unload.",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245145940,245145940,src/wallet/wallet.cpp
promag,2019-01-03T21:57:46Z,Will try.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245146308,245146308,src/wallet/wallet.cpp
promag,2019-01-03T21:57:58Z,Will improve comment.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245146423,245146423,src/wallet/wallet.h
ryanofsky,2019-01-03T22:24:32Z,"> just thought the unload burden/time should be left to the unloadwallet caller. \n\nInteresting. That seems like a legitimate optimization for the last RPC using the wallet. Personally, I think I'd still choose the simplification over the optimization, but if you want to keep the optimization it'd be good to have a comment saying why it's better to delete on the unload thread than the release t",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r245153164,245153164,src/wallet/wallet.cpp
jnewbery,2019-01-14T16:39:24Z,"This comment needs to be updated with the latest change.\n\nAlso nit: s/a UnloadWallet/an UnloadWallet/",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r247565997,247565997,src/wallet/wallet.cpp
ryanofsky,2019-01-14T19:38:53Z,"Would suggest inlining `DeleteWallet` here. This function is only called from this one place, and I can't think of any other place where it would be safe to call.",https://github.com/bitcoin/bitcoin/pull/14941#discussion_r247629587,247629587,src/wallet/wallet.cpp
promag,2019-01-14T19:48:59Z,Good point.,https://github.com/bitcoin/bitcoin/pull/14941#discussion_r247633234,247633234,src/wallet/wallet.cpp
