DrahtBot,2018-08-24T15:49:32Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15649](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15649.html) (Add ChaCha20Poly1305@Bitcoin AEAD by jonass",https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-415800611,415800611,
DesWurstes,2018-08-25T07:09:02Z,Why not [reuse the existing ChaCha20](https://github.com/bitcoin/bitcoin/compare/master...DesWurstes:master)?,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-415947069,415947069,
jonasschnelli,2018-08-27T11:59:23Z,@DesWurstes: see PR description (out of scope).,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-416203421,416203421,
jonasschnelli,2018-08-27T19:37:51Z,"Added benchmark for the AEAD (and for direct comparison also added the dbl-SHA (HASH) benchmark).\nBenchmarking 1MB data as well as 256bytes.\n\nMy system reports (!we compare SSE4 SHA256 vs non-optimized chacha20):\n```\n# Benchmark, evals, iterations, total, min, max, median\nCHACHA20POLY1305AEAD_BIG, 5, 340, 3.68279, 0.00215035, 0.00219169, 0.00216025\nCHACHA20POLY1305AEAD_SMALL, 5, 2500",https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-416342883,416342883,
jonasschnelli,2018-09-02T10:59:33Z,@Sjors The existing ChaCha20 implementation doesn't do the XORing and can therefore only be used for the RNG.,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-417921804,417921804,
sipa,2018-09-02T11:34:21Z,"Instead of those U8TOU32_LE macros you can use our own function (ReadLE32,\nWriteLE32).\n\n>\n",https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-417924355,417924355,
jonasschnelli,2018-09-02T11:44:09Z,@sipa: agree. Though as written in the PR description. I'd like to keep the code (extracted from openSSH) as identical as possible. I think (or hope) we can do refactoring after this has been merged.,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-417924839,417924839,
jonasschnelli,2018-10-01T13:18:19Z,Fixed points reported by @practicalswift,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-425904074,425904074,
practicalswift,2018-12-07T08:37:11Z,I'm afraid this PR doesn't compile when rebased on `master`,https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-445161061,445161061,
jonasschnelli,2019-03-01T16:14:20Z,Partially superseded by #15512 (the ChaCha20 part),https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-468718860,468718860,
jonasschnelli,2019-03-24T19:43:49Z,"Closing...\nIt's now replaced with #15512,  #15519 and  #15649.",https://github.com/bitcoin/bitcoin/pull/14050#issuecomment-475992747,475992747,
ken2812221,2018-08-29T17:17:56Z,Seems this should include windows.h,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r213763831,213763831,src/crypto/chachapoly_aead.cpp
practicalswift,2018-09-01T21:05:50Z,Typo found by `codespell`: endiannes,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214523031,214523031,src/crypto/chachapoly_aead.h
jonasschnelli,2018-09-02T08:47:05Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214533236,214533236,src/crypto/chachapoly_aead.h
Sjors,2018-09-02T10:33:08Z,This would be much easier to verify against the RFC document if you parse a hex string. ,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214535827,214535827,src/test/crypto_tests.cpp
Sjors,2018-09-02T10:44:38Z,"Why did you remove the [poly1305_init](https://github.com/floodyberry/poly1305-donna/blob/master/poly1305-donna-32.h), [poly1305_update](https://github.com/floodyberry/poly1305-donna/blob/master/poly1305-donna.c#L27), [poly1305_finish](https://github.com/floodyberry/poly1305-donna/blob/master/poly1305-donna-32.h#L134) separation?",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214536074,214536074,src/crypto/poly1305.cpp
Sjors,2018-09-02T10:48:24Z,"I can confirm this function in 09ec49ba31867187cecd631593d37bcc5f3ca72f is identical to the original at de624c626ea081929df000b09932dbc804eda51d, modulo some whitespace.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214536163,214536163,src/crypto/chacha.cpp
jonasschnelli,2018-09-02T10:58:55Z,Which separation? I took Andrew Moons implementation found at https://github.com/openssh/openssh-portable/blob/90e51d672711c19a36573be1785caf35019ae7a8/poly1305.c,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214536423,214536423,src/crypto/poly1305.cpp
Sjors,2018-09-02T11:09:49Z,"Ah, I see, in that case the source code URL at the top of the file is confusing; probably should add a link to Moons' implementation instead / in addition.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r214536689,214536689,src/crypto/poly1305.cpp
practicalswift,2018-09-12T09:49:35Z,This seems like a mistake? `*len24_out` is assigned twice? `*len24_out = 0;` should be removed? :-),https://github.com/bitcoin/bitcoin/pull/14050#discussion_r216966077,216966077,src/crypto/chachapoly_aead.cpp
practicalswift,2018-09-12T09:52:14Z,"Just to double check: This bit shifting takes place on a 32-bit value which is then expanded to a 64-bit type. That is the intention? Applies to `h1 << 26`, `h2 << 20`, `h3 << 14` and `h4 << 8`.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r216966884,216966884,src/crypto/poly1305.cpp
practicalswift,2018-09-12T15:08:09Z,"Shouldn't this be `assert(memcmp(plaintext_buf, plaintext_buf_new, 255) == 0); `  or `assert(memcmp(plaintext_buf, plaintext_buf_new, sizeof(plaintext_buf)) == 0);`?",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r217071702,217071702,src/test/crypto_tests.cpp
practicalswift,2018-09-30T15:50:11Z,An unsigned integer wraparound takes place here which is triggered by the tests. Worth adding a comment to make it clear it is intentional?,https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221463737,221463737,src/crypto/poly1305.cpp
practicalswift,2018-09-30T15:53:04Z,"This is a dead store :-)\n\nInitialize to zero instead and remove the `r = 0` below?",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221463804,221463804,src/crypto/chachapoly_aead.cpp
practicalswift,2018-09-30T15:54:30Z,Use `nullptr` :-),https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221463848,221463848,src/crypto/chachapoly_aead.cpp
practicalswift,2018-09-30T15:54:45Z,Use `nullptr` :-),https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221463855,221463855,src/crypto/chachapoly_aead.cpp
practicalswift,2018-09-30T15:54:59Z,Use `nullptr` :-),https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221463861,221463861,src/crypto/chachapoly_aead.cpp
jonasschnelli,2018-10-01T12:44:25Z,"Its upstream code from openssh,.. the plan is to refactor this to c++ after initial merge to master.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221594295,221594295,src/crypto/poly1305.cpp
jonasschnelli,2018-10-01T12:51:47Z,"I'd like to keep this as C code for now, the .cpp filename extension is for bypassing the CXXFLAGS/CFLAGS issue.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221596313,221596313,src/crypto/chachapoly_aead.cpp
jonasschnelli,2018-10-01T12:54:22Z,"I'm not sure if applying 3 time a uint_8t (24bits) the way its done here will guarantee to set the other 8 bits to 0. This is why I initialise with 0, then set bit 0 to 23. Could be that I'm wrong though.",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221597018,221597018,src/crypto/chachapoly_aead.cpp
jonasschnelli,2018-10-01T12:55:54Z,"Looks like.\nThis has been taken from openSSH (https://github.com/openssh/openssh-portable/blob/90e51d672711c19a36573be1785caf35019ae7a8/poly1305.c).",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221597516,221597516,src/crypto/poly1305.cpp
practicalswift,2018-10-01T15:16:52Z,"We wouldn't initialise before assignment if the RHS was an integer, right? :-)\n\n`buf[0] | (buf[1] << 8) | (buf[2] << 16)` evaluates to an integer.\n\nBut don't trust me â€“ I'm just a fellow human.\n\nLet's verify using our favourite C++ interpreter `cling`:\n\n```\n$ cling\n\n****************** CLING ******************\n* Type C++ code and press enter to run it *\n*             Type ",https://github.com/bitcoin/bitcoin/pull/14050#discussion_r221648668,221648668,src/crypto/chachapoly_aead.cpp
