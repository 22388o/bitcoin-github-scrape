[
  {
    "sha": "124a14f02ef112bd45c38305a6f453da6d2557ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjRhMTRmMDJlZjExMmJkNDVjMzgzMDVhNmY0NTNkYTZkMjU1N2Fi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T14:54:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-10-01T12:58:34Z"
      },
      "message": "Add chacha20/poly1305 and chacha20poly1305_AEAD from openssh",
      "tree": {
        "sha": "c017d7998d88f9954ba6467b228f8fd7d989ee04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c017d7998d88f9954ba6467b228f8fd7d989ee04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/124a14f02ef112bd45c38305a6f453da6d2557ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAluyGfsACgkQHrd2uwPH\nki1MGg/+MmAhIC6GKLOxxpJU4FY8A/R47H6MLA5vnYtE5OMWOlUPzbXa7fdc2rPg\nSSNjwc5Y/WzDiyn2VaH5XpdpOJnuZMSyXQkWH9q5UDmc08qtB9O0aGlFnCx+RNQD\nQFmVH+CIjHI9FLESKQ0smGYzvhlVvbloKMGqu7eS88t9WoBJmfbsA8RVxpuxikUk\ndY3yOnb6290Q36zZMBIP2StDSizHY5M+i6RAX58xdqoBJd7i8s65PV795kMsM5sp\nR4vviDnuOUCZbw76gRymKS0F0IKXd/K3bDW+u4hqXZYB4LL+bIIuntLVlwnQpFla\nnIkA74Zh2gY8IJt3ZU4SClFWcJ5vnWN2b9kow1SUmlsWKG70hoUzlVYGIdcaAN6D\nApNQ6qdOXqcvA/pyF1xAZ5x/Cgs9OE7lp5LZPOVJGgu7NwFgbt+yMudSny+ZKVUM\nKQxHvHz2LPEt7Hbwv0wdpFtzFvI0NBK5nEBOpiA5odFXUjOSzAeAloMy4E07Fj1O\n46xqogGLvFXtqXuNCnmTxcd1L2fS8ZI81jBepPWL2AxY6KIKF/cI6QuoAHr4PPT+\nC0I3AGIHNXbeeh3xRIK8VnnUZSmQ6P5kuLVoecfRYbc3iYt/QZSjzB6VopbiQ4fS\n5L2dEMvqbioz+l5ByP/ImBvSih5jl6j5QS94UnbHtrrW8tcdts0=\n=rgur\n-----END PGP SIGNATURE-----",
        "payload": "tree c017d7998d88f9954ba6467b228f8fd7d989ee04\nparent c9327306b580bb161d1732c0a0260b46c0df015c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535122447 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1538398714 +0200\n\nAdd chacha20/poly1305 and chacha20poly1305_AEAD from openssh\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124a14f02ef112bd45c38305a6f453da6d2557ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/124a14f02ef112bd45c38305a6f453da6d2557ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124a14f02ef112bd45c38305a6f453da6d2557ab/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9327306b580bb161d1732c0a0260b46c0df015c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9327306b580bb161d1732c0a0260b46c0df015c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9327306b580bb161d1732c0a0260b46c0df015c"
      }
    ],
    "stats": {
      "total": 609,
      "additions": 609,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f4a023b82b8501f99605040bc1eb278ee061e8d2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -307,13 +307,19 @@ crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/aes.cpp \\\n   crypto/aes.h \\\n+  crypto/chacha.h \\\n+  crypto/chacha.cpp \\\n   crypto/chacha20.h \\\n   crypto/chacha20.cpp \\\n+  crypto/chachapoly_aead.h \\\n+  crypto/chachapoly_aead.cpp \\\n   crypto/common.h \\\n   crypto/hmac_sha256.cpp \\\n   crypto/hmac_sha256.h \\\n   crypto/hmac_sha512.cpp \\\n   crypto/hmac_sha512.h \\\n+  crypto/poly1305.h \\\n+  crypto/poly1305.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\\n@@ -374,6 +380,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   script/script_error.h \\\n   serialize.h \\\n   span.h \\\n+  support/cleanse.cpp \\\n   tinyformat.h \\\n   uint256.cpp \\\n   uint256.h \\"
      },
      {
        "sha": "5f4a78e544393a6bc404fe4e024e0d9cb48c4567",
        "filename": "src/crypto/chacha.cpp",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chacha.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chacha.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha.cpp?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,215 @@\n+/*\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+#include <crypto/chacha.h>\n+\n+/* $OpenBSD: chacha.c,v 1.1 2013/11/21 00:45:44 djm Exp $ */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+\n+typedef struct chacha_ctx chacha_ctx;\n+\n+#define U8C(v) (v##U)\n+#define U32C(v) (v##U)\n+\n+#define U8V(v) ((u8)(v)&U8C(0xFF))\n+#define U32V(v) ((u32)(v)&U32C(0xFFFFFFFF))\n+\n+#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))\n+\n+#define U8TO32_LITTLE(p)                                                       \\\n+  (((u32)((p)[0])) | ((u32)((p)[1]) << 8) | ((u32)((p)[2]) << 16) |            \\\n+   ((u32)((p)[3]) << 24))\n+\n+#define U32TO8_LITTLE(p, v)                                                    \\\n+  do {                                                                         \\\n+    (p)[0] = U8V((v));                                                         \\\n+    (p)[1] = U8V((v) >> 8);                                                    \\\n+    (p)[2] = U8V((v) >> 16);                                                   \\\n+    (p)[3] = U8V((v) >> 24);                                                   \\\n+  } while (0)\n+\n+#define ROTATE(v, c) (ROTL32(v, c))\n+#define XOR(v, w) ((v) ^ (w))\n+#define PLUS(v, w) (U32V((v) + (w)))\n+#define PLUSONE(v) (PLUS((v), 1))\n+\n+#define QUARTERROUND(a, b, c, d)                                               \\\n+  a = PLUS(a, b);                                                              \\\n+  d = ROTATE(XOR(d, a), 16);                                                   \\\n+  c = PLUS(c, d);                                                              \\\n+  b = ROTATE(XOR(b, c), 12);                                                   \\\n+  a = PLUS(a, b);                                                              \\\n+  d = ROTATE(XOR(d, a), 8);                                                    \\\n+  c = PLUS(c, d);                                                              \\\n+  b = ROTATE(XOR(b, c), 7);\n+\n+static const char sigma[] = \"expand 32-byte k\";\n+static const char tau[] = \"expand 16-byte k\";\n+\n+void chacha_keysetup(chacha_ctx *x, const u8 *k, u32 kbits) {\n+  const char *constants;\n+\n+  x->input[4] = U8TO32_LITTLE(k + 0);\n+  x->input[5] = U8TO32_LITTLE(k + 4);\n+  x->input[6] = U8TO32_LITTLE(k + 8);\n+  x->input[7] = U8TO32_LITTLE(k + 12);\n+  if (kbits == 256) { /* recommended */\n+    k += 16;\n+    constants = sigma;\n+  } else { /* kbits == 128 */\n+    constants = tau;\n+  }\n+  x->input[8] = U8TO32_LITTLE(k + 0);\n+  x->input[9] = U8TO32_LITTLE(k + 4);\n+  x->input[10] = U8TO32_LITTLE(k + 8);\n+  x->input[11] = U8TO32_LITTLE(k + 12);\n+  x->input[0] = U8TO32_LITTLE(constants + 0);\n+  x->input[1] = U8TO32_LITTLE(constants + 4);\n+  x->input[2] = U8TO32_LITTLE(constants + 8);\n+  x->input[3] = U8TO32_LITTLE(constants + 12);\n+}\n+\n+void chacha_ivsetup(chacha_ctx *x, const u8 *iv, const u8 *counter) {\n+  x->input[12] = counter == NULL ? 0 : U8TO32_LITTLE(counter + 0);\n+  x->input[13] = counter == NULL ? 0 : U8TO32_LITTLE(counter + 4);\n+  x->input[14] = U8TO32_LITTLE(iv + 0);\n+  x->input[15] = U8TO32_LITTLE(iv + 4);\n+}\n+\n+void chacha_encrypt_bytes(chacha_ctx *x, const u8 *m, u8 *c, u32 bytes) {\n+  u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n+  u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;\n+  u8 *ctarget = NULL;\n+  u8 tmp[64];\n+  uint32_t i;\n+\n+  if (!bytes)\n+    return;\n+\n+  j0 = x->input[0];\n+  j1 = x->input[1];\n+  j2 = x->input[2];\n+  j3 = x->input[3];\n+  j4 = x->input[4];\n+  j5 = x->input[5];\n+  j6 = x->input[6];\n+  j7 = x->input[7];\n+  j8 = x->input[8];\n+  j9 = x->input[9];\n+  j10 = x->input[10];\n+  j11 = x->input[11];\n+  j12 = x->input[12];\n+  j13 = x->input[13];\n+  j14 = x->input[14];\n+  j15 = x->input[15];\n+\n+  for (;;) {\n+    if (bytes < 64) {\n+      for (i = 0; i < bytes; ++i)\n+        tmp[i] = m[i];\n+      m = tmp;\n+      ctarget = c;\n+      c = tmp;\n+    }\n+    x0 = j0;\n+    x1 = j1;\n+    x2 = j2;\n+    x3 = j3;\n+    x4 = j4;\n+    x5 = j5;\n+    x6 = j6;\n+    x7 = j7;\n+    x8 = j8;\n+    x9 = j9;\n+    x10 = j10;\n+    x11 = j11;\n+    x12 = j12;\n+    x13 = j13;\n+    x14 = j14;\n+    x15 = j15;\n+    for (i = 20; i > 0; i -= 2) {\n+      QUARTERROUND(x0, x4, x8, x12)\n+      QUARTERROUND(x1, x5, x9, x13)\n+      QUARTERROUND(x2, x6, x10, x14)\n+      QUARTERROUND(x3, x7, x11, x15)\n+      QUARTERROUND(x0, x5, x10, x15)\n+      QUARTERROUND(x1, x6, x11, x12)\n+      QUARTERROUND(x2, x7, x8, x13)\n+      QUARTERROUND(x3, x4, x9, x14)\n+    }\n+    x0 = PLUS(x0, j0);\n+    x1 = PLUS(x1, j1);\n+    x2 = PLUS(x2, j2);\n+    x3 = PLUS(x3, j3);\n+    x4 = PLUS(x4, j4);\n+    x5 = PLUS(x5, j5);\n+    x6 = PLUS(x6, j6);\n+    x7 = PLUS(x7, j7);\n+    x8 = PLUS(x8, j8);\n+    x9 = PLUS(x9, j9);\n+    x10 = PLUS(x10, j10);\n+    x11 = PLUS(x11, j11);\n+    x12 = PLUS(x12, j12);\n+    x13 = PLUS(x13, j13);\n+    x14 = PLUS(x14, j14);\n+    x15 = PLUS(x15, j15);\n+\n+    x0 = XOR(x0, U8TO32_LITTLE(m + 0));\n+    x1 = XOR(x1, U8TO32_LITTLE(m + 4));\n+    x2 = XOR(x2, U8TO32_LITTLE(m + 8));\n+    x3 = XOR(x3, U8TO32_LITTLE(m + 12));\n+    x4 = XOR(x4, U8TO32_LITTLE(m + 16));\n+    x5 = XOR(x5, U8TO32_LITTLE(m + 20));\n+    x6 = XOR(x6, U8TO32_LITTLE(m + 24));\n+    x7 = XOR(x7, U8TO32_LITTLE(m + 28));\n+    x8 = XOR(x8, U8TO32_LITTLE(m + 32));\n+    x9 = XOR(x9, U8TO32_LITTLE(m + 36));\n+    x10 = XOR(x10, U8TO32_LITTLE(m + 40));\n+    x11 = XOR(x11, U8TO32_LITTLE(m + 44));\n+    x12 = XOR(x12, U8TO32_LITTLE(m + 48));\n+    x13 = XOR(x13, U8TO32_LITTLE(m + 52));\n+    x14 = XOR(x14, U8TO32_LITTLE(m + 56));\n+    x15 = XOR(x15, U8TO32_LITTLE(m + 60));\n+\n+    j12 = PLUSONE(j12);\n+    if (!j12) {\n+      j13 = PLUSONE(j13);\n+      /* stopping at 2^70 bytes per nonce is user's responsibility */\n+    }\n+\n+    U32TO8_LITTLE(c + 0, x0);\n+    U32TO8_LITTLE(c + 4, x1);\n+    U32TO8_LITTLE(c + 8, x2);\n+    U32TO8_LITTLE(c + 12, x3);\n+    U32TO8_LITTLE(c + 16, x4);\n+    U32TO8_LITTLE(c + 20, x5);\n+    U32TO8_LITTLE(c + 24, x6);\n+    U32TO8_LITTLE(c + 28, x7);\n+    U32TO8_LITTLE(c + 32, x8);\n+    U32TO8_LITTLE(c + 36, x9);\n+    U32TO8_LITTLE(c + 40, x10);\n+    U32TO8_LITTLE(c + 44, x11);\n+    U32TO8_LITTLE(c + 48, x12);\n+    U32TO8_LITTLE(c + 52, x13);\n+    U32TO8_LITTLE(c + 56, x14);\n+    U32TO8_LITTLE(c + 60, x15);\n+\n+    if (bytes <= 64) {\n+      if (bytes < 64) {\n+        for (i = 0; i < bytes; ++i)\n+          ctarget[i] = c[i];\n+      }\n+      x->input[12] = j12;\n+      x->input[13] = j13;\n+      return;\n+    }\n+    bytes -= 64;\n+    c += 64;\n+    m += 64;\n+  }\n+}"
      },
      {
        "sha": "56ba1e0bcdd2a8442a274971a2600c2c7bfb4e0b",
        "filename": "src/crypto/chacha.h",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chacha.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chacha.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha.h?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,44 @@\n+/* $OpenBSD: chacha.h,v 1.4 2016/08/27 04:04:56 guenther Exp $ */\n+\n+/*\n+chacha-merged.c version 20080118\n+D. J. Bernstein\n+Public domain.\n+*/\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_H\n+#define BITCOIN_CRYPTO_CHACHA_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+struct chacha_ctx {\n+  uint32_t input[16];\n+};\n+\n+#define CHACHA_MINKEYLEN 16\n+#define CHACHA_NONCELEN 8\n+#define CHACHA_CTRLEN 8\n+#define CHACHA_STATELEN (CHACHA_NONCELEN + CHACHA_CTRLEN)\n+#define CHACHA_BLOCKLEN 64\n+\n+void chacha_keysetup(struct chacha_ctx *x, const uint8_t *k, uint32_t kbits)\n+#if defined(__clang__)\n+    __attribute__((__bounded__(__minbytes__, 2, CHACHA_MINKEYLEN)))\n+#endif\n+;\n+void chacha_ivsetup(struct chacha_ctx *x, const uint8_t *iv, const uint8_t *ctr)\n+#if defined(__clang__)\n+    __attribute__((__bounded__(__minbytes__, 2, CHACHA_NONCELEN)))\n+    __attribute__((__bounded__(__minbytes__, 3, CHACHA_CTRLEN)))\n+#endif\n+;\n+void chacha_encrypt_bytes(struct chacha_ctx *x, const uint8_t *m, uint8_t *c,\n+                          uint32_t bytes)\n+#if defined(__clang__)\n+    __attribute__((__bounded__(__buffer__, 2, 4)))\n+    __attribute__((__bounded__(__buffer__, 3, 4)))\n+#endif\n+;\n+\n+#endif /* BITCOIN_CRYPTO_CHACHA_H */"
      },
      {
        "sha": "2dd31bb3d564f172416e2d399ab6a7b492e192ad",
        "filename": "src/crypto/chachapoly_aead.cpp",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chachapoly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chachapoly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chachapoly_aead.cpp?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chachapoly_aead.h>\n+\n+#define __STDC_WANT_LIB_EXT1__ 1\n+#include <crypto/poly1305.h>\n+#include <string.h>\n+\n+#include <compat/endian.h>\n+#include <support/cleanse.h>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char *b1, const unsigned char *b2, size_t n) {\n+  const unsigned char *p1 = b1, *p2 = b2;\n+  int ret = 0;\n+\n+  for (; n > 0; n--)\n+    ret |= *p1++ ^ *p2++;\n+  return (ret != 0);\n+}\n+\n+#endif /* TIMINGSAFE_BCMP */\n+\n+int chacha20poly1305_init(struct chachapolyaead_ctx *ctx, const uint8_t *key,\n+                          int keylen) {\n+  if (keylen != (32 + 32)) /* 2 x 256 bit keys */\n+    return -1;\n+  chacha_keysetup(&ctx->main_ctx, key, 256);\n+  chacha_keysetup(&ctx->header_ctx, key + 32, 256);\n+  return 0;\n+}\n+\n+int chacha20poly1305_crypt(struct chachapolyaead_ctx *ctx, uint32_t seqnr,\n+                           uint8_t *dest, const uint8_t *src, uint32_t len,\n+                           uint32_t aadlen, int is_encrypt) {\n+  const uint8_t one[8] = {1, 0, 0, 0, 0, 0, 0, 0}; /* NB little-endian */\n+  uint8_t expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+  int r = 0;\n+\n+  uint64_t seqnr64 = seqnr;\n+  uint64_t chacha_iv = htole64(seqnr64);\n+  memset(poly_key, 0, sizeof(poly_key));\n+  chacha_ivsetup(&ctx->main_ctx, (uint8_t *)&chacha_iv, NULL);\n+  chacha_encrypt_bytes(&ctx->main_ctx, poly_key, poly_key, sizeof(poly_key));\n+\n+  if (!is_encrypt) {\n+    const uint8_t *tag = src + aadlen + len;\n+\n+    poly1305_auth(expected_tag, src, aadlen + len, poly_key);\n+    if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+      r = -1;\n+      goto out;\n+    }\n+  }\n+\n+  if (aadlen) {\n+    chacha_ivsetup(&ctx->header_ctx, (uint8_t *)&chacha_iv, NULL);\n+    chacha_encrypt_bytes(&ctx->header_ctx, src, dest, aadlen);\n+  }\n+\n+  /* Set Chacha's block counter to 1 */\n+  chacha_ivsetup(&ctx->main_ctx, (uint8_t *)&chacha_iv, one);\n+  chacha_encrypt_bytes(&ctx->main_ctx, src + aadlen, dest + aadlen, len);\n+\n+  /* If encrypting, calculate and append tag */\n+  if (is_encrypt) {\n+    poly1305_auth(dest + aadlen + len, dest, aadlen + len, poly_key);\n+  }\n+out:\n+  memory_cleanse(expected_tag, sizeof(expected_tag));\n+  memory_cleanse(&chacha_iv, sizeof(chacha_iv));\n+  memory_cleanse(poly_key, sizeof(poly_key));\n+  return r;\n+}\n+\n+int chacha20poly1305_get_length24(struct chachapolyaead_ctx *ctx,\n+                                uint32_t *len24_out, uint32_t seqnr,\n+                                const uint8_t *ciphertext) {\n+  uint8_t buf[3];\n+\n+  uint64_t seqnr64 = htole64(seqnr); // use LE for the nonce\n+  chacha_ivsetup(&ctx->header_ctx, (uint8_t *)&seqnr64, NULL);\n+  chacha_encrypt_bytes(&ctx->header_ctx, ciphertext, buf, 3);\n+  *len24_out = 0;\n+  *len24_out = buf[0] | (buf[1] << 8) | (buf[2] << 16);\n+\n+  // convert to host endianness 32bit integer\n+  *len24_out = le32toh(*len24_out);\n+  return 0;\n+}"
      },
      {
        "sha": "878ee0dc4df1694bbecaf552af953473f603cafc",
        "filename": "src/crypto/chachapoly_aead.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chachapoly_aead.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/chachapoly_aead.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chachapoly_aead.h?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHAPOLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHAPOLY_AEAD_H\n+\n+#include <crypto/chacha.h>\n+\n+#define CHACHA_KEYLEN 32 /* 2 x 256 bit keys */\n+\n+struct chachapolyaead_ctx {\n+  struct chacha_ctx main_ctx, header_ctx;\n+};\n+\n+int chacha20poly1305_init(struct chachapolyaead_ctx *cpctx, const uint8_t *key,\n+                          int keylen);\n+int chacha20poly1305_crypt(struct chachapolyaead_ctx *ctx, uint32_t seqnr,\n+                           uint8_t *dest, const uint8_t *src, uint32_t len,\n+                           uint32_t aadlen, int is_encrypt);\n+\n+// extracts the LE 24bit (3byte) length from the AAD and puts it into a uint32_t (host endianness)\n+int chacha20poly1305_get_length24(struct chachapolyaead_ctx *ctx,\n+                                uint32_t *len_out, uint32_t seqnr,\n+                                const uint8_t *ciphertext);\n+#endif /* BITCOIN_CRYPTO_CHACHAPOLY_AEAD_H */"
      },
      {
        "sha": "ec8af2db57ff86c6a710d4cc4ee676b94d2760dc",
        "filename": "src/crypto/poly1305.cpp",
        "status": "added",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/poly1305.cpp?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,198 @@\n+/*\n+ * Public Domain poly1305 from Andrew Moon\n+ * poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna\n+ */\n+\n+/* $OpenBSD: poly1305.c,v 1.3 2013/12/19 22:57:13 djm Exp $ */\n+\n+#include <crypto/poly1305.h>\n+\n+#define mul32x32_64(a, b) ((uint64_t)(a) * (b))\n+\n+#define U8TO32_LE(p)                                                           \\\n+  (((uint32_t)((p)[0])) | ((uint32_t)((p)[1]) << 8) |                          \\\n+   ((uint32_t)((p)[2]) << 16) | ((uint32_t)((p)[3]) << 24))\n+\n+#define U32TO8_LE(p, v)                                                        \\\n+  do {                                                                         \\\n+    (p)[0] = (uint8_t)((v));                                                   \\\n+    (p)[1] = (uint8_t)((v) >> 8);                                              \\\n+    (p)[2] = (uint8_t)((v) >> 16);                                             \\\n+    (p)[3] = (uint8_t)((v) >> 24);                                             \\\n+  } while (0)\n+\n+void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m,\n+                   size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {\n+  uint32_t t0, t1, t2, t3;\n+  uint32_t h0, h1, h2, h3, h4;\n+  uint32_t r0, r1, r2, r3, r4;\n+  uint32_t s1, s2, s3, s4;\n+  uint32_t b, nb;\n+  size_t j;\n+  uint64_t t[5];\n+  uint64_t f0, f1, f2, f3;\n+  uint32_t g0, g1, g2, g3, g4;\n+  uint64_t c;\n+  unsigned char mp[16];\n+\n+  /* clamp key */\n+  t0 = U8TO32_LE(key + 0);\n+  t1 = U8TO32_LE(key + 4);\n+  t2 = U8TO32_LE(key + 8);\n+  t3 = U8TO32_LE(key + 12);\n+\n+  /* precompute multipliers */\n+  r0 = t0 & 0x3ffffff;\n+  t0 >>= 26;\n+  t0 |= t1 << 6;\n+  r1 = t0 & 0x3ffff03;\n+  t1 >>= 20;\n+  t1 |= t2 << 12;\n+  r2 = t1 & 0x3ffc0ff;\n+  t2 >>= 14;\n+  t2 |= t3 << 18;\n+  r3 = t2 & 0x3f03fff;\n+  t3 >>= 8;\n+  r4 = t3 & 0x00fffff;\n+\n+  s1 = r1 * 5;\n+  s2 = r2 * 5;\n+  s3 = r3 * 5;\n+  s4 = r4 * 5;\n+\n+  /* init state */\n+  h0 = 0;\n+  h1 = 0;\n+  h2 = 0;\n+  h3 = 0;\n+  h4 = 0;\n+\n+  /* full blocks */\n+  if (inlen < 16)\n+    goto poly1305_donna_atmost15bytes;\n+poly1305_donna_16bytes:\n+  m += 16;\n+  inlen -= 16;\n+\n+  t0 = U8TO32_LE(m - 16);\n+  t1 = U8TO32_LE(m - 12);\n+  t2 = U8TO32_LE(m - 8);\n+  t3 = U8TO32_LE(m - 4);\n+\n+  h0 += t0 & 0x3ffffff;\n+  h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n+  h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n+  h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n+  h4 += (t3 >> 8) | (1 << 24);\n+\n+poly1305_donna_mul:\n+  t[0] = mul32x32_64(h0, r0) + mul32x32_64(h1, s4) + mul32x32_64(h2, s3) +\n+         mul32x32_64(h3, s2) + mul32x32_64(h4, s1);\n+  t[1] = mul32x32_64(h0, r1) + mul32x32_64(h1, r0) + mul32x32_64(h2, s4) +\n+         mul32x32_64(h3, s3) + mul32x32_64(h4, s2);\n+  t[2] = mul32x32_64(h0, r2) + mul32x32_64(h1, r1) + mul32x32_64(h2, r0) +\n+         mul32x32_64(h3, s4) + mul32x32_64(h4, s3);\n+  t[3] = mul32x32_64(h0, r3) + mul32x32_64(h1, r2) + mul32x32_64(h2, r1) +\n+         mul32x32_64(h3, r0) + mul32x32_64(h4, s4);\n+  t[4] = mul32x32_64(h0, r4) + mul32x32_64(h1, r3) + mul32x32_64(h2, r2) +\n+         mul32x32_64(h3, r1) + mul32x32_64(h4, r0);\n+\n+  h0 = (uint32_t)t[0] & 0x3ffffff;\n+  c = (t[0] >> 26);\n+  t[1] += c;\n+  h1 = (uint32_t)t[1] & 0x3ffffff;\n+  b = (uint32_t)(t[1] >> 26);\n+  t[2] += b;\n+  h2 = (uint32_t)t[2] & 0x3ffffff;\n+  b = (uint32_t)(t[2] >> 26);\n+  t[3] += b;\n+  h3 = (uint32_t)t[3] & 0x3ffffff;\n+  b = (uint32_t)(t[3] >> 26);\n+  t[4] += b;\n+  h4 = (uint32_t)t[4] & 0x3ffffff;\n+  b = (uint32_t)(t[4] >> 26);\n+  h0 += b * 5;\n+\n+  if (inlen >= 16)\n+    goto poly1305_donna_16bytes;\n+\n+/* final bytes */\n+poly1305_donna_atmost15bytes:\n+  if (!inlen)\n+    goto poly1305_donna_finish;\n+\n+  for (j = 0; j < inlen; j++)\n+    mp[j] = m[j];\n+  mp[j++] = 1;\n+  for (; j < 16; j++)\n+    mp[j] = 0;\n+  inlen = 0;\n+\n+  t0 = U8TO32_LE(mp + 0);\n+  t1 = U8TO32_LE(mp + 4);\n+  t2 = U8TO32_LE(mp + 8);\n+  t3 = U8TO32_LE(mp + 12);\n+\n+  h0 += t0 & 0x3ffffff;\n+  h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n+  h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n+  h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n+  h4 += (t3 >> 8);\n+\n+  goto poly1305_donna_mul;\n+\n+poly1305_donna_finish:\n+  b = h0 >> 26;\n+  h0 = h0 & 0x3ffffff;\n+  h1 += b;\n+  b = h1 >> 26;\n+  h1 = h1 & 0x3ffffff;\n+  h2 += b;\n+  b = h2 >> 26;\n+  h2 = h2 & 0x3ffffff;\n+  h3 += b;\n+  b = h3 >> 26;\n+  h3 = h3 & 0x3ffffff;\n+  h4 += b;\n+  b = h4 >> 26;\n+  h4 = h4 & 0x3ffffff;\n+  h0 += b * 5;\n+  b = h0 >> 26;\n+  h0 = h0 & 0x3ffffff;\n+  h1 += b;\n+\n+  g0 = h0 + 5;\n+  b = g0 >> 26;\n+  g0 &= 0x3ffffff;\n+  g1 = h1 + b;\n+  b = g1 >> 26;\n+  g1 &= 0x3ffffff;\n+  g2 = h2 + b;\n+  b = g2 >> 26;\n+  g2 &= 0x3ffffff;\n+  g3 = h3 + b;\n+  b = g3 >> 26;\n+  g3 &= 0x3ffffff;\n+  g4 = h4 + b - (1 << 26);\n+\n+  b = (g4 >> 31) - 1;\n+  nb = ~b;\n+  h0 = (h0 & nb) | (g0 & b);\n+  h1 = (h1 & nb) | (g1 & b);\n+  h2 = (h2 & nb) | (g2 & b);\n+  h3 = (h3 & nb) | (g3 & b);\n+  h4 = (h4 & nb) | (g4 & b);\n+\n+  f0 = ((h0) | (h1 << 26)) + (uint64_t)U8TO32_LE(&key[16]);\n+  f1 = ((h1 >> 6) | (h2 << 20)) + (uint64_t)U8TO32_LE(&key[20]);\n+  f2 = ((h2 >> 12) | (h3 << 14)) + (uint64_t)U8TO32_LE(&key[24]);\n+  f3 = ((h3 >> 18) | (h4 << 8)) + (uint64_t)U8TO32_LE(&key[28]);\n+\n+  U32TO8_LE(&out[0], f0);\n+  f1 += (f0 >> 32);\n+  U32TO8_LE(&out[4], f1);\n+  f2 += (f1 >> 32);\n+  U32TO8_LE(&out[8], f2);\n+  f3 += (f2 >> 32);\n+  U32TO8_LE(&out[12], f3);\n+}"
      },
      {
        "sha": "449432f96f535deafb919643c1195d7bad7dca66",
        "filename": "src/crypto/poly1305.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/poly1305.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124a14f02ef112bd45c38305a6f453da6d2557ab/src/crypto/poly1305.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/poly1305.h?ref=124a14f02ef112bd45c38305a6f453da6d2557ab",
        "patch": "@@ -0,0 +1,26 @@\n+/* $OpenBSD: poly1305.h,v 1.4 2014/05/02 03:27:54 djm Exp $ */\n+\n+/*\n+ * Public Domain poly1305 from Andrew Moon\n+ * poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna\n+ */\n+\n+#ifndef BITCOIN_CRYPTO_POLY1305_H\n+#define BITCOIN_CRYPTO_POLY1305_H\n+\n+#include <stdint.h>\n+#include <sys/types.h>\n+\n+#define POLY1305_KEYLEN 32\n+#define POLY1305_TAGLEN 16\n+\n+void poly1305_auth(uint8_t out[POLY1305_TAGLEN], const uint8_t *m, size_t inlen,\n+                   const uint8_t key[POLY1305_KEYLEN])\n+#if defined(__clang__)\n+    __attribute__((__bounded__(__minbytes__, 1, POLY1305_TAGLEN)))\n+    __attribute__((__bounded__(__buffer__, 2, 3)))\n+    __attribute__((__bounded__(__minbytes__, 4, POLY1305_KEYLEN)))\n+#endif\n+;\n+\n+#endif /* BITCOIN_CRYPTO_POLY1305_H */"
      }
    ]
  },
  {
    "sha": "ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTY4YmFhOTAyNjJiNzhmNDAwZmQwZDRlZjdiMDdiNWIyZDg5NDM1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T14:54:26Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-10-01T13:00:30Z"
      },
      "message": "QA: add ChaCha20/Poly1305 test vectors from the RFC draft",
      "tree": {
        "sha": "ddf8ae412a8cf6e490f47065ee8bd63b4db41228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddf8ae412a8cf6e490f47065ee8bd63b4db41228"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAluyGm8ACgkQHrd2uwPH\nki0QYA//c9Go02STQHQBstPudbbMO9EkEZH7YeP+KmLb84N96yrGT3rOjr93jwdg\nzH4cAb/D/Yg/Q6c69UBXGxMmYQt4+C/3INTbyvbFoJaezggvnwmy38gozCYXeDqX\nA8JjJoHfAQi40yf3xg/+SPMVnWMDt3OF4g9Gs/44l8Yga9nY67uqLUDA+vFkpayG\nVqudl0qusFdat6P5rIlc2434dhmJnJw6cCEReevaMYb11fnFHQ4X6hCP9p/wFFKs\nynS88KdRl1dJ/ACFfkbwQw3PYTz4UOGltyYaCBQQ1Stn7LQnI9HHLffin58fQwiN\n8VSreRYEkNKI7/YAxI+QBPaz1qxm9w+ItPOvsEl2abFS6Dwp7rgUxaAzuRedrF4f\nRuO4j7HDme45CIU4wp6pXh+LNK1AmDou8m171GcP8OBgyOien5AQZEqFKlwo+hH3\nyL2pB8W51/XgaQAL4ZcJkRbdXyf9kZkTYDO5nlQYuVzHTqQa/bkM+yeIhBthHgES\nEi9KlzG0XF7p9Q7ml5ksxiDwCo6zRSTB/s9FEaiwLfFBJZDMAECy0OCPI9ZxyvoS\neyUFumkTSuvjTD6XBrT5zsqkbzcvq3UtAnW9qanSvovWhfBQEGcSX7/QZcbaecU4\nbb3fucmRzXg7+reWPS1ewAYOGAva68EU/MvjbySrsPXE3z+U9K0=\n=DRcp\n-----END PGP SIGNATURE-----",
        "payload": "tree ddf8ae412a8cf6e490f47065ee8bd63b4db41228\nparent 124a14f02ef112bd45c38305a6f453da6d2557ab\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535122466 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1538398830 +0200\n\nQA: add ChaCha20/Poly1305 test vectors from the RFC draft\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae68baa90262b78f400fd0d4ef7b07b5b2d89435/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "124a14f02ef112bd45c38305a6f453da6d2557ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124a14f02ef112bd45c38305a6f453da6d2557ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/124a14f02ef112bd45c38305a6f453da6d2557ab"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 197,
      "deletions": 1
    },
    "files": [
      {
        "sha": "652543b9123d411560617aa17472564ea00d9425",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 1,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae68baa90262b78f400fd0d4ef7b07b5b2d89435/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae68baa90262b78f400fd0d4ef7b07b5b2d89435/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
        "patch": "@@ -3,7 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <crypto/aes.h>\n+#include <crypto/chachapoly_aead.h>\n #include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n@@ -494,7 +496,7 @@ BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {\n }\n \n \n-BOOST_AUTO_TEST_CASE(chacha20_testvector)\n+BOOST_AUTO_TEST_CASE(chacha20rng_testvector)\n {\n     // Test vector from RFC 7539\n     TestChaCha20(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\", 0x4a000000UL, 1,\n@@ -562,4 +564,198 @@ BOOST_AUTO_TEST_CASE(sha256d64)\n     }\n }\n \n+\n+BOOST_AUTO_TEST_CASE(chacha20poly1305_openssh)\n+{\n+    struct chacha20_testvector {\n+        uint8_t key[32];\n+        uint8_t nonce[8];\n+        uint8_t resulting_keystream[512];\n+        int keystream_check_size;\n+    };\n+\n+    struct poly1305_testvector {\n+        uint8_t input[64];\n+        int inputlen;\n+        uint8_t key[64];\n+        uint8_t resulting_tag[16];\n+    };\n+\n+    /*\n+       Testvectors have been taken from the draft RFC\n+       https://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-04#section-7\n+    */\n+\n+    static const struct chacha20_testvector chacha20_testvectors[] = {\n+        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a,\n+                0xe5, 0x53, 0x86, 0xbd, 0x28, 0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d,\n+                0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7, 0xda,\n+                0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d, 0x77, 0x24, 0xe0, 0x3f,\n+                0xb8, 0xd8, 0x4a, 0x37, 0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1,\n+                0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86},\n+            64},\n+        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},\n+            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0x45, 0x40, 0xf0, 0x5a, 0x9f, 0x1f, 0xb2, 0x96, 0xd7, 0x73, 0x6e,\n+                0x7b, 0x20, 0x8e, 0x3c, 0x96, 0xeb, 0x4f, 0xe1, 0x83, 0x46, 0x88,\n+                0xd2, 0x60, 0x4f, 0x45, 0x09, 0x52, 0xed, 0x43, 0x2d, 0x41, 0xbb,\n+                0xe2, 0xa0, 0xb6, 0xea, 0x75, 0x66, 0xd2, 0xa5, 0xd1, 0xe7, 0xe2,\n+                0x0d, 0x42, 0xaf, 0x2c, 0x53, 0xd7, 0x92, 0xb1, 0xc4, 0x3f, 0xea,\n+                0x81, 0x7e, 0x9a, 0xd2, 0x75, 0xae, 0x54, 0x69, 0x63},\n+            64},\n+        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},\n+            {0xde, 0x9c, 0xba, 0x7b, 0xf3, 0xd6, 0x9e, 0xf5, 0xe7, 0x86, 0xdc, 0x63,\n+                0x97, 0x3f, 0x65, 0x3a, 0x0b, 0x49, 0xe0, 0x15, 0xad, 0xbf, 0xf7, 0x13,\n+                0x4f, 0xcb, 0x7d, 0xf1, 0x37, 0x82, 0x10, 0x31, 0xe8, 0x5a, 0x05, 0x02,\n+                0x78, 0xa7, 0x08, 0x45, 0x27, 0x21, 0x4f, 0x73, 0xef, 0xc7, 0xfa, 0x5b,\n+                0x52, 0x77, 0x06, 0x2e, 0xb7, 0xa0, 0x43, 0x3e, 0x44, 0x5f, 0x41, 0xe3},\n+            60},\n+        {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            {0xef, 0x3f, 0xdf, 0xd6, 0xc6, 0x15, 0x78, 0xfb, 0xf5, 0xcf, 0x35,\n+                0xbd, 0x3d, 0xd3, 0x3b, 0x80, 0x09, 0x63, 0x16, 0x34, 0xd2, 0x1e,\n+                0x42, 0xac, 0x33, 0x96, 0x0b, 0xd1, 0x38, 0xe5, 0x0d, 0x32, 0x11,\n+                0x1e, 0x4c, 0xaf, 0x23, 0x7e, 0xe5, 0x3c, 0xa8, 0xad, 0x64, 0x26,\n+                0x19, 0x4a, 0x88, 0x54, 0x5d, 0xdc, 0x49, 0x7a, 0x0b, 0x46, 0x6e,\n+                0x7d, 0x6b, 0xbd, 0xb0, 0x04, 0x1b, 0x2f, 0x58, 0x6b},\n+            64},\n+        {{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+             0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,\n+             0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f},\n+            {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},\n+            {0xf7, 0x98, 0xa1, 0x89, 0xf1, 0x95, 0xe6, 0x69, 0x82, 0x10, 0x5f, 0xfb,\n+                0x64, 0x0b, 0xb7, 0x75, 0x7f, 0x57, 0x9d, 0xa3, 0x16, 0x02, 0xfc, 0x93,\n+                0xec, 0x01, 0xac, 0x56, 0xf8, 0x5a, 0xc3, 0xc1, 0x34, 0xa4, 0x54, 0x7b,\n+                0x73, 0x3b, 0x46, 0x41, 0x30, 0x42, 0xc9, 0x44, 0x00, 0x49, 0x17, 0x69,\n+                0x05, 0xd3, 0xbe, 0x59, 0xea, 0x1c, 0x53, 0xf1, 0x59, 0x16, 0x15, 0x5c,\n+                0x2b, 0xe8, 0x24, 0x1a, 0x38, 0x00, 0x8b, 0x9a, 0x26, 0xbc, 0x35, 0x94,\n+                0x1e, 0x24, 0x44, 0x17, 0x7c, 0x8a, 0xde, 0x66, 0x89, 0xde, 0x95, 0x26,\n+                0x49, 0x86, 0xd9, 0x58, 0x89, 0xfb, 0x60, 0xe8, 0x46, 0x29, 0xc9, 0xbd,\n+                0x9a, 0x5a, 0xcb, 0x1c, 0xc1, 0x18, 0xbe, 0x56, 0x3e, 0xb9, 0xb3, 0xa4,\n+                0xa4, 0x72, 0xf8, 0x2e, 0x09, 0xa7, 0xe7, 0x78, 0x49, 0x2b, 0x56, 0x2e,\n+                0xf7, 0x13, 0x0e, 0x88, 0xdf, 0xe0, 0x31, 0xc7, 0x9d, 0xb9, 0xd4, 0xf7,\n+                0xc7, 0xa8, 0x99, 0x15, 0x1b, 0x9a, 0x47, 0x50, 0x32, 0xb6, 0x3f, 0xc3,\n+                0x85, 0x24, 0x5f, 0xe0, 0x54, 0xe3, 0xdd, 0x5a, 0x97, 0xa5, 0xf5, 0x76,\n+                0xfe, 0x06, 0x40, 0x25, 0xd3, 0xce, 0x04, 0x2c, 0x56, 0x6a, 0xb2, 0xc5,\n+                0x07, 0xb1, 0x38, 0xdb, 0x85, 0x3e, 0x3d, 0x69, 0x59, 0x66, 0x09, 0x96,\n+                0x54, 0x6c, 0xc9, 0xc4, 0xa6, 0xea, 0xfd, 0xc7, 0x77, 0xc0, 0x40, 0xd7,\n+                0x0e, 0xaf, 0x46, 0xf7, 0x6d, 0xad, 0x39, 0x79, 0xe5, 0xc5, 0x36, 0x0c,\n+                0x33, 0x17, 0x16, 0x6a, 0x1c, 0x89, 0x4c, 0x94, 0xa3, 0x71, 0x87, 0x6a,\n+                0x94, 0xdf, 0x76, 0x28, 0xfe, 0x4e, 0xaa, 0xf2, 0xcc, 0xb2, 0x7d, 0x5a,\n+                0xaa, 0xe0, 0xad, 0x7a, 0xd0, 0xf9, 0xd4, 0xb6, 0xad, 0x3b, 0x54, 0x09,\n+                0x87, 0x46, 0xd4, 0x52, 0x4d, 0x38, 0x40, 0x7a, 0x6d, 0xeb, 0x3a, 0xb7,\n+                0x8f, 0xab, 0x78, 0xc9},\n+            256}};\n+\n+    static const struct poly1305_testvector poly1305_testvectors[] = {\n+        {\n+            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n+            32,\n+            {0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x33, 0x32, 0x2d,\n+                0x62, 0x79, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x66, 0x6f,\n+                0x72, 0x20, 0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35},\n+            {0x49, 0xec, 0x78, 0x09, 0x0e, 0x48, 0x1e, 0xc6, 0xc2, 0x6b, 0x33, 0xb9,\n+                0x1c, 0xcc, 0x03, 0x07},\n+        },\n+        {{0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21},\n+            12,\n+            {0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x33, 0x32, 0x2d,\n+                0x62, 0x79, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x66, 0x6f,\n+                0x72, 0x20, 0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35},\n+            {0xa6, 0xf7, 0x45, 0x00, 0x8f, 0x81, 0xc9, 0x16, 0xa2, 0x0d, 0xcc, 0x74,\n+                0xee, 0xf2, 0xb2, 0xf0}}};\n+\n+    struct chacha_ctx ctx;\n+    unsigned int i = 0;\n+    uint8_t keystream[512];\n+    uint8_t poly1305_tag[16];\n+\n+    /* test chacha20 */\n+    for (i = 0;\n+         i < (sizeof(chacha20_testvectors) / sizeof(chacha20_testvectors[0]));\n+         i++) {\n+        chacha_ivsetup(&ctx, chacha20_testvectors[i].nonce, nullptr);\n+        memset(keystream, 0, 512);\n+        chacha_keysetup(&ctx, chacha20_testvectors[i].key, 256);\n+        chacha_encrypt_bytes(&ctx, keystream, keystream, 512);\n+        assert(memcmp(keystream, chacha20_testvectors[i].resulting_keystream,\n+                   chacha20_testvectors[i].keystream_check_size) == 0);\n+    }\n+\n+    /* test poly1305 */\n+    for (i = 0;\n+         i < (sizeof(poly1305_testvectors) / sizeof(poly1305_testvectors[0]));\n+         i++) {\n+        memset(poly1305_tag, 0, 16);\n+        poly1305_auth(poly1305_tag, poly1305_testvectors[i].input,\n+            poly1305_testvectors[i].inputlen,\n+            poly1305_testvectors[i].key);\n+        assert(memcmp(poly1305_tag, poly1305_testvectors[i].resulting_tag, 16) ==\n+               0);\n+    }\n+\n+    /* test chacha20poly1305 AEAD */\n+    struct chachapolyaead_ctx aead_ctx;\n+    uint32_t seqnr = 100;\n+    uint8_t aead_keys[64] = {\n+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,\n+        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n+\n+    uint8_t plaintext_buf[255] = {\n+        0xff, 0x00, 0x00, 0xf1, 0x95, 0xe6, 0x69, 0x82, 0x10, 0x5f, 0xfb,\n+        0x64, 0x0b, 0xb7, 0x75, 0x7f, 0x57, 0x9d, 0xa3, 0x16, 0x02, 0xfc, 0x93,\n+        0xec, 0x01, 0xac, 0x56, 0xf8, 0x5a, 0xc3, 0xc1, 0x34, 0xa4, 0x54, 0x7b,\n+        0x73, 0x3b, 0x46, 0x41, 0x30, 0x42, 0xc9, 0x44, 0x00, 0x49, 0x17, 0x69,\n+        0x05, 0xd3, 0xbe, 0x59, 0xea, 0x1c, 0x53, 0xf1, 0x59, 0x16, 0x15, 0x5c,\n+        0x2b, 0xe8, 0x24, 0x1a, 0x38, 0x00, 0x8b, 0x9a, 0x26, 0xbc, 0x35, 0x94,\n+        0x1e, 0x24, 0x44, 0x17, 0x7c, 0x8a, 0xde, 0x66, 0x89, 0xde, 0x95, 0x26,\n+        0x49, 0x86, 0xd9, 0x58, 0x89, 0xfb, 0x60, 0xe8, 0x46, 0x29, 0xc9, 0xbd,\n+        0x9a, 0x5a, 0xcb, 0x1c, 0xc1, 0x18, 0xbe, 0x56, 0x3e, 0xb9, 0xb3, 0xa4,\n+        0xa4, 0x72, 0xf8, 0x2e, 0x09, 0xa7, 0xe7, 0x78, 0x49, 0x2b, 0x56, 0x2e,\n+        0xf7, 0x13, 0x0e, 0x88, 0xdf, 0xe0, 0x31, 0xc7, 0x9d, 0xb9, 0xd4, 0xf7,\n+        0xc7, 0xa8, 0x99, 0x15, 0x1b, 0x9a, 0x47, 0x50, 0x32, 0xb6, 0x3f, 0xc3,\n+        0x85, 0x24, 0x5f, 0xe0, 0x54, 0xe3, 0xdd, 0x5a, 0x97, 0xa5, 0xf5, 0x76,\n+        0xfe, 0x06, 0x40, 0x25, 0xd3, 0xce, 0x04, 0x2c, 0x56, 0x6a, 0xb2, 0xc5,\n+        0x07, 0xb1, 0x38, 0xdb, 0x85, 0x3e, 0x3d, 0x69, 0x59, 0x66, 0x09, 0x96,\n+        0x54, 0x6c, 0xc9, 0xc4, 0xa6, 0xea, 0xfd, 0xc7, 0x77, 0xc0, 0x40, 0xd7,\n+        0x0e, 0xaf, 0x46, 0xf7, 0x6d, 0xad, 0x39, 0x79, 0xe5, 0xc5, 0x36, 0x0c,\n+        0x33, 0x17, 0x16, 0x6a, 0x1c, 0x89, 0x4c, 0x94, 0xa3, 0x71, 0x87, 0x6a,\n+        0x94, 0xdf, 0x76, 0x28, 0xfe, 0x4e, 0xaa, 0xf2, 0xcc, 0xb2, 0x7d, 0x5a,\n+        0xaa, 0xe0, 0xad, 0x7a, 0xd0, 0xf9, 0xd4, 0xb6, 0xad, 0x3b, 0x54, 0x09,\n+        0x87, 0x46, 0xd4, 0x52, 0x4d, 0x38, 0x40, 0x7a, 0x6d, 0xeb, 0x3a, 0xb7,\n+        0x8f, 0xab, 0x78, 0xc9};\n+\n+    uint8_t ciphertext_buf[300];\n+    uint8_t plaintext_buf_new[256];\n+    memset(ciphertext_buf, 0, 300);\n+    memset(plaintext_buf_new, 0, 256);\n+    chacha20poly1305_init(&aead_ctx, aead_keys, 64);\n+    assert((uint32_t)plaintext_buf[0] == 255);\n+    chacha20poly1305_crypt(&aead_ctx, seqnr, ciphertext_buf, plaintext_buf, 252,\n+        3, 1);\n+    uint32_t out_len = 0;\n+    chacha20poly1305_get_length24(&aead_ctx, &out_len, seqnr, ciphertext_buf);\n+    assert(out_len == 255);\n+    chacha20poly1305_crypt(&aead_ctx, seqnr, plaintext_buf_new, ciphertext_buf,\n+        252, 3, 0);\n+    assert(memcmp(plaintext_buf, plaintext_buf_new, sizeof(plaintext_buf)) == 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjVhNDE4NTNkY2MxYmE5NjhlNDdhNWU4ZDQwZTM2ZDFmMzQ2YTA4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-27T19:22:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-10-01T13:17:04Z"
      },
      "message": "Add benchmark for ChaCha20Poly1305-openssh AEAD and dbl-SHA256",
      "tree": {
        "sha": "99194cfa4284b89189756bebdd0dc1a77c1278ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99194cfa4284b89189756bebdd0dc1a77c1278ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAluyHlEACgkQHrd2uwPH\nki2KAg//aODzT8RGSWOYQ1f5Q85BpQ0CsGQtOqICwb+9zT05FzAClJ5ZUeDQfThh\nudaXayqvuIWzSf91JMLFLPEA/kbBeQVDPR3bo6jw825ZF8DbA+FpnfC9cOIiOHf+\nY/owPhjskM1T5tHTRtZRoaeAd7MmWa4uYVrZ/eXSDVPNdaombBr94lcG2iefG/vm\nhqawiOcam9AqMWEL0jvWvfSm6oPNWwSNwh5eOXAB9IZryVwePT6pQ80SHDTsoDso\ny4RBTP5dhlU7FacV4XLwLo8Fys+oGMdK6ooScUYqIZfKUSLw8OK9+l+vdeKA1ZGY\nnJmMLD/kVZTdFKaEMKoEnAnCCTzk7q83tsEDg3DYEIWI3dyr4zgvVkXbxI/NobpP\nR1tQp3sJ9ojmZbe2FbNnzSwsS2SniY76ijy5hAeMAy7gliMyo2W2nOuc/+do7T3J\nrSSRRur0uyd98QKsaPSDc5zVELb3kKqgtV9QjvWeSlhC87j0PdNA+4IW6iCuDGlm\ni3EdAlR4DG172vITMPoOzidLUUxN/005h1eiaCDQc8XvFK0GQl3ebkhC9R/zVUP1\nMO3/XXGzZxYo5ZuBuTe1oTF6lV983lSz/nmlkn00m0PKrR7OGsWeCdE76Imx8wr6\nt9g6zRSne5wR78Dk9NknCa+xScsntE5hR7uqcP2OTCLx4HbyzKQ=\n=MWkq\n-----END PGP SIGNATURE-----",
        "payload": "tree 99194cfa4284b89189756bebdd0dc1a77c1278ab\nparent ae68baa90262b78f400fd0d4ef7b07b5b2d89435\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535397762 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1538399824 +0200\n\nAdd benchmark for ChaCha20Poly1305-openssh AEAD and dbl-SHA256\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65a41853dcc1ba968e47a5e8d40e36d1f346a08/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae68baa90262b78f400fd0d4ef7b07b5b2d89435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae68baa90262b78f400fd0d4ef7b07b5b2d89435"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e89c8e2daadf52f25d4bbc2060eb2b5811394b18",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e65a41853dcc1ba968e47a5e8d40e36d1f346a08/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e65a41853dcc1ba968e47a5e8d40e36d1f346a08/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
        "patch": "@@ -20,6 +20,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/checkqueue.cpp \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n+  bench/chacha20poly1305.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\"
      },
      {
        "sha": "1cb99c624963461eea0b6a4b66ce6ce62f50eda6",
        "filename": "src/bench/chacha20poly1305.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e65a41853dcc1ba968e47a5e8d40e36d1f346a08/src/bench/chacha20poly1305.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e65a41853dcc1ba968e47a5e8d40e36d1f346a08/src/bench/chacha20poly1305.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha20poly1305.cpp?ref=e65a41853dcc1ba968e47a5e8d40e36d1f346a08",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <hash.h>\n+#include <utiltime.h>\n+#include <crypto/chachapoly_aead.h>\n+\n+/* Number of bytes to crypt/hash per iteration */\n+static const uint64_t BUFFER_SIZE_A = 1000*1000;\n+static const uint64_t BUFFER_SIZE_B = 256;\n+\n+static void CHACHA20POLY1305AEAD_(benchmark::State& state, uint64_t bufsize)\n+{\n+    struct chachapolyaead_ctx aead_ctx;\n+    static const uint32_t seqnr = 100;\n+    static const uint8_t aead_keys[64] = {\n+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,\n+        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n+\n+    chacha20poly1305_init(&aead_ctx, aead_keys, 64);\n+    std::vector<uint8_t> in(bufsize, 0);\n+    std::vector<uint8_t> out(bufsize, 0);\n+\n+    while (state.KeepRunning()) {\n+        chacha20poly1305_crypt(&aead_ctx, seqnr, in.data(), out.data(), in.size()-16,\n+            4, 1);\n+    }\n+}\n+\n+static void CHACHA20POLY1305AEAD_BIG(benchmark::State& state)\n+{\n+    CHACHA20POLY1305AEAD_(state, BUFFER_SIZE_A);\n+}\n+\n+static void CHACHA20POLY1305AEAD_SMALL(benchmark::State& state)\n+{\n+    CHACHA20POLY1305AEAD_(state, BUFFER_SIZE_B);\n+}\n+\n+static void HASH256_(benchmark::State& state, uint64_t bufsize)\n+{\n+    uint8_t hash[CHash256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(bufsize, 0);\n+    while (state.KeepRunning()) {\n+        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+    }\n+}\n+static void HASH256_BIG(benchmark::State& state) {\n+    HASH256_(state, BUFFER_SIZE_A);\n+}\n+static void HASH256_SMALL(benchmark::State& state) {\n+    HASH256_(state, BUFFER_SIZE_B);\n+}\n+\n+BENCHMARK(HASH256_SMALL, 250000);\n+BENCHMARK(HASH256_BIG, 340);\n+BENCHMARK(CHACHA20POLY1305AEAD_SMALL, 250000);\n+BENCHMARK(CHACHA20POLY1305AEAD_BIG, 340);"
      }
    ]
  }
]