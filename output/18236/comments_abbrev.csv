sipa,2020-03-01 22:00:42,"This is a hardfork, and cannot be made unilaterally by one client - the entire network must choose this.\n\nIt's also misguided. Representation and existance of negative zero is indeed implementation defined for C++ int types, but also not observable and not what this is about. Bitcoin Script's numeric interpration of byte vectors does have a well-defined and observable negative zero. We cannot ge",https://github.com/bitcoin/bitcoin/pull/18236#issuecomment-593151057,593151057,
v1048576,2020-03-01 22:06:42,"> This is a hardfork, and cannot be made unilaterally by one client - the entire network must choose this.\n> \n> It's also misguided. Representation and existance of negative zero is indeed implementation defined for C++ int types, but also not observable and not what this is about. Bitcoin Script's numeric interpration of byte vectors does have a well-defined and observable negative zero. We c",https://github.com/bitcoin/bitcoin/pull/18236#issuecomment-593151658,593151658,
sipa,2020-03-01 22:31:22,"To be clear: it's the CastToBool change that's a hardfork. The script 0x0180 goes from being unspendable to spendable (it pushes a negative zero onto the stack). The change in OP_NEGATE is a no-op, as the arithmetic operations there operate on the converted-to-numbers representation, in which zero and negative zero are equal.",https://github.com/bitcoin/bitcoin/pull/18236#issuecomment-593153843,593153843,
