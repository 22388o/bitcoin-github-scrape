[
  {
    "sha": "fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
    "node_id": "C_kwDOABII59oAKGZhM2UwZGEwNmI0OTFiOGMwZmEyZGJhZTM3NjgyYTkxMTJjOWRlYjg",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-15T09:56:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-16T07:20:33Z"
      },
      "message": "policy: Treat taproot as always active",
      "tree": {
        "sha": "3b4433c45304ee8e430858cef37655a91b729c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b4433c45304ee8e430858cef37655a91b729c97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjjXAwAqFD9WkHH7NC2q7UjvSEg/bY424CSk0ImckZgVsNJa2V0ejjs5InNdnsL\nUwh6kGYzuS+tkWjV4rUr7NZvakW7E+A1/tRWufpYcuizn515DUXQVPErMQCgzUNN\n/JNBatK3AAd+kwKi3oMJW9fwyO+t2D9lJZcFxQW0RxUOKyWKpJ60tNsfPjlMJvK7\nU2TR32tKv9rIeJH61w83oyfbV7KIASN7DPMcFGKHXLiUZLtSvkazObevACCyGgYb\nw0+4dBZRDcFwZcwAlSANmzQCiCJBMoNPSnUObgcgwidLcq0ZEk3ineU6tYuwRjCR\neABjm2HreumLQYHFN/31rdl2MrdlmUEa4Aimf4SOH7EppmXFtCV14q/PYzM5u+b1\n/TqEzvFlazH+pJ5m5sjrswEJPbsoCUXJleQAQFqjdCkfDvo8AAh0WVIYge8QDF+V\n6mIKUr/M1kpEy2kJB7eNLcatLT/Gz0di1eSpDLc0++IAGfl2ofy1VGm9LHvhH78h\n0b5j24kW\n=P7vX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b4433c45304ee8e430858cef37655a91b729c97\nparent 15d109802ab93b0af9647858c9d8adcd8a2db84a\nauthor MarcoFalke <falke.marco@gmail.com> 1636970176 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637047233 +0100\n\npolicy: Treat taproot as always active\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15d109802ab93b0af9647858c9d8adcd8a2db84a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15d109802ab93b0af9647858c9d8adcd8a2db84a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15d109802ab93b0af9647858c9d8adcd8a2db84a"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 42,
      "deletions": 58
    },
    "files": [
      {
        "sha": "dae3a47cd760dfda9498cc95cd042baab3557c66",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -45,7 +45,7 @@ static void CCoinsCaching(benchmark::Bench& bench)\n     // Benchmark.\n     const CTransaction tx_1(t1);\n     bench.run([&] {\n-        bool success = AreInputsStandard(tx_1, coins, false);\n+        bool success{AreInputsStandard(tx_1, coins)};\n         assert(success);\n     });\n     ECC_Stop();"
      },
      {
        "sha": "38004ce95d3f0a26b4cf52c5d5d653ef2fc9fc4b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -287,9 +287,6 @@ class Chain\n     //! to be prepared to handle this by ignoring notifications about unknown\n     //! removed transactions and already added new transactions.\n     virtual void requestMempoolTransactions(Notifications& notifications) = 0;\n-\n-    //! Check if Taproot has activated\n-    virtual bool isTaprootActive() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "a80209dcab5723a3bc052946dd59f58dc6bb7c76",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -713,12 +713,6 @@ class ChainImpl : public Chain\n             notifications.transactionAddedToMempool(entry.GetSharedTx(), 0 /* mempool_sequence */);\n         }\n     }\n-    bool isTaprootActive() override\n-    {\n-        LOCK(::cs_main);\n-        const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n-        return DeploymentActiveAfter(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n-    }\n     NodeContext& m_node;\n };\n } // namespace"
      },
      {
        "sha": "2c30b20d5ba75711e606c9b48346e79b742613bb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -161,13 +161,13 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n  */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n-    if (tx.IsCoinBase())\n+    if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n+    }\n \n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n@@ -189,9 +189,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n-        } else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n-            // Don't allow Taproot spends unless Taproot is active.\n-            if (!taproot_active) return false;\n         }\n     }\n "
      },
      {
        "sha": "f6ac6500f690891094543dcd3e6f6f818ebc08e4",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -105,10 +105,9 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n /**\n * Check for standard transaction types\n * @param[in] mapInputs       Map of previous transactions that have outputs we're spending\n-* @param[in] taproot_active  Whether or taproot consensus rules are active (used to decide whether spends of them are permitted)\n * @return True if all inputs (scriptSigs) use only standard transaction forms\n */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n /**\n * Check if the transaction is over standard P2WSH resources limit:\n * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements"
      },
      {
        "sha": "2f3359834862954c98c219e19325141dd7fe23a1",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -221,8 +221,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 assert(expected_code_path);\n             },\n             [&] {\n-                (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, false);\n-                (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, true);\n+                (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n             },\n             [&] {\n                 TxValidationState state;"
      },
      {
        "sha": "ba6c50054307a5335ea5287791df01a2f49ada77",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -98,8 +98,7 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n \n     CCoinsView coins_view;\n     const CCoinsViewCache coins_view_cache(&coins_view);\n-    (void)AreInputsStandard(tx, coins_view_cache, false);\n-    (void)AreInputsStandard(tx, coins_view_cache, true);\n+    (void)AreInputsStandard(tx, coins_view_cache);\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);"
      },
      {
        "sha": "17b335962467258e8cf5fe99446d71109a1ab9ce",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n     txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n-    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, false));\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txTo), coins), 22U);\n \n@@ -356,7 +356,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd1), coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -368,7 +368,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd2), coins), 20U);\n }\n "
      },
      {
        "sha": "e05781a6f09719b9dcb6efecf7f31f3f6886cf05",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -406,7 +406,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, false));\n+    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins));\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)"
      },
      {
        "sha": "881b0abc74c05bf8626e52203b7b9f000108c68c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -723,8 +723,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n "
      },
      {
        "sha": "e0c5eef96bf3c3f3390223e0f7fdaeaa14edce47",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -1548,18 +1548,6 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             }\n         }\n \n-        // Taproot descriptors cannot be imported if Taproot is not yet active.\n-        // Check if this is a Taproot descriptor\n-        CTxDestination dest;\n-        ExtractDestination(scripts[0], dest);\n-        if (std::holds_alternative<WitnessV1Taproot>(dest)) {\n-            // Check if Taproot is active\n-            if (!wallet.chain().isTaprootActive()) {\n-                // Taproot is not active, raise an error\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import tr() descriptor when Taproot is not active\");\n-            }\n-        }\n-\n         // If private keys are enabled, check some things.\n         if (!wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n            if (keys.keys.empty()) {"
      },
      {
        "sha": "932742ad007e87a78c68ce77d3074dda7d09ca02",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 24,
        "deletions": 7,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -89,6 +89,7 @@\n     hash160,\n )\n from collections import OrderedDict, namedtuple\n+from enum import Enum\n from io import BytesIO\n import json\n import hashlib\n@@ -423,7 +424,7 @@ def to_script(elem):\n # Each spender is a tuple of:\n # - A scriptPubKey which is to be spent from (CScript)\n # - A comment describing the test (string)\n-# - Whether the spending (on itself) is expected to be standard (bool)\n+# - Whether the spending (on itself) is expected to be standard (Enum.Standard)\n # - A tx-signing lambda returning (scriptsig, witness_stack), taking as inputs:\n #   - A transaction to sign (CTransaction)\n #   - An input position (int)\n@@ -435,8 +436,14 @@ def to_script(elem):\n # - Whether this test demands being placed in a txin with no corresponding txout (for testing SIGHASH_SINGLE behavior)\n \n Spender = namedtuple(\"Spender\", \"script,comment,is_standard,sat_function,err_msg,sigops_weight,no_fail,need_vin_vout_mismatch\")\n+# The full node versions that treat the tx standard.\n+# ALL means any version\n+# V23 means the major version 23.0 and any later version\n+# NONE means no version\n+Standard = Enum('Standard', 'ALL V23 NONE')\n \n-def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=False, spk_mutate_pre_p2sh=None, failure=None, standard=True, err_msg=None, sigops_weight=0, need_vin_vout_mismatch=False, **kwargs):\n+\n+def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=False, spk_mutate_pre_p2sh=None, failure=None, standard=Standard.ALL, err_msg=None, sigops_weight=0, need_vin_vout_mismatch=False, **kwargs):\n     \"\"\"Helper for constructing Spender objects using the context signing framework.\n \n     * tap: a TaprootInfo object (see taproot_construct), for Taproot spends (cannot be combined with pkh, witv0, or script)\n@@ -446,13 +453,18 @@ def make_spender(comment, *, tap=None, witv0=False, script=None, pkh=None, p2sh=\n     * p2sh: whether the output is P2SH wrapper (this is supported even for Taproot, where it makes the output unencumbered)\n     * spk_mutate_pre_psh: a callable to be applied to the script (before potentially P2SH-wrapping it)\n     * failure: a dict of entries to override in the context when intentionally failing to spend (if None, no_fail will be set)\n-    * standard: whether the (valid version of) spending is expected to be standard\n+    * standard: whether the (valid version of) spending is expected to be standard (True is mapped to Standard.ALL, False is mapped to Standard.NONE)\n     * err_msg: a string with an expected error message for failure (or None, if not cared about)\n     * sigops_weight: the pre-taproot sigops weight consumed by a successful spend\n     * need_vin_vout_mismatch: whether this test requires being tested in a transaction input that has no corresponding\n                               transaction output.\n     \"\"\"\n \n+    if standard == True:\n+        standard = Standard.ALL\n+    elif standard == False:\n+        standard = Standard.NONE\n+\n     conf = dict()\n \n     # Compute scriptPubKey and set useful defaults based on the inputs.\n@@ -1137,12 +1149,12 @@ def spenders_taproot_inactive():\n     tap = taproot_construct(pub, scripts)\n \n     # Test that keypath spending is valid & non-standard, regardless of validity.\n-    add_spender(spenders, \"inactive/keypath_valid\", key=sec, tap=tap, standard=False)\n+    add_spender(spenders, \"inactive/keypath_valid\", key=sec, tap=tap, standard=Standard.V23)\n     add_spender(spenders, \"inactive/keypath_invalidsig\", key=sec, tap=tap, standard=False, sighash=bitflipper(default_sighash))\n     add_spender(spenders, \"inactive/keypath_empty\", key=sec, tap=tap, standard=False, witness=[])\n \n     # Same for scriptpath spending (and features like annex, leaf versions, or OP_SUCCESS don't change this)\n-    add_spender(spenders, \"inactive/scriptpath_valid\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")])\n+    add_spender(spenders, \"inactive/scriptpath_valid\", key=sec, tap=tap, leaf=\"pk\", standard=Standard.V23, inputs=[getter(\"sign\")])\n     add_spender(spenders, \"inactive/scriptpath_invalidsig\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], sighash=bitflipper(default_sighash))\n     add_spender(spenders, \"inactive/scriptpath_invalidcb\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], controlblock=bitflipper(default_controlblock))\n     add_spender(spenders, \"inactive/scriptpath_valid_unkleaf\", key=sec, tap=tap, leaf=\"future_leaf\", standard=False, inputs=[getter(\"sign\")])\n@@ -1172,7 +1184,7 @@ def dump_json_test(tx, input_utxos, idx, success, failure):\n \n     # The \"final\" field indicates that a spend should be always valid, even with more validation flags enabled\n     # than the listed ones. Use standardness as a proxy for this (which gives a conservative underestimate).\n-    if spender.is_standard:\n+    if spender.is_standard == Standard.ALL:\n         fields.append((\"final\", True))\n \n     def dump_witness(wit):\n@@ -1438,8 +1450,13 @@ def test_spenders(self, node, spenders, input_counts):\n                 for i in range(len(input_utxos)):\n                     tx.vin[i].scriptSig = input_data[i][i != fail_input][0]\n                     tx.wit.vtxinwit[i].scriptWitness.stack = input_data[i][i != fail_input][1]\n+                taproot_spend_policy = Standard.V23 if node.version is None else Standard.ALL\n                 # Submit to mempool to check standardness\n-                is_standard_tx = fail_input is None and all(utxo.spender.is_standard for utxo in input_utxos) and tx.nVersion >= 1 and tx.nVersion <= 2\n+                is_standard_tx = (\n+                    fail_input is None  # Must be valid to be standard\n+                    and (all(utxo.spender.is_standard == Standard.ALL or utxo.spender.is_standard == taproot_spend_policy for utxo in input_utxos))  # All inputs must be standard\n+                    and tx.nVersion >= 1  # The tx version must be standard\n+                    and tx.nVersion <= 2)\n                 tx.rehash()\n                 msg = ','.join(utxo.spender.comment + (\"*\" if n == fail_input else \"\") for n, utxo in enumerate(input_utxos))\n                 if is_standard_tx:"
      },
      {
        "sha": "d286b91491b2007e05b27da70bb20d24a177e404",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e0da06b491b8c0fa2dbae37682a9112c9deb8/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=fa3e0da06b491b8c0fa2dbae37682a9112c9deb8",
        "patch": "@@ -237,20 +237,15 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n             assert_equal(len(rederive), 1)\n             assert_equal(rederive[0], addr_g)\n \n-        # tr descriptors cannot be imported when Taproot is not active\n+        # tr descriptors can be imported regardless of Taproot status\n         result = self.privs_tr_enabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n         assert(result[0][\"success\"])\n         result = self.pubs_tr_enabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n         assert(result[0][\"success\"])\n-        if desc.startswith(\"tr\"):\n-            result = self.privs_tr_disabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n-            assert(not result[0][\"success\"])\n-            assert_equal(result[0][\"error\"][\"code\"], -4)\n-            assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n-            result = self.pubs_tr_disabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n-            assert(not result[0][\"success\"])\n-            assert_equal(result[0][\"error\"][\"code\"], -4)\n-            assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+        result = self.privs_tr_disabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        assert result[0][\"success\"]\n+        result = self.pubs_tr_disabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n+        assert result[0][\"success\"]\n \n     def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, keys_change):\n         self.log.info(\"Testing %s through sendtoaddress\" % comment)"
      }
    ]
  }
]