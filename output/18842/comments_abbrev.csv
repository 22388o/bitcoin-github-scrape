MarcoFalke,2020-05-01 15:35:45,This is an alternative to my preferred fix #18840,https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-622437145,622437145,
ryanofsky,2020-05-01 17:45:47,"re: https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-622437145\n\n> This is an alternative to my preferred fix #18840\n\nfa3fdbfa89719797bba3b044b96caa984c5ff4be does seem a little fragile. I guess I was thinking of something more like:\n\n```diff\ndiff --git a/src/interfaces/chain.cpp b/src/interfaces/chain.cpp\nindex 0e7641ae320..8b288e62ff7 100644\n--- a/src/interfaces/chain.",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-622489245,622489245,
promag,2020-08-15 00:13:19,"Concept ACK.\n\nThis looks a bug to me, a test would be nice.\n\n@ryanofsky how could `chain().isInMempool(originalHash)` be true?\n\nI find odd that `mapValue[""replaces_txid""]` is updated in feebumper and `mapValue[""replaced_by_txid""]` is updated in wallet. Maybe we could move `CWallet::MarkReplaced` to feebumper.",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-674318296,674318296,
DrahtBot,2020-09-20 04:22:17,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-695690717,695690717,
Sjors,2021-03-03 13:51:36,Apparently the backwards compatibility test is still intermittently failing. Needs rebase.,https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-789728180,789728180,
MarcoFalke,2021-03-05 16:14:19,"Rebased. Not addressed any feedback, because the question by @promag hasn't been answered: ""@ryanofsky how could chain().isInMempool(originalHash) be true?""",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791520582,791520582,
ryanofsky,2021-03-05 16:38:16,"> Rebased. Not addressed any feedback, because the question by @promag hasn't been answered: ""@ryanofsky how could chain().isInMempool(originalHash) be true?""\n\nI think it should be true because MarkReplaced should be called after the new transaction is committed and the old transaction is no longer in the mempool. As I understand it, the race happens because `transactionRemovedFromMempool` not",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791536626,791536626,
ryanofsky,2021-03-05 17:00:06,"Oh sorry, I answered why the question how could it be false, not how could it be true. It could be true if MarkReplaced was called at unexpected time on a transaction that wasn't successfully replaced, or maybe restored after a replacement was abandoned. So the change was suggested to make MarkReplaced safer. An alternative to:\n\n```c++\nwtx.fInMempool = chain().isInMempool(originalHash);\n``",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791550092,791550092,
ryanofsky,2021-03-05 17:01:45,Code review ACK faeedff5c87091fd83d2fb2b29eb49c948363f29 or for any of the suggested alternatives.,https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791551132,791551132,
MarcoFalke,2021-03-05 17:49:09,"> assert(!chain().isInMempool(originalHash));\n\nThis seems fragile, as it (in theory) may crash the node. Imagine calling `bumpfee`, then deprioritizing the tx with `prioritizetransaction`, then adding back the original tx (before the interface call can complete).\n\n",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791579548,791579548,
ryanofsky,2021-03-05 17:55:52,"> > assert(!chain().isInMempool(originalHash));\n> \n> This seems fragile, as it (in theory) may crash the node. Imagine calling `bumpfee`, then deprioritizing the tx with `prioritizetransaction`, then adding back the original tx (before the interface call can complete).\n\nRight, that's why I suggested `wtx.fInMempool = chain().isInMempool(originalHash);` to do the correct thing in this case.",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791583397,791583397,
ryanofsky,2021-03-05 17:58:20,"Or you could replace crashing assert with throwing CHECK.  Basically https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-622489245 is still my preferred alternative, but all alternatives discussed and current PR seem fine.",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791584702,791584702,
MarcoFalke,2021-03-05 18:16:16,"> to do the correct thing in this case\n\nI don't think it is possible to do a thing that is correct in all scenarios. The wallet is an async subscriber of the mempool, so if there are any mempool RPCs called concurrently (and conflicting) with wallet RPCs there is no way to ""do the correct thing"". The design here is that the wallet will eventually catch up with the correct data if you give it e",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791594633,791594633,
ryanofsky,2021-03-05 18:28:56,Is there something not correct about `wtx.fInMempool = chain().isInMempool(originalHash);` with cs_wallet held?,https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791601417,791601417,
MarcoFalke,2021-03-05 18:37:31,"It won't crash the node, but adding it doesn't guarantee that the in-mempool status is correct at all times.\n\nImagine calling `bumpfee`, concurrently you deprioritize the new tx with `prioritizetransaction`, then adding back the original tx with `sendrawtransaction`. Then `wtx.fInMempool = chain().isInMempool(originalHash);` assigns `true`. But immediately afterward you remove the deprioritiza",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791605971,791605971,
ryanofsky,2021-03-05 19:01:12,"> Imagine calling `bumpfee`, concurrently you deprioritize the new tx with `prioritizetransaction`, then adding back the original tx with `sendrawtransaction`. Then `wtx.fInMempool = chain().isInMempool(originalHash);` assigns `true`\n\nI think can you avoid problems here just holding cs_wallet throughout the bumpfee call. I haven't dug into the details of what we're doing, but clearly what we'r",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-791618228,791618228,
MarcoFalke,2021-03-07 11:19:18,"Thanks, force pushed your patch (needed rebased)",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-792260413,792260413,
MarcoFalke,2021-03-09 06:53:59,"This variant has two ACKs, so I think it is good to go in",https://github.com/bitcoin/bitcoin/pull/18842#issuecomment-793464220,793464220,
