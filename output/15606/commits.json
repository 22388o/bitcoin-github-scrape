[
  {
    "sha": "b637ffaad40ea8707bdb27334990d2bcac28cf53",
    "node_id": "C_kwDOABII59oAKGI2MzdmZmFhZDQwZWE4NzA3YmRiMjczMzQ5OTBkMmJjYWMyOGNmNTM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-04-25T15:09:57Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-29T13:59:04Z"
      },
      "message": "rpc: various fixups for dumptxoutset\n\n- Actually generate an assumeutxo hash and display it\n- Add nchaintx to output (necessary for use in chainparams entry)\n- Add path of serialized UTXO file to output",
      "tree": {
        "sha": "62b3f16d8942349136f2440f6714e9d72bf2a442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62b3f16d8942349136f2440f6714e9d72bf2a442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b637ffaad40ea8707bdb27334990d2bcac28cf53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmF7/ikACgkQepNdrbLE\nTwVHEw//RqTKSW40B3yb8s+1a1LlSu/qnruB6gCCnRKAE1nCSylkH18KF1/VnHvm\nS8Xz/c/WzfTpQTqhneEyyvgMCAbqttf7Qo9n9Lwh43YDQp+jxDvDaoGip4pqMy3r\neWhvfnok2vcsMrzpwyoAwsIQJSvbtD54SMgJZcYrcOSOMughqzUGj7s5WWYE4Sij\nZAT0CC8Dnw3CSAih8x7asfU/YGfya+R/V2lys0cInWdSeBWZA85aeBuh5/Y13OmG\n1o54/sXF/CtBrLIBl83m4o6Q5FDEUIvSfAovMcpORes9JhKKzpxCTcW6Yh0DZpCk\nnHNKU31VYFLuwcAnxmvZgjPhXUiB8OB4Tr9vSF2UfKNqVl9z9AZkj+zW332wXdoQ\nH3tvDXdv8efp/OjaSaMCB+0Q8+jPvRsEKA8ZcQJO3z+O81Tnp6igr4eHAPQgIFrw\nvYMDIHlYvNbrXWkr60du9B0VwFq8QzEv1h8vR9ZkfYfn22a4CLmt4t7wVJ1r5EzP\nUsJgyR72a+BIrSNhA3Kvoiw4/PmQkuA4CzhJrlW+hFpm3rpex6UbGx8Y6asDJ6J/\n2OBpLYcx1QFpkcq7x8CG4Ha6ZACDvH6leptsXyxwHcEGxIHe4I4iTx3grDVvqBcq\nCEIksCcCeT7bPo79pmpr4o3vAZp6e9V/ojuGdEteHab3KMN1VU0=\n=AVk1\n-----END PGP SIGNATURE-----",
        "payload": "tree 62b3f16d8942349136f2440f6714e9d72bf2a442\nparent ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd\nauthor James O'Beirne <james.obeirne@gmail.com> 1556204997 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1635515944 -0400\n\nrpc: various fixups for dumptxoutset\n\n- Actually generate an assumeutxo hash and display it\n- Add nchaintx to output (necessary for use in chainparams entry)\n- Add path of serialized UTXO file to output\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b637ffaad40ea8707bdb27334990d2bcac28cf53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b637ffaad40ea8707bdb27334990d2bcac28cf53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b637ffaad40ea8707bdb27334990d2bcac28cf53/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 33,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3ff390b6d0961c6c223a71e2a813f811a5013738",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "patch": "@@ -15,10 +15,12 @@\n #include <core_io.h>\n #include <deploymentinfo.h>\n #include <deploymentstatus.h>\n+#include <fs.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n #include <node/blockstorage.h>\n+#include <logging/timer.h>\n #include <node/coinstats.h>\n #include <node/context.h>\n #include <node/utxo_snapshot.h>\n@@ -2547,6 +2549,8 @@ static RPCHelpMan dumptxoutset()\n                     {RPCResult::Type::STR_HEX, \"base_hash\", \"the hash of the base of the snapshot\"},\n                     {RPCResult::Type::NUM, \"base_height\", \"the height of the base of the snapshot\"},\n                     {RPCResult::Type::STR, \"path\", \"the absolute path that the snapshot was written to\"},\n+                    {RPCResult::Type::STR_HEX, \"txoutset_hash\", \"the hash of the UTXO set contents\"},\n+                    {RPCResult::Type::NUM, \"nchaintx\", \"the nchaintx value for the base block\"},\n                 }\n         },\n         RPCExamples{\n@@ -2569,7 +2573,8 @@ static RPCHelpMan dumptxoutset()\n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n-    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n+    UniValue result = CreateUTXOSnapshot(\n+        node, node.chainman->ActiveChainstate(), afile, path, temppath);\n     fs::rename(temppath, path);\n \n     result.pushKV(\"path\", path.u8string());\n@@ -2578,10 +2583,15 @@ static RPCHelpMan dumptxoutset()\n     };\n }\n \n-UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)\n+UniValue CreateUTXOSnapshot(\n+    NodeContext& node,\n+    CChainState& chainstate,\n+    CAutoFile& afile,\n+    const fs::path path,\n+    const fs::path temppath)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor;\n-    CCoinsStats stats{CoinStatsHashType::NONE};\n+    CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\n     CBlockIndex* tip;\n \n     {\n@@ -2610,6 +2620,10 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n         CHECK_NONFATAL(tip);\n     }\n \n+    LOG_TIME_SECONDS(strprintf(\"writing UTXO snapshot at height %s (%s) to file %s (via %s)\",\n+        tip->nHeight, tip->GetBlockHash().ToString(),\n+        fs::PathToString(path), fs::PathToString(temppath)));\n+\n     SnapshotMetadata metadata{tip->GetBlockHash(), stats.coins_count, tip->nChainTx};\n \n     afile << metadata;\n@@ -2635,7 +2649,9 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n     result.pushKV(\"coins_written\", stats.coins_count);\n     result.pushKV(\"base_hash\", tip->GetBlockHash().ToString());\n     result.pushKV(\"base_height\", tip->nHeight);\n-\n+    result.pushKV(\"path\", fs::PathToString(path));\n+    result.pushKV(\"txoutset_hash\", stats.hashSerialized.ToString());\n+    result.pushKV(\"nchaintx\", static_cast<int>(tip->nChainTx));\n     return result;\n }\n "
      },
      {
        "sha": "f0d7b743d6000f4ae77e34bd64be518df03185d8",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <consensus/amount.h>\n #include <core_io.h>\n+#include <fs.h>\n #include <streams.h>\n #include <sync.h>\n \n@@ -65,6 +66,11 @@ CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n  * Helper to create UTXO snapshots given a chainstate and a file handle.\n  * @return a UniValue map containing metadata about the snapshot.\n  */\n-UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n+UniValue CreateUTXOSnapshot(\n+    NodeContext& node,\n+    CChainState& chainstate,\n+    CAutoFile& afile,\n+    const fs::path path,\n+    const fs::path tmppath);\n \n #endif"
      },
      {
        "sha": "e3d2b417c9a22b5146221616c6bbc25cdb0ba9a3",
        "filename": "src/test/util/chainstate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/test/util/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b637ffaad40ea8707bdb27334990d2bcac28cf53/src/test/util/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/chainstate.h?ref=b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "patch": "@@ -34,7 +34,8 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleati\n     FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n     CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n \n-    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    UniValue result = CreateUTXOSnapshot(\n+        node, node.chainman->ActiveChainstate(), auto_outfile, snapshot_path, snapshot_path);\n     BOOST_TEST_MESSAGE(\n         \"Wrote UTXO snapshot to \" << fs::PathToString(snapshot_path.make_preferred()) << \": \" << result.write());\n "
      },
      {
        "sha": "4359f4a799f18c6dcb6247ef534687954fd10f5c",
        "filename": "test/functional/rpc_dumptxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b637ffaad40ea8707bdb27334990d2bcac28cf53/test/functional/rpc_dumptxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b637ffaad40ea8707bdb27334990d2bcac28cf53/test/functional/rpc_dumptxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_dumptxoutset.py?ref=b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "patch": "@@ -45,6 +45,10 @@ def run_test(self):\n             assert_equal(\n                 digest, '7ae82c986fa5445678d2a21453bb1c86d39e47af13da137640c2b1cf8093691c')\n \n+        assert_equal(\n+            out['txoutset_hash'], 'd4b614f476b99a6e569973bf1c0120d88b1a168076f8ce25691fb41dd1cef149')\n+        assert_equal(out['nchaintx'], 101)\n+\n         # Specifying a path to an existing file will fail.\n         assert_raises_rpc_error(\n             -8, '{} already exists'.format(FILENAME),  node.dumptxoutset, FILENAME)"
      }
    ]
  },
  {
    "sha": "40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
    "node_id": "C_kwDOABII59oAKDQwYzJlNmI4YTQ4OGE5M2E0MzUzNjUyYmRjM2U0YTQ3NzE3YTc4YTQ",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T19:15:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:22Z"
      },
      "message": "validation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...",
      "tree": {
        "sha": "e7590b7f94446591b48177e2b146e98610948d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7590b7f94446591b48177e2b146e98610948d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1AoACgkQepNdrbLE\nTwViMg/9GuFGRZsOeMI9xlCLlmZe2oPxhSnzVYE9iqDFAIPQ2zRiWHKLZ5RT6IB1\npzfBEZhZkj7zr54md82Z54RAB+6Yz2KFWNBUcXEdxerbD1RPhOwqnig1YvncTjYO\n9LrFj3FK6X5fzYdKaiYOJ1EcjKmhlPSQ9qUbQDTWrQszzEQ/WiBMppm+rz9TQfO1\nYgf1tHidGPzvePUTe+BHIQ+xaWGqgfIR34YoacDltVofYJUzTcze7T4leQ5ojn9F\nnmPd2X6kFRnjM6jv4mRD9YlDNXkqtFmPO6FISDatM3+s7ZKhfmpYYUVoDFbgqd5L\n4yxBO2c9GUVh3Ip6/ND9rZuZwB/dsEDPmTbM06ZzqEUV0vSHSQDsuXE1YlJOoW4H\nUpXUT4fIt70x3H+gd97KnJfnkoz0oDxxlmKm/JobSHBKf2QsziznQvyt3ddUVM4U\n0q9VWNTjc9hvQXV0eZ1v7StJfN4d7p3BI+iDWmvxas/wPnudsSK6GGenar3178Qv\n9uOiEbDNNzXLV+UZ67xG3VQwLJDisg2ZT5cnTtq6qiaKUh2I2DhfG+vbmfwZZOJu\naotloeI+eQYA9OsbLD7HjSHRiYn9bTrlv4l1HEDQIkF1eAajER48Xtd4qTXyE/oC\nI+veddK5q23FK+L1XLKYqtEfJLb75jme2QckslC4C42EWfqeTuk=\n=4MXX\n-----END PGP SIGNATURE-----",
        "payload": "tree e7590b7f94446591b48177e2b146e98610948d55\nparent b637ffaad40ea8707bdb27334990d2bcac28cf53\nauthor James O'Beirne <james.obeirne@pm.me> 1635448510 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488202 -0500\n\nvalidation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c2e6b8a488a93a4353652bdc3e4a47717a78a4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b637ffaad40ea8707bdb27334990d2bcac28cf53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b637ffaad40ea8707bdb27334990d2bcac28cf53"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a33484ce112456c20e3c939e6c0f567c422e70b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40c2e6b8a488a93a4353652bdc3e4a47717a78a4/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40c2e6b8a488a93a4353652bdc3e4a47717a78a4/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
        "patch": "@@ -332,6 +332,8 @@ class CBlockIndex\n         return false;\n     }\n \n+    bool isGenesis() const { return nHeight == 0; }\n+\n     //! Build the skiplist pointer for this entry.\n     void BuildSkip();\n "
      },
      {
        "sha": "cd8452b0b8df0d5070635274a63b30a985c73574",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40c2e6b8a488a93a4353652bdc3e4a47717a78a4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40c2e6b8a488a93a4353652bdc3e4a47717a78a4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
        "patch": "@@ -4912,6 +4912,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n+        if (index->isGenesis()) {\n+            // Don't make any modifications to the genesis block.\n+            // This is especially important because we don't want to erroneously\n+            // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+            // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).\n+            continue;\n+        }\n+\n         // Fake nTx so that LoadBlockIndex() loads assumed-valid CBlockIndex\n         // entries (among other things)\n         if (!index->nTx) {"
      }
    ]
  },
  {
    "sha": "19f4646489945af14db25832548e7fa9be48bd79",
    "node_id": "C_kwDOABII59oAKDE5ZjQ2NDY0ODk5NDVhZjE0ZGIyNTgzMjU0OGU3ZmE5YmU0OGJkNzk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T20:07:46Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:25Z"
      },
      "message": "validation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.",
      "tree": {
        "sha": "823934022c162f494ff9997c81a971f1e15480ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/823934022c162f494ff9997c81a971f1e15480ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19f4646489945af14db25832548e7fa9be48bd79",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1A0ACgkQepNdrbLE\nTwVPoxAAiQcz+am/4Q2OWU42fFp6soopmDzgCh7uK8bCyAsQFKpVXEgEnz1w4l3e\nDattbJ9O/OlvMwTRyZhjcha8d0I7vm+IxuJGtorTTKPM90UP2tGYH8CLC32D7xWC\nZSh4ibi1csSKywjKtt+Q5sOirLWY6o9fyut5ZvLE2aVivNDH/XEJiRpAN+m1RX9Q\nhs1rVBBykn+ObbGJCvECZ8lrCIO/yEIT/M84IxlzBUVMRu+a5IwmMDrC/kLjHtGd\np2pmtDqSpRGC396nuwjixKBv6AqusEqIhzw06FUOIlJQBLMtirmCng/XdKImcq7j\njr6b9T5K0tCHftAFZtpoo9NIe7kjv0s0fBCMNQDPAAhFGL3a7oOdLLH5rEeRGlXf\nB0SOwuxa8VFA4AV2oZJCVC3d9wvMut109gmkvo21eIZ3JXtO9vkMB1pBW65RC4Vq\n/KhBh4fabWzlq/1yhqbMdcP2D8t6sshUGxvWcwszSbOJbTVASFpIJ90U9ESWM1we\nnH1yL92j/LoxRVpiVPfdStB6LsDJqOIixqvLvFON4dLdpcAGr+w5l8AQTPloK9dE\nBKbjIrb2ObJVnFha30c341Ap3WbvNYgXpuDK/tyFA1/1sqKapB6MQykaHKu6w9ra\nn4g0db9ojkS3uJjykgYFegw5GQ0ohCRvtp8KxBik3H5rlQoCxBM=\n=c6ob\n-----END PGP SIGNATURE-----",
        "payload": "tree 823934022c162f494ff9997c81a971f1e15480ab\nparent 40c2e6b8a488a93a4353652bdc3e4a47717a78a4\nauthor James O'Beirne <james.obeirne@pm.me> 1635451666 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488205 -0500\n\nvalidation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19f4646489945af14db25832548e7fa9be48bd79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19f4646489945af14db25832548e7fa9be48bd79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19f4646489945af14db25832548e7fa9be48bd79/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c2e6b8a488a93a4353652bdc3e4a47717a78a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40c2e6b8a488a93a4353652bdc3e4a47717a78a4"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 43,
      "deletions": 15
    },
    "files": [
      {
        "sha": "48df83a86917612b91c56b5976986d13d8586f02",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 9,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19f4646489945af14db25832548e7fa9be48bd79/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19f4646489945af14db25832548e7fa9be48bd79/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=19f4646489945af14db25832548e7fa9be48bd79",
        "patch": "@@ -3607,7 +3607,7 @@ CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)\n \n bool BlockManager::LoadBlockIndex(\n     const Consensus::Params& consensus_params,\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n+    ChainstateManager& chainman)\n {\n     if (!m_block_tree_db->LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); })) {\n         return false;\n@@ -3622,17 +3622,29 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Have we yet seen a pindex->IsAssumedValid()? If so, account for the fact that all subsequent\n+    // index entries rely on assumed-valid ancestors.\n+    bool seen_assumed_valid{false};\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n-        // We can link the chain of blocks for which we've received transactions at some point.\n+\n+        if (!seen_assumed_valid && pindex->IsAssumedValid()) {\n+            seen_assumed_valid = true;\n+        }\n+\n+        // We can link the chain of blocks for which we've received transactions at some point, or\n+        // blocks that are assumed-valid on the basis of snapshot load (see\n+        // PopulateAndValidateSnapshot()).\n         // Pruned nodes may have deleted the block.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                if (pindex->pprev->nChainTx > 0) {\n                     pindex->nChainTx = pindex->pprev->nChainTx + pindex->nTx;\n                 } else {\n                     pindex->nChainTx = 0;\n@@ -3649,7 +3661,25 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                // Only add blocks which are assumed-valid to chainstates which\n+                // explicitly allow a reliance on assumed-valid blocks.\n+                //\n+                // Note: the loop over `vSortedByHeight` could ceteris paribus mean that\n+                // we are possibly considering a block which has a height\n+                // higher than the assumed-valid region but is not itself\n+                // reliant on assumed-valid ancestors. In practice this will\n+                // not happen because assumed-valid blocks are buried fairly\n+                // deeply in the valid chain.\n+                if (seen_assumed_valid) {\n+                    if (chainstate->reliesOnAssumedValid()) {\n+                        chainstate->setBlockIndexCandidates.insert(pindex);\n+                    }\n+                } else {\n+                    // When blockindex doesn't rely on assumedvalid blocks, add it to all chainstates.\n+                    chainstate->setBlockIndexCandidates.insert(pindex);\n+                }\n+            }\n         }\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n             pindexBestInvalid = pindex;\n@@ -3673,11 +3703,9 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates)\n+bool BlockManager::LoadBlockIndexDB(ChainstateManager& chainman)\n {\n-    if (!LoadBlockIndex(\n-            ::Params().GetConsensus(),\n-            setBlockIndexCandidates)) {\n+    if (!LoadBlockIndex(::Params().GetConsensus(), chainman)) {\n         return false;\n     }\n \n@@ -4023,7 +4051,7 @@ bool ChainstateManager::LoadBlockIndex()\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = m_blockman.LoadBlockIndexDB(ActiveChainstate().setBlockIndexCandidates);\n+        bool ret = m_blockman.LoadBlockIndexDB(*this);\n         if (!ret) return false;\n         needs_init = m_blockman.m_block_index.empty();\n     }"
      },
      {
        "sha": "7c7ad4bbc63d3aeaef10c8a8517f446e29b69c6a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19f4646489945af14db25832548e7fa9be48bd79/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19f4646489945af14db25832548e7fa9be48bd79/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=19f4646489945af14db25832548e7fa9be48bd79",
        "patch": "@@ -427,20 +427,16 @@ class BlockManager\n \n     std::unique_ptr<CBlockTreeDB> m_block_tree_db GUARDED_BY(::cs_main);\n \n-    bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    bool LoadBlockIndexDB(ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /**\n      * Load the blocktree off disk and into memory. Populate certain metadata\n      * per index entry (nStatus, nChainWork, nTimeMax, etc.) as well as peripheral\n      * collections like setDirtyBlockIndex.\n-     *\n-     * @param[out] block_index_candidates  Fill this set with any valid blocks for\n-     *                                     which we've downloaded all transactions.\n      */\n     bool LoadBlockIndex(\n         const Consensus::Params& consensus_params,\n-        std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n-        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+        ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Clear all data members. */\n     void Unload() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -626,6 +622,10 @@ class CChainState\n      */\n     const std::optional<uint256> m_from_snapshot_blockhash;\n \n+    //! Return true if this chainstate relies on blocks that are assumed-valid. In\n+    //! practice this means it was created based on a UTXO snapshot.\n+    bool reliesOnAssumedValid() { return m_from_snapshot_blockhash.has_value(); }\n+\n     /**\n      * The set of all CBlockIndex entries with either BLOCK_VALID_TRANSACTIONS (for\n      * itself and all ancestors) *or* BLOCK_ASSUMED_VALID (if using background"
      }
    ]
  },
  {
    "sha": "e4a1a0bba21a31ced45924e372954ac61d27132f",
    "node_id": "C_kwDOABII59oAKGU0YTFhMGJiYTIxYTMxY2VkNDU5MjRlMzcyOTU0YWM2MWQyNzEzMmY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-04-12T17:44:15Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:26Z"
      },
      "message": "blockstorage: don't flush if nothing to flush",
      "tree": {
        "sha": "46c4225f3cfa46d13777cd43bbabda68c12a562e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c4225f3cfa46d13777cd43bbabda68c12a562e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4a1a0bba21a31ced45924e372954ac61d27132f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1A4ACgkQepNdrbLE\nTwXEbg/9EMvBFGwb/Fo20aiU2VkmBzNRBs/JllBixH6qiRyn7EMag8GRnbUuv+cT\n/M/l5mN2maHI1+R1EcG0VUT4zFeAyOMDjjtSC5APPoaEbUpk0NYGYjMSN+A7iZn2\nwNZX4IoRrmkZn5+eZb0a0/1OkjV2JcjzFrcSRmt5M8zDEKY1lM0SWL6GsP6cboBZ\n+uJ/YktnXbmWmNs8kMYY3TlrelEk8e/qh8f0wms4m4eap9KlwXjAcGfVQtIbvDH8\nT1TcWkct1c+jPlDYyyQcZx5efQ5xu/L7WF1RpqmmWtlFMPtgHPNV6tQUlHbfkm/Z\nW9hvACyFwQEF4mitZr1tpcRms1r1aqt+HT7HghXxig+WeCFm/7lTz1sc9uoC8+WZ\nIruDsNP/zjLCwOFOAzBIK98RnaCW8ooBGScqU1g/jdnnEheL5HznjAc6rMdqISAA\n2Zi55Gbo4OvmDnnNNcT5CpSg+LgNqMwu0dkhLCD2SatlzXiTjkbDVdMuZFq9Aam1\nFwv9Gx8uh6qI+zKBaaAeO0CiPEKEQ9HkBu+VkcSvBhEW2SXcteOOoFKxjGZlY04z\nd6M0LwGa505JzaodluTyQlgfLZWVnsVdA3dKUGIMBXXPoejja58i2GLSy1IyYUxC\nqn6csWbAekInggsCTLtcIw6Nt0Q//RypRMt2nBLWSGaP9MOyCrs=\n=oNA0\n-----END PGP SIGNATURE-----",
        "payload": "tree 46c4225f3cfa46d13777cd43bbabda68c12a562e\nparent 19f4646489945af14db25832548e7fa9be48bd79\nauthor James O'Beirne <james.obeirne@pm.me> 1586713455 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488206 -0500\n\nblockstorage: don't flush if nothing to flush\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a1a0bba21a31ced45924e372954ac61d27132f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a1a0bba21a31ced45924e372954ac61d27132f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a1a0bba21a31ced45924e372954ac61d27132f/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19f4646489945af14db25832548e7fa9be48bd79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19f4646489945af14db25832548e7fa9be48bd79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19f4646489945af14db25832548e7fa9be48bd79"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a18c412177292dd1c6ed2cbc53ba27555292176b",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a1a0bba21a31ced45924e372954ac61d27132f/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a1a0bba21a31ced45924e372954ac61d27132f/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=e4a1a0bba21a31ced45924e372954ac61d27132f",
        "patch": "@@ -179,6 +179,12 @@ static void FlushUndoFile(int block_file, bool finalize = false)\n void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false)\n {\n     LOCK(cs_LastBlockFile);\n+\n+    if (vinfoBlockFile.size() < 1) {\n+        // Nothing to flush\n+        return;\n+    }\n+\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n     if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");"
      }
    ]
  },
  {
    "sha": "9ca59a34dc02a52978ff22f66b2894c318850be5",
    "node_id": "C_kwDOABII59oAKDljYTU5YTM0ZGMwMmE1Mjk3OGZmMjJmNjZiMjg5NGMzMTg4NTBiZTU",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T20:59:18Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:27Z"
      },
      "message": "add ChainstateManager.getSnapshot{Height,BaseBlock}()\n\nFor use in later commits.",
      "tree": {
        "sha": "ec4d78dd493cffbc5c46c3892032b0cc434b6fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec4d78dd493cffbc5c46c3892032b0cc434b6fd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ca59a34dc02a52978ff22f66b2894c318850be5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1A8ACgkQepNdrbLE\nTwWYuA/+ISXQ33LAzVGYb3ZWZsHYhnDvznB2njbgbLSGZCKqUGKPovV3H0aCGkcw\nwEGPArg9DcP26Gqelw+qlnqMRsmHO1aSvaBgN+IpSJweuxAuuf6okNTAmRTPfz4d\nSR7dmhAbVGgcWRAzJKN296Wzno2dbUoUP5W5VQJR0O7rh9RswbCo9f9WSnAcyqOG\nPJ/86qdHd1qEwFgyHn7ORfW0L8m0j71h6L5szsQprIrO/09MqkTpZt8hUyezpwVb\nvpo5bMXfkzmuA17JN3HNjDf6UL7YVZ1HA0uQ6JqGQoKRTT+LQu7wrlMkIawqTSN2\nQCr+NjRmzqJKjQz7a7JNZhvJtDugT88A2NSsV44wpthUlkw9WcnTqXaxn4VRlGF+\nDG9dHVwqKwtbD2naK9keEpIe96HJFa3A97PjAPKaLL3lsKkR0qJIIuFZyKBhFzdm\nfR7fwLzAQOQ1WBtwsty96knHFKjaIOjvihc1yJOSxXQnrskqtvYIvnv65s6zeo/g\nT74+oLoQH34iza+sW8TFt4+POvqKDAkx5rRAfnKL0wCrRQN0JfSDk6J2THq3evbP\nznsxW3f2eDox0GXmdlERI9uNe1F3+RebB6fnyCQ0QHEZFc37dvs9MpnkImEpO2bB\n5yN+vx4mqE+aETXtZ4QmOtxemMo/BoprDDFEPNwekTnTI9skJII=\n=z2H0\n-----END PGP SIGNATURE-----",
        "payload": "tree ec4d78dd493cffbc5c46c3892032b0cc434b6fd5\nparent e4a1a0bba21a31ced45924e372954ac61d27132f\nauthor James O'Beirne <james.obeirne@pm.me> 1635454758 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488207 -0500\n\nadd ChainstateManager.getSnapshot{Height,BaseBlock}()\n\nFor use in later commits.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca59a34dc02a52978ff22f66b2894c318850be5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca59a34dc02a52978ff22f66b2894c318850be5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca59a34dc02a52978ff22f66b2894c318850be5/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4a1a0bba21a31ced45924e372954ac61d27132f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a1a0bba21a31ced45924e372954ac61d27132f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a1a0bba21a31ced45924e372954ac61d27132f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "440bfedd09f44a67a2d297dc34456fe70ac5e23e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca59a34dc02a52978ff22f66b2894c318850be5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca59a34dc02a52978ff22f66b2894c318850be5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9ca59a34dc02a52978ff22f66b2894c318850be5",
        "patch": "@@ -5047,3 +5047,16 @@ void ChainstateManager::MaybeRebalanceCaches()\n         }\n     }\n }\n+\n+CBlockIndex* ChainstateManager::getSnapshotBaseBlock()\n+{\n+    auto blockhash_op = SnapshotBlockhash();\n+    if (!blockhash_op) return nullptr;\n+    return m_blockman.LookupBlockIndex(*blockhash_op);\n+}\n+\n+std::optional<int> ChainstateManager::getSnapshotHeight()\n+{\n+    CBlockIndex* base = getSnapshotBaseBlock();\n+    return base ? std::make_optional(base->nHeight) : std::nullopt;\n+}"
      },
      {
        "sha": "d42447348b24d62c427dcb57097e3dae56ddc819",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca59a34dc02a52978ff22f66b2894c318850be5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca59a34dc02a52978ff22f66b2894c318850be5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9ca59a34dc02a52978ff22f66b2894c318850be5",
        "patch": "@@ -895,6 +895,10 @@ class ChainstateManager\n         CAutoFile& coins_file,\n         const SnapshotMetadata& metadata);\n \n+    // Returns nullptr if no snapshot ahs been loaded.\n+    CBlockIndex* getSnapshotBaseBlock() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    std::optional<int> getSnapshotHeight() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n public:\n     std::thread m_load_block;\n     //! A single BlockManager instance is shared across each constructed"
      }
    ]
  },
  {
    "sha": "490d753b5d4011580cfe9d52972429986c13cdf8",
    "node_id": "C_kwDOABII59oAKDQ5MGQ3NTNiNWQ0MDExNTgwY2ZlOWQ1Mjk3MjQyOTk4NmMxM2NkZjg",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T21:10:11Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:28Z"
      },
      "message": "wallet: avoid rescans if under the snapshot\n\nSelectively ignore CValidationInterface notifications if they're for\nbackground validation chainstates. Also refuse to load a wallet if it\nrequires a rescan lower than the height of an unvalidated snapshot we're\nrunning -- in more general terms, if we don't have data for the blocks.",
      "tree": {
        "sha": "8286219c72f536b7cbffd03a66046ef841aee358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8286219c72f536b7cbffd03a66046ef841aee358"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/490d753b5d4011580cfe9d52972429986c13cdf8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BAACgkQepNdrbLE\nTwXoXA/9ESfPxK9r6LgbwvzOIHq85WPry8tgguGI2sNM3LHTZYJJ0tV/i8gVjzJ3\nmmG4+C7wkVqp+9JfRsD5nWNFqR0AiE8v20qGlDZL9X6JE6GMzE9ESPsS+CMO5Z3V\nfRdH7oqh2iIl1QYrDXGA8Ia43R2UwXpyuqkvLq48FjLFhqU7SfzpAes2WAt2ly2R\nNtgNi/HXqUyktKnmVWVwqR7w5c6JtqCvsB5H7jk3iy00ifnjI7XvXOofXrzTHE/i\nZDAQhuTvdlTMdVtp/fi0CF6hgTTidmCo98KSNyF5Ct9J1oY9WeQxTnuhjCQvT3qd\nIk5wacS3jhqSXYvmeBQthmQ3YjDI/qposFukwItzrLw5NeuETbegJ6BdXFy8eBPV\n0hiRkJ7HIUdfxUHlF/KZMS3n8+TwV3r5WUyknBvG9Fq99U8zb7BqGbLRh187GfZf\nb3FENo1xVXfgpdAits7alO1ydXAs+cYoPvy/DtNfRfW95jxxHgeNmnmjzsXu2Jwe\nDWHKgHe1VBKme9s2dfpQpmXjsbZXZU2e4ruowRDrYnjR4RVLzhnajq2TkYQNOroS\nvQM6Sa/Oiy711jmO4OPAv3ZeEy+iFs+BHpMvnHgINwB8rInwIa4/l+NAKjraCX+y\nbZ265BZrtQQ8EcOwi1db/u5BeOR5krQwrB4iACkBriF7HxWmesM=\n=tnqP\n-----END PGP SIGNATURE-----",
        "payload": "tree 8286219c72f536b7cbffd03a66046ef841aee358\nparent 9ca59a34dc02a52978ff22f66b2894c318850be5\nauthor James O'Beirne <james.obeirne@gmail.com> 1553893811 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488208 -0500\n\nwallet: avoid rescans if under the snapshot\n\nSelectively ignore CValidationInterface notifications if they're for\nbackground validation chainstates. Also refuse to load a wallet if it\nrequires a rescan lower than the height of an unvalidated snapshot we're\nrunning -- in more general terms, if we don't have data for the blocks.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490d753b5d4011580cfe9d52972429986c13cdf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/490d753b5d4011580cfe9d52972429986c13cdf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490d753b5d4011580cfe9d52972429986c13cdf8/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ca59a34dc02a52978ff22f66b2894c318850be5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca59a34dc02a52978ff22f66b2894c318850be5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca59a34dc02a52978ff22f66b2894c318850be5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e20ac1836f4e3e9d3e5fc5b3306610f8373e7f19",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/490d753b5d4011580cfe9d52972429986c13cdf8/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/490d753b5d4011580cfe9d52972429986c13cdf8/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=490d753b5d4011580cfe9d52972429986c13cdf8",
        "patch": "@@ -117,6 +117,12 @@ class Chain\n     //! Check if transaction will be final given chain height current time.\n     virtual bool checkFinalTx(const CTransaction& tx) = 0;\n \n+    //! Return the lowest height in the chain after which point we have contiguous\n+    //! block data. Returning -1 indicates we don't even have data for Tip(), which\n+    //! could be possible if this is called right after UTXO snapshot load when the\n+    //! Tip() is an assumed-valid block.\n+    virtual int getLowestBlockDataHeight() = 0;\n+\n     //! Return whether node has the block and optionally return block metadata\n     //! or contents.\n     virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;"
      },
      {
        "sha": "44cdd2f1eb2e783c7278edf1aabb9b38935959ff",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/490d753b5d4011580cfe9d52972429986c13cdf8/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/490d753b5d4011580cfe9d52972429986c13cdf8/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=490d753b5d4011580cfe9d52972429986c13cdf8",
        "patch": "@@ -468,6 +468,21 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return CheckFinalTx(chainman().ActiveChain().Tip(), tx);\n     }\n+    int getLowestBlockDataHeight() override\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* index = Assert(m_node.chainman)->ActiveTip();\n+        int lowest_has_data{-1};\n+\n+        while (index) {\n+            if (!(index->nStatus & BLOCK_HAVE_DATA)) {\n+                break;\n+            }\n+            lowest_has_data = index->nHeight;\n+            index = index->pprev;\n+        }\n+        return lowest_has_data;\n+    }\n     std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "9f319e5c10eb7022b8d04c8c7f75473bc3036c1e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/490d753b5d4011580cfe9d52972429986c13cdf8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/490d753b5d4011580cfe9d52972429986c13cdf8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=490d753b5d4011580cfe9d52972429986c13cdf8",
        "patch": "@@ -2820,6 +2820,13 @@ bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interf\n \n     if (tip_height && *tip_height != rescan_height)\n     {\n+        int lowest_height_with_data = chain.getLowestBlockDataHeight();\n+        if (lowest_height_with_data == -1) {\n+            // If for some weird reason our Tip() doesn't even have block data, disable\n+            // rescans.\n+            lowest_height_with_data = *tip_height + 1;\n+        }\n+\n         if (chain.havePruned()) {\n             int block_height = *tip_height;\n             while (block_height > 0 && chain.haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {\n@@ -2837,6 +2844,13 @@ bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interf\n                 return false;\n             }\n         }\n+        // Otherwise refuse to rescan if we have an assumed-valid region of the chain and\n+        // the rescan height is at or lower than blocks we have data for.\n+        else if (rescan_height < lowest_height_with_data) {\n+            error = _(\"Assumed-valid: rescan height goes beyond blocks \"\n+                \"we have data for. You need to wait for background validation to complete\");\n+            return false;\n+        }\n \n         chain.initMessage(_(\"Rescanning\u2026\").translated);\n         walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", *tip_height - rescan_height, rescan_height);"
      }
    ]
  },
  {
    "sha": "26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
    "node_id": "C_kwDOABII59oAKDI2OTg5YjcyNGFhMmY1ZmMwYzFkY2UyYjhmNzI1ZDU3ODJhYzZiYzA",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-23T17:54:21Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:28Z"
      },
      "message": "validation: only send ValidationInterface callbacks for active chain",
      "tree": {
        "sha": "06df860e3eb2425c15ac3b9221c72d30bb710a8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06df860e3eb2425c15ac3b9221c72d30bb710a8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BAACgkQepNdrbLE\nTwXoMA//W/8iRUiex3B1WzCjRkspCh7oTj+K2pQ6TT9q09ECHVQzU4KDo4EHNusd\ne/oVryAm9yj1KVFn7fmeDMwD/jOIv95BXKqj3MtxQNfr2N16Ol9yvmb+oftl/Q2u\nFvLfZa/k0DTUfwSXefofFdk+JkzhEqYgTFYHBwvNgO0UzlrMjBNhFA8+OcMvytAO\nASUDG+be8nU2TxmXZ6K0j3cY3Vaj+Ezf88b7tkTMGSJUGImb5wX8jmk4fWkrGxoL\nFOcM09REdXddPn/6uQe+cjTgnLzZUJgcAKjVYhDF4yKHIuE8LuqaCd1ThfxR8Bdb\njz8GlE8fYw2YHHq1S/sJ794uxC7QS8UNPm4koTrTagaA74hxyT7kDVds+FTo+vb3\nRkTskTMARK3LyVd7bBSxAAgI7xQtjE6W5vbpWdtEf1vBoZNFTcqIeT2Cp7u5Uusw\nFSjbAdiKUxePvtPN7RPiddo+kmQYysXI9E8KCH0wK8Jsy8oFjmvoijxwaCI5/Ede\nbwCivEGHEv1le9BQlhkv5ub8KMT4PiIzijr8ktYMc1d2ai1enBYhZvE7IkZhy0lv\n20T7QETlOSRab8znn9sdOv4L9IhQud2/EiL5hAoiiuNsrtwJPmrMcUj0xaCg1GdF\nsn5lnx8CjrhUviJEKTsWqsvA4evqQ000jiqCfoidNXKTz//S1bk=\n=cmXA\n-----END PGP SIGNATURE-----",
        "payload": "tree 06df860e3eb2425c15ac3b9221c72d30bb710a8a\nparent 490d753b5d4011580cfe9d52972429986c13cdf8\nauthor James O'Beirne <james.obeirne@gmail.com> 1569261261 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488208 -0500\n\nvalidation: only send ValidationInterface callbacks for active chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "490d753b5d4011580cfe9d52972429986c13cdf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490d753b5d4011580cfe9d52972429986c13cdf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/490d753b5d4011580cfe9d52972429986c13cdf8"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 35,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cab90278b3be57183133f11571587f733dbc70a9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
        "patch": "@@ -2040,7 +2040,7 @@ bool CChainState::FlushStateToDisk(\n             full_flush_completed = true;\n         }\n     }\n-    if (full_flush_completed) {\n+    if (full_flush_completed && this == &m_chainman.ActiveChainstate()) {\n         // Update best block in wallet (so we can detect restored wallets).\n         GetMainSignals().ChainStateFlushed(m_chain.GetLocator());\n     }\n@@ -2207,7 +2207,9 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n+    if (this == &m_chainman.ActiveChainstate()) {\n+        GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n+    }\n     return true;\n }\n \n@@ -2289,7 +2291,9 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     {\n         CCoinsViewCache view(&CoinsTip());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view);\n-        GetMainSignals().BlockChecked(blockConnecting, state);\n+        if (this == &m_chainman.ActiveChainstate()) {\n+            GetMainSignals().BlockChecked(blockConnecting, state);\n+        }\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -2585,9 +2589,11 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n                 }\n                 pindexNewTip = m_chain.Tip();\n \n-                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                    assert(trace.pblock && trace.pindex);\n-                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex);\n+                if (this == &m_chainman.ActiveChainstate()) {\n+                    for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                        assert(trace.pblock && trace.pindex);\n+                        GetMainSignals().BlockConnected(trace.pblock, trace.pindex);\n+                    }\n                 }\n             } while (!m_chain.Tip() || (starting_tip && CBlockIndexWorkComparator()(m_chain.Tip(), starting_tip)));\n             if (!blocks_connected) return true;\n@@ -2598,11 +2604,13 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n             // Notify external listeners about the new tip.\n             // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected\n             if (pindexFork != pindexNewTip) {\n-                // Notify ValidationInterface subscribers\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+                if (this == &m_chainman.ActiveChainstate()) {\n+                    // Notify ValidationInterface subscribers\n+                    GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n \n-                // Always notify the UI if a new block tip was connected\n-                uiInterface.NotifyBlockTip(GetSynchronizationState(fInitialDownload), pindexNewTip);\n+                    // Always notify the UI if a new block tip was connected\n+                    uiInterface.NotifyBlockTip(GetSynchronizationState(fInitialDownload), pindexNewTip);\n+                }\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n@@ -3361,8 +3369,11 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n \n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n     // (but if it does not build on our best tip, let the SendMessages loop relay it)\n-    if (!IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev)\n+    if (!IsInitialBlockDownload() &&\n+            m_chain.Tip() == pindex->pprev &&\n+            this == &m_chainman.ActiveChainstate()) {\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n+    }\n \n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;"
      },
      {
        "sha": "123fd0f78d19d8bccb1a3fb7865763ea188d35e2",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
        "patch": "@@ -89,13 +89,13 @@ class CValidationInterface {\n      * but may not be called on every intermediate tip. If the latter behavior is desired,\n      * subscribe to BlockConnected() instead.\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a transaction having been added to mempool.\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) {}\n \n@@ -129,20 +129,20 @@ class CValidationInterface {\n      * - BlockConnected(A)\n      * - BlockConnected(B)\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) {}\n     /**\n@@ -159,19 +159,24 @@ class CValidationInterface {\n      * Provides a locator describing the best chain, which is likely useful for\n      * storing current state on disk in client DBs.\n      *\n-     * Called on a background thread.\n+     * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided BlockValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n-     * callback was generated (not necessarily now)\n+     * callback was generated (not necessarily now).\n+     *\n+     * Only called for the active chainstate.\n      */\n     virtual void BlockChecked(const CBlock&, const BlockValidationState&) {}\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n-     * has been received and connected to the headers tree, though not validated yet */\n+     * has been received and connected to the headers tree, though not validated yet.\n+     *\n+     * Only called for the active chainstate.\n+     */\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend class CMainSignals;\n };"
      }
    ]
  },
  {
    "sha": "5ca97d9dfb236c33b47a9262b6300d0c9f483094",
    "node_id": "C_kwDOABII59oAKDVjYTk3ZDlkZmIyMzZjMzNiNDdhOTI2MmI2MzAwZDBjOWY0ODMwOTQ",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-23T18:44:54Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:29Z"
      },
      "message": "validation: indexing changes for assumeutxo\n\nAdds BackgroundBlockConnected to the validationinterface and uses it in\nindex maintenance. Ensures that index building will work when part of\nthe chain is validated asynchronously in the background by a second\nchainstate.\n\nThis changeset removes the guarantee that indexes will be built\nsequentially, as none of the current indexes require this and it is no\nlonger easy to offer this guarantee when multiple chainstates are in\nuse.\n\nWithin BaseIndex, we only update `m_best_block_index` (which is\nessentially the progress marker for how far along the indexing process\nis) for chains which we can be certain that all blocks under a given\nblock on that chain have had indexing performed on them.  In other\nwords, we will not update `m_best_block_index` during a BlockConnected\nevent that comes from an active snapshot chain, i.e. a chain for which\nsome of the blocks underneath Tip() are not indexed.\n\nOnce background validation is completed and no background chainstates\nare in use, the indexer will happily use BlockConnected events from the\nactive chain to update `m_best_block_index` as usual. No blocks from the\nactive chainstate will have been missed for indexing (despite not\npreviously updating m_best_block_index), so it is safe to perform this\ntransition without any extra behavior.\n\nSome unnecessary logic from BaseIndex::ChainStateFlushed() is removed,\nsince the locator can no longer be assumed to be an ancestor of the\nbest_block_index (since the \"best block\" may be on a background chainstate\nand the locator may have come from an assumed-valid tip well ahead of\nit).",
      "tree": {
        "sha": "6ac596ede55d681e7490c69c9acaa7b83eac8bd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ac596ede55d681e7490c69c9acaa7b83eac8bd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ca97d9dfb236c33b47a9262b6300d0c9f483094",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BEACgkQepNdrbLE\nTwWOKhAAgyh8mcOOR3btDatTurZZXCRpnRtYcZT5m3QuYnnhSp9NIDU62We/+IfC\nhYlRjUDSVS5Jc0/c74kHHLmtm4/62FtOgUXDGSNYwzt867S+0WZkEc7zoIXgSeqS\nqy72/h1ZQrGTxTPkOpsMpkWiflrMRBFFBfolpLEZg7d4vQhWTx7Dg8YgRvOieQ3q\nQUohDNLMOdBJ8qNe0NcV0nZDLeZL58KxWjDu3NqHb+t+/iFpA72/RgLnN1tTu7BV\njzw3BvZwlWy2CETfIMbxBz+/sJH2ggfvpFssF9pAn90bzxO7LT6V9W/550HbxxDF\n1aj7pIgBnNLEPv1dskmcu7TrRllPRNgrfFeAz2errECCnHHHgCHEgvenZer4NfRW\n00AHBBzpK1KctS6TQ+vkyelM+lBehlHEMQSt/PVOr1kSX7PND6Cq1THvz3cr40It\nxRD/wC6MRutrTk4EwED08BtQdUiPVAYmzJQuKruQOtFPmEeah7QxTK9wHYkEL8p1\ntIALPF6WjIEeE5LJG4UmHjj9h6D99LoIvd6yvBZhg+ctKBz5fPIW/6xoH2IRw5fv\n8IGF8b3Bv+LYuKsYG+gRoUEYn8oQBg+oLf4jeQDD5wqtS/3Zh28qVsBqHT9M/9F4\nMkm+LE/uljvEvkwhNlp8TZ5+FZDJk9f6tnXlB4AiqwXH7m03Xno=\n=5SSq\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ac596ede55d681e7490c69c9acaa7b83eac8bd8\nparent 26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0\nauthor James O'Beirne <james.obeirne@gmail.com> 1569264294 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488209 -0500\n\nvalidation: indexing changes for assumeutxo\n\nAdds BackgroundBlockConnected to the validationinterface and uses it in\nindex maintenance. Ensures that index building will work when part of\nthe chain is validated asynchronously in the background by a second\nchainstate.\n\nThis changeset removes the guarantee that indexes will be built\nsequentially, as none of the current indexes require this and it is no\nlonger easy to offer this guarantee when multiple chainstates are in\nuse.\n\nWithin BaseIndex, we only update `m_best_block_index` (which is\nessentially the progress marker for how far along the indexing process\nis) for chains which we can be certain that all blocks under a given\nblock on that chain have had indexing performed on them.  In other\nwords, we will not update `m_best_block_index` during a BlockConnected\nevent that comes from an active snapshot chain, i.e. a chain for which\nsome of the blocks underneath Tip() are not indexed.\n\nOnce background validation is completed and no background chainstates\nare in use, the indexer will happily use BlockConnected events from the\nactive chain to update `m_best_block_index` as usual. No blocks from the\nactive chainstate will have been missed for indexing (despite not\npreviously updating m_best_block_index), so it is safe to perform this\ntransition without any extra behavior.\n\nSome unnecessary logic from BaseIndex::ChainStateFlushed() is removed,\nsince the locator can no longer be assumed to be an ancestor of the\nbest_block_index (since the \"best block\" may be on a background chainstate\nand the locator may have come from an assumed-valid tip well ahead of\nit).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca97d9dfb236c33b47a9262b6300d0c9f483094",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca97d9dfb236c33b47a9262b6300d0c9f483094",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca97d9dfb236c33b47a9262b6300d0c9f483094/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26989b724aa2f5fc0c1dce2b8f725d5782ac6bc0"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 146,
      "deletions": 48
    },
    "files": [
      {
        "sha": "4a941af7e721b5622ee2cf826a3d4324f51bfbc0",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 33,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -61,34 +61,36 @@ bool BaseIndex::Init()\n     }\n \n     LOCK(cs_main);\n-    CChain& active_chain = m_chainstate->m_chain;\n+    CChainState& index_chainstate = m_chainman->getChainstateForIndexing();\n+    CChain& index_chain = index_chainstate.m_chain;\n+\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(active_chain, locator);\n+        m_best_block_index = m_chainman->m_blockman.FindForkInGlobalIndex(index_chain, locator);\n     }\n-    m_synced = m_best_block_index.load() == active_chain.Tip();\n+    m_synced = m_best_block_index.load() == index_chain.Tip();\n     if (!m_synced) {\n         bool prune_violation = false;\n         if (!m_best_block_index) {\n             // index is not built yet\n             // make sure we have all block data back to the genesis\n-            const CBlockIndex* block = active_chain.Tip();\n+            const CBlockIndex* block = index_chain.Tip();\n             while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n                 block = block->pprev;\n             }\n-            prune_violation = block != active_chain.Genesis();\n+            prune_violation = block != index_chain.Genesis();\n         }\n         // in case the index has a best block set and is not fully synced\n         // check if we have the required blocks to continue building the index\n         else {\n             const CBlockIndex* block_to_test = m_best_block_index.load();\n-            if (!active_chain.Contains(block_to_test)) {\n+            if (!index_chain.Contains(block_to_test)) {\n                 // if the bestblock is not part of the mainchain, find the fork\n                 // and make sure we have all data down to the fork\n-                block_to_test = active_chain.FindFork(block_to_test);\n+                block_to_test = index_chain.FindFork(block_to_test);\n             }\n-            const CBlockIndex* block = active_chain.Tip();\n+            const CBlockIndex* block = index_chain.Tip();\n             prune_violation = true;\n             // check backwards from the tip if we have all block data until we reach the indexes bestblock\n             while (block_to_test && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n@@ -143,7 +145,8 @@ void BaseIndex::ThreadSync()\n \n             {\n                 LOCK(cs_main);\n-                const CBlockIndex* pindex_next = NextSyncBlock(pindex, m_chainstate->m_chain);\n+                CChain& index_chain = m_chainman->getChainstateForIndexing().m_chain;\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex, index_chain);\n                 if (!pindex_next) {\n                     m_best_block_index = pindex;\n                     m_synced = true;\n@@ -206,7 +209,8 @@ bool BaseIndex::Commit()\n bool BaseIndex::CommitInternal(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    GetDB().WriteBestBlock(batch, m_chainstate->m_chain.GetLocator(m_best_block_index));\n+    CChain& chain = m_chainman->getChainstateForIndexing().m_chain;\n+    GetDB().WriteBestBlock(batch, chain.GetLocator(m_best_block_index));\n     return true;\n }\n \n@@ -232,18 +236,43 @@ bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_ti\n \n void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex)\n {\n+    return this->blockConnectedInternal(block, pindex, false);\n+}\n+\n+void BaseIndex::BackgroundBlockConnected(\n+    const std::shared_ptr<const CBlock>& block,\n+    const CBlockIndex* pindex)\n+{\n+    this->blockConnectedInternal(block, pindex, true);\n+}\n+\n+void BaseIndex::blockConnectedInternal(\n+    const std::shared_ptr<const CBlock>& block,\n+    const CBlockIndex* pindex,\n+    bool from_background)\n+{\n+    // Ignore BlockConnected signals until we have fully indexed the chain.\n     if (!m_synced) {\n         return;\n     }\n \n+    bool bg_chainstates_in_use = m_chainman->hasBgChainstateInUse();\n+\n+    // Did we receive this event from a chain for which we can be sure\n+    // that we have built indexes for all blocks beneath it?\n+    //\n+    // If we are receiving this event from an assumed-valid chain, then don't\n+    // perform certain checks and don't update the m_best_block_index marker.\n+    bool is_on_indexing_chain = !bg_chainstates_in_use || from_background;\n+\n     const CBlockIndex* best_block_index = m_best_block_index.load();\n     if (!best_block_index) {\n         if (pindex->nHeight != 0) {\n             FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n                        __func__, pindex->nHeight);\n             return;\n         }\n-    } else {\n+    } else if (is_on_indexing_chain) {\n         // Ensure block connects to an ancestor of the current best block. This should be the case\n         // most of the time, but may not be immediately after the sync thread catches up and sets\n         // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n@@ -261,10 +290,31 @@ void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const\n                        __func__, GetName());\n             return;\n         }\n+    } else {\n+        // Otherwise we're on an assumed-valid chain, so just ensure this block is\n+        // contained in the active chain.\n+        if (!m_chainman->ActiveChain().Contains(pindex)) {\n+            LogPrintf(\"%s: WARNING: Block %s is not found on the known best chain; \" /* Continued */\n+                \"not updating index\\n\",\n+                __func__, pindex->GetBlockHash().ToString());\n+            return;\n+        }\n     }\n \n     if (WriteBlock(*block, pindex)) {\n-        m_best_block_index = pindex;\n+        // Since blocks may be submitted to this indexer out of order (i.e.\n+        // earlier blocks from the background validation chainstate submitted\n+        // *after* more recent blocks from the assumed-valid chainstate), only\n+        // update m_best_block_index when pindex is on a chain where we can\n+        // reasonably say that all blocks behind it have been indexed; in other\n+        // words, when it's on a fully-validated chain.\n+        //\n+        // Once the background chain's use ends (i.e. we have validated the\n+        // assumed-valid chain), we will update this in lockstep with the active\n+        // chain and will have all historical index entries.\n+        if (is_on_indexing_chain) {\n+            m_best_block_index = pindex;\n+        }\n     } else {\n         FatalError(\"%s: Failed to write block %s to index\",\n                    __func__, pindex->GetBlockHash().ToString());\n@@ -278,30 +328,16 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    const uint256& locator_tip_hash = locator.vHave.front();\n-    const CBlockIndex* locator_tip_index;\n-    {\n-        LOCK(cs_main);\n-        locator_tip_index = m_chainstate->m_blockman.LookupBlockIndex(locator_tip_hash);\n-    }\n-\n-    if (!locator_tip_index) {\n-        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n-                   __func__, locator_tip_hash.ToString());\n-        return;\n-    }\n-\n     // This checks that ChainStateFlushed callbacks are received after BlockConnected. The check may fail\n     // immediately after the sync thread catches up and sets m_synced. Consider the case where\n     // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n     // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n     // event, log a warning and let the queue clear.\n     const CBlockIndex* best_block_index = m_best_block_index.load();\n-    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n-        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n-                  \"chain (tip=%s); not writing index locator\\n\",\n-                  __func__, locator_tip_hash.ToString(),\n-                  best_block_index->GetBlockHash().ToString());\n+    if (!m_chainman->ActiveChain().Contains(best_block_index)) {\n+        LogPrintf(\"%s: WARNING: index progress marker (%s) not on known best \" /* Continued */\n+                  \"chain; not writing marker\\n\",\n+                  __func__, best_block_index->GetBlockHash().ToString());\n         return;\n     }\n \n@@ -323,7 +359,7 @@ bool BaseIndex::BlockUntilSyncedToCurrentChain() const\n         // Skip the queue-draining stuff if we know we're caught up with\n         // m_chain.Tip().\n         LOCK(cs_main);\n-        const CBlockIndex* chain_tip = m_chainstate->m_chain.Tip();\n+        const CBlockIndex* chain_tip = m_chainman->ActiveTip();\n         const CBlockIndex* best_block_index = m_best_block_index.load();\n         if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n             return true;\n@@ -340,9 +376,9 @@ void BaseIndex::Interrupt()\n     m_interrupt();\n }\n \n-bool BaseIndex::Start(CChainState& active_chainstate)\n+bool BaseIndex::Start(ChainstateManager& chainman)\n {\n-    m_chainstate = &active_chainstate;\n+    m_chainman = &chainman;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true.\n     RegisterValidationInterface(this);"
      },
      {
        "sha": "20a85c8c691606e64164eb6415d0bcc1f7ecc089",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -11,7 +11,7 @@\n \n class CBlock;\n class CBlockIndex;\n-class CChainState;\n+class ChainstateManager;\n \n struct IndexSummary {\n     std::string name;\n@@ -21,8 +21,11 @@ struct IndexSummary {\n \n /**\n  * Base class for indices of blockchain data. This implements\n- * CValidationInterface and ensures blocks are indexed sequentially according\n- * to their position in the active chain.\n+ * CValidationInterface and ensures blocks are indexed. Indexing is\n+ * not necessarily sequentially ordered (based on to position in the\n+ * active chain) because background chainstates may be running\n+ * and creating BlockConnected events simultaneously with the active\n+ * chainstate.\n  */\n class BaseIndex : public CValidationInterface\n {\n@@ -75,11 +78,22 @@ class BaseIndex : public CValidationInterface\n     /// to a chain reorganization), the index must halt until Commit succeeds or else it could end up\n     /// getting corrupted.\n     bool Commit();\n+\n+    /// Internal method used to consolidate BlockConnected behavior, but allow distinguishing\n+    /// whether the connected block came from a background chainstate.\n+    void blockConnectedInternal(\n+        const std::shared_ptr<const CBlock>& block,\n+        const CBlockIndex* pindex,\n+        bool from_background);\n protected:\n-    CChainState* m_chainstate{nullptr};\n+    ChainstateManager* m_chainman{nullptr};\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override;\n \n+    void BackgroundBlockConnected(\n+        const std::shared_ptr<const CBlock>& block,\n+        const CBlockIndex* pindex) override;\n+\n     void ChainStateFlushed(const CBlockLocator& locator) override;\n \n     const CBlockIndex* CurrentIndex() { return m_best_block_index.load(); };\n@@ -118,7 +132,7 @@ class BaseIndex : public CValidationInterface\n \n     /// Start initializes the sync state and registers the instance as a\n     /// ValidationInterface so that it stays in sync with blockchain updates.\n-    [[nodiscard]] bool Start(CChainState& active_chainstate);\n+    [[nodiscard]] bool Start(ChainstateManager& chainman);\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();"
      },
      {
        "sha": "20903ffafd7827ee8a9444bfffc81df2e6f2023b",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -272,7 +272,7 @@ bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* n\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* iter_tip{m_chainstate->m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n+        CBlockIndex* iter_tip{m_chainman->m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n         const auto& consensus_params{Params().GetConsensus()};\n \n         do {"
      },
      {
        "sha": "4321a71dc192f2523ada31754ee5aac662340a00",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -1608,21 +1608,21 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n \n         g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n-        if (!g_txindex->Start(chainman.ActiveChainstate())) {\n+        if (!g_txindex->Start(chainman)) {\n             return false;\n         }\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        if (!GetBlockFilterIndex(filter_type)->Start(chainman.ActiveChainstate())) {\n+        if (!GetBlockFilterIndex(filter_type)->Start(chainman)) {\n             return false;\n         }\n     }\n \n     if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n         g_coin_stats_index = std::make_unique<CoinStatsIndex>(/* cache size */ 0, false, fReindex);\n-        if (!g_coin_stats_index->Start(chainman.ActiveChainstate())) {\n+        if (!g_coin_stats_index->Start(chainman)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "ab78b1776ef5ec7fc92efaae9ac78a1419f89227",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -131,7 +131,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n     BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(filter_index.Start(m_node.chainman->ActiveChainstate()));\n+    BOOST_REQUIRE(filter_index.Start(*m_node.chainman));\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "291c6dc5f63d7468e5152c3af510f79351ab8f46",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -32,7 +32,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n     // is started.\n     BOOST_CHECK(!coin_stats_index.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(coin_stats_index.Start(m_node.chainman->ActiveChainstate()));\n+    BOOST_REQUIRE(coin_stats_index.Start(*m_node.chainman));\n \n     // Allow the CoinStatsIndex to catch up with the block index that is syncing\n     // in a background thread."
      },
      {
        "sha": "5f59e7c1d1be9c62fee12dcbcdae6644921fa506",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    BOOST_REQUIRE(txindex.Start(m_node.chainman->ActiveChainstate()));\n+    BOOST_REQUIRE(txindex.Start(*m_node.chainman));\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "46b1747ac6d40ef5ce4e50a2f7a09269969623ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -2589,10 +2589,12 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n                 }\n                 pindexNewTip = m_chain.Tip();\n \n-                if (this == &m_chainman.ActiveChainstate()) {\n-                    for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                        assert(trace.pblock && trace.pindex);\n+                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                    assert(trace.pblock && trace.pindex);\n+                    if (this == &m_chainman.ActiveChainstate()) {\n                         GetMainSignals().BlockConnected(trace.pblock, trace.pindex);\n+                    } else {\n+                        GetMainSignals().BackgroundBlockConnected(trace.pblock, trace.pindex);\n                     }\n                 }\n             } while (!m_chain.Tip() || (starting_tip && CBlockIndexWorkComparator()(m_chain.Tip(), starting_tip)));\n@@ -5071,3 +5073,13 @@ std::optional<int> ChainstateManager::getSnapshotHeight()\n     CBlockIndex* base = getSnapshotBaseBlock();\n     return base ? std::make_optional(base->nHeight) : std::nullopt;\n }\n+\n+CChainState& ChainstateManager::getChainstateForIndexing()\n+{\n+    return getSnapshotBaseBlock() ? *m_ibd_chainstate : *m_active_chainstate;\n+}\n+\n+bool ChainstateManager::hasBgChainstateInUse()\n+{\n+    return this->SnapshotBlockhash() && !m_snapshot_validated;\n+}"
      },
      {
        "sha": "89438ead6a19c6b3c58cfc7e21e7059ff8c19836",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -1011,6 +1011,20 @@ class ChainstateManager\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! @returns the chainstate that indexers should consult when ensuring that an\n+    //!   index is synced with a chain where we can expect block index entries to have\n+    //!   BLOCK_HAVE_DATA beneath the tip.\n+    //!\n+    //!   In other words, give us the chainstate for which we can reasonably expect\n+    //!   that all blocks beneath the tip have been indexed. In practice this means\n+    //!   when using an assumed-valid chainstate based upon a snapshot, return only the\n+    //!   fully validated chain.\n+    CChainState& getChainstateForIndexing() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    //! @returns true if we have more than one chainstate in use. This means that a\n+    //! background validation chainstate is running.\n+    bool hasBgChainstateInUse();\n+\n     ~ChainstateManager() {\n         LOCK(::cs_main);\n         UnloadBlockIndex(/* mempool */ nullptr, *this);"
      },
      {
        "sha": "8d751f7e130bc78daae483c98e080c04d4e9275a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -226,6 +226,18 @@ void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, c\n                           pindex->nHeight);\n }\n \n+void CMainSignals::BackgroundBlockConnected(\n+    const std::shared_ptr<const CBlock> &pblock,\n+    const CBlockIndex *pindex)\n+{\n+    auto event = [pblock, pindex, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BackgroundBlockConnected(pblock, pindex); });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n+}\n+\n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n     auto event = [pblock, pindex, this] {"
      },
      {
        "sha": "8fdc4568f8800b11c21a4cbeaaf938929a96f371",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ca97d9dfb236c33b47a9262b6300d0c9f483094/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "patch": "@@ -139,6 +139,15 @@ class CValidationInterface {\n      * Called on a background thread. Only called for the active chainstate.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {}\n+    /**\n+     * The equivalent of BlockConnected for non-active (i.e. background\n+     * validation) chainstates.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void BackgroundBlockConnected(\n+        const std::shared_ptr<const CBlock> &block,\n+        const CBlockIndex *pindex) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n@@ -206,6 +215,7 @@ class CMainSignals {\n     void TransactionAddedToMempool(const CTransactionRef&, uint64_t mempool_sequence);\n     void TransactionRemovedFromMempool(const CTransactionRef&, MemPoolRemovalReason, uint64_t mempool_sequence);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n+    void BackgroundBlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);\n     void BlockChecked(const CBlock&, const BlockValidationState&);"
      }
    ]
  },
  {
    "sha": "7d414d4371983dda6d05449bb9d57c481c9578d7",
    "node_id": "C_kwDOABII59oAKDdkNDE0ZDQzNzE5ODNkZGE2ZDA1NDQ5YmI5ZDU3YzQ4MWM5NTc4ZDc",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T19:58:45Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:30Z"
      },
      "message": "validation: introduce ChainstateManager::GetChainstateForNewBlock\n\nand use it in ProcessNewBlock().\n\nThis is needed for an upcoming change to `net_processing`.",
      "tree": {
        "sha": "9daa591d0594ca2f2e2b62239bb6920d46402a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9daa591d0594ca2f2e2b62239bb6920d46402a61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d414d4371983dda6d05449bb9d57c481c9578d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BIACgkQepNdrbLE\nTwUitA//Z6d5BjUUxxaDWfOryJobRuymljQ/j+kYTkmym0kFCrJyTyjTRD3rqcP5\nTlI63VZLA7FaHiozVqU1IPLXUStFCBFSsyzE4weu6o564vG4tQ90sIytVrb+MuXt\n3pg3c+GoAqZfm7rDmJAxdnP1neOy9gGxrNBPFIxX9rJzdDv/5K8ie4jBG+cetxIQ\nVNVuk2mczLB8tnZpTPlOAwkAcwsO2Wi81FSkB7QxwDlfyONYzdhB3q8jhB5uPQjd\nTSWOY9wo+uAqfi11FDU67SdgmJWNsVFfQSc2UKJMuUoTS+axZPiWDHypovp9hvnZ\nrgi8U1sAV+0IYjfGW2SVeWqPcZsLf0qr6LiwwnpgS4006prWney6alHMzhteTwi1\nrZQMwKY8KX9mdswCzWmQ0l0u3dGDrFxOOlZxo9lhAXY6w4t8cvSfbM9LsQGlpBOb\nPL7QFQIGHRTCe+79H526qLkVx2Fg6vV3oZUXzliqrlvxcUOusZp0yUGCVQTid6km\nBNPy7yaZ58pdRNwt4NS7QhyF3qhB/JwfMzY5MnPl6kPZxBMQ8dufiGIyfD4sUjvf\njXW6kT8qB4GpEYw2vi995P7LDIoZd3sfgnDNNwbwsupoNyi0k5ruOk1q4YkpUvzZ\nDdnSZfQQoh6nfAMUp6tJG+19sJTWIQTQlHdfv1R6EWToLrFRsw0=\n=DLkc\n-----END PGP SIGNATURE-----",
        "payload": "tree 9daa591d0594ca2f2e2b62239bb6920d46402a61\nparent 5ca97d9dfb236c33b47a9262b6300d0c9f483094\nauthor James O'Beirne <james.obeirne@gmail.com> 1553889525 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488210 -0500\n\nvalidation: introduce ChainstateManager::GetChainstateForNewBlock\n\nand use it in ProcessNewBlock().\n\nThis is needed for an upcoming change to `net_processing`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d414d4371983dda6d05449bb9d57c481c9578d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d414d4371983dda6d05449bb9d57c481c9578d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d414d4371983dda6d05449bb9d57c481c9578d7/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ca97d9dfb236c33b47a9262b6300d0c9f483094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ca97d9dfb236c33b47a9262b6300d0c9f483094"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 42,
      "deletions": 3
    },
    "files": [
      {
        "sha": "002a56ba9f2ed988d4346ef49720565ae082397c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d414d4371983dda6d05449bb9d57c481c9578d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d414d4371983dda6d05449bb9d57c481c9578d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d414d4371983dda6d05449bb9d57c481c9578d7",
        "patch": "@@ -3401,6 +3401,12 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n {\n     AssertLockNotHeld(cs_main);\n \n+    CChainState* chainstate;\n+    {\n+        LOCK(cs_main);\n+        chainstate = &this->GetChainstateForNewBlock(block->GetHash());\n+    }\n+\n     {\n         CBlockIndex *pindex = nullptr;\n         if (new_block) *new_block = false;\n@@ -3418,18 +3424,21 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         bool ret = CheckBlock(*block, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ActiveChainstate().AcceptBlock(block, state, &pindex, force_processing, nullptr, new_block);\n+            ret = chainstate->AcceptBlock(\n+                block, state, &pindex, force_processing, nullptr, new_block);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*block, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n-    NotifyHeaderTip(ActiveChainstate());\n+    if (WITH_LOCK(::cs_main, return chainstate == &this->ActiveChainstate())) {\n+        NotifyHeaderTip(*chainstate);\n+    }\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActiveChainstate().ActivateBestChain(state, block)) {\n+    if (!chainstate->ActivateBestChain(state, block)) {\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n     }\n \n@@ -4999,6 +5008,21 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     return true;\n }\n \n+CChainState& ChainstateManager::GetChainstateForNewBlock(const uint256& blockhash)\n+{\n+    auto* pblock = m_blockman.LookupBlockIndex(blockhash);\n+    if (m_snapshot_chainstate &&\n+            // If pblock is null, we haven't seen the header for this block.\n+            // Because we expect to have received the headers for the IBD chain\n+            // contents before receiving blocks, this means that any block for\n+            // which we don't have headers should go in the snapshot chain.\n+            (pblock == nullptr || !m_snapshot_chainstate->m_chain.Contains(pblock))) {\n+        return *m_snapshot_chainstate.get();\n+    }\n+    assert(m_ibd_chainstate);\n+    return *m_ibd_chainstate.get();\n+}\n+\n CChainState& ChainstateManager::ActiveChainstate() const\n {\n     LOCK(::cs_main);"
      },
      {
        "sha": "a9f0070be9691f1f2fc67e65dd9af4909ff71886",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d414d4371983dda6d05449bb9d57c481c9578d7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d414d4371983dda6d05449bb9d57c481c9578d7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7d414d4371983dda6d05449bb9d57c481c9578d7",
        "patch": "@@ -944,6 +944,21 @@ class ChainstateManager\n     [[nodiscard]] bool ActivateSnapshot(\n         CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n \n+    /**\n+     * Return the relevant chainstate for a new block.\n+     *\n+     * Because the use of UTXO snapshots requires the simultaneous maintenance\n+     * of two chainstates, when a new block message arrives we have to decide\n+     * which chain we should attempt to append it to.\n+     *\n+     * If our most-work chain hasn't seen the incoming blockhash, return that.\n+     * Otherwise we're likely receiving a block that has already been assumed\n+     * valid by the snapshot chain, so attempt to append that to the validation\n+     * chain.\n+     */\n+    CChainState& GetChainstateForNewBlock(\n+        const uint256& blockhash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     //! The most-work chain.\n     CChainState& ActiveChainstate() const;\n     CChain& ActiveChain() const { return ActiveChainstate().m_chain; }"
      }
    ]
  },
  {
    "sha": "c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
    "node_id": "C_kwDOABII59oAKGM0ZWUzY2Q4ODBjMzQ1N2ExZGQxYTYxNGM3MTI3MzIxOTBmZTFjMmM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T19:44:44Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:31Z"
      },
      "message": "net_processing: work with multiple chainstates\n\n- Add ChainstateManager::GetAllForBlockDownload()\n- Add CNodeState::chainstate_to_last_common_block\n  * we need this to allow handling for a single peer to distinguish\n    between separate chainstates we're simultaneously downloading blocks for",
      "tree": {
        "sha": "fdd013e1163ed56562db38e99f91d49ea10ddc6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdd013e1163ed56562db38e99f91d49ea10ddc6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BMACgkQepNdrbLE\nTwUhMQ//SkxH4lqraD5b3A+jUp09G5iqWqIffjVc3o8nDcnhiW4eEWKFg4+/2JP9\nZMkB6VZXwKvLBsU+YDr24IcBQY/gtemeo4X3utRbbazCeBN9l5l4bhENv1f+jCnt\ns+MfCrq36yVf7rEon+u7jIn5WDTjs1iGMpQSniUMszgMHtJHmoHzJzn+WIoK2kFA\nZUQFIUESfjEGpr8njTAcJ0OPLNX9ajJOoJjjHuwSafIyw4hRqIThxv3NvVoKNaUn\nOpgdfeH/jkSJ+ev0AUE0+7jcQIUZhkFrdjIVcytdc1K7e+nSVDRWFTHOWrx4hcxd\nV8K5jCshcuP0TVPeE/CT+ODGSF9z6yv+ZflbDPSPTLNlwclxXG42uoBGu04+o9Re\npI7cryhSa6atXCbKq6nYa3y167W9tyFZSJMGPJjMaw0gyYog9/ItR+OhoM3mkdYq\nj4bft3UJg4I+gL5GufTgRZ8Wj6t677z/PrlywcbujrHTO4UcVCg+AgCxPJPN7g1g\nrGrXvom0Y3ts/0/X1ejWn5KhDXJodFrsQbqKGleCeluH+6LdMY8QcTxMvmQ8Hp5J\nIVBqw+ECY/iQd+ClhYA2G0Qg60LQ9SjLZ9I5EhQNMUNXu0W3JTrcPB5OH70dgaEl\nyV00+W/V4aZp6/zgG5yJo6+Iq9VqjAv4LXZTldTEydeLDDVhICQ=\n=kafH\n-----END PGP SIGNATURE-----",
        "payload": "tree fdd013e1163ed56562db38e99f91d49ea10ddc6f\nparent 7d414d4371983dda6d05449bb9d57c481c9578d7\nauthor James O'Beirne <james.obeirne@gmail.com> 1553888684 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488211 -0500\n\nnet_processing: work with multiple chainstates\n\n- Add ChainstateManager::GetAllForBlockDownload()\n- Add CNodeState::chainstate_to_last_common_block\n  * we need this to allow handling for a single peer to distinguish\n    between separate chainstates we're simultaneously downloading blocks for\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d414d4371983dda6d05449bb9d57c481c9578d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d414d4371983dda6d05449bb9d57c481c9578d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d414d4371983dda6d05449bb9d57c481c9578d7"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "61ccd379ce140bfc1b73ef6275ae87856d9980bb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 32,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
        "patch": "@@ -535,7 +535,12 @@ class PeerManagerImpl final : public PeerManager\n     /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n      *  at most count entries.\n      */\n-    void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void FindNextBlocksToDownload(\n+        const CChainState* const chainstate,\n+        NodeId nodeid,\n+        unsigned int count,\n+        std::vector<const CBlockIndex*>& vBlocks,\n+        NodeId& nodeStaller) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight GUARDED_BY(cs_main);\n \n@@ -586,6 +591,11 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Update tracking information about which blocks a peer is assumed to have. */\n     void UpdateBlockAvailability(NodeId nodeid, const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    /**\n+     * Allow the direct fetch of block data if our tip is recent within the past\n+     * 200 minutes.\n+     */\n     bool CanDirectFetch() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n@@ -675,8 +685,18 @@ struct CNodeState {\n     const CBlockIndex* pindexBestKnownBlock{nullptr};\n     //! The hash of the last unknown block this peer has announced.\n     uint256 hashLastUnknownBlock{};\n-    //! The last full block we both have.\n-    const CBlockIndex* pindexLastCommonBlock{nullptr};\n+\n+    //! The last full block we both have (per chainstate).\n+    //!\n+    //! This is namespaced by chainstate to allow syncing two separate chainstates\n+    //! simultaneously from a single peer.\n+    //!\n+    //! Nota bene: this is contingent on the ChainstateManager not destructing\n+    //! any CChainState objects which were in use at any point (e.g. a background\n+    //! validation chainstate which has completed) until the end of\n+    //! init.cpp:Shutdown(), else we'll have bad pointers here.\n+    std::map<const CChainState*, const CBlockIndex*> chainstate_to_last_common_block = {};\n+\n     //! The best header we have sent our peer.\n     const CBlockIndex* pindexBestHeaderSent{nullptr};\n     //! Length of current-streak of unconnecting headers announcements\n@@ -999,7 +1019,12 @@ void PeerManagerImpl::UpdateBlockAvailability(NodeId nodeid, const uint256 &hash\n     }\n }\n \n-void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller)\n+void PeerManagerImpl::FindNextBlocksToDownload(\n+    const CChainState* const chainstate,\n+    NodeId nodeid,\n+    unsigned int count,\n+    std::vector<const CBlockIndex*>& vBlocks,\n+    NodeId& nodeStaller)\n {\n     if (count == 0)\n         return;\n@@ -1011,32 +1036,45 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < m_chainman.ActiveChain().Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+    const CChain& our_chain = chainstate->m_chain;\n+    const CBlockIndex* our_tip = our_chain.Tip();\n+\n+    if (state->pindexBestKnownBlock == nullptr\n+            || state->pindexBestKnownBlock->nChainWork < our_tip->nChainWork\n+            || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }\n \n-    if (state->pindexLastCommonBlock == nullptr) {\n+    if (!state->chainstate_to_last_common_block.count(chainstate)) {\n         // Bootstrap quickly by guessing a parent of our best tip is the forking point.\n         // Guessing wrong in either direction is not a problem.\n-        state->pindexLastCommonBlock = m_chainman.ActiveChain()[std::min(state->pindexBestKnownBlock->nHeight, m_chainman.ActiveChain().Height())];\n+        //\n+        // Namespace this by chainstate so that we can simultaneously sync two\n+        // separate chainstates at different heights.\n+        state->chainstate_to_last_common_block[chainstate] = our_chain[\n+            std::min(state->pindexBestKnownBlock->nHeight, our_chain.Height())];\n     }\n \n-    // If the peer reorganized, our previous pindexLastCommonBlock may not be an ancestor\n+    // If the peer reorganized, our previous chainstate_to_last_common_block may not be an ancestor\n     // of its current tip anymore. Go back enough to fix that.\n-    state->pindexLastCommonBlock = LastCommonAncestor(state->pindexLastCommonBlock, state->pindexBestKnownBlock);\n-    if (state->pindexLastCommonBlock == state->pindexBestKnownBlock)\n+    state->chainstate_to_last_common_block[chainstate] = LastCommonAncestor(\n+        state->chainstate_to_last_common_block[chainstate], state->pindexBestKnownBlock);\n+\n+    if (state->chainstate_to_last_common_block[chainstate] == state->pindexBestKnownBlock) {\n         return;\n+    }\n \n     const Consensus::Params& consensusParams = m_chainparams.GetConsensus();\n     std::vector<const CBlockIndex*> vToFetch;\n-    const CBlockIndex *pindexWalk = state->pindexLastCommonBlock;\n+    const CBlockIndex *pindexWalk = state->chainstate_to_last_common_block[chainstate];\n     // Never fetch further than the best block we know the peer has, or more than BLOCK_DOWNLOAD_WINDOW + 1 beyond the last\n     // linked block we have in common with this peer. The +1 is so we can detect stalling, namely if we would be able to\n     // download that next block if the window were 1 larger.\n-    int nWindowEnd = state->pindexLastCommonBlock->nHeight + BLOCK_DOWNLOAD_WINDOW;\n+    int nWindowEnd = pindexWalk->nHeight + BLOCK_DOWNLOAD_WINDOW;\n     int nMaxHeight = std::min<int>(state->pindexBestKnownBlock->nHeight, nWindowEnd + 1);\n     NodeId waitingfor = -1;\n+\n     while (pindexWalk->nHeight < nMaxHeight) {\n         // Read up to 128 (or more, if more blocks than that are needed) successors of pindexWalk (towards\n         // pindexBestKnownBlock) into vToFetch. We fetch 128, because CBlockIndex::GetAncestor may be as expensive\n@@ -1051,7 +1089,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n \n         // Iterate over those blocks in vToFetch (in forward direction), adding the ones that\n         // are not yet downloaded and not in flight to vBlocks. In the meantime, update\n-        // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n+        // chainstate_to_last_common_block as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n         for (const CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n@@ -1062,9 +1100,9 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA || m_chainman.ActiveChain().Contains(pindex)) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA || our_chain.Contains(pindex)) {\n                 if (pindex->HaveTxsDownloaded())\n-                    state->pindexLastCommonBlock = pindex;\n+                    state->chainstate_to_last_common_block[chainstate] = pindex;\n             } else if (!IsBlockRequested(pindex->GetBlockHash())) {\n                 // The block is not already downloaded, and not yet in flight.\n                 if (pindex->nHeight > nWindowEnd) {\n@@ -1276,7 +1314,17 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n         if (state == nullptr)\n             return false;\n         stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n-        stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n+        stats.nCommonHeight = -1;\n+\n+        // TODO jamesob: this is a minor hack and should probably be thought about more.\n+        // Take the max common height with this peer.\n+        //\n+        for (const auto& it : state->chainstate_to_last_common_block) {\n+            const CBlockIndex* block = it.second;\n+            if (block && block->nHeight > stats.nCommonHeight) {\n+                stats.nCommonHeight = block->nHeight;\n+            }\n+        }\n         for (const QueuedBlock& queue : state->vBlocksInFlight) {\n             if (queue.pindex)\n                 stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n@@ -1468,6 +1516,8 @@ void PeerManagerImpl::StartScheduledTasks(CScheduler& scheduler)\n void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n     m_orphanage.EraseForBlock(*pblock);\n+    // TODO jamesob: do we need to namespace this per chainstate? Will we accidentally\n+    //   evict outbound peers we're IBDing from for the background validation chain?\n     m_last_tip_update = GetTime();\n \n     {\n@@ -1559,7 +1609,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n \n /**\n  * Update our best height and announce any block hashes which weren't previously\n- * in m_chainman.ActiveChain() to our peers.\n+ * in the active chain to our peers.\n  */\n void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n@@ -2078,6 +2128,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             return;\n         }\n \n+        // Ensure that the sequence of headers we received is contiguous.\n         uint256 hashLastBlock;\n         for (const CBlockHeader& header : headers) {\n             if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n@@ -4925,21 +4976,37 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Message: getdata (blocks)\n         //\n         std::vector<CInv> vGetData;\n-        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !m_chainman.ActiveChainstate().IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            std::vector<const CBlockIndex*> vToDownload;\n-            NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n-            for (const CBlockIndex *pindex : vToDownload) {\n-                uint32_t nFetchFlags = GetFetchFlags(*pto);\n-                vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                BlockRequested(pto->GetId(), *pindex);\n-                LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                    pindex->nHeight, pto->GetId());\n-            }\n-            if (state.nBlocksInFlight == 0 && staller != -1) {\n-                if (State(staller)->m_stalling_since == 0us) {\n-                    State(staller)->m_stalling_since = current_time;\n-                    LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n+\n+        // The first chainstate in line for processing will likely exhaust this\n+        // during IBD, but once it hits a tip capacity will trickle into subsequent\n+        // chainstates.\n+        int requests_available = MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight;\n+\n+        // Service the snapshot chainstate first - more important to get to the\n+        // network's tip quickly than do the background validation on the\n+        // snapshot.\n+        for (CChainState* chainstate : m_chainman.GetAllForBlockDownload()) {\n+            if (!pto->fClient &&\n+                    ((fFetch && !pto->m_limited_node) || !chainstate->IsInitialBlockDownload()) &&\n+                    state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                std::vector<const CBlockIndex*> vToDownload;\n+                NodeId staller = -1;\n+                FindNextBlocksToDownload(chainstate, pto->GetId(), requests_available, vToDownload, staller);\n+\n+                for (const CBlockIndex *pindex : vToDownload) {\n+                    uint32_t nFetchFlags = GetFetchFlags(*pto);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    BlockRequested(pto->GetId(), *pindex);\n+                    LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                        pindex->nHeight, pto->GetId());\n+                }\n+\n+                requests_available -= vToDownload.size();\n+                if (state.nBlocksInFlight == 0 && staller != -1) {\n+                    if (State(staller)->m_stalling_since == 0us) {\n+                        State(staller)->m_stalling_since = current_time;\n+                        LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n+                    }\n                 }\n             }\n         }"
      },
      {
        "sha": "425fadae5dea5d8ae95c7b2816453c0597649412",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
        "patch": "@@ -4686,6 +4686,27 @@ std::vector<CChainState*> ChainstateManager::GetAll()\n     return out;\n }\n \n+std::vector<CChainState*> ChainstateManager::GetAllForBlockDownload()\n+{\n+    std::vector<CChainState*> out;\n+\n+    bool snapshot_in_ibd =\n+        m_snapshot_chainstate && m_snapshot_chainstate->IsInitialBlockDownload();\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+    // Exclude the ibd chainstate (which is in the background if we have a snapshot\n+    // chainstate active) if the snapshot chainstate is in IBD because the main\n+    // priority is getting the active chain to network tip.\n+    if (!IsSnapshotValidated() && !snapshot_in_ibd && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    assert(out.size() > 0);\n+    return out;\n+}\n+\n CChainState& ChainstateManager::InitializeChainstate(\n     CTxMemPool* mempool, const std::optional<uint256>& snapshot_blockhash)\n {"
      },
      {
        "sha": "dc7b6c7e972b816a56f93e2db4bfb04dc57e2baa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4ee3cd880c3457a1dd1a614c712732190fe1c2c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
        "patch": "@@ -928,6 +928,12 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Return all chainstates to be checked for next blocks to download.\n+    //!\n+    //! This specifically orders the snapshot chain first (if it exists) to\n+    //! expedite syncing to network tip.\n+    std::vector<CChainState*> GetAllForBlockDownload() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n     //!\n     //! Steps:\n@@ -944,18 +950,16 @@ class ChainstateManager\n     [[nodiscard]] bool ActivateSnapshot(\n         CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n \n-    /**\n-     * Return the relevant chainstate for a new block.\n-     *\n-     * Because the use of UTXO snapshots requires the simultaneous maintenance\n-     * of two chainstates, when a new block message arrives we have to decide\n-     * which chain we should attempt to append it to.\n-     *\n-     * If our most-work chain hasn't seen the incoming blockhash, return that.\n-     * Otherwise we're likely receiving a block that has already been assumed\n-     * valid by the snapshot chain, so attempt to append that to the validation\n-     * chain.\n-     */\n+    //! Return the relevant chainstate for a new block.\n+    //!\n+    //! Because the use of UTXO snapshots requires the simultaneous maintenance\n+    //! of two chainstates, when a new block message arrives we have to decide\n+    //! which chain we should attempt to append it to.\n+    //!\n+    //! If our most-work chain hasn't seen the incoming blockhash, return that.\n+    //! Otherwise we're likely receiving a block that has already been assumed\n+    //! valid by the snapshot chain, so attempt to append that to the validation\n+    //! chain.\n     CChainState& GetChainstateForNewBlock(\n         const uint256& blockhash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "3ba68df4a69f86e615b6f56cac274b97a64ba69b",
    "node_id": "C_kwDOABII59oAKDNiYTY4ZGY0YTY5Zjg2ZTYxNWI2ZjU2Y2FjMjc0Yjk3YTY0YmE2OWI",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-11T18:24:29Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:32Z"
      },
      "message": "p2p: don't advertise until we finish all IBDs\n\nUntil we have completed IBD on all chainstates, don't answer getheaders\nrequests from our peers or advertise ourselves. This preserves the\nexisting behavior of not performing these actions until IBD of the\nwhole chain completes.",
      "tree": {
        "sha": "1df790f6742ea74929b4074dcc1a8c966438e454",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1df790f6742ea74929b4074dcc1a8c966438e454"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba68df4a69f86e615b6f56cac274b97a64ba69b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BQACgkQepNdrbLE\nTwWMXA//XOifY5xWIWxLWQWrrmc/Ch+NEE6x7UmClf2NbeaDYCMlbVeWLibqVkVB\nYblPJ69ahzq5BmgmafXn8WDzEIa02BfzbsNoPi5anU/D9ZLp+zYPgc9OVWNgUfp9\n6rolmZ+wWiEACZqZBHAx6dECFZBs4ySBI63sjyLRo5tX3qEBVnddZC4ttiJybLHh\n2cu6o35QmaOWCTU34u92YPAsSOfxAs04hyJRybGTOwIKH7TZxqeDzfme+9ZkXsSD\n/WxzmXI4qqo1d+H3ug03zQY3e6FoyP3/q2ftWNdmG6PH+WXqKQKiDUGrXvEVfLEK\nCtNh+ciRt9qHN8Q9umsoN7E5LN/nmsMmVQ/kTnz78gCHFYaA6trNEgY5ZYbFOI7p\n8e5hQ15gI4Mph0LanSyW0nzAKZh3+FUBXkf8eMcjDNS56o8Vh++7//tM5B1MtIlH\nq7WUGUCyFwPfdO2qfbS1kQpDQDKxbQYpc52YAPcmkyCDJgh1xw5//pcRMlnL9idO\n6iCRZVejoSdz7z6Y9mX/SFkKDJa9Ss2ka+YmviD2OlftYvOartM6o5LIDNg4+fj+\nPa3SH0jH4VEjXDCEpRl84XMFNK8GoWqYh8wenUtJdyEBoNoghhUfQH5zf9S/K3cP\nuf71H83ycnU9TxJTumCXiLKt6AQJ9qha2LtnJodlTHEAD6ryz7U=\n=3+T0\n-----END PGP SIGNATURE-----",
        "payload": "tree 1df790f6742ea74929b4074dcc1a8c966438e454\nparent c4ee3cd880c3457a1dd1a614c712732190fe1c2c\nauthor James O'Beirne <james.obeirne@gmail.com> 1568226269 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488212 -0500\n\np2p: don't advertise until we finish all IBDs\n\nUntil we have completed IBD on all chainstates, don't answer getheaders\nrequests from our peers or advertise ourselves. This preserves the\nexisting behavior of not performing these actions until IBD of the\nwhole chain completes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba68df4a69f86e615b6f56cac274b97a64ba69b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba68df4a69f86e615b6f56cac274b97a64ba69b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba68df4a69f86e615b6f56cac274b97a64ba69b/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4ee3cd880c3457a1dd1a614c712732190fe1c2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4ee3cd880c3457a1dd1a614c712732190fe1c2c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 18,
      "deletions": 4
    },
    "files": [
      {
        "sha": "25092c4e33f4a80e9235a3df0e0fabb97f39b5a3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3ba68df4a69f86e615b6f56cac274b97a64ba69b",
        "patch": "@@ -2672,6 +2672,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // Self advertisement & GETADDR logic\n         if (!pfrom.IsInboundConn() && SetupAddressRelay(pfrom, *peer)) {\n+            bool is_ibd;\n+            WITH_LOCK(::cs_main, is_ibd = m_chainman.IsAnyChainInIBD());\n+\n             // For outbound peers, we try to relay our address (so that other\n             // nodes can try to find us more quickly, as we have no guarantee\n             // that an outbound peer is even aware of how to reach us) and do a\n@@ -2683,7 +2686,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // We skip this for block-relay-only peers. We want to avoid\n             // potentially leaking addr information and we do not want to\n             // indicate to the peer that we will participate in addr relay.\n-            if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload())\n+            if (fListen && !is_ibd)\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n                 FastRandomContext insecure_rand;\n@@ -3192,7 +3195,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         LOCK(cs_main);\n-        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(NetPermissionFlags::Download)) {\n+        if (m_chainman.IsAnyChainInIBD() && !pfrom.HasPermission(NetPermissionFlags::Download)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom.GetId());\n             return;\n         }\n@@ -4413,9 +4416,10 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, Peer& peer, std::chrono::micros\n     if (!peer.m_addr_relay_enabled) return;\n \n     LOCK(peer.m_addr_send_times_mutex);\n+    bool is_ibd = WITH_LOCK(::cs_main, return m_chainman.IsAnyChainInIBD());\n+\n     // Periodically advertise our local address to the peer.\n-    if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n-        peer.m_next_local_addr_send < current_time) {\n+    if (fListen && !is_ibd && peer.m_next_local_addr_send < current_time) {\n         // If we've sent before, clear the bloom filter for the peer, so that our\n         // self-announcement will actually go out.\n         // This might be unnecessary if the bloom filter has already rolled"
      },
      {
        "sha": "9b7e02a4b815af7cc0043d05d0d4863e8ca28b0d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3ba68df4a69f86e615b6f56cac274b97a64ba69b",
        "patch": "@@ -5128,3 +5128,10 @@ bool ChainstateManager::hasBgChainstateInUse()\n {\n     return this->SnapshotBlockhash() && !m_snapshot_validated;\n }\n+\n+bool ChainstateManager::IsAnyChainInIBD()\n+{\n+    return\n+        (m_snapshot_chainstate && m_snapshot_chainstate->IsInitialBlockDownload()) ||\n+        (m_ibd_chainstate && m_ibd_chainstate->IsInitialBlockDownload());\n+}"
      },
      {
        "sha": "4abfa476f26d56bc55bbfce09598f9d991c40a30",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba68df4a69f86e615b6f56cac274b97a64ba69b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3ba68df4a69f86e615b6f56cac274b97a64ba69b",
        "patch": "@@ -1030,6 +1030,9 @@ class ChainstateManager\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! Returns true if any chainstate in use is in initial block download.\n+    bool IsAnyChainInIBD() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     //! @returns the chainstate that indexers should consult when ensuring that an\n     //!   index is synced with a chain where we can expect block index entries to have\n     //!   BLOCK_HAVE_DATA beneath the tip."
      }
    ]
  },
  {
    "sha": "098477765ad5e8cec630d33d686354586c4bfb99",
    "node_id": "C_kwDOABII59oAKDA5ODQ3Nzc2NWFkNWU4Y2VjNjMwZDMzZDY4NjM1NDU4NmM0YmZiOTk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T20:33:02Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:03:33Z"
      },
      "message": "add utxo snapshot detection and add to init",
      "tree": {
        "sha": "05d6839c9f59c7d8780fb9ddd4c014e0557eac8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05d6839c9f59c7d8780fb9ddd4c014e0557eac8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/098477765ad5e8cec630d33d686354586c4bfb99",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK1BUACgkQepNdrbLE\nTwWoMw//b/Jnknf8nqlXz0D9mJYbVroucZwttEKVQ+gftX2db9xq9yQCD7kTfdir\nGzZOgcGpktX4bTKdXK8G3SfVEI/jwd1awknFA9Fafb00hZXNweaijOExODOSiaML\nSHVZ9wSbCiz0hbJFGZ7fB+rv7vjOlPXCRmYMAE8vYSJx5xCajN67zS3j+C6ae5os\nxvtmdoKQg8hSfWwAkc0LhEavlho1sAkNx6g/vHdiqfhA9/1E/MkPZQJ8vdqEfsS5\nArlTZCfqCLU1bG6dNi6a5O44m8O6QHidhzdx3fOTS8Ri2eK+JAXN60jTghac5c3M\nOSeSN+Go35Nvem1UA6olh51vLuMIgBNpWpnEAtEInFxEpWrvVuwv3V53E0RfoKgQ\nU/rySU2vVI04/6avy4ik/4Cg7XDG8fgbnf4V21Zq3FEkcl0iT8ViPxmbgizhcoG8\nGTzKnrIdVAvDB2I3GtqCY5jiPKi4ZDoaQXqTE9HCyoGAYBTuN/nwuJ4rWzja0Jg+\n8JTc40H0WhobqPcvtGarg9iNJuM/OuFgyL1srrSofvKKxRXRVxRzzCzTjw8Cyv2K\n+fv5PVoIlYSHxlXFoGfLHZioEDXvQ2qyamMxCdPjNKiNolhNgTj1+KBwqkQejC0w\nICV4EwroRMQNUmrP3FlfzfhzFIxoj/4lvY9Ake+Bf55LAOBBlMg=\n=ECZl\n-----END PGP SIGNATURE-----",
        "payload": "tree 05d6839c9f59c7d8780fb9ddd4c014e0557eac8e\nparent 3ba68df4a69f86e615b6f56cac274b97a64ba69b\nauthor James O'Beirne <james.obeirne@gmail.com> 1553891582 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636488213 -0500\n\nadd utxo snapshot detection and add to init\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/098477765ad5e8cec630d33d686354586c4bfb99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/098477765ad5e8cec630d33d686354586c4bfb99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/098477765ad5e8cec630d33d686354586c4bfb99/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ba68df4a69f86e615b6f56cac274b97a64ba69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba68df4a69f86e615b6f56cac274b97a64ba69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba68df4a69f86e615b6f56cac274b97a64ba69b"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 58,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6a248cd4ca51dd6baf8274f7c337cecc869332d8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 5,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/098477765ad5e8cec630d33d686354586c4bfb99/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/098477765ad5e8cec630d33d686354586c4bfb99/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=098477765ad5e8cec630d33d686354586c4bfb99",
        "patch": "@@ -262,6 +262,7 @@ void Shutdown(NodeContext& node)\n         LOCK(cs_main);\n         for (CChainState* chainstate : node.chainman->GetAll()) {\n             if (chainstate->CanFlushToDisk()) {\n+                LogPrintf(\"[snapshot] resetting coinsviews for %s\\n\", chainstate->ToString());\n                 chainstate->ForceFlushStateToDisk();\n                 chainstate->ResetCoinsViews();\n             }\n@@ -1406,10 +1407,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n \n+                // Load a chain created from a UTXO snapshot, if any exist.\n+                chainman.DetectSnapshotChainstate(*Assert(node.mempool));\n+\n+                // Conservative value that will ultimately be changed by\n+                // a call to `chainman.MaybeRebalanceCaches()`.\n+                double init_cache_fraction = 0.2;\n+\n+                // If we're not using a snapshot or we haven't fully validated it yet,\n+                // create a validation chainstate.\n+                if (!chainman.IsSnapshotValidated()) {\n+                    LogPrintf(\"Loading validation chainstate\\n\");\n+                    chainman.InitializeChainstate(Assert(node.mempool.get()));\n+                }\n+\n                 UnloadBlockIndex(node.mempool.get(), chainman);\n \n                 auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n@@ -1427,6 +1441,17 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                 if (ShutdownRequested()) break;\n \n+                for (CChainState* chainstate : chainman.GetAll()) {\n+                    // Initialize CoinsDB before loading the block index in case we\n+                    // have to consult a cached nChainTx value in the snapshot\n+                    // chainstate storage.\n+                    // (See nChainTx usage in BlockManager::LoadBlockIndex()).\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache * init_cache_fraction,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+                }\n+\n                 // LoadBlockIndex will load fHavePruned if we've ever removed a\n                 // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n@@ -1466,10 +1491,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 bool failed_chainstate_init = false;\n \n                 for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n \n                     chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n                         uiInterface.ThreadSafeMessageBox(\n@@ -1510,6 +1532,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 if (failed_chainstate_init) {\n                     break; // out of the chainstate activation do-while\n                 }\n+\n+                // Now that chainstates are loaded and we're able to flush to\n+                // disk, rebalance the coins caches to desired levels based\n+                // on the condition of each chainstate.\n+                chainman.MaybeRebalanceCaches();\n+\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\");"
      },
      {
        "sha": "61a235f1fd5b3e1aa476d9669740830ee82efb38",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/098477765ad5e8cec630d33d686354586c4bfb99/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/098477765ad5e8cec630d33d686354586c4bfb99/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=098477765ad5e8cec630d33d686354586c4bfb99",
        "patch": "@@ -18,6 +18,7 @@\n #include <cuckoocache.h>\n #include <deploymentstatus.h>\n #include <flatfile.h>\n+#include <fs.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <logging.h>\n@@ -5135,3 +5136,23 @@ bool ChainstateManager::IsAnyChainInIBD()\n         (m_snapshot_chainstate && m_snapshot_chainstate->IsInitialBlockDownload()) ||\n         (m_ibd_chainstate && m_ibd_chainstate->IsInitialBlockDownload());\n }\n+\n+bool ChainstateManager::DetectSnapshotChainstate(CTxMemPool& mempool)\n+{\n+    constexpr int SNAPSHOT_NAME_LEN = 75; // \"chainstate_\" + 64 hex characters for blockhash.\n+\n+    for (fs::directory_iterator it(gArgs.GetDataDirNet()); it != fs::directory_iterator(); it++) {\n+        if (fs::is_directory(*it) &&\n+            !fs::is_empty(*it) &&\n+            it->path().filename().string().length() == SNAPSHOT_NAME_LEN &&\n+            it->path().filename().string().substr(0,11) == \"chainstate_\")\n+        {\n+            auto path = it->path();\n+            LogPrintf(\"[snapshot] detected active snapshot chainstate (%s) - loading\\n\", path);\n+            this->InitializeChainstate(\n+                &mempool, /*snapshot_blockhash*/ uint256S(path.filename().string().substr(11)));\n+            return true;\n+        }\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "1cecac53b8a9bd75e865ea6dda8cd3ab9d5ccbbd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/098477765ad5e8cec630d33d686354586c4bfb99/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/098477765ad5e8cec630d33d686354586c4bfb99/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=098477765ad5e8cec630d33d686354586c4bfb99",
        "patch": "@@ -1033,6 +1033,10 @@ class ChainstateManager\n     //! Returns true if any chainstate in use is in initial block download.\n     bool IsAnyChainInIBD() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! When starting up, search the datadir for a chainstate based on a UTXO\n+    //! snapshot that is in the process of being validated.\n+    bool DetectSnapshotChainstate(CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     //! @returns the chainstate that indexers should consult when ensuring that an\n     //!   index is synced with a chain where we can expect block index entries to have\n     //!   BLOCK_HAVE_DATA beneath the tip."
      }
    ]
  },
  {
    "sha": "0b96253ca2a380a36b9de512c9539e030c2f9e33",
    "node_id": "C_kwDOABII59oAKDBiOTYyNTNjYTJhMzgwYTM2YjlkZTUxMmM5NTM5ZTAzMGMyZjllMzM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T20:16:09Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:44:10Z"
      },
      "message": "validation: add ChainstateManager logic for completing UTXO snapshot validation\n\nTrigger completion when a background validation chainstate reaches the same\nheight as a UTXO snapshot, and handle cleaning up the chainstate on shutdown.",
      "tree": {
        "sha": "7deb151198454f18f1aad9378b88a6086e5d0a4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7deb151198454f18f1aad9378b88a6086e5d0a4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b96253ca2a380a36b9de512c9539e030c2f9e33",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3ZoACgkQepNdrbLE\nTwUpmg/+J88cQYZM2vGNQOTTGI4KFUShqeXeN6UD31SWhGb5mmdsPv6XP/NbaJUo\nFa/41wTANFxYz7bc8V+zcE6VYXeYsuUrfy+MS48i06XofEtl93RD7c6YiYJnQ8a6\nlOuNpB8sJtwqaLheFaV9OjvGoJNjkF7lZ10ez9ipMO0mHezPoICccGJQD5PyQwgJ\ntKO3hYEGDXOw++9JtGKw4Y4At814xyAfEKvuyTGaQHg7B9LNulVBl8Smh0UsG5x8\nSMeHXpx6XUZnJ5118FBmWODxp/lyUVqwDiUNCJH+DUHa9bAc9eMfJi2v/9JQ9/D7\nCp8KgA0Hroli0MsBoB6E3NJFKOWjEhGpjc3XKaE0hh45iEmuH17qNesOrap2Zm+q\n+BOaINPekhNzfs58mY7EH+Q26tZW4lpERsA9uYR27EbZQSXBl+K0rYpcLnK2yPLt\nCcydLyLogOuhhse8aa6kwRzbuDTci6mOR7CnBrN7Q0D3JXgOjlOtSFao56eaIKXA\nqttpbkv/XbfRfH2O1nnaegnFjfSDkApw88WFYcZfbKE9qLKTadmyPeOO93UVsXyg\nJ/Lsng//YKeB9WatLUMJz8RnI+nkzpxTiPgMi0l/OHUYwG8Z/I1u+CVcQFqgHIt0\nHcZ1JaQ2ZvAujFKeCNgVLRLfcJNOTE5r2sAVW+ed0Msx82/E6fg=\n=7LDE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7deb151198454f18f1aad9378b88a6086e5d0a4a\nparent 098477765ad5e8cec630d33d686354586c4bfb99\nauthor James O'Beirne <james.obeirne@gmail.com> 1553890569 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490650 -0500\n\nvalidation: add ChainstateManager logic for completing UTXO snapshot validation\n\nTrigger completion when a background validation chainstate reaches the same\nheight as a UTXO snapshot, and handle cleaning up the chainstate on shutdown.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96253ca2a380a36b9de512c9539e030c2f9e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b96253ca2a380a36b9de512c9539e030c2f9e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96253ca2a380a36b9de512c9539e030c2f9e33/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "098477765ad5e8cec630d33d686354586c4bfb99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/098477765ad5e8cec630d33d686354586c4bfb99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/098477765ad5e8cec630d33d686354586c4bfb99"
      }
    ],
    "stats": {
      "total": 261,
      "additions": 253,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f5ba64fde71c29dcd6b362291983ea3c4a91ffcb",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -115,7 +115,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{fs::PathToString(path.stem())}\n+    : m_name{fs::PathToString(path.stem())}, m_path{path}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;"
      },
      {
        "sha": "31cb7a346e918d06a7bd83edd7caf4835aa3df38",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -212,6 +212,9 @@ class CDBWrapper\n \n     std::vector<unsigned char> CreateObfuscateKey() const;\n \n+    //! path to filesystem storage\n+    const fs::path m_path;\n+\n public:\n     /**\n      * @param[in] path        Location in the filesystem where leveldb data will be stored.\n@@ -261,6 +264,9 @@ class CDBWrapper\n         return WriteBatch(batch, fSync);\n     }\n \n+    //! @returns filesystem path to the on-disk data.\n+    fs::path StoragePath() { return m_path; }\n+\n     template <typename K>\n     bool Exists(const K& key) const\n     {"
      },
      {
        "sha": "c1803ffa429a874eca6a8b032ca189bbb591fabb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -262,9 +262,7 @@ void Shutdown(NodeContext& node)\n         LOCK(cs_main);\n         for (CChainState* chainstate : node.chainman->GetAll()) {\n             if (chainstate->CanFlushToDisk()) {\n-                LogPrintf(\"[snapshot] resetting coinsviews for %s\\n\", chainstate->ToString());\n                 chainstate->ForceFlushStateToDisk();\n-                chainstate->ResetCoinsViews();\n             }\n         }\n     }\n@@ -1533,6 +1531,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                     break; // out of the chainstate activation do-while\n                 }\n \n+                chainman.CheckForUncleanShutdown();\n                 // Now that chainstates are loaded and we're able to flush to\n                 // disk, rebalance the coins caches to desired levels based\n                 // on the condition of each chainstate."
      },
      {
        "sha": "193e34ea1e647263b8c1ea579483fd571f90ec0c",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -106,7 +106,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n {\n     ChainstateManager& manager = *m_node.chainman;\n     CTxMemPool& mempool = *m_node.mempool;\n-\n     size_t max_cache = 10000;\n     manager.m_total_coinsdb_cache = max_cache;\n     manager.m_total_coinstip_cache = max_cache;\n@@ -159,13 +158,36 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n {\n     ChainstateManager& chainman = *Assert(m_node.chainman);\n \n+    BOOST_CHECK(!chainman.IsSnapshotActive());\n+    BOOST_CHECK(!chainman.IsSnapshotValidated());\n+\n     size_t initial_size;\n     size_t initial_total_coins{100};\n \n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        CCoinsViewDB& coinsdb = chainman.ActiveChainstate().CoinsDB();\n+        std::unique_ptr<CCoinsViewCursor> curs{coinsdb.Cursor()};\n+\n+        // Ensure all extant coins are loaded into cache. This is necessary now\n+        // that we're rebalanicng caches (and therefore flushing) when we exit IBD,\n+        // since in the TestChain100Setup we exit IBD after connecting the first\n+        // block, thus flushing the first coin and removing it from the cache.\n+        // Calling HaveCoin() drags it back into cacheCoins.\n+        while (curs->Valid()) {\n+            COutPoint tmp;\n+            curs->GetKey(tmp);\n+            ibd_coinscache.HaveCoin(tmp);\n+            curs->Next();\n+        }\n+    }\n+\n     // Make some initial assertions about the contents of the chainstate.\n     {\n         LOCK(::cs_main);\n         CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+\n         initial_size = ibd_coinscache.GetCacheSize();\n         size_t total_coins{0};\n "
      },
      {
        "sha": "77b2e414f28f598ce1c2611810873e22dda8f455",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <coins.h>\n #include <dbwrapper.h>\n+#include <fs.h>\n \n #include <memory>\n #include <optional>\n@@ -71,6 +72,9 @@ class CCoinsViewDB final : public CCoinsView\n \n     //! Dynamically alter the underlying leveldb cache size.\n     void ResizeCache(size_t new_cache_size) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    //! @returns filesystem path to on-disk storage.\n+    fs::path StoragePath() { return m_db->StoragePath(); }\n };\n \n /** Access to the block database (blocks/index/) */"
      },
      {
        "sha": "8e28b493535096abaad3fb5e8ef27bda0c0be7d8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 181,
        "deletions": 2,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -2327,6 +2327,10 @@ bool CChainState::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n+    // This call may set `m_stop_use`, which is referenced immediately afterwards in\n+    // ActivateBestChain.\n+    m_chainman.MaybeCompleteSnapshotValidation(this, pindexNew);\n+\n     connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n     return true;\n }\n@@ -2544,6 +2548,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n     // we use m_cs_chainstate to enforce mutual exclusion so that only one caller may execute this function at a time\n     LOCK(m_cs_chainstate);\n \n+    bool started_in_ibd = this->IsInitialBlockDownload();\n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n@@ -2620,6 +2625,12 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n         if (nStopAtHeight && pindexNewTip && pindexNewTip->nHeight >= nStopAtHeight) StartShutdown();\n \n+        // This will have been toggled in ABCStep -> ConnectTip -> CompleteSnapshotValidation,\n+        // if at all, so we should catch it here.\n+        if (m_stop_use) {\n+            return true;\n+        }\n+\n         // We check shutdown only after giving ActivateBestChainStep a chance to run once so that we\n         // never shutdown before connecting the genesis block during LoadChainTip(). Previously this\n         // caused an assert() failure during shutdown in such cases as the UTXO DB flushing checks\n@@ -2628,6 +2639,13 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex();\n \n+    if (started_in_ibd && !this->IsInitialBlockDownload()) {\n+        LOCK(::cs_main);\n+        LogPrintf(\"%s leaving IBD - rebalancing caches\\n\", this->ToString());\n+        // This chainstate has transitioned out of IBD, so consider rebalancing caches.\n+        m_chainman.MaybeRebalanceCaches();\n+    }\n+\n     // Write changes periodically to disk, after relay.\n     if (!FlushStateToDisk(state, FlushStateMode::PERIODIC)) {\n         return false;\n@@ -5030,6 +5048,90 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     return true;\n }\n \n+bool ChainstateManager::CompleteSnapshotValidation(CChainState* validation_chainstate)\n+{\n+    AssertLockHeld(cs_main);\n+    {\n+        assert(validation_chainstate == m_ibd_chainstate.get());\n+    }\n+\n+    CCoinsViewDB& ibd_coins_db = validation_chainstate->CoinsDB();\n+    validation_chainstate->ForceFlushStateToDisk();\n+\n+    CCoinsStats ibd_stats{CoinStatsHashType::HASH_SERIALIZED};\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    if (!GetUTXOStats(&ibd_coins_db, WITH_LOCK(::cs_main, return std::ref(m_blockman)), ibd_stats, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate stats for validation coins db\\n\");\n+        return false;\n+    }\n+\n+    auto snapshot_blockhash = SnapshotBlockhash().value_or(uint256());\n+\n+    LogPrintf(\"[snapshot] tip: actual=%s expected=%s\\n\",\n+            validation_chainstate->m_chain.Tip()->ToString(),\n+            snapshot_blockhash.ToString());\n+\n+    uint256 expected_contents_hash;\n+    int curr_height = validation_chainstate->m_chain.Height();\n+\n+    bool snapshot_invalid{false};\n+    auto maybe_au_data = ExpectedAssumeutxo(curr_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo data not found for height \" /* Continued */\n+            \"(%d) - refusing to validate snapshot\\n\", curr_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = *maybe_au_data;\n+\n+    // Compare the background validation chainstate's UTXO set hash against the hard-coded\n+    // assumeutxo hash we expect.\n+    //\n+    // TODO: For belt-and-suspenders, we should cache an obfuscated version of the UTXO set\n+    // hash for the snapshot when it's loaded in its chainstate's leveldb. We should then\n+    // reference that here for an additional check.\n+    if (AssumeutxoHash{ibd_stats.hashSerialized} != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] hash mismatch: actual=%s, expected=%s\\n\",\n+            ibd_stats.hashSerialized.ToString(),\n+            expected_contents_hash.ToString());\n+        snapshot_invalid = true;\n+    }\n+    if (validation_chainstate->m_chain.Height() != getSnapshotHeight()) {\n+        LogPrintf(\"[snapshot] height mismatch: actual=%d expected=%d\\n\",\n+            validation_chainstate->m_chain.Height(), getSnapshotHeight().value_or(-1));\n+        snapshot_invalid = true;\n+    }\n+\n+    if (snapshot_invalid) {\n+        LogPrintf(\"[snapshot] !!! the snapshot you've been working off of is invalid\\n\");\n+        LogPrintf(\"[snapshot] deleting snapshot and reverting to validated chain\\n\");\n+\n+        {\n+            m_active_chainstate = m_ibd_chainstate.get();\n+            m_snapshot_chainstate->m_stop_use = true;\n+        }\n+        LogPrintf(\"[snapshot] SHUTTING DOWN!\\n\");\n+        StartShutdown();\n+\n+        return false;\n+    }\n+    LogPrintf(\"[snapshot] snapshot beginning at %s has been fully validated\\n\",\n+        snapshot_blockhash.ToString());\n+\n+    m_snapshot_validated = true;\n+\n+    // m_ibd_chainstate is the same as validation_chainstate, per the assertion above.\n+    // Modification happens to the argument (this symbol) to make it explicit that\n+    // the caller might act specifically based on this value being different.\n+    //\n+    // Chainstate will be destructed during Shutdown().\n+    validation_chainstate->m_stop_use = true;\n+\n+    return true;\n+}\n+\n CChainState& ChainstateManager::GetChainstateForNewBlock(const uint256& blockhash)\n {\n     auto* pblock = m_blockman.LookupBlockIndex(blockhash);\n@@ -5070,11 +5172,26 @@ void ChainstateManager::Unload()\n \n void ChainstateManager::Reset()\n {\n-    LOCK(::cs_main);\n+    auto get_storage_path = [](std::unique_ptr<CChainState>& chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+            -> fs::path {\n+        if (!chainstate) {\n+            return fs::path();\n+        }\n+        return chainstate->CoinsDB().StoragePath();\n+    };\n+    fs::path valid_chainstate_path = get_storage_path(m_ibd_chainstate);\n+    fs::path snapshot_chainstate_path = get_storage_path(m_snapshot_chainstate);\n+    bool should_cleanup_snapshot = m_snapshot_chainstate && m_snapshot_validated;\n+\n     m_ibd_chainstate.reset();\n     m_snapshot_chainstate.reset();\n     m_active_chainstate = nullptr;\n     m_snapshot_validated = false;\n+\n+    if (should_cleanup_snapshot) {\n+        this->ValidatedSnapshotShutdownCleanup(\n+            snapshot_chainstate_path, valid_chainstate_path);\n+    }\n }\n \n void ChainstateManager::MaybeRebalanceCaches()\n@@ -5084,7 +5201,8 @@ void ChainstateManager::MaybeRebalanceCaches()\n         // Allocate everything to the IBD chainstate.\n         m_ibd_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);\n     }\n-    else if (m_snapshot_chainstate && !m_ibd_chainstate) {\n+    else if (m_snapshot_chainstate && m_snapshot_validated) {\n+        // If background validation has completed and snapshot is our active chain...\n         LogPrintf(\"[snapshot] allocating all cache to the snapshot chainstate\\n\");\n         // Allocate everything to the snapshot chainstate.\n         m_snapshot_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);\n@@ -5156,3 +5274,64 @@ bool ChainstateManager::DetectSnapshotChainstate(CTxMemPool& mempool)\n     }\n     return false;\n }\n+\n+void ChainstateManager::ValidatedSnapshotShutdownCleanup(\n+    fs::path new_chainstate, fs::path old_chainstate)\n+{\n+    assert(fs::exists(new_chainstate));\n+    assert(fs::exists(old_chainstate));\n+\n+    LogPrintf(\"[snapshot] deleting background chainstate directory (now unnecessary) (%s)\\n\",\n+        fs::PathToString(old_chainstate));\n+\n+    // Instead of deleting the background chainstate directly, rename the old\n+    // chainstate to chainstate_bak, rename the new chainstate into place, and then\n+    // delete to avoid likelihood of corruption from mid-delete shutdown.\n+    fs::path tmp_old{old_chainstate};\n+    tmp_old += \"_bak\";\n+\n+    fs::rename(old_chainstate, tmp_old);\n+    fs::rename(new_chainstate, old_chainstate);\n+\n+    LogPrintf(\"[snapshot] moving snapshot chainstate (%s) to \" /* Continued */\n+        \"default chainstate directory (%s)\\n\",\n+        fs::PathToString(new_chainstate), fs::PathToString(old_chainstate));\n+\n+    assert(fs::remove_all(tmp_old) > 0);\n+    LogPrintf(\"[snapshot] deleted background chainstate directory (%s)\\n\",\n+        fs::PathToString(old_chainstate));\n+}\n+\n+void ChainstateManager::CheckForUncleanShutdown()\n+{\n+    if (!(m_snapshot_chainstate && m_ibd_chainstate)) {\n+        return;\n+    }\n+    if (m_ibd_chainstate->m_chain.Height() != getSnapshotHeight()) {\n+        return;\n+    }\n+    LogPrintf(\"[snapshot] unclean shutdown detected - background validation chain needs to \" /* Continued */\n+        \"be checked against the loaded snapshot and cleaned up.\\n\");\n+    this->CompleteSnapshotValidation(m_ibd_chainstate.get());\n+}\n+\n+void ChainstateManager::MaybeCompleteSnapshotValidation(\n+    CChainState* chainstate,\n+    CBlockIndex* pindexNew)\n+{\n+    int snapshot_height = getSnapshotHeight().value_or(-1);\n+\n+    // If this is the chainstate that's validating in the background, check to see if it's\n+    // time we compare the UTXO set hash to the base of our active snapshot.\n+    if (chainstate != &this->ActiveChainstate()) {\n+        if (pindexNew->nHeight > getSnapshotHeight()) {\n+            // TODO jamesob: better handling?\n+            LogPrintf(\"[snapshot] something is wrong! validation chain \" /* Continued */\n+                \"should not have continued past the snapshot origin\\n\");\n+        } else if (pindexNew->nHeight == snapshot_height) {\n+            // This call may set `chainstate->m_stop_use` in the (expected) case that\n+            // this chain has proven the snapshot valid.\n+            this->CompleteSnapshotValidation(chainstate);\n+        }\n+    }\n+}"
      },
      {
        "sha": "7643204d346e253a4c521dbafb18f73b41ad5e09",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96253ca2a380a36b9de512c9539e030c2f9e33/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "patch": "@@ -573,6 +573,12 @@ class CChainState\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n+    //! This toggle exists for use when doing background validation for UTXO\n+    //! snapshots. It is set once the background validation chain reaches the\n+    //! same height as the base of the snapshot, and signals that we should no\n+    //! longer connect blocks to this chainstate.\n+    bool m_stop_use{false};\n+\n public:\n     //! Reference to a BlockManager instance which itself is shared across all\n     //! CChainState instances.\n@@ -886,7 +892,10 @@ class ChainstateManager\n     CChainState* m_active_chainstate GUARDED_BY(::cs_main) {nullptr};\n \n     //! If true, the assumed-valid chainstate has been fully validated\n-    //! by the background validation chainstate.\n+    //! by the background validation chainstate. This will trigger shutdown\n+    //! logic.\n+    //!\n+    //! @sa ValidatedSnapshotShutdownCleanup()\n     bool m_snapshot_validated{false};\n \n     //! Internal helper for ActivateSnapshot().\n@@ -899,6 +908,11 @@ class ChainstateManager\n     CBlockIndex* getSnapshotBaseBlock() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n     std::optional<int> getSnapshotHeight() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! If we have validated a snapshot chain during this runtime, copy its\n+    //! chainstate directory over to the main `chainstate` location, completing\n+    //! validation of the snapshot.\n+    void ValidatedSnapshotShutdownCleanup(fs::path new_chainstate, fs::path old_chainstate);\n+\n public:\n     std::thread m_load_block;\n     //! A single BlockManager instance is shared across each constructed\n@@ -950,6 +964,16 @@ class ChainstateManager\n     [[nodiscard]] bool ActivateSnapshot(\n         CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n \n+    //! Once the background validation chainstate has reached the height which\n+    //! is the base of the UTXO snapshot in use, compare its coins to ensure\n+    //! they match those expected by the snapshot.\n+    //!\n+    //! If the coins match (expected), then mark the validation chainstate for\n+    //! deletion and continue using the snapshot chainstate as active.\n+    //! Otherwise, revert to using the ibd chainstate and shutdown (TODO).\n+    bool CompleteSnapshotValidation(\n+        CChainState* validation_chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     //! Return the relevant chainstate for a new block.\n     //!\n     //! Because the use of UTXO snapshots requires the simultaneous maintenance\n@@ -1024,7 +1048,7 @@ class ChainstateManager\n     void Unload() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Clear (deconstruct) chainstate data.\n-    void Reset();\n+    void Reset() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Check to see if caches are out of balance and if so, call\n     //! ResizeCoinsCaches() as needed.\n@@ -1037,6 +1061,11 @@ class ChainstateManager\n     //! snapshot that is in the process of being validated.\n     bool DetectSnapshotChainstate(CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! If we completed background validation of the loaded snapshot during the\n+    //! last run but didn't for whatever reason shutdown properly, ensure that\n+    //! the background validation chainstate is marked accordingly.\n+    void CheckForUncleanShutdown() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     //! @returns the chainstate that indexers should consult when ensuring that an\n     //!   index is synced with a chain where we can expect block index entries to have\n     //!   BLOCK_HAVE_DATA beneath the tip.\n@@ -1051,6 +1080,12 @@ class ChainstateManager\n     //! background validation chainstate is running.\n     bool hasBgChainstateInUse();\n \n+    //! Complete validation of the active snapshot if `chainstate` is in the process of\n+    //! background validating and has reached the base block of the snapshot.\n+    void MaybeCompleteSnapshotValidation(\n+        CChainState* chainstate,\n+        CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     ~ChainstateManager() {\n         LOCK(::cs_main);\n         UnloadBlockIndex(/* mempool */ nullptr, *this);"
      }
    ]
  },
  {
    "sha": "323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
    "node_id": "C_kwDOABII59oAKDMyM2I1ZTFhNzY0NmI5MDdkZjk0NTJhM2JjZmRkMTg5YWVjZjJmZjA",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-08-17T20:23:02Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:42Z"
      },
      "message": "validation: tear down snapshot datadirs upon validation failure\n\nIf a UTXO snapshot fails to validate, don't leave the resulting datadir\non disk as this will confuse initialization on next startup and we'll\nget an assertion error.",
      "tree": {
        "sha": "77dde5e77ba57357d50326366f96d0784c46e623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77dde5e77ba57357d50326366f96d0784c46e623"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3fYACgkQepNdrbLE\nTwUAcA//RfmQSUZ7T32HNBBdzXMnJOj33BrlaghWhfrY1JBLd82zEWjLZHHryUp9\nt9zoPdsAuIHii3sbU5fpPEeqQNq8SRg4eRgjelbm9Kuu/RPnY01bbMLTdyfDagur\n9rOuOYl6O73DdE63KUcD6hERgrpXCsHWXl+kkN0AfM819MeaaoYHzhZ0P4p6C6i0\nQrZhWZrOCkEIMj4VwOpX07+g5KIDs5h4sZNPB06NDz1rypopAqL4JyrpTGQrH3co\n227L9sIkJjcjSfC+8MYk6MchfZRp3YnVgXwVJn1TnVhQNiYTWo03Lv40rNZTVr8Z\nXlJLN327sbl3PTdng0hJLqfnW/TFrR1whcw+5ZX6j3R6mfiYJK1g2PGHja7G8os8\nlp3YjORPvCoreBliXTtFGpp0Mi7PuRmgoMxRWYx7jUAHWJFROfLVCucyGdGVEbml\nTMmn4zFasSAWmw7a+ihxWem6LeVazB7oE0CgsMmr6ILeHn9DtXQmsap/mfAaOOdk\nSdp3q1Qt4v7m2z7/rwgWeIfutbQ65fzIRGTOraBMRWqF7zJxZXucbLFdQ0cg6V/s\nDgJoILC7WlOGTcshu2YO+h1W8/oGtbs5wXNo31E3FpBWqsRpTF4mlBx4hx6PH2OG\n8OVFri9umkXiigks+z7RfJGp8GCtLGrwiufTPwBoSyetfMY4V/I=\n=Q/fb\n-----END PGP SIGNATURE-----",
        "payload": "tree 77dde5e77ba57357d50326366f96d0784c46e623\nparent 0b96253ca2a380a36b9de512c9539e030c2f9e33\nauthor James O'Beirne <james.obeirne@pm.me> 1629231782 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490742 -0500\n\nvalidation: tear down snapshot datadirs upon validation failure\n\nIf a UTXO snapshot fails to validate, don't leave the resulting datadir\non disk as this will confuse initialization on next startup and we'll\nget an assertion error.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323b5e1a7646b907df9452a3bcfdd189aecf2ff0/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96253ca2a380a36b9de512c9539e030c2f9e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b96253ca2a380a36b9de512c9539e030c2f9e33"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 72,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c2c1d23212aed5231922938496e88c2e639869e4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 13,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/323b5e1a7646b907df9452a3bcfdd189aecf2ff0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/323b5e1a7646b907df9452a3bcfdd189aecf2ff0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
        "patch": "@@ -4822,7 +4822,9 @@ bool ChainstateManager::ActivateSnapshot(\n         *snapshot_chainstate, coins_file, metadata);\n \n     if (!snapshot_ok) {\n-        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        LOCK(::cs_main);\n+        this->MaybeRebalanceCaches();\n+        snapshot_chainstate->TeardownSnapshotDatadir();\n         return false;\n     }\n \n@@ -5255,24 +5257,74 @@ bool ChainstateManager::IsAnyChainInIBD()\n         (m_ibd_chainstate && m_ibd_chainstate->IsInitialBlockDownload());\n }\n \n-bool ChainstateManager::DetectSnapshotChainstate(CTxMemPool& mempool)\n+constexpr int SNAPSHOT_NAME_LEN = 75; // \"chainstate_\" + 64 hex characters for blockhash.\n+\n+static bool IsPathSnapshotDatadir(const fs::path& datadir_path)\n+{\n+    return datadir_path.filename().string().length() == SNAPSHOT_NAME_LEN &&\n+        datadir_path.filename().string().substr(0,11) == \"chainstate_\";\n+}\n+\n+static uint256 PathToSnapshotHash(const fs::path& datadir_path)\n+{\n+    assert(IsPathSnapshotDatadir(datadir_path));\n+    return uint256S(datadir_path.filename().string().substr(11));\n+}\n+\n+static std::optional<fs::path> FindSnapshotChainstateDatadir()\n {\n-    constexpr int SNAPSHOT_NAME_LEN = 75; // \"chainstate_\" + 64 hex characters for blockhash.\n+    fs::path found;\n \n     for (fs::directory_iterator it(gArgs.GetDataDirNet()); it != fs::directory_iterator(); it++) {\n-        if (fs::is_directory(*it) &&\n-            !fs::is_empty(*it) &&\n-            it->path().filename().string().length() == SNAPSHOT_NAME_LEN &&\n-            it->path().filename().string().substr(0,11) == \"chainstate_\")\n+        if (fs::is_directory(*it) && !fs::is_empty(*it) && IsPathSnapshotDatadir(it->path()))\n         {\n-            auto path = it->path();\n-            LogPrintf(\"[snapshot] detected active snapshot chainstate (%s) - loading\\n\", path);\n-            this->InitializeChainstate(\n-                &mempool, /*snapshot_blockhash*/ uint256S(path.filename().string().substr(11)));\n-            return true;\n+            if (found.empty()) {\n+                found = it->path();\n+                LogPrintf(\"[snapshot] found snapshot datadir %s\\n\", fs::PathToString(found));\n+            } else {\n+                LogPrintf(\"[snapshot] WARNING - detected multiple snapshot \" /* Continued */\n+                    \"datadirs (%s). This is not expected.\\n\", fs::PathToString(it->path()));\n+            }\n         }\n     }\n-    return false;\n+    return found.empty() ? std::nullopt : std::make_optional(found);\n+}\n+\n+bool ChainstateManager::DetectSnapshotChainstate(CTxMemPool& mempool)\n+{\n+    std::optional<fs::path> path = FindSnapshotChainstateDatadir();\n+    if (!path) {\n+        return false;\n+    }\n+    LogPrintf(\"[snapshot] detected active snapshot chainstate (%s) - loading\\n\",\n+        fs::PathToString(*path));\n+    this->InitializeChainstate(&mempool, /*snapshot_blockhash*/ PathToSnapshotHash(*path));\n+    return true;\n+}\n+\n+bool CChainState::TeardownSnapshotDatadir()\n+{\n+    if (!m_from_snapshot_blockhash) {\n+        // Chainstate isn't based on a snapshot.\n+        return false;\n+    }\n+    std::optional<fs::path> snapshot_datadir = FindSnapshotChainstateDatadir();\n+\n+    if (!snapshot_datadir) {\n+        return false;\n+    }\n+\n+    uint256 datadir_hash = PathToSnapshotHash(*snapshot_datadir);\n+\n+    if (datadir_hash != *m_from_snapshot_blockhash) {\n+        LogPrintf(\"[snapshot] WARNING - unexpected blockhash for snapshot datadir (%s); expected %s\\n\",\n+            datadir_hash.ToString(), m_from_snapshot_blockhash->ToString());\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] tearing down snapshot datadir %s\\n\", fs::PathToString(*snapshot_datadir));\n+    assert(fs::remove_all(*snapshot_datadir) > 0);\n+    return true;\n }\n \n void ChainstateManager::ValidatedSnapshotShutdownCleanup("
      },
      {
        "sha": "40bf1d4499d75fe08ab09272b12bfc5bdfe1e89c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/323b5e1a7646b907df9452a3bcfdd189aecf2ff0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/323b5e1a7646b907df9452a3bcfdd189aecf2ff0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
        "patch": "@@ -819,6 +819,13 @@ class CChainState\n     void UpdateTip(const CBlockIndex* pindexNew)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    /**\n+     * Remove the datadir for this chainstate if it was created from a snapshot.\n+     * Only used during snapshot activation (within ChainstateManager) if the loaded\n+     * snapshot does not validate.\n+     */\n+    bool TeardownSnapshotDatadir() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "db95831de6e440ff2b17a0678c4df1fbfa567b9b",
    "node_id": "C_kwDOABII59oAKGRiOTU4MzFkZTZlNDQwZmYyYjE3YTA2NzhjNGRmMWZiZmE1NjdiOWI",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-16T20:34:45Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:43Z"
      },
      "message": "validation: pruning for multiple chainstates\n\nIntroduces ChainstateManager::getPruneRange(). Under normal operation,\nwe aggressively prune the background chainstate since we do not expect\nor support reorgs. We will respect pruning beneath a manually specified\ntarget, though.",
      "tree": {
        "sha": "57323c87937ba33079716de6db8acea67cdddd33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57323c87937ba33079716de6db8acea67cdddd33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db95831de6e440ff2b17a0678c4df1fbfa567b9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3fcACgkQepNdrbLE\nTwXKLw/0Ct03fDqwQHmeM4NPCSZtNpwvjNUEFAxhu5HjBFisGmjszHpzaT8Qex5R\nN2zioaxf6KIYIu1y9oXN6bmbpgdpONS3k0Gx9VQ5wAtvefFffHRgIU2+6jEegmOJ\nJal0hJKOI4yZn1X9RZg+m7b9KzUHETmtFAqD4c2iCi0rG7gLMoOye2dN3RQI+QnQ\nmLEy5IqoV2N0qXD9U2y/53P4Pgwje4h5/dbAuhNXFq7Lac8beDR3XtqqJw5g9Sxf\nnqF4eCHIo/4iMaoZwx0T/m15YJQ2HRHR9P1nYhDJycjmGkjlL93VCa71wtgT0I7o\nBlULhN5k58Act0WOSOJdDF5c8J4Ii1XsC9qRBRXFtRi3iGJSF71UQdUyZMzAsaWk\npY7OdaimsHbWLqTDZhSozn0/OCG140CpCxzSvYkw5ed5L75CjeL784MfZl6xXeZQ\nIGp4y5GgSI2uhyTLIq7PlOH5TZ7bgU/io97Xz3AtZVT6rMNV2D9igN+Zy+ouD8iD\nWT/VLKkS8K+1zUgm30rSLXe74cDayA3xeXe/Kbk3A86OL55Zzvva9kzqyuXakF6y\n5xi8Mx5E8asFhCl+mSD6Fr9AXZAuid11xBjYeoYAOTLk1r/z/jsEakjWk7lp+GMw\ngox4mxF9Spy/vo95zqjqR4Fl+qaUOAqK4J5HbOwnZGmAbOOsvQ==\n=aYok\n-----END PGP SIGNATURE-----",
        "payload": "tree 57323c87937ba33079716de6db8acea67cdddd33\nparent 323b5e1a7646b907df9452a3bcfdd189aecf2ff0\nauthor James O'Beirne <james.obeirne@gmail.com> 1568666085 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490743 -0500\n\nvalidation: pruning for multiple chainstates\n\nIntroduces ChainstateManager::getPruneRange(). Under normal operation,\nwe aggressively prune the background chainstate since we do not expect\nor support reorgs. We will respect pruning beneath a manually specified\ntarget, though.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db95831de6e440ff2b17a0678c4df1fbfa567b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db95831de6e440ff2b17a0678c4df1fbfa567b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db95831de6e440ff2b17a0678c4df1fbfa567b9b/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323b5e1a7646b907df9452a3bcfdd189aecf2ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/323b5e1a7646b907df9452a3bcfdd189aecf2ff0"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 157,
      "deletions": 59
    },
    "files": [
      {
        "sha": "55e4323a21fc1767f8a8c3f5ab36afaad59f05d3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 132,
        "deletions": 57,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db95831de6e440ff2b17a0678c4df1fbfa567b9b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db95831de6e440ff2b17a0678c4df1fbfa567b9b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=db95831de6e440ff2b17a0678c4df1fbfa567b9b",
        "patch": "@@ -59,6 +59,7 @@\n #include <numeric>\n #include <optional>\n #include <string>\n+#include <tuple>\n \n #include <boost/algorithm/string/replace.hpp>\n \n@@ -1947,11 +1948,16 @@ bool CChainState::FlushStateToDisk(\n             if (nManualPruneHeight > 0) {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune (manual)\", BCLog::BENCH);\n \n-                m_blockman.FindFilesToPruneManual(setFilesToPrune, std::min(last_prune, nManualPruneHeight), m_chain.Height());\n+                m_blockman.FindFilesToPruneManual(\n+                    setFilesToPrune,\n+                    std::min(last_prune, nManualPruneHeight),\n+                    m_chain.Height(),\n+                    m_chainman);\n             } else {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune\", BCLog::BENCH);\n \n-                m_blockman.FindFilesToPrune(setFilesToPrune, m_params.PruneAfterHeight(), m_chain.Height(), last_prune, IsInitialBlockDownload());\n+                m_blockman.FindFilesToPrune(\n+                    setFilesToPrune, m_params.PruneAfterHeight(), last_prune, m_chainman);\n                 fCheckForPruning = false;\n             }\n             if (!setFilesToPrune.empty()) {\n@@ -3534,7 +3540,11 @@ void BlockManager::PruneOneBlockFile(const int fileNumber)\n     setDirtyFileInfo.insert(fileNumber);\n }\n \n-void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, int chain_tip_height)\n+void BlockManager::FindFilesToPruneManual(\n+    std::set<int>& setFilesToPrune,\n+    int nManualPruneHeight,\n+    int chain_tip_height,\n+    ChainstateManager& chainman)\n {\n     assert(fPruneMode && nManualPruneHeight > 0);\n \n@@ -3543,18 +3553,31 @@ void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nM\n         return;\n     }\n \n-    // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n-    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, chain_tip_height - MIN_BLOCKS_TO_KEEP);\n-    int count = 0;\n-    for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n-        if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune) {\n-            continue;\n+    for (CChainState* chainstate : chainman.GetAll()) {\n+        unsigned int start_height;\n+        unsigned int end_height;\n+        std::tie(start_height, end_height) = chainman.getPruneRange(\n+            chainstate,\n+            (unsigned)nManualPruneHeight,\n+            /* prune_background_fully */ false);\n+\n+        // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n+\n+        int count = 0;\n+        for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n+            // Only prune blockfiles that fall between the lower and upper height bounds.\n+            if (vinfoBlockFile[fileNumber].nSize == 0 ||\n+                    vinfoBlockFile[fileNumber].nHeightLast > end_height ||\n+                    vinfoBlockFile[fileNumber].nHeightFirst < start_height) {\n+                continue;\n+            }\n+            PruneOneBlockFile(fileNumber);\n+            setFilesToPrune.insert(fileNumber);\n+            count++;\n         }\n-        PruneOneBlockFile(fileNumber);\n-        setFilesToPrune.insert(fileNumber);\n-        count++;\n+        LogPrintf(\"Prune (Manual) (%s): prune_height=%d removed %d blk/rev pairs\\n\",\n+                  chainstate->ToString(), end_height, count);\n     }\n-    LogPrintf(\"Prune (Manual): prune_height=%d removed %d blk/rev pairs\\n\", nLastBlockWeCanPrune, count);\n }\n \n /* This function is called from the RPC code for pruneblockchain */\n@@ -3567,63 +3590,76 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n     }\n }\n \n-void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight, int chain_tip_height, int prune_height, bool is_ibd)\n+void BlockManager::FindFilesToPrune(\n+    std::set<int>& setFilesToPrune,\n+    uint64_t nPruneAfterHeight,\n+    int prune_height,\n+    ChainstateManager& chainman)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n-    if (chain_tip_height < 0 || nPruneTarget == 0) {\n-        return;\n-    }\n-    if ((uint64_t)chain_tip_height <= nPruneAfterHeight) {\n+    if (nPruneTarget == 0) {\n         return;\n     }\n \n-    unsigned int nLastBlockWeCanPrune = std::min(prune_height, chain_tip_height - static_cast<int>(MIN_BLOCKS_TO_KEEP));\n-    uint64_t nCurrentUsage = CalculateCurrentUsage();\n-    // We don't check to prune until after we've allocated new space for files\n-    // So we should leave a buffer under our target to account for another allocation\n-    // before the next pruning.\n-    uint64_t nBuffer = BLOCKFILE_CHUNK_SIZE + UNDOFILE_CHUNK_SIZE;\n-    uint64_t nBytesToPrune;\n-    int count = 0;\n+    for (CChainState* chainstate : chainman.GetAll()) {\n+        uint64_t height = chainstate->m_chain.Height();\n+        if (height <= nPruneAfterHeight) {\n+            continue; // no pruning necessary for this chainstate\n+        }\n+\n+        unsigned int start_height;\n+        unsigned int end_height;\n+        std::tie(start_height, end_height) = chainman.getPruneRange(chainstate, prune_height);\n+\n+        uint64_t nCurrentUsage = CalculateCurrentUsage();\n+        // We don't check to prune until after we've allocated new space for files\n+        // So we should leave a buffer under our target to account for another allocation\n+        // before the next pruning.\n+        uint64_t nBuffer = BLOCKFILE_CHUNK_SIZE + UNDOFILE_CHUNK_SIZE;\n+        uint64_t nBytesToPrune;\n+        int count=0;\n+\n+        if (nCurrentUsage + nBuffer >= nPruneTarget) {\n+            // On a prune event, the chainstate DB is flushed.\n+            // To avoid excessive prune events negating the benefit of high dbcache\n+            // values, we should not prune too rapidly.\n+            // So when pruning in IBD, increase the buffer a bit to avoid a re-prune too soon.\n+            if (chainstate->IsInitialBlockDownload()) {\n+                // Since this is only relevant during IBD, we use a fixed 10%\n+                nBuffer += nPruneTarget / 10;\n+            }\n \n-    if (nCurrentUsage + nBuffer >= nPruneTarget) {\n-        // On a prune event, the chainstate DB is flushed.\n-        // To avoid excessive prune events negating the benefit of high dbcache\n-        // values, we should not prune too rapidly.\n-        // So when pruning in IBD, increase the buffer a bit to avoid a re-prune too soon.\n-        if (is_ibd) {\n-            // Since this is only relevant during IBD, we use a fixed 10%\n-            nBuffer += nPruneTarget / 10;\n-        }\n+            for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n+                nBytesToPrune = vinfoBlockFile[fileNumber].nSize + vinfoBlockFile[fileNumber].nUndoSize;\n \n-        for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n-            nBytesToPrune = vinfoBlockFile[fileNumber].nSize + vinfoBlockFile[fileNumber].nUndoSize;\n+                if (vinfoBlockFile[fileNumber].nSize == 0)\n+                    continue;\n \n-            if (vinfoBlockFile[fileNumber].nSize == 0) {\n-                continue;\n-            }\n+                if (nCurrentUsage + nBuffer < nPruneTarget)  // are we below our target?\n+                    break;\n \n-            if (nCurrentUsage + nBuffer < nPruneTarget) { // are we below our target?\n-                break;\n-            }\n+                // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip but keep scanning\n+                if (vinfoBlockFile[fileNumber].nHeightLast > end_height)\n+                    continue;\n \n-            // don't prune files that could have a block within MIN_BLOCKS_TO_KEEP of the main chain's tip but keep scanning\n-            if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune) {\n-                continue;\n-            }\n+                // can't start pruning yet\n+                if (vinfoBlockFile[fileNumber].nHeightFirst < start_height) {\n+                    continue;\n+                }\n \n-            PruneOneBlockFile(fileNumber);\n-            // Queue up the files for removal\n-            setFilesToPrune.insert(fileNumber);\n-            nCurrentUsage -= nBytesToPrune;\n-            count++;\n+                PruneOneBlockFile(fileNumber);\n+                // Queue up the files for removal\n+                setFilesToPrune.insert(fileNumber);\n+                nCurrentUsage -= nBytesToPrune;\n+                count++;\n+            }\n         }\n-    }\n \n-    LogPrint(BCLog::PRUNE, \"Prune: target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\\n\",\n-           nPruneTarget/1024/1024, nCurrentUsage/1024/1024,\n-           ((int64_t)nPruneTarget - (int64_t)nCurrentUsage)/1024/1024,\n-           nLastBlockWeCanPrune, count);\n+        LogPrint(BCLog::PRUNE, \"Prune: (%s) target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\\n\",\n+               chainstate->ToString(), nPruneTarget/1024/1024, nCurrentUsage/1024/1024,\n+               ((int64_t)nPruneTarget - (int64_t)nCurrentUsage)/1024/1024,\n+               end_height, count);\n+    }\n }\n \n CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)\n@@ -5387,3 +5423,42 @@ void ChainstateManager::MaybeCompleteSnapshotValidation(\n         }\n     }\n }\n+\n+std::pair<unsigned int, unsigned int> ChainstateManager::getPruneRange(\n+    CChainState* chainstate,\n+    unsigned int prune_height,\n+    bool prune_background_fully)\n+{\n+    if (chainstate->m_chain.Height() < 0) {\n+        return {0, 0};\n+    }\n+    unsigned int chain_height{static_cast<unsigned int>(chainstate->m_chain.Height())};\n+    unsigned int prune_start{0};\n+    std::optional<int> snapshot_height{getSnapshotHeight()};\n+\n+    if (this->IsSnapshotValidated()) {\n+        // If we're using a snapshot and we've completed back validation, prune as normal.\n+        prune_start = 0;\n+    } else if (snapshot_height && chainstate == m_snapshot_chainstate.get()) {\n+        // Otherwise leave the blocks in the background IBD chain alone if we're pruning\n+        // the snapshot chain.\n+        prune_start = *snapshot_height;\n+    } else {\n+        // In all other cases, prune as normal.\n+        prune_start = 0;\n+    }\n+\n+    // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n+    unsigned int prune_end{std::min(prune_height, chain_height - MIN_BLOCKS_TO_KEEP)};\n+\n+    // For background chainstates, aggressively prune up to the latest block\n+    // since our prune allowance only applies to immediately behind the tip\n+    // (which lives on the active chain) and we don't support or expect reorgs\n+    // in the background chainstates anyway..\n+    if (chainstate != &this->ActiveChainstate()) {\n+        // TODO jamesob: is this an off-by-one?\n+        prune_end = prune_background_fully ? chain_height : std::min(prune_height, chain_height);\n+    }\n+\n+    return {prune_start, prune_end};\n+}"
      },
      {
        "sha": "c9c107e7eaa10c378a279a2ba0979e769748363a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db95831de6e440ff2b17a0678c4df1fbfa567b9b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db95831de6e440ff2b17a0678c4df1fbfa567b9b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=db95831de6e440ff2b17a0678c4df1fbfa567b9b",
        "patch": "@@ -377,7 +377,11 @@ class BlockManager\n \n private:\n     /* Calculate the block/rev files to delete based on height specified by user with RPC command pruneblockchain */\n-    void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, int chain_tip_height);\n+    void FindFilesToPruneManual(\n+        std::set<int>& setFilesToPrune,\n+        int nManualPruneHeight,\n+        int chain_tip_height,\n+        ChainstateManager& chainman);\n \n     /**\n      * Prune block and undo files (blk???.dat and undo???.dat) so that the disk space used is less than a user-defined target.\n@@ -394,7 +398,11 @@ class BlockManager\n      *\n      * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n      */\n-    void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight, int chain_tip_height, int prune_height, bool is_ibd);\n+    void FindFilesToPrune(\n+        std::set<int>& setFilesToPrune,\n+        uint64_t nPruneAfterHeight,\n+        int prune_height,\n+        ChainstateManager& chainman);\n \n public:\n     BlockMap m_block_index GUARDED_BY(cs_main);\n@@ -1093,6 +1101,21 @@ class ChainstateManager\n         CChainState* chainstate,\n         CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    //! Return the [start, end] (inclusive) of block heights we can prune.\n+    //!\n+    //! If we're pruning the snapshot chainstate, be sure not to\n+    //! step on the toes of the background validation by pruning blocks it\n+    //! might be currently using.\n+    //!\n+    //! @param[in]  prune_background_fully  if true, aggressively prune background\n+    //!                                     chainstates up to tip. Typically set to false\n+    //!                                     during manual pruning, when the user has specified a\n+    //!                                     height to prune underneath.\n+    std::pair<unsigned int, unsigned int> getPruneRange(\n+        CChainState* chainstate,\n+        unsigned int prune_height,\n+        bool prune_background_fully = true) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     ~ChainstateManager() {\n         LOCK(::cs_main);\n         UnloadBlockIndex(/* mempool */ nullptr, *this);"
      }
    ]
  },
  {
    "sha": "dbb45f794ca3713ea4cb1dde5755d82846f68960",
    "node_id": "C_kwDOABII59oAKGRiYjQ1Zjc5NGNhMzcxM2VhNGNiMWRkZTU3NTVkODI4NDZmNjg5NjA",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-16T20:43:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:46Z"
      },
      "message": "validation: run CheckBlockIndex on all chainstates during ProcessNewHeaders",
      "tree": {
        "sha": "b3a80e4bb81cab552aca9964cd41bdb2487f4e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3a80e4bb81cab552aca9964cd41bdb2487f4e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbb45f794ca3713ea4cb1dde5755d82846f68960",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3foACgkQepNdrbLE\nTwX5sRAAg1eIDVLb3L62kc7sEWGjv+2u4D2sMN1G6VBXfBQMuvlksu9PXg2z2UmU\nMDs0ZXOVJGlFR+pf2y5co+DbC1YphvEtxE1g7pymTbdcd1xrocOMgS1QBw0bmLqK\nAlIwG7lQxAg0sBRKEJwfn1tbI2CT7rk0VP6kfLLviGB/2SsBqa2c0nI2Dqe+Dmzx\nQBJnRvukQY0lcyk0bRU5+XUe6hc/dz+5VF8unuT+rtu+4Xp6ZvrnBn6Hwa5zUpSP\nEx3Pbpx1UoAPGL8gVVuvI6rVaRar+Rr68ah/g8ycw3s230HIwQ7dPwN8z5bN/Wo+\nBTTfzkFR9MOypduqoJX/ShjQ1lwX05RD5eBv3S5GVMLP/CCNGMJAbokbtXa++xJS\nwAOmTT5fI+czOZVIlEJfLBALRgzzqrJasED9OHi1YlUCz0QHgS0MqVTulfMB7//W\nPIE4Wfg/01lW3TVroC5djv6oPUGB1lsxLYsRjC8OG+xXFg2E6LgAAuKWyuica994\nBAh6EDgP7IEzcCMUjgPoublRSpy4G6SsLZkwWhh59lwShNqmSnIPa3dN0n0XOXqW\nhdkN92MsntW9T5sEoYaCRg2etJtbQUwf5VoLnP1wiR4DMAJL8hh/lKWsdacHQgXB\nyEFXwNR7Kti6qhW3V9A5PEDgVvNbHK9epj9m3Z+tVHCvK8mRX08=\n=vIO4\n-----END PGP SIGNATURE-----",
        "payload": "tree b3a80e4bb81cab552aca9964cd41bdb2487f4e8d\nparent db95831de6e440ff2b17a0678c4df1fbfa567b9b\nauthor James O'Beirne <james.obeirne@gmail.com> 1568666619 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490746 -0500\n\nvalidation: run CheckBlockIndex on all chainstates during ProcessNewHeaders\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb45f794ca3713ea4cb1dde5755d82846f68960",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb45f794ca3713ea4cb1dde5755d82846f68960",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb45f794ca3713ea4cb1dde5755d82846f68960/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db95831de6e440ff2b17a0678c4df1fbfa567b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db95831de6e440ff2b17a0678c4df1fbfa567b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db95831de6e440ff2b17a0678c4df1fbfa567b9b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a7827737bde5cea7e3328ac43ded42a13a2ea801",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb45f794ca3713ea4cb1dde5755d82846f68960/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb45f794ca3713ea4cb1dde5755d82846f68960/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dbb45f794ca3713ea4cb1dde5755d82846f68960",
        "patch": "@@ -3318,8 +3318,10 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             bool accepted = m_blockman.AcceptBlockHeader(\n                 header, state, chainparams, &pindex);\n-            ActiveChainstate().CheckBlockIndex();\n \n+            for (CChainState* chainstate : this->GetAll()) {\n+                chainstate->CheckBlockIndex();\n+            }\n             if (!accepted) {\n                 return false;\n             }"
      }
    ]
  },
  {
    "sha": "6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
    "node_id": "C_kwDOABII59oAKDY1NjJkYTRmNjc0MTQzMGQ3MmRlYzBmYmRiMGFkZjdkMjZlN2Q1MmE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-03T14:59:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:47Z"
      },
      "message": "chainparams: add assumeutxo param at height 685000",
      "tree": {
        "sha": "33d1cb7fe7fa40bfbcb3d579cf16c6abcc1ede43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33d1cb7fe7fa40bfbcb3d579cf16c6abcc1ede43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3fsACgkQepNdrbLE\nTwWU6Q//XsiC+9v5YiF8+INTKH4zznA+XBZXhBaOHziH0wE76kXwdcmoMHqGn0WA\ni9/0giNJsVxlV+Lw/qx+0NMIoDuOBEFFO8u/YX2LWv8fCFNMzT1HNaHE0U2l7cJ0\nR7UqEEt7Ak146Fr/5kxyooCgv6D6p1qfiwoGo+rZvixnh/XCkWCdxGhT6XBz3eWl\nVrQXkwjECXgTLoGuHyEFoG0OMKeNtW5Vz9T1RHOhc0KelO4ozBeAtXCMMcXoXbal\ngRrpKPELbVIVdISzARf+RnWxcen4SGxhQecr49x3gL89l+B5wHmTodhmsxKuupj2\nMCpTxy1pgei805NR7kH2vONzeUA39k3CujSE6l/IkwhMlmAClwRbbbhzRezMQvvO\nVkFjX9VDcLWIlobQ4pavP05XqfMg4qxd0GIq3hKWg205kAFhW7UvsJD4WraGr2Nb\nevMaoz2ayP+qLjHmo+mYYsGFyYfwWt3Ri4NPrD3eD9/2wcc7WZPJ69R8MQVmsllj\nWnB80loIQwCfsubvDJLZ4DAZGJYc5eUwinRVfZX0l6p0Ca+/Hf14f6YBY9e66YAZ\n/VEl5kWFag5B52eSp/7RZ5GDE0oJzza7KJ+M4xfyj+ArN/0ylA+3gT8O99NIK7g3\nv2OQjfiHKQx8wCTlb4/xAb0X7sFPH2g7Ub3e98K5DLfQmlfBigs=\n=ipe8\n-----END PGP SIGNATURE-----",
        "payload": "tree 33d1cb7fe7fa40bfbcb3d579cf16c6abcc1ede43\nparent dbb45f794ca3713ea4cb1dde5755d82846f68960\nauthor James O'Beirne <james.obeirne@pm.me> 1622732353 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490747 -0500\n\nchainparams: add assumeutxo param at height 685000\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6562da4f6741430d72dec0fbdb0adf7d26e7d52a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbb45f794ca3713ea4cb1dde5755d82846f68960",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb45f794ca3713ea4cb1dde5755d82846f68960",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb45f794ca3713ea4cb1dde5755d82846f68960"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "90e48da191551e2e6b7f2915fcb469b75723a712",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6562da4f6741430d72dec0fbdb0adf7d26e7d52a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6562da4f6741430d72dec0fbdb0adf7d26e7d52a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
        "patch": "@@ -162,7 +162,10 @@ class CMainParams : public CChainParams {\n         };\n \n         m_assumeutxo_data = MapAssumeutxo{\n-         // TODO to be specified in a future patch.\n+            {\n+                685000,\n+                {AssumeutxoHash{uint256S(\"0xa85dd26a5ca449d76bc7cb6103960a2894475f11acef57efb77d833ca84d0ed3\")}, 644907744},\n+            },\n         };\n \n         chainTxData = ChainTxData{"
      }
    ]
  },
  {
    "sha": "97f78030f0ec7577a427b20eb4f17b548b51e053",
    "node_id": "C_kwDOABII59oAKDk3Zjc4MDMwZjBlYzc1NzdhNDI3YjIwZWI0ZjE3YjU0OGI1MWUwNTM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-07T16:42:53Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:48Z"
      },
      "message": "validation: remove outdated assertion in chainstate init\n\nTODO explain why we included this in the first place and why it\nis safe/necessary to remove",
      "tree": {
        "sha": "ec8b959cf969aa913609b661bfdf32ba402f1e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec8b959cf969aa913609b661bfdf32ba402f1e0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97f78030f0ec7577a427b20eb4f17b548b51e053",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3fwACgkQepNdrbLE\nTwWCOQ/+OEmY3pK9O9Rapo5kW8L2S8g7EoT1rmfQWNTUC60f2nOVFGQKbWji5ZVw\ntqhDTEEge/zc34couFdn6s5cSAV4z6Sqvst8pJK982FbfsnF5WKdLdM5aCp8o9Qg\n/+laTcg623M2bVnhMw+vik1k/QpE7SDZYhNUCTHMvRUqwbVA6oNwWM5lC+lo9w2D\nDXLARdrUtcnBZ9NWNnl6rBK8Bz0GHc0eOTlJIJxASSPz152CissqgNjzriCDAKkL\nM6/KocN8Ne2PFx2PHel0Bmdh3djU6Bci10zBF2umF/WKWbnIleoWRVM3z6ZSbtMT\nuN/UqNIR4ZzRiawLiAbsyGNa19eHga90SxNXcEEbIg7v2bDTAiulhUWpBEvEj/0o\nZ13sJ6u7jP0flGObvqCNlOPlijK6V0Rc3fj/EfoaMNAcLVw9c+r7ummfXJBxaovP\nDSfbCa9OrvsPmHuI9KrMqLg06KkixlivX1UDDiddoFLLBR9hsNZoosOldpSUnkrJ\n42BfoYPnlES8rb/LxcQB/N8QFNZf/M9UTPv1+cXtQWWRHI4+bZyVHfZ6Afz6DrnZ\n0uOfQPQ4TZANL18tfsJevRKpAiapxYUBybrkP7PBnFwXr07SyA7qRXjLWnIrgZcA\nLI5frbQm8X891nk2kyG4lOB++w1nzJcLwniv9fiKZa0pbLgxpto=\n=M2jg\n-----END PGP SIGNATURE-----",
        "payload": "tree ec8b959cf969aa913609b661bfdf32ba402f1e0a\nparent 6562da4f6741430d72dec0fbdb0adf7d26e7d52a\nauthor James O'Beirne <james.obeirne@pm.me> 1623084173 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490748 -0500\n\nvalidation: remove outdated assertion in chainstate init\n\nTODO explain why we included this in the first place and why it\nis safe/necessary to remove\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f78030f0ec7577a427b20eb4f17b548b51e053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97f78030f0ec7577a427b20eb4f17b548b51e053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f78030f0ec7577a427b20eb4f17b548b51e053/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6562da4f6741430d72dec0fbdb0adf7d26e7d52a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6562da4f6741430d72dec0fbdb0adf7d26e7d52a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cff9ef697c37a809e8f98a619db577ec256b671a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97f78030f0ec7577a427b20eb4f17b548b51e053/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97f78030f0ec7577a427b20eb4f17b548b51e053/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=97f78030f0ec7577a427b20eb4f17b548b51e053",
        "patch": "@@ -4780,8 +4780,6 @@ CChainState& ChainstateManager::InitializeChainstate(\n     if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n         LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n         m_active_chainstate = to_modify.get();\n-    } else {\n-        throw std::logic_error(\"unexpected chainstate activation\");\n     }\n \n     return *to_modify;"
      }
    ]
  },
  {
    "sha": "3a4fdde634193b4b5a7217b7b5e165352ef7f863",
    "node_id": "C_kwDOABII59oAKDNhNGZkZGU2MzQxOTNiNGI1YTcyMTdiN2I1ZTE2NTM1MmVmN2Y4NjM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T19:31:54Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:49Z"
      },
      "message": "rpc: add loadtxoutset",
      "tree": {
        "sha": "cbb0529ee91b294a386ff36ddd1d80354d0041a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbb0529ee91b294a386ff36ddd1d80354d0041a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4fdde634193b4b5a7217b7b5e165352ef7f863",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3f0ACgkQepNdrbLE\nTwUcKA/+KviUOwG09ubMqdEpvBz+8ikjRf9mHItC2g34I0Mc7Jlx0PaZWZrD3O1H\nMs0njfZ6uyvbDeRXCV1cWaj5EL1DtJNZ4FXgbYH644EdMdSUV2Vy+7R+OKSPELRU\nnYajv8XemxpEMrNsHX+GGKJa3lyKRslhy1NTPM16LutwxEY+YJV1DUUkFyEIWoAQ\nKke/Pgzr5UJde/pqM9enlTcoaeWxUn4fy7wg2F//XEJb4wgjtj34mPv4uJJGptan\nooXSyZw8zuwy+YJ4iTqlcoj21ibvAXmwcf8ZQsYFsQzqE6xVP4us2Qk0yragy0ro\nj1Y2vzwVD4dSRYMuHgYVGH+/ikcygOFaP3MBbQ2JhyWoB0Aj3e5o6LYK/sE1ByKq\n1OYj3lHr5ZcnJCrp0JODEmEAgvk6ktEZY5XYVZ98JX87piKsPFhTl1lxUrsKS9B8\npS1NaKDMOPV6a6yZzgs/ueHIEDN+BLI2HgUeq4FSyIdNo9yegQRrN4cMuEiEQnrU\nM18AOuTchQIBfqim6m1WYjr7JPEmRiA9os55LVYIbAuUHQQ6A8aLf0UZWZJnh6GB\nwfF9x1k+XknNSrYftNQwimFmeGXs23HyZhjP7FygMb49JT/WWuYX4ffu0HsS6LSa\nLyFjFpTbUomIy3MX5GraUDs72J/YfksTDFNoZ/zl2HpiIL9fP3k=\n=+vJD\n-----END PGP SIGNATURE-----",
        "payload": "tree cbb0529ee91b294a386ff36ddd1d80354d0041a5\nparent 97f78030f0ec7577a427b20eb4f17b548b51e053\nauthor James O'Beirne <james.obeirne@gmail.com> 1553887914 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490749 -0500\n\nrpc: add loadtxoutset\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4fdde634193b4b5a7217b7b5e165352ef7f863",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4fdde634193b4b5a7217b7b5e165352ef7f863",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4fdde634193b4b5a7217b7b5e165352ef7f863/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97f78030f0ec7577a427b20eb4f17b548b51e053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f78030f0ec7577a427b20eb4f17b548b51e053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97f78030f0ec7577a427b20eb4f17b548b51e053"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 89,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0dfb00197667690fde903c625de4846300cf176c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4fdde634193b4b5a7217b7b5e165352ef7f863/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4fdde634193b4b5a7217b7b5e165352ef7f863/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3a4fdde634193b4b5a7217b7b5e165352ef7f863",
        "patch": "@@ -2655,6 +2655,93 @@ UniValue CreateUTXOSnapshot(\n     return result;\n }\n \n+static RPCHelpMan loadtxoutset()\n+{\n+    return RPCHelpMan{\n+        \"loadtxoutset\",\n+        \"\\nLoad the serialized UTXO set from disk.\\n\",\n+        {\n+            {\"path\",\n+                RPCArg::Type::STR,\n+                RPCArg::Optional::NO,\n+                /* default_val */ \"\",\n+                \"path to the snapshot file. If relative, will be prefixed by datadir.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::NUM, \"coins_loaded\", \"the number of coins loaded by the snapshot\"},\n+                    {RPCResult::Type::STR_HEX, \"tip_hash\", \"the hash of the new tip\"},\n+                    {RPCResult::Type::NUM, \"tip_height\", \"the height of the new chain\"},\n+                    {RPCResult::Type::STR, \"path\", \"the absolute path that the snapshot was loaded from\"},\n+                }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"loadtxoutset\", \"utxo.dat\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    fs::path path = fs::PathFromString(request.params[0].get_str());\n+    if (path.is_relative()) {\n+        path = fs::absolute(path, gArgs.GetDataDirNet());\n+    }\n+    FILE* file{fsbridge::fopen(path, \"rb\")};\n+    CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    afile >> metadata;\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    LogPrintf(\"[snapshot] waiting to see blockheader %s in headers chain before snapshot activation\\n\",\n+        base_blockhash.ToString());\n+\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = *node.chainman;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        {\n+            LOCK(cs_main);\n+            snapshot_start_block = chainman.m_blockman.LookupBlockIndex(base_blockhash);\n+        }\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        throw JSONRPCError(\n+            RPC_INTERNAL_ERROR,\n+            \"Timed out waiting for base block header to appear in headers chain\");\n+    }\n+\n+    // TODO jamesob: no real need to lock cs_main here, but during testing it makes it\n+    // easier to follow the logs. We may want to remove this before merge.\n+    //\n+    LOCK(::cs_main);\n+\n+    if (!chainman.ActivateSnapshot(afile, metadata, false)) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to load UTXO snapshot \" + fs::PathToString(path));\n+    }\n+    CBlockIndex* new_tip{chainman.ActiveTip()};\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"coins_loaded\", metadata.m_coins_count);\n+    result.pushKV(\"tip_hash\", new_tip->GetBlockHash().ToString());\n+    result.pushKV(\"base_height\", new_tip->nHeight);\n+    result.pushKV(\"path\", fs::PathToString(path));\n+    return result;\n+},\n+    };\n+}\n+\n void RegisterBlockchainRPCCommands(CRPCTable &t)\n {\n // clang-format off\n@@ -2694,6 +2781,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",              &waitforblockheight,                },\n     { \"hidden\",              &syncwithvalidationinterfacequeue,  },\n     { \"hidden\",              &dumptxoutset,                      },\n+    { \"hidden\",              &loadtxoutset,                      },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "6c176daa2a984b0fabe1cb579e942087045a1734",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4fdde634193b4b5a7217b7b5e165352ef7f863/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4fdde634193b4b5a7217b7b5e165352ef7f863/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=3a4fdde634193b4b5a7217b7b5e165352ef7f863",
        "patch": "@@ -74,6 +74,7 @@ const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n     \"generatetodescriptor\", // avoid prohibitively slow execution (when `nblocks` is large)\n     \"gettxoutproof\",        // avoid prohibitively slow execution\n     \"importwallet\", // avoid reading from disk\n+    \"loadtxoutset\",   // avoid reading from disk\n     \"loadwallet\",   // avoid reading from disk\n     \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n     \"savemempool\",           // disabled as a precautionary measure: may take a file path argument in the future"
      }
    ]
  },
  {
    "sha": "66600694b5773a0943ce2d92346577703b33e581",
    "node_id": "C_kwDOABII59oAKDY2NjAwNjk0YjU3NzNhMDk0M2NlMmQ5MjM0NjU3NzcwM2IzM2U1ODE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-03-29T21:55:08Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:50Z"
      },
      "message": "rpc: add monitorsnapshot",
      "tree": {
        "sha": "16ac1b907c16c64abc5f14c3d16e32c49025ccba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16ac1b907c16c64abc5f14c3d16e32c49025ccba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66600694b5773a0943ce2d92346577703b33e581",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3f4ACgkQepNdrbLE\nTwXFZQ/+PEo+CJUAMqeLxDeSUw6l16IxmeqyTv6saFkrGrUaGqThErsKjb5xPpGc\n5xNvfL8LPrXsSJxGDPW2zMhKRxdmcjiPH80PV7BmjNNfICdaZRn7NDPlQ5yRD3t3\nTQcc/CkRN6NdnpKl5vgsy1nu5mZP7r+ZF0ov2Gt8K7USHn/iE+LjZ7RBAp8l8yMN\nkSZffzDR78cfNQkIPy2z6aDY9iK/vJ38ZuuCs93danDh+oVfwSK3gqujUNxEk8nT\nviJwRD+VNQrQz4PiLJG9ecEgq2+6u0xpKnjAktIHNN59w3DVJ0dTt1PaYujmauIv\nCICNmdum+9rvLCke8LAQOwa5CEyXRlSyQpvB2cJl3PUb4Z2c6JOkNj/AuTxJbnse\nXWnBsp10zs6/LoK/5AOYlziG8hYSV0Q9IY1fGVMz+pY+5R/n2l7VLoNgDMQGPCNK\n9lqaBDUhROOj5rBr0eAaMsxEIEdk/2r2w6q8IDQSfwFqzPbqfziZGpbCC98Aqqzp\nWvJqKSS0m3143KAmINkTQVmDGFOt9zNWIlW6hsIWt+eEyMNuWIzF4KdcKwnDLq9O\nRriU5OlD6T3TnL5s2x7cvtK136X8sqefUcq9JkbR2PK8gyQVDz3ORgeGLGkoVWgC\nn23irGv/wRipVkmtJ3B/ThH5C2FDLz+8kySCdx2QyFpEcPl+tJc=\n=thmg\n-----END PGP SIGNATURE-----",
        "payload": "tree 16ac1b907c16c64abc5f14c3d16e32c49025ccba\nparent 3a4fdde634193b4b5a7217b7b5e165352ef7f863\nauthor James O'Beirne <james.obeirne@gmail.com> 1553896508 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490750 -0500\n\nrpc: add monitorsnapshot\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66600694b5773a0943ce2d92346577703b33e581",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66600694b5773a0943ce2d92346577703b33e581",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66600694b5773a0943ce2d92346577703b33e581/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a4fdde634193b4b5a7217b7b5e165352ef7f863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4fdde634193b4b5a7217b7b5e165352ef7f863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4fdde634193b4b5a7217b7b5e165352ef7f863"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "86da7bc7990f324f03935398924e99958d3250da",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66600694b5773a0943ce2d92346577703b33e581/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66600694b5773a0943ce2d92346577703b33e581/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=66600694b5773a0943ce2d92346577703b33e581",
        "patch": "@@ -2742,6 +2742,71 @@ static RPCHelpMan loadtxoutset()\n     };\n }\n \n+static RPCHelpMan monitorsnapshot()\n+{\n+return RPCHelpMan{\n+        \"monitorsnapshot\",\n+        \"\\nReturn information about UTXO snapshot status.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"x\", \"x\",\n+                {\n+                    {RPCResult::Type::NUM, \"headers\", \"the number of headers we've seen\"},\n+                    {RPCResult::Type::STR, \"active_chain_type\", \"whether active chain is ibd or snapshot\"},\n+                }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"monitorsnapshot\", \"\")\n+    + HelpExampleRpc(\"monitorsnapshot\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    LOCK(cs_main);\n+    UniValue obj(UniValue::VOBJ);\n+\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = *node.chainman;\n+\n+    auto make_chain_data = [](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        AssertLockHeld(::cs_main);\n+        UniValue data(UniValue::VOBJ);\n+        if (!cs || !cs->m_chain.Tip()) {\n+            return data;\n+        }\n+        const CChain& chain = cs->m_chain;\n+        const CBlockIndex* tip = chain.Tip();\n+\n+        data.pushKV(\"blocks\",                (int)chain.Height());\n+        data.pushKV(\"bestblockhash\",         tip->GetBlockHash().GetHex());\n+        data.pushKV(\"difficulty\",            (double)GetDifficulty(tip));\n+        data.pushKV(\"mediantime\",            (int64_t)tip->GetMedianTimePast());\n+        data.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), tip));\n+        data.pushKV(\"snapshot_blockhash\",    cs->m_from_snapshot_blockhash.value_or(uint256{}).ToString());\n+        data.pushKV(\"initialblockdownload\",  cs->IsInitialBlockDownload());\n+        return data;\n+    };\n+\n+    auto get_chain_type = [&chainman](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        AssertLockHeld(::cs_main);\n+        if (cs->m_from_snapshot_blockhash) {\n+            return (chainman.IsSnapshotValidated() ? \"validated_snapshot\" : \"snapshot\");\n+        }\n+        return \"ibd\";\n+    };\n+\n+    obj.pushKV(\"active_chain_type\", get_chain_type(&chainman.ActiveChainstate()));\n+\n+    for (CChainState* chainstate : chainman.GetAll()) {\n+        obj.pushKV(get_chain_type(chainstate), make_chain_data(chainstate));\n+    }\n+    obj.pushKV(\"headers\", pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+\n+    return obj;\n+}\n+    };\n+}\n+\n+\n void RegisterBlockchainRPCCommands(CRPCTable &t)\n {\n // clang-format off\n@@ -2782,6 +2847,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",              &syncwithvalidationinterfacequeue,  },\n     { \"hidden\",              &dumptxoutset,                      },\n     { \"hidden\",              &loadtxoutset,                      },\n+    { \"hidden\",              &monitorsnapshot,                   },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "a59a171b3d3ca4a0fe90d5e5809e7650aae6d096",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66600694b5773a0943ce2d92346577703b33e581/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66600694b5773a0943ce2d92346577703b33e581/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=66600694b5773a0943ce2d92346577703b33e581",
        "patch": "@@ -141,6 +141,7 @@ const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n     \"listbanned\",\n     \"logging\",\n     \"mockscheduler\",\n+    \"monitorsnapshot\",\n     \"ping\",\n     \"preciousblock\",\n     \"pruneblockchain\","
      }
    ]
  },
  {
    "sha": "65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
    "node_id": "C_kwDOABII59oAKDY1ZGQxZWNmMDViZDMyMDdkZGNmMDA4NmUxYTc1ZWFkOWQwN2QwYmM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-17T20:09:38Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:51Z"
      },
      "message": "test: add feature_assumeutxo functional test",
      "tree": {
        "sha": "1449a49ae79f2a7fa54e78f1e2412fd1b7569d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1449a49ae79f2a7fa54e78f1e2412fd1b7569d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3f8ACgkQepNdrbLE\nTwXZkQ//RJYySLBoo+jMOuq7HqtmZfJLrFWJ1fSgscsNgOcPQKeMxcpUqZFD+SNR\nvTF6zTTyz43nh28d8IHh9BoExzSEI6TahVAPbyiCn/NEye/mQf2Xftw5SoFhlyZn\nCIMhnzY+MZ4ezfNJR05hJ2z2XUuaQVNfEpAQoXNXfXHEHsU5v7/nYC7B+KCZ2MoB\nqWhEf606gliwKO7DaAi9XaxlMukFOVv8WS/+v9GITIyfME5wYMVBIdaEuELFJDQS\n85tbRB2an1Y0N1M1AlzhvpoD3JDnJwS+PcUE11cP9azWum7ETtXFVnqkFehccV0Z\nmUJpP8DSq9HziOH+mswiLyzUA2OPW2Mh97K0srC7CLILR8PIuDpm5j9pz/jl3IQb\nUjp9y3iNkDBRO763q72za3NUug3EZRaKnj2aGjhHK4VWgufN8cISWWMKlRJmFyuW\ndW8/SpXl2IGME4wrEjPLMVftSXAWgDTbNvjpn0E208bJmIlaWRYaCs12w1nFpZQR\nXsnxvlGggEBs12UwKEQHTg9UKWmjx4MsS9ta6o/XiOpjKwhKqSqNwlZh4cnb9Dm0\nB4h3ofbzHiAsvJjBQs6zgIFxPp8Q2WnseW+scnHC37Y9riRWGZmBPh0z57e5JQZ9\nRqap5iWEd7Q5d27SaPjp0wKCa1zXnkgl0NGFBebcKw/JMe2v6AU=\n=0ftC\n-----END PGP SIGNATURE-----",
        "payload": "tree 1449a49ae79f2a7fa54e78f1e2412fd1b7569d4c\nparent 66600694b5773a0943ce2d92346577703b33e581\nauthor James O'Beirne <james.obeirne@pm.me> 1623960578 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490751 -0500\n\ntest: add feature_assumeutxo functional test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66600694b5773a0943ce2d92346577703b33e581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66600694b5773a0943ce2d92346577703b33e581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66600694b5773a0943ce2d92346577703b33e581"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 135,
      "deletions": 0
    },
    "files": [
      {
        "sha": "998ba32baf51c327ca127425df05010533478f38",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
        "patch": "@@ -463,6 +463,11 @@ class CRegTestParams : public CChainParams {\n                 200,\n                 {AssumeutxoHash{uint256S(\"0x51c8d11d8b5c1de51543c579736e786aa2736206d1e11e627568029ce092cf62\")}, 200},\n             },\n+            {\n+                // For use by test/functional/feature_assumeutxo.py\n+                299,\n+                {AssumeutxoHash{uint256S(\"0xb58bd896c7eb420f61d1a6f40a0cdee43853992fcb820a6f854ccc9db95b3e5e\")}, 300},\n+            }\n         };\n \n         chainTxData = ChainTxData{"
      },
      {
        "sha": "a71f0d0ab055b602fd9ac3bc274070712418ae43",
        "filename": "test/functional/feature_assumeutxo.py",
        "status": "added",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/test/functional/feature_assumeutxo.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/test/functional/feature_assumeutxo.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumeutxo.py?ref=65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
        "patch": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test for assumeutxo, a means of quickly bootstrapping a node using\n+a serialized version of the UTXO set at a certain height, which corresponds\n+to a hash that has been compiled into bitcoind.\n+\n+The assumeutxo value generated and used here is committed to in\n+`CRegTestParams::m_assumeutxo_data` in `src/chainparams.cpp`.\n+\"\"\"\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, wait_until_helper\n+\n+\n+class AssumeutxoTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        \"\"\"Use the pregenerated, deterministic chain up to height 199.\"\"\"\n+        self.num_nodes = 2\n+        self.rpc_timeout = 120\n+\n+    def setup_network(self):\n+        \"\"\"Start with the nodes disconnected so that one can generate a snapshot\n+        including blocks the other hasn't yet seen.\"\"\"\n+        self.add_nodes(2)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        \"\"\"\n+        Bring up two (disconnected) nodes, mine some new blocks on the first,\n+        and generate a UTXO snapshot.\n+\n+        Load the snapshot into the second, ensure it syncs to tip and completes\n+        background validation when connected to the first.\n+        \"\"\"\n+        n1 = self.nodes[0]\n+        n2 = self.nodes[1]\n+\n+        START_HEIGHT = 199\n+        SNAPSHOT_BASE_HEIGHT = 299\n+        FINAL_HEIGHT = 399\n+\n+        # Mock time for a deterministic chain\n+        for n in self.nodes:\n+            n.setmocktime(n.getblockheader(n.getbestblockhash())['time'])\n+\n+        self.sync_blocks()\n+\n+        # Generate a series of blocks that `n1` will have in the snapshot,\n+        # but that n2 doesn't yet see. In order for the snapshot to activate,\n+        # though, we have to ferry over the new headers to n2 so that it\n+        # isn't waiting forever to see the header of the snapshot's base block\n+        # while disconnected from n1.\n+        for i in range(100):\n+            n1.generatetoaddress(\n+                nblocks=1,\n+                address=ADDRESS_BCRT1_P2WSH_OP_TRUE,\n+            )\n+            newblock = n1.getblock(n1.getbestblockhash(), 0)\n+\n+            # make n2 aware of the new header, but don't give it the block.\n+            n2.submitheader(newblock)\n+\n+        # Ensure everyone is seeing the same headers.\n+        for n in self.nodes:\n+            assert_equal(n.getblockchaininfo()[\"headers\"], SNAPSHOT_BASE_HEIGHT)\n+\n+        assert_equal(n1.getblockcount(), SNAPSHOT_BASE_HEIGHT)\n+        assert_equal(n2.getblockcount(), START_HEIGHT)\n+\n+        self.log.info(f\"Creating a UTXO snapshot at height {SNAPSHOT_BASE_HEIGHT}\")\n+        dump_output = n1.dumptxoutset('utxos.dat')\n+\n+        assert_equal(\n+            dump_output['assumeutxo'],\n+            'b58bd896c7eb420f61d1a6f40a0cdee43853992fcb820a6f854ccc9db95b3e5e')\n+        assert_equal(dump_output['nchaintx'], 300)\n+        assert_equal(n1.getblockchaininfo()[\"blocks\"], SNAPSHOT_BASE_HEIGHT)\n+\n+        # Mine more blocks on top of the snapshot that n2 hasn't yet seen. This\n+        # will allow us to test n2's sync-to-tip on top of a snapshot.\n+        n1.generatetoaddress(\n+            nblocks=100,\n+            address=ADDRESS_BCRT1_P2WSH_OP_TRUE,\n+        )\n+\n+        assert_equal(n1.getblockcount(), FINAL_HEIGHT)\n+        assert_equal(n2.getblockcount(), START_HEIGHT)\n+\n+        assert_equal(n1.getblockchaininfo()[\"blocks\"], FINAL_HEIGHT)\n+\n+        self.log.info(f\"Loading snapshot into second node from {dump_output['path']}\")\n+        loaded = n2.loadtxoutset(dump_output['path'])\n+        assert_equal(loaded['coins_loaded'], SNAPSHOT_BASE_HEIGHT)\n+        assert_equal(loaded['base_height'], SNAPSHOT_BASE_HEIGHT)\n+\n+        monitor = n2.monitorsnapshot()\n+        assert_equal(monitor['ibd']['blocks'], START_HEIGHT)\n+        assert_equal(monitor['snapshot']['blocks'], SNAPSHOT_BASE_HEIGHT)\n+        assert_equal(monitor['snapshot']['snapshot_blockhash'], dump_output['base_hash'])\n+\n+        assert_equal(n2.getblockchaininfo()[\"blocks\"], SNAPSHOT_BASE_HEIGHT)\n+\n+        # Finally connect the nodes and let them sync.\n+        self.connect_nodes(0, 1)\n+\n+        self.log.info(f\"Ensuring snapshot chain syncs to tip.({FINAL_HEIGHT})\")\n+        wait_until_helper(lambda: n2.monitorsnapshot()['snapshot']['blocks'] == FINAL_HEIGHT)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Ensuring background validation completes\")\n+        # N.B.: the `ibd` key disappears once the background validation is complete.\n+        wait_until_helper(lambda: not n2.monitorsnapshot().get('ibd'))\n+\n+        for i, n in enumerate(self.nodes):\n+            self.log.info(f\"Restarting node {i} to ensure (Check|Load)BlockIndex passes\")\n+            self.restart_node(i)\n+\n+            assert_equal(n.getblockchaininfo()[\"blocks\"], FINAL_HEIGHT)\n+\n+            # Both chains should appear as \"ibd\"; i.e. fully validated.\n+            assert_equal(n.monitorsnapshot()['ibd']['blocks'], FINAL_HEIGHT)\n+            assert_equal(n.monitorsnapshot().get('snapshot'), None)\n+\n+\n+if __name__ == '__main__':\n+    AssumeutxoTest().main()"
      },
      {
        "sha": "f29cde5fc9b01fe0a2be4f29672383df9e296d84",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
        "patch": "@@ -281,6 +281,7 @@\n     'wallet_coinbase_category.py --descriptors',\n     'feature_filelock.py',\n     'feature_loadblock.py',\n+    'feature_assumeutxo.py',\n     'p2p_dos_header_tree.py',\n     'p2p_add_connections.py',\n     'p2p_unrequested_blocks.py',"
      }
    ]
  },
  {
    "sha": "a952553338764b652964a82cbea120b322a51466",
    "node_id": "C_kwDOABII59oAKGE5NTI1NTMzMzg3NjRiNjUyOTY0YTgyY2JlYTEyMGIzMjJhNTE0NjY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-06-16T16:09:29Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:52Z"
      },
      "message": "contrib: add script to demo/test assumeutxo",
      "tree": {
        "sha": "5a2ea7988c6f786285875bb673706cd77e8a6c1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a2ea7988c6f786285875bb673706cd77e8a6c1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a952553338764b652964a82cbea120b322a51466",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3gAACgkQepNdrbLE\nTwXtOg//Sl1UiUmJL1KFNWks3VbPuHaddIiam3fdbvtPD//kZ+SouBupiUhxR0Xd\nmdsyjHVzVeMiNLGKPybqEF1guIvUc8KuNwhWoyqZzLPBiv4AM1rBLuOYO9FhCzzO\nhplwglpxyQGSvy9n1E5oXS06fOs5fz6GADT3GBim2BaUhrAHHPWLkUuENN3qRi5K\n6NU64DRXf23YFj8Cw6eTGc/MrYy84+78yps33Y9Rf/e4QYIbj04c73y4biIwKeuP\nRJDfBV2tId1QbnhHEtsbsUIairhT/GddnHLRDla82dJat9Rk2kl6BJqjFjEoGuHN\njAbqfujH2avGVNxQEWqcU2xRF646kFpD5t9qAsrBMxNH6Lk7vN8TPHV3q77+ykmI\nmQy4GfS/U3ViJNJ+YTGim06/q6i/4XqF4oPCOwF+tPuIznbSkzF5hWoYUnrsO0Tu\nH5VCzhPkBsTOS/+eD7r71FElGCpQkxFYJBVqqEqyp+RGjDYkw2hH+2uZIZTsaQOS\nLchM2SAnvQGf3yRz/0F/x8vqo7v1bPy5zz+E3RXgmKysXr6u/iBccVRJQepWo/9l\nfibbMAzQQrspixjbukhqR651Ow8B7PCc8t7SMZPMe+iSqDoCnRZPRb9sk10M3gWA\nPwSktlujjAQUnQ2evIttGhgIe1ZOnqbgMEvNdl7GKs1mGBRCgCc=\n=jCJs\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a2ea7988c6f786285875bb673706cd77e8a6c1a\nparent 65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc\nauthor James O'Beirne <james.obeirne@pm.me> 1623859769 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490752 -0500\n\ncontrib: add script to demo/test assumeutxo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a952553338764b652964a82cbea120b322a51466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a952553338764b652964a82cbea120b322a51466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a952553338764b652964a82cbea120b322a51466/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65dd1ecf05bd3207ddcf0086e1a75ead9d07d0bc"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 186,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d8d2b7d60b1f4320e4533369e89ba68d1b9d53b6",
        "filename": "contrib/devtools/test_utxo_snapshots.sh",
        "status": "added",
        "additions": 186,
        "deletions": 0,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a952553338764b652964a82cbea120b322a51466/contrib/devtools/test_utxo_snapshots.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a952553338764b652964a82cbea120b322a51466/contrib/devtools/test_utxo_snapshots.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_utxo_snapshots.sh?ref=a952553338764b652964a82cbea120b322a51466",
        "patch": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env bash\n+# Demonstrate the creation and usage of UTXO snapshots.\n+#\n+# A server node starts up, IBDs up to a certain height, then generates a UTXO\n+# snapshot at that point.\n+#\n+# The server then downloads more blocks (to create a diff from the snapshot).\n+#\n+# We bring a client up, load the UTXO snapshot, and we show the client sync to\n+# the \"network tip\" and then start a background validation of the snapshot it\n+# loaded. We see the background validation chainstate removed after validation\n+# completes.\n+#\n+\n+export LC_ALL=C\n+set -e\n+\n+BASE_HEIGHT=${1:-30000}\n+INCREMENTAL_HEIGHT=20000\n+FINAL_HEIGHT=$((\"$BASE_HEIGHT\" + \"$INCREMENTAL_HEIGHT\"))\n+\n+SERVER_DATADIR=\"$(pwd)/utxodemo-data-server-$BASE_HEIGHT\"\n+CLIENT_DATADIR=\"$(pwd)/utxodemo-data-client-$BASE_HEIGHT\"\n+UTXO_DAT_FILE=\"$(pwd)/utxo.$BASE_HEIGHT.dat\"\n+\n+if ! command -v jq >/dev/null ; then\n+  echo \"This script requires jq to parse JSON RPC output. Please install it.\"\n+  echo \"(e.g. sudo apt install jq)\"\n+  exit 1\n+fi\n+\n+finish() {\n+  echo\n+  echo \"Killing server and client PIDs ($SERVER_PID, $CLIENT_PID) and cleaning up datadirs\"\n+  echo\n+  rm -f $UTXO_DAT_FILE $DUMP_OUTPUT\n+  rm -rf $SERVER_DATADIR $CLIENT_DATADIR\n+  kill -9 $SERVER_PID $CLIENT_PID\n+}\n+\n+trap finish EXIT\n+\n+# Need to specify these to trick client into accepting server as a peer\n+# it can IBD from.\n+CHAIN_HACK_FLAGS=\"-maxtipage=99999999999999999999999 -minimumchainwork=0x00\"\n+\n+server_rpc() {\n+  ./src/bitcoin-cli -datadir=$SERVER_DATADIR \"$@\"\n+}\n+client_rpc() {\n+  ./src/bitcoin-cli -rpcport=9999 -datadir=$CLIENT_DATADIR \"$@\"\n+}\n+server_sleep_til_boot() {\n+  while ! server_rpc ping >/dev/null 2>&1; do sleep 0.1; done\n+}\n+client_sleep_til_boot() {\n+  while ! client_rpc ping >/dev/null 2>&1; do sleep 0.1; done\n+}\n+\n+mkdir -p $SERVER_DATADIR $CLIENT_DATADIR\n+\n+echo \"Hi, welcome to the assumeutxo demo/test\"\n+echo\n+echo \"We're going to\"\n+echo\n+echo \"  - start up a 'server' node, sync it via mainnet IBD to height ${BASE_HEIGHT}\"\n+echo \"  - create a UTXO snapshot at that height\"\n+echo \"  - IBD ${INCREMENTAL_HEIGHT} more blocks on top of that\"\n+echo\n+echo \"then we'll demonstrate assumeutxo by \"\n+echo\n+echo \"  - starting another node (the 'client') and loading the snapshot in\"\n+echo \"    * first you'll have to modify the code slightly (chainparams) and recompile\"\n+echo \"    * don't worry, we'll make it easy\"\n+echo \"  - observing the client sync ${INCREMENTAL_HEIGHT} blocks on top of the snapshot from the server\"\n+echo \"  - observing the client validate the snapshot chain via background IBD\"\n+echo\n+read -p \"Press [enter] to continue\" _\n+\n+echo\n+echo \"-- Starting the demo. You might want to run the two following commands in\"\n+echo \"   separate terminal windows:\"\n+echo\n+echo \"   watch -n0.1 tail -n 30 $SERVER_DATADIR/debug.log\"\n+echo \"   watch -n0.1 tail -n 30 $CLIENT_DATADIR/debug.log\"\n+echo\n+read -p \"Press [enter] to continue\" _\n+\n+echo\n+echo \"-- IBDing the blocks (height=$BASE_HEIGHT) required to the server node...\"\n+./src/bitcoind -logthreadnames=1 -datadir=$SERVER_DATADIR $CHAIN_HACK_FLAGS -stopatheight=$BASE_HEIGHT >/dev/null\n+\n+echo\n+echo \"-- Creating snapshot at ~ height $BASE_HEIGHT ($UTXO_DAT_FILE)...\"\n+sleep 2\n+./src/bitcoind -logthreadnames=1 -datadir=$SERVER_DATADIR $CHAIN_HACK_FLAGS -connect=0 -listen=0 >/dev/null &\n+SERVER_PID=\"$!\"\n+\n+DUMP_OUTPUT=dumptxoutset-output-$BASE_HEIGHT.json\n+\n+server_sleep_til_boot\n+server_rpc dumptxoutset $UTXO_DAT_FILE > $DUMP_OUTPUT\n+cat $DUMP_OUTPUT\n+kill -9 $SERVER_PID\n+\n+RPC_BASE_HEIGHT=$(jq -r .base_height < $DUMP_OUTPUT)\n+RPC_AU=$(jq -r .assumeutxo < $DUMP_OUTPUT)\n+RPC_NCHAINTX=$(jq -r .nchaintx < $DUMP_OUTPUT)\n+\n+# Wait for server to shutdown...\n+while server_rpc ping >/dev/null 2>&1; do sleep 0.1; done\n+\n+echo\n+echo \"-- Now: add the following to CMainParams::m_assumeutxo_data\"\n+echo \"   in src/chainparams.cpp, and recompile:\"\n+echo\n+echo \"     {\"\n+echo \"         ${RPC_BASE_HEIGHT},\"\n+echo \"         {AssumeutxoHash{uint256S(\\\"0x${RPC_AU}\\\")}, ${RPC_NCHAINTX}},\"\n+echo \"     },\"\n+echo\n+read -p \"Press [enter] to continue once recompilation has finished\" _\n+\n+echo\n+echo \"-- IBDing more blocks to the server node (height=$FINAL_HEIGHT) so there is a diff between snapshot and tip...\"\n+./src/bitcoind -logthreadnames=1 -datadir=$SERVER_DATADIR $CHAIN_HACK_FLAGS -stopatheight=$FINAL_HEIGHT >/dev/null\n+\n+echo\n+echo \"-- Staring the server node to provide blocks to the client node...\"\n+./src/bitcoind -logthreadnames=1 -datadir=$SERVER_DATADIR $CHAIN_HACK_FLAGS -connect=0 -listen=1 >/dev/null &\n+SERVER_PID=\"$!\"\n+server_sleep_til_boot\n+\n+echo\n+echo \"-- Okay, what you're about to see is the client starting up and activating the snapshot.\"\n+echo \"   I'm going to display the top 14 log lines from the client on top of an RPC called\"\n+echo \"   monitorsnapshot, which is like getblockchaininfo but for both the snapshot and \"\n+echo \"   background validation chainstates.\"\n+echo\n+echo \"   You're going to first see the snapshot chainstate sync to the server's tip, then\"\n+echo \"   the background IBD chain kicks in to validate up to the base of the snapshot.\"\n+echo\n+echo \"   Once validation of the snapshot is done, you should see log lines indicating\"\n+echo \"   that we've deleted the background validation chainstate.\"\n+echo\n+echo \"   Once everything completes, exit the watch command with CTRL+C.\"\n+echo\n+read -p \"When you're ready for all this, hit [enter]\" _\n+\n+echo\n+echo \"-- Starting the client node to get headers from the server, then load the snapshot...\"\n+./src/bitcoind -logthreadnames=1 -datadir=$CLIENT_DATADIR -connect=0 -port=9998 -rpcport=9999 \\\n+  -addnode=127.0.0.1 $CHAIN_HACK_FLAGS >/dev/null &\n+CLIENT_PID=\"$!\"\n+client_sleep_til_boot\n+\n+echo\n+echo \"-- Initial state of the client:\"\n+client_rpc monitorsnapshot\n+\n+echo\n+echo \"-- Loading UTXO snapshot into client...\"\n+client_rpc loadtxoutset $UTXO_DAT_FILE\n+\n+watch -n 0.3 \"( tail -n 14 $CLIENT_DATADIR/debug.log ; echo ; ./src/bitcoin-cli -rpcport=9999 -datadir=$CLIENT_DATADIR monitorsnapshot) | cat\"\n+\n+echo\n+echo \"-- Okay, now I'm going to restart the client to make sure that the snapshot chain reloads \"\n+echo \"   as the main chain properly...\"\n+echo\n+echo \"   Press CTRL+C after you're satisfied to exit the demo\"\n+echo\n+read -p \"Press [enter] to continue\"\n+\n+while kill -0 $CLIENT_PID; do\n+    sleep 1\n+done\n+./src/bitcoind -logthreadnames=1 -datadir=$CLIENT_DATADIR -connect=0 -port=9998 -rpcport=9999 \\\n+  -addnode=127.0.0.1 $CHAIN_HACK_FLAGS >/dev/null &\n+CLIENT_PID=\"$!\"\n+client_sleep_til_boot\n+\n+watch -n 0.3 \"( tail -n 14 $CLIENT_DATADIR/debug.log ; echo ; ./src/bitcoin-cli -rpcport=9999 -datadir=$CLIENT_DATADIR monitorsnapshot) | cat\"\n+\n+echo\n+echo \"-- Done!\""
      }
    ]
  },
  {
    "sha": "02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
    "node_id": "C_kwDOABII59oAKDAyYzBiZGEwYmEwZGY2OTg1MGNiYzQxODEzYTZiZDJlZDYyYjY4ZWE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-20T14:38:44Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:53Z"
      },
      "message": "doc: update release-process.md for assumeutxo",
      "tree": {
        "sha": "78bf1270fff2744e6f3114851cc00bc6e27a19a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78bf1270fff2744e6f3114851cc00bc6e27a19a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3gEACgkQepNdrbLE\nTwUnhhAAgiL7uCL8OmfSpmc3EWvcpMm8oYATHHYjOU8+ym4kZvmnMIPXTIToDel7\nCv/W59T+0nrm3g6XnZwEB3ZIEZjd7wr0o9OaS84LlxUXtCNr0Run2OzBPs9Ap+Rt\nhm8lNuXyg50aq4Bnokffr0lA2I68PzpV78l7THfHKb8kbbUIrg/1wqaH361GmcvB\n0B4Xou8Y7eGaauklqOAZz73RUN0eKsf5jSaEZLmFo9gUWhWYaBsEHme4NAgeXF0R\nl7A3UWc0y1A+YBGbR4z+ameG8NSECt+kFRg1Fy3671sjTb4o/xjC1qTgZmoDK7Hg\noN4HuJ7eC0aNgDNtC9BCzElhq9aSwN6ZGRoepXfv2zLedf7Z57mEonta8O5CjjPG\nNKeA28dqU900GT/gwrEBORNKfSl4TdnnzJ09NDfMDalpm43vWD9XEckkcTMSze0p\nhS/pgfWkkDYKk//IkT+NtRepB34gOK7bLKJkOEV5GkXT4ZTv3vM2loUS82f0g8Kj\nEVBJidiVqoW1tH5OoCYK60dC0uF4TFBbEMeISXcxt1ZNulDCY++3dO821c8/mp/V\nZ5WyclppMZ18QN73/ETAXLredjO7sokAIhQBH8ZmfeqexH4XQss8d3XDYNOa1TRo\ng7tvFRONYvOan6ibsLKlRWCpfsYa9J9v9KgpvdIaA734yMVAfJk=\n=mQcG\n-----END PGP SIGNATURE-----",
        "payload": "tree 78bf1270fff2744e6f3114851cc00bc6e27a19a2\nparent a952553338764b652964a82cbea120b322a51466\nauthor James O'Beirne <james.obeirne@pm.me> 1626791924 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490753 -0500\n\ndoc: update release-process.md for assumeutxo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a952553338764b652964a82cbea120b322a51466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a952553338764b652964a82cbea120b322a51466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a952553338764b652964a82cbea120b322a51466"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e5b7a8868035df0131a3f0ff8ee698139e87f85",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
        "patch": "@@ -36,6 +36,12 @@ Release Process\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n+* Update `src/chainparams.cpp` with a new `m_assumeutxo_data` entry including the\n+  assumeutxo hash and nChainTx count. \n+  - You can obtain this information, and the corresponding snapshot, by running\n+    `./contrib/devtools/utxo_snapshot.sh <blockheight> <snapshot-out-path>`.\n+  - The height used should probably the be same as the assumevalid height chosen.\n+  - Ensure the resulting snapshot is uploaded somewhere publicly accessible (torrent, HTTP server, etc.).\n - Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n - Translations on Transifex\n     - Create [a new resource](https://www.transifex.com/bitcoin/bitcoin/content/) named after the major version with the slug `[bitcoin.qt-translation-<RRR>x]`, where `RRR` is the major branch number padded with zeros. Use `src/qt/locale/bitcoin_en.xlf` to create it."
      }
    ]
  },
  {
    "sha": "11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
    "node_id": "C_kwDOABII59oAKDExYzhhMjc2ZWEyMjNiZDIxYjUwYzIwZjkwYzBkYzM0MjBjY2VmN2M",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-07-18T17:29:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-09T20:45:54Z"
      },
      "message": "doc: add assumeutxo notes",
      "tree": {
        "sha": "eb1f215484f84e9d469fc66846dd3e6169b89e87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb1f215484f84e9d469fc66846dd3e6169b89e87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGK3gIACgkQepNdrbLE\nTwUprQ/+LoJTDLFl2p78OIFh9uhQ6zIstFi1WOmQdVrQHh+DsjdMQ69OIuPLdIKH\nWQp2pKKDNCOooTupEIvTPRGRRp+xWMZJWaXCGFgzuQ5+gxHtZbE4g4+Zgyi7Ioi6\nK1xzwBVHfF33xIdwIqJFhTHorz8jjd7lm7eKTn6FbrfMDtvEwF+mU/j9FWVAR2gi\nn08Sl7+IIxksS5fEFtg+N+50cqL4lc90y61RW/OGTlG8t7LO6Ly1q2eY43rD4cIC\nBtqVR1kEbVAj9pBGEGZBQNMpM7pAemxPGxe7Igu04XQSUznjswwus371PPuZVgPI\n3P4DGBE9aXYOpgqEXJUGAHjocalYYyrmX5IggkVRCqSN7CdNYBSRZzsmUYHiEHDU\nFaKkPR2Mr6lUQZnUhFJYIzQqcSWAR29e05Y33Q2GSw3uTGUjq/NnJh+stieCs/Uc\nG1HhMIJ9bB9ufmz0qzqoZq1YT7hzNg92ZjV9O99kET02b8Pl5mmC5sSuMfks8QDM\nsElFMO7dAWG8DU71b7tZHi2kTJO1OUjQ/Qkz0xX5K2IM9NeNqx+J2WWz/WyvRRdG\nuWS0Pp2gISbaOpTqXZxLCCxqP/4OTx5G1tVX0VGXL07Z3W+Ljz05RZuy3WiTKn0X\ngt5y9ldb0wxeWZNyVozfFATqf4CVMJiAoC85SEZNFZWTpDIMapM=\n=Gni/\n-----END PGP SIGNATURE-----",
        "payload": "tree eb1f215484f84e9d469fc66846dd3e6169b89e87\nparent 02c0bda0ba0df69850cbc41813a6bd2ed62b68ea\nauthor James O'Beirne <james.obeirne@pm.me> 1626629367 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1636490754 -0500\n\ndoc: add assumeutxo notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11c8a276ea223bd21b50c20f90c0dc3420ccef7c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02c0bda0ba0df69850cbc41813a6bd2ed62b68ea"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 138,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ded7a20d1b57a3ac47149e183dbbd71013805ffc",
        "filename": "doc/assumeutxo.md",
        "status": "added",
        "additions": 137,
        "deletions": 0,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11c8a276ea223bd21b50c20f90c0dc3420ccef7c/doc/assumeutxo.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11c8a276ea223bd21b50c20f90c0dc3420ccef7c/doc/assumeutxo.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assumeutxo.md?ref=11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
        "patch": "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.\n+\n+### Background chainstate hits snapshot base block\n+\n+Once the tip of the background chainstate hits the base block of the snapshot\n+chainstate, we stop use of the background chainstate (by setting `m_stop_use` in\n+`CompleteSnapshotValidation()`, which is checked in `ActivateBestChain()`). We hash the\n+background chainstate's UTXO set contents and ensure it matches the compiled\n+value in `CMainParams::m_assumeutxo_data`.\n+\n+The background chainstate data lingers on disk until shutdown, when in\n+`ChainstateManager::Reset()`, the background chainstate is cleaned up with\n+`ValidatedSnapshotShutdownCleanup()`, which renames the `chainstate_[hash]` datadir as\n+`chainstate`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 (ibd has `m_stop_use=true`) |\n+| active chainstate | snapshot |\n+\n+**Failure consideration:** if bitcoind unexpectedly halts after `m_stop_use` is set on\n+the background chainstate but before `CompleteSnapshotValidation()` can finish, the\n+need to complete snapshot validation will be detected on subsequent init by\n+`ChainstateManager::CheckForUncleanShutdown()`.\n+\n+### Bitcoind restarts sometime after snapshot validation has completed\n+\n+When the bitcoind initializes again, what began as the snapshot chainstate is now\n+indistinguishable from a chainstate that has been built from the traditional IBD\n+process, and will be initialized as such.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |"
      },
      {
        "sha": "1aac4d8311bbec62bcbb4c5cc56606d90dfb651b",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11c8a276ea223bd21b50c20f90c0dc3420ccef7c/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11c8a276ea223bd21b50c20f90c0dc3420ccef7c/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=11c8a276ea223bd21b50c20f90c0dc3420ccef7c",
        "patch": "@@ -37,7 +37,7 @@ Release Process\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n * Update `src/chainparams.cpp` with a new `m_assumeutxo_data` entry including the\n-  assumeutxo hash and nChainTx count. \n+  assumeutxo hash and nChainTx count.\n   - You can obtain this information, and the corresponding snapshot, by running\n     `./contrib/devtools/utxo_snapshot.sh <blockheight> <snapshot-out-path>`.\n   - The height used should probably the be same as the assumevalid height chosen."
      }
    ]
  }
]