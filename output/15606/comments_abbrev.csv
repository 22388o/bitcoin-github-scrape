DrahtBot,2019-03-15T15:07:34Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23155](https://github.com/bitcoin/bitcoin/pull/23155) (rpc: various fixups for dumptxoutset by jamesob)\n* [#22951](http",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-473322663,473322663,
gmaxwell,2019-03-15T19:39:36Z,"> Presumably the snapshot would be taken relatively close to the current tip but far enough away to avoid meaningful reorgs, say 10,000 blocks deep.\n\nTo be clear, the snapshot can't be terribly recent for the user of it or it breaks the security model. Assume valid only has any security at all if there is time for the review and communication about review to happen, which means a human timesca",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-473416823,473416823,
jamesob,2019-03-19T14:11:46Z,"> Probably the assumption should be that snapshots are created pretty close to tip, just far enough to avoid wasting time in reorgs (even 6 blocks would be fine) but the users aren't using them until they are quite a bit older, likely using the second to most recent available one.\n\nYep - I figured that we'd update the assumeutxo hash in lockstep with assumevalid's.\n\n> We shouldn't do that.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-474387827,474387827,
ryanofsky,2019-03-26T19:39:39Z,"There are so many code changes here, and it seems like 80% of them are just renames. I know you are putting off really breaking this up and restructuring it, but maybe you could start by just splitting b2a735d00d3c297cdfdd93609c12537497025ca1 in two commits: one that adds the new classes and function arguments and brute force renames without changing behavior, and a smaller one with the new functi",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-476815777,476815777,
jamesob,2019-03-30T01:41:06Z,"Thanks for the suggestion, @ryanofsky. I spent the last few days reconstructing the changeset into sensible commits - hopefully it's easier to understand this way.\n\nMost of the early commits are just shuffling stuff around (though all of it strictly necessary AFAICT). I've phrased the changes as much as possible as scripted-diffs and move-onlys. In replaying the changes, I found a few unnecess",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-478194695,478194695,
Sjors,2019-04-19T18:12:47Z,"I'm unable to compile this on macOS. See [error log](https://gist.github.com/Sjors/3937c8ebef0fcc8ea066072eacb59a60). It does compile on Ubuntu, despite quite a few warnings.\n\nI tested making a dump for testnet and then importing it with a fresh datadir. But I think I'm using it wrong. First time I tried to load it I got. That was before it fetched any headers. I waited for it to fetch a few b",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-484975314,484975314,
jamesob,2019-04-23T13:18:03Z,"> I'm unable to compile this on macOS. See error log. It does compile on Ubuntu, despite quite a few warnings.\n\nThanks; could you post the warnings you're receiving on Ubuntu? I'm not getting any warnings during compilation when using clang 9.0.0 and gcc 7.3.0 on Ubuntu 18.04.2.\n\n> I don't think an RPC method is the right tool for loading a snapshot (it's fine for saving); probably better ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-485798749,485798749,
jamesob,2019-04-25T20:01:41Z,"I've added particular assumeutxo values and a more narrow `devtools` script. @Sjors hopefully this should now build without trouble or warnings on MacOS, though I haven't tested.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-486817519,486817519,
jamesob,2019-04-26T18:35:14Z,"When (and if) I get a few Concept ACKs on this, I'll start to break this into smaller PRs with accompanying tests. Let me know if there's anything that would make conceptual review easier.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-487158576,487158576,
MarcoFalke,2019-04-26T19:03:02Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-487166998,487166998,
Sjors,2019-04-27T14:20:41Z,"Concept ACK. It compiles now. I was able to create a snapshot using the script and load it on a fresh datadir. Though it crashed when I stopped the node and started it again:\n\n```\n2019-04-27T14:18:10Z [snapshot] resetting coinsviews for Chainstate [ibd] @ height 410343 (000000000008b5afee8bdf7bbc4386c001615bbfcfe12e7ddd0ac19ab9a03235)\n2019-04-27T14:18:10Z [snapshot] resetting coinsviews fo",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-487289941,487289941,
n1bor,2019-05-05T11:05:59Z,"Just an FYI - I had a working POC of this that would have worked fine with the chainstate hash in the source  code:\nhttps://gist.github.com/n1bor/55b25d72cd3c24eef85f7e24d549ef7a\n\nOne interesting thing is if you write a lot of data to a leveldb database that is mostly sorted by key (or at least big chunks are ) it is very efficient.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-489415711,489415711,
jamesob,2019-05-07T17:23:03Z,"@Sjors thanks very much for testing.\n\n> it crashed when I stopped the node and started it again\n\nYou found a bug in how the init process interacts with an assumed-valid chainstate. I needed to add `nChainTx` reconstruction to `LoadBlockIndex()` and make some allowances for the assumed-valid chain in `RewindBlockIndex()`. The details of the fix are mostly contained in https://github.com/bit",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-490172246,490172246,
jamesob,2019-05-07T17:27:18Z,"> getblockchaininfo should contain fields to measure the progress of catching up in the background (and there needs to be something for the GUI to access, that can wait).\n\nYou can currently get a sense of this with the (maybe temporary? but definitely poorly named) `monitorsnapshot` RPC. Suggestions on how to roll this into `getblockchaininfo` are welcome. Maybe a `background:` key that contai",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-490173749,490173749,
Sjors,2019-05-07T18:17:10Z,">> Consider pausing IBD while loading the file.\n> acquiring cs_main during snapshot activation for clarity when testing\n> I don't think either slows the other down since they're running on separate threads\n\nIt's not about performance, but about being able to debug. I think we should keep this in for at least one release, because it's easier than the `grep` approach. It could also make sens",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-490191681,490191681,
Sjors,2019-05-08T19:05:54Z,"Did another test (on Ubuntu) and was able to create a snapshot and load it in a fresh datadir.\n\nWhen I tried to make a snapshot while still in IBD, the chain reorged down to the specified height and then immedidately shot up again to the tip, before making a (presumable wrong) snapshot. Easiest solution is for the demo script to check if `initialblockdownload` is `false`.\n\nPerhaps related,",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-490611693,490611693,
MarcoFalke,2019-08-23T22:32:18Z,"Can you split out d94356e086a2240773a42649ce6ef785b3a3d4b5 into a separate pull request? I need this for some of my fuzzing projects.\n\nSee #16703",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-524482297,524482297,
Sjors,2019-08-28T12:30:15Z,"On macOS 10.14.6 I'm seeing a warning:\n```\nvalidation.cpp:2222:64: warning: lambda capture 'func_name' is not required to be captured for this use [-Wunused-lambda-capture]\n    auto log_progress = [pindexNew, &coins_view, &chainParams, func_name](\n                                                             ~~^~~~~~~~~\nvalidation.cpp:4184:50: warning: comparison of integers of different ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-525723416,525723416,
Sjors,2019-08-29T13:20:27Z,"I made a torrent tracker for these snapshots, as well as limited capacity seeding:\n* mainnet: `magnet:?xt=urn:btih:556fb8dcc50059a62b0694f576a14e249156ab99&dn=utxo%5Fsnapshot%5F570000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\n* testnet: `magnet:?xt=urn:btih:8780d3e8e336986a7fede11bea3e1209e2b25e41&dn=utxo%5Fsnapshot%5Ftestnet%5F1512062.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-526181836,526181836,
jamesob,2019-09-17T18:05:52Z,"At the moment, the tip of this branch is broken - there's a lock inversion between the new `g_chainman.m_cs_chainstates` lock and `mempool.cs`. It's proven tricky to untangle because `ChainstateActive()` (which requires `g_chainman.m_cs_chainstates`) is called so pervasively.\n\nI tried swapping out m_cs_chainstates for cs_main since they're pretty much\nalways overlapping anyways, but that's a",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-532335545,532335545,
ryanofsky,2019-09-24T15:29:33Z,"> It's proven tricky to untangle because ChainstateActive() (which requires g_chainman.m_cs_chainstates) is called so pervasively.\n\nCan't remember what we talked about last time this came up, but maybe m_cs_chainstates should be a shared mutex, that many threads can call lock_shared on simultaneously, and not block unless the chain is being swapped.\n\nThat way m_cs_chainstates could be lock",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-534612837,534612837,
Sjors,2019-11-06T10:38:37Z,"I'm hosting some recent snapshots as a torrent (and tracker):\n* 570,000 mainnet `magnet:?xt=urn:btih:556fb8dcc50059a62b0694f576a14e249156ab99&dn=utxo%5Fsnapshot%5F570000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969` (made with older version, probably incompatible)\n* 600,000 mainnet: `magnet:?xt=urn:btih:e3c0b504c8e60c52653706079dbfecc5bcad5e02&dn=utxo%5Fmainnet%5F600000.dat&tr=udp%3A",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-550251563,550251563,
jamesob,2019-11-18T21:17:29Z,"A few quick updates on this branch.\n\n### New snapshots\n\nI've added an allowed assumeutxo hash at height 600,000 (which you can check with `./contrib/devtools/utxo_snapshot.sh - ./src/bitcoin-cli -datadir=[...]`) and have uploaded snapshot files ([Google Drive](https://storage.googleapis.com/assumeutxo/utxo.600k.dat), [Google Cloud](https://drive.google.com/file/d/1sGNpAsdQPPZNpWt7Wwbi5u3bH",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-555213164,555213164,
MarcoFalke,2020-04-20T15:06:07Z,"Commits that can be split out and submitted for review in parallel:\n\n* f416c16b5728c91b071e18ea860a59c0401dcb5d\n* ba1f760cdad07331b403966a0d3ab8b3f9898799 (partially, at least)\n* e75fbc3087c1ad5039c946a0ac3107d6d2c84b94 (after #18698 ?)\n\ncommit 9b665e999bc82b98ff317907370db6f65efb2b43 can be dropped, no? It is already properly marked:\n\n```\n$ git grep 'bool LoadBlockIndex('\nsrc/",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-616613653,616613653,
MarcoFalke,2020-05-23T12:32:24Z,Why is GitHub so horribly useless? I can't even see the last comment I posted here two weeks ago without spending minutes unwrapping the discussion,https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-633044179,633044179,
jamesob,2020-08-01T19:51:55Z,"Quick update. I've rebased this PR in such a way that it does not rely on changes in #17487 to avoid being blocked on that going through. If that does merge, it'll be easy to update this branch to make use of the flush-without-erase behavior.\n\nThis needs testing (which I plan to do soon) as it's been a while since I've gone through the whole battery of manual system tests (i.e. actually loadin",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-667579173,667579173,
MarcoFalke,2020-08-02T05:45:19Z,"I still thinks this can and should be split up further, since that makes it easier to find reviewers for the part of the code that is modified. For example, the net_processing additions might be reviewed by a different set of people than the validation changes like 8ce5eb04d5ec21843e6a3919d0beee9f6e6589fe",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-667631605,667631605,
Sjors,2021-02-17T15:29:59Z,Rebase time now that #19806 landed?,https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-780635284,780635284,
jamesob,2021-02-17T15:35:53Z,"> Rebase time now that #19806 landed?\n\nYup, actively working on it.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-780639279,780639279,
ryanofsky,2021-04-01T01:32:20Z,"Approach ACK / light review ACK 285d5dd3e409c1f14f50c46f18b3b1338f7ab9f6\n\nLooking at the remaining commits it seems like the assumeutxo implementation is actually 75% merged already, and remaining changes are mostly tweaking code that hardcodes or assumes ActiveChainstate to instead handle multiple chainstates.\n\nCurrent approach of splitting this large PR into medium sized PRs to be review",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-811573676,811573676,
Sjors,2021-05-21T13:46:40Z,"Would be nice to see a rebase of this, as it's a bit easier to understand the prerequisite PR's in their full context.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-845962015,845962015,
MarcoFalke,2021-05-25T08:37:01Z,"Agree with @Sjors . Currently it is not possible to test the ""great picture"" and only unit test or code review the split out patches.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-847672512,847672512,
jamesob,2021-05-25T16:23:44Z,"Thanks for the pings, I'll start this tomorrow.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-848022181,848022181,
jamesob,2021-05-27T20:56:00Z,"[`utxo-dumpload.61`](https://github.com/jamesob/bitcoin/tree/utxo-dumpload.61) -> [`utxo-dumpload.62`](https://github.com/jamesob/bitcoin/tree/utxo-dumpload.62) ([range-diff](https://gist.github.com/jamesob/264f4bbb402b3c03c8dda241f83e5ae5))\n\nLarge rebase encompassing\n\n- many net_processing refactors by @jnewbery @rebroad et al. (#21713)\n- @dongcarl's chainstate deglobalization (#20158)",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-849935729,849935729,
Sjors,2021-05-31T18:42:28Z,"Torrent for my snapshot at height 685,000: `magnet:?xt=urn:btih:bbc943dd7a97bff4bab7a039414e4dae5fbf5a3c&dn=utxo%5Fmainnet%5F685000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\n\nTo make this snapshot, I rolled back to the correct height: `bitcoin-cli invalidateblock 00000000000000000002091619d7ae1596349afb10fe8cb1833a09945db1180d` and then called `dumptxoutset` (same procedure as `c",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-851632661,851632661,
jamesob,2021-06-08T17:18:12Z,"Thanks for testing @Sjors. I couldn't reproduce your bug, but during manual testing I did find a number of issues based upon changes that have happened since last rebase. Subsequently I've pushed a bunch of new commits, some of which need to be fixed up. I've also done a manual test of the assumeutxo workflow and everything seems to be working properly again. \n\nI also found an issue, possibly ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-856949780,856949780,
Sjors,2021-06-10T17:27:55Z,"This seems to work better:\n```\n{\n  ""coins_written"": 74785038,\n  ""base_hash"": ""00000000000000000004331a2b2230ee390f3cd8969c4b533e616a6805ccf918"",\n  ""base_height"": 687000,\n  ""path"": ""/Users/sjors/Library/Application Support/Bitcoin/utxo_mainnet_687000.dat"",\n  ""assumeutxo"": ""c6d8016d392df4a9b57c96a432347df3971b78da5b095bd2eafe71da84206892"",\n  ""nchaintx"": 648168241\n}\n```\n\nTorre",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-858813824,858813824,
jamesob,2021-06-16T16:15:18Z,"On the road to writing actual functional tests (which may be somewhat of a challenge), I've added a demo/manual testing script (https://github.com/bitcoin/bitcoin/pull/15606/commits/322a9e9fc1d0edc3297a92618edc912c50bc0fd8) that should allow anyone to get acquainted with the assumeutxo feature.\n\nUsing it should be easy; clone this branch, `make`, and then run `./contrib/devtools/test_utxo_snap",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-862515638,862515638,
jamesob,2021-06-17T21:30:45Z,I've done a cleanup rebase as well as pushing a basic functional test (https://github.com/bitcoin/bitcoin/pull/15606/commits/aa65b21d79d9cc0d79925879bc62e1c240a1cf59) that can probably use some embellishment.,https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-863577706,863577706,
Sjors,2021-06-22T09:27:47Z,"I was able to complete an IBD with my earlier snapshot using c78a2c743b5cedd9b9948ad355268798baa01bee (and a modified chain params).\n\nI noticed it didn't clean up the `cainstate_blah_hash` directory after it was done. But I didn't bother checking if a restart fixed that (already wiped that data dir).",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-865813255,865813255,
Sjors,2021-06-23T12:33:37Z,"> Anyway, I'm going to try a different tack here and open a bunch of smallish, independently mergeable PRs containing some of the commits here that shouldn't change any behavior\n\nWith the big picture in this PR being up to date, it should be easier to review your (upcoming) smaller PR's. Forest, trees, clear.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-866796046,866796046,
ryanofsky,2021-06-25T14:48:31Z,"Notes from going through this PR and writing down the behavior changes:\n\n- UpdateTip() - skip updating mempool transactions count for background chainstate\n  - would be better if background chainstate mempool pointer was just null?\n- UpdateTip() - skip activation warning for background chainstate\n  - would be better if background chainstate just considered always IBD? (since the warnings",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-868553822,868553822,
jamesob,2021-06-28T18:33:38Z,"Russ, thanks for the thorough and thoughtful look here. Really appreciate your design guidance.\n\nOf course I have the predictable grumbles about the rework necessary and a slight dread at the prospect of introducing more prerequisite refactoring (given this project has been ongoing for two years already), but on design questions like this I'm inclined to side with you given (i) this code began",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-869921671,869921671,
ryanofsky,2021-06-28T19:53:15Z,Thanks and to be sure I'm happy to review any version of this PR with or without the changes I was suggesting. My comment https://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905 was trying to make sense of things for myself as much as it was trying to give suggestions for the PR. So definitely feel free to any skip extra implementation work unless you think it will actually impro,https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-869986387,869986387,
jamesob,2021-06-28T20:09:18Z,"Thanks @ryanofsky, that's a really helpful clarification for me. Agree that there is probably more of a proliferation of assumeutxo jargon than there needs to be. At the very least what I think I can do is consolidate terminology to ""active"" chainstate vs. ""background"" chainstate (... or maybe just non-""active""?). I'll look at doing that in addition to your other recommendations.\n\nI've pushed ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-869999896,869999896,
ryanofsky,2021-06-28T20:37:57Z,"> In some cases switching behavior on mempool presence might be even more confusing (e.g. [b51d6d7](https://github.com/bitcoin/bitcoin/commit/b51d6d7a30bc6c9bd0a63549254156ae3aeb6d4a)) since the mempool is basically unrelated to things like validationinterface callbacks.\n\nThis is probably subjective, but I don't see it as being unrelated. If the chain is connected to the mempool it's active, a",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-870024022,870024022,
MarcoFalke,2021-07-06T13:12:04Z,"Changing m_mempool from reference to pointer is something I wanted to do anyway for the `-nomempool` config option. If this also simplifies assumeutxo, I'd suggest doing it first. Happy to take a stab at this unless you are already working on it.",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-874747600,874747600,
jamesob,2021-07-06T13:34:18Z,"> Changing m_mempool from reference to pointer is something I wanted to do anyway for the `-nomempool` config option. If this also simplifies assumeutxo, I'd suggest doing it first. Happy to take a stab at this unless you are already working on it.\n\nStarted looking at this last week and then America had a birthday. Should have a commit coming today; actually looks like a pretty small change. ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-874765048,874765048,
Sjors,2021-08-06T19:00:10Z,"Fresh snapshot at height 694,000: `magnet:?xt=urn:btih:d7216e8dd1b9dcf8c136f20156b966a745003015&dn=utxo%5Fmainnet%5F694000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\n\nTo use the snapshot, edit `chainparams.cpp`:\n\n```cpp\n        m_assumeutxo_data = MapAssumeutxo{\n            {\n                694000,\n                {AssumeutxoHash{uint256S(""0x00000000000000000003f5acb5",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-894458319,894458319,
jamesob,2021-08-17T20:38:25Z,"As always, thanks for testing @Sjors. We've discussed on IRC, but just so others can follow along: what's happened here is you've listed the blockhash in your chainparams (`0x00000000000000000003f5acb5ec81df7c98c16bc8d89bdaadd4e8965729c018`) instead of the UTXO set hash (`0x2f47dc1e089b623a4bea57e0752b776df9e6885904d7ff8b14911b94c2208ff4`), and so consequently snapshot activation fails. You might ",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-900613818,900613818,
DrahtBot,2021-10-05T08:19:24Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-934177787,934177787,
ryanofsky,2019-04-01T17:03:11Z,"In commit ""move-only: make the CChainState interface public"" (77e5c902168ca2191448c5f8924b6831dc2717b9)\n\nBetter to drop anonymous namespace. It doesn't actually hide any functionality and causes warnings:\n\n```\n./validation.h:487:7: warning: ‘CChainState’ has a field ‘CChainState::setBlockIndexCandidates’ whose type uses the anonymous namespace [-Wsubobject-linkage]\n```\n",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r270963373,270963373,src/validation.h
ryanofsky,2019-04-01T18:59:57Z,"In commit ""refactoring: introduce unused ChainActive()"" (b5627060df9c7876d91391e34c84a7e4fb1ff378)\n\nLine seems unrelated to this commit. Maybe move to commit that first uses this.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271006988,271006988,src/validation.h
ryanofsky,2019-04-01T19:10:52Z,"In commit ""refactoring: introduce ChainstateActive()"" (612d1b5df556eb70eb5fb670d166a1d7927e6efc)\n\nThis is returning a pointer, but none of the places calling it are checking null, so it seems like it'd be better to return a reference instead. Also would make `ChainstateActive()` more consistent with `ChainActive()`",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271010773,271010773,src/validation.cpp
MarcoFalke,2019-04-01T19:22:48Z,Does `CBlockIndexWorkComparator` have to be in the header or would it be sufficient to forward declare and put the implementation in the cpp file only?,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271014661,271014661,src/validation.h
ryanofsky,2019-04-01T19:34:55Z,It has to be in the header because it affects the layout of the CChainState object.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271018669,271018669,src/validation.h
ryanofsky,2019-04-02T18:16:44Z,"In commit ""refactoring: FlushStateToDisk -> CChainState"" (c9d13d26314e2368562a1612bc0c89f3099c4154)\n\nCould keep this comment, I think it applies to the whole block of function declarations.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271434904,271434904,src/validation.cpp
ryanofsky,2019-04-02T18:31:26Z,"In commit ""refactoring: FlushStateToDisk -> CChainState"" (c9d13d26314e2368562a1612bc0c89f3099c4154)\n\nI think it'd be better not to have these default parameters and chain guessing code:\n\n```c++\nif (!chainstate) {\n    chainstate = ::ChainstateActive();\n}\n```\n\nIt seems like choosing a chain implicitly makes the call sites less straightforward, and increases the risk of a bug due ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271440899,271440899,src/validation.h
ryanofsky,2019-04-02T21:33:04Z,"In commit ""refactoring: IsInitialBlockDownload -> CChainState"" (e9fab103e6f81cf32b09618ea9a70540616f7da8)\n\nWould call this `m_cached_in_ibd` or something to indicate the value may not be up to date. I could imagine incorrect code that checks `m_in_ibd` when it should be calling `IsInitialBlockDownload` instead. Calling this ""cached"" would make the bug more obvious. \n\nCould also update the ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271504421,271504421,src/validation.h
ryanofsky,2019-04-02T21:40:59Z,"In commit ""move-onlyish: move CCoinsViewErrorCatcher out of init.cpp"" (e8e09fcb16b7e358a88b4f38d0d8af49a3eafac3)\n\nI think this comment makes more sense in the place where it was written previously (in class definition rather than in GetCoin method implementation).",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271506825,271506825,src/coins.cpp
ryanofsky,2019-04-02T21:43:04Z,"In commit ""move-onlyish: move CCoinsViewErrorCatcher out of init.cpp"" (e8e09fcb16b7e358a88b4f38d0d8af49a3eafac3)\n\nSpacing seems off, maybe use clang-format for the new code.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271507466,271507466,src/coins.h
ryanofsky,2019-04-02T21:48:04Z,"In commit ""move-onlyish: move CCoinsViewErrorCatcher out of init.cpp"" (e8e09fcb16b7e358a88b4f38d0d8af49a3eafac3)\n\nNot a big deal, but it would be nice to avoid copies:\n\n```\nvoid AddReadErrCallback(Function f) {\n    m_err_callbacks.emplace_back(std::move(f));\n}\n```",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271508985,271508985,src/coins.h
ryanofsky,2019-04-02T22:04:54Z,"In commit ""refactoring: move block metadata into BlockMetadataManager"" (155ee896520e51b8a13d6904e3a14b5fa50295c0)\n\nIt seems like a step backwards to be replacing a local reference with a global reference. I get that BlockMetadataManager is a singleton shared between multiple chainstates, but I think it's a mistake to add global references to it all over the code. If you could add a `BlockMetad",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271513853,271513853,src/validation.cpp
ryanofsky,2019-04-03T19:41:02Z,"In commit ""refactoring: have CCoins* data managed under CChainState"" (525df322de8e6803f41a56aff16bfc1ebe95f845)\n\nI don't see any problems with this change, but it seems strange that previous code called pcoinsdbview.reset() and pcoinscatcher.reset() above, and then reset them again here, when it could have just set them once above like this commit is doing now.\n\nJust asking for reassurance",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271901526,271901526,src/init.cpp
ryanofsky,2019-04-03T19:52:59Z,"In commit ""refactoring: have CCoins* data managed under CChainState"" (525df322de8e6803f41a56aff16bfc1ebe95f845)\n\nNote: I was confused why `init.cpp` seemed to sometimes use `::ChainstateActive()->` and other places use `g_chainstate.` for apparently no reason. I think I would have preferred using `g_chainstate.` in the init.cpp file consistently and reserving `ChainstateActive` for network and",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271905870,271905870,src/init.cpp
ryanofsky,2019-04-03T20:04:51Z,"In commit ""refactoring: have CCoins* data managed under CChainState"" (525df322de8e6803f41a56aff16bfc1ebe95f845)\n\nMinor point, but I like the old name `CoinsTip` better than the new name `CoinsCache`. Just imagining seeing this code for the first time, I would expect the ""db"" object to be the object I should be reading and writing state to, and the ""cache"" object to be something used for optimi",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271910014,271910014,src/validation.h
ryanofsky,2019-04-03T20:08:19Z,"In commit ""refactoring: have CCoins* data managed under CChainState"" (525df322de8e6803f41a56aff16bfc1ebe95f845)\n\nI think these three functions should be returning references instead of pointers, and maybe asserting the underlying unique_ptrs are set, since no callers are ever checking to see if the pointers are null.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271911197,271911197,src/validation.h
ryanofsky,2019-04-03T20:13:14Z,"In commit ""move-only: move coins statistics utils out of RPC"" (56ad8d226539a44daef02f479fab1820c536731f)\n\nMaybe preserve the original copyright right years if you are moving existing code to a new file.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271912920,271912920,src/coinstats.cpp
ryanofsky,2019-04-03T20:19:35Z,"In commit ""validationinterface: add unused CChainState parameter"" (0b33ff5bcba7f2aa357a1a12fe1e1452c23defb7)\n\nWill these new chainstate parameters ever be null? Is any implementation ever going to check that they are not null before using them? Would suggest changing to `const CChainState& chainstate` to avoid mishaps otherwise.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271915175,271915175,src/validationinterface.h
ryanofsky,2019-04-03T20:24:01Z,"In commit ""chain: add unused CChain::FakeNTx"" (ebc844e8a1bacfe603db85ef4deae6e1f109cd57)\n\nNote: I don't know if this comment is true, but it _feels_ true.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271916764,271916764,src/chain.h
ryanofsky,2019-04-03T20:27:24Z,"In commit ""chain: add unused CChain::FakeNTx"" (ebc844e8a1bacfe603db85ef4deae6e1f109cd57)\n\nIt seems really unfortunate that this is necessary just to report progress. Are there alternative ways to change the progress function so this would not be required?",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271917898,271917898,src/chain.cpp
ryanofsky,2019-04-03T20:30:25Z,"In commit ""validation: add unused SnapshotMetadata class"" (50d8e7c910edec10dcf08beec577c3efd67f2276)\n\nWould add comments to describe these other fields.\n\nIn particular, I'm curious why `m_validation_complete` would be a field that gets serialized as opposed to a memory-only state.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271919012,271919012,src/validation.h
ryanofsky,2019-04-04T14:54:30Z,"In commit ""rpc: add dumptxoutset"" (71a65a08213b0159d4e4df2199d9993547f163e4)\n\nDo you want to allow overwriting existing files? If so, should include a comment saying it's intentional, since this could be potentially dangerous (overwriting wallet files, etc). If not, should check `fs::exists(path)`.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272220495,272220495,src/rpc/blockchain.cpp
ryanofsky,2019-04-04T15:00:03Z,"In commit ""rpc: add dumptxoutset"" (71a65a08213b0159d4e4df2199d9993547f163e4)\n\nDo you want to allow path to be relative? If not, should error when `fs::path(path).is_relative()`. If so, should probably interpret path relative to a known location like the datadir (`fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir())`), instead of relative to whatever the current directory was",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272223330,272223330,src/rpc/blockchain.cpp
ryanofsky,2019-04-04T15:01:34Z,"In commit ""rpc: add dumptxoutset"" (71a65a08213b0159d4e4df2199d9993547f163e4)\n\nNot sure, but it might be useful to mention if this flushes the cache.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272224035,272224035,src/rpc/blockchain.cpp
ryanofsky,2019-04-04T15:07:17Z,"In commit ""rpc: add dumptxoutset"" (71a65a08213b0159d4e4df2199d9993547f163e4)\n\nCan you add a comment about synchronization and atomicity here. It's unclear why it's safe to do all this without locking cs_main. Or is this assuming that another flush won't happen in the background?\n\nAlso, is it ok for this and `GetUTXOStats` to be using different cursor objects?",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272226729,272226729,src/rpc/blockchain.cpp
ryanofsky,2019-04-04T18:24:07Z,"In commit ""rpc: add dumptxoutset"" (71a65a08213b0159d4e4df2199d9993547f163e4)\n\nIt is strange to return a formatted string from an RPC. Would seem better to return something structured like `{""coins_written"": stats.coins_count}`",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272308326,272308326,src/rpc/blockchain.cpp
ryanofsky,2019-04-04T18:32:07Z,"In commit ""refactoring: add CChainState::ActivateBestChain"" (deca3be21d35ca661e047512f74c805ee24ecb16)\n\nCommit description is misleading. This commit is only documenting the method, not adding it. And I guess it is making the last block argument optional.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272311275,272311275,src/validation.h
ryanofsky,2019-04-04T18:33:29Z,"In commit ""refactoring: add CChainState::ActivateBestChain"" (deca3be21d35ca661e047512f74c805ee24ecb16)\n\nIt's not clear from this description what the block argument does.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272311784,272311784,src/validation.h
ryanofsky,2019-04-04T18:41:32Z,"In commit ""trivial: add CChainState::ToString()"" (10973e8e1dfd1951a98bf0de4c98b8cee385d70d)\n\n`m_from_snapshot_blockhash` variable isn't introduced yet, so this doesn't compile",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272314847,272314847,src/validation.cpp
ryanofsky,2019-04-04T18:48:55Z,"In commit ""refactoring: move block metadata into BlockMetadataManager"" (155ee896520e51b8a13d6904e3a14b5fa50295c0)\n\nThis commit causes some lock annotation errors:\n\n```\n  CXX      libbitcoin_server_a-validation.o\nvalidation.cpp:114:48: error: reading variable 'm_block_index' requires holding mutex 'cs_main' [-Werror,-Wthread-safety-analysis]\n        for (const BlockMap::value_type& en",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272317689,272317689,src/validation.cpp
ryanofsky,2019-04-04T19:02:43Z,"re: https://github.com/bitcoin/bitcoin/pull/15606#discussion_r271916764\n\nNow I'm confused about this comment. I thought it meant truthy in the Colbert sense (https://en.wikipedia.org/wiki/Truthiness). But that doesn't work where truthy is used later in https://github.com/bitcoin/bitcoin/commit/8d9b707f609b647fb28ae182a097adc03e718725#diff-349fbb003d5ae550a2e8fa658e475880R777. Since this is C++",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272322784,272322784,src/chain.h
ryanofsky,2019-04-04T19:04:42Z,"In commit ""validation: introduce ChainstateManager, use in init"" (8d9b707f609b647fb28ae182a097adc03e718725)\n\nProbably clearer to say ""set"" or ""non-null"" here instead of ""truthy"".",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272323444,272323444,src/validation.h
ryanofsky,2019-04-04T19:08:55Z,"In commit ""validation: introduce ChainstateManager, use in init"" (8d9b707f609b647fb28ae182a097adc03e718725)\n\nWould drop this. Referencing historical variables in commit and review comments is helpful, but confusing in code comments. If this is supposed to suggest that there are still weird things about the code that could be cleaned up in the future, it would probably be better to say directly",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272325190,272325190,src/validation.h
ryanofsky,2019-04-04T19:12:06Z,"In commit ""validation: introduce ChainstateManager, use in init"" (8d9b707f609b647fb28ae182a097adc03e718725)\n\nIs this supposed to be public? Maybe mention why in comment if so.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272326477,272326477,src/validation.h
ryanofsky,2019-04-04T19:15:55Z,"In commit ""validation: introduce ChainstateManager, use in init"" (8d9b707f609b647fb28ae182a097adc03e718725)\n\nCan you give a little overview of what is meant by the:\n\n- unready snapshot chainstate\n- ibd chainstate\n- snapshot chainstate\n- active chainstate\n- background validation chainstate\n- validated chainstate\n\nI am getting more than a little lost in the terminology, and it ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272327897,272327897,src/validation.h
ryanofsky,2019-04-05T20:09:24Z,"In commit ""refactoring: IsInitialBlockDownload -> CChainState"" (e9fab103e6f81cf32b09618ea9a70540616f7da8):\n\nStyle guide prefers (and it's a little clearer) to initialize variables like this where they're declared, instead of separately in constructors. Could write `m_is_ibd = false` or `m_is_ibd{false}`",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272728241,272728241,src/validation.h
ryanofsky,2019-04-05T20:19:48Z,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9b6907e080fe4da105a332c76ddb5110310e8840)\n\nIt would seem better to drop the comment and just assert, or return an error if this is not the case.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272731017,272731017,src/validation.cpp
ryanofsky,2019-04-05T20:24:55Z,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9b6907e080fe4da105a332c76ddb5110310e8840)\n\nNot sure, but probably should use interruption_point.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272732427,272732427,src/validation.cpp
ryanofsky,2019-04-05T20:30:15Z,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9b6907e080fe4da105a332c76ddb5110310e8840)\n\nCan the comment say more about this? Will there even be anything in the mempool? Would it make sense to only drop incompatible transactions?",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272734025,272734025,src/validation.h
ryanofsky,2019-04-05T20:37:28Z,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9b6907e080fe4da105a332c76ddb5110310e8840):\n\nI don't understand why `m_unready_snapshot_chainstate` is a class member. It seems like it should just be a local variable `auto snapshot = MakeUnique<CChainState>(...)` in this function that gets swapped in with `m_snapshot_chainstate` when it is ready below. This would simplify the cl",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272736054,272736054,src/validation.cpp
ryanofsky,2019-04-05T20:40:27Z,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9b6907e080fe4da105a332c76ddb5110310e8840):\n\nMaybe add NODISCARD since this returns error on failure.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272736888,272736888,src/validation.h
ryanofsky,2019-04-05T20:42:50Z,"In commit ""rpc: add loadtxoutset"" (f9571218d41304040778655e2f3941042b358dd5)\n\nShould throw an exception on failure.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272737578,272737578,src/rpc/blockchain.cpp
ryanofsky,2019-04-05T20:43:21Z,"In commit ""rpc: add loadtxoutset"" (f9571218d41304040778655e2f3941042b358dd5)\n\nShould say loadtxoutset",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272737759,272737759,src/rpc/blockchain.cpp
ryanofsky,2019-04-05T20:45:18Z,"In commit ""rpc: add loadtxoutset"" (f9571218d41304040778655e2f3941042b358dd5)\n\nLike https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272223330, should probably intepret path relative to datadir",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272738317,272738317,src/rpc/blockchain.cpp
ryanofsky,2019-04-05T20:46:41Z,"In commit ""rpc: add loadtxoutset"" (f9571218d41304040778655e2f3941042b358dd5)\n\nLike https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272308326, should probably return json information instead of human readable string.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272738640,272738640,src/rpc/blockchain.cpp
ryanofsky,2019-04-05T21:00:39Z,"re: https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272327897\n\n> Can you give a little overview of what is meant by the:\n>\n> - unready snapshot chainstate\n> - ibd chainstate\n> - snapshot chainstate\n> - active chainstate\n> - background validation chainstate\n> - validated chainstate\n\nMore chainstates from commit ""validation: introduce ChainstateManager::GetChainstateF",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272742396,272742396,src/validation.h
ryanofsky,2019-04-05T21:05:06Z,"In commit ""validation: introduce ChainstateManager::GetChainstateForNewBlock"" (6d85241c236f563715d4a982651fd1815d76dbd2)\n\nLike other places, callers never seem to be checking for null. This should just use references and return `*m_snapshot_chainstate` instead of `m_snapshot_chainstate.get()`.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r272743599,272743599,src/validation.cpp
jamesob,2019-04-08T14:46:47Z,"Ah sorry, I guess ""truthy"" is colloquial to Python: https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r273085866,273085866,src/chain.h
jamesob,2019-04-09T16:13:22Z,Note: this needs to be rewritten to avoid assuming that the user has enough free memory to fit the entire snapshot. Right now it'll OOM on machines with less than 3.2GB mem available.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r273571494,273571494,src/validation.cpp
jamesob,2019-04-09T16:15:24Z,TODO: should add a check here that the user hasn't loaded any wallets with a bestblock height of less than the base of the snapshot.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r273572305,273572305,src/rpc/blockchain.cpp
jamesob,2019-04-09T18:44:29Z,"Yep, agree with you. Will change.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r273647684,273647684,src/validation.h
jamesob,2019-04-09T19:05:49Z,"I'll add comments, but to answer your immediate question: once we complete validation of a snapshot, we update this value to true and write it out to a metadata file on disk. This is so that when we are initializing after a subsequent restart, we know that the snapshot we load in has been validated and we don't need to continue to do a background validation. This would be unnecessary if we renamed",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r273656736,273656736,src/validation.h
MarcoFalke,2019-04-10T16:10:46Z,"in commit 77e5c902168ca2191448c5f8924b6831dc2717b9:\n\nI'd prefer not to include a header when a forward declaration is enough.\n\nSee the following fixup:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 4676a446f8..a67cd03686 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -22,6 +22,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274043281,274043281,src/validation.h
MarcoFalke,2019-04-10T17:55:22Z,This hasn't been fixed?,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274085047,274085047,src/validation.h
jamesob,2019-04-10T18:10:37Z,"Sorry - I'm marking these resolved as I rebase locally as a checklist for myself. Instead of pushing each time I rebase, I'm going to push all the changes up once I'm done (today or tomorrow).",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274091108,274091108,src/validation.h
jamesob,2019-04-10T19:48:21Z,"Good advice, thanks. I've renamed the class `BlockManager` and folded the ""global"" instance into `ChainstateManager`, which then injects a reference to that instance when constructing chainstates. Each reference lives as `CChainState.m_blockman`.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274128409,274128409,src/validation.cpp
jamesob,2019-04-11T15:02:37Z,"Yeah, this is an incorrect relic of this RPC being a hackneyed prototype. We'll probably have to lock cs_main for the duration of this call for now, but I think that'll be prohibitively lengthy when we start generating snapshots as part of normal operation, so down the road we may have to introduce a unique lock for the coinsdb (i.e. to prevent flushes from happening mid-snapshot).\n\nWe're fine",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274470338,274470338,src/rpc/blockchain.cpp
jamesob,2019-04-11T15:09:55Z,"This makes me think that the existing `gettxoutsetinfo` RPC is broken since it isn't locking cs_main during the `GetUTXOStats()` call. I wonder if the author of that function assumed that leveldb handles locking as some kind of RAII associated with use of the iterator, but that's not the case ([DBImpl::NewIterator](https://github.com/bitcoin-core/leveldb/blob/bitcoin-fork/db/db_impl.cc#L1156-L1166",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274474143,274474143,src/rpc/blockchain.cpp
sipa,2019-04-11T15:20:32Z,"The cursor returned iterates over a snapshot of the database at the time of its creation; the db can be modified simultaneously, but won't affect what the cursor sees.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274479369,274479369,src/rpc/blockchain.cpp
jamesob,2019-04-11T15:24:19Z,"@sipa I can't find any mention of this behavior in the leveldb docs or header files. I see it happening [here](https://github.com/bitcoin-core/leveldb/blob/bitcoin-fork/db/db_impl.cc#L1159), but do we want to rely on something so implicit?",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274481307,274481307,src/rpc/blockchain.cpp
sipa,2019-04-11T15:29:47Z,"We should probably make it explicit through the Snapshot API of LevelDB. I thought we already did, actually - so I'm a bit confused how I knew this as I don't remember looking in the code.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274484277,274484277,src/rpc/blockchain.cpp
jamesob,2019-04-11T18:37:39Z,"Most of these are already documented with data docstrings, but I've added an overview in the classdoc.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274577341,274577341,src/validation.h
jamesob,2019-04-11T18:41:21Z,"Yep. This function used to be split across two (one of which was executed in a separate thread), so this is an artifact of that. Willfix.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274578776,274578776,src/validation.cpp
jamesob,2019-04-12T19:18:21Z,Made it private and then `friend`ed the only two functions (ChainActive and ChainstateActive) which access it.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r275033240,275033240,src/validation.h
jamesob,2019-04-12T19:22:59Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r275034464,275034464,src/validation.cpp
MarcoFalke,2019-05-07T17:50:45Z,"```\nIn file included from validation.cpp:12:\n./coinstats.h:15:14: redundant redeclaration of ‘CBlockIndex* LookupBlockIndex(const uint256&)’ in same scope [-Wredundant-decls]\n```\n```suggestion\n\n```\n",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r281750772,281750772,src/coinstats.h
MarcoFalke,2019-05-07T22:08:58Z,"In commit e2c878bea3 refactoring: move block metadata structures into BlockManager\n\nstyle-nit: Duplicate `public`\n\nAlso, wouldn't it be clearer to not expose the block index via CChainState::BlockIndex? For me this is confusing because there is one blockindex, but several chainstates that could use it.\n\nI suggest the following diff, which adds a `BlockManager::BlockIndex` method (diff ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r281848423,281848423,src/validation.h
Sjors,2019-05-08T16:49:23Z,This means the catchup process never leaves IBD once nMinimumChainWork > work(assume_utxo block). Not sure if that matters.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r282154374,282154374,src/validation.cpp
jamesob,2019-05-08T20:33:28Z,"Yeah I like your suggestion, thanks! Will work it into the commits.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r282237828,282237828,src/validation.h
ryanofsky,2021-06-21T17:31:21Z,"In commit ""validation: have LoadGenesisBlock work on all chainstates"" (35ef764b7c8a7ebf0760e0eff52eda95ebac1136)\n\nProbably this should be deleted, it's just declaring that a function which doesn't exist would be a friend.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655576593,655576593,src/validation.h
ryanofsky,2021-06-21T17:38:51Z,"In commit ""dumptxoutset: add assumeutxo key to output"" (cd1986f7abe6d6c7ce0918ac8cd62864205e373e)\n\nPath could be mentioned in commit description",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655581515,655581515,src/rpc/blockchain.cpp
ryanofsky,2021-06-21T17:46:40Z,"In commit ""wallet: avoid rescans if under the snapshot"" (88a90b394c8936c695717927954b2b4299ff899b)\n\nThis seems strange. Why would this be returning number of transactions instead of the height? This seems like it would cause the `rescan_height < chain.getLowestBlockDataHeight()` below to be true in cases when it should be false and ignore the wallet sync error.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655586738,655586738,src/node/interfaces.cpp
ryanofsky,2021-06-21T18:55:23Z,"In commit ""validation: only send ValidationInterface callbacks for active chain"" (5505d17e21d886d85b614a13e7fc8a61d6bf4fe9)\n\nMaybe update validationinterface.h documentation to say no notifications will be sent about updates to the background chainstate. If a snapshot is loaded only notification about blocks after the snapshot are sent, IIUC",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655628898,655628898,src/validation.cpp
ryanofsky,2021-06-21T19:06:38Z,"In commit ""validation: add BackgroundBlockConnected and use it for indexing"" (0575a333ca1d02ecca7f651a41572ebd62de224b)\n\nIn general, it's not clear to me how this PR affects indexing. I assume this TODO needs to be addressed to avoid problems, but it's not really clear what problems may be or if fixing this fixes everything",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655635682,655635682,src/index/base.cpp
ryanofsky,2021-06-21T19:09:11Z,"In commit ""validation: introduce ChainstateManager::GetChainstateForNewBlock"" (a5bd8e91aaf77853f1162a21f84efbe0e9754d5f)\n\nProbably wallet change here is meant to be part of earlier wallet commit",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r655637249,655637249,src/wallet/wallet.cpp
jamesob,2021-06-22T14:06:36Z,"Absolutely, this is just totally wrong. Probably used the wrong method in the process of rebasing the `Assert(...)->` change in.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r656257050,656257050,src/node/interfaces.cpp
jamesob,2021-06-22T15:01:29Z,And probably indicates I should write a test for this.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r656310455,656310455,src/node/interfaces.cpp
jamesob,2021-06-22T18:11:59Z,"I'll elaborate on this in some form soon, but the gist of it is that if indexing has ordering requirements, it has to make particular use of the `BackgroundBlockValidated` callback (which is why I introduced it); luckily all of the indexers (as far as I'm aware) don't have strict ordering requirements and each block can more or less be processed in isolation (aside from bestblock tracking, used to",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r656467017,656467017,src/index/base.cpp
jamesob,2021-06-22T18:36:45Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r656485745,656485745,src/rpc/blockchain.cpp
ryanofsky,2021-07-12T21:45:30Z,"In commit ""validation: only send ValidationInterface callbacks for active chain"" (b63ff90d6597d1d81b198f5d4d91551fe9ff75f2)\n\nIs disconnecting the tip possible if the chain is not active? I guess the if statement could be changed to an assert if it's always supposed to be true. Or it could be good to have a comment to explain why there's no else branch BackgroundBlockDisconnected call.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r668278224,668278224,src/validation.cpp
ryanofsky,2021-07-12T21:52:26Z,"In commit ""wallet: avoid rescans if under the snapshot"" (b73572bc92c07d246f322135ef9826f7e4cbf1d6)\n\nIs this meant to be part of a different commit? Seems unrelated to the wallet change",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r668281608,668281608,src/validation.cpp
ryanofsky,2021-07-12T21:57:45Z,"In commit ""validation: indexing changes for assumeutxo"" (ad65151497e0e7ddc2c7c7bfed854a6d0b30828f)\n\nShould this only be updated if a block is connected to the active chain, not the background chain?",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r668284231,668284231,src/index/base.cpp
ryanofsky,2021-07-12T22:12:46Z,"In commit ""p2p: don't advertise until we finish all IBDs"" (8dc65c32ffb533402bc0c82ccf3f1fe5535df521)\n\nIt seems messy for individual chains have their own IBD states, and interact with shared `fImporting` and `fReindex` and `nMinimumChainWork` globals, and use their own latches.\n\nI think the IBD logic would be more straightforward if the `CChainState::IsInitialBlockDownload` method and `CCh",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r668291243,668291243,src/validation.cpp
jamesob,2021-07-17T17:03:33Z,"I think if anything, probably the reverse; if we only do this accounting for the active chain, we run the risk of giving the impression that the index has been fully built up until that point (when in reality we're waiting for block data to come in further back in the chain via the background chainstate).\n\nThis requires more thought, but my inclination is to either (i) explicitly reform the as",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r671720305,671720305,src/index/base.cpp
jamesob,2021-07-17T17:05:53Z,"Although it's worth noting that `BlockConnected` signals are [ignored by the indexer](https://github.com/jamesob/bitcoin/blob/bd07c1bc78ca41d7f03648ccf0c0db102bde9cc9/src/index/base.cpp#L242-L244) until a full indexation has completed, so this may be a moot point anyway (which I think is why I didn't materially change the code in the first place...).",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r671720487,671720487,src/index/base.cpp
jamesob,2021-07-17T17:33:13Z,"> Although it's worth noting that BlockConnected signals are ignored by the indexer until a full indexation has completed\n\nHah, just kidding - turns out that `m_synced` flips to `true` in a degenerate case when we start up with an empty datadir; i.e. if a user enables `-txindex=1` on first use. I'm not sure if jimpo intended this to happen when he wrote it, but because `m_chain` has no entries",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r671723451,671723451,src/index/base.cpp
ryanofsky,2021-07-25T18:16:07Z,"In commit ""doc: add assumeutxo notes"" (e9e673950b906957b9b691ac0efa3894463a0f92)\n\nspelling commands",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676183531,676183531,doc/assumeutxo.md
ryanofsky,2021-07-25T19:11:20Z,"In commit ""chain: add BLOCK_ASSUMED_VALID for use with assumeutxo"" (0e8854e70374a7fff7efa32e13cb2effbd782f40)\n\nIs it possible to drop ""almost certainly"" here? If there is actually ambiguity, it should be possible to say what the ambiguity is.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676189715,676189715,src/chain.h
ryanofsky,2021-07-25T20:21:42Z,"In commit ""validation: indexing changes for assumeutxo"" (cba98bb776763e5ca8e290504004dadc8c48f30d)\n\nWhy does indexing have to be aware of assumueutxo chainstates? In the abstract, it seems like indexes should only need to know:\n\n- When the tip is changing (to update best block pointer and to undo rewinds)\n- When new block data is available (to add to the index)\n\nIf it's true that ind",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676197448,676197448,src/index/base.cpp
ryanofsky,2021-07-26T13:42:26Z,"In commit ""validation: indexing changes for assumeutxo"" (cba98bb776763e5ca8e290504004dadc8c48f30d)\n\nI think this comment would make more sense in the migratedata method as part of the commment describing how it works. Otherwise it's not clear why there is any relationship between the database format and IBD, much less the relationship to multiple chainstates",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676615118,676615118,src/index/txindex.cpp
ryanofsky,2021-07-26T13:45:24Z,"In commit ""add utxo snapshot detection and add to init"" (9e277298d8529d1afb8743a6e67cc5a3363d2703)\n\nCould this logic be moved to chainstatemanager, maybe inside the InitializeChainstate. It would seem better for it to be encapsulated there and not have to be exposed to application init code.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676617574,676617574,src/init.cpp
ryanofsky,2021-07-26T13:48:45Z,"In commit ""net_processing: work with multiple chainstates"" (39addc71a0c6f574acfc5e3fc6c9e75083530b81)\n\n`const CChainState* const` could be `const CChainState*` because map keys are always const",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676620638,676620638,src/net_processing.cpp
jamesob,2021-07-29T16:49:39Z,"The reason the indexing code needs to be aware of background chainstates is because the best block pointer (`m_best_block_index`) was (and is) used to signal that all blocks including and beneath that blockhash have been indexed. When you've got two separate chainstates throwing off BlockConnected events, you basically have to reserve updating that pointer for the background chainstate because oth",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r679323066,679323066,src/index/base.cpp
ryanofsky,2021-07-29T17:16:41Z,"Yeah I think what I'm asking is beyond the scope of the PR. It seems to me ideally validation code would notify indexing code ""the tip is changing"" and ""here is some new block data"" in 2 separate events not 3 mixed up events (block connected, background block connected, rewind), and also that indexing code would more passively receive data instead of querying chainstatemanager to reverse-engineer ",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r679341922,679341922,src/index/base.cpp
jamesob,2021-07-29T17:52:28Z,That's a good point; will move that over.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r679366512,679366512,src/index/txindex.cpp
jamesob,2021-08-05T18:12:36Z,"Fixed - I've left the comment here, but added one to the method.",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r683682559,683682559,src/index/txindex.cpp
jamesob,2021-08-05T18:15:44Z,"I took a run at doing this (https://github.com/jamesob/bitcoin/commit/cec687abb4f587d756bbaac62c02c09704cd8a42), but the refactor necessary to encapsulate all of the chainstate init logic is fairly complicated and difficult to verify correctness for. I burned more time than I'd like to admit trying to get this to work, but was getting a weird race/segfault with the loadblk thread as a result of mo",https://github.com/bitcoin/bitcoin/pull/15606#discussion_r683684768,683684768,src/init.cpp
jamesob,2021-08-05T18:23:01Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r683689658,683689658,src/validation.cpp
jamesob,2021-08-05T18:24:47Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15606#discussion_r683690795,683690795,src/net_processing.cpp
