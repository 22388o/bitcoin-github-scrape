[
  {
    "sha": "fb78cc23784b2fa478324aac35ca76c7cfe683a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjc4Y2MyMzc4NGIyZmE0NzgzMjRhYWMzNWNhNzZjN2NmZTY4M2E0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-20T13:18:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-27T05:00:29Z"
      },
      "message": "Split up bitcoinrpc (code movement only)\n\nSplit bitcoinrpc up into\n\n- rpcserver: bitcoind RPC server\n- rpcclient: bitcoin-cli RPC client\n- rpcprotocol: shared common HTTP/JSON-RPC protocol code\n\nOne step towards making bitcoin-cli independent from the rest\nof the code, and thus a smaller executable that doesn't have to\nbe linked against leveldb.\n\nThis commit only does code movement, there are no functional changes.",
      "tree": {
        "sha": "85b9ec58146c64dbb52b1bcd1fea938055be7500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85b9ec58146c64dbb52b1bcd1fea938055be7500"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb78cc23784b2fa478324aac35ca76c7cfe683a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb78cc23784b2fa478324aac35ca76c7cfe683a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb78cc23784b2fa478324aac35ca76c7cfe683a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb78cc23784b2fa478324aac35ca76c7cfe683a4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03b6a1cee4fe7f38ca16c0bc2d08d8d4d1288f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03b6a1cee4fe7f38ca16c0bc2d08d8d4d1288f2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03b6a1cee4fe7f38ca16c0bc2d08d8d4d1288f2f"
      }
    ],
    "stats": {
      "total": 1321,
      "additions": 692,
      "deletions": 629
    },
    "files": [
      {
        "sha": "561d2ca7aee3b21c4cefa519f789b8bcc381dbff",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -12,7 +12,10 @@ DIST_SUBDIRS = . qt test\n .PHONY: FORCE\n # bitcoin core #\n BITCOIN_CORE_H = addrman.h alert.h allocators.h base58.h bignum.h \\\n-  bitcoinrpc.h bloom.h chainparams.h checkpoints.h checkqueue.h \\\n+  rpcclient.h \\\n+  rpcprotocol.h \\\n+  rpcserver.h \\\n+  bloom.h chainparams.h checkpoints.h checkqueue.h \\\n   clientversion.h coincontrol.h compat.h core.h coins.h crypter.h db.h hash.h init.h \\\n   key.h keystore.h leveldbwrapper.h limitedmap.h main.h miner.h mruset.h \\\n   netbase.h net.h noui.h protocol.h script.h serialize.h sync.h threadsafety.h \\\n@@ -30,7 +33,11 @@ obj/build.h: FORCE\n \t  $(abs_top_srcdir)\n version.o: obj/build.h\n \n-libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp bitcoinrpc.cpp bloom.cpp \\\n+libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp \\\n+  rpcclient.cpp \\\n+  rpcprotocol.cpp \\\n+  rpcserver.cpp \\\n+  bloom.cpp \\\n   chainparams.cpp checkpoints.cpp core.cpp coins.cpp crypter.cpp db.cpp hash.cpp \\\n   init.cpp key.cpp keystore.cpp leveldbwrapper.cpp main.cpp miner.cpp \\\n   netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\"
      },
      {
        "sha": "e4a648e980538403c30c477cd6099e7c9bd280dd",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"util.h\"\n #include \"init.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"rpcclient.h\"\n #include \"ui_interface.h\" /* for _(...) */\n \n #include <boost/filesystem/operations.hpp>"
      },
      {
        "sha": "fdc66b8d6536d78dda75c39a077dd2b3c0bb4345",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,7 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n+#include \"rpcclient.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"noui.h\""
      },
      {
        "sha": "da70ef9dbab3c373a2594f04f7455ee54306cd21",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -10,7 +10,7 @@\n #include \"init.h\"\n \n #include \"addrman.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"checkpoints.h\"\n #include \"miner.h\"\n #include \"net.h\""
      },
      {
        "sha": "d43cdc7e5f52ebdbd1d9088cb50114eb08ef4a76",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -8,7 +8,8 @@\n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n \n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n+#include \"rpcclient.h\"\n \n #include \"json/json_spirit_value.h\"\n #include <openssl/crypto.h>"
      },
      {
        "sha": "71663bbb34ff00506ae08e75e19de3f19ea1daf7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,9 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n-\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"main.h\"\n #include \"sync.h\"\n "
      },
      {
        "sha": "2667a5d5a5ce86cb7a28781b7d268a5263f3a406",
        "filename": "src/rpcclient.cpp",
        "status": "added",
        "additions": 246,
        "deletions": 0,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcclient.h\"\n+\n+#include \"rpcprotocol.h\"\n+#include \"util.h\"\n+#include \"ui_interface.h\"\n+#include \"chainparams.h\" // for Params().RPCPort()\n+\n+#include <stdint.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/asio.hpp>\n+#include <boost/asio/ssl.hpp>\n+#include <boost/bind.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/iostreams/concepts.hpp>\n+#include <boost/iostreams/stream.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/shared_ptr.hpp>\n+#include \"json/json_spirit_writer_template.h\"\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::asio;\n+using namespace json_spirit;\n+\n+Object CallRPC(const string& strMethod, const Array& params)\n+{\n+    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n+        throw runtime_error(strprintf(\n+            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                GetConfigFile().string().c_str()));\n+\n+    // Connect to localhost\n+    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n+    asio::io_service io_service;\n+    ssl::context context(io_service, ssl::context::sslv23);\n+    context.set_options(ssl::context::no_sslv2);\n+    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n+    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n+    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n+\n+    bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n+    do {\n+        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort())));\n+        if (fConnected) break;\n+        if (fWait)\n+            MilliSleep(1000);\n+        else\n+            throw runtime_error(\"couldn't connect to server\");\n+    } while (fWait);\n+\n+    // HTTP basic authentication\n+    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n+    map<string, string> mapRequestHeaders;\n+    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n+\n+    // Send request\n+    string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n+    stream << strPost << std::flush;\n+\n+    // Receive HTTP reply status\n+    int nProto = 0;\n+    int nStatus = ReadHTTPStatus(stream, nProto);\n+\n+    // Receive HTTP reply message headers and body\n+    map<string, string> mapHeaders;\n+    string strReply;\n+    ReadHTTPMessage(stream, mapHeaders, strReply, nProto);\n+\n+    if (nStatus == HTTP_UNAUTHORIZED)\n+        throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n+    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n+        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n+    else if (strReply.empty())\n+        throw runtime_error(\"no response from server\");\n+\n+    // Parse reply\n+    Value valReply;\n+    if (!read_string(strReply, valReply))\n+        throw runtime_error(\"couldn't parse reply from server\");\n+    const Object& reply = valReply.get_obj();\n+    if (reply.empty())\n+        throw runtime_error(\"expected reply to have result, error and id properties\");\n+\n+    return reply;\n+}\n+\n+template<typename T>\n+void ConvertTo(Value& value, bool fAllowNull=false)\n+{\n+    if (fAllowNull && value.type() == null_type)\n+        return;\n+    if (value.type() == str_type)\n+    {\n+        // reinterpret string as unquoted json value\n+        Value value2;\n+        string strJSON = value.get_str();\n+        if (!read_string(strJSON, value2))\n+            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n+        ConvertTo<T>(value2, fAllowNull);\n+        value = value2;\n+    }\n+    else\n+    {\n+        value = value.get_value<T>();\n+    }\n+}\n+\n+// Convert strings to command-specific RPC representation\n+Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n+{\n+    Array params;\n+    BOOST_FOREACH(const std::string &param, strParams)\n+        params.push_back(param);\n+\n+    int n = params.size();\n+\n+    //\n+    // Special case non-string parameter types\n+    //\n+    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n+    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n+    if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n+    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n+    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n+    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n+    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n+    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n+    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n+    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n+    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n+    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n+    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n+    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n+    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n+    return params;\n+}\n+\n+int CommandLineRPC(int argc, char *argv[])\n+{\n+    string strPrint;\n+    int nRet = 0;\n+    try\n+    {\n+        // Skip switches\n+        while (argc > 1 && IsSwitchChar(argv[1][0]))\n+        {\n+            argc--;\n+            argv++;\n+        }\n+\n+        // Method\n+        if (argc < 2)\n+            throw runtime_error(\"too few parameters\");\n+        string strMethod = argv[1];\n+\n+        // Parameters default to strings\n+        std::vector<std::string> strParams(&argv[2], &argv[argc]);\n+        Array params = RPCConvertValues(strMethod, strParams);\n+\n+        // Execute\n+        Object reply = CallRPC(strMethod, params);\n+\n+        // Parse reply\n+        const Value& result = find_value(reply, \"result\");\n+        const Value& error  = find_value(reply, \"error\");\n+\n+        if (error.type() != null_type)\n+        {\n+            // Error\n+            strPrint = \"error: \" + write_string(error, false);\n+            int code = find_value(error.get_obj(), \"code\").get_int();\n+            nRet = abs(code);\n+        }\n+        else\n+        {\n+            // Result\n+            if (result.type() == null_type)\n+                strPrint = \"\";\n+            else if (result.type() == str_type)\n+                strPrint = result.get_str();\n+            else\n+                strPrint = write_string(result, true);\n+        }\n+    }\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n+    catch (std::exception& e) {\n+        strPrint = string(\"error: \") + e.what();\n+        nRet = 87;\n+    }\n+    catch (...) {\n+        PrintException(NULL, \"CommandLineRPC()\");\n+    }\n+\n+    if (strPrint != \"\")\n+    {\n+        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+    }\n+    return nRet;\n+}"
      },
      {
        "sha": "f3ea56c25b985ae20ce55a4afa209569901401f1",
        "filename": "src/rpcclient.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOINRPC_CLIENT_H_\n+#define _BITCOINRPC_CLIENT_H_ 1\n+\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+\n+int CommandLineRPC(int argc, char *argv[]);\n+\n+json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n+\n+#endif"
      },
      {
        "sha": "92f4c2c6dd265c68efcb15ac6ce915a48d154337",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -2,10 +2,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n-\n #include \"base58.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"sync.h\""
      },
      {
        "sha": "131a258c8451e35bfb7f71a87141d16460dff6fb",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"chainparams.h\"\n #include \"db.h\"\n #include \"init.h\""
      },
      {
        "sha": "a9fdaf3c60c980bf6b8180f9a5824ccfa963b044",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -2,9 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n-\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"protocol.h\""
      },
      {
        "sha": "4a2241edaa5ae10b70650e741b0f5ce8426a0d16",
        "filename": "src/rpcprotocol.cpp",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -0,0 +1,262 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcprotocol.h\"\n+\n+#include \"util.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/asio.hpp>\n+#include <boost/asio/ssl.hpp>\n+#include <boost/bind.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/iostreams/concepts.hpp>\n+#include <boost/iostreams/stream.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/shared_ptr.hpp>\n+#include \"json/json_spirit_writer_template.h\"\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::asio;\n+using namespace json_spirit;\n+\n+//\n+// HTTP protocol\n+//\n+// This ain't Apache.  We're just using HTTP header for the length field\n+// and to be compatible with other JSON-RPC implementations.\n+//\n+\n+string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)\n+{\n+    ostringstream s;\n+    s << \"POST / HTTP/1.1\\r\\n\"\n+      << \"User-Agent: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\n+      << \"Host: 127.0.0.1\\r\\n\"\n+      << \"Content-Type: application/json\\r\\n\"\n+      << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n+      << \"Connection: close\\r\\n\"\n+      << \"Accept: application/json\\r\\n\";\n+    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n+        s << item.first << \": \" << item.second << \"\\r\\n\";\n+    s << \"\\r\\n\" << strMsg;\n+\n+    return s.str();\n+}\n+\n+static string rfc1123Time()\n+{\n+    char buffer[64];\n+    time_t now;\n+    time(&now);\n+    struct tm* now_gmt = gmtime(&now);\n+    string locale(setlocale(LC_TIME, NULL));\n+    setlocale(LC_TIME, \"C\"); // we want POSIX (aka \"C\") weekday/month strings\n+    strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);\n+    setlocale(LC_TIME, locale.c_str());\n+    return string(buffer);\n+}\n+\n+string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n+{\n+    if (nStatus == HTTP_UNAUTHORIZED)\n+        return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n+            \"Date: %s\\r\\n\"\n+            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n+            \"WWW-Authenticate: Basic realm=\\\"jsonrpc\\\"\\r\\n\"\n+            \"Content-Type: text/html\\r\\n\"\n+            \"Content-Length: 296\\r\\n\"\n+            \"\\r\\n\"\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\"\\r\\n\"\n+            \"\\\"http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd\\\">\\r\\n\"\n+            \"<HTML>\\r\\n\"\n+            \"<HEAD>\\r\\n\"\n+            \"<TITLE>Error</TITLE>\\r\\n\"\n+            \"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"\n+            \"</HEAD>\\r\\n\"\n+            \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n+            \"</HTML>\\r\\n\", rfc1123Time().c_str(), FormatFullVersion().c_str());\n+    const char *cStatus;\n+         if (nStatus == HTTP_OK) cStatus = \"OK\";\n+    else if (nStatus == HTTP_BAD_REQUEST) cStatus = \"Bad Request\";\n+    else if (nStatus == HTTP_FORBIDDEN) cStatus = \"Forbidden\";\n+    else if (nStatus == HTTP_NOT_FOUND) cStatus = \"Not Found\";\n+    else if (nStatus == HTTP_INTERNAL_SERVER_ERROR) cStatus = \"Internal Server Error\";\n+    else cStatus = \"\";\n+    return strprintf(\n+            \"HTTP/1.1 %d %s\\r\\n\"\n+            \"Date: %s\\r\\n\"\n+            \"Connection: %s\\r\\n\"\n+            \"Content-Length: %\"PRIszu\"\\r\\n\"\n+            \"Content-Type: application/json\\r\\n\"\n+            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n+            \"\\r\\n\"\n+            \"%s\",\n+        nStatus,\n+        cStatus,\n+        rfc1123Time().c_str(),\n+        keepalive ? \"keep-alive\" : \"close\",\n+        strMsg.size(),\n+        FormatFullVersion().c_str(),\n+        strMsg.c_str());\n+}\n+\n+bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n+                         string& http_method, string& http_uri)\n+{\n+    string str;\n+    getline(stream, str);\n+\n+    // HTTP request line is space-delimited\n+    vector<string> vWords;\n+    boost::split(vWords, str, boost::is_any_of(\" \"));\n+    if (vWords.size() < 2)\n+        return false;\n+\n+    // HTTP methods permitted: GET, POST\n+    http_method = vWords[0];\n+    if (http_method != \"GET\" && http_method != \"POST\")\n+        return false;\n+\n+    // HTTP URI must be an absolute path, relative to current host\n+    http_uri = vWords[1];\n+    if (http_uri.size() == 0 || http_uri[0] != '/')\n+        return false;\n+\n+    // parse proto, if present\n+    string strProto = \"\";\n+    if (vWords.size() > 2)\n+        strProto = vWords[2];\n+\n+    proto = 0;\n+    const char *ver = strstr(strProto.c_str(), \"HTTP/1.\");\n+    if (ver != NULL)\n+        proto = atoi(ver+7);\n+\n+    return true;\n+}\n+\n+int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n+{\n+    string str;\n+    getline(stream, str);\n+    vector<string> vWords;\n+    boost::split(vWords, str, boost::is_any_of(\" \"));\n+    if (vWords.size() < 2)\n+        return HTTP_INTERNAL_SERVER_ERROR;\n+    proto = 0;\n+    const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n+    if (ver != NULL)\n+        proto = atoi(ver+7);\n+    return atoi(vWords[1].c_str());\n+}\n+\n+int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n+{\n+    int nLen = 0;\n+    while (true)\n+    {\n+        string str;\n+        std::getline(stream, str);\n+        if (str.empty() || str == \"\\r\")\n+            break;\n+        string::size_type nColon = str.find(\":\");\n+        if (nColon != string::npos)\n+        {\n+            string strHeader = str.substr(0, nColon);\n+            boost::trim(strHeader);\n+            boost::to_lower(strHeader);\n+            string strValue = str.substr(nColon+1);\n+            boost::trim(strValue);\n+            mapHeadersRet[strHeader] = strValue;\n+            if (strHeader == \"content-length\")\n+                nLen = atoi(strValue.c_str());\n+        }\n+    }\n+    return nLen;\n+}\n+\n+\n+int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n+                    string>& mapHeadersRet, string& strMessageRet,\n+                    int nProto)\n+{\n+    mapHeadersRet.clear();\n+    strMessageRet = \"\";\n+\n+    // Read header\n+    int nLen = ReadHTTPHeaders(stream, mapHeadersRet);\n+    if (nLen < 0 || nLen > (int)MAX_SIZE)\n+        return HTTP_INTERNAL_SERVER_ERROR;\n+\n+    // Read message\n+    if (nLen > 0)\n+    {\n+        vector<char> vch(nLen);\n+        stream.read(&vch[0], nLen);\n+        strMessageRet = string(vch.begin(), vch.end());\n+    }\n+\n+    string sConHdr = mapHeadersRet[\"connection\"];\n+\n+    if ((sConHdr != \"close\") && (sConHdr != \"keep-alive\"))\n+    {\n+        if (nProto >= 1)\n+            mapHeadersRet[\"connection\"] = \"keep-alive\";\n+        else\n+            mapHeadersRet[\"connection\"] = \"close\";\n+    }\n+\n+    return HTTP_OK;\n+}\n+\n+//\n+// JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n+// but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were\n+// unspecified (HTTP errors and contents of 'error').\n+//\n+// 1.0 spec: http://json-rpc.org/wiki/specification\n+// 1.2 spec: http://groups.google.com/group/json-rpc/web/json-rpc-over-http\n+// http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx\n+//\n+\n+string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)\n+{\n+    Object request;\n+    request.push_back(Pair(\"method\", strMethod));\n+    request.push_back(Pair(\"params\", params));\n+    request.push_back(Pair(\"id\", id));\n+    return write_string(Value(request), false) + \"\\n\";\n+}\n+\n+Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n+{\n+    Object reply;\n+    if (error.type() != null_type)\n+        reply.push_back(Pair(\"result\", Value::null));\n+    else\n+        reply.push_back(Pair(\"result\", result));\n+    reply.push_back(Pair(\"error\", error));\n+    reply.push_back(Pair(\"id\", id));\n+    return reply;\n+}\n+\n+string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n+{\n+    Object reply = JSONRPCReplyObj(result, error, id);\n+    return write_string(Value(reply), false) + \"\\n\";\n+}\n+\n+Object JSONRPCError(int code, const string& message)\n+{\n+    Object error;\n+    error.push_back(Pair(\"code\", code));\n+    error.push_back(Pair(\"message\", message));\n+    return error;\n+}"
      },
      {
        "sha": "6bf371e759a8c283ea25f2865ce03a25655b7949",
        "filename": "src/rpcprotocol.h",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef _BITCOINRPC_PROTOCOL_H_\n+#define _BITCOINRPC_PROTOCOL_H_ 1\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+#include <boost/iostreams/concepts.hpp>\n+#include <boost/iostreams/stream.hpp>\n+#include <boost/asio.hpp>\n+#include <boost/asio/ssl.hpp>\n+\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+\n+// HTTP status codes\n+enum HTTPStatusCode\n+{\n+    HTTP_OK                    = 200,\n+    HTTP_BAD_REQUEST           = 400,\n+    HTTP_UNAUTHORIZED          = 401,\n+    HTTP_FORBIDDEN             = 403,\n+    HTTP_NOT_FOUND             = 404,\n+    HTTP_INTERNAL_SERVER_ERROR = 500,\n+};\n+\n+// Bitcoin RPC error codes\n+enum RPCErrorCode\n+{\n+    // Standard JSON-RPC 2.0 errors\n+    RPC_INVALID_REQUEST  = -32600,\n+    RPC_METHOD_NOT_FOUND = -32601,\n+    RPC_INVALID_PARAMS   = -32602,\n+    RPC_INTERNAL_ERROR   = -32603,\n+    RPC_PARSE_ERROR      = -32700,\n+\n+    // General application defined errors\n+    RPC_MISC_ERROR                  = -1,  // std::exception thrown in command handling\n+    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  // Server is in safe mode, and command is not allowed in safe mode\n+    RPC_TYPE_ERROR                  = -3,  // Unexpected type was passed as parameter\n+    RPC_INVALID_ADDRESS_OR_KEY      = -5,  // Invalid address or key\n+    RPC_OUT_OF_MEMORY               = -7,  // Ran out of memory during operation\n+    RPC_INVALID_PARAMETER           = -8,  // Invalid, missing or duplicate parameter\n+    RPC_DATABASE_ERROR              = -20, // Database error\n+    RPC_DESERIALIZATION_ERROR       = -22, // Error parsing or validating structure in raw format\n+    RPC_SERVER_NOT_STARTED          = -18, // RPC server was not started (StartRPCThreads() not called)\n+\n+    // P2P client errors\n+    RPC_CLIENT_NOT_CONNECTED        = -9,  // Bitcoin is not connected\n+    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, // Still downloading initial blocks\n+    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, // Node is already added\n+    RPC_CLIENT_NODE_NOT_ADDED       = -24, // Node has not been added before\n+\n+    // Wallet errors\n+    RPC_WALLET_ERROR                = -4,  // Unspecified problem with wallet (key not found etc.)\n+    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  // Not enough funds in wallet or account\n+    RPC_WALLET_INVALID_ACCOUNT_NAME = -11, // Invalid account name\n+    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, // Keypool ran out, call keypoolrefill first\n+    RPC_WALLET_UNLOCK_NEEDED        = -13, // Enter the wallet passphrase with walletpassphrase first\n+    RPC_WALLET_PASSPHRASE_INCORRECT = -14, // The wallet passphrase entered was incorrect\n+    RPC_WALLET_WRONG_ENC_STATE      = -15, // Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)\n+    RPC_WALLET_ENCRYPTION_FAILED    = -16, // Failed to encrypt the wallet\n+    RPC_WALLET_ALREADY_UNLOCKED     = -17, // Wallet is already unlocked\n+};\n+\n+//\n+// IOStream device that speaks SSL but can also speak non-SSL\n+//\n+template <typename Protocol>\n+class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidirectional> {\n+public:\n+    SSLIOStreamDevice(boost::asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)\n+    {\n+        fUseSSL = fUseSSLIn;\n+        fNeedHandshake = fUseSSLIn;\n+    }\n+\n+    void handshake(boost::asio::ssl::stream_base::handshake_type role)\n+    {\n+        if (!fNeedHandshake) return;\n+        fNeedHandshake = false;\n+        stream.handshake(role);\n+    }\n+    std::streamsize read(char* s, std::streamsize n)\n+    {\n+        handshake(boost::asio::ssl::stream_base::server); // HTTPS servers read first\n+        if (fUseSSL) return stream.read_some(boost::asio::buffer(s, n));\n+        return stream.next_layer().read_some(boost::asio::buffer(s, n));\n+    }\n+    std::streamsize write(const char* s, std::streamsize n)\n+    {\n+        handshake(boost::asio::ssl::stream_base::client); // HTTPS clients write first\n+        if (fUseSSL) return boost::asio::write(stream, boost::asio::buffer(s, n));\n+        return boost::asio::write(stream.next_layer(), boost::asio::buffer(s, n));\n+    }\n+    bool connect(const std::string& server, const std::string& port)\n+    {\n+        boost::asio::ip::tcp::resolver resolver(stream.get_io_service());\n+        boost::asio::ip::tcp::resolver::query query(server.c_str(), port.c_str());\n+        boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);\n+        boost::asio::ip::tcp::resolver::iterator end;\n+        boost::system::error_code error = boost::asio::error::host_not_found;\n+        while (error && endpoint_iterator != end)\n+        {\n+            stream.lowest_layer().close();\n+            stream.lowest_layer().connect(*endpoint_iterator++, error);\n+        }\n+        if (error)\n+            return false;\n+        return true;\n+    }\n+\n+private:\n+    bool fNeedHandshake;\n+    bool fUseSSL;\n+    boost::asio::ssl::stream<typename Protocol::socket>& stream;\n+};\n+\n+std::string HTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n+std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive);\n+bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n+                         std::string& http_method, std::string& http_uri);\n+int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto);\n+int ReadHTTPHeaders(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet);\n+int ReadHTTPMessage(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet,\n+                    std::string& strMessageRet, int nProto);\n+std::string JSONRPCRequest(const std::string& strMethod, const json_spirit::Array& params, const json_spirit::Value& id);\n+json_spirit::Object JSONRPCReplyObj(const json_spirit::Value& result, const json_spirit::Value& error, const json_spirit::Value& id);\n+std::string JSONRPCReply(const json_spirit::Value& result, const json_spirit::Value& error, const json_spirit::Value& id);\n+json_spirit::Object JSONRPCError(int code, const std::string& message);\n+\n+#endif"
      },
      {
        "sha": "939ca96f766ed9a009f5aac40e4b9a6d4bb982ba",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,10 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n-\n #include \"base58.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"init.h\"\n #include \"net.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "c746d8c8fb9569dcfa64079fd025c7ab2137cb86",
        "filename": "src/rpcserver.cpp",
        "status": "renamed",
        "additions": 3,
        "deletions": 547,
        "changes": 550,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n \n #include \"base58.h\"\n #include \"init.h\"\n@@ -36,14 +36,6 @@ static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n \n-Object JSONRPCError(int code, const string& message)\n-{\n-    Object error;\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n-    return error;\n-}\n-\n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n                   bool fAllowNull)\n@@ -318,194 +310,6 @@ const CRPCCommand *CRPCTable::operator[](string name) const\n     return (*it).second;\n }\n \n-//\n-// HTTP protocol\n-//\n-// This ain't Apache.  We're just using HTTP header for the length field\n-// and to be compatible with other JSON-RPC implementations.\n-//\n-\n-string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)\n-{\n-    ostringstream s;\n-    s << \"POST / HTTP/1.1\\r\\n\"\n-      << \"User-Agent: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\n-      << \"Host: 127.0.0.1\\r\\n\"\n-      << \"Content-Type: application/json\\r\\n\"\n-      << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n-      << \"Connection: close\\r\\n\"\n-      << \"Accept: application/json\\r\\n\";\n-    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n-        s << item.first << \": \" << item.second << \"\\r\\n\";\n-    s << \"\\r\\n\" << strMsg;\n-\n-    return s.str();\n-}\n-\n-string rfc1123Time()\n-{\n-    char buffer[64];\n-    time_t now;\n-    time(&now);\n-    struct tm* now_gmt = gmtime(&now);\n-    string locale(setlocale(LC_TIME, NULL));\n-    setlocale(LC_TIME, \"C\"); // we want POSIX (aka \"C\") weekday/month strings\n-    strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);\n-    setlocale(LC_TIME, locale.c_str());\n-    return string(buffer);\n-}\n-\n-static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n-{\n-    if (nStatus == HTTP_UNAUTHORIZED)\n-        return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"WWW-Authenticate: Basic realm=\\\"jsonrpc\\\"\\r\\n\"\n-            \"Content-Type: text/html\\r\\n\"\n-            \"Content-Length: 296\\r\\n\"\n-            \"\\r\\n\"\n-            \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\"\\r\\n\"\n-            \"\\\"http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd\\\">\\r\\n\"\n-            \"<HTML>\\r\\n\"\n-            \"<HEAD>\\r\\n\"\n-            \"<TITLE>Error</TITLE>\\r\\n\"\n-            \"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"\n-            \"</HEAD>\\r\\n\"\n-            \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n-            \"</HTML>\\r\\n\", rfc1123Time().c_str(), FormatFullVersion().c_str());\n-    const char *cStatus;\n-         if (nStatus == HTTP_OK) cStatus = \"OK\";\n-    else if (nStatus == HTTP_BAD_REQUEST) cStatus = \"Bad Request\";\n-    else if (nStatus == HTTP_FORBIDDEN) cStatus = \"Forbidden\";\n-    else if (nStatus == HTTP_NOT_FOUND) cStatus = \"Not Found\";\n-    else if (nStatus == HTTP_INTERNAL_SERVER_ERROR) cStatus = \"Internal Server Error\";\n-    else cStatus = \"\";\n-    return strprintf(\n-            \"HTTP/1.1 %d %s\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Connection: %s\\r\\n\"\n-            \"Content-Length: %\"PRIszu\"\\r\\n\"\n-            \"Content-Type: application/json\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"\\r\\n\"\n-            \"%s\",\n-        nStatus,\n-        cStatus,\n-        rfc1123Time().c_str(),\n-        keepalive ? \"keep-alive\" : \"close\",\n-        strMsg.size(),\n-        FormatFullVersion().c_str(),\n-        strMsg.c_str());\n-}\n-\n-bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n-                         string& http_method, string& http_uri)\n-{\n-    string str;\n-    getline(stream, str);\n-\n-    // HTTP request line is space-delimited\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return false;\n-\n-    // HTTP methods permitted: GET, POST\n-    http_method = vWords[0];\n-    if (http_method != \"GET\" && http_method != \"POST\")\n-        return false;\n-\n-    // HTTP URI must be an absolute path, relative to current host\n-    http_uri = vWords[1];\n-    if (http_uri.size() == 0 || http_uri[0] != '/')\n-        return false;\n-\n-    // parse proto, if present\n-    string strProto = \"\";\n-    if (vWords.size() > 2)\n-        strProto = vWords[2];\n-\n-    proto = 0;\n-    const char *ver = strstr(strProto.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-\n-    return true;\n-}\n-\n-int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n-{\n-    string str;\n-    getline(stream, str);\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-    proto = 0;\n-    const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-    return atoi(vWords[1].c_str());\n-}\n-\n-int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n-{\n-    int nLen = 0;\n-    while (true)\n-    {\n-        string str;\n-        std::getline(stream, str);\n-        if (str.empty() || str == \"\\r\")\n-            break;\n-        string::size_type nColon = str.find(\":\");\n-        if (nColon != string::npos)\n-        {\n-            string strHeader = str.substr(0, nColon);\n-            boost::trim(strHeader);\n-            boost::to_lower(strHeader);\n-            string strValue = str.substr(nColon+1);\n-            boost::trim(strValue);\n-            mapHeadersRet[strHeader] = strValue;\n-            if (strHeader == \"content-length\")\n-                nLen = atoi(strValue.c_str());\n-        }\n-    }\n-    return nLen;\n-}\n-\n-int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n-                    string>& mapHeadersRet, string& strMessageRet,\n-                    int nProto)\n-{\n-    mapHeadersRet.clear();\n-    strMessageRet = \"\";\n-\n-    // Read header\n-    int nLen = ReadHTTPHeaders(stream, mapHeadersRet);\n-    if (nLen < 0 || nLen > (int)MAX_SIZE)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-\n-    // Read message\n-    if (nLen > 0)\n-    {\n-        vector<char> vch(nLen);\n-        stream.read(&vch[0], nLen);\n-        strMessageRet = string(vch.begin(), vch.end());\n-    }\n-\n-    string sConHdr = mapHeadersRet[\"connection\"];\n-\n-    if ((sConHdr != \"close\") && (sConHdr != \"keep-alive\"))\n-    {\n-        if (nProto >= 1)\n-            mapHeadersRet[\"connection\"] = \"keep-alive\";\n-        else\n-            mapHeadersRet[\"connection\"] = \"close\";\n-    }\n-\n-    return HTTP_OK;\n-}\n \n bool HTTPAuthorized(map<string, string>& mapHeaders)\n {\n@@ -517,43 +321,6 @@ bool HTTPAuthorized(map<string, string>& mapHeaders)\n     return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n }\n \n-//\n-// JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n-// but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were\n-// unspecified (HTTP errors and contents of 'error').\n-//\n-// 1.0 spec: http://json-rpc.org/wiki/specification\n-// 1.2 spec: http://groups.google.com/group/json-rpc/web/json-rpc-over-http\n-// http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx\n-//\n-\n-string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)\n-{\n-    Object request;\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n-    return write_string(Value(request), false) + \"\\n\";\n-}\n-\n-Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n-{\n-    Object reply;\n-    if (error.type() != null_type)\n-        reply.push_back(Pair(\"result\", Value::null));\n-    else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n-    return reply;\n-}\n-\n-string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n-{\n-    Object reply = JSONRPCReplyObj(result, error, id);\n-    return write_string(Value(reply), false) + \"\\n\";\n-}\n-\n void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n {\n     // Send error reply from json-rpc error object\n@@ -588,59 +355,6 @@ bool ClientAllowed(const boost::asio::ip::address& address)\n     return false;\n }\n \n-//\n-// IOStream device that speaks SSL but can also speak non-SSL\n-//\n-template <typename Protocol>\n-class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {\n-public:\n-    SSLIOStreamDevice(asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)\n-    {\n-        fUseSSL = fUseSSLIn;\n-        fNeedHandshake = fUseSSLIn;\n-    }\n-\n-    void handshake(ssl::stream_base::handshake_type role)\n-    {\n-        if (!fNeedHandshake) return;\n-        fNeedHandshake = false;\n-        stream.handshake(role);\n-    }\n-    std::streamsize read(char* s, std::streamsize n)\n-    {\n-        handshake(ssl::stream_base::server); // HTTPS servers read first\n-        if (fUseSSL) return stream.read_some(asio::buffer(s, n));\n-        return stream.next_layer().read_some(asio::buffer(s, n));\n-    }\n-    std::streamsize write(const char* s, std::streamsize n)\n-    {\n-        handshake(ssl::stream_base::client); // HTTPS clients write first\n-        if (fUseSSL) return asio::write(stream, asio::buffer(s, n));\n-        return asio::write(stream.next_layer(), asio::buffer(s, n));\n-    }\n-    bool connect(const std::string& server, const std::string& port)\n-    {\n-        ip::tcp::resolver resolver(stream.get_io_service());\n-        ip::tcp::resolver::query query(server.c_str(), port.c_str());\n-        ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);\n-        ip::tcp::resolver::iterator end;\n-        boost::system::error_code error = asio::error::host_not_found;\n-        while (error && endpoint_iterator != end)\n-        {\n-            stream.lowest_layer().close();\n-            stream.lowest_layer().connect(*endpoint_iterator++, error);\n-        }\n-        if (error)\n-            return false;\n-        return true;\n-    }\n-\n-private:\n-    bool fNeedHandshake;\n-    bool fUseSSL;\n-    asio::ssl::stream<typename Protocol::socket>& stream;\n-};\n-\n class AcceptedConnection\n {\n public:\n@@ -720,6 +434,7 @@ static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketA\n                 boost::asio::placeholders::error));\n }\n \n+\n /**\n  * Accept and handle incoming connection.\n  */\n@@ -910,7 +625,6 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n }\n \n-\n class JSONRequest\n {\n public:\n@@ -952,6 +666,7 @@ void JSONRequest::parse(const Value& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n }\n \n+\n static Object JSONRPCExecOne(const Value& req)\n {\n     Object rpc_result;\n@@ -1105,263 +820,4 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n     }\n }\n \n-\n-Object CallRPC(const string& strMethod, const Array& params)\n-{\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n-        throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().string().c_str()));\n-\n-    // Connect to localhost\n-    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    asio::io_service io_service;\n-    ssl::context context(io_service, ssl::context::sslv23);\n-    context.set_options(ssl::context::no_sslv2);\n-    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n-    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n-\n-    bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n-    do {\n-        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort())));\n-        if (fConnected) break;\n-        if (fWait)\n-            MilliSleep(1000);\n-        else\n-            throw runtime_error(\"couldn't connect to server\");\n-    } while (fWait);\n-\n-    // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n-    map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n-\n-    // Send request\n-    string strRequest = JSONRPCRequest(strMethod, params, 1);\n-    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n-    stream << strPost << std::flush;\n-\n-    // Receive HTTP reply status\n-    int nProto = 0;\n-    int nStatus = ReadHTTPStatus(stream, nProto);\n-\n-    // Receive HTTP reply message headers and body\n-    map<string, string> mapHeaders;\n-    string strReply;\n-    ReadHTTPMessage(stream, mapHeaders, strReply, nProto);\n-\n-    if (nStatus == HTTP_UNAUTHORIZED)\n-        throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n-    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n-        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n-    else if (strReply.empty())\n-        throw runtime_error(\"no response from server\");\n-\n-    // Parse reply\n-    Value valReply;\n-    if (!read_string(strReply, valReply))\n-        throw runtime_error(\"couldn't parse reply from server\");\n-    const Object& reply = valReply.get_obj();\n-    if (reply.empty())\n-        throw runtime_error(\"expected reply to have result, error and id properties\");\n-\n-    return reply;\n-}\n-\n-\n-\n-\n-template<typename T>\n-void ConvertTo(Value& value, bool fAllowNull=false)\n-{\n-    if (fAllowNull && value.type() == null_type)\n-        return;\n-    if (value.type() == str_type)\n-    {\n-        // reinterpret string as unquoted json value\n-        Value value2;\n-        string strJSON = value.get_str();\n-        if (!read_string(strJSON, value2))\n-            throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        ConvertTo<T>(value2, fAllowNull);\n-        value = value2;\n-    }\n-    else\n-    {\n-        value = value.get_value<T>();\n-    }\n-}\n-\n-// Convert strings to command-specific RPC representation\n-Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n-{\n-    Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n-        params.push_back(param);\n-\n-    int n = params.size();\n-\n-    //\n-    // Special case non-string parameter types\n-    //\n-    if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n-    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n-    if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n-    if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n-    if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-\n-    return params;\n-}\n-\n-int CommandLineRPC(int argc, char *argv[])\n-{\n-    string strPrint;\n-    int nRet = 0;\n-    try\n-    {\n-        // Skip switches\n-        while (argc > 1 && IsSwitchChar(argv[1][0]))\n-        {\n-            argc--;\n-            argv++;\n-        }\n-\n-        // Method\n-        if (argc < 2)\n-            throw runtime_error(\"too few parameters\");\n-        string strMethod = argv[1];\n-\n-        // Parameters default to strings\n-        std::vector<std::string> strParams(&argv[2], &argv[argc]);\n-        Array params = RPCConvertValues(strMethod, strParams);\n-\n-        // Execute\n-        Object reply = CallRPC(strMethod, params);\n-\n-        // Parse reply\n-        const Value& result = find_value(reply, \"result\");\n-        const Value& error  = find_value(reply, \"error\");\n-\n-        if (error.type() != null_type)\n-        {\n-            // Error\n-            strPrint = \"error: \" + write_string(error, false);\n-            int code = find_value(error.get_obj(), \"code\").get_int();\n-            nRet = abs(code);\n-        }\n-        else\n-        {\n-            // Result\n-            if (result.type() == null_type)\n-                strPrint = \"\";\n-            else if (result.type() == str_type)\n-                strPrint = result.get_str();\n-            else\n-                strPrint = write_string(result, true);\n-        }\n-    }\n-    catch (boost::thread_interrupted) {\n-        throw;\n-    }\n-    catch (std::exception& e) {\n-        strPrint = string(\"error: \") + e.what();\n-        nRet = 87;\n-    }\n-    catch (...) {\n-        PrintException(NULL, \"CommandLineRPC()\");\n-    }\n-\n-    if (strPrint != \"\")\n-    {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n-    }\n-    return nRet;\n-}\n-\n-\n-\n-\n-#ifdef TEST\n-int main(int argc, char *argv[])\n-{\n-#ifdef _MSC_VER\n-    // Turn off Microsoft heap dump noise\n-    _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n-    _CrtSetReportFile(_CRT_WARN, CreateFile(\"NUL\", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0));\n-#endif\n-    setbuf(stdin, NULL);\n-    setbuf(stdout, NULL);\n-    setbuf(stderr, NULL);\n-\n-    try\n-    {\n-        if (argc >= 2 && string(argv[1]) == \"-server\")\n-        {\n-            LogPrintf(\"server ready\\n\");\n-            ThreadRPCServer(NULL);\n-        }\n-        else\n-        {\n-            return CommandLineRPC(argc, argv);\n-        }\n-    }\n-    catch (boost::thread_interrupted) {\n-        throw;\n-    }\n-    catch (std::exception& e) {\n-        PrintException(&e, \"main()\");\n-    } catch (...) {\n-        PrintException(NULL, \"main()\");\n-    }\n-    return 0;\n-}\n-#endif\n-\n const CRPCTable tableRPC;",
        "previous_filename": "src/bitcoinrpc.cpp"
      },
      {
        "sha": "4d29e90c0982381b5de071c7fb355d1f379e4240",
        "filename": "src/rpcserver.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 59,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,10 +3,11 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef _BITCOINRPC_H_\n-#define _BITCOINRPC_H_ 1\n+#ifndef _BITCOINRPC_SERVER_H_\n+#define _BITCOINRPC_SERVER_H_ 1\n \n #include \"uint256.h\"\n+#include \"rpcprotocol.h\"\n \n #include <list>\n #include <map>\n@@ -18,66 +19,9 @@\n #include \"json/json_spirit_writer_template.h\"\n \n class CBlockIndex;\n-class CReserveKey;\n-\n-// HTTP status codes\n-enum HTTPStatusCode\n-{\n-    HTTP_OK                    = 200,\n-    HTTP_BAD_REQUEST           = 400,\n-    HTTP_UNAUTHORIZED          = 401,\n-    HTTP_FORBIDDEN             = 403,\n-    HTTP_NOT_FOUND             = 404,\n-    HTTP_INTERNAL_SERVER_ERROR = 500,\n-};\n-\n-// Bitcoin RPC error codes\n-enum RPCErrorCode\n-{\n-    // Standard JSON-RPC 2.0 errors\n-    RPC_INVALID_REQUEST  = -32600,\n-    RPC_METHOD_NOT_FOUND = -32601,\n-    RPC_INVALID_PARAMS   = -32602,\n-    RPC_INTERNAL_ERROR   = -32603,\n-    RPC_PARSE_ERROR      = -32700,\n-\n-    // General application defined errors\n-    RPC_MISC_ERROR                  = -1,  // std::exception thrown in command handling\n-    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  // Server is in safe mode, and command is not allowed in safe mode\n-    RPC_TYPE_ERROR                  = -3,  // Unexpected type was passed as parameter\n-    RPC_INVALID_ADDRESS_OR_KEY      = -5,  // Invalid address or key\n-    RPC_OUT_OF_MEMORY               = -7,  // Ran out of memory during operation\n-    RPC_INVALID_PARAMETER           = -8,  // Invalid, missing or duplicate parameter\n-    RPC_DATABASE_ERROR              = -20, // Database error\n-    RPC_DESERIALIZATION_ERROR       = -22, // Error parsing or validating structure in raw format\n-    RPC_SERVER_NOT_STARTED          = -18, // RPC server was not started (StartRPCThreads() not called)\n-\n-    // P2P client errors\n-    RPC_CLIENT_NOT_CONNECTED        = -9,  // Bitcoin is not connected\n-    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, // Still downloading initial blocks\n-    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, // Node is already added\n-    RPC_CLIENT_NODE_NOT_ADDED       = -24, // Node has not been added before\n-\n-    // Wallet errors\n-    RPC_WALLET_ERROR                = -4,  // Unspecified problem with wallet (key not found etc.)\n-    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  // Not enough funds in wallet or account\n-    RPC_WALLET_INVALID_ACCOUNT_NAME = -11, // Invalid account name\n-    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, // Keypool ran out, call keypoolrefill first\n-    RPC_WALLET_UNLOCK_NEEDED        = -13, // Enter the wallet passphrase with walletpassphrase first\n-    RPC_WALLET_PASSPHRASE_INCORRECT = -14, // The wallet passphrase entered was incorrect\n-    RPC_WALLET_WRONG_ENC_STATE      = -15, // Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)\n-    RPC_WALLET_ENCRYPTION_FAILED    = -16, // Failed to encrypt the wallet\n-    RPC_WALLET_ALREADY_UNLOCKED     = -17, // Wallet is already unlocked\n-};\n-\n-json_spirit::Object JSONRPCError(int code, const std::string& message);\n \n void StartRPCThreads();\n void StopRPCThreads();\n-int CommandLineRPC(int argc, char *argv[]);\n-\n-/** Convert parameter values for RPC call from strings to command-specific JSON objects. */\n-json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n \n /*\n   Type-check arguments; throws JSONRPCError if wrong type given. Does not check that",
        "previous_filename": "src/bitcoinrpc.h"
      },
      {
        "sha": "1fd061547ea64cd4ac8127fc78122363cc86c849",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -3,10 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n-\n #include \"base58.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n #include \"init.h\"\n #include \"net.h\"\n #include \"netbase.h\""
      },
      {
        "sha": "76580bae4337c8dbd67accc0e28d293a54ba6588",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78cc23784b2fa478324aac35ca76c7cfe683a4/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fb78cc23784b2fa478324aac35ca76c7cfe683a4",
        "patch": "@@ -1,4 +1,5 @@\n-#include \"bitcoinrpc.h\"\n+#include \"rpcserver.h\"\n+#include \"rpcclient.h\"\n \n #include \"base58.h\"\n "
      }
    ]
  }
]