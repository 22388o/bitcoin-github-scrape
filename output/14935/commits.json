[
  {
    "sha": "c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODRjMmI4YzkyZWI1NmIzYjM3OTNmYzk1MjY1MTU4ZjVlZWIwMGRi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-12T13:31:38Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-13T08:37:23Z"
      },
      "message": "tests: Test for expected return values when calling functions returning a success code",
      "tree": {
        "sha": "38a2fd3c0b2c44f4d68bb7c7e41609207f701a10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38a2fd3c0b2c44f4d68bb7c7e41609207f701a10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d0a14703e288d72ff19d4d89defbc853233899f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0a14703e288d72ff19d4d89defbc853233899f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0a14703e288d72ff19d4d89defbc853233899f"
      }
    ],
    "stats": {
      "total": 322,
      "additions": 161,
      "deletions": 161
    },
    "files": [
      {
        "sha": "77545650d538de7f867dbba1118aa2b6b64c2955",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -154,11 +154,11 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr1_port, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret2 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"250.1.1.1:8333\");\n@@ -181,7 +181,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     bool newOnly = true;\n@@ -205,20 +205,20 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333));\n+    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    BOOST_CHECK(addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n     addrman.Good(CAddress(addr5, NODE_NONE));\n-    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    BOOST_CHECK(addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n     addrman.Good(CAddress(addr6, NODE_NONE));\n-    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333));\n+    BOOST_CHECK(addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333)));\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n@@ -242,19 +242,19 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     for (unsigned int i = 1; i < 18; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n \n         //Test: No collision in new table yet.\n         BOOST_CHECK_EQUAL(addrman.size(), i);\n     }\n \n     //Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.18\");\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 17U);\n \n     CService addr2 = ResolveService(\"250.1.1.19\");\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 18U);\n }\n \n@@ -268,7 +268,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     for (unsigned int i = 1; i < 80; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n         //Test: No collision in tried table yet.\n@@ -277,11 +277,11 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     //Test: tried table collision!\n     CService addr1 = ResolveService(\"250.1.1.80\");\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 79U);\n \n     CService addr2 = ResolveService(\"250.1.1.81\");\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n     BOOST_CHECK_EQUAL(addrman.size(), 80U);\n }\n \n@@ -298,9 +298,9 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n \n-    addrman.Add(addr1, source1);\n-    addrman.Add(addr2, source2);\n-    addrman.Add(addr3, source1);\n+    BOOST_CHECK(addrman.Add(addr1, source1));\n+    BOOST_CHECK(!addrman.Add(addr2, source2));\n+    BOOST_CHECK(addrman.Add(addr3, source1));\n \n     // Test: ensure Find returns an IP matching what we searched on.\n     CAddrInfo* info1 = addrman.Find(addr1);\n@@ -382,11 +382,11 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    addrman.Add(addr1, source1);\n-    addrman.Add(addr2, source2);\n-    addrman.Add(addr3, source1);\n-    addrman.Add(addr4, source2);\n-    addrman.Add(addr5, source1);\n+    BOOST_CHECK(addrman.Add(addr1, source1));\n+    BOOST_CHECK(addrman.Add(addr2, source2));\n+    BOOST_CHECK(addrman.Add(addr3, source1));\n+    BOOST_CHECK(addrman.Add(addr4, source2));\n+    BOOST_CHECK(addrman.Add(addr5, source1));\n \n     // GetAddr returns 23% of addresses, 23% of 5 is 1 rounded down.\n     BOOST_CHECK_EQUAL(addrman.GetAddr().size(), 1U);\n@@ -555,7 +555,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n         // No collisions yet.\n@@ -585,7 +585,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n         // No collision yet.\n@@ -595,7 +595,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Collision between 23 and 19.\n     CService addr23 = ResolveService(\"250.1.1.23\");\n-    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr23, NODE_NONE), source));\n     addrman.Good(addr23);\n \n     BOOST_CHECK(addrman.size() == 23);\n@@ -608,7 +608,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     // Lets create two collisions.\n     for (unsigned int i = 24; i < 33; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n         BOOST_CHECK(addrman.size() == i);\n@@ -617,14 +617,14 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Cause a collision.\n     CService addr33 = ResolveService(\"250.1.1.33\");\n-    addrman.Add(CAddress(addr33, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr33, NODE_NONE), source));\n     addrman.Good(addr33);\n     BOOST_CHECK(addrman.size() == 33);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.27:0\");\n \n     // Cause a second collision.\n-    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr23, NODE_NONE), source));\n     addrman.Good(addr23);\n     BOOST_CHECK(addrman.size() == 33);\n \n@@ -649,7 +649,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n         // No collision yet.\n@@ -659,7 +659,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n \n     // Collision between 23 and 19.\n     CService addr = ResolveService(\"250.1.1.23\");\n-    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.size() == 23);\n@@ -674,14 +674,14 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n     // If 23 was swapped for 19, then this should cause no collisions.\n-    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr, NODE_NONE), source));\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n     // If we insert 19 is should collide with 23.\n     CService addr19 = ResolveService(\"250.1.1.19\");\n-    addrman.Add(CAddress(addr19, NODE_NONE), source);\n+    BOOST_CHECK(!addrman.Add(CAddress(addr19, NODE_NONE), source));\n     addrman.Good(addr19);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.23:0\");"
      },
      {
        "sha": "978accf3fef4fc5ffcbdb65a83f050c6d482682b",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -355,7 +355,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n         // would get called twice).\n         vChecks[0].should_freeze = true;\n         control.Add(vChecks);\n-        control.Wait(); // Hangs here\n+        BOOST_CHECK(control.Wait()); // Hangs here\n     });\n     {\n         std::unique_lock<std::mutex> l(FrozenCleanupCheck::m);"
      },
      {
        "sha": "aa2e88477d810a58a5e777289bffaa20ef587ae8",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -176,7 +176,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             } else {\n                 removed_an_entry = true;\n                 coin.Clear();\n-                stack.back()->SpendCoin(COutPoint(txid, 0));\n+                BOOST_CHECK(stack.back()->SpendCoin(COutPoint(txid, 0)));\n             }\n         }\n \n@@ -211,14 +211,14 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n-                stack[flushIndex]->Flush();\n+                BOOST_CHECK(stack[flushIndex]->Flush());\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n                 //Remove the top cache\n-                stack.back()->Flush();\n+                BOOST_CHECK(stack.back()->Flush());\n                 delete stack.back();\n                 stack.pop_back();\n             }\n@@ -403,7 +403,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             // Disconnect the tx from the current UTXO\n             // See code in DisconnectBlock\n             // remove outputs\n-            stack.back()->SpendCoin(utxod->first);\n+            BOOST_CHECK(stack.back()->SpendCoin(utxod->first));\n             // restore inputs\n             if (!tx.IsCoinBase()) {\n                 const COutPoint &out = tx.vin[0].prevout;\n@@ -444,13 +444,13 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             // Every 100 iterations, flush an intermediate cache\n             if (stack.size() > 1 && InsecureRandBool() == 0) {\n                 unsigned int flushIndex = InsecureRandRange(stack.size() - 1);\n-                stack[flushIndex]->Flush();\n+                BOOST_CHECK(stack[flushIndex]->Flush());\n             }\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && InsecureRandBool() == 0) {\n-                stack.back()->Flush();\n+                BOOST_CHECK(stack.back()->Flush());\n                 delete stack.back();\n                 stack.pop_back();\n             }\n@@ -589,7 +589,7 @@ void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n {\n     CCoinsMap map;\n     InsertCoinsMapEntry(map, value, flags);\n-    view.BatchWrite(map, {});\n+    BOOST_CHECK(view.BatchWrite(map, {}));\n }\n \n class SingleEntryCacheTest"
      },
      {
        "sha": "ad6169ca6126efba8cb3a7ca734030e8b2dfcc0a",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -158,7 +158,7 @@ static void test_cache_erase(size_t megabytes)\n         set.insert(hashes_insert_copy[i]);\n     /** Erase the first quarter */\n     for (uint32_t i = 0; i < (n_insert / 4); ++i)\n-        set.contains(hashes[i], true);\n+        BOOST_CHECK(set.contains(hashes[i], true));\n     /** Insert the second half */\n     for (uint32_t i = (n_insert / 2); i < n_insert; ++i)\n         set.insert(hashes_insert_copy[i]);\n@@ -238,7 +238,7 @@ static void test_cache_erase_parallel(size_t megabytes)\n             size_t start = ntodo*x;\n             size_t end = ntodo*(x+1);\n             for (uint32_t i = start; i < end; ++i)\n-                set.contains(hashes[i], true);\n+                BOOST_CHECK(set.contains(hashes[i], true));\n         });\n \n     /** Wait for all threads to finish"
      },
      {
        "sha": "94e8c95345214e716f442d41b26b6f5188400d11",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         // Remove key3 before it's even been written\n         batch.Erase(key3);\n \n-        dbw.WriteBatch(batch);\n+        BOOST_CHECK(dbw.WriteBatch(batch));\n \n         BOOST_CHECK(dbw.Read(key, res));\n         BOOST_CHECK_EQUAL(res.ToString(), in.ToString());"
      },
      {
        "sha": "b49f447c33375dab96df4d6481dc728bb1df5b4d",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Test starts here\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1); // should result in getheaders\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_vSend);\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     SetMockTime(nStartTime+21*60);\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1); // should result in getheaders\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_vSend);\n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     SetMockTime(nStartTime+24*60);\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1); // should result in disconnect\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n     }\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n     SetMockTime(0);\n@@ -208,7 +208,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     }\n     {\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode2);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     }\n     {\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode2);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(connman->IsBanned(addr2));\n \n@@ -261,7 +261,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     {\n@@ -270,7 +270,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     {\n@@ -279,7 +279,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     }\n     {\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode1);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n@@ -308,7 +308,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     }\n     {\n         LOCK2(cs_main, dummyNode.cs_sendProcessing);\n-        peerLogic->SendMessages(&dummyNode);\n+        BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n     BOOST_CHECK(connman->IsBanned(addr));\n \n@@ -337,7 +337,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     CKey key;\n     key.MakeNewKey(true);\n     CBasicKeyStore keystore;\n-    keystore.AddKey(key);\n+    BOOST_CHECK(keystore.AddKey(key));\n \n     // 50 orphan transactions:\n     for (int i = 0; i < 50; i++)\n@@ -366,7 +366,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n-        SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL);\n+        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n \n         AddOrphanTx(MakeTransactionRef(tx), i);\n     }\n@@ -386,7 +386,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n             tx.vin[j].prevout.n = j;\n             tx.vin[j].prevout.hash = txPrev->GetHash();\n         }\n-        SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL);\n+        BOOST_CHECK(SignSignature(keystore, *txPrev, tx, 0, SIGHASH_ALL));\n         // Re-use same signature for other inputs\n         // (they don't have to be valid for this test)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)"
      },
      {
        "sha": "1abaabd658c22eb7249647f776c0f71212568228",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -107,7 +107,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n         } else {\n             CTxDestination dest;\n             CScript exp_script(exp_payload.begin(), exp_payload.end());\n-            ExtractDestination(exp_script, dest);\n+            BOOST_CHECK(ExtractDestination(exp_script, dest));\n             std::string address = EncodeDestination(dest);\n \n             BOOST_CHECK_EQUAL(address, exp_base58string);"
      },
      {
        "sha": "a768b4bcbd9289421a11293c6e8c5450d7eb55e9",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n \n     for (int i = 1; i <=20; ++i) {\n         sig.clear();\n-        key.Sign(msg_hash, sig, false, i);\n+        BOOST_CHECK(key.Sign(msg_hash, sig, false, i));\n         found = sig[3] == 0x21 && sig[4] == 0x00;\n         if (found) {\n             break;\n@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n         sig.clear();\n         std::string msg = \"A message to be signed\" + std::to_string(i);\n         msg_hash = Hash(msg.begin(), msg.end());\n-        key.Sign(msg_hash, sig);\n+        BOOST_CHECK(key.Sign(msg_hash, sig));\n         found = sig[3] == 0x20;\n         BOOST_CHECK(sig.size() <= 70);\n         found_small |= sig.size() < 70;"
      },
      {
        "sha": "8afe4b8a5996f649ce679dbe70e2c6329b235860",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     for (int i = 0; i < 4; i++)\n     {\n         key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n+        BOOST_CHECK(keystore.AddKey(key[i]));\n     }\n \n     CScript a_and_b;"
      },
      {
        "sha": "e7a3c963436684594df16b0920099aa407baa6d4",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -54,10 +54,10 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n         s << nUBuckets;\n \n         CService serv;\n-        Lookup(\"252.1.1.1\", serv, 7777, false);\n+        BOOST_CHECK(Lookup(\"252.1.1.1\", serv, 7777, false));\n         CAddress addr = CAddress(serv, NODE_NONE);\n         CNetAddr resolved;\n-        LookupHost(\"252.2.2.2\", resolved, false);\n+        BOOST_CHECK(LookupHost(\"252.2.2.2\", resolved, false));\n         CAddrInfo info = CAddrInfo(addr, resolved);\n         s << info;\n     }\n@@ -82,7 +82,7 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n     BOOST_CHECK(port == Params().GetDefaultPort());\n     // test set port\n     unsigned short altPort = 12345;\n-    gArgs.SoftSetArg(\"-port\", std::to_string(altPort));\n+    BOOST_CHECK(gArgs.SoftSetArg(\"-port\", std::to_string(altPort)));\n     port = GetListenPort();\n     BOOST_CHECK(port == altPort);\n }\n@@ -94,16 +94,16 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, 8333, false);\n-    Lookup(\"250.7.2.2\", addr2, 9999, false);\n-    Lookup(\"250.7.3.3\", addr3, 9999, false);\n+    BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n+    BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n+    BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, 8333, false);\n-    addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n-    addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n-    addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);\n+    BOOST_CHECK(Lookup(\"252.5.1.1\", source, 8333, false));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source));\n \n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n@@ -128,7 +128,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     CAddrMan addrman2;\n     CAddrDB adb;\n     BOOST_CHECK(addrman2.size() == 0);\n-    adb.Read(addrman2, ssPeers2);\n+    BOOST_CHECK(adb.Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 3);\n }\n \n@@ -161,7 +161,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     CAddrMan addrman2;\n     CAddrDB adb;\n     BOOST_CHECK(addrman2.size() == 0);\n-    adb.Read(addrman2, ssPeers2);\n+    BOOST_CHECK(!adb.Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 0);\n }\n "
      },
      {
        "sha": "1556b2f667872ac7d5f6564aecf07e7e05fc6c26",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     for (int i = 0; i < 4; i++)\n     {\n         key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n+        BOOST_CHECK(keystore.AddKey(key[i]));\n     }\n \n     // 8 Scripts: checking all combinations of\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        keystore.AddCScript(standardScripts[i]);\n+        BOOST_CHECK(keystore.AddCScript(standardScripts[i]));\n         evalScripts[i] = GetScriptForDestination(CScriptID(standardScripts[i]));\n     }\n \n@@ -159,7 +159,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n+        BOOST_CHECK(keystore.AddKey(key[i]));\n         keys.push_back(key[i].GetPubKey());\n     }\n \n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         outer[i] = GetScriptForDestination(CScriptID(inner[i]));\n-        keystore.AddCScript(inner[i]);\n+        BOOST_CHECK(keystore.AddCScript(inner[i]));\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -266,7 +266,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     for (int i = 0; i < 6; i++)\n     {\n         key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n+        BOOST_CHECK(keystore.AddKey(key[i]));\n     }\n     for (int i = 0; i < 3; i++)\n         keys.push_back(key[i].GetPubKey());\n@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     // First three are standard:\n     CScript pay1 = GetScriptForDestination(key[0].GetPubKey().GetID());\n-    keystore.AddCScript(pay1);\n+    BOOST_CHECK(keystore.AddCScript(pay1));\n     CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n     txFrom.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(pay1)); // P2SH (OP_CHECKSIG)\n@@ -293,7 +293,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_3 << OP_CHECKMULTISIGVERIFY;\n     oneAndTwo << OP_2 << ToByteVector(key[3].GetPubKey()) << ToByteVector(key[4].GetPubKey()) << ToByteVector(key[5].GetPubKey());\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n-    keystore.AddCScript(oneAndTwo);\n+    BOOST_CHECK(keystore.AddCScript(oneAndTwo));\n     txFrom.vout[3].scriptPubKey = GetScriptForDestination(CScriptID(oneAndTwo));\n     txFrom.vout[3].nValue = 4000;\n \n@@ -302,17 +302,17 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     for (unsigned i = 0; i < MAX_P2SH_SIGOPS; i++)\n         fifteenSigops << ToByteVector(key[i%3].GetPubKey());\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n-    keystore.AddCScript(fifteenSigops);\n+    BOOST_CHECK(keystore.AddCScript(fifteenSigops));\n     txFrom.vout[4].scriptPubKey = GetScriptForDestination(CScriptID(fifteenSigops));\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n-    keystore.AddCScript(sixteenSigops);\n+    BOOST_CHECK(keystore.AddCScript(sixteenSigops));\n     txFrom.vout[5].scriptPubKey = GetScriptForDestination(CScriptID(sixteenSigops));\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n-    keystore.AddCScript(twentySigops);\n+    BOOST_CHECK(keystore.AddCScript(twentySigops));\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(CScriptID(twentySigops));\n     txFrom.vout[6].nValue = 6000;\n "
      },
      {
        "sha": "bde82018c7b23b2d5387373f8448b9033987038c",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 47,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -398,7 +398,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n@@ -413,7 +413,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        keystore.AddKey(uncompressedKey);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n@@ -428,7 +428,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n@@ -443,7 +443,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key\n-        keystore.AddKey(uncompressedKey);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n@@ -460,12 +460,12 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript but no key\n-        keystore.AddCScript(redeemScript);\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript and key\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n@@ -478,10 +478,10 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n         scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n \n-        keystore.AddCScript(redeemscript);\n-        keystore.AddCScript(redeemscript_inner);\n-        keystore.AddCScript(scriptPubKey);\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.AddCScript(redeemscript_inner));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n@@ -494,10 +494,10 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CScript witnessscript = GetScriptForDestination(CScriptID(redeemscript));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        keystore.AddCScript(witnessscript);\n-        keystore.AddCScript(redeemscript);\n-        keystore.AddCScript(scriptPubKey);\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n@@ -509,9 +509,9 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        keystore.AddCScript(witnessscript);\n-        keystore.AddCScript(scriptPubKey);\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n@@ -524,31 +524,31 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n \n-        keystore.AddCScript(witnessscript_inner);\n-        keystore.AddCScript(witnessscript);\n-        keystore.AddCScript(scriptPubKey);\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddCScript(witnessscript_inner));\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n \n     // P2WPKH compressed\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n \n         // Keystore implicitly has key and P2SH redeemScript\n-        keystore.AddCScript(scriptPubKey);\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WPKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(uncompressedKey);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(uncompressedPubkey.GetID()));\n \n@@ -557,7 +557,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has key and P2SH redeemScript\n-        keystore.AddCScript(scriptPubKey);\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n@@ -573,19 +573,19 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 1/2 keys\n-        keystore.AddKey(uncompressedKey);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n \n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 2/2 keys\n-        keystore.AddKey(keys[1]);\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n \n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has 2/2 keys and the script\n-        keystore.AddCScript(scriptPubKey);\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n \n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n@@ -594,8 +594,8 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // P2SH multisig\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(uncompressedKey);\n-        keystore.AddKey(keys[1]);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n \n         CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n@@ -605,16 +605,16 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has redeemScript\n-        keystore.AddCScript(redeemScript);\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WSH multisig with compressed keys\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n-        keystore.AddKey(keys[1]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n@@ -624,21 +624,21 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        keystore.AddCScript(witnessScript);\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        keystore.AddCScript(scriptPubKey);\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // P2WSH multisig with uncompressed key\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(uncompressedKey);\n-        keystore.AddKey(keys[1]);\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n \n         CScript witnessScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n@@ -648,12 +648,12 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        keystore.AddCScript(witnessScript);\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        keystore.AddCScript(scriptPubKey);\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n     }\n@@ -671,22 +671,22 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has witnessScript and P2SH redeemScript, but no keys\n-        keystore.AddCScript(redeemScript);\n-        keystore.AddCScript(witnessScript);\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n \n         // Keystore has keys, witnessScript, P2SH redeemScript\n-        keystore.AddKey(keys[0]);\n-        keystore.AddKey(keys[1]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n         result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n     }\n \n     // OP_RETURN\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n@@ -698,7 +698,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // witness unspendable\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_0 << ToByteVector(ParseHex(\"aabb\"));\n@@ -710,7 +710,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // witness unknown\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_16 << ToByteVector(ParseHex(\"aabb\"));\n@@ -722,7 +722,7 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     // Nonstandard\n     {\n         CBasicKeyStore keystore;\n-        keystore.AddKey(keys[0]);\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n         scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;"
      },
      {
        "sha": "0fd271c75871c9b4c0296b420fc0c7ea39a1fcfa",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -1185,7 +1185,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         key.MakeNewKey(i%2 == 1);\n         keys.push_back(key);\n         pubkeys.push_back(key.GetPubKey());\n-        keystore.AddKey(key);\n+        BOOST_CHECK(keystore.AddKey(key));\n     }\n \n     CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n@@ -1198,39 +1198,39 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n-    SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL); // changes scriptSig\n+    BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL)); // changes scriptSig\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     SignatureData scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n-    SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL);\n+    BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n-    keystore.AddCScript(pkSingle);\n+    BOOST_CHECK(keystore.AddCScript(pkSingle));\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n-    SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL);\n+    BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     scriptSigCopy = scriptSig;\n-    SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL);\n+    BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n-    keystore.AddCScript(scriptPubKey);\n-    SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL);\n+    BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+    BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n     scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);"
      },
      {
        "sha": "c68b6bbb4de970cc75a4c3e44aece14cb4467e1a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -421,7 +421,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     CKey key;\n     key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n     CBasicKeyStore keystore;\n-    keystore.AddKeyPubKey(key, key.GetPubKey());\n+    BOOST_CHECK(keystore.AddKeyPubKey(key, key.GetPubKey()));\n     CKeyID hash = key.GetPubKey().GetID();\n     CScript scriptPubKey = CScript() << OP_0 << std::vector<unsigned char>(hash.begin(), hash.end());\n \n@@ -518,10 +518,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     pubkey3 = key3.GetPubKey();\n     pubkey1L = key1L.GetPubKey();\n     pubkey2L = key2L.GetPubKey();\n-    keystore.AddKeyPubKey(key1, pubkey1);\n-    keystore.AddKeyPubKey(key2, pubkey2);\n-    keystore.AddKeyPubKey(key1L, pubkey1L);\n-    keystore.AddKeyPubKey(key2L, pubkey2L);\n+    BOOST_CHECK(keystore.AddKeyPubKey(key1, pubkey1));\n+    BOOST_CHECK(keystore.AddKeyPubKey(key2, pubkey2));\n+    BOOST_CHECK(keystore.AddKeyPubKey(key1L, pubkey1L));\n+    BOOST_CHECK(keystore.AddKeyPubKey(key2L, pubkey2L));\n     CScript scriptPubkey1, scriptPubkey2, scriptPubkey1L, scriptPubkey2L, scriptMulti;\n     scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n     scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n@@ -531,19 +531,19 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     oneandthree.push_back(pubkey1);\n     oneandthree.push_back(pubkey3);\n     scriptMulti = GetScriptForMultisig(2, oneandthree);\n-    keystore.AddCScript(scriptPubkey1);\n-    keystore.AddCScript(scriptPubkey2);\n-    keystore.AddCScript(scriptPubkey1L);\n-    keystore.AddCScript(scriptPubkey2L);\n-    keystore.AddCScript(scriptMulti);\n-    keystore.AddCScript(GetScriptForWitness(scriptPubkey1));\n-    keystore.AddCScript(GetScriptForWitness(scriptPubkey2));\n-    keystore.AddCScript(GetScriptForWitness(scriptPubkey1L));\n-    keystore.AddCScript(GetScriptForWitness(scriptPubkey2L));\n-    keystore.AddCScript(GetScriptForWitness(scriptMulti));\n-    keystore2.AddCScript(scriptMulti);\n-    keystore2.AddCScript(GetScriptForWitness(scriptMulti));\n-    keystore2.AddKeyPubKey(key3, pubkey3);\n+    BOOST_CHECK(keystore.AddCScript(scriptPubkey1));\n+    BOOST_CHECK(keystore.AddCScript(scriptPubkey2));\n+    BOOST_CHECK(keystore.AddCScript(scriptPubkey1L));\n+    BOOST_CHECK(keystore.AddCScript(scriptPubkey2L));\n+    BOOST_CHECK(keystore.AddCScript(scriptMulti));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey1)));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey2)));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey1L)));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey2L)));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptMulti)));\n+    BOOST_CHECK(keystore2.AddCScript(scriptMulti));\n+    BOOST_CHECK(keystore2.AddCScript(GetScriptForWitness(scriptMulti)));\n+    BOOST_CHECK(keystore2.AddKeyPubKey(key3, pubkey3));\n \n     CTransactionRef output1, output2;\n     CMutableTransaction input1, input2;"
      },
      {
        "sha": "c467f2783613802824ae1f1782a4e7095315d75c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -156,8 +156,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n \n     CBasicKeyStore keystore;\n-    keystore.AddKey(coinbaseKey);\n-    keystore.AddCScript(p2pk_scriptPubKey);\n+    BOOST_CHECK(keystore.AddKey(coinbaseKey));\n+    BOOST_CHECK(keystore.AddCScript(p2pk_scriptPubKey));\n \n     // flags to test: SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, SCRIPT_VERIFY_CHECKSEQUENCE_VERIFY, SCRIPT_VERIFY_NULLDUMMY, uncompressed pubkey thing\n \n@@ -314,7 +314,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n         // Sign\n         SignatureData sigdata;\n-        ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n+        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n@@ -342,7 +342,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Sign\n         for (int i=0; i<2; ++i) {\n             SignatureData sigdata;\n-            ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n+            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n             UpdateInput(tx.vin[i], sigdata);\n         }\n "
      },
      {
        "sha": "935df34d79009919091e8f1626738a87cb6da689",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84c2b8c92eb56b3b3793fc95265158f5eeb00db/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=c84c2b8c92eb56b3b3793fc95265158f5eeb00db",
        "patch": "@@ -137,7 +137,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n+    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)"
      }
    ]
  }
]