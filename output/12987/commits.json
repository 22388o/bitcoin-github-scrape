[
  {
    "sha": "f020aca297e8a6c9f7b6a6e08e583847d37edace",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDIwYWNhMjk3ZThhNmM5ZjdiNmE2ZTA4ZTU4Mzg0N2QzN2VkYWNl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-16T09:13:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-16T15:25:11Z"
      },
      "message": "Minor Python cleanups to make flake8 pass with the new rules enabled",
      "tree": {
        "sha": "b7573c8faefcf5c92d21f1bd297fc72a8da3393f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7573c8faefcf5c92d21f1bd297fc72a8da3393f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f020aca297e8a6c9f7b6a6e08e583847d37edace",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f020aca297e8a6c9f7b6a6e08e583847d37edace",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f020aca297e8a6c9f7b6a6e08e583847d37edace",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f020aca297e8a6c9f7b6a6e08e583847d37edace/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d6992168c2bda85b18fda8f6dea08da433a0dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d6992168c2bda85b18fda8f6dea08da433a0dc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d6992168c2bda85b18fda8f6dea08da433a0dc9"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 58,
      "deletions": 50
    },
    "files": [
      {
        "sha": "e7cccaab036b32d55fa6f3d073f9498a25f98cc5",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -286,7 +286,7 @@ def exec_report(base_directory, verbose):\n def report_cmd(argv):\n     if len(argv) == 2:\n         sys.exit(REPORT_USAGE)\n-        \n+\n     base_directory = argv[2]\n     if not os.path.exists(base_directory):\n         sys.exit(\"*** bad <base_directory>: %s\" % base_directory)\n@@ -444,7 +444,7 @@ def print_file_action_message(filename, action):\n def update_cmd(argv):\n     if len(argv) != 3:\n         sys.exit(UPDATE_USAGE)\n-    \n+\n     base_directory = argv[2]\n     if not os.path.exists(base_directory):\n         sys.exit(\"*** bad base_directory: %s\" % base_directory)\n@@ -570,13 +570,13 @@ def insert_cmd(argv):\n     _, extension = os.path.splitext(filename)\n     if extension not in ['.h', '.cpp', '.cc', '.c', '.py']:\n         sys.exit(\"*** cannot insert for file extension %s\" % extension)\n-   \n+\n     if extension == '.py': \n         style = 'python'\n     else:\n         style = 'cpp'\n     exec_insert_header(filename, style)\n-         \n+\n ################################################################################\n # UI\n ################################################################################"
      },
      {
        "sha": "187ef75fb7183eac7b919c19609f7302ddf74d18",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -21,7 +21,8 @@\n import hashlib\n import subprocess\n import sys\n-import json,codecs\n+import json\n+import codecs\n try:\n     from urllib.request import Request,urlopen\n except:"
      },
      {
        "sha": "a75731ef76e60863562a42dfb56c9a506af9355a",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -41,19 +41,19 @@ def content_hash(filename):\n             file_path = os.path.join(absFolder, file)\n             fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n             fileMetaMap['contentHashPre'] = content_hash(file_path)\n-        \n+\n             try:\n                 subprocess.call([pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n                                 stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n             except:\n                 print(\"pngcrush is not installed, aborting...\")\n                 sys.exit(0)\n-        \n+\n             #verify\n             if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True):\n                 print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n                 sys.exit(1)\n-            \n+\n             fileMetaMap['sha256New'] = file_hash(file_path)\n             fileMetaMap['contentHashPost'] = content_hash(file_path)\n \n@@ -72,5 +72,5 @@ def content_hash(filename):\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n     noHashChange = noHashChange and (oldHash == newHash)\n     print(fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\")\n-    \n+\n print(\"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\")"
      },
      {
        "sha": "c609e9b3363de88c61f4c5277a5215b1e1a10b3a",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -21,7 +21,6 @@\n \n settings = {}\n \n-##### Switch endian-ness #####\n def hex_switchEndian(s):\n \t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n \tpairList = [s[i:i+2].encode() for i in range(0, len(s), 2)]"
      },
      {
        "sha": "e1304e26d0492bc824fb2987f4d6b5edc83f142c",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -21,7 +21,6 @@\n \n settings = {}\n \n-##### Switch endian-ness #####\n def hex_switchEndian(s):\n \t\"\"\" Switches the endianness of a hex string (in pairs of hex chars) \"\"\"\n \tpairList = [s[i:i+2].encode() for i in range(0, len(s), 2)]"
      },
      {
        "sha": "72eb7255f30e9c084bd8890a7d05c7b8b08dd0c6",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -34,7 +34,8 @@\n \n from base64 import b32decode\n from binascii import a2b_hex\n-import sys, os\n+import sys\n+import os\n import re\n \n # ipv4 in ipv6 prefix\n@@ -46,7 +47,7 @@ def name_to_ipv6(addr):\n     if len(addr)>6 and addr.endswith('.onion'):\n         vchAddr = b32decode(addr[0:-6], True)\n         if len(vchAddr) != 16-len(pchOnionCat):\n-            raise ValueError('Invalid onion %s' % s)\n+            raise ValueError('Invalid onion %s' % vchAddr)\n         return pchOnionCat + vchAddr\n     elif '.' in addr: # IPv4\n         return pchIPv4 + bytearray((int(x) for x in addr.split('.')))\n@@ -132,7 +133,7 @@ def main():\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n-            \n+\n if __name__ == '__main__':\n     main()\n "
      },
      {
        "sha": "59044e701af8cf07f98cff9dc0055e905fb4406d",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -6,6 +6,11 @@\n # Generate seeds.txt from Pieter's DNS seeder\n #\n \n+import re\n+import sys\n+import dns.resolver\n+import collections\n+\n NSEEDS=512\n \n MAX_SEEDS_PER_ASN=2\n@@ -22,11 +27,6 @@\n     \"54.94.195.96\", \"54.94.200.247\"\n }\n \n-import re\n-import sys\n-import dns.resolver\n-import collections\n-\n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")"
      },
      {
        "sha": "071bc722b0eee886b5f1acd8bae4634e3f384186",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -43,8 +43,10 @@ def b58encode(v):\n     # leading 0-bytes in the input become leading-1s\n     nPad = 0\n     for c in v:\n-        if c == 0: nPad += 1\n-        else: break\n+        if c == 0:\n+            nPad += 1\n+        else:\n+            break\n \n     return (__b58chars[0]*nPad) + result\n \n@@ -98,7 +100,8 @@ def b58decode_chk(v):\n def get_bcaddress_version(strAddress):\n     \"\"\" Returns None if strAddress is invalid.  Otherwise returns integer version of address. \"\"\"\n     addr = b58decode_chk(strAddress)\n-    if addr is None or len(addr)!=21: return None\n+    if addr is None or len(addr)!=21:\n+        return None\n     version = addr[0]\n     return ord(version)\n "
      },
      {
        "sha": "de15657d27ed319a2ed8acdd0b9ed80397056687",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -74,12 +74,12 @@ def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt\n         prefix = os.urandom(1)\n     else:\n         prefix = bytearray(template[0])\n-    \n+\n     if randomize_payload_size:\n         payload = os.urandom(max(int(random.expovariate(0.5)), 50))\n     else:\n         payload = os.urandom(template[1])\n-    \n+\n     if corrupt_suffix:\n         suffix = os.urandom(len(template[2]))\n     else:\n@@ -114,7 +114,8 @@ def gen_invalid_vectors():\n                 yield val,\n \n if __name__ == '__main__':\n-    import sys, json\n+    import sys\n+    import json\n     iters = {'valid':gen_valid_vectors, 'invalid':gen_invalid_vectors}\n     try:\n         uiter = iters[sys.argv[1]]\n@@ -124,7 +125,7 @@ def gen_invalid_vectors():\n         count = int(sys.argv[2])\n     except IndexError:\n         count = 0\n-   \n+\n     data = list(islice(uiter(), count))\n     json.dump(data, sys.stdout, sort_keys=True, indent=4)\n     sys.stdout.write('\\n')"
      },
      {
        "sha": "f9b97875141deb5fef9b01526b7d05acc968a294",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -25,7 +25,7 @@\n \n #Create 32 byte b64 password\n password = base64.urlsafe_b64encode(os.urandom(32)).decode(\"utf-8\")\n- \n+\n m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), \"SHA256\")\n result = m.hexdigest()\n "
      },
      {
        "sha": "eee38ce6487f2a84f47a2923bf639155b83c5ec4",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -129,7 +129,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             # Track whether any sequence locks used should fail\n             should_pass = True\n-            \n+\n             # Track whether this transaction was built with sequence locks\n             using_sequence_locks = False\n \n@@ -343,7 +343,7 @@ def test_bip68_not_consensus(self):\n         tx2.rehash()\n \n         self.nodes[0].sendrawtransaction(ToHex(tx2))\n-        \n+\n         # Now make an invalid spend of tx2 according to BIP68\n         sequence_value = 100 # 100 block relative locktime\n "
      },
      {
        "sha": "072ba6c7c759044b5d44a7195122ba673553e1f6",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -30,7 +30,7 @@ def on_block(self, message):\n         self.block_receive_map[message.block.sha256] += 1\n \n class MaxUploadTest(BitcoinTestFramework):\n- \n+\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1"
      },
      {
        "sha": "60859de7a537e94dec60532d73d9431619c22190",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -182,7 +182,7 @@ def networks_dict(d):\n         assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n         assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n         assert_equal(n1['onion']['reachable'], True)\n-        \n+\n         n2 = networks_dict(self.nodes[2].getnetworkinfo())\n         for net in ['ipv4','ipv6','onion']:\n             assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))"
      },
      {
        "sha": "a48939d2e07d1f8e0032c0a95cbddbe4cfb7f476",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -186,10 +186,10 @@ def run_test(self):\n         self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n \n         # Test limits\n-        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n_) for n_ in range(20)])\n         self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n \n-        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        long_uri = '/'.join(['{}-{}'.format(txid, n_) for n_ in range(15)])\n         self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n \n         self.nodes[0].generate(1)  # generate block to not affect upcoming tests"
      },
      {
        "sha": "e54843b26feb50038043f91b8f64ec7bf8cdfa45",
        "filename": "test/functional/p2p_mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/p2p_mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/p2p_mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_mempool.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -30,6 +30,6 @@ def run_test(self):\n \n         #mininode must be disconnected at this point\n         assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n-    \n+\n if __name__ == '__main__':\n     P2PMempoolTests().main()"
      },
      {
        "sha": "10c8475d014008c5727441901683ed6ae53b19da",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -450,7 +450,7 @@ def test_witness_block_size(self):\n         block = self.build_next_block()\n \n         assert(len(self.utxo) > 0)\n-        \n+\n         # Create a P2WSH transaction.\n         # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n         # This should give us plenty of room to tweak the spending tx's\n@@ -562,7 +562,7 @@ def test_extra_witness_data(self):\n         self.log.info(\"Testing extra witness data in tx\")\n \n         assert(len(self.utxo) > 0)\n-        \n+\n         block = self.build_next_block()\n \n         witness_program = CScript([OP_DROP, OP_TRUE])\n@@ -730,7 +730,7 @@ def test_witness_input_length(self):\n         witness_program = CScript([OP_DROP, OP_TRUE])\n         witness_hash = sha256(witness_program)\n         scriptPubKey = CScript([OP_0, witness_hash])\n-        \n+\n         # Create a transaction that splits our utxo into many outputs\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))"
      },
      {
        "sha": "581de0ed5d3ce605052f683cc9c939ee16df85ee",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -4,12 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Dummy Socks5 server for testing.\"\"\"\n \n-import socket, threading, queue\n+import socket\n+import threading\n+import queue\n import logging\n \n logger = logging.getLogger(\"TestFramework.socks5\")\n \n-### Protocol constants\n+# Protocol constants\n class Command:\n     CONNECT = 0x01\n \n@@ -18,7 +20,7 @@ class AddressType:\n     DOMAINNAME = 0x03\n     IPV6 = 0x04\n \n-### Utility functions\n+# Utility functions\n def recvall(s, n):\n     \"\"\"Receive n bytes from a socket, or fail.\"\"\"\n     rv = bytearray()\n@@ -30,7 +32,7 @@ def recvall(s, n):\n         n -= len(d)\n     return rv\n \n-### Implementation classes\n+# Implementation classes\n class Socks5Configuration():\n     \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n@@ -141,7 +143,7 @@ def run(self):\n                 thread = threading.Thread(None, conn.handle)\n                 thread.daemon = True\n                 thread.start()\n-    \n+\n     def start(self):\n         assert(not self.running)\n         self.running = True"
      },
      {
        "sha": "5f5bfcf6837be35449901d8528d0cbf7ca5bc980",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -16,7 +16,7 @@ def run_test(self):\n         self.nodes[0].generate(101)\n \n         self.sync_all()\n-        \n+\n         # address\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey"
      },
      {
        "sha": "505014e48ffc162d625d252704fc69e7854d9d41",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -17,7 +17,7 @@ def run_test(self):\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n-        \n+\n         # Encrypt wallet and wait to terminate\n         nodes[0].node_encrypt_wallet('test')\n         # Restart node 0"
      },
      {
        "sha": "7577c4a0d29701e38480eafbe4bace5d394e1287",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -92,7 +92,8 @@ def run_test(self):\n         # Node0's balance should be starting balance, plus 50BTC for another\n         # matured block, minus tx1 and tx2 amounts, and minus transaction fees:\n         expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n-        if self.options.mine_block: expected += 50\n+        if self.options.mine_block:\n+            expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n@@ -131,7 +132,7 @@ def run_test(self):\n         tx1 = self.nodes[0].gettransaction(txid1)\n         tx1_clone = self.nodes[0].gettransaction(txid1_clone)\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        \n+\n         # Verify expected confirmations\n         assert_equal(tx1[\"confirmations\"], -2)\n         assert_equal(tx1_clone[\"confirmations\"], 2)"
      },
      {
        "sha": "8419d6b545a93d27c92dbad7307eae2f516de075",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f020aca297e8a6c9f7b6a6e08e583847d37edace/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "patch": "@@ -27,7 +27,7 @@ def run_test(self):\n         for i in range(4):\n             assert_equal(self.nodes[i].getbalance(), starting_balance)\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n-        \n+\n         # Assign coins to foo and bar accounts:\n         node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n         fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n@@ -64,7 +64,7 @@ def run_test(self):\n         # Create two spends using 1 50 BTC coin each\n         txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n-        \n+\n         # Have node0 mine a block:\n         if (self.options.mine_block):\n             self.nodes[0].generate(1)\n@@ -76,7 +76,8 @@ def run_test(self):\n         # Node0's balance should be starting balance, plus 50BTC for another\n         # matured block, minus 40, minus 20, and minus transaction fees:\n         expected = starting_balance + fund_foo_tx[\"fee\"] + fund_bar_tx[\"fee\"]\n-        if self.options.mine_block: expected += 50\n+        if self.options.mine_block:\n+            expected += 50\n         expected += tx1[\"amount\"] + tx1[\"fee\"]\n         expected += tx2[\"amount\"] + tx2[\"fee\"]\n         assert_equal(self.nodes[0].getbalance(), expected)\n@@ -93,7 +94,7 @@ def run_test(self):\n         else:\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n-        \n+\n         # Now give doublespend and its parents to miner:\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])"
      }
    ]
  },
  {
    "sha": "643aad17faf104510ba123b596676256f26549c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDNhYWQxN2ZhZjEwNDUxMGJhMTIzYjU5NjY3NjI1NmYyNjU0OWMy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-15T10:56:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-16T15:25:11Z"
      },
      "message": "Enable additional flake8 rules",
      "tree": {
        "sha": "565ab20861a2385d2286d54074c7b25245c2121d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/565ab20861a2385d2286d54074c7b25245c2121d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/643aad17faf104510ba123b596676256f26549c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/643aad17faf104510ba123b596676256f26549c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/643aad17faf104510ba123b596676256f26549c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/643aad17faf104510ba123b596676256f26549c2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f020aca297e8a6c9f7b6a6e08e583847d37edace",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f020aca297e8a6c9f7b6a6e08e583847d37edace"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "239337000dc8c6d48f2c2cb0b1eecc7ac985600e",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/643aad17faf104510ba123b596676256f26549c2/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/643aad17faf104510ba123b596676256f26549c2/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=643aad17faf104510ba123b596676256f26549c2",
        "patch": "@@ -15,21 +15,28 @@\n # E133 closing bracket is missing indentation\n # E223 tab before operator\n # E224 tab after operator\n+# E242 tab after ','\n+# E266 too many leading '#' for block comment\n # E271 multiple spaces after keyword\n # E272 multiple spaces before keyword\n # E273 tab after keyword\n # E274 tab before keyword\n # E275 missing whitespace after keyword\n # E304 blank lines found after function decorator\n # E306 expected 1 blank line before a nested definition\n+# E401 multiple imports on one line\n+# E402 module level import not at top of file\n # E502 the backslash is redundant between brackets\n+# E701 multiple statements on one line (colon)\n # E702 multiple statements on one line (semicolon)\n # E703 statement ends with a semicolon\n # E714 test for object identity should be \"is not\"\n # E721 do not compare types, use \"isinstance()\"\n # E741 do not use variables named \"l\", \"O\", or \"I\"\n # E742 do not define classes named \"l\", \"O\", or \"I\"\n # E743 do not define functions named \"l\", \"O\", or \"I\"\n+# E901 SyntaxError: invalid syntax\n+# E902 TokenError: EOF in multi-line string\n # F401 module imported but unused\n # F402 import module from line N shadowed by loop variable\n # F404 future import(s) name after other statements\n@@ -49,16 +56,19 @@\n # F707 an except: block as not the last exception handler\n # F811 redefinition of unused name from line N\n # F812 list comprehension redefines 'foo' from line N\n+# F821 undefined name 'Foo'\n # F822 undefined name name in __all__\n # F823 local variable name \u2026 referenced before assignment\n # F831 duplicate argument name in function definition\n # F841 local variable 'foo' is assigned to but never used\n # W292 no newline at end of file\n+# W293 blank line contains whitespace\n # W504 line break after binary operator\n # W601 .has_key() is deprecated, use \"in\"\n # W602 deprecated form of raising exception\n # W603 \"<>\" is deprecated, use \"!=\"\n # W604 backticks are deprecated, use \"repr()\"\n # W605 invalid escape sequence \"x\"\n+# W606 'async' and 'await' are reserved keywords starting with Python 3.7\n \n-flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,F841,W292,W504,W601,W602,W603,W604,W605 .\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E714,E721,E741,E742,E743,F401,E901,E902,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W292,W293,W504,W601,W602,W603,W604,W605,W606 ."
      }
    ]
  }
]