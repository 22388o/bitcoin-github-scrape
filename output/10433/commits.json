[
  {
    "sha": "b040243cc3dfd69f5a8b6e217d1a658d59b15809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDQwMjQzY2MzZGZkNjlmNWE4YjZlMjE3ZDFhNjU4ZDU5YjE1ODA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-18T21:33:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-18T22:11:32Z"
      },
      "message": "[tests] improve tmpdir structure",
      "tree": {
        "sha": "34185e792b0939116ae4ccd254091b60ac23ab48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34185e792b0939116ae4ccd254091b60ac23ab48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b040243cc3dfd69f5a8b6e217d1a658d59b15809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b040243cc3dfd69f5a8b6e217d1a658d59b15809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b040243cc3dfd69f5a8b6e217d1a658d59b15809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b040243cc3dfd69f5a8b6e217d1a658d59b15809/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96c850c20913b191cff9f66fedbb68812b1a41ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c850c20913b191cff9f66fedbb68812b1a41ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c850c20913b191cff9f66fedbb68812b1a41ea"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 27,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4b5b311385a3b9b196d505bd26c2ac6cad8709ca",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b040243cc3dfd69f5a8b6e217d1a658d59b15809/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b040243cc3dfd69f5a8b6e217d1a658d59b15809/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b040243cc3dfd69f5a8b6e217d1a658d59b15809",
        "patch": "@@ -109,8 +109,7 @@ def main(self):\n                           help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n         parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.normpath(os.path.dirname(os.path.realpath(__file__))+\"/../../cache\"),\n                           help=\"Directory for caching pregenerated datadirs\")\n-        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                          help=\"Root directory for datadirs\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", help=\"Root directory for datadirs\")\n         parser.add_option(\"-l\", \"--loglevel\", dest=\"loglevel\", default=\"INFO\",\n                           help=\"log events at this level and higher to the console. Can be set to DEBUG, INFO, WARNING, ERROR or CRITICAL. Passing --loglevel DEBUG will output all logs to console. Note that logs at all levels are always written to the test_framework.log file in the temporary test directory.\")\n         parser.add_option(\"--tracerpc\", dest=\"trace_rpc\", default=False, action=\"store_true\",\n@@ -124,9 +123,6 @@ def main(self):\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n-        # backup dir variable for removal at cleanup\n-        self.options.root, self.options.tmpdir = self.options.tmpdir, self.options.tmpdir + '/' + str(self.options.port_seed)\n-\n         if self.options.coveragedir:\n             enable_coverage(self.options.coveragedir)\n \n@@ -137,7 +133,10 @@ def main(self):\n         check_json_precision()\n \n         # Set up temp directory and start logging\n-        os.makedirs(self.options.tmpdir, exist_ok=False)\n+        if self.options.tmpdir:\n+            os.makedirs(self.options.tmpdir, exist_ok=False)\n+        else:\n+            self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")\n         self._start_logging()\n \n         success = False\n@@ -167,8 +166,6 @@ def main(self):\n         if not self.options.nocleanup and not self.options.noshutdown and success:\n             self.log.info(\"Cleaning up\")\n             shutil.rmtree(self.options.tmpdir)\n-            if not os.listdir(self.options.root):\n-                os.rmdir(self.options.root)\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):"
      },
      {
        "sha": "7186b911c23fdda2ce3ef0ac694aebb4e0b42344",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b040243cc3dfd69f5a8b6e217d1a658d59b15809/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b040243cc3dfd69f5a8b6e217d1a658d59b15809/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b040243cc3dfd69f5a8b6e217d1a658d59b15809",
        "patch": "@@ -16,6 +16,7 @@\n \n import argparse\n import configparser\n+import datetime\n import os\n import time\n import shutil\n@@ -170,6 +171,7 @@ def main():\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n     parser.add_argument('--keepcache', '-k', action='store_true', help='the default behavior is to flush the cache directory on startup. --keepcache retains the cache from the previous testrun.')\n     parser.add_argument('--quiet', '-q', action='store_true', help='only print results summary and failure logs')\n+    parser.add_argument('--tmpdirprefix', '-t', default=tempfile.gettempdir(), help=\"Root directory for datadirs\")\n     args, unknown_args = parser.parse_known_args()\n \n     # Create a set to store arguments and create the passon string\n@@ -187,6 +189,12 @@ def main():\n     logging_level = logging.INFO if args.quiet else logging.DEBUG\n     logging.basicConfig(format='%(message)s', level=logging_level)\n \n+    # Create base test directory\n+    tmpdir = \"%s/bitcoin_test_runner_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n+    os.makedirs(tmpdir)\n+\n+    logging.debug(\"Temporary test directory at %s\" % tmpdir)\n+\n     enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n     enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n@@ -239,9 +247,9 @@ def main():\n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n-    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args)\n \n-def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[]):\n     # Warn if bitcoind is already running (unix only)\n     try:\n         if subprocess.check_output([\"pidof\", \"bitcoind\"]) is not None:\n@@ -272,10 +280,10 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n \n     #Run Tests\n-    job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n+    job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)\n     time0 = time.time()\n     test_results = []\n \n@@ -302,6 +310,10 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n         logging.debug(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    # Clear up the temp directory if all subdirectories are gone\n+    if not os.listdir(tmpdir):\n+        os.rmdir(tmpdir)\n+\n     all_passed = all(map(lambda test_result: test_result.was_successful, test_results))\n \n     sys.exit(not all_passed)\n@@ -329,10 +341,11 @@ class TestHandler:\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, tmpdir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n         self.tests_dir = tests_dir\n+        self.tmpdir = tmpdir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -347,13 +360,15 @@ def get_next(self):\n             # Add tests\n             self.num_running += 1\n             t = self.test_list.pop(0)\n-            port_seed = [\"--portseed={}\".format(len(self.test_list) + self.portseed_offset)]\n+            portseed = len(self.test_list) + self.portseed_offset\n+            portseed_arg = [\"--portseed={}\".format(portseed)]\n             log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             test_argv = t.split()\n+            tmpdir = [\"--tmpdir=%s/%s_%s\" % (self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + port_seed,\n+                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),"
      }
    ]
  }
]