[
  {
    "sha": "6c006495ef07f163d0734ec35d3cd1589a4aae9d",
    "node_id": "C_kwDOABII59oAKDZjMDA2NDk1ZWYwN2YxNjNkMDczNGVjMzVkM2NkMTU4OWE0YWFlOWQ",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-28T08:07:09Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T02:45:20Z"
      },
      "message": "Remove outdated dummy wallet -salvagewallet arg",
      "tree": {
        "sha": "ed301ded0a296ad31437050847a0539e17d81ded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed301ded0a296ad31437050847a0539e17d81ded"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c006495ef07f163d0734ec35d3cd1589a4aae9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c006495ef07f163d0734ec35d3cd1589a4aae9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c006495ef07f163d0734ec35d3cd1589a4aae9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c006495ef07f163d0734ec35d3cd1589a4aae9d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c776fdcec176ffaa2056633fa2b4e737cda29ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c776fdcec176ffaa2056633fa2b4e737cda29ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c776fdcec176ffaa2056633fa2b4e737cda29ce"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b7890ab80b8f9ab6b4ef45109c17a6c764312d96",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c006495ef07f163d0734ec35d3cd1589a4aae9d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c006495ef07f163d0734ec35d3cd1589a4aae9d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=6c006495ef07f163d0734ec35d3cd1589a4aae9d",
        "patch": "@@ -40,7 +40,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-mintxfee=<amt>\",\n         \"-paytxfee=<amt>\",\n         \"-rescan\",\n-        \"-salvagewallet\",\n         \"-signer=<cmd>\",\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\","
      }
    ]
  },
  {
    "sha": "f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
    "node_id": "C_kwDOABII59oAKGY5NjNiMGZhOGNkZDUyMjNmZWI4MjhjNWZhZjZjNTdiYzQxMDdjOGE",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-28T09:00:44Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T23:06:27Z"
      },
      "message": "Corrupt wallet tx shouldn't trigger rescan of all wallets",
      "tree": {
        "sha": "12feca3470a7ff8c17467822cbc1fa30cc0cf2e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12feca3470a7ff8c17467822cbc1fa30cc0cf2e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c006495ef07f163d0734ec35d3cd1589a4aae9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c006495ef07f163d0734ec35d3cd1589a4aae9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c006495ef07f163d0734ec35d3cd1589a4aae9d"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 23,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1888d04f6dcafa9357786fc69ecf699e40e767a1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "patch": "@@ -2007,10 +2007,7 @@ DBErrors CWallet::LoadWallet()\n         assert(m_internal_spk_managers.empty());\n     }\n \n-    if (nLoadWalletRet != DBErrors::LOAD_OK)\n-        return nLoadWalletRet;\n-\n-    return DBErrors::LOAD_OK;\n+    return nLoadWalletRet;\n }\n \n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n@@ -2542,6 +2539,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n+    bool rescan_required = false;\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n@@ -2562,6 +2560,10 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         {\n             error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), PACKAGE_NAME);\n             return nullptr;\n+        } else if (nLoadWalletRet == DBErrors::RESCAN_REQUIRED) {\n+            warnings.push_back(strprintf(_(\"Error reading %s! Transaction data may be missing or incorrect.\"\n+                                           \" Rescanning wallet.\"), walletFile));\n+            rescan_required = true;\n         }\n         else {\n             error = strprintf(_(\"Error loading %s\"), walletFile);\n@@ -2753,7 +2755,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n \n     LOCK(walletInstance->cs_wallet);\n \n-    if (chain && !AttachChain(walletInstance, *chain, error, warnings)) {\n+    if (chain && !AttachChain(walletInstance, *chain, rescan_required, error, warnings)) {\n         return nullptr;\n     }\n \n@@ -2775,7 +2777,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     return walletInstance;\n }\n \n-bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     LOCK(walletInstance->cs_wallet);\n     // allow setting the chain if it hasn't been set already but prevent changing it\n@@ -2792,8 +2794,9 @@ bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interf\n     // interface.\n     walletInstance->m_chain_notifications_handler = walletInstance->chain().handleNotifications(walletInstance);\n \n+    // If either rescan_required = true or -rescan is set, rescan_height remains equal to 0\n     int rescan_height = 0;\n-    if (!gArgs.GetBoolArg(\"-rescan\", false))\n+    if (!rescan_required && !gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;"
      },
      {
        "sha": "cedccf7d4403a45823c230060f0fed308dbb397e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "patch": "@@ -337,7 +337,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * block locator and m_last_block_processed, and registering for\n      * notifications about new blocks and transactions.\n      */\n-    static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+    static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n public:\n     /**"
      },
      {
        "sha": "11c35e70e9221c771f1c19352d6896022eb083f4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "patch": "@@ -755,6 +755,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n {\n     CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n+    bool rescan_required = false;\n     DBErrors result = DBErrors::LOAD_OK;\n \n     LOCK(pwallet->cs_wallet);\n@@ -823,7 +824,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                     fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n                     if (strType == DBKeys::TX)\n                         // Rescan if there is a bad transaction record:\n-                        gArgs.SoftSetBoolArg(\"-rescan\", true);\n+                        rescan_required = true;\n                 }\n             }\n             if (!strErr.empty())\n@@ -859,8 +860,11 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n     }\n \n-    if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n+    if (rescan_required && result == DBErrors::LOAD_OK) {\n+        result = DBErrors::RESCAN_REQUIRED;\n+    } else if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {\n         result = DBErrors::NONCRITICAL_ERROR;\n+    }\n \n     // Any wallet corruption at all: skip any rewriting or\n     // upgrading, we don't want to make it worse."
      },
      {
        "sha": "39d1e2615cd23f4137df0e8227f9d846491a5e14",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "patch": "@@ -48,7 +48,8 @@ enum class DBErrors\n     NONCRITICAL_ERROR,\n     TOO_NEW,\n     LOAD_FAIL,\n-    NEED_REWRITE\n+    NEED_REWRITE,\n+    RESCAN_REQUIRED\n };\n \n namespace DBKeys {"
      },
      {
        "sha": "4abfde76e2372152a11fd1c439d268a97829a2ae",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "patch": "@@ -76,6 +76,10 @@ static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::pa\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n             tfm::format(std::cerr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n             return nullptr;\n+        } else if (load_wallet_ret == DBErrors::RESCAN_REQUIRED) {\n+            tfm::format(std::cerr, \"Error reading %s! Some transaction data might be missing or\"\n+                           \" incorrect. Wallet requires a rescan.\",\n+                name);\n         } else {\n             tfm::format(std::cerr, \"Error loading %s\", name);\n             return nullptr;"
      }
    ]
  },
  {
    "sha": "bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
    "node_id": "C_kwDOABII59oAKGJjY2QxZDk0MmQ5NzFlNzBlN2EwZjRmNTYyOGUxYjc0YjNhYzE1ZTA",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T03:32:07Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T23:06:27Z"
      },
      "message": "Remove -rescan startup parameter",
      "tree": {
        "sha": "98fda2a14dc3d9731c261981c270e9e5f89250d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98fda2a14dc3d9731c261981c270e9e5f89250d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f963b0fa8cdd5223feb828c5faf6c57bc4107c8a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 26,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c5b79709c71f0c506d627274e445f021293ba0fe",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -157,7 +157,7 @@\n #coinstatsindex=1\n \n # Enable pruning to reduce storage requirements by deleting old blocks.\n-# This mode is incompatible with -txindex, -coinstatsindex and -rescan.\n+# This mode is incompatible with -txindex and -coinstatsindex.\n # 0 = default (no pruning).\n # 1 = allows manual pruning via RPC.\n # >=550 = target to stay under in MiB."
      },
      {
        "sha": "7f6471740f721d7277ae3a0cef052850a8433fe7",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -39,7 +39,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-maxtxfee=<amt>\",\n         \"-mintxfee=<amt>\",\n         \"-paytxfee=<amt>\",\n-        \"-rescan\",\n         \"-signer=<cmd>\",\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\","
      },
      {
        "sha": "210e4d5f36144b6c50cb3ba8160a75e7a06afdc6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -397,7 +397,7 @@ void SetupServerArgs(ArgsManager& argsman)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex, -coinstatsindex and -rescan. \"\n+    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -coinstatsindex. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "59a59f9794e7047855ac04d4204c435fc77910d5",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -62,7 +62,6 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #ifdef ENABLE_EXTERNAL_SIGNER\n     argsman.AddArg(\"-signer=<cmd>\", \"External signing tool, see doc/external-signer.md\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif"
      },
      {
        "sha": "4d7fb2d38cee75b3a843a4df781452fe99545ef6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -1439,7 +1439,7 @@ RPCHelpMan importmulti()\n                                       \"and coins using this key may not appear in the wallet. This error could be \"\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n-                                      \"and -rescan options).\",\n+                                      \"option and rescanblockchain RPC).\",\n                                 GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }\n@@ -1744,7 +1744,7 @@ RPCHelpMan importdescriptors()\n                                       \"and coins using this desc may not appear in the wallet. This error could be \"\n                                       \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n-                                      \"and -rescan options).\",\n+                                      \"option and rescanblockchain RPC).\",\n                                 GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n                     response.push_back(std::move(result));\n                 }"
      },
      {
        "sha": "f6cf8868dea27d25f7f6b97e018910da0ef52f66",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -2632,7 +2632,7 @@ static RPCHelpMan loadwallet()\n     return RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n+                \"\\napplied to the new wallet.\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                     {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED_NAMED_ARG, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},"
      },
      {
        "sha": "4151099c1ff117a8e7d12fbba00de865df6919dc",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -45,7 +45,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     // Call Salvage with fAggressive=true to\n     // get as much data as possible.\n     // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n+    // Rescan so any missing transactions will be\n     // found.\n     int64_t now = GetTime();\n     std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);"
      },
      {
        "sha": "9938380369034b5671dbe547e73f2a653b404bcd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -232,8 +232,8 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"seconds of key creation, and could contain transactions pertaining to the key. As a result, \"\n                       \"transactions and coins using this key may not appear in the wallet. This error could be caused \"\n                       \"by pruning or data corruption (see bitcoind log for details) and could be dealt with by \"\n-                      \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n-                      \"options).\\\"}},{\\\"success\\\":true}]\",\n+                      \"downloading and rescanning the relevant blocks (see -reindex option and rescanblockchain \"\n+                      \"RPC).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n         RemoveWallet(context, wallet, /* load_on_start= */ std::nullopt);\n     }"
      },
      {
        "sha": "8dc30bfaeb635f5ac4c3b9f47c4cde8d05cf2f94",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -1600,7 +1600,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     fAbortRescan = false;\n-    ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning\u2026\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if rescan required on startup (e.g. due to corruption)\n     uint256 tip_hash = WITH_LOCK(cs_wallet, return GetLastBlockHash());\n     uint256 end_hash = tip_hash;\n     if (max_height) chain().findAncestorByHeight(tip_hash, *max_height, FoundBlock().hash(end_hash));\n@@ -2794,9 +2794,9 @@ bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interf\n     // interface.\n     walletInstance->m_chain_notifications_handler = walletInstance->chain().handleNotifications(walletInstance);\n \n-    // If either rescan_required = true or -rescan is set, rescan_height remains equal to 0\n+    // If rescan_required = true, rescan_height remains equal to 0\n     int rescan_height = 0;\n-    if (!rescan_required && !gArgs.GetBoolArg(\"-rescan\", false))\n+    if (!rescan_required)\n     {\n         WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;"
      },
      {
        "sha": "4382022a7af65779c279c2c8550bf6f3dc46200f",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -42,7 +42,6 @@ def setup_network(self):\n             f\"-alertnotify=echo > {os.path.join(self.alertnotify_dir, '%s')}\",\n             f\"-blocknotify=echo > {os.path.join(self.blocknotify_dir, '%s')}\",\n         ], [\n-            \"-rescan\",\n             f\"-walletnotify=echo %h_%b > {os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))}\",\n         ]]\n         self.wallet_names = [self.default_wallet_name, self.wallet]\n@@ -91,16 +90,15 @@ def run_test(self):\n \n             # directory content should equal the generated transaction hashes\n             tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n-            self.stop_node(1)\n             self.expect_wallet_notify(tx_details)\n \n             self.log.info(\"test -walletnotify after rescan\")\n-            # restart node to rescan to force wallet notifications\n-            self.start_node(1)\n-            self.connect_nodes(0, 1)\n-\n+            # rescan to force wallet notifications\n+            self.nodes[1].rescanblockchain()\n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n+            self.connect_nodes(0, 1)\n+\n             # directory content should equal the generated transaction hashes\n             tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n             self.expect_wallet_notify(tx_details)"
      },
      {
        "sha": "599e506f983e53be082fd347e3e981ca7d6d0f35",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 16,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -582,23 +582,17 @@ def run_test(self):\n                 assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n \n-        # maintenance tests\n-        maintenance = [\n-            '-rescan',\n-            '-reindex',\n-        ]\n+        # -reindex tests\n         chainlimit = 6\n-        for m in maintenance:\n-            self.log.info(\"Test \" + m)\n-            self.stop_nodes()\n-            # set lower ancestor limit for later\n-            self.start_node(0, [m, \"-limitancestorcount=\" + str(chainlimit)])\n-            self.start_node(1, [m, \"-limitancestorcount=\" + str(chainlimit)])\n-            self.start_node(2, [m, \"-limitancestorcount=\" + str(chainlimit)])\n-            if m == '-reindex':\n-                # reindex will leave rpc warm up \"early\"; Wait for it to finish\n-                self.wait_until(lambda: [block_count] * 3 == [self.nodes[i].getblockcount() for i in range(3)])\n-            assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n+        self.log.info(\"Test -reindex\")\n+        self.stop_nodes()\n+        # set lower ancestor limit for later\n+        self.start_node(0, ['-reindex', \"-limitancestorcount=\" + str(chainlimit)])\n+        self.start_node(1, ['-reindex', \"-limitancestorcount=\" + str(chainlimit)])\n+        self.start_node(2, ['-reindex', \"-limitancestorcount=\" + str(chainlimit)])\n+        # reindex will leave rpc warm up \"early\"; Wait for it to finish\n+        self.wait_until(lambda: [block_count] * 3 == [self.nodes[i].getblockcount() for i in range(3)])\n+        assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n         # Exercise listsinceblock with the last two blocks\n         coinbase_tx_1 = self.nodes[0].listsinceblock(blocks[0])"
      },
      {
        "sha": "974ce7f381f434aa5c19a8e5685012d8266723d8",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         self.sync_all()\n \n         # Needs rescan\n-        self.restart_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n+        self.nodes[1].rescanblockchain()\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n \n         # Try a RPC based rescan"
      }
    ]
  },
  {
    "sha": "dc3ec74d67abc85e8f724648f93efdd097e6f783",
    "node_id": "C_kwDOABII59oAKGRjM2VjNzRkNjdhYmM4NWU4ZjcyNDY0OGY5M2VmZGQwOTdlNmY3ODM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T03:37:39Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-29T23:06:27Z"
      },
      "message": "Add rescan removal release note",
      "tree": {
        "sha": "2f46c45f730e2a968035a580fce0795512001215",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f46c45f730e2a968035a580fce0795512001215"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc3ec74d67abc85e8f724648f93efdd097e6f783",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc3ec74d67abc85e8f724648f93efdd097e6f783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc3ec74d67abc85e8f724648f93efdd097e6f783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc3ec74d67abc85e8f724648f93efdd097e6f783/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bccd1d942d971e70e7a0f4f5628e1b74b3ac15e0"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fcbe7e6a82881378103c876b1462b5313a7c8640",
        "filename": "doc/release-notes-remove-rescan.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc3ec74d67abc85e8f724648f93efdd097e6f783/doc/release-notes-remove-rescan.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc3ec74d67abc85e8f724648f93efdd097e6f783/doc/release-notes-remove-rescan.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-remove-rescan.md?ref=dc3ec74d67abc85e8f724648f93efdd097e6f783",
        "patch": "@@ -0,0 +1,9 @@\n+Notable changes\n+===============\n+\n+Rescan startup parameter removed\n+--------------------------------\n+\n+The `-rescan` startup parameter has been removed. Wallets which require\n+rescanning due to corruption will still be rescanned on startup.\n+Otherwise, please use the `rescanblockchain` RPC to trigger a rescan.\n\\ No newline at end of file"
      }
    ]
  }
]