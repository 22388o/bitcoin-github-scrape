[
  {
    "sha": "fa6fba3bc8013d7f813edd71f152d86eab907e4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZmYmEzYmM4MDEzZDdmODEzZWRkNzFmMTUyZDg2ZWFiOTA3ZTRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-26T16:42:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-02T21:17:43Z"
      },
      "message": "test: Make local symbols in run_test members",
      "tree": {
        "sha": "af46c60a49d136930224d22908c960751d9ae394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af46c60a49d136930224d22908c960751d9ae394"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6fba3bc8013d7f813edd71f152d86eab907e4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj2jwwArmC837DUgof3+hambqkeZTKI8ijJK0X83WfjFFWc2aYrlatquV/+DfKf\n0OVF7kfZZA9Y3doaTDjAUhHszaFIzIB+kefdBaQZQStMsabi3NaEfOLXcu7MC2zh\nwbe+B/cu4lr1g/B//GkWdsVEzJ9WsmdIasOrtBvk0kLbn8s4Jf4SI2wvl5MKHJbA\nVXQ6ghYT2MDJu1/M3DTfMwCC4E9tW1+lKBElPGs/CqKIPI8uhUTZeaSrthl/33/i\niQqnf55mVF8T6+rQLE/UkdBMZA4EHDy6/HUURTBjHUv/fq4/C+GNvECxJxxuS6WO\n8KqAdqm0XyIwXsFZuDmbP0Nsgib0dXPSCOR5QthHQZTGd7rgsIi2PnZCihYWpRSq\nEqjUrpN1FaVU7AU8BZV8KeEO36ab9cxOkUABmKXrIzrCGYpXenxTRiFWqaaAxKoL\n1ozSQDWv3P2PKIJYjht4uBqT/JywZ6KmrU29Py0d+VqVyucbAx/3vah9Z+L9xVJY\nY8j2yJVm\n=ofbU\n-----END PGP SIGNATURE-----",
        "payload": "tree af46c60a49d136930224d22908c960751d9ae394\nparent 2f717fb5cdfc312784f9c1539fc41cdfcfbde452\nauthor MarcoFalke <falke.marco@gmail.com> 1561567331 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562102263 -0400\n\ntest: Make local symbols in run_test members\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6fba3bc8013d7f813edd71f152d86eab907e4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6fba3bc8013d7f813edd71f152d86eab907e4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6fba3bc8013d7f813edd71f152d86eab907e4d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f717fb5cdfc312784f9c1539fc41cdfcfbde452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f717fb5cdfc312784f9c1539fc41cdfcfbde452",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f717fb5cdfc312784f9c1539fc41cdfcfbde452"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "8a17c87c1ecf5051b3a57e0c85abd49f190e8777",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 31,
        "deletions": 29,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6fba3bc8013d7f813edd71f152d86eab907e4d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6fba3bc8013d7f813edd71f152d86eab907e4d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa6fba3bc8013d7f813edd71f152d86eab907e4d",
        "patch": "@@ -41,19 +41,19 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes, 0, 3)\n \n     def run_test(self):\n-        min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n+        self.min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:\n-            node.settxfee(min_relay_tx_fee)\n+            node.settxfee(self.min_relay_tx_fee)\n \n         # if the fee's positive delta is higher than this value tests will fail,\n         # neg. delta always fail the tests.\n         # The size of the signature of every input may be at most 2 bytes larger\n         # than a minimum sized signature.\n \n         #            = 2 bytes * minRelayTxFeePerByte\n-        feeTolerance = 2 * min_relay_tx_fee/1000\n+        self.fee_tolerance = 2 * self.min_relay_tx_fee / 1000\n \n         self.nodes[2].generate(1)\n         self.sync_all()\n@@ -67,15 +67,15 @@ def run_test(self):\n \n         watchonly_address = self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n-        watchonly_amount = Decimal(200)\n+        self.watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n-        watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        self.watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, self.watchonly_amount)\n \n         # Lock UTXO so nodes[0] doesn't accidentally spend it\n-        watchonly_vout = find_vout_for_address(self.nodes[0], watchonly_txid, watchonly_address)\n-        self.nodes[0].lockunspent(False, [{\"txid\": watchonly_txid, \"vout\": watchonly_vout}])\n+        self.watchonly_vout = find_vout_for_address(self.nodes[0], self.watchonly_txid, watchonly_address)\n+        self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])\n \n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), self.watchonly_amount / 10)\n \n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n@@ -156,6 +156,7 @@ def run_test(self):\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n+        self.test_no_change_fee = fee  # Use the same fee for the next tx\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n@@ -170,7 +171,7 @@ def run_test(self):\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n+        outputs = {self.nodes[0].getnewaddress(): Decimal(5.0) - self.test_no_change_fee - self.fee_tolerance}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n@@ -363,7 +364,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= feeTolerance\n+        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n         ############################################################\n@@ -378,7 +379,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= feeTolerance\n+        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n \n@@ -405,7 +406,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= feeTolerance\n+        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n \n@@ -438,7 +439,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= feeTolerance\n+        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n \n@@ -485,15 +486,15 @@ def run_test(self):\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:\n-            node.settxfee(min_relay_tx_fee)\n+            node.settxfee(self.min_relay_tx_fee)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         connect_nodes_bi(self.nodes,0,3)\n         # Again lock the watchonly UTXO or nodes[0] may spend it, because\n         # lockunspent is memory-only and thus lost on restart\n-        self.nodes[0].lockunspent(False, [{\"txid\": watchonly_txid, \"vout\": watchonly_vout}])\n+        self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])\n         self.sync_all()\n \n         # drain the keypool\n@@ -558,7 +559,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= feeTolerance*19  #~19 inputs\n+        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance * 19  #~19 inputs\n \n \n         #############################################\n@@ -612,13 +613,13 @@ def run_test(self):\n         ##################################################\n \n         inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n+        outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount / 2}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n         result = self.nodes[3].fundrawtransaction(rawtx, {'includeWatching': True })\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 1)\n-        assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n+        assert_equal(res_dec[\"vin\"][0][\"txid\"], self.watchonly_txid)\n \n         assert \"fee\" in result.keys()\n         assert_greater_than(result[\"changepos\"], -1)\n@@ -628,18 +629,18 @@ def run_test(self):\n         ###############################################################\n \n         inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n+        outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n         # Backward compatibility test (2nd param is includeWatching)\n         result = self.nodes[3].fundrawtransaction(rawtx, True)\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 2)\n-        assert res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid\n+        assert res_dec[\"vin\"][0][\"txid\"] == self.watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == self.watchonly_txid\n \n         assert_greater_than(result[\"fee\"], 0)\n         assert_greater_than(result[\"changepos\"], -1)\n-        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], self.watchonly_amount / 10)\n \n         signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert not signedtx[\"complete\"]\n@@ -659,9 +660,9 @@ def run_test(self):\n         inputs = []\n         outputs = {self.nodes[3].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10*min_relay_tx_fee})\n+        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n@@ -671,6 +672,7 @@ def run_test(self):\n         # Test no address reuse occurs #\n         ################################\n \n+        rawtx = self.nodes[3].createrawtransaction(inputs=[], outputs={self.nodes[3].getnewaddress(): 1})\n         result3 = self.nodes[3].fundrawtransaction(rawtx)\n         res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n         changeaddress = \"\"\n@@ -693,11 +695,11 @@ def run_test(self):\n         outputs = {self.nodes[2].getnewaddress(): 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n-        result = [self.nodes[3].fundrawtransaction(rawtx), # uses min_relay_tx_fee (set by settxfee)\n-                  self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}), # empty subtraction list\n-                  self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0]}), # uses min_relay_tx_fee (set by settxfee)\n-                  self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee}),\n-                  self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]})]\n+        result = [self.nodes[3].fundrawtransaction(rawtx),  # uses self.min_relay_tx_fee (set by settxfee)\n+            self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}),  # empty subtraction list\n+            self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0]}),  # uses self.min_relay_tx_fee (set by settxfee)\n+            self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee}),\n+            self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]}),]\n \n         dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n         output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]"
      }
    ]
  },
  {
    "sha": "faf8318c55a6001270a6fc8ed2298767099bafba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY4MzE4YzU1YTYwMDEyNzBhNmZjOGVkMjI5ODc2NzA5OWJhZmJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-26T17:49:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-02T21:19:18Z"
      },
      "message": "test: Split fundrawtx test into subtests",
      "tree": {
        "sha": "bb35293cb5a33b905049b906612a57f7c1713792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb35293cb5a33b905049b906612a57f7c1713792"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf8318c55a6001270a6fc8ed2298767099bafba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhanAwAzwzi+LeZIuSARbrU1/ZEzokR+loBh71q2tP8Fm7UPkd6xOMtOoZKkpI7\nT1KXay71u7aa4DveOfRtirNwtPDmw+xFTyWN8MKvkSQNuBmRCQR7W2Nk7kVXWqpe\n0hL8kapa9P6yBMMSxtrBHEc2kQi9ZvWvz85RiezpADoDuuJJFTpaLq/HIucAclYp\nNuvOVQxyKH2KG4146wdwKbEzI2Uxoch/gIhS9W5Lg7316okfqx/HGobRslqFaKyj\nJD0BuRNCDYtIHzLa/QuUl0xiQMSP2bK592IS9g/b75tmMxd6JonvydfSJ4vnBf0h\n1+HsHvrer20n7KXvsL1qHyVdSRbsNJnjagvVesEb9VoZ2BEN26mG0RpeUTuTD7HK\nNGrPplvm0qHSLG1QeRK4PQza8GMt3RZgRYvOQFrNnpplGXgCX/Us2mgdtHTQQrU/\nJcvWK1JS7RgbcFMyTaSkhbGu/SM6F5e+x3QM5we1aY819pg8J3YCM6Sgycqc9yFa\nAKyAD5eD\n=21Ld\n-----END PGP SIGNATURE-----",
        "payload": "tree bb35293cb5a33b905049b906612a57f7c1713792\nparent fa6fba3bc8013d7f813edd71f152d86eab907e4d\nauthor MarcoFalke <falke.marco@gmail.com> 1561571351 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562102358 -0400\n\ntest: Split fundrawtx test into subtests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf8318c55a6001270a6fc8ed2298767099bafba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf8318c55a6001270a6fc8ed2298767099bafba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf8318c55a6001270a6fc8ed2298767099bafba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6fba3bc8013d7f813edd71f152d86eab907e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6fba3bc8013d7f813edd71f152d86eab907e4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6fba3bc8013d7f813edd71f152d86eab907e4d"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 61,
      "deletions": 36
    },
    "files": [
      {
        "sha": "b621081752cf9feaf391855eb361089c315421eb",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 61,
        "deletions": 36,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf8318c55a6001270a6fc8ed2298767099bafba/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf8318c55a6001270a6fc8ed2298767099bafba/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=faf8318c55a6001270a6fc8ed2298767099bafba",
        "patch": "@@ -60,6 +60,36 @@ def run_test(self):\n         self.nodes[0].generate(121)\n         self.sync_all()\n \n+        self.test_change_position()\n+        self.test_simple()\n+        self.test_simple_two_coins()\n+        self.test_simple_two_outputs()\n+        self.test_change()\n+        self.test_no_change()\n+        self.test_invalid_option()\n+        self.test_invalid_change_address()\n+        self.test_valid_change_address()\n+        self.test_change_type()\n+        self.test_coin_selection()\n+        self.test_two_vin()\n+        self.test_two_vin_two_vout()\n+        self.test_invalid_input()\n+        self.test_fee_p2pkh()\n+        self.test_fee_p2pkh_multi_out()\n+        self.test_fee_p2sh()\n+        self.test_fee_4of5()\n+        self.test_spend_2of2()\n+        self.test_locked_wallet()\n+        self.test_many_inputs_fee()\n+        self.test_many_inputs_send()\n+        self.test_op_return()\n+        self.test_watchonly()\n+        self.test_all_watched_funds()\n+        self.test_option_feerate()\n+        self.test_address_reuse()\n+        self.test_option_subtract_fee_from_outputs()\n+\n+    def test_change_position(self):\n         # ensure that setting changePosition in fundraw with an exact match is handled properly\n         rawmatch = self.nodes[2].createrawtransaction([], {self.nodes[2].getnewaddress():50})\n         rawmatch = self.nodes[2].fundrawtransaction(rawmatch, {\"changePosition\":1, \"subtractFeeFromOutputs\":[0]})\n@@ -84,6 +114,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+    def test_simple(self):\n         ###############\n         # simple test #\n         ###############\n@@ -92,10 +123,10 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         assert len(dec_tx['vin']) > 0  #test that we have enough inputs\n \n+    def test_simple_two_coins(self):\n         ##############################\n         # simple test with two coins #\n         ##############################\n@@ -105,25 +136,11 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         assert len(dec_tx['vin']) > 0  #test if we have enough inputs\n-\n-        ##############################\n-        # simple test with two coins #\n-        ##############################\n-        inputs  = [ ]\n-        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert len(dec_tx['vin']) > 0\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n-\n+    def test_simple_two_outputs(self):\n         ################################\n         # simple test with two outputs #\n         ################################\n@@ -133,7 +150,6 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         for out in dec_tx['vout']:\n@@ -142,7 +158,7 @@ def run_test(self):\n         assert len(dec_tx['vin']) > 0\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n-\n+    def test_change(self):\n         #########################################################################\n         # test a fundrawtransaction with a VIN greater than the required amount #\n         #########################################################################\n@@ -164,7 +180,7 @@ def run_test(self):\n \n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n-\n+    def test_no_change(self):\n         #####################################################################\n         # test a fundrawtransaction with which will not get a change output #\n         #####################################################################\n@@ -186,7 +202,7 @@ def run_test(self):\n         assert_equal(rawtxfund['changepos'], -1)\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n-\n+    def test_invalid_option(self):\n         ####################################################\n         # test a fundrawtransaction with an invalid option #\n         ####################################################\n@@ -203,6 +219,7 @@ def run_test(self):\n         # reserveChangeKey was deprecated and is now removed\n         assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n \n+    def test_invalid_change_address(self):\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################\n@@ -216,6 +233,7 @@ def run_test(self):\n \n         assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n+    def test_valid_change_address(self):\n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n         ############################################################\n@@ -234,6 +252,7 @@ def run_test(self):\n         out = dec_tx['vout'][0]\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n+    def test_change_type(self):\n         #########################################################\n         # test a fundrawtransaction with a provided change type #\n         #########################################################\n@@ -248,6 +267,7 @@ def run_test(self):\n         dec_tx = self.nodes[2].decoderawtransaction(rawtx['hex'])\n         assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n \n+    def test_coin_selection(self):\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -265,7 +285,6 @@ def run_test(self):\n         assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n@@ -282,7 +301,7 @@ def run_test(self):\n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)\n \n-\n+    def test_two_vin(self):\n         ###########################################\n         # test a fundrawtransaction with two VINs #\n         ###########################################\n@@ -296,7 +315,6 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n@@ -316,6 +334,7 @@ def run_test(self):\n \n         assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n \n+    def test_two_vin_two_vout(self):\n         #########################################################\n         # test a fundrawtransaction with two VINs and two vOUTs #\n         #########################################################\n@@ -329,7 +348,6 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n@@ -341,16 +359,16 @@ def run_test(self):\n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)\n \n+    def test_invalid_input(self):\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n         inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n         assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n+    def test_fee_p2pkh(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n         inputs = []\n@@ -367,6 +385,7 @@ def run_test(self):\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n+    def test_fee_p2pkh_multi_out(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction with multiple outputs\n         inputs = []\n@@ -382,7 +401,7 @@ def run_test(self):\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n-\n+    def test_fee_p2sh(self):\n         ############################################################\n         #compare fee of a 2of2 multisig p2sh transaction\n \n@@ -409,7 +428,7 @@ def run_test(self):\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n-\n+    def test_fee_4of5(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n \n@@ -442,7 +461,7 @@ def run_test(self):\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n         ############################################################\n \n-\n+    def test_spend_2of2(self):\n         ############################################################\n         # spend a 2of2 multisig transaction over fundraw\n \n@@ -457,7 +476,7 @@ def run_test(self):\n \n \n         # send 1.2 BTC to msig addr\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n+        self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -469,14 +488,15 @@ def run_test(self):\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n         signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n-        txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n+        self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n         # make sure funds are received at node1\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n \n+    def test_locked_wallet(self):\n         ############################################################\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n@@ -524,14 +544,14 @@ def run_test(self):\n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n         signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n-        txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n+        self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n         # make sure funds are received at node1\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n \n-\n+    def test_many_inputs_fee(self):\n         ###############################################\n         # multiple (~19) inputs tx test | Compare fee #\n         ###############################################\n@@ -561,7 +581,7 @@ def run_test(self):\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance * 19  #~19 inputs\n \n-\n+    def test_many_inputs_send(self):\n         #############################################\n         # multiple (~19) inputs tx test | sign/send #\n         #############################################\n@@ -585,12 +605,13 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n         fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n-        txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n+        self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n+    def test_op_return(self):\n         #####################################################\n         # test fundrawtransaction with OP_RETURN and no vin #\n         #####################################################\n@@ -607,7 +628,7 @@ def run_test(self):\n         assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n         assert_equal(len(dec_tx['vout']), 2) # one change output added\n \n-\n+    def test_watchonly(self):\n         ##################################################\n         # test a fundrawtransaction using only watchonly #\n         ##################################################\n@@ -624,6 +645,7 @@ def run_test(self):\n         assert \"fee\" in result.keys()\n         assert_greater_than(result[\"changepos\"], -1)\n \n+    def test_all_watched_funds(self):\n         ###############################################################\n         # test fundrawtransaction using the entirety of watched funds #\n         ###############################################################\n@@ -650,6 +672,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+    def test_option_feerate(self):\n         #######################\n         # Test feeRate option #\n         #######################\n@@ -668,6 +691,7 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+    def test_address_reuse(self):\n         ################################\n         # Test no address reuse occurs #\n         ################################\n@@ -684,6 +708,7 @@ def run_test(self):\n         # Now the change address key should be removed from the keypool\n         assert changeaddress != nextaddr\n \n+    def test_option_subtract_fee_from_outputs(self):\n         ######################################\n         # Test subtractFeeFromOutputs option #\n         ######################################"
      }
    ]
  }
]