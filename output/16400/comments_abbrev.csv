sdaftuar,2019-07-16 20:18:07,"The motivation behind this refactor is to allow implementation of a package relay system (#14895).  A simple implementation that I have in mind, which requires no additional p2p protocol changes, is shown at #16401.",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-511969315,511969315,
DrahtBot,2019-07-16 22:33:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16658](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16658.html) (validation: Rename CheckInputs to CheckInpu",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-512027229,512027229,
sdaftuar,2019-07-17 19:08:37,"I went ahead and squashed the commits up to the variable rename, unsquashed version is here: [16400.1](https://github.com/sdaftuar/bitcoin/commits/16400.1)",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-512528705,512528705,
sdaftuar,2019-07-31 14:20:26,Rebased,https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-516869950,516869950,
MarcoFalke,2019-08-07 18:03:01,"ACK 0840a1d2e2270c06342710c4ebfaac1c41652dab (read diff with --ignore-all-space)\n\nI like that this splits up the massivley large ATMP into logical chunks\n(not only functional separate checks, but also structural into args and\nworkspace). With the added documentation, the code is probably easier to\nunderstand now.\n\n<details><summary>Show signature and timestamp</summary>\n\nSignatur",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-519207091,519207091,
TheBlueMatt,2019-08-14 20:11:04,utACK 0840a1d2e2270c06342710c4ebfaac1c41652dab.,https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-521399819,521399819,
sdaftuar,2019-09-03 19:36:16,"Oops. (For future reference, if you accidentally push master to your branch because, say, you didn't actually finish the rebase before you pushed, then the PR will autoclose.)",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-527606973,527606973,
MarcoFalke,2019-09-03 20:07:36,"Could squash the commits?\n\n\nre-ACK 4c176230dbe1d6c7f507f9983dc40c48b39766ba (did the rebase myself and came to the same result)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 4c176230dbe1d6c7f507f9983dc40c48b39766ba (did the rebase myself and came to the same result)\n-----BEGIN PGP SIGNA",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-527618316,527618316,
sdaftuar,2019-09-03 20:10:20,Squashed,https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-527619485,527619485,
laanwj,2019-09-11 07:01:34,"> The motivation behind this refactor is to allow implementation of a package relay system (#14895)\n\nBumped the milestone to 0.20: as noted by @fanquake, as this is preparation work for a feature, it doesn't make a lot of sense to merge this last-minute for 0.19, so I think we should merge this early in the 0.20 release cycle.\n(on the other hand this has two ACKs so if people feel this is re",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-530250266,530250266,
MarcoFalke,2019-09-11 08:32:29,"I think it makes sense to merge this for 0.19 to make policy backports to 0.19 easier\n\n@sdaftuar Are you still working on this?",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-530279679,530279679,
sdaftuar,2019-09-11 08:38:05,"I independently figured weâ€™d wait until 0.20 for the same reason @laanwj gave, but I can get this rebased sooner for consideration in 0.19.",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-530281623,530281623,
sdaftuar,2019-09-16 15:39:18,Rebased (old version is [16400.2](https://github.com/sdaftuar/bitcoin/commits/16400.2)),https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-531833684,531833684,
MarcoFalke,2019-09-16 18:17:27,"re-ACK 4a87c5cfdf7dd72d999ebeaf17db6695a7c6298d (did the rebase myself and arrived at the same result, mod whitespace)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 4a87c5cfdf7dd72d999ebeaf17db6695a7c6298d (did the rebase myself and arrived at the same result, mod whitespace)\n-----BEGIN PGP S",https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-531895366,531895366,
laanwj,2019-09-18 14:15:35,ACK 4a87c5cfdf7dd72d999ebeaf17db6695a7c6298d,https://github.com/bitcoin/bitcoin/pull/16400#issuecomment-532704588,532704588,
MarcoFalke,2019-07-17 11:50:16,"Not sure why this is set to `0` as default, as opposed to the actual `DEFAULT_*` values. I understand that setting the defaults here is very verbose and not needed, so why not make it `const`, so that the compiler enforces that this is set in the constructor?\n\n```suggestion\n    const size_t nLimitDescendantSize;\n```",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304359601,304359601,src/validation.cpp
MarcoFalke,2019-07-17 11:53:59,"Can you explain the difference between `pool` and `this->pool`? Looks like passing in the pool as a function parameter is redundant and confusing. Might want to drop it?\n\nAlso, I'd slightly prefer to call the member `m_tx_pool` or something. We already use `mempool` for the global and `pool` for things passed as parameters.\n\n```suggestion\n    bool AcceptSingleTransaction(const CChainPara",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304360866,304360866,src/validation.cpp
MarcoFalke,2019-07-17 11:56:50,"Looks like all the remaining args can be passed as a `ATMPArgs`. Any reason not to do this?\n\n```suggestion\n            ATMPArgs& args);\n```",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304361906,304361906,src/validation.cpp
MarcoFalke,2019-07-17 11:57:57,"Could better document which arguments are going in and which are going out by setting everything that goes in to `const`?\n\n```suggestion\n        const bool test_accept;\n```",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304362289,304362289,src/validation.cpp
MarcoFalke,2019-07-17 12:00:21,"Why are some of the settings parsed in the constructor and saved as a member and others are not?\n\nCould do the same here.\n\n```suggestion\n        CAmount mempoolRejectFee = pool.GetMinFee(m_max_pool_size).GetFee(package_size);\n```",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304363188,304363188,src/validation.cpp
MarcoFalke,2019-07-17 12:09:33,"Given that the local name and the name of the member are identical, does it really make sense to alias it? Looks like you already changed every line in this function due to whitespace fixups, so might as well prefix what we need with `ws.` or `args.` in line. No strong opinion, though.\nIf you decide to keep the current approach, I think you can make review easier by not duplicating all the types",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304366523,304366523,src/validation.cpp
MarcoFalke,2019-07-17 12:20:22,"Any reason this is not stored in the workspace at this point? Maybe as a unique ptr or something, like the `entry`?",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304370428,304370428,src/validation.cpp
MarcoFalke,2019-07-17 12:22:35,"I'd prefer not to initialize the memory, so that valgrind and other memory tools can warn about logic errors in the code.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304371351,304371351,src/validation.cpp
MarcoFalke,2019-07-17 12:25:27,"Not sure what you are trying to say with the `XXX:`. I feel like the documentation ""typo"" can be fixed in a separate commit or pull request.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304372367,304372367,src/validation.cpp
sdaftuar,2019-07-17 14:57:12,"Passing the mempool into AcceptSingleTransaction was just a mistake, removing.\n\nI'll add a commit that fixes all the variable naming to conform to the style guide.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304452075,304452075,src/validation.cpp
sdaftuar,2019-07-17 14:57:27,"Sounds good, thanks!",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304452211,304452211,src/validation.cpp
sdaftuar,2019-07-17 15:07:02,Sounds good.,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304462008,304462008,src/validation.cpp
sdaftuar,2019-07-17 15:07:46,Agreed - looks better that way.,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304462743,304462743,src/validation.cpp
sdaftuar,2019-07-17 15:18:36,"I'm not convinced that removing default initialization is a win, but I'm also indifferent, so I'll take your preference.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304468562,304468562,src/validation.cpp
sdaftuar,2019-07-17 15:21:40,"The reason is that I end up needing to access the package size limits directly when adding `AcceptMultipleTransactions()` in #16401, whereas I didn't need local copies of the reject fee.  So my main motivation behind not saving these as members is to avoid cluttering the state, which was already complex to untangle.\n\nI don't feel strongly about this though; I just wanted to make it as easy as ",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304470126,304470126,src/validation.cpp
sdaftuar,2019-07-17 15:25:21,"I did think it was going to be easier for review if I didn't end up changing all the variables out at the same time.  I think my preferred approach would be to fix the variable names in MemPoolAccept, Workspace, and ATMPArgs to conform to the style guide, but then continue to use these aliases so that we're not also changing all the variables in each of these functions.\n\nOne benefit of the ali",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304472162,304472162,src/validation.cpp
sdaftuar,2019-07-17 15:26:02,"Yeah I just wanted to call attention to it being wrong; given that we do keep a lock on the mempool throughout testing for acceptance, I wonder if we should just scrap the whole idea of using the dummy at all?",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304472518,304472518,src/validation.cpp
sdaftuar,2019-07-17 15:27:12,"I had a version of this code where it was a unique_ptr, but thought this was an easy way to avoid a heap allocation that we don't really need.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304473078,304473078,src/validation.cpp
MarcoFalke,2019-07-17 17:51:53,Could move this doc to `ATMPArgs::coins_to_uncache`?,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304563740,304563740,src/validation.cpp
sdaftuar,2019-07-18 13:32:58,"Cleaned this up by changing the comment to give a reason why we might actually want to still use a dummy here, thanks @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r304918462,304918462,src/validation.cpp
ajtowns,2019-07-24 05:59:18,Doesn't seem necessary?,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306638080,306638080,src/validation.cpp
ajtowns,2019-07-24 06:03:30,"Seems like `m_coins_to_uncache` could just be a member var of `MemPoolAccept` directly; with either a `UncacheCoins()` method invoked by the caller on failure, or having a `~MemPoolAccept()` destructor that automatically uncaches, with `AcceptSingleTransaction` calling `m_coins_to_uncache.clear()` before returning true to avoid uncaching things that should remain cached.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306638949,306638949,src/validation.cpp
ajtowns,2019-07-24 06:07:52,"Could emphasise that this is per-transaction workspace, as opposed to `m_view`, `m_viewmempool` and `m_dummy`",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306640022,306640022,src/validation.cpp
ajtowns,2019-07-24 06:08:47,Should have `EXCLUSIVE_LOCKS_REQUIRED(cs_main)`,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306640269,306640269,src/validation.cpp
ajtowns,2019-07-24 06:09:52,"Probably should have `namespace { class MemPoolAccept { }; };` so these methods get internal linkage, to match the ""static"" they used to have.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306640536,306640536,src/validation.cpp
ajtowns,2019-07-24 06:13:34,"Could set `const CTransaction& m_tx = *ptx` in Workspace, to save passing `ptx` around as an argument. Once you get to AcceptMultipleTransactions, I think this would let you just iterate over `tx_workspaces` instead of having to simultaneously iterate over `tx_list` and `tx_workspaces` which would make that code a bit simpler.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306641375,306641375,src/validation.cpp
ajtowns,2019-07-24 06:15:14,"I think you could make it even easier by having `const ATMPArgs m_args` as a member of MemPoolAccept, and not passing it around at all. That doesn't work for `m_bypass_limits` in AcceptMultipleTransactions, but you're basically manually checking the limits there anyway, so maybe could do `false` for all of them; otherwise could use `Workspace` for per-tx logic.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306641758,306641758,src/validation.cpp
sdaftuar,2019-07-24 13:56:18,"I have no idea now why I thought I needed it, gone.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306823205,306823205,src/validation.cpp
sdaftuar,2019-07-24 13:56:25,Sounds good.,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306823270,306823270,src/validation.cpp
sdaftuar,2019-07-24 14:15:17,"There's one place in PreChecks() where we need ptx, but we can cache that in Workspace at least. Done.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306833790,306833790,src/validation.cpp
sdaftuar,2019-07-24 14:15:28,Done.,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306833880,306833880,src/validation.cpp
sdaftuar,2019-07-24 14:31:26,"I think I'm going to leave this as-is for the moment.  I do think that holistically, we can think about doing one of two things with this refactor:\n\n(a) go all in for storing state in the class and not pass around data between member functions\n(b) dump this class and pass state around explicitly instead\n\nI did something weird in this PR where I started to introduce a class (mostly to fun",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306843163,306843163,src/validation.cpp
sdaftuar,2019-07-24 14:33:37,"I'm not sure it makes sense to mix ATMP logic at this layer with managing the utxo cache -- I think that's better handled by callers in the long run, even we're just doing something very simple now.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r306844481,306844481,src/validation.cpp
ajtowns,2019-07-25 00:41:50,"Hmm, I was thinking of it more as ""ATMP logic messes up the cache when it decides it can't accept, so cleaning up that mess should also be part of ATMP logic"". But having it be done in ATMPWithTime is still part of ATMP in my book, so either way works.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r307075556,307075556,src/validation.cpp
ajtowns,2019-07-25 01:12:42,"I guess I think either way is fine, but my preference is to keep the class for namespacing (so it's clear the private methods are only called from the public ones), and to keep the number of explicit params to the functions pretty small -- pulling the stuff you actually need from the Args/Workspace structs like you do looks good to me.\n\nMaybe it might make sense to only pass things as args if ",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r307080579,307080579,src/validation.cpp
MarcoFalke,2019-08-07 17:24:41,"note to other reviewers. This says ""package"", but in the current code this is a single tx (the one that is added)",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r311672077,311672077,src/validation.cpp
MarcoFalke,2019-08-07 17:33:34,doc-nit: Should this say that this method fully initializes the `ws`? Or is this only a coincidence not worth to mention?,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r311676031,311676031,src/validation.cpp
ajtowns,2019-08-15 07:18:57,"Seems a bit weird to have `m_entry` as a `unique_ptr`, but not have `txdata` in there as well just to avoid it being on the heap. I think making `txdata` a `unique_ptr` in Workspace would simplify #16401 a bit too.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r314198443,314198443,src/validation.cpp
ajtowns,2019-08-15 08:03:26,"Would make for a slightly smaller diff to say `CTxMemPoolEntry& entry = *ws.m_entry;` and only declare it after `m_entry` has been reset (and `assert(wx.m_entry);` beforehand in `Finalize` to keep the static analysis tools happy, I suppose)",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r314209941,314209941,src/validation.cpp
MarcoFalke,2019-09-03 19:54:07,Any reason you remove this comment here?,https://github.com/bitcoin/bitcoin/pull/16400#discussion_r320450089,320450089,src/validation.cpp
sdaftuar,2019-09-03 19:57:45,"Not in particular, I think with the refactor the structure made it more clear that we do the CPU intensive operations after the non-CPU intensive ones, but I can resurrect this comment in `AcceptSingleTransaction`.",https://github.com/bitcoin/bitcoin/pull/16400#discussion_r320451462,320451462,src/validation.cpp
