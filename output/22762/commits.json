[
  {
    "sha": "fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVhZWVjODBjNmNkY2E5Y2EwMjdkODBkZmYzYjM5NzkxMWZmMmMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-21T11:49:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-09T07:11:41Z"
      },
      "message": "Move LoadAddrman from init to addrdb\n\nInit should only concern itself with the initialization order, not the\ndetailed initialization logic of every module.\n\nAlso, inlining logic into a method that is ~800 lines of code, makes it\nimpossible to unit test on its own.",
      "tree": {
        "sha": "ebf8556dc2ff667bf3929c1f2bc3a72b447fe77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebf8556dc2ff667bf3929c1f2bc3a72b447fe77a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUivZQv/R3BGKjq1A+M+zsufNV8IuRQqhsao3lk6e/stVp6sDvegECfXTrzaB5Xu\n6gWOVVPNhgcOmHTgUZQsMgbQapQjvXKjSvuRMz1E0P+eFmave5RNMJ7PoZj0g/L3\nPqRg6vlmJCM+xpgjJn4XsR22VLEItBqxyl1U1zg/QQ0QdD6dgjSo2pzx9mwdpnI2\nUnZwO5f06fAXVn3qQ61pKHrNwb4S9Zv/xaBc5j8F87xMl+H25ZZ2XUeBe6yI+4xC\nuIpR3iLNlZUeOuia+pOW+mmd7vVTLe8P2IAoDukqGvLOunlIUWqNv5/CQS7Q5ceM\nje5HKJRecMITkZusrKy8cSyyjvdfqBOt+w2ac5hZPbklUzES7fhGGJN1Jv9myuOg\nXP3J3S7G4u/i3tw1sTYIyHlV6v/rywBHozbMj9fxoHbuMG93MSEaAhAc6nuwMfhR\nBzdlR+S1TBclYDKoN8TsyS/u8TavoY8XDmI/NCL883azq5NRX/a3APJmKJ+cMe4r\nJ+zG6rQV\n=lC1v\n-----END PGP SIGNATURE-----",
        "payload": "tree ebf8556dc2ff667bf3929c1f2bc3a72b447fe77a\nparent e4aa9b15b9f80a08076ad329b473fe9107d9e65e\nauthor MarcoFalke <falke.marco@gmail.com> 1629546556 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1631171501 +0200\n\nMove LoadAddrman from init to addrdb\n\nInit should only concern itself with the initialization order, not the\ndetailed initialization logic of every module.\n\nAlso, inlining logic into a method that is ~800 lines of code, makes it\nimpossible to unit test on its own.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4aa9b15b9f80a08076ad329b473fe9107d9e65e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4aa9b15b9f80a08076ad329b473fe9107d9e65e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4aa9b15b9f80a08076ad329b473fe9107d9e65e"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 25,
      "deletions": 12
    },
    "files": [
      {
        "sha": "fd85e717e321b36b06fe86385205aea08dd560f8",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
        "patch": "@@ -18,6 +18,7 @@\n #include <univalue.h>\n #include <util/settings.h>\n #include <util/system.h>\n+#include <util/translation.h>\n \n namespace {\n template <typename Stream, typename Data>\n@@ -187,6 +188,23 @@ bool ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n     return DeserializeDB(ssPeers, addr, false);\n }\n \n+std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman)\n+{\n+    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+\n+    int64_t nStart = GetTimeMillis();\n+    if (ReadPeerAddresses(args, *addrman)) {\n+        LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman->size(), GetTimeMillis() - nStart);\n+    } else {\n+        // Addrman can be in an inconsistent state after failure, reset it\n+        addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+        LogPrintf(\"Recreating peers.dat\\n\");\n+        DumpPeerAddresses(args, *addrman);\n+    }\n+    return std::nullopt;\n+}\n+\n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)\n {\n     LOG_TIME_SECONDS(strprintf(\"Flush %d outbound block-relay-only peer addresses to anchors.dat\", anchors.size()));"
      },
      {
        "sha": "99d8a975f4d88cd20788d66512a02978eda7f9bf",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
        "patch": "@@ -10,12 +10,14 @@\n #include <net_types.h> // For banmap_t\n #include <univalue.h>\n \n+#include <optional>\n #include <vector>\n \n class ArgsManager;\n class CAddrMan;\n class CAddress;\n class CDataStream;\n+struct bilingual_str;\n \n bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr);\n bool ReadPeerAddresses(const ArgsManager& args, CAddrMan& addr);\n@@ -46,6 +48,9 @@ class CBanDB\n     bool Read(banmap_t& banSet);\n };\n \n+/** Returns an error string on failure */\n+std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman);\n+\n /**\n  * Dump the anchor IP address database (anchors.dat)\n  *"
      },
      {
        "sha": "ba1c88ad919e89a80f532618b740f4bf9f55b3a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
        "patch": "@@ -1200,19 +1200,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             LogPrintf(\"Using /16 prefix for IP bucketing\\n\");\n         }\n \n-        auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n-        node.addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-\n-        // Load addresses from peers.dat\n         uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n-        int64_t nStart = GetTimeMillis();\n-        if (ReadPeerAddresses(args, *node.addrman)) {\n-            LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", node.addrman->size(), GetTimeMillis() - nStart);\n-        } else {\n-            // Addrman can be in an inconsistent state after failure, reset it\n-            node.addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-            LogPrintf(\"Recreating peers.dat\\n\");\n-            DumpPeerAddresses(args, *node.addrman);\n+        if (const auto error{LoadAddrman(asmap, args, node.addrman)}) {\n+            return InitError(*error);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "fa4e2ccfd8ae96c381947285bef47cb39474ac89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRlMmNjZmQ4YWU5NmMzODE5NDcyODViZWY0N2NiMzk0NzRhYzg5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-21T13:20:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-09T07:12:12Z"
      },
      "message": "Inline ReadPeerAddresses\n\nNo need to have a function that is only called in one place",
      "tree": {
        "sha": "df8e09e36ea5ddd58345736a6efc6692015b1e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df8e09e36ea5ddd58345736a6efc6692015b1e0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4e2ccfd8ae96c381947285bef47cb39474ac89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhEzQv/cZSAFasccLS9wXkP7otMei5R6j7ppUT2tIdtZ+BhHaGQJIhhzOYwnJIs\nB/reZC/D5b7T3ot3tKIIHMLJyXPqYaaNhvRslY9ymY7L4CVjalAtvlKG3arqDNeU\n3XG1aTCKgnar56emiLzbvbMwyuz3KnVIzGBTusFXkeYb166AHepSbkntcWtqyvcd\ngQXXHjgNekLwjXsXUp/kudO/P3nOAft8LblmgOj+Y/QivN86Wybm6RE0rC11EDxt\ni3iICJ0RL9zj/d0Y27zQqF/IjiC2PKFz7QzuNFqosmVaTOTz4B2Qh989Il/mYM+X\nKBbPjpN3QaBSfGxaox73RvN5XRB4xpjrJiTaxi5mkimFOCgauKrVwzb7JH+m/x+L\nU1jIrE4cgNm0YxZL3xdUKG6IV469Cqrg3DG7ceFESMQAQP5EMUvragwfqL+n8VXq\nu9uPrER3aIKRi8E9PrRNyzfu3TOzknG9BLnIgJufHYbK9sjRllEZfcv/U65+VRSK\naRcGYOMx\n=AsqM\n-----END PGP SIGNATURE-----",
        "payload": "tree df8e09e36ea5ddd58345736a6efc6692015b1e0a\nparent fa5aeec80c6cdca9ca027d80dff3b397911ff2c2\nauthor MarcoFalke <falke.marco@gmail.com> 1629552000 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1631171532 +0200\n\nInline ReadPeerAddresses\n\nNo need to have a function that is only called in one place\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e2ccfd8ae96c381947285bef47cb39474ac89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4e2ccfd8ae96c381947285bef47cb39474ac89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e2ccfd8ae96c381947285bef47cb39474ac89/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5aeec80c6cdca9ca027d80dff3b397911ff2c2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "77f0897a7f1bfd2ae5878f69afab6e0c7d0e2863",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4e2ccfd8ae96c381947285bef47cb39474ac89/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4e2ccfd8ae96c381947285bef47cb39474ac89/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=fa4e2ccfd8ae96c381947285bef47cb39474ac89",
        "patch": "@@ -177,12 +177,6 @@ bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr)\n     return SerializeFileDB(\"peers\", pathAddr, addr, CLIENT_VERSION);\n }\n \n-bool ReadPeerAddresses(const ArgsManager& args, CAddrMan& addr)\n-{\n-    const auto pathAddr = args.GetDataDirNet() / \"peers.dat\";\n-    return DeserializeFileDB(pathAddr, addr, CLIENT_VERSION);\n-}\n-\n bool ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n {\n     return DeserializeDB(ssPeers, addr, false);\n@@ -194,7 +188,8 @@ std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const A\n     addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n \n     int64_t nStart = GetTimeMillis();\n-    if (ReadPeerAddresses(args, *addrman)) {\n+    const auto path_addr{args.GetDataDirNet() / \"peers.dat\"};\n+    if (DeserializeFileDB(path_addr, *addrman, CLIENT_VERSION)) {\n         LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman->size(), GetTimeMillis() - nStart);\n     } else {\n         // Addrman can be in an inconsistent state after failure, reset it"
      },
      {
        "sha": "55fcd7508faf9b2610069c3818d278a68da240d5",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4e2ccfd8ae96c381947285bef47cb39474ac89/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4e2ccfd8ae96c381947285bef47cb39474ac89/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=fa4e2ccfd8ae96c381947285bef47cb39474ac89",
        "patch": "@@ -20,7 +20,6 @@ class CDataStream;\n struct bilingual_str;\n \n bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr);\n-bool ReadPeerAddresses(const ArgsManager& args, CAddrMan& addr);\n /** Only used by tests. */\n bool ReadFromStream(CAddrMan& addr, CDataStream& ssPeers);\n "
      }
    ]
  },
  {
    "sha": "fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU1YzNkYzFiNGJiZGM2YTUzYmQxMWZhNmMwYjJlYzZiYmI2NGFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-21T14:17:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-09T07:20:43Z"
      },
      "message": "Raise InitError when peers.dat is invalid or corrupted",
      "tree": {
        "sha": "7c8b699fa4c19748eb427adb92dcd91ae4379f7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c8b699fa4c19748eb427adb92dcd91ae4379f7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhOEQv/Wjh3X5pTaeP3RtqgjMYyKbPq0QcEi6hGVOVfFyXWGBfb4ett/hTof17Y\nn34Ir8ILNRnCixSIPudyCKdwk2dPuVyaSKL9IMFUIvFgFmrSdX2wej32xtVx1aRO\n6HtRsxR5sX5nvZh3BIa4T2g4nSaewmCAm2aPSBdhFsOV8FqwQyWaYsK0i2riXmdA\nmfGq5bApT1dD5u4easw/aWBP0qNQ1cD4h93mFWiylLkp+XH5SOLb0SJae0CY96LM\nYY9zVEvN0ApjUggNzttAh/1BUavM1SgoqJsuPT1wYWUR1VuNV6qPLh0OSnUBXV5r\ntYW6EImqpICUDuCnIC9yj2nVJIrpbxTAozTVI4hWKVHUnY4wJDuC9BMG+OJ24NGW\nkWlrt9PYszJK0iAbXKwvff7eN7MfcG3AKZvgq+0wq2D+pt+zPEi5vW7tK3AnQLv4\n+wlD7ED3FniY5XD7/rIsiX7v8oPh2nnw9vUCAl92cu4DjyKJ4gL0m63Uof7gO3Oa\niWFUGmWd\n=O3tt\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c8b699fa4c19748eb427adb92dcd91ae4379f7c\nparent fa4e2ccfd8ae96c381947285bef47cb39474ac89\nauthor MarcoFalke <falke.marco@gmail.com> 1629555472 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1631172043 +0200\n\nRaise InitError when peers.dat is invalid or corrupted\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4e2ccfd8ae96c381947285bef47cb39474ac89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4e2ccfd8ae96c381947285bef47cb39474ac89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4e2ccfd8ae96c381947285bef47cb39474ac89"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 68,
      "deletions": 54
    },
    "files": [
      {
        "sha": "1e73750ce301df4ab703b2e076b1f86bf41e466d",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 36,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
        "patch": "@@ -21,6 +21,12 @@\n #include <util/translation.h>\n \n namespace {\n+\n+class DbNotFoundError : public std::exception\n+{\n+    using std::exception::exception;\n+};\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n@@ -78,47 +84,40 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n }\n \n template <typename Stream, typename Data>\n-bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n+void DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n {\n-    try {\n-        CHashVerifier<Stream> verifier(&stream);\n-        // de-serialize file header (network specific magic number) and ..\n-        unsigned char pchMsgTmp[4];\n-        verifier >> pchMsgTmp;\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-\n-        // de-serialize data\n-        verifier >> data;\n-\n-        // verify checksum\n-        if (fCheckSum) {\n-            uint256 hashTmp;\n-            stream >> hashTmp;\n-            if (hashTmp != verifier.GetHash()) {\n-                return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-            }\n+    CHashVerifier<Stream> verifier(&stream);\n+    // de-serialize file header (network specific magic number) and ..\n+    unsigned char pchMsgTmp[4];\n+    verifier >> pchMsgTmp;\n+    // ... verify the network matches ours\n+    if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp))) {\n+        throw std::runtime_error{\"Invalid network magic number\"};\n+    }\n+\n+    // de-serialize data\n+    verifier >> data;\n+\n+    // verify checksum\n+    if (fCheckSum) {\n+        uint256 hashTmp;\n+        stream >> hashTmp;\n+        if (hashTmp != verifier.GetHash()) {\n+            throw std::runtime_error{\"Checksum mismatch, data corrupted\"};\n         }\n     }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-\n-    return true;\n }\n \n template <typename Data>\n-bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n+void DeserializeFileDB(const fs::path& path, Data& data, int version)\n {\n     // open input file, and associate with CAutoFile\n     FILE* file = fsbridge::fopen(path, \"rb\");\n     CAutoFile filein(file, SER_DISK, version);\n     if (filein.IsNull()) {\n-        LogPrintf(\"Missing or invalid file %s\\n\", path.string());\n-        return false;\n+        throw DbNotFoundError{};\n     }\n-    return DeserializeDB(filein, data);\n+    DeserializeDB(filein, data);\n }\n } // namespace\n \n@@ -177,9 +176,9 @@ bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr)\n     return SerializeFileDB(\"peers\", pathAddr, addr, CLIENT_VERSION);\n }\n \n-bool ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n+void ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n {\n-    return DeserializeDB(ssPeers, addr, false);\n+    DeserializeDB(ssPeers, addr, false);\n }\n \n std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman)\n@@ -189,13 +188,18 @@ std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const A\n \n     int64_t nStart = GetTimeMillis();\n     const auto path_addr{args.GetDataDirNet() / \"peers.dat\"};\n-    if (DeserializeFileDB(path_addr, *addrman, CLIENT_VERSION)) {\n+    try {\n+        DeserializeFileDB(path_addr, *addrman, CLIENT_VERSION);\n         LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman->size(), GetTimeMillis() - nStart);\n-    } else {\n+    } catch (const DbNotFoundError&) {\n         // Addrman can be in an inconsistent state after failure, reset it\n         addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-        LogPrintf(\"Recreating peers.dat\\n\");\n+        LogPrintf(\"Creating peers.dat because the file was not found (%s)\\n\", path_addr);\n         DumpPeerAddresses(args, *addrman);\n+    } catch (const std::exception& e) {\n+        addrman = nullptr;\n+        return strprintf(_(\"Invalid or corrupt peers.dat (%s). If you believe this is a bug, please report it to %s. As a workaround, you can move the file (%s) out of the way (rename, move, or delete) to have a new one created on the next start.\"),\n+                         e.what(), PACKAGE_BUGREPORT, path_addr);\n     }\n     return std::nullopt;\n }\n@@ -209,9 +213,10 @@ void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& a\n std::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\n {\n     std::vector<CAddress> anchors;\n-    if (DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT)) {\n+    try {\n+        DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);\n         LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), anchors_db_path.filename());\n-    } else {\n+    } catch (const std::exception&) {\n         anchors.clear();\n     }\n "
      },
      {
        "sha": "33cc1f92040f09e8a832f2b9eaa01da079db4d56",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
        "patch": "@@ -21,7 +21,7 @@ struct bilingual_str;\n \n bool DumpPeerAddresses(const ArgsManager& args, const CAddrMan& addr);\n /** Only used by tests. */\n-bool ReadFromStream(CAddrMan& addr, CDataStream& ssPeers);\n+void ReadFromStream(CAddrMan& addr, CDataStream& ssPeers);\n \n /** Access to the banlist database (banlist.json) */\n class CBanDB"
      },
      {
        "sha": "01a492a20b8a8633bb9ed291fdee475b20a7d13a",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
        "patch": "@@ -1043,7 +1043,7 @@ BOOST_AUTO_TEST_CASE(load_addrman)\n \n     CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(ReadFromStream(addrman2, ssPeers2));\n+    ReadFromStream(addrman2, ssPeers2);\n     BOOST_CHECK(addrman2.size() == 3);\n }\n \n@@ -1073,7 +1073,7 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n \n     CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(!ReadFromStream(addrman2, ssPeers2));\n+    BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n "
      },
      {
        "sha": "323090e04103533e3cee2542ec5102dfa3b24a72",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
        "patch": "@@ -23,5 +23,8 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n     CAddrMan addr_man(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n-    ReadFromStream(addr_man, data_stream);\n+    try {\n+        ReadFromStream(addr_man, data_stream);\n+    } catch (const std::exception&) {\n+    }\n }"
      },
      {
        "sha": "ee421c89b5ab7c4e60d96d37847c501fade78aad",
        "filename": "test/functional/feature_addrman.py",
        "status": "modified",
        "additions": 20,
        "deletions": 14,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/test/functional/feature_addrman.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae/test/functional/feature_addrman.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_addrman.py?ref=fa55c3dc1b4bbdc6a53bd11fa6c0b2ec6bbb64ae",
        "patch": "@@ -10,6 +10,7 @@\n from test_framework.messages import ser_uint256, hash256\n from test_framework.p2p import MAGIC_BYTES\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n from test_framework.util import assert_equal\n \n \n@@ -43,6 +44,12 @@ def set_test_params(self):\n \n     def run_test(self):\n         peers_dat = os.path.join(self.nodes[0].datadir, self.chain, \"peers.dat\")\n+        init_error = lambda reason: (\n+            f\"Error: Invalid or corrupt peers.dat \\\\({reason}\\\\). If you believe this \"\n+            f\"is a bug, please report it to {self.config['environment']['PACKAGE_BUGREPORT']}. \"\n+            f'As a workaround, you can move the file \\\\(\"{peers_dat}\"\\\\) out of the way \\\\(rename, '\n+            \"move, or delete\\\\) to have a new one created on the next start.\"\n+        )\n \n         self.log.info(\"Check that mocked addrman is valid\")\n         self.stop_node(0)\n@@ -54,30 +61,29 @@ def run_test(self):\n         self.log.info(\"Check that addrman from future cannot be read\")\n         self.stop_node(0)\n         write_addrman(peers_dat, lowest_compatible=111)\n-        with self.nodes[0].assert_debug_log([\n-                f'ERROR: DeserializeDB: Deserialize or I/O error - Unsupported format of addrman database: 1. It is compatible with formats >=111, but the maximum supported by this version of {self.config[\"environment\"][\"PACKAGE_NAME\"]} is 3.',\n-                \"Recreating peers.dat\",\n-        ]):\n-            self.start_node(0)\n-        assert_equal(self.nodes[0].getnodeaddresses(), [])\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\n+                \"Unsupported format of addrman database: 1. It is compatible with \"\n+                \"formats >=111, but the maximum supported by this version of \"\n+                f\"{self.config['environment']['PACKAGE_NAME']} is 3.: (.+)\"\n+            ),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n \n         self.log.info(\"Check that corrupt addrman cannot be read\")\n         self.stop_node(0)\n         with open(peers_dat, \"wb\") as f:\n             f.write(serialize_addrman()[:-1])\n-        with self.nodes[0].assert_debug_log([\n-                \"ERROR: DeserializeDB: Deserialize or I/O error - CAutoFile::read: end of file\",\n-                \"Recreating peers.dat\",\n-        ]):\n-            self.start_node(0)\n-        assert_equal(self.nodes[0].getnodeaddresses(), [])\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"CAutoFile::read: end of file.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n \n         self.log.info(\"Check that missing addrman is recreated\")\n         self.stop_node(0)\n         os.remove(peers_dat)\n         with self.nodes[0].assert_debug_log([\n-                f\"Missing or invalid file {peers_dat}\",\n-                \"Recreating peers.dat\",\n+                f'Creating peers.dat because the file was not found (\"{peers_dat}\")',\n         ]):\n             self.start_node(0)\n         assert_equal(self.nodes[0].getnodeaddresses(), [])"
      }
    ]
  }
]