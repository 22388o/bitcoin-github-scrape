[
  {
    "sha": "7777e3624fabe4718675b2be8b088697b7ad4d0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzc3ZTM2MjRmYWJlNDcxODY3NWIyYmU4YjA4ODY5N2I3YWQ0ZDBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-05T19:00:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-06T00:00:34Z"
      },
      "message": "scripted-diff: Replace strCommand with msg_type\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<strCommand\\>/msg_type/g' ./src/net_processing.cpp ./src/test/fuzz/process_message.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4126731d7165f2dcc8188841bd316ee2fdb6dc48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4126731d7165f2dcc8188841bd316ee2fdb6dc48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7777e3624fabe4718675b2be8b088697b7ad4d0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUg1fwwAuhOfZpYPLit/sZhHeF8KumI3xPVVc81LxFGkrXzWdM1e6DkhiQhXEeOW\n2G6tvAbwwKtZMstWxyipYabqQCwvl0Ie0gr9up7SfTKpbWm64PvA7hKXc7PzAU5n\nHwl8TGuEoUeNfAVHyz1LKl5q+cuwm2gXqQhql5A2dSUkz7axwyEr4EKSLV49QmdK\n/usRpmomtLj4i0UFdHzohtLnFrXWQtrL4OwruTWqg2C4HMXcqz8W7Byp7xzmIOZC\n0R01dmmItIRYLmWWlUb8SbmV/1YozmAjgedsHbzQAVV7dZ5zF6crRLHeAHce0ft5\nSAPD8njJDA4YdZn/9OjFJJji5Sm02YsDS6LMZulNJaMBUl2IPQ2yrTCsJ4Z/NZSt\nCSuCGx31nwtE5gZIPeYr2bz0DKPKkU5/HHfPBGiG58egl+TUd0sXa4erYsMq8EsX\nRBgokhBneaVUToFxCFaq6WVTonuROrnaQfPTQEm/rJ6OU5ev8PqbuPW3nh5ZNUIJ\nJ+xyVLeK\n=VavY\n-----END PGP SIGNATURE-----",
        "payload": "tree 4126731d7165f2dcc8188841bd316ee2fdb6dc48\nparent 483007749426a1f51ea591eaac383f19fdde9efb\nauthor MarcoFalke <falke.marco@gmail.com> 1586113231 +0800\ncommitter MarcoFalke <falke.marco@gmail.com> 1586131234 +0800\n\nscripted-diff: Replace strCommand with msg_type\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<strCommand\\>/msg_type/g' ./src/net_processing.cpp ./src/test/fuzz/process_message.cpp\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777e3624fabe4718675b2be8b088697b7ad4d0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7777e3624fabe4718675b2be8b088697b7ad4d0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777e3624fabe4718675b2be8b088697b7ad4d0d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "483007749426a1f51ea591eaac383f19fdde9efb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483007749426a1f51ea591eaac383f19fdde9efb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/483007749426a1f51ea591eaac383f19fdde9efb"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 36,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f63d048aacc7a5385059cc76908f952aa61a6715",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777e3624fabe4718675b2be8b088697b7ad4d0d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777e3624fabe4718675b2be8b088697b7ad4d0d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7777e3624fabe4718675b2be8b088697b7ad4d0d",
        "patch": "@@ -1911,9 +1911,9 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n-bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n-    LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n+    LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -1922,8 +1922,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n \n \n     if (!(pfrom->GetLocalServices() & NODE_BLOOM) &&\n-              (strCommand == NetMsgType::FILTERLOAD ||\n-               strCommand == NetMsgType::FILTERADD))\n+              (msg_type == NetMsgType::FILTERLOAD ||\n+               msg_type == NetMsgType::FILTERADD))\n     {\n         if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n             LOCK(cs_main);\n@@ -1935,7 +1935,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         }\n     }\n \n-    if (strCommand == NetMsgType::VERSION) {\n+    if (msg_type == NetMsgType::VERSION) {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n@@ -2107,7 +2107,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n     // At this point, the outgoing message serialization version can't change.\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    if (strCommand == NetMsgType::VERACK)\n+    if (msg_type == NetMsgType::VERACK)\n     {\n         pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n@@ -2152,7 +2152,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return false;\n     }\n \n-    if (strCommand == NetMsgType::ADDR) {\n+    if (msg_type == NetMsgType::ADDR) {\n         std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n@@ -2206,13 +2206,13 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDHEADERS) {\n+    if (msg_type == NetMsgType::SENDHEADERS) {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDCMPCT) {\n+    if (msg_type == NetMsgType::SENDCMPCT) {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n@@ -2235,7 +2235,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::INV) {\n+    if (msg_type == NetMsgType::INV) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2297,7 +2297,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETDATA) {\n+    if (msg_type == NetMsgType::GETDATA) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2318,7 +2318,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKS) {\n+    if (msg_type == NetMsgType::GETBLOCKS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2386,7 +2386,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKTXN) {\n+    if (msg_type == NetMsgType::GETBLOCKTXN) {\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n@@ -2435,7 +2435,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETHEADERS) {\n+    if (msg_type == NetMsgType::GETHEADERS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2502,7 +2502,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::TX) {\n+    if (msg_type == NetMsgType::TX) {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         // or if this peer is supposed to be a block-relay-only peer\n@@ -2644,7 +2644,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::CMPCTBLOCK)\n+    if (msg_type == NetMsgType::CMPCTBLOCK)\n     {\n         // Ignore cmpctblock received while importing\n         if (fImporting || fReindex) {\n@@ -2865,7 +2865,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::BLOCKTXN)\n+    if (msg_type == NetMsgType::BLOCKTXN)\n     {\n         // Ignore blocktxn received while importing\n         if (fImporting || fReindex) {\n@@ -2947,7 +2947,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::HEADERS)\n+    if (msg_type == NetMsgType::HEADERS)\n     {\n         // Ignore headers received while importing\n         if (fImporting || fReindex) {\n@@ -2973,7 +2973,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return ProcessHeadersMessage(pfrom, connman, mempool, headers, chainparams, /*via_compact_block=*/false);\n     }\n \n-    if (strCommand == NetMsgType::BLOCK)\n+    if (msg_type == NetMsgType::BLOCK)\n     {\n         // Ignore block received while importing\n         if (fImporting || fReindex) {\n@@ -3009,7 +3009,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETADDR) {\n+    if (msg_type == NetMsgType::GETADDR) {\n         // This asymmetric behavior for inbound and outbound connections was introduced\n         // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n         // to users' AddrMan and later request them by sending getaddr messages.\n@@ -3043,7 +3043,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::MEMPOOL) {\n+    if (msg_type == NetMsgType::MEMPOOL) {\n         if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->HasPermission(PF_MEMPOOL))\n         {\n             if (!pfrom->HasPermission(PF_NOBAN))\n@@ -3071,7 +3071,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::PING) {\n+    if (msg_type == NetMsgType::PING) {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n             uint64_t nonce = 0;\n@@ -3092,7 +3092,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::PONG) {\n+    if (msg_type == NetMsgType::PONG) {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n@@ -3148,7 +3148,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERLOAD) {\n+    if (msg_type == NetMsgType::FILTERLOAD) {\n         CBloomFilter filter;\n         vRecv >> filter;\n \n@@ -3168,7 +3168,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERADD) {\n+    if (msg_type == NetMsgType::FILTERADD) {\n         std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n@@ -3192,7 +3192,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERCLEAR) {\n+    if (msg_type == NetMsgType::FILTERCLEAR) {\n         if (pfrom->m_tx_relay == nullptr) {\n             return true;\n         }\n@@ -3204,7 +3204,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FEEFILTER) {\n+    if (msg_type == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n         if (MoneyRange(newFeeFilter)) {\n@@ -3217,7 +3217,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::NOTFOUND) {\n+    if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer\n         LOCK(cs_main);\n         CNodeState *state = State(pfrom->GetId());\n@@ -3243,7 +3243,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n     }\n \n     // Ignore unknown commands for extensibility\n-    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n+    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(msg_type), pfrom->GetId());\n     return true;\n }\n \n@@ -3338,7 +3338,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(msg.m_command), pfrom->GetId());\n         return fMoreWork;\n     }\n-    const std::string& strCommand = msg.m_command;\n+    const std::string& msg_type = msg.m_command;\n \n     // Message size\n     unsigned int nMessageSize = msg.m_message_size;\n@@ -3348,27 +3348,27 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (!msg.m_valid_checksum)\n     {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR peer=%d\\n\", __func__,\n-           SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+           SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n         return fMoreWork;\n     }\n \n     // Process message\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.m_time, chainparams, m_mempool, connman, m_banman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_mempool, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n     } catch (const std::exception& e) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what(), typeid(e).name());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(msg_type), nMessageSize, e.what(), typeid(e).name());\n     } catch (...) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(strCommand), nMessageSize);\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(msg_type), nMessageSize);\n     }\n \n     if (!fRet) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "9e3586d162db60a06957f2190160fadfdb76e5df",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777e3624fabe4718675b2be8b088697b7ad4d0d/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777e3624fabe4718675b2be8b088697b7ad4d0d/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=7777e3624fabe4718675b2be8b088697b7ad4d0d",
        "patch": "@@ -32,7 +32,7 @@\n #include <string>\n #include <vector>\n \n-bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n \n namespace {\n "
      }
    ]
  }
]