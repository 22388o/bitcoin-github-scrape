[
  {
    "sha": "3fbbb9a6403a86fbed3d5d9f7939998922593377",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmJiYjlhNjQwM2E4NmZiZWQzZDVkOWY3OTM5OTk4OTIyNTkzMzc3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-06-09T22:03:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-07T13:09:53Z"
      },
      "message": "refactor: Get rid of more redundant chain methods\n\nThis just drops three interfaces::Chain methods replacing them with other calls.\n\nMotivation for removing these chain methods:\n\n- Need to get rid of findFirstBlockWithTimeAndHeight for #10102, which doesn't\n  support overloaded methods\n- Followup from\n  https://github.com/bitcoin/bitcoin/pull/16426#discussion_r412487403\n- phantomcircuit comments about findNextBlock test\n  http://www.erisian.com.au/bitcoin-core-dev/log-2020-06-06.html#l-214\n\nBehavior is not changing in any way here. A TODO comment in\nScanForWalletTransactions was removed, but just because it was invalid (see\nhttps://github.com/bitcoin/bitcoin/pull/19195#discussion_r448020762), not\nbecause it was implemented.",
      "tree": {
        "sha": "ef269d8c7a027c862b716bfec498c75a1f24cbc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef269d8c7a027c862b716bfec498c75a1f24cbc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fbbb9a6403a86fbed3d5d9f7939998922593377",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fbbb9a6403a86fbed3d5d9f7939998922593377",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fbbb9a6403a86fbed3d5d9f7939998922593377",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fbbb9a6403a86fbed3d5d9f7939998922593377/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c4911e7e7523fb7643da209254bbc2ef7898d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c4911e7e7523fb7643da209254bbc2ef7898d2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c4911e7e7523fb7643da209254bbc2ef7898d2e"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 40,
      "deletions": 76
    },
    "files": [
      {
        "sha": "1a49518d6960276a3094c18be0c002eb61d76757",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "patch": "@@ -44,6 +44,10 @@ class FoundBlock\n     FoundBlock& time(int64_t& time) { m_time = &time; return *this; }\n     FoundBlock& maxTime(int64_t& max_time) { m_max_time = &max_time; return *this; }\n     FoundBlock& mtpTime(int64_t& mtp_time) { m_mtp_time = &mtp_time; return *this; }\n+    //! Return whether block is in the active (most-work) chain.\n+    FoundBlock& inActiveChain(bool& in_active_chain) { m_in_active_chain = &in_active_chain; return *this; }\n+    //! Return next block in the active chain if current block is in the active chain.\n+    FoundBlock& nextBlock(const FoundBlock& next_block) { m_next_block = &next_block; return *this; }\n     //! Read block data from disk. If the block exists but doesn't have data\n     //! (for example due to pruning), the CBlock variable will be set to null.\n     FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n@@ -53,6 +57,8 @@ class FoundBlock\n     int64_t* m_time = nullptr;\n     int64_t* m_max_time = nullptr;\n     int64_t* m_mtp_time = nullptr;\n+    bool* m_in_active_chain = nullptr;\n+    const FoundBlock* m_next_block = nullptr;\n     CBlock* m_data = nullptr;\n };\n \n@@ -77,9 +83,9 @@ class FoundBlock\n //!   wallet cache it, fee estimation being driven by node mempool, wallet\n //!   should be the consumer.\n //!\n-//! * The `guessVerificationProgress`, `getBlockHeight`, `getBlockHash`, etc\n-//!   methods can go away if rescan logic is moved on the node side, and wallet\n-//!   only register rescan request.\n+//! * `guessVerificationProgress` and similar methods can go away if rescan\n+//!   logic moves out of the wallet, and the wallet just requests scans from the\n+//!   node (https://github.com/bitcoin/bitcoin/issues/11756)\n class Chain\n {\n public:\n@@ -90,25 +96,13 @@ class Chain\n     //! any blocks)\n     virtual Optional<int> getHeight() = 0;\n \n-    //! Get block height above genesis block. Returns 0 for genesis block,\n-    //! 1 for following block, and so on. Returns nullopt for a block not\n-    //! included in the current chain.\n-    virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n-\n     //! Get block hash. Height must be valid or this function will abort.\n     virtual uint256 getBlockHash(int height) = 0;\n \n     //! Check that the block is available on disk (i.e. has not been\n     //! pruned), and contains transactions.\n     virtual bool haveBlockOnDisk(int height) = 0;\n \n-    //! Return height of the first block in the chain with timestamp equal\n-    //! or greater than the given time and height equal or greater than the\n-    //! given height, or nullopt if there is no block with a high enough\n-    //! timestamp and height. Also return the block hash as an optional output parameter\n-    //! (to avoid the cost of a second lookup in case this information is needed.)\n-    virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n-\n     //! Get locator for the current chain tip.\n     virtual CBlockLocator getTipLocator() = 0;\n \n@@ -130,11 +124,6 @@ class Chain\n     //! information.\n     virtual bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block={}) = 0;\n \n-    //! Find next block if block is part of current chain. Also flag if\n-    //! there was a reorg and the specified block hash is no longer in the\n-    //! current chain, and optionally return block information.\n-    virtual bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next={}, bool* reorg=nullptr) = 0;\n-\n     //! Find ancestor of block at specified height and optionally return\n     //! ancestor information.\n     virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;"
      },
      {
        "sha": "b08fa39786514d444f556385eab0d4a35824de4e",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 26,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "patch": "@@ -311,6 +311,8 @@ bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<Rec\n     if (block.m_time) *block.m_time = index->GetBlockTime();\n     if (block.m_max_time) *block.m_max_time = index->GetBlockTimeMax();\n     if (block.m_mtp_time) *block.m_mtp_time = index->GetMedianTimePast();\n+    if (block.m_in_active_chain) *block.m_in_active_chain = ChainActive()[index->nHeight] == index;\n+    if (block.m_next_block) FillBlock(ChainActive()[index->nHeight] == index ? ChainActive()[index->nHeight + 1] : nullptr, *block.m_next_block, lock);\n     if (block.m_data) {\n         REVERSE_LOCK(lock);\n         if (!ReadBlockFromDisk(*block.m_data, index, Params().GetConsensus())) block.m_data->SetNull();\n@@ -419,15 +421,6 @@ class ChainImpl : public Chain\n         }\n         return nullopt;\n     }\n-    Optional<int> getBlockHeight(const uint256& hash) override\n-    {\n-        LOCK(::cs_main);\n-        CBlockIndex* block = LookupBlockIndex(hash);\n-        if (block && ::ChainActive().Contains(block)) {\n-            return block->nHeight;\n-        }\n-        return nullopt;\n-    }\n     uint256 getBlockHash(int height) override\n     {\n         LOCK(::cs_main);\n@@ -441,16 +434,6 @@ class ChainImpl : public Chain\n         CBlockIndex* block = ::ChainActive()[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n-    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n-    {\n-        LOCK(cs_main);\n-        CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n-        if (block) {\n-            if (hash) *hash = block->GetBlockHash();\n-            return block->nHeight;\n-        }\n-        return nullopt;\n-    }\n     CBlockLocator getTipLocator() override\n     {\n         LOCK(cs_main);\n@@ -479,13 +462,6 @@ class ChainImpl : public Chain\n         WAIT_LOCK(cs_main, lock);\n         return FillBlock(ChainActive().FindEarliestAtLeast(min_time, min_height), block, lock);\n     }\n-    bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next, bool* reorg) override {\n-        WAIT_LOCK(cs_main, lock);\n-        CBlockIndex* block = ChainActive()[block_height];\n-        if (block && block->GetBlockHash() != block_hash) block = nullptr;\n-        if (reorg) *reorg = !block;\n-        return FillBlock(block ? ChainActive()[block_height + 1] : nullptr, next, lock);\n-    }\n     bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);"
      },
      {
        "sha": "2e8729736cb7bcd3f869164eca098402dcde4812",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 15,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "patch": "@@ -44,6 +44,18 @@ BOOST_AUTO_TEST_CASE(findBlock)\n     BOOST_CHECK(chain->findBlock(active[60]->GetBlockHash(), FoundBlock().mtpTime(mtp_time)));\n     BOOST_CHECK_EQUAL(mtp_time, active[60]->GetMedianTimePast());\n \n+    bool cur_active{false}, next_active{false};\n+    uint256 next_hash;\n+    BOOST_CHECK_EQUAL(active.Height(), 100);\n+    BOOST_CHECK(chain->findBlock(active[99]->GetBlockHash(), FoundBlock().inActiveChain(cur_active).nextBlock(FoundBlock().inActiveChain(next_active).hash(next_hash))));\n+    BOOST_CHECK(cur_active);\n+    BOOST_CHECK(next_active);\n+    BOOST_CHECK_EQUAL(next_hash, active[100]->GetBlockHash());\n+    cur_active = next_active = false;\n+    BOOST_CHECK(chain->findBlock(active[100]->GetBlockHash(), FoundBlock().inActiveChain(cur_active).nextBlock(FoundBlock().inActiveChain(next_active))));\n+    BOOST_CHECK(cur_active);\n+    BOOST_CHECK(!next_active);\n+\n     BOOST_CHECK(!chain->findBlock({}, FoundBlock()));\n }\n \n@@ -59,21 +71,6 @@ BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n     BOOST_CHECK(!chain->findFirstBlockWithTimeAndHeight(/* min_time= */ active.Tip()->GetBlockTimeMax() + 1, /* min_height= */ 0));\n }\n \n-BOOST_AUTO_TEST_CASE(findNextBlock)\n-{\n-    auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n-    bool reorg;\n-    uint256 hash;\n-    BOOST_CHECK(chain->findNextBlock(active[20]->GetBlockHash(), 20, FoundBlock().hash(hash), &reorg));\n-    BOOST_CHECK_EQUAL(hash, active[21]->GetBlockHash());\n-    BOOST_CHECK_EQUAL(reorg, false);\n-    BOOST_CHECK(!chain->findNextBlock(uint256(), 20, {}, &reorg));\n-    BOOST_CHECK_EQUAL(reorg, true);\n-    BOOST_CHECK(!chain->findNextBlock(active.Tip()->GetBlockHash(), active.Height(), {}, &reorg));\n-    BOOST_CHECK_EQUAL(reorg, false);\n-}\n-\n BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n {\n     auto chain = interfaces::MakeChain(m_node);"
      },
      {
        "sha": "8350d66fa74d8c67f72c3385ff7fe35806f7f5fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fbbb9a6403a86fbed3d5d9f7939998922593377/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "patch": "@@ -946,11 +946,12 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     }\n     // If wallet doesn't have a chain (e.g wallet-tool), don't bother to update txn.\n     if (HaveChain()) {\n-        Optional<int> block_height = chain().getBlockHeight(wtx.m_confirm.hashBlock);\n-        if (block_height) {\n+        bool active;\n+        int height;\n+        if (chain().findBlock(wtx.m_confirm.hashBlock, FoundBlock().inActiveChain(active).height(height)) && active) {\n             // Update cached block height variable since it not stored in the\n             // serialized transaction.\n-            wtx.m_confirm.block_height = *block_height;\n+            wtx.m_confirm.block_height = height;\n         } else if (wtx.isConflicted() || wtx.isConfirmed()) {\n             // If tx block (or conflicting block) was reorged out of chain\n             // while the wallet was shutdown, change tx status to UNCONFIRMED\n@@ -1771,18 +1772,22 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", block_height, progress_current);\n         }\n \n+        // Read block data\n         CBlock block;\n-        bool next_block;\n+        chain().findBlock(block_hash, FoundBlock().data(block));\n+\n+        // Find next block separately from reading data above, because reading\n+        // is slow and there might be a reorg while it is read.\n+        bool block_still_active = false;\n+        bool next_block = false;\n         uint256 next_block_hash;\n-        bool reorg = false;\n-        if (chain().findBlock(block_hash, FoundBlock().data(block)) && !block.IsNull()) {\n+        chain().findBlock(block_hash, FoundBlock().inActiveChain(block_still_active).nextBlock(FoundBlock().inActiveChain(next_block).hash(next_block_hash)));\n+\n+        if (!block.IsNull()) {\n             LOCK(cs_wallet);\n-            next_block = chain().findNextBlock(block_hash, block_height, FoundBlock().hash(next_block_hash), &reorg);\n-            if (reorg) {\n+            if (!block_still_active) {\n                 // Abort scan if current block is no longer active, to prevent\n                 // marking transactions as coming from the wrong block.\n-                // TODO: This should return success instead of failure, see\n-                // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n                 result.last_failed_block = block_hash;\n                 result.status = ScanResult::FAILURE;\n                 break;\n@@ -1797,13 +1802,12 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             // could not scan block, keep scanning but record this block as the most recent failure\n             result.last_failed_block = block_hash;\n             result.status = ScanResult::FAILURE;\n-            next_block = chain().findNextBlock(block_hash, block_height, FoundBlock().hash(next_block_hash), &reorg);\n         }\n         if (max_height && block_height >= *max_height) {\n             break;\n         }\n         {\n-            if (!next_block || reorg) {\n+            if (!next_block) {\n                 // break successfully when rescan has reached the tip, or\n                 // previous block is no longer on the chain due to a reorg\n                 break;\n@@ -4058,9 +4062,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             if (!time_first_key || time < *time_first_key) time_first_key = time;\n         }\n         if (time_first_key) {\n-            if (Optional<int> first_block = chain.findFirstBlockWithTimeAndHeight(*time_first_key - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n-                rescan_height = *first_block;\n-            }\n+            chain.findFirstBlockWithTimeAndHeight(*time_first_key - TIMESTAMP_WINDOW, rescan_height, FoundBlock().height(rescan_height));\n         }\n \n         {"
      }
    ]
  },
  {
    "sha": "6965f1352d2d7086d308750ce83a84f191a17755",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTY1ZjEzNTJkMmQ3MDg2ZDMwODc1MGNlODNhODRmMTkxYTE3NzU1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-20T13:49:10Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-07T13:09:53Z"
      },
      "message": "refactor: Replace uses ChainActive() in interfaces/chain.cpp\n\nSuggested https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456236407",
      "tree": {
        "sha": "eed1386a3ed2538645dcf25239d231a6c088ea40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eed1386a3ed2538645dcf25239d231a6c088ea40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6965f1352d2d7086d308750ce83a84f191a17755",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6965f1352d2d7086d308750ce83a84f191a17755",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6965f1352d2d7086d308750ce83a84f191a17755",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6965f1352d2d7086d308750ce83a84f191a17755/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fbbb9a6403a86fbed3d5d9f7939998922593377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fbbb9a6403a86fbed3d5d9f7939998922593377"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 49,
      "deletions": 56
    },
    "files": [
      {
        "sha": "aa436ee3ea3a2942554ab76471b13c12eb39c4d0",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6965f1352d2d7086d308750ce83a84f191a17755/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6965f1352d2d7086d308750ce83a84f191a17755/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=6965f1352d2d7086d308750ce83a84f191a17755",
        "patch": "@@ -24,15 +24,13 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n-    NodeContext node;\n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet{chain.get(), \"\", CreateMockWalletDatabase()};\n+    CWallet wallet{test_setup.m_node.chain.get(), \"\", CreateMockWalletDatabase()};\n     {\n         wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;\n         if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n     }\n-    auto handler = chain->handleNotifications({&wallet, [](CWallet*) {}});\n+    auto handler = test_setup.m_node.chain->handleNotifications({&wallet, [](CWallet*) {}});\n \n     const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);"
      },
      {
        "sha": "a872067b820d9fe3afb41f2769362dd04eb3f518",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6965f1352d2d7086d308750ce83a84f191a17755/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6965f1352d2d7086d308750ce83a84f191a17755/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=6965f1352d2d7086d308750ce83a84f191a17755",
        "patch": "@@ -303,16 +303,16 @@ class NodeImpl : public Node\n     util::Ref m_context_ref;\n };\n \n-bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock)\n+bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock, const CChain& active)\n {\n     if (!index) return false;\n     if (block.m_hash) *block.m_hash = index->GetBlockHash();\n     if (block.m_height) *block.m_height = index->nHeight;\n     if (block.m_time) *block.m_time = index->GetBlockTime();\n     if (block.m_max_time) *block.m_max_time = index->GetBlockTimeMax();\n     if (block.m_mtp_time) *block.m_mtp_time = index->GetMedianTimePast();\n-    if (block.m_in_active_chain) *block.m_in_active_chain = ChainActive()[index->nHeight] == index;\n-    if (block.m_next_block) FillBlock(ChainActive()[index->nHeight] == index ? ChainActive()[index->nHeight + 1] : nullptr, *block.m_next_block, lock);\n+    if (block.m_in_active_chain) *block.m_in_active_chain = active[index->nHeight] == index;\n+    if (block.m_next_block) FillBlock(active[index->nHeight] == index ? active[index->nHeight + 1] : nullptr, *block.m_next_block, lock, active);\n     if (block.m_data) {\n         REVERSE_LOCK(lock);\n         if (!ReadBlockFromDisk(*block.m_data, index, Params().GetConsensus())) block.m_data->SetNull();\n@@ -415,7 +415,8 @@ class ChainImpl : public Chain\n     Optional<int> getHeight() override\n     {\n         LOCK(::cs_main);\n-        int height = ::ChainActive().Height();\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        int height = active.Height();\n         if (height >= 0) {\n             return height;\n         }\n@@ -424,20 +425,23 @@ class ChainImpl : public Chain\n     uint256 getBlockHash(int height) override\n     {\n         LOCK(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        CBlockIndex* block = active[height];\n         assert(block);\n         return block->GetBlockHash();\n     }\n     bool haveBlockOnDisk(int height) override\n     {\n         LOCK(cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        CBlockIndex* block = active[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n     CBlockLocator getTipLocator() override\n     {\n         LOCK(cs_main);\n-        return ::ChainActive().GetLocator();\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        return active.GetLocator();\n     }\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n@@ -447,48 +451,54 @@ class ChainImpl : public Chain\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n-        if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        if (CBlockIndex* fork = FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n         return nullopt;\n     }\n     bool findBlock(const uint256& hash, const FoundBlock& block) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        return FillBlock(LookupBlockIndex(hash), block, lock);\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        return FillBlock(LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        return FillBlock(ChainActive().FindEarliestAtLeast(min_time, min_height), block, lock);\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+        return FillBlock(active.FindEarliestAtLeast(min_time, min_height), block, lock, active);\n     }\n     bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         if (const CBlockIndex* block = LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n-                return FillBlock(ancestor, ancestor_out, lock);\n+                return FillBlock(ancestor, ancestor_out, lock, active);\n             }\n         }\n-        return FillBlock(nullptr, ancestor_out, lock);\n+        return FillBlock(nullptr, ancestor_out, lock, active);\n     }\n     bool findAncestorByHash(const uint256& block_hash, const uint256& ancestor_hash, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         const CBlockIndex* block = LookupBlockIndex(block_hash);\n         const CBlockIndex* ancestor = LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n-        return FillBlock(ancestor, ancestor_out, lock);\n+        return FillBlock(ancestor, ancestor_out, lock, active);\n     }\n     bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n+        const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n         const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n         // output uninitialized.\n-        return FillBlock(ancestor, ancestor_out, lock) & FillBlock(block1, block1_out, lock) & FillBlock(block2, block2_out, lock);\n+        return FillBlock(ancestor, ancestor_out, lock, active) & FillBlock(block1, block1_out, lock, active) & FillBlock(block2, block2_out, lock, active);\n     }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n@@ -608,7 +618,8 @@ class ChainImpl : public Chain\n     {\n         if (!old_tip.IsNull()) {\n             LOCK(::cs_main);\n-            if (old_tip == ::ChainActive().Tip()->GetBlockHash()) return;\n+            const CChain& active = Assert(m_node.chainman)->ActiveChain();\n+            if (old_tip == active.Tip()->GetBlockHash()) return;\n         }\n         SyncWithValidationInterfaceQueue();\n     }"
      },
      {
        "sha": "b8c4bc860550208ae29d925b9b9de576a9219946",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6965f1352d2d7086d308750ce83a84f191a17755/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6965f1352d2d7086d308750ce83a84f191a17755/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=6965f1352d2d7086d308750ce83a84f191a17755",
        "patch": "@@ -18,7 +18,7 @@ BOOST_FIXTURE_TEST_SUITE(interfaces_tests, TestChain100Setup)\n BOOST_AUTO_TEST_CASE(findBlock)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n \n     uint256 hash;\n     BOOST_CHECK(chain->findBlock(active[10]->GetBlockHash(), FoundBlock().hash(hash)));\n@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(findBlock)\n BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     uint256 hash;\n     int height;\n     BOOST_CHECK(chain->findFirstBlockWithTimeAndHeight(/* min_time= */ 0, /* min_height= */ 5, FoundBlock().hash(hash).height(height)));\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     uint256 hash;\n     BOOST_CHECK(chain->findAncestorByHeight(active[20]->GetBlockHash(), 10, FoundBlock().hash(hash)));\n     BOOST_CHECK_EQUAL(hash, active[10]->GetBlockHash());\n@@ -84,7 +84,7 @@ BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n BOOST_AUTO_TEST_CASE(findAncestorByHash)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     int height = -1;\n     BOOST_CHECK(chain->findAncestorByHash(active[20]->GetBlockHash(), active[10]->GetBlockHash(), FoundBlock().height(height)));\n     BOOST_CHECK_EQUAL(height, 10);\n@@ -94,7 +94,7 @@ BOOST_AUTO_TEST_CASE(findAncestorByHash)\n BOOST_AUTO_TEST_CASE(findCommonAncestor)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     auto* orig_tip = active.Tip();\n     for (int i = 0; i < 10; ++i) {\n         BlockValidationState state;\n@@ -124,7 +124,7 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n BOOST_AUTO_TEST_CASE(hasBlocks)\n {\n     auto chain = interfaces::MakeChain(m_node);\n-    auto& active = ChainActive();\n+    const CChain& active = Assert(m_node.chainman)->ActiveChain();\n \n     // Test ranges\n     BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, 90));"
      },
      {
        "sha": "7a63a6f1e8cc3974436ab1b3c433cb6e5d626c4f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 31,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6965f1352d2d7086d308750ce83a84f191a17755/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6965f1352d2d7086d308750ce83a84f191a17755/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6965f1352d2d7086d308750ce83a84f191a17755",
        "patch": "@@ -83,12 +83,9 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n-\n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n-        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -107,7 +104,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -133,7 +130,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -158,7 +155,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n-        CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+        CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -183,9 +180,6 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n-\n     // Prune the older block file.\n     {\n         LOCK(cs_main);\n@@ -197,7 +191,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         AddWallet(wallet);\n@@ -255,14 +249,11 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n-\n     std::string backup_file = (GetDataDir() / \"wallet.backup\").string();\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n@@ -284,7 +275,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n@@ -317,10 +308,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n-\n-    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+    CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n     auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n@@ -495,7 +483,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(m_chain.get(), \"\", CreateMockWalletDatabase());\n+        wallet = MakeUnique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -545,7 +533,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         return it->second;\n     }\n \n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<CWallet> wallet;\n };\n \n@@ -612,9 +599,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n@@ -709,8 +694,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n {\n     // Create new wallet with known key and unload it.\n-    auto chain = interfaces::MakeChain(m_node);\n-    auto wallet = TestLoadWallet(*chain);\n+    auto wallet = TestLoadWallet(*m_node.chain);\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);\n@@ -745,12 +729,12 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n     auto block_tx = TestSimpleSpend(*m_coinbase_txns[0], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n     m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n     auto mempool_tx = TestSimpleSpend(*m_coinbase_txns[1], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n-    BOOST_CHECK(chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n+    BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n \n \n     // Reload wallet and make sure new transactions are detected despite events\n     // being blocked\n-    wallet = TestLoadWallet(*chain);\n+    wallet = TestLoadWallet(*m_node.chain);\n     BOOST_CHECK(rescan_completed);\n     BOOST_CHECK_EQUAL(addtx_count, 2);\n     {\n@@ -783,12 +767,12 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n             m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             mempool_tx = TestSimpleSpend(*m_coinbase_txns[3], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n-            BOOST_CHECK(chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n+            BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n             LEAVE_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n             SyncWithValidationInterfaceQueue();\n             ENTER_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n         });\n-    wallet = TestLoadWallet(*chain);\n+    wallet = TestLoadWallet(*m_node.chain);\n     BOOST_CHECK_EQUAL(addtx_count, 4);\n     {\n         LOCK(wallet->cs_wallet);"
      }
    ]
  },
  {
    "sha": "5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmFhODhmZDM4YzhlZmEwZTM2MTYzNmJiMmM2MGFmODlkMjdiNWQ1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-08T01:46:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-08T01:46:03Z"
      },
      "message": "test: Remove no longer needed MakeChain calls\n\nThese calls are no longer needed after edc316020e8270dafc5e31465d532baebdafd3dd\nfrom #19098 which started instantiating BasicTestingSetup.m_node.chain\n\nPatch from MarcoFalke <falke.marco@gmail.com> in\nhttps://github.com/bitcoin/bitcoin/pull/19425#discussion_r526701954\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "28934984ebd700f7b4369b9cf9dd6940d05b0edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28934984ebd700f7b4369b9cf9dd6940d05b0edf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6965f1352d2d7086d308750ce83a84f191a17755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6965f1352d2d7086d308750ce83a84f191a17755",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6965f1352d2d7086d308750ce83a84f191a17755"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "73463b071e88ec7cd3ff66851f7cba62bbf67d3d",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(interfaces_tests, TestChain100Setup)\n \n BOOST_AUTO_TEST_CASE(findBlock)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n \n     uint256 hash;\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(findBlock)\n \n BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     uint256 hash;\n     int height;\n@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n \n BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     uint256 hash;\n     BOOST_CHECK(chain->findAncestorByHeight(active[20]->GetBlockHash(), 10, FoundBlock().hash(hash)));\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n \n BOOST_AUTO_TEST_CASE(findAncestorByHash)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     int height = -1;\n     BOOST_CHECK(chain->findAncestorByHash(active[20]->GetBlockHash(), active[10]->GetBlockHash(), FoundBlock().height(height)));\n@@ -93,7 +93,7 @@ BOOST_AUTO_TEST_CASE(findAncestorByHash)\n \n BOOST_AUTO_TEST_CASE(findCommonAncestor)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n     auto* orig_tip = active.Tip();\n     for (int i = 0; i < 10; ++i) {\n@@ -123,7 +123,7 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n \n BOOST_AUTO_TEST_CASE(hasBlocks)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n+    auto& chain = m_node.chain;\n     const CChain& active = Assert(m_node.chainman)->ActiveChain();\n \n     // Test ranges"
      },
      {
        "sha": "4127cd45f8da552a94a6d98aa2dfaf4b8afdbe58",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {\n-        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), \"\", CreateMockWalletDatabase());\n+        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         wallet->SetupLegacyScriptPubKeyMan();"
      },
      {
        "sha": "334e4ae0d8eb531545e6cdbbfb128d5f75b7c3c9",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -10,7 +10,7 @@\n \n InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n-    m_wallet_client = MakeWalletClient(*m_chain, *Assert(m_node.args));\n+    m_wallet_client = MakeWalletClient(*m_node.chain, *Assert(m_node.args));\n \n     std::string sep;\n     sep += fs::path::preferred_separator;"
      },
      {
        "sha": "f666c45a3429332ff19624c416bcfac4c013864e",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -19,7 +19,6 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     fs::path m_datadir;\n     fs::path m_cwd;\n     std::map<std::string, fs::path> m_walletdir_path_cases;\n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n };\n "
      },
      {
        "sha": "0ef8b9c4bfea6a44425cf201a5ebbf4897590a80",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -27,8 +27,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     CKey uncompressedKey;\n     uncompressedKey.MakeNewKey(false);\n     CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n-    NodeContext node;\n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n+    std::unique_ptr<interfaces::Chain>& chain = m_node.chain;\n \n     CScript scriptPubKey;\n     isminetype result;"
      },
      {
        "sha": "347a4364298fc3c29fb976fedfe816e29bbd1f34",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -17,9 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(scriptpubkeyman_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(CanProvide)\n {\n     // Set up wallet and keyman variables.\n-    NodeContext node;\n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n+    CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n     LegacyScriptPubKeyMan& keyman = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n     // Make a 1 of 2 multisig script"
      },
      {
        "sha": "badf2eb459bcf562b459f591da5ec811da849aef",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -6,10 +6,10 @@\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n-      m_wallet(m_chain.get(), \"\", CreateMockWalletDatabase())\n+      m_wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);\n-    m_chain_notifications_handler = m_chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n+    m_chain_notifications_handler = m_node.chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n     m_wallet_client->registerRpcs();\n }"
      },
      {
        "sha": "ab7fb8c42b0628558004e977df9938a776cbab3a",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -20,8 +20,7 @@\n struct WalletTestingSetup : public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n \n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n-    std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args));\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_node.chain, *Assert(m_node.args));\n     CWallet m_wallet;\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };"
      },
      {
        "sha": "eb0bbb6ccca5a46c581b4ad711ef53819c5f20bc",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5baa88fd38c8efa0e361636bb2c60af89d27b5d5/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=5baa88fd38c8efa0e361636bb2c60af89d27b5d5",
        "patch": "@@ -786,8 +786,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n \n BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain(m_node);\n-    auto wallet = TestLoadWallet(*chain);\n+    auto wallet = TestLoadWallet(*m_node.chain);\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);"
      }
    ]
  }
]