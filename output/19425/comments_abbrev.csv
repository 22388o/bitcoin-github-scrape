ryanofsky,2020-07-01 17:36:34,"Updated 0c9dea569a41c1fa50b2409fabc531cfa663ad51 -> 87bc7618cf561ed97835558b6e0c19affdc2aaeb ([`pr/next.1`](https://github.com/ryanofsky/bitcoin/commits/pr/next.1) -> [`pr/next.2`](https://github.com/ryanofsky/bitcoin/commits/pr/next.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/next.1..pr/next.2)) adding comments and removing stale TODO. Still no changes in behavior\nUpdated 87bc",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-652555034,652555034,
DrahtBot,2020-07-01 17:44:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19983 (Drop some TSan suppressions by hebasto)\n* #19982 (test: Fix inconsistent lock order in wallet_tests/CreateWallet ",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-652558565,652558565,
laanwj,2020-07-09 16:45:11,Concept ACK. I find this code really hard to review.,https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-656234643,656234643,
laanwj,2020-09-01 12:33:59,"I managed to review the code and am fairly sure it is correct.\nCode review ACK 6e10c2b8832d24cc010fd39b23e23543e00012e5",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-684819323,684819323,
ryanofsky,2020-09-28 11:04:01,"Rebased 6e10c2b8832d24cc010fd39b23e23543e00012e5 -> 9931714c0a1347d377b73f50e900c1138081d1c2 ([`pr/next.5`](https://github.com/ryanofsky/bitcoin/commits/pr/next.5) -> [`pr/next.6`](https://github.com/ryanofsky/bitcoin/commits/pr/next.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/next.5-rebase..pr/next.6)) due to conflict with #19619\n",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-699937806,699937806,
dongcarl,2020-10-19 20:47:53,"Code Review ACK 9931714c0a1347d377b73f50e900c1138081d1c2\n\n- 97e683d1a1f57dd8fac080eec1a0fe83419df7ac doesn't seem to change behaviour, and seems to match FoundBlock's conventions. I found the calling conventions to be a bit weird but they're still understandable. Perhaps someone can tell me why we do it this way, is it for efficiency?\n- 9931714c0a1347d377b73f50e900c1138081d1c2 arrived at the",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-712433143,712433143,
ryanofsky,2020-10-19 21:07:13,"Thanks for reviewing!\n\n> Perhaps someone can tell me why we do it this way, is it for efficiency?\n\nIt's called a ""fluent interface"" and it's just a way emulating a way of named parameters in languages which don't support them: https://en.wikipedia.org/wiki/Fluent_interface. The alternatives are adding unnamed parameters or adding method overloads",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-712442552,712442552,
MarcoFalke,2020-12-08 11:42:40,"re-ACK 5baa88fd38c8efa0e361636bb2c60af89d27b5d5 ðŸ•¶\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 5baa88fd38c8efa0e361636bb2c60af89d27b5d5 ðŸ•¶\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgRQAv6A0yyCNiZr7DYQtS7ubtoC310OFwRL/ghzzgjyS605iRd",https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-740569956,740569956,
dongcarl,2020-12-08 17:30:35,ACK 5baa88fd38c8efa0e361636bb2c60af89d27b5d5,https://github.com/bitcoin/bitcoin/pull/19425#issuecomment-740783864,740783864,
promag,2020-07-16 21:59:33,"nit, should be `::ChainActive`?\n\nAnyway, maybe add argument `CChain& chain` to `FillBlock` to avoid multiple calls to ChainActive()?",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456102559,456102559,src/interfaces/chain.cpp
promag,2020-07-16 22:05:38,"Unrelated, but why return `true` if `ReadBlockfromDisk` fails?",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456105273,456105273,src/interfaces/chain.cpp
ryanofsky,2020-07-16 23:03:27,"re: https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456105273\n\n> Unrelated, but why return `true` if `ReadBlockfromDisk` fails?\n\nfindBlock and related methods return true if the block is found, false if it is not found. Whether block data is available is a different question. In practice ReadBlockFromDisk fails when a block is pruned, and callers that want to see if data is prune",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456125536,456125536,src/interfaces/chain.cpp
MarcoFalke,2020-07-17 06:05:10,"Also, new code should probably use node->chainman.activeChain",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456236407,456236407,src/interfaces/chain.cpp
ryanofsky,2020-07-21 14:16:34,"re: https://github.com/bitcoin/bitcoin/pull/19425#discussion_r456102559\n\n> Also, new code should probably use node->chainman.activeChain\n\nRemoved ChainActive calls in new commit.",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r458131585,458131585,src/interfaces/chain.cpp
MarcoFalke,2020-08-07 09:17:21,"```suggestion\n            const CChain& active = Assert(m_node.chainman)->ActiveChain();\n```\n\nstyle-nit, no strong opinion, though.",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r466923467,466923467,src/interfaces/chain.cpp
ryanofsky,2020-08-07 20:52:13,"re: https://github.com/bitcoin/bitcoin/pull/19425#discussion_r466923467\n\n> style-nit, no strong opinion, though.\n\nThanks, switched throughout",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r467263339,467263339,src/interfaces/chain.cpp
MarcoFalke,2020-11-19 08:30:23,"It seems fragile to require the caller to have to pass `inActiveChain` here as well and initialize the bool reference that was passed to false.\n\nAt the very least the dev docs should mention the footgun.",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r526676416,526676416,src/interfaces/chain.h
MarcoFalke,2020-11-19 09:11:45,"Can you explain what this is doing and why the redundant call is needed?\n\n\n```diff\ndiff --git a/src/bench/wallet_balance.cpp b/src/bench/wallet_balance.cpp\nindex 98eac80055..aa436ee3ea 100644\n--- a/src/bench/wallet_balance.cpp\n+++ b/src/bench/wallet_balance.cpp\n@@ -24,7 +24,6 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     const auto& ",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r526701954,526701954,src/bench/wallet_balance.cpp
dongcarl,2020-12-03 16:46:51,"Right, looks like anything that has a fixture which inherits from `BasicTestingSetup` will have `m_node.chain` properly initialized: https://github.com/bitcoin/bitcoin/blob/a0489f3472f3799dc1ece32a59556fd239c4c14b/src/test/util/setup_common.cpp#L109",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r535401001,535401001,src/bench/wallet_balance.cpp
dongcarl,2020-12-03 17:01:06,Curious: Why does the passed bool reference have to be initialized to false? Wouldn't it be okay for it to be initialized to true as well?,https://github.com/bitcoin/bitcoin/pull/19425#discussion_r535414930,535414930,src/interfaces/chain.h
MarcoFalke,2020-12-03 17:29:02,That would imply if the block isn't found it is assumed to be in the active chain? Seems a footgun just as dangerous ,https://github.com/bitcoin/bitcoin/pull/19425#discussion_r535437092,535437092,src/interfaces/chain.h
ryanofsky,2020-12-07 23:36:04,"re: https://github.com/bitcoin/bitcoin/pull/19425#discussion_r535437092\n\n> That would imply if the block isn't found it is assumed to be in the active chain? Seems a footgun just as dangerous\n\nInformation about a block isn't returned if the block doesn't exist. Maybe this is a footgun but it is also pre-existing behavior and how every other accessor works here. I don't think this PR would ",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r537917058,537917058,src/interfaces/chain.h
ryanofsky,2020-12-07 23:37:16,"re: https://github.com/bitcoin/bitcoin/pull/19425#discussion_r535401001\n\n> Right, looks like anything that has a fixture which inherits from `BasicTestingSetup` will have `m_node.chain` properly initialized:\n> \n> https://github.com/bitcoin/bitcoin/blob/a0489f3472f3799dc1ece32a59556fd239c4c14b/src/test/util/setup_common.cpp#L109\n\nThanks, removed this and included Marco's patch in new co",https://github.com/bitcoin/bitcoin/pull/19425#discussion_r537917577,537917577,src/bench/wallet_balance.cpp
