gmaxwell,2017-08-31T04:25:46Z,"Well there is already a recommend way to do this: use a block proposal.\n\nThe general limitation with a 'verifyrawtransaction' approach is that it doesn't let you test a graph of unconfirmed transactions, but a block proposal does.\n\nLooks like internally your rpc is doing more or less what a block proposal does, but handling more of the things around it. So perhaps it would be useful to do.",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326186087,326186087,
luke-jr,2017-08-31T04:34:36Z,"Seems awfully inefficient to call CNB just to throw away the chosen transaction-set. Also, the block fees will be wrong. If you don't want to build a block from scratch, maybe abstract that out of CNB first (separate commit, same PR)?\n\n(To revise your PR, just use `git push --force` over the same branch.)",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326187120,326187120,
justicz,2017-08-31T04:38:16Z,"Got it, thanks for the feedback. I'll address these issues now",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326187563,326187563,
sdaftuar,2017-08-31T14:25:12Z,"I agree with the general usefulness of a `verifyrawtransaction` RPC (especially one that takes a list of unconfirmed transactions, and ideally one that allows for checking based on inputs that may be in the mempool), but one issue with this block proposal approach is that you won't be testing against local policy, just the consensus rules.  So be aware that a True result here won't necessarily mea",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326311867,326311867,
achow101,2017-08-31T14:51:26Z,"Concept ACK, but as others have said, there are other things to consider when verifying a transaction that are not done here. Those need to be documented.",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326320240,326320240,
jtimon,2017-08-31T21:17:15Z,Seems related to https://github.com/bitcoin/bitcoin/pull/7552,https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326423037,326423037,
justicz,2017-09-01T00:44:12Z,"Thanks much for that link @jtimon, somehow I missed that.\n\nIt seems like everyone agrees that there is the potential for some useful functionality here, there's just some uncertainty in what exactly the API for this should look like. After reading https://github.com/bitcoin/bitcoin/pull/7552, it seems like this uncertainty is largely what has kept `verifyrawtransaction` functionality from bein",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-326457030,326457030,
dcousens,2017-09-06T05:36:12Z,"~~Use `signrawtransaction` to verify a transaction?\nIf you have unknown/chained utxos...  you can provide them.\nIf you wanted to check against local policy,  maybe this PR could instead add that as an optional flag\nIt doesn't require wallet support,  but if you have wallet support enabled, you should otherwise compare the `hex` returned to enforce it wasn't modified.~~\n\nAs discussed on I",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-327379774,327379774,
sdaftuar,2017-09-06T12:45:26Z,"@justicz Thanks for working on this.  I think there's still work to be done here, but this seems like a promising direction.\n\nRather than add the `dryRunMap` to the mempool, though, I think it'd be cleaner if we instead just added a caching layer in front of the mempool, which holds these dry run transactions.  ATMPWorker already takes a mempool as an argument, so I think it'd be straightforwa",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-327471905,327471905,
justicz,2017-09-07T00:46:16Z,Thanks for the comments @sdaftuar! I think I agree with all of the points you made and will work on separating things out of the mempool more cleanly.,https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-327650579,327650579,
justicz,2017-09-13T02:05:12Z,"Hey @sdaftuar, it's not done yet (still need to implement eviction/properly count descendants) but I've been working on implementing the feature in the way you described over here: https://github.com/justicz/bitcoin/pull/3 . I broke the relevant parts of the CTxMemPool interface out into a CTxMemPoolBase class and then implemented a CTxMockMemPool that I pass into ATMP.\n\nIs this more what you ",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-329035597,329035597,
justicz,2017-10-12T07:01:24Z,"Closing this PR, will make a new one in the future if I can come up with an implementation I am happy with",https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-336039170,336039170,
wtogami,2017-10-23T15:49:03Z,Please ping when you do come up with a better implementation. I have strong interest in this!,https://github.com/bitcoin/bitcoin/pull/11201#issuecomment-338704227,338704227,
sdaftuar,2017-09-06T12:14:47Z,"If ATMP fails for a transaction due to missing inputs, then almost none of the policy checks will be evaluated for the transaction, because that's one of the first things we (must) do -- for instance you can't check the feerate of the transaction without having the inputs available.",https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137249067,137249067,src/rpc/rawtransaction.cpp
sdaftuar,2017-09-06T12:37:16Z,"Actually on further review, it looks like you've added these ""dry run"" transactions to the mempool, so now I think if ATMP returns ""missing inputs"", that should reflect an actual failure?  Is there a case where that doesn't hold?",https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137253836,137253836,src/rpc/rawtransaction.cpp
sdaftuar,2017-09-06T12:46:16Z,The `NotifyEntryAdded` callback a few lines up shouldn't trigger for dry run transactions.,https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137255837,137255837,src/txmempool.cpp
sdaftuar,2017-09-06T13:36:03Z,"Since you only are removing conflicts in non-dryrun situations, doesn't that mean that someone calling verifyrawtransactions with a pair of tx's, one of which would replace existing transactions, and one of which depends on an existing transaction, would potentially succeed?  Yet when actually trying to send, the second would necessarily fail.",https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137268497,137268497,src/validation.cpp
justicz,2017-09-07T00:48:11Z,Yeah -- this code is leftover from before I figured out the issue you mentioned in your first comment. I was working on getting rid of this when you left your review üòù ,https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137424701,137424701,src/rpc/rawtransaction.cpp
justicz,2017-09-07T00:49:51Z,I think you're right. I'll fix this,https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137424892,137424892,src/validation.cpp
justicz,2017-09-07T00:50:00Z,üëç ,https://github.com/bitcoin/bitcoin/pull/11201#discussion_r137424904,137424904,src/txmempool.cpp
