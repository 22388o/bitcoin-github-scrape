[
  {
    "sha": "8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTRiNGY2ODNhMGIzNDJjZWMyNGNkNTFiMWU5ODQzMzAzNGVhMmVh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-02-14T03:22:40Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-02-18T05:42:08Z"
      },
      "message": "Address test todos by removing -txindex to nodes.\nOriginally added when updating getrawtransaction to stop searching unspent utxos.",
      "tree": {
        "sha": "918975cc59f7a57016ce61d6343c21c5168a0f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/918975cc59f7a57016ce61d6343c21c5168a0f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72c787dc8f77dfeeab3774e9d84f03a066ff32e"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 42,
      "deletions": 53
    },
    "files": [
      {
        "sha": "02a665008be30aed966a9ed4870379ac670fdc4b",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -20,7 +20,8 @@ Supported API\n \n Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+By default, this endpoint will only search the mempool.\n+To query for a confirmed transaction, enable the transaction index via \"txindex=1\" command line / configuration option.\n \n #### Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`"
      },
      {
        "sha": "658a8cd75eb08abbcd37aa3325dd3695c2db3fe3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -38,31 +38,29 @@ def find_spendable_utxo(node, min_value):\n \n     raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n \n+txs_mined = {} # txindex from txid to blockhash\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [\n             [\n                 \"-rpcserialversion=0\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=536870915\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n         ]\n \n@@ -157,10 +155,10 @@ def run_test(self):\n \n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n-        block = self.nodes[2].generate(1)  # block 432 (first block with new rules; 432 = 144 * 3)\n+        blockhash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n-        segwit_tx_list = self.nodes[2].getblock(block[0])[\"tx\"]\n+        segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n@@ -174,15 +172,16 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n-        assert(self.nodes[2].getblock(block[0], False) != self.nodes[0].getblock(block[0], False))\n-        assert(self.nodes[1].getblock(block[0], False) == self.nodes[2].getblock(block[0], False))\n-        for i in range(len(segwit_tx_list)):\n-            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[2].getrawtransaction(segwit_tx_list[i]) != self.nodes[0].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i], 0) == self.nodes[2].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) != self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i]) == self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) == bytes_to_hex_str(tx.serialize_without_witness()))\n+        assert(self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False))\n+        assert(self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False))\n+\n+        for tx_id in segwit_tx_list:\n+            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == bytes_to_hex_str(tx.serialize_without_witness()))\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -538,7 +537,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n-        self.nodes[0].generate(1)\n+        txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n         watchcount = 0\n         spendcount = 0\n@@ -581,7 +580,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n             txtmp = CTransaction()\n-            txraw = self.nodes[0].getrawtransaction(i)\n+            txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n             f = BytesIO(hex_str_to_bytes(txraw))\n             txtmp.deserialize(f)\n             for j in range(len(txtmp.vout)):"
      },
      {
        "sha": "f33040242c92cc0e8321447d32cde1b4f8316a21",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 15,
        "deletions": 20,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -43,8 +43,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-rest\", \"-txindex\"], []]\n+        self.extra_args = [[\"-rest\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -91,25 +90,32 @@ def run_test(self):\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[1].generatetoaddress(1, not_related_address)\n-        self.sync_all()\n-        bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n-\n-        self.log.info(\"Load the transaction using the /tx URI\")\n+        self.log.info(\"Test the /tx URI\")\n \n         json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        assert_equal(json_obj['txid'], txid)\n+\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(txid), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n+\n         spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n         n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n         spending = (txid, n)\n \n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n+        self.sync_all()\n+        bb_hash = self.nodes[0].getbestblockhash()\n+\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n         # Check chainTip response\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         # Make sure there is one utxo\n@@ -274,17 +280,6 @@ def run_test(self):\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n-        self.log.info(\"Test the /tx URI\")\n-\n-        tx_hash = block_json_obj['tx'][0]['txid']\n-        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n-        assert_equal(json_obj['txid'], tx_hash)\n-\n-        # Check hex format response\n-        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n-                                     json_obj['size']*2)\n-\n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n         # Make 3 tx and mine them on node 1"
      },
      {
        "sha": "e9098e4f5aef1869118ea00d2d7a4eb3fe191ba0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -20,8 +20,6 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n-       # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -161,11 +159,11 @@ def run_test(self):\n         node1_addr = self.nodes[1].getnewaddress()\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n-        txid2 =self.nodes[0].sendtoaddress(node2_addr, 13)\n-        self.nodes[0].generate(6)\n+        txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout1 = find_output(self.nodes[1], txid1, 13)\n-        vout2 = find_output(self.nodes[2], txid2, 13)\n+        vout1 = find_output(self.nodes[1], txid1, 13, blockhash=blockhash)\n+        vout2 = find_output(self.nodes[2], txid2, 13, blockhash=blockhash)\n \n         # Create a psbt spending outputs from nodes 1 and 2\n         psbt_orig = self.nodes[0].createpsbt([{\"txid\":txid1,  \"vout\":vout1}, {\"txid\":txid2, \"vout\":vout2}], {self.nodes[0].getnewaddress():25.999})\n@@ -344,9 +342,9 @@ def run_test(self):\n         addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n         txid = self.nodes[0].sendtoaddress(addr, 7)\n         addrinfo = self.nodes[1].getaddressinfo(addr)\n-        self.nodes[0].generate(6)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout = find_output(self.nodes[0], txid, 7)\n+        vout = find_output(self.nodes[0], txid, 7, blockhash=blockhash)\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n         analyzed = self.nodes[0].analyzepsbt(psbt)\n         assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'"
      },
      {
        "sha": "c793cf00de82c81c13f59eae13eecea394eff4a3",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -42,7 +42,6 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "fef99824127a29869de2a2cd3dfa12942079e471",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -410,12 +410,12 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n # Transaction/Block functions\n #############################\n \n-def find_output(node, txid, amount):\n+def find_output(node, txid, amount, *, blockhash=None):\n     \"\"\"\n     Return index to output of txid with value amount\n     Raises exception if there is none.\n     \"\"\"\n-    txdata = node.getrawtransaction(txid, 1)\n+    txdata = node.getrawtransaction(txid, 1, blockhash)\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i"
      },
      {
        "sha": "b0b151d2d61b14a41c0f17bc5493573fc03a004a",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -26,8 +26,7 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5df763eb0411acdaf97d9afcdbbebf4b298d181",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -24,8 +24,6 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [], [\"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  }
]