amitiuttarwar,2019-02-14T06:06:52Z,"slightly tangential, but since I'm in the vicinity... am I missing a reason for why the `getblocktemplate`call is made twice with the same params & same assertions are checked?    https://github.com/bitcoin/bitcoin/pull/15404/files?utf8=%E2%9C%93&diff=unified#diff-99b0f22f7fc18956271d518d2c5e3816R101 ",https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-463502809,463502809,
DrahtBot,2019-02-14T08:31:00Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14053](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14053.html) (Add address-based index (attempt 4?) by mar",https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-463538148,463538148,
MarcoFalke,2019-02-14T16:36:05Z,utACK 31e7cad0bd80aaae8ffa22090387c9ce55746872,https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-463696709,463696709,
laanwj,2019-02-17T01:05:22Z,"Concept ACK.\n\nThis breaks the psbt test at the moment, at least when merged to master:\n```\nrpc_psbt.py                           | ✖ Failed  | 19 s\n```",https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-464404514,464404514,
MarcoFalke,2019-02-18T15:50:06Z,re-utACK 8e4b4f683a0b342cec24cd51b1e98433034ea2ea,https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-464784273,464784273,
laanwj,2019-02-19T15:31:09Z,utACK 8e4b4f683a0b342cec24cd51b1e98433034ea2ea,https://github.com/bitcoin/bitcoin/pull/15404#issuecomment-465178108,465178108,
amitiuttarwar,2019-02-14T05:45:13Z,"@jnewbery, mostly an FYI, but feedback welcome.. \nas per our conversation I've been trying to improve the variable propagation delay. The solution Ive been looking at is to use the `[create / sign / send]rawtransaction` RPCs to directly broadcast the tx to both nodes.\nMy attempt lead me running into the absurdly-high-fee error from `sendrawtransaction`. And the simple fix of passing in the “al",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r256697627,256697627,test/functional/interface_rest.py
amitiuttarwar,2019-02-14T05:46:22Z,"I removed this todo from the code, but its still on my personal list :) I am interested in improving this test so it actually covers the unique intended functionalities. Eg. since we are currently passing  `-txindex` to every node, this test wouldn’t catch if `getrawtransaction` using just the blockhash started failing. I’ve started to dive in and I’m headed down the path of using `-txindex`  on s",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r256697768,256697768,test/functional/rpc_rawtransaction.py
practicalswift,2019-02-15T17:30:17Z,Nit: Drop spaces around `=` in named argument (`blockhash`).,https://github.com/bitcoin/bitcoin/pull/15404#discussion_r257325138,257325138,test/functional/rpc_psbt.py
practicalswift,2019-02-15T17:30:23Z,Same here.,https://github.com/bitcoin/bitcoin/pull/15404#discussion_r257325164,257325164,test/functional/rpc_psbt.py
amitiuttarwar,2019-02-16T19:57:16Z,how do you catch these? are you running a linter on just the changed code? ,https://github.com/bitcoin/bitcoin/pull/15404#discussion_r257474528,257474528,test/functional/rpc_psbt.py
MarcoFalke,2019-02-18T15:48:08Z,"You are free to use a formatter on the diff, see https://github.com/bitcoin/bitcoin/blob/master/doc/productivity.md#writing-code. However, we do not enforce a specific style, because developers use different editors and commit workflows.\n\n@practicalswift I think that purely stylistic feedback about code is not useful (especially when the pull request has already been reviewed and would thus re",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r257746189,257746189,test/functional/rpc_psbt.py
amitiuttarwar,2019-02-18T19:40:20Z,"ah, missed that, thanks. \n\nhm, I hear your point about stylistic feedback & reviews, but I think the feedback should be directed to me instead of practicalswift. If other reviewers made comments that caused me to make deeper code changes, I could incorporate the whitespace updates. But not worth re-committing for just that. ✔️Noted. \n\nIn this case changes to master required an update to `r",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r257809731,257809731,test/functional/rpc_psbt.py
jnewbery,2019-02-19T15:40:19Z,"> I’m headed down the path of using `-txindex` on some (not all) of the nodes\n\nThis seems like a very good idea to me.",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r258096421,258096421,test/functional/rpc_rawtransaction.py
jnewbery,2019-02-19T16:13:08Z,"Note that this is a minor change in behaviour of the test framework. Previously, the JSON request would always have an array of two values for its args. Now it has an array of three args where the final arg may be null. That's ok since `getrawtransaction()` rpc will ignore a null argument as the third positional argument and so this doesn't change behaviour on the node.",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r258112903,258112903,test/functional/test_framework/util.py
jnewbery,2019-02-19T16:15:35Z,"These changes are good on their own and achieve the goal of removing `-txindex`.\n\nTo manually propagate the transaction, leave the `sendtoaddress()` in place, but then fetch the hex transaction using `getrawtransaction(txid)` (which works since the tx is still in the mempool), and then submit that transaction to the other nodes using `sendrawtransaction(hex_tx)`",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r258114060,258114060,test/functional/interface_rest.py
jnewbery,2019-02-19T16:36:08Z,"nit: the second argument to `getrawtransaction()` is a bool, so this should be:\n\n```\ntxraw = self.nodes[0].getrawtransaction(i, False, txs_mined[i])\n```\n\nEven better, use named args and drop the unused param to make it obvious what the params are for:\n\n```\ntxraw = self.nodes[0].getrawtransaction(txid=i, blockhash=txs_mined[i])\n```",https://github.com/bitcoin/bitcoin/pull/15404#discussion_r258124066,258124066,test/functional/feature_segwit.py
jnewbery,2019-02-19T16:37:42Z,micronit: tiny preference for this being a member variable in `SegWitTest` rather than a global.,https://github.com/bitcoin/bitcoin/pull/15404#discussion_r258124760,258124760,test/functional/feature_segwit.py
