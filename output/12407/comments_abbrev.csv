jamesob,2018-02-10T21:38:57Z,"Hm: this changeset is failing tests that initially transmit a block with unexpected witness data (which gets rejected) and then retransmit without witness data for expected acceptance, but we get hung up on an existing `mapBlockIndex` entry that's been marked invalid.\n\nIs it worth special-casing out `""unexpected-witness""` rejections from the `InvalidateBlock` call? Seems a little ugly.\n\nIs",https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364695748,364695748,
sipa,2018-02-10T21:40:59Z,You can only mark a block as invalid when fPossibleCorruption is not set in the validation status.,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364695970,364695970,
jamesob,2018-02-10T21:49:50Z,"Ah good point, thanks @sipa. That seems to have fixed it.",https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-364697057,364697057,
jamesob,2018-02-14T22:29:44Z,"I've rebased this changeset, removing the code that's now in #12431 as well as the semi-related log statement. I've also DRY'd up parts of validation which set `BLOCK_FAILED_VALID` on `nStatus` to use `InvalidBlockFound` instead.\n\nThis change should only be merged *after* #12431 since this will exercise the bug that PR fixes.",https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-365766464,365766464,
MarcoFalke,2018-03-08T15:22:27Z,Needs rebase to fix travis (sorry),https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-371519441,371519441,
jamesob,2018-03-08T15:39:03Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-371524776,371524776,
ryanofsky,2018-03-12T22:09:51Z,"Slight re-utACK a12ce0dde462911bb702070d31ed28ba32353a05. Again someone more knowledgeable than me should review safety of adding new `InvalidBlockFound` calls in `ProcessNewBlock`,  `AcceptBlock`, and `InvalidateBlock`.\n\nChanges since last review were rebase, python cleanups, adding CorruptionPossible log print, and some suggestions from the last review.\n\nYou may want to update PR descrip",https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-372479549,372479549,
jamesob,2018-03-23T19:32:02Z,"Thanks @ryanofsky and @sipa for the re-review. I've incorporated @sipa's change (remove unconditional log in `InvalidBlockFound` when corruption is possible), rebased, and updated the PR description to better reflect the change's contents. I've added some text discussing the refactoring, reproduced here\n\n> This change also consolidates the setting of CBlockIndex's `nStatus |= BLOCK_FAILED_VALI",https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-375775383,375775383,
jamesob,2018-05-02T15:55:43Z,Any hope of a concept ACK/NACK on this from @sipa @TheBlueMatt @sdaftuar?,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-386027864,386027864,
Empact,2018-05-18T07:23:13Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-390118996,390118996,
jamesob,2018-05-21T21:07:20Z,Rebased and addressed @laanwj's feedback.,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-390783107,390783107,
DrahtBot,2018-06-15T20:08:51Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-397728995,397728995,
jamesob,2018-06-18T20:08:13Z,Closing this; isn't getting much traction and no point in rebasing if that's the case.,https://github.com/bitcoin/bitcoin/pull/12407#issuecomment-398179075,398179075,
ryanofsky,2018-03-06T20:59:36Z,"In commit ""[tests] Add utility for generating bad coinbase transactions""\n\nI think:\n\n```python\n(r.index, tip for r, tip in zip(rpc_connections, tips))\n```\nwould be clearer than:\n\n```python\n(rpc_connections[i].index, tip for i, tip in enumerate(tips))\n```\n\nbut you should ignore this suggestion if you prefer enumerate.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172657726,172657726,test/functional/test_framework/util.py
ryanofsky,2018-03-06T21:02:17Z,"In commit ""[tests] Add utility for generating bad coinbase transactions""\n\nCould drop kwargs assignment with\n\n```python\nreturn create_coinbase(*args, **kwargs. txin=CTxIn(...))\n```",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172658464,172658464,test/functional/test_framework/blocktools.py
ryanofsky,2018-03-06T21:24:21Z,"In commit ""Do the proper InvalidateBlock bookkeeping for DoSy blocks""\n\nDuplicating the CorruptionPossible check here seems unnecessarily confusing and fragile to me, though perhaps there's an advantage I'm not seeing.\n\n",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172664641,172664641,src/validation.cpp
jamesob,2018-03-06T21:49:42Z,"Ah yep, that's better.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172672014,172672014,test/functional/test_framework/blocktools.py
jamesob,2018-03-06T21:49:58Z,"Agree, will do.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172672089,172672089,test/functional/test_framework/util.py
jamesob,2018-03-06T22:07:49Z,Agree in hindsight that this was overly paranoid. Will remove.,https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172676965,172676965,src/validation.cpp
jamesob,2018-03-07T17:13:58Z,"Ah, Python 3.4 doesn't support this syntax (which is what we run on Travis). Will have to revert this.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172916549,172916549,test/functional/test_framework/blocktools.py
jamesob,2018-03-07T18:38:24Z,This now happens in the `InvalidBlockFound` call above.,https://github.com/bitcoin/bitcoin/pull/12407#discussion_r172942665,172942665,src/validation.cpp
sipa,2018-03-17T00:17:12Z,Why log this unconditionally? I think it may be trivial to cause someone's logfile to be filled with these.,https://github.com/bitcoin/bitcoin/pull/12407#discussion_r175240090,175240090,src/validation.cpp
jamesob,2018-03-23T17:15:55Z,"Yep, that's a good point. I'll change this into a comment.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r176805311,176805311,src/validation.cpp
laanwj,2018-05-14T14:09:39Z,"The usual convention for method documentation in this project is to add the comment in the class definition, not above the implementation. This makes it easier to read the API documentation in one place when looking at the class.\nThat said, as both are in the `.cpp` file for this class I don't think that's much of an issue here.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r187966554,187966554,src/validation.cpp
jamesob,2018-05-21T21:05:38Z,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/12407#discussion_r189713887,189713887,src/validation.cpp
