[
  {
    "sha": "6a369f1b0ac9bf00b0694677539e9c02d640bcae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTM2OWYxYjBhYzliZjAwYjA2OTQ2Nzc1MzllOWMwMmQ2NDBiY2Fl",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-10T19:06:33Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-21T20:50:57Z"
      },
      "message": "[tests] Add utility for generating bad coinbase transactions\n\nAlso adds a small logging clarification for `sync_blocks`. Includes feedback\nfrom @ryanofsky.",
      "tree": {
        "sha": "4dadcb192293276f2dc493392f7197f0bf8b807f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dadcb192293276f2dc493392f7197f0bf8b807f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a369f1b0ac9bf00b0694677539e9c02d640bcae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a369f1b0ac9bf00b0694677539e9c02d640bcae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a369f1b0ac9bf00b0694677539e9c02d640bcae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a369f1b0ac9bf00b0694677539e9c02d640bcae/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5870ab689995e7dc1ada530e9db27cfae9bb448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5870ab689995e7dc1ada530e9db27cfae9bb448",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5870ab689995e7dc1ada530e9db27cfae9bb448"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bcc2b34fc2b3758efb44e89be177bcb1b4ec8b3e",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a369f1b0ac9bf00b0694677539e9c02d640bcae/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a369f1b0ac9bf00b0694677539e9c02d640bcae/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=6a369f1b0ac9bf00b0694677539e9c02d640bcae",
        "patch": "@@ -97,14 +97,16 @@ def serialize_script_num(value):\n         r[-1] |= 0x80\n     return r\n \n-def create_coinbase(height, pubkey=None):\n+def create_coinbase(height, pubkey=None, txin=None):\n     \"\"\"Create a coinbase transaction, assuming no miner fees.\n \n     If pubkey is passed in, the coinbase output will be a P2PK output;\n     otherwise an anyone-can-spend output.\"\"\"\n+    txin = txin or CTxIn(\n+        COutPoint(0, 0xffffffff),\n+        ser_string(serialize_script_num(height)), 0xffffffff)\n     coinbase = CTransaction()\n-    coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff),\n-                        ser_string(serialize_script_num(height)), 0xffffffff))\n+    coinbase.vin.append(txin)\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50 * COIN\n     halvings = int(height / 150)  # regtest\n@@ -128,6 +130,14 @@ def create_transaction(prevtx, n, sig, value, script_pub_key=CScript()):\n     tx.calc_sha256()\n     return tx\n \n+def create_coinbase_with_bad_txin(*args, **kwargs):\n+    \"\"\"Return a coinbase CTransaction with an invalid txin.\"\"\"\n+    kwargs.setdefault('txin', CTxIn(\n+        COutPoint(0, 0),  # Normally second arg should be 0xffffffff\n+        b'0',  # Normally should be block height\n+        0xffffffff))\n+    return create_coinbase(*args, **kwargs)\n+\n def get_legacy_sigopcount_block(block, accurate=True):\n     count = 0\n     for tx in block.vtx:"
      }
    ]
  },
  {
    "sha": "8434fab3ccdf891b3efa131e6b69027d082a3d2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDM0ZmFiM2NjZGY4OTFiM2VmYTEzMWU2YjY5MDI3ZDA4MmEzZDJj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-10T19:08:44Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-21T20:50:57Z"
      },
      "message": "[tests] Add a failing test that asserts invalidity of DoS-responding blocks\n\nEnsure that we mark any block which merits a DoS response as invalid, as well\nas its associated chain tip. This will become important for detecting and\nwarning about long invalid forks.",
      "tree": {
        "sha": "96e9497d73c567aa818c82202b4681d3fabc976b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96e9497d73c567aa818c82202b4681d3fabc976b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8434fab3ccdf891b3efa131e6b69027d082a3d2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8434fab3ccdf891b3efa131e6b69027d082a3d2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8434fab3ccdf891b3efa131e6b69027d082a3d2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8434fab3ccdf891b3efa131e6b69027d082a3d2c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a369f1b0ac9bf00b0694677539e9c02d640bcae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a369f1b0ac9bf00b0694677539e9c02d640bcae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a369f1b0ac9bf00b0694677539e9c02d640bcae"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 82,
      "deletions": 40
    },
    "files": [
      {
        "sha": "7860dd175bdf9ec5ae5052bcc3591bb7843c9f15",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 82,
        "deletions": 40,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8434fab3ccdf891b3efa131e6b69027d082a3d2c/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8434fab3ccdf891b3efa131e6b69027d082a3d2c/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=8434fab3ccdf891b3efa131e6b69027d082a3d2c",
        "patch": "@@ -47,15 +47,25 @@\n    of the invalid block. Check that we get disconnected if we send more headers\n    on the chain the node now knows to be invalid.\n \n-9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+9. Send a block which prompts a DoS response and disconnect from the\n+   receiving peer. Check that the block and associated chain tip get marked\n+   with the \"invalid\" status. This is a relevant case for invalid fork\n+   detection.\n+\n+10. Test Node1 is able to sync when connected to node0 (which should have sufficient\n    work on its chain).\n \"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+    create_transaction,\n+    create_coinbase_with_bad_txin,\n+)\n \n \n class AcceptBlockTest(BitcoinTestFramework):\n@@ -113,12 +123,7 @@ def run_test(self):\n         test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()\n-        tip_entry_found = False\n-        for x in self.nodes[0].getchaintips():\n-            if x['hash'] == block_h1f.hash:\n-                assert_equal(x['status'], \"headers-only\")\n-                tip_entry_found = True\n-        assert(tip_entry_found)\n+        self._check_tip_status(self.nodes[0], block_h1f.hash, 'headers-only')\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n \n         # 4. Send another two block that build on the fork.\n@@ -130,12 +135,7 @@ def run_test(self):\n         test_node.sync_with_ping()\n         # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n-        tip_entry_found = False\n-        for x in self.nodes[0].getchaintips():\n-            if x['hash'] == block_h2f.hash:\n-                assert_equal(x['status'], \"headers-only\")\n-                tip_entry_found = True\n-        assert(tip_entry_found)\n+        self._check_tip_status(self.nodes[0], block_h2f.hash, 'headers-only')\n \n         # But this block should be accepted by node since it has equal work.\n         self.nodes[0].getblock(block_h2f.hash)\n@@ -149,12 +149,7 @@ def run_test(self):\n         test_node.sync_with_ping()\n         # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n-        tip_entry_found = False\n-        for x in self.nodes[0].getchaintips():\n-            if x['hash'] == block_h3.hash:\n-                assert_equal(x['status'], \"headers-only\")\n-                tip_entry_found = True\n-        assert(tip_entry_found)\n+        self._check_tip_status(self.nodes[0], block_h3.hash, 'headers-only')\n         self.nodes[0].getblock(block_h3.hash)\n \n         # But this block should be accepted by node since it has more work.\n@@ -265,12 +260,7 @@ def run_test(self):\n         test_node.send_message(headers_message)\n \n         test_node.sync_with_ping()\n-        tip_entry_found = False\n-        for x in self.nodes[0].getchaintips():\n-            if x['hash'] == block_292.hash:\n-                assert_equal(x['status'], \"headers-only\")\n-                tip_entry_found = True\n-        assert(tip_entry_found)\n+        self._check_tip_status(self.nodes[0], block_292.hash, 'headers-only')\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n \n         test_node.send_message(msg_block(block_289f))\n@@ -280,22 +270,27 @@ def run_test(self):\n         self.nodes[0].getblock(block_289f.hash)\n         self.nodes[0].getblock(block_290f.hash)\n \n-        test_node.send_message(msg_block(block_291))\n+        for invalid_block in (block_291, block_292):\n+            test_node.send_message(msg_block(invalid_block))\n \n-        # At this point we've sent an obviously-bogus block, wait for full processing\n-        # without assuming whether we will be disconnected or not\n-        try:\n-            # Only wait a short while so the test doesn't take forever if we do get\n-            # disconnected\n-            test_node.sync_with_ping(timeout=1)\n-        except AssertionError:\n-            test_node.wait_for_disconnect()\n+            # At this point we've sent an obviously-bogus block, wait for full\n+            # processing without assuming whether we will be disconnected or\n+            # not\n+            try:\n+                # Only wait a short while so the test doesn't take forever if\n+                # we do get disconnected\n+                test_node.sync_with_ping(timeout=1)\n+            except AssertionError:\n+                test_node.wait_for_disconnect()\n+                test_node = self._reconnect_node(self.nodes[0])\n \n-            self.nodes[0].disconnect_p2ps()\n-            test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+            # We should still able to retrieve headers for the invalid block\n+            # and its children.\n+            self.nodes[0].getblockheader(invalid_block.hash)\n \n-            network_thread_start()\n-            test_node.wait_for_verack()\n+        # ...but the tip descended from the bad block should be marked as\n+        # invalid.\n+        self._check_tip_status(self.nodes[0], block_292.hash, 'invalid')\n \n         # We should have failed reorg and switched back to 290 (but have block 291)\n         assert_equal(self.nodes[0].getblockcount(), 290)\n@@ -310,10 +305,57 @@ def run_test(self):\n         test_node.send_message(headers_message)\n         test_node.wait_for_disconnect()\n \n-        # 9. Connect node1 to node0 and ensure it is able to sync\n+        test_node = self._reconnect_node(self.nodes[0])\n+\n+        # 9. Send an invalid block which prompts a DoS response. Ensure the\n+        # associated chain tip is marked as invalid.\n+\n+        # Create a block whose reception will prompt a DoS response, forking\n+        # off some earlier point in the active chain\n+        bad_cb = create_coinbase_with_bad_txin(275)\n+\n+        dos_block = create_block(\n+            all_blocks[270].sha256, bad_cb, all_blocks[270].nTime + 1)\n+        dos_block.solve()\n+\n+        test_node.send_message(msg_headers([CBlockHeader(dos_block)]))\n+        test_node.send_message(msg_block(dos_block))\n+        test_node.wait_for_disconnect()\n+        test_node = self._reconnect_node(self.nodes[0])\n+\n+        # Check that we can still retrieve the header of the DoS-causing block\n+        self.nodes[0].getblockheader(dos_block.hash)\n+\n+        self._check_tip_status(self.nodes[0], dos_block.hash, 'invalid')\n+        assert_raises_rpc_error(\n+            -1, \"Block not found on disk\",\n+            self.nodes[0].getblock, dos_block.hash)\n+\n+        # 10. Connect node1 to node0 and ensure it is able to sync\n         connect_nodes(self.nodes[0], 1)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")\n \n+    def _reconnect_node(self, node):\n+        \"\"\"Reconnect to a node after being disconnected.\n+\n+        Return the resulting P2PInterface.\n+        \"\"\"\n+        node.disconnect_p2ps()\n+        network_thread_join()\n+        test_node = node.add_p2p_connection(P2PInterface())\n+        network_thread_start()\n+        test_node.wait_for_verack()\n+\n+        return test_node\n+\n+    def _check_tip_status(self, node, tip_hash, expected_tip_status):\n+        \"\"\"Assert some tip status given a particular block hash.\"\"\"\n+        [tip_dict] = [\n+            t for t in node.getchaintips() if t['hash'] == tip_hash]\n+\n+        assert_equal(tip_dict['status'], expected_tip_status)\n+\n+\n if __name__ == '__main__':\n     AcceptBlockTest().main()"
      }
    ]
  },
  {
    "sha": "1b922fdce61363106eff48477c4e04bd97b1c6d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjkyMmZkY2U2MTM2MzEwNmVmZjQ4NDc3YzRlMDRiZDk3YjFjNmQ0",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-06T23:11:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-21T20:50:57Z"
      },
      "message": "Do the proper InvalidateBlock bookkeeping for DoSy blocks\n\nWhen we receive a block which causes a DoS response, ensure that we mark its\nstatus as \"invalid\" in `mapBlockIndex`. This is necessary for detecting and\nwarning about forks which are invalid but long.",
      "tree": {
        "sha": "0be3ca5fc220dd198d15f93ac7f1c1496de2ec81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0be3ca5fc220dd198d15f93ac7f1c1496de2ec81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b922fdce61363106eff48477c4e04bd97b1c6d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b922fdce61363106eff48477c4e04bd97b1c6d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b922fdce61363106eff48477c4e04bd97b1c6d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b922fdce61363106eff48477c4e04bd97b1c6d4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8434fab3ccdf891b3efa131e6b69027d082a3d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8434fab3ccdf891b3efa131e6b69027d082a3d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8434fab3ccdf891b3efa131e6b69027d082a3d2c"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cdffa9ecf2eb69ef3fa2a9bb8b90116af416a4f0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b922fdce61363106eff48477c4e04bd97b1c6d4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b922fdce61363106eff48477c4e04bd97b1c6d4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1b922fdce61363106eff48477c4e04bd97b1c6d4",
        "patch": "@@ -173,6 +173,7 @@ class CChainState {\n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n     bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n     bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n@@ -197,7 +198,6 @@ class CChainState {\n      */\n     void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n-    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n     CBlockIndex* FindMostWorkChain();\n     bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n \n@@ -3495,10 +3495,20 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n         LOCK(cs_main);\n \n-        if (ret) {\n+        if (!ret) {\n+            // Mark the block as invalid if we recognize it in mapBlockIndex.\n+            // This doesn't happen within CheckBlock so we have to include a call\n+            // here. It *does* happen within AcceptBlock below.\n+            BlockMap::iterator it = mapBlockIndex.find(pblock->GetHash());\n+\n+            if (it != mapBlockIndex.end()) {\n+                g_chainstate.InvalidBlockFound(it->second, state);\n+            }\n+        } else {\n             // Store to disk\n             ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n+\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));"
      }
    ]
  },
  {
    "sha": "29bd4800ceab42f8b798869a2fb3e7f8de171738",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWJkNDgwMGNlYWI0MmY4Yjc5ODg2OWEyZmIzZTdmOGRlMTcxNzM4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-06T23:36:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-21T21:04:55Z"
      },
      "message": "Refactoring/DRYing for InvalidBlockFound\n\nConsolidate BLOCK_FAILED_VALID nStatus updates to use InvalidBlockFound. Clean\nup InvalidBlockFound for a defensive early exit if called when corruption is\npossible.",
      "tree": {
        "sha": "b5ad000b9110e67c7f32eae018ffa8a15de18382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5ad000b9110e67c7f32eae018ffa8a15de18382"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29bd4800ceab42f8b798869a2fb3e7f8de171738",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29bd4800ceab42f8b798869a2fb3e7f8de171738",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29bd4800ceab42f8b798869a2fb3e7f8de171738",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29bd4800ceab42f8b798869a2fb3e7f8de171738/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b922fdce61363106eff48477c4e04bd97b1c6d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b922fdce61363106eff48477c4e04bd97b1c6d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b922fdce61363106eff48477c4e04bd97b1c6d4"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 30,
      "deletions": 20
    },
    "files": [
      {
        "sha": "44dbf680defa6c099b80ec8b2daebd6c2d197702",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29bd4800ceab42f8b798869a2fb3e7f8de171738/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29bd4800ceab42f8b798869a2fb3e7f8de171738/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=29bd4800ceab42f8b798869a2fb3e7f8de171738",
        "patch": "@@ -173,6 +173,14 @@ class CChainState {\n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n     bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+\n+    /**\n+     * Mark a single block as invalid, updating its status in `mapBlockIndex`.\n+     * Perform other index-related bookkeeping.\n+     *\n+     * See also: InvalidateBlock, which should be called instead of this if the\n+     * block being invalidated is on the active chain.\n+     */\n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n     bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n@@ -1279,13 +1287,18 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n }\n \n void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n-    if (!state.CorruptionPossible()) {\n-        pindex->nStatus |= BLOCK_FAILED_VALID;\n-        m_failed_blocks.insert(pindex);\n-        setDirtyBlockIndex.insert(pindex);\n-        setBlockIndexCandidates.erase(pindex);\n-        InvalidChainFound(pindex);\n+    AssertLockHeld(cs_main);\n+\n+    if (state.CorruptionPossible()) {\n+        // No updates should happen if corruption is possible.\n+        return;\n     }\n+\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    m_failed_blocks.insert(pindex);\n+    setDirtyBlockIndex.insert(pindex);\n+    setBlockIndexCandidates.erase(pindex);\n+    InvalidChainFound(pindex);\n }\n \n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)\n@@ -2781,11 +2794,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         invalid_walk_tip = invalid_walk_tip->pprev;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    InvalidBlockFound(pindex, state);\n \n     // DisconnectTip will add transactions to disconnectpool; try to add these\n     // back to the mempool.\n@@ -2801,8 +2810,6 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         it++;\n     }\n \n-    InvalidChainFound(pindex);\n-\n     // Only notify about a new block tip if the active chain was modified.\n     if (pindex_was_in_chain) {\n         uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n@@ -3449,9 +3456,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n \n     if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n-        if (state.IsInvalid() && !state.CorruptionPossible()) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            setDirtyBlockIndex.insert(pindex);\n+        if (state.IsInvalid()) {\n+            InvalidBlockFound(pindex, state);\n         }\n         return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }"
      },
      {
        "sha": "2d657d77299a59bc02ef2a4fe329814a6bc222ee",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29bd4800ceab42f8b798869a2fb3e7f8de171738/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29bd4800ceab42f8b798869a2fb3e7f8de171738/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=29bd4800ceab42f8b798869a2fb3e7f8de171738",
        "patch": "@@ -221,7 +221,7 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** \n+/**\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n@@ -232,7 +232,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n- * \n+ *\n  * Call without cs_main held.\n  *\n  * @param[in]   pblock  The block we want to process.\n@@ -358,7 +358,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = null\n \n /**\n  * Closure representing one script verification\n- * Note that this stores references to the spending transaction \n+ * Note that this stores references to the spending transaction\n  */\n class CScriptCheck\n {\n@@ -446,7 +446,11 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n /** Mark a block as precious and reorganize. */\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n-/** Mark a block as invalid. */\n+/**\n+ * Mark a block as being invalid. If the block is in the active chain,\n+ * disconnect any children and add any contained transactions back to the\n+ * mempool.\n+ */\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n \n /** Remove invalidity status from a block and its descendants. */"
      }
    ]
  }
]