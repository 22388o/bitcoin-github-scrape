jgarzik,2012-07-11T19:11:27Z,Code seems ACK-worthy.\n\nUse cases?\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-6916444,6916444,
luke-jr,2012-07-11T19:17:04Z,Various people (@gmaxwell and @gavinandresen included) expressed interest in this - one example was to allow captcha-solving as an alternative to fees.\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-6916602,6916602,
gmaxwell,2012-08-12T19:14:01Z,"Re: Ignoring minfee: This call is by txid. If you don't like the fee, don't call it on the transaction.  Ignoring minfee is the right thing to do here.\n\nThough this should also have a fee delta, because we now prioritize above minfee txn by fee per KB. If someone is paying you behind the scenes to mine a transaction you should be able to add the amount you're being paid (or whatever) to the fee ",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7678848,7678848,
luke-jr,2012-08-13T05:54:28Z,"Updated with suggestions. Also, is it intentional that GetMinFee with GMF_BLOCK is _never_ used anymore?\n",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7683936,7683936,
BitcoinPullTester,2012-08-13T09:14:18Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/2c63ef9156288b3cc72668fdb6ce44ec3a440076 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7686779,7686779,
sipa,2012-08-13T15:54:29Z,@luke-jr Which commit removed the call to GetMinFee with GMF_BLOCK?\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7696109,7696109,
luke-jr,2012-08-13T15:56:14Z,@sipa c555400ca134991e39d5e3a565fcd2215abe56f6\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7696169,7696169,
gmaxwell,2012-08-23T12:30:36Z,Needs a rebase\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-7967960,7967960,
luke-jr,2012-11-14T19:03:19Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-10378973,10378973,
luke-jr,2013-04-12T04:43:11Z,"Ok, finally redid this using a map.\n\n@gavinandresen , look good?\n",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-16275637,16275637,
jgarzik,2013-05-30T17:04:17Z,No objection...  though I still prioritize with the 'z' :)  Who the heck uses an 's'?  :)\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-18694252,18694252,
luke-jr,2013-08-21T14:46:02Z,It occurs to me that the map should be cleaned at some point. Any opinions on when to remove a txid from it?\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-23022296,23022296,
gmaxwell,2013-08-21T15:56:39Z,Check it when removing transactions from the mempool?\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-23027788,23027788,
luke-jr,2013-08-21T17:30:25Z,Probably don't want to lose priority adjustments if your block gets knocked off the main chain...\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-23034706,23034706,
petertodd,2013-08-22T19:35:10Z,@luke-jr Set a expiry height after they get knocked off the main chain and remove them from the map after n blocks? If n=100 is reached we have bigger problems...\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-23118644,23118644,
gavinandresen,2013-10-21T01:02:23Z,Rebase needed.\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-26687769,26687769,
luke-jr,2013-10-25T01:02:48Z,Rebased. For purging from the map.. how about when we see a block confirm a transaction using it as an input?\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-27047527,27047527,
luke-jr,2013-12-03T16:40:16Z,"Rebased and added mapDeltas pruning when transactions are removed from the memory pool (ie, included in a block).\n",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-29726339,29726339,
laanwj,2014-06-03T12:59:46Z,This pull has been open for almost two years now.\nWhat still has to be done for this to me merged? (apart from a rebase)\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-44960864,44960864,
jgarzik,2014-06-03T16:31:08Z,"ACK -- appears to be done, to me, modulo a rebase.\n\nThis is IMO important to merge.  We want to give miners controls like this, so that they may innovate and compete.\n\nRelated: Miners also need an ""accept this TX even if it's non-standard"" RPC or RPC flag.\n",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-44988036,44988036,
BitcoinPullTester,2014-06-23T17:02:53Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p1583_4427dc5e6a6fd0f7349e6ea3e0d6a084491cf265/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-46872401,46872401,
luke-jr,2014-06-26T11:51:18Z,Rebased with @laanwj 's change.\n,https://github.com/bitcoin/bitcoin/pull/1583#issuecomment-47216412,47216412,
Diapolo,2012-07-11T19:33:11Z,Have 2 empty lines a special meaning in the code?\n,https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1143655,1143655,src/main.h
gavinandresen,2012-07-12T15:04:42Z,What's the logic here? Why would setting a >0 delta automatically imply a minimum fee of zero?\n,https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1150418,1150418,src/main.h
gavinandresen,2012-07-12T15:05:15Z,"Three versions of this is excessive.  Less code, please.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1150423,1150423,src/main.h
luke-jr,2012-07-12T16:08:35Z,"It seems to me, that if someone wants to improve the priority of a transaction, they do actually want to mine that transaction. What's the point of setting a priority of a transaction that you're not going to mine regardless?\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1151163,1151163,src/main.h
gavinandresen,2012-07-13T12:32:42Z,"The point is ""increase priority"" and ""requires no fee"" should, in my opinion, be independent notions. Somebody might want to bump up the priority of transactions from the Bitcoin Faucet a little because they like the idea of giving newbies a good bitcoin experience, but don't want to crowd out other high-priority/low-fee transactions.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1158330,1158330,src/main.h
luke-jr,2012-07-13T15:37:46Z,"I can take this out if you want me to, but I don't see the point. A priority bump of just 1 has no practical effect on the overall priority comparison, but could be used to whitelist against the fee requirements, and the priority is entirely ignored if a transaction doesn't meet the fee requirements, so it makes  no sense to increase the priority while not overriding the fee requirements, IMO.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1159654,1159654,src/main.h
sipa,2012-08-13T16:01:26Z,"This needs a LOCK on mempool.cs, imho. Even if it's somehow already safe because of the lock on cs_main, I'd prefer having it there, for when RPC locks get pushed down.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1363388,1363388,src/main.cpp
luke-jr,2012-08-13T16:08:02Z,Fixed\n,https://github.com/bitcoin/bitcoin/pull/1583#discussion_r1363471,1363471,src/main.cpp
gavinandresen,2013-02-13T23:00:20Z,"Adding 16 bytes to every in-memory transaction to support a feature that will not be used by 99.9% of users seems like the wrong thing to do.\n\nHow about instead keeping a map&lt;transaction_id, pair&lt;priorityDelta,feeDelta&gt; &gt;  in the memory pool class, and have prioritisetransaction add to that map?\n\nFinally: need to check to see if the free transaction rate limiter code needs to take ",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r3005465,3005465,src/main.h
luke-jr,2013-02-13T23:08:46Z,"With the deltas stored on CTransaction, applying them to not-received ones was impractical. Obviously using a map as you suggest solves this problem too - will do that.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r3005564,3005564,src/main.h
laanwj,2013-05-30T17:33:00Z,"I don't like all these side-effects in a const getter function\n\nEdit: hmm, never mind, ApplyDeltas does not actually change anything in the mempool object.\n",https://github.com/bitcoin/bitcoin/pull/1583#discussion_r4462461,4462461,src/main.cpp
laanwj,2014-06-25T09:00:54Z,These implementations should be in txmempool.cpp.\n,https://github.com/bitcoin/bitcoin/pull/1583#discussion_r14174955,14174955,src/miner.cpp
