DrahtBot,2020-04-25 17:36:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20546 (policy, wallet, refactor: check for non-representable CFeeRates by jonatack)\n* #20323 (tests: Create or use exist",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-619414860,619414860,
darosior,2020-04-27 10:28:51,@promag : addressed your feedback. Would be interested about what do you think about disabling the fee estimation in `blocksonly` conceptually though.,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-619889201,619889201,
luke-jr,2020-04-30 17:37:15,Concept ACK / Sounds reasonable.,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-621999260,621999260,
brakmic,2020-05-01 10:48:18,Concept ACK. ,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-622341098,622341098,
laanwj,2020-05-04 14:37:53,"Concept ACK, but I don't know enough about the underlying mechanism to be sure if this is a reasonable way to accomplish it.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-623503344,623503344,
promag,2020-05-04 14:48:16,"> Would be interested about what do you think about disabling the fee estimation in `blocksonly` conceptually though.\n\nSame opinion as above.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-623509291,623509291,
MarcoFalke,2020-05-04 15:03:14,"Concept ACK, while the fee estimation should work for some limited time after the mempool has been turned off (see https://github.com/bitcoin/bitcoin/issues/16840#issuecomment-529904220), I can see the point to fail early on startup instead of later at runtime.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-623518006,623518006,
MarcoFalke,2020-05-04 15:04:25,Concept ACK 33ca35902435a162c526bf6c8bd82145585dfbd9,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-623518645,623518645,
darosior,2020-06-12 09:14:42,"@sdaftuar (ping because you reviewed the previous PR) : what do you think of this approach compared to the previous one ?\n\n@morcos (ping because you implemented the fee estimation) : what do you think of it implementation-wise ?",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-643168066,643168066,
darosior,2020-07-29 16:14:47,"This was intended to be a ""quick fix"", but the approach seems to be too much of a workaround.\n\nI've reworked this to opt for a more involved approach based on #19556. This now:\n- Removes the fee estimator related globals.\n- Conditionally creates the fee estimator: if we don't relay transactions we don't even bother to allocate the `CBlockPolicyEstimator`.\n\nThis is rebased on top of #19",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-665759886,665759886,
darosior,2020-09-06 20:07:36,Rebased on  #19556 now that the remove-mempool-global series is almost over.,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-687887730,687887730,
jonatack,2020-09-06 20:16:03,"Concept ACK, will review after 19556 goes in. ",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-687889938,687889938,
jnewbery,2020-09-06 20:31:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-687893655,687893655,
jnewbery,2020-09-06 20:52:56,"Intuitively, I don't think the mempool should 'own' the fee estimator, but rather I see the fee estimator as a client of the mempool. I'd suggest constructing the fee estimator in `AppInitMain()` and owning the memory in `NodeContext`, like the other components.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-687898700,687898700,
darosior,2020-09-08 10:04:13,"> Intuitively, I don't think the mempool should 'own' the fee estimator, but rather I see the fee estimator as a client of the mempool. I'd suggest constructing the fee estimator in AppInitMain() and owning the memory in NodeContext, like the other components.\n\nIt seems more intuitive to me for the mempool to own the fee estimator as the latter can not exist without the former, and it would ot",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-688764055,688764055,
jnewbery,2020-09-08 10:30:16,"> it would otherwise be a potentially-uninitialized globally-accessible ""second class"" object\n\nThat depends on how you write the code. `NodeContext` holds (mostly) unique ptrs which may or may not be initialized. It's up to the components to make sure that they're using a component that is enabled (see, for example, the usage of banman in net_processing).\n\nFee estimator is currently a sepa",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-688777863,688777863,
darosior,2020-09-08 17:07:22,"Refactored to keep the feeEstimator as a separate component as per @jnewbery request (spoiler: it's cleaner now, i could even squash the first two commits).",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-689015609,689015609,
darosior,2020-09-09 15:35:32,"Amended to use snake case, and added a commit to encapsulate the management of the fee estimation file in `CBlockPolicyEstimator`.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-689642600,689642600,
jnewbery,2020-09-10 09:47:33,"This is very confusing. In your latest branch you're now calling `FlushUnconfirmed()` twice, which is definitely a behaviour change. I don't think you need to change the dtor at all, or the interface for the ctor.\n\nSee https://github.com/jnewbery/bitcoin/tree/pr18766.1. The only thing that has to change is a new `flush()` function is added and some logic is moved inside the `CBlockPolicyEstima",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-690120291,690120291,
darosior,2020-09-10 10:42:26,"> This is very confusing. In your latest branch you're now calling FlushUnconfirmed() twice, which is definitely a behaviour change. I don't think you need to change the dtor at all, or the interface for the ctor.\n\nI pushed in a hurry yesterday, and noticed this afterwards. Will fix this and the rest as soon as possible, but want to take some time for that to avoid wasting your time (and poten",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-690147319,690147319,
darosior,2020-09-10 13:10:32,"Ok, it should be in a reviewable state now. This:\n- Moves the fee estimator from a global to the node context.\n- Encapsulates the `fee_estimates.dat` logic in CBlockPolicyEstimator.\n- Avoid creating the fee estimator at all if we don't relay transactions.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-690276791,690276791,
jnewbery,2020-09-11 12:55:04,"utACK 4105c63a67a40fe109b2f2c020c9fbf25d1fc250\n\nIf you retouch this, you can remove the policy/fees.h #include in validation.cpp:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 86d18a9d7f..7d60dd6e20 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -22,7 +22,6 @@\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n #include <optional.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-691077647,691077647,
fjahr,2020-09-12 12:28:19,"Code review ACK 4105c63a67a40fe109b2f2c020c9fbf25d1fc250\n\nIf you retouch you could also check the description of 4105c63a67a40fe109b2f2c020c9fbf25d1fc250, which saying logic has move to the destructor while it is actually in the `Flush()` method now.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-691480388,691480388,
jnewbery,2020-10-21 09:15:48,"~Oh, one more thing - you could make the git commit logs just a little more verbose. No need to write an essay, but just a short justification for the changes.~\n\nEDIT: oops. I left this comment on the wrong PR. The commit logs look fine. Sorry for the noise.",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-713430502,713430502,
darosior,2020-10-21 09:19:16,"Yeah, did not want to invalidate the ACKs but now it didn't make it in before the feature freeze, i'll address both your comments.\n\n‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐\nLe mercredi, octobre 21, 2020 11:16 AM, John Newbery <notifications@github.com> a écrit :\n\n> Oh, one more thing - you could make the git commit logs just a little more verbose. No need to write an essay, but just a short justifica",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-713432721,713432721,
darosior,2020-10-22 11:30:25,Rebased. Addressed @jnewbery and @fjahr nits.,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-714429714,714429714,
jnewbery,2020-10-22 12:23:47,utACK 4aaad74c4c8a24c4b67af4e92c29805b923f2225,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-714456924,714456924,
fjahr,2020-10-25 11:06:36,Code review ACK 4aaad74c4c8a24c4b67af4e92c29805b923f2225,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-716129113,716129113,
ellemouton,2020-10-31 10:03:59,Hi @darosior :) quick question: Will serving outdated fee data not also be a problem if the node has been off for a while and the fee estimation files are just stale in general? i.e would it not perhaps be useful to look at 'last-updated' time on the data and then starting fresh if the data is too old?,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-719912391,719912391,
darosior,2020-10-31 11:42:21,"Hi @ellemouton, fortunately we discard these estimations already. If the node has been off for a while, we'll exponentially [decay the estimation as we connect new blocks](https://github.com/bitcoin/bitcoin/blob/42b66a6b814bca130a9ccf0a3f747cf33d628232/src/policy/fees.cpp#L575-L622) :).\n\nEDIT: to give slightly more context, if however the node is turned back on after a short period of time the",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-719922447,719922447,
ellemouton,2020-10-31 13:50:18,Aha! That makes sense. Thanks for the context @darosior 😄 ,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-719936855,719936855,
jnewbery,2020-12-01 12:07:51,utACK 01e39989f23b26a23cea26e5ec4d8dfc2010bc97,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-736511297,736511297,
darosior,2020-12-03 11:17:06,Addressed all @MarcoFalke 's remaining nits.,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-737877241,737877241,
practicalswift,2020-12-03 11:32:43,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-737885138,737885138,
MarcoFalke,2020-12-07 07:55:10,"re-ACK 4e28753f60 👋\nonly changes:\n* Small test fixup (restart_node)\n* Small log fixups\n* Remove dead code (empty path check)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 4e28753f60 👋\nonly changes:\n* Small test fixup (restart_node)\n* Small log fixups\n* Remove dead code (empty pa",https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-739741516,739741516,
jnewbery,2020-12-07 11:22:42,utACK 4e28753f60613ecd35cdef87bef5f99c302c3fbd,https://github.com/bitcoin/bitcoin/pull/18766#issuecomment-739855921,739855921,
promag,2020-04-27 09:20:00,"Why read the file then? You could early check like:\n```cpp\n// Don't initialize fee estimation if we don't relay transactions.\nif (!g_relay_txes) {\n    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n    CAutoFile est_filein(fsbridge::fopen(est_path, ""rb""), SER_DISK, CLIENT_VERSION);\n    if (!est_filein.IsNull()) ::feeEstimator.Read(est_filein);\n    fFeeEstimatesInitialized",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r415650678,415650678,src/init.cpp
darosior,2020-04-27 09:45:46,"I think\n```cpp\nfFeeEstimatesInitialized = true;\n```\nshould be set anyway ?\n\nWhat do you think about this conceptually ?",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r415668117,415668117,src/init.cpp
promag,2020-04-27 09:51:31,I think `fFeeEstimatesInitialized` exists to handle early shutdowns. But if you don't read estimates then writing will clear it right?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r415672000,415672000,src/init.cpp
darosior,2020-04-27 10:00:03,Hmm right,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r415677781,415677781,src/init.cpp
jnewbery,2020-09-09 09:02:00,This is unused.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485454601,485454601,src/txmempool.h
jnewbery,2020-09-09 09:04:29,Why is this added?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485456244,485456244,src/txmempool.h
jnewbery,2020-09-09 09:07:22,"Join lines to fix up with current code style:\n\n`if (node.feeEstimator) {`\n\n(see https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c)",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485458249,485458249,src/init.cpp
jnewbery,2020-09-09 09:07:52,"Again, fix up braces when touching adjacent lines.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485458615,485458615,src/init.cpp
jnewbery,2020-09-09 09:09:07,I think only `g_relay_txes` needs to be moved up here.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485459450,485459450,src/init.cpp
jnewbery,2020-09-09 09:09:36,use braces for if block.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485459823,485459823,src/init.cpp
jnewbery,2020-09-09 09:10:11,"I think you can just use default initialization of `CFeeRate`:\n\n```suggestion\n        if (!m_node.feeEstimator) return {};\n```",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485460221,485460221,src/interfaces/chain.cpp
jnewbery,2020-09-09 09:10:54,Why does this need to be shared? `NodeContext` should have unique ownership of the feeEstimator object.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485460740,485460740,src/node/context.h
jnewbery,2020-09-09 09:12:40,How about extracting this to an `EnsureFeeEstimator()` function? (see `EnsureMemPool` and `EnsureChainman`),https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485461954,485461954,src/rpc/mining.cpp
jnewbery,2020-09-09 09:15:57,"You don't need to make this change. The fee estimator's memory/lifetime is owned by `NodeContext`. This can continue being a raw pointer to that object (in the same way that `PeerManager` holds pointers and references to other components).\n\nNot making this change should reduce the diff of this PR considerably.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485464307,485464307,src/txmempool.cpp
jnewbery,2020-09-09 09:19:45,"Consider joining into one line for simple one-statement if blocks:\n\n```suggestion\n    if (g_relay_txes) node.feeEstimator = std::make_shared<CBlockPolicyEstimator>();\n```",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485466714,485466714,src/init.cpp
jnewbery,2020-09-09 09:20:51,"You're constructing the fee estimator here. You should destruct it on shutdown. At line 304 (after the `node.mempool` unique ptr is reset), you should reset this ptr too.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485467428,485467428,src/init.cpp
jnewbery,2020-09-09 09:21:54,You only need to test this on one node.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485468022,485468022,test/functional/feature_fee_estimation.py
darosior,2020-09-09 09:23:48,"Argh, leftover from the refactor..",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485469249,485469249,src/txmempool.h
darosior,2020-09-09 09:24:36,"Same, was for CAutoFile",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485469773,485469773,src/txmempool.h
darosior,2020-09-09 09:27:00,Yeah but it made sense to keep them all grouped imho,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485471403,485471403,src/init.cpp
darosior,2020-09-09 09:29:03,"I thought `EnsureXX()` were used for components that should not be absent, while the fee estimator may be ?",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485472650,485472650,src/rpc/mining.cpp
darosior,2020-09-09 09:31:45,Dropped this somehow.. Fixing now.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485474344,485474344,src/init.cpp
jnewbery,2020-09-09 09:37:18,I think it's fine to add `EnsureXX()` for components that may not be enabled. Does that sound right to you @MarcoFalke ?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485477681,485477681,src/rpc/mining.cpp
MarcoFalke,2020-09-09 10:02:11,"It doesn't make sense to call `estimatesmartfee` without the fee estimator. So yes, `EnsureFeeEstimator` is the way to go right now. (In the future the fee estimator can register the RPC itself, so when it is missing, the RPC won't even be there)",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485492587,485492587,src/rpc/mining.cpp
darosior,2020-09-09 10:04:46,"Right, fixed",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485494099,485494099,src/node/context.h
darosior,2020-09-09 10:15:59,"> In the future the fee estimator can register the RPC itself, so when it is missing, the RPC won't even be there\n\nHmm that would be particularly nice, as for example applications up the stack relying on fee estimation would be able to just error at startup rather than ""check and see if it errors"". Might propose a follow-up implementing this.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485500587,485500587,src/rpc/mining.cpp
darosior,2020-09-09 10:20:47,"Thanks, amended to only start and test on one node.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485503096,485503096,test/functional/feature_fee_estimation.py
jnewbery,2020-09-09 11:39:31,"I think this flag might protect us from overwriting the estimates.dat file in case we abort start-up for some reason. Rather than removing it entirely, I think it should be moved to CBlockPolicyEstimator, and then checked on destruction.\n\nIf you really wanted to encaptulate this better, you could move this file read logic to the feeEstimator constructor, and the flush logic to a public flush m",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485543436,485543436,src/init.cpp
MarcoFalke,2020-09-09 12:56:14,"```suggestion\n    std::unique_ptr<CBlockPolicyEstimator> fee_estimator;\n```\nfor new code",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485588776,485588776,src/node/context.h
MarcoFalke,2020-09-09 12:58:13,"```suggestion\n    CBlockPolicyEstimator& fee_estimator = EnsureFeeEstimator(request.context);\n```\n\nsnake case for new code ;)",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485590033,485590033,src/rpc/mining.cpp
darosior,2020-09-09 13:49:44,"Good catch. Went for the encapsulation way, will push a commit.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485626919,485626919,src/init.cpp
darosior,2020-09-09 14:26:06,Thanks! Amended,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485655086,485655086,src/rpc/mining.cpp
jnewbery,2020-09-09 15:53:27,You don't need a separate function for this since it's only called in one place. You can just insert this code into the constructor.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485720809,485720809,src/policy/fees.cpp
jnewbery,2020-09-09 15:54:41,"Moving this code to the destructor may be a behaviour change, since there will have been changes to the mempool in the intervening period. I suggest adding a public flush method and calling it here to avoid the behaviour change.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485721671,485721671,src/init.cpp
jnewbery,2020-09-09 15:55:22,Can you move this line inside the constructor and avoid changing the signature of the constructor?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485722181,485722181,src/init.cpp
darosior,2020-09-09 16:09:50,Thought it would be better to keep the filename constants in init ?..,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485734447,485734447,src/init.cpp
darosior,2020-09-09 16:16:54,"Yeah, i initially swapped the two calls to `reset()`, but as you prefer.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485741177,485741177,src/init.cpp
jnewbery,2020-09-09 16:25:16,No need. If it's only used in policy/fees.cpp you can move the constant there.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r485748468,485748468,src/init.cpp
darosior,2020-09-10 13:05:35,"Ok, done.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r486319537,486319537,src/init.cpp
jnewbery,2020-09-10 13:27:23,Why are you moving this to the destructor? Are we sure that nothing happens to the fee estimator's state between  https://github.com/bitcoin/bitcoin/pull/18766/files#diff-c865a8939105e6350a50af02766291b7R236 and https://github.com/bitcoin/bitcoin/pull/18766/files#diff-c865a8939105e6350a50af02766291b7R294?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r486334984,486334984,src/policy/fees.cpp
darosior,2020-09-10 15:01:58,Right. What do you think of instead exposing a `RecordEstimation()` method to the `CBlockPolicyEstimator` ?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r486415217,486415217,src/policy/fees.cpp
jnewbery,2020-09-10 16:18:43,Was there a reason you didn't like the flush() method in https://github.com/jnewbery/bitcoin/tree/pr18766.1?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r486470802,486470802,src/policy/fees.cpp
darosior,2020-09-10 16:32:46,Ok didn't see this. Had a version with both the FlushUnconfirmed() and RecordEstimation() separated locally. Grouping them and pushing in a minute !,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r486479894,486479894,src/policy/fees.cpp
jnewbery,2020-10-22 11:28:13,I think you should keep this assert.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r510085372,510085372,src/init.cpp
darosior,2020-10-22 11:36:07,"Good catch, will re-add it if i have to retouch.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r510089535,510089535,src/init.cpp
jnewbery,2020-10-22 12:03:16,Just re-add it now. I'm the only person who's ACKed the latest head and I'm happy to reACK.,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r510104576,510104576,src/init.cpp
darosior,2020-10-22 12:05:27,"Ok, done.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r510105898,510105898,src/init.cpp
jnewbery,2020-10-22 12:23:55,Thanks!,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r510117016,510117016,src/init.cpp
MarcoFalke,2020-12-01 07:53:36,"cc21167415aa01db862035cd07b6b9b35fb53f35\n\nThis is not a refactor. Shutting down before this line will wipe the estimates on disk",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533133324,533133324,src/init.cpp
MarcoFalke,2020-12-01 08:24:57,"cc21167415aa01db862035cd07b6b9b35fb53f35\n\nwould be nice if new code used `std::make_unique` instead of the deprecated wrapper\n\n(needs rebase for that)",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533149720,533149720,src/init.cpp
MarcoFalke,2020-12-01 08:25:15,same,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533149926,533149926,src/test/util/setup_common.cpp
MarcoFalke,2020-12-01 08:26:39,"cc21167415aa01db862035cd07b6b9b35fb53f35\n\n```\n  CXX      libbitcoin_server_a-init.o\ninit.cpp:238:14: error: no member named 'feeEstimator' in 'NodeContext'; did you mean 'fee_estimator'?\n    if (node.feeEstimator) {\n             ^~~~~~~~~~~~\n             fee_estimator\n./node/context.h:40:44: note: 'fee_estimator' declared here\n    std::unique_ptr<CBlockPolicyEstimator> fee_estima",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533150770,533150770,src/init.cpp
MarcoFalke,2020-12-01 08:27:54,"cc21167415aa01db862035cd07b6b9b35fb53f35\n\nthis is unused. Instead of shuffling code around, you may add a commit that removes it.\n\n```diff\ndiff --git a/src/interfaces/node.cpp b/src/interfaces/node.cpp\nindex 2c5f8627e6..a9ca4f9cf8 100644\n--- a/src/interfaces/node.cpp\n+++ b/src/interfaces/node.cpp\n@@ -205,15 +205,6 @@ public:\n         }\n     }\n     bool getNetworkActive() ov",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533151482,533151482,src/interfaces/node.cpp
darosior,2020-12-01 10:57:30,"Right, removed the ""refactor"" prefix from the commit.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533319866,533319866,src/init.cpp
darosior,2020-12-01 10:57:41,"Included, had to rebase anyway. Used it for CTxMemPool too as it was free diff-wise.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533319972,533319972,src/init.cpp
darosior,2020-12-01 10:57:52,Fixed..,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533320082,533320082,src/init.cpp
darosior,2020-12-01 10:57:58,"Right, i didn't notice.. Cherry-picked your patch and adapted it to the new interface path post-rebase.\n```patch\nAuthor: Antoine Poinsot <darosior@protonmail.com>\nDate:   Tue Dec 1 11:24:33 2020 +0100\n\n    interface: remove unused estimateSmartFee method from node\n    \n    Co-Authored-by: MarcoFalke <falke.marco@gmail.com>\n    Signed-off-by: Antoine Poinsot <darosior@protonmail.com",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r533320127,533320127,src/interfaces/node.cpp
MarcoFalke,2020-12-02 12:05:07,"can be written shorter with `self.restart_node(1, [""-bla""])`",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r534116032,534116032,test/functional/feature_fee_estimation.py
MarcoFalke,2020-12-02 12:09:25,can you explain what this line of code is doing and why it is needed?,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r534118318,534118318,src/policy/fees.cpp
MarcoFalke,2020-12-02 12:13:03,"Why is `__func__` needed here? It should already be possible to find the function name with `git grep -W ""Failed to read fee est""`.\n\nSee also #19809 which makes this redundant.\n\nAlso the log message could be suffixed with `"". Continue anyway.\n""` to clarify that this failure does not hinder program execution and is normally hit on first start.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r534120330,534120330,src/policy/fees.cpp
MarcoFalke,2020-12-02 15:45:03,same,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r534270639,534270639,src/policy/fees.cpp
darosior,2020-12-03 11:03:05,"Done, thanks",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535105514,535105514,test/functional/feature_fee_estimation.py
darosior,2020-12-03 11:03:08,"Well, there is a comment just above.. If the file isn't present (likely first start), don't report a failure to read fee estimates: it's expected. Kind of the echo of the `// Allowed to fail as this file IS missing on first startup.` [comment in the red part of the diff](https://github.com/bitcoin/bitcoin/pull/18766/files/8527183fde72d097700da18600eb7dc37c1ba206..01e39989f23b26a23cea26e5ec4d8dfc20",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535105587,535105587,src/policy/fees.cpp
darosior,2020-12-03 11:03:17,"> is normally hit on first start.\n\n~~It's not, on first start we would have returned just above.~~ EDIT: i'm wrong, it's not properly checked!\n\nRemoved the `__func__`.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535105750,535105750,src/policy/fees.cpp
darosior,2020-12-03 11:03:27,Removed,https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535105929,535105929,src/policy/fees.cpp
MarcoFalke,2020-12-03 11:17:48,"what I mean is that a path representation that is (not) empty (https://en.cppreference.com/w/cpp/filesystem/path/empty) doesn't imply anything about the presence of a file.\n\nYou can think of fs::path as a ""fancy string"". empty means the string is empty. non-empty means the string is non-empty, but it doesn't imply the file exists (or even any of the parent folders)",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535121803,535121803,src/policy/fees.cpp
darosior,2020-12-03 11:41:37,"Thanks.. That was clearly stupid..\nRemoved as i don't think i can use C++17's `fs::exists()` instead?",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535146288,535146288,src/policy/fees.cpp
MarcoFalke,2020-12-03 11:51:14,"> Also the log message could be suffixed with "". Continue anyway.\n"" to clarify that this failure does not hinder program execution and is normally hit on first start.\n\nHas this been addressed or responded to?",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535155705,535155705,src/policy/fees.cpp
darosior,2020-12-03 12:07:15,"No, this was missed. Done now.",https://github.com/bitcoin/bitcoin/pull/18766#discussion_r535170056,535170056,src/policy/fees.cpp
