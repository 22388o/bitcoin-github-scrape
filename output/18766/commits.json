[
  {
    "sha": "03bfeee957ab7e3b6aece82b9561774648094f54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2JmZWVlOTU3YWI3ZTNiNmFlY2U4MmI5NTYxNzc0NjQ4MDk0ZjU0",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-12-01T10:24:33Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-12-03T11:56:36Z"
      },
      "message": "interface: remove unused estimateSmartFee method from node\n\nCo-Authored-by: MarcoFalke <falke.marco@gmail.com>\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "bb97cd421cd110e68361ec6bfb69a15bd2ae12e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb97cd421cd110e68361ec6bfb69a15bd2ae12e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03bfeee957ab7e3b6aece82b9561774648094f54",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl/I0nQACgkQ4T/BRc0/\nQwRwuAv7BdY9g2ZfuFGJMIs02X5zGIjiIH1VeyZOik6B5vpFhm+EUF6/dfVTdqZ5\nhQbIZJvJdiZzNK7nukEUeQgKBwYqEprzRPvGQt0ZhJpRcjqXENmXSiziqsvDJUX8\nI+zYlDc9H2+zpNrvLzqlTgixvR5JijYr+Hki/0dZySFQl6aPYJt6AaLVoo2+UHAd\ntw8v5zjNrRB0P2mmDAAB/IzzvxfcjL8W+aEB8oTsjJmPx8xhacy2MwDvlVMBe3oR\n5GxLwJcKx07TTyrTcNFW60Y80kuV0gu9QSjNjGiNDxBU0WS93aynEg5DxcNHq03V\nlmBGngy7LBa1p4isWRcpjpaWTORn7tYNsB0kU6Q4kaLoNUjkgbdmxeTXGn/Ck+qD\n2YbW9T7qt4s2wmavJWFRUSmPC0dHaSG+RF7fNaRM/OOvi4WzIJBNHH7NbU0bu3GR\nG+Hucb9z/suxRmdSK+0u+ERywVfYSRba5kgVyK87B2Eb+PHVssGRwK7Dwt4AfqWq\noIHslyz8\n=JW0F\n-----END PGP SIGNATURE-----",
        "payload": "tree bb97cd421cd110e68361ec6bfb69a15bd2ae12e1\nparent 681ce59d0eac005203af1ff5bd64a1e6f2fa53e7\nauthor Antoine Poinsot <darosior@protonmail.com> 1606818273 +0100\ncommitter Antoine Poinsot <darosior@protonmail.com> 1606996596 +0100\n\ninterface: remove unused estimateSmartFee method from node\n\nCo-Authored-by: MarcoFalke <falke.marco@gmail.com>\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03bfeee957ab7e3b6aece82b9561774648094f54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03bfeee957ab7e3b6aece82b9561774648094f54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03bfeee957ab7e3b6aece82b9561774648094f54/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681ce59d0eac005203af1ff5bd64a1e6f2fa53e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681ce59d0eac005203af1ff5bd64a1e6f2fa53e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681ce59d0eac005203af1ff5bd64a1e6f2fa53e7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 0,
      "deletions": 12
    },
    "files": [
      {
        "sha": "36f76aeb4f57eb9e38354a83aabd435704a7774f",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03bfeee957ab7e3b6aece82b9561774648094f54/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03bfeee957ab7e3b6aece82b9561774648094f54/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=03bfeee957ab7e3b6aece82b9561774648094f54",
        "patch": "@@ -151,9 +151,6 @@ class Node\n     //! Get network active.\n     virtual bool getNetworkActive() = 0;\n \n-    //! Estimate smart fee.\n-    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) = 0;\n-\n     //! Get dust relay fee.\n     virtual CFeeRate getDustRelayFee() = 0;\n "
      },
      {
        "sha": "02c5cbc6b1d5bfae7545f549353e6aba29540ad7",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03bfeee957ab7e3b6aece82b9561774648094f54/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03bfeee957ab7e3b6aece82b9561774648094f54/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=03bfeee957ab7e3b6aece82b9561774648094f54",
        "patch": "@@ -221,15 +221,6 @@ class NodeImpl : public Node\n         }\n     }\n     bool getNetworkActive() override { return m_context->connman && m_context->connman->GetNetworkActive(); }\n-    CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n-    {\n-        FeeCalculation fee_calc;\n-        CFeeRate result = ::feeEstimator.estimateSmartFee(num_blocks, &fee_calc, conservative);\n-        if (returned_target) {\n-            *returned_target = fee_calc.returnedTarget;\n-        }\n-        return result;\n-    }\n     CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {"
      }
    ]
  },
  {
    "sha": "86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmZmMmNmMjAyYmZiOWQ5YjUwODAwYjhmZmUzZmVhZDNmNzdmNWZh",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-07-28T17:12:50Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-12-03T11:56:37Z"
      },
      "message": "Remove the remaining fee estimation globals\n\nThis moves the CBlockPolicyEstimator to the NodeContext, which get rids\nof two globals and allows us to conditionally create the\nCBlockPolicyEstimator (and to remove a circular dep).\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "112793cb81c576520e0a4e7573556f239d95b87c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112793cb81c576520e0a4e7573556f239d95b87c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl/I0nUACgkQ4T/BRc0/\nQwQgWwv/WEQmV3IjAb3fRhtB71E38gtmZTsynNS3fbSI6KVBbDm0L6xEz+E5QTkd\nHmw8WuU7PPtXXDPi2nGH+Nm+MuMNS/0Su/CzU29owl++ZoAyWBhiq5BJot+q6jB3\nfz6Yh4aXOO2WO5/SQz5qAwodxmb3UjfhUuL5q9Gmz+eQJAXC/Ppqdur3111BMU95\nGi1oi3k8YZQvY4qe6te2TvDKLcV9NvQdg3W0u/y/2fz1fL2Jr1uj2OOvK9xkv2vw\nYi6ssVH5ABeqwXQoxXCBodawY45ZkrjAihH02UgXqAMTLEfBrrFR8f++LXCyTTQy\nXpcs731VMjg5aXNy9/r8Q+N7rDre4nEOO7msMOsrhK75YyZ8TJejTmLtY04GI5LT\nQBmaA1+Fb7hES53R+VFKM+WAgB5hanWPeW3+yzN8nVIoGmh3ztKBD+ChH/1iY01L\nViN9esGT0U4MZ6HNfkZJtto80A626X0fdmlrF7DqMEg+6mMy3ryG3XggmdVOkuxa\nknldc3GA\n=SXRe\n-----END PGP SIGNATURE-----",
        "payload": "tree 112793cb81c576520e0a4e7573556f239d95b87c\nparent 03bfeee957ab7e3b6aece82b9561774648094f54\nauthor Antoine Poinsot <darosior@protonmail.com> 1595956370 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1606996597 +0100\n\nRemove the remaining fee estimation globals\n\nThis moves the CBlockPolicyEstimator to the NodeContext, which get rids\nof two globals and allows us to conditionally create the\nCBlockPolicyEstimator (and to remove a circular dep).\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03bfeee957ab7e3b6aece82b9561774648094f54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03bfeee957ab7e3b6aece82b9561774648094f54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03bfeee957ab7e3b6aece82b9561774648094f54"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 48,
      "deletions": 27
    },
    "files": [
      {
        "sha": "5c06b0459d12f2ee1dead60240ff1919aeb8dce7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -85,7 +85,6 @@\n #include <zmq/zmqrpc.h>\n #endif\n \n-static bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n@@ -236,18 +235,18 @@ void Shutdown(NodeContext& node)\n         DumpMempool(*node.mempool);\n     }\n \n-    if (fFeeEstimatesInitialized)\n-    {\n-        ::feeEstimator.FlushUnconfirmed();\n+    if (node.fee_estimator) {\n+        node.fee_estimator->FlushUnconfirmed();\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n-        if (!est_fileout.IsNull())\n-            ::feeEstimator.Write(est_fileout);\n-        else\n+        if (!est_fileout.IsNull()) {\n+            node.fee_estimator->Write(est_fileout);\n+        } else {\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n-        fFeeEstimatesInitialized = false;\n+        }\n     }\n \n+\n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n     if (node.chainman) {\n         LOCK(cs_main);\n@@ -304,6 +303,7 @@ void Shutdown(NodeContext& node)\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     node.mempool.reset();\n+    node.fee_estimator.reset();\n     node.chainman = nullptr;\n     node.scheduler.reset();\n \n@@ -1389,9 +1389,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     assert(!node.connman);\n     node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n \n+    assert(!node.fee_estimator);\n+    node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n+\n     assert(!node.mempool);\n     int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n-    node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, check_ratio);\n+    node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n     node.chainman = &g_chainman;\n@@ -1788,10 +1791,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n-    if (!est_filein.IsNull())\n-        ::feeEstimator.Read(est_filein);\n-    fFeeEstimatesInitialized = true;\n-\n+    if (node.fee_estimator && !est_filein.IsNull()) {\n+        node.fee_estimator->Read(est_filein);\n+    }\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);"
      },
      {
        "sha": "958221a9135297067ef3f8f64b6e91edcf54f927",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -8,6 +8,7 @@\n #include <interfaces/chain.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <policy/fees.h>\n #include <scheduler.h>\n #include <txmempool.h>\n "
      },
      {
        "sha": "9b611bf8f5278537741ea7c31560141233a71e1a",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -12,6 +12,7 @@\n \n class ArgsManager;\n class BanMan;\n+class CBlockPolicyEstimator;\n class CConnman;\n class CScheduler;\n class CTxMemPool;\n@@ -36,6 +37,7 @@ class WalletClient;\n struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     std::unique_ptr<CTxMemPool> mempool;\n+    std::unique_ptr<CBlockPolicyEstimator> fee_estimator;\n     std::unique_ptr<PeerManager> peerman;\n     ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<BanMan> banman;"
      },
      {
        "sha": "da3e759e384f43214c90228dd7ba6d62bfe96003",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -592,11 +592,13 @@ class ChainImpl : public Chain\n     }\n     CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc) override\n     {\n-        return ::feeEstimator.estimateSmartFee(num_blocks, calc, conservative);\n+        if (!m_node.fee_estimator) return {};\n+        return m_node.fee_estimator->estimateSmartFee(num_blocks, calc, conservative);\n     }\n     unsigned int estimateMaxBlocks() override\n     {\n-        return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+        if (!m_node.fee_estimator) return 0;\n+        return m_node.fee_estimator->HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     }\n     CFeeRate mempoolMinFee() override\n     {"
      },
      {
        "sha": "57327e6004ce41ce2ec9bd0e62b8b456a7283fba",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -17,6 +17,7 @@\n #include <node/coinstats.h>\n #include <node/context.h>\n #include <node/utxo_snapshot.h>\n+#include <policy/fees.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -81,6 +82,15 @@ ChainstateManager& EnsureChainman(const util::Ref& context)\n     return *node.chainman;\n }\n \n+CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context)\n+{\n+    NodeContext& node = EnsureNodeContext(context);\n+    if (!node.fee_estimator) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Fee estimation disabled\");\n+    }\n+    return *node.fee_estimator;\n+}\n+\n /* Calculate the difficulty for a given block index.\n  */\n double GetDifficulty(const CBlockIndex* blockindex)"
      },
      {
        "sha": "91766aacc9bfdfaba2e9b63562cfef692be4d202",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -15,6 +15,7 @@ extern RecursiveMutex cs_main;\n \n class CBlock;\n class CBlockIndex;\n+class CBlockPolicyEstimator;\n class CTxMemPool;\n class ChainstateManager;\n class UniValue;\n@@ -54,5 +55,6 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n NodeContext& EnsureNodeContext(const util::Ref& context);\n CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n+CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n #endif"
      },
      {
        "sha": "798973850f2e232541dc5006b661eda6bccbe3a6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -1059,7 +1059,10 @@ static RPCHelpMan estimatesmartfee()\n {\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+\n+    CBlockPolicyEstimator& fee_estimator = EnsureFeeEstimator(request.context);\n+\n+    unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     bool conservative = true;\n     if (!request.params[1].isNull()) {\n@@ -1073,7 +1076,7 @@ static RPCHelpMan estimatesmartfee()\n     UniValue result(UniValue::VOBJ);\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+    CFeeRate feeRate = fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n         result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n@@ -1144,7 +1147,10 @@ static RPCHelpMan estimaterawfee()\n {\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+\n+    CBlockPolicyEstimator& fee_estimator = EnsureFeeEstimator(request.context);\n+\n+    unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n@@ -1161,9 +1167,9 @@ static RPCHelpMan estimaterawfee()\n         EstimationResult buckets;\n \n         // Only output results for horizons which track the target\n-        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+        if (conf_target > fee_estimator.HighestTargetTracked(horizon)) continue;\n \n-        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n+        feeRate = fee_estimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);"
      },
      {
        "sha": "fffa29a1d32290b9a349c2d7edb45fdb07b262bb",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -16,6 +16,7 @@\n #include <net.h>\n #include <net_processing.h>\n #include <noui.h>\n+#include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n #include <rpc/register.h>\n@@ -141,7 +142,8 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n-    m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n+    m_node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n+    m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n     m_node.chainman = &::g_chainman;\n     m_node.chainman->InitializeChainstate(*m_node.mempool);"
      },
      {
        "sha": "4c2bf795346a189d07d38cbed1e37fafaa181847",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -22,7 +22,6 @@\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n #include <optional.h>\n-#include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -148,8 +147,6 @@ arith_uint256 nMinimumChainWork;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n \n-CBlockPolicyEstimator feeEstimator;\n-\n // Internal stuff\n namespace {\n     CBlockIndex* pindexBestInvalid = nullptr;"
      },
      {
        "sha": "6d8c6d431adf34e5fe5eeb1689645e6ba4b97044",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -42,7 +42,6 @@ class CChainParams;\n class CInv;\n class CConnman;\n class CScriptCheck;\n-class CBlockPolicyEstimator;\n class CTxMemPool;\n class ChainstateManager;\n class TxValidationState;\n@@ -110,7 +109,6 @@ enum class SynchronizationState {\n };\n \n extern RecursiveMutex cs_main;\n-extern CBlockPolicyEstimator feeEstimator;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;"
      },
      {
        "sha": "c4ad00e954faeb16282a3e81f319d6863c1daf36",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "patch": "@@ -20,7 +20,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n-    \"policy/fees -> txmempool -> validation -> policy/fees\"\n )\n \n EXIT_CODE=0"
      }
    ]
  },
  {
    "sha": "e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGVhNmFkOWMxNjk5N2JkYzdlMjJhMjBlY2ExNmUyMzQyOTBiN2Zm",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-09-06T17:37:13Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-12-03T11:56:37Z"
      },
      "message": "init: don't create a CBlockPolicyEstimator if we don't relay transactions\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "1f67020b213cec9f7888475d878d7dff9a457425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f67020b213cec9f7888475d878d7dff9a457425"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl/I0nUACgkQ4T/BRc0/\nQwTxUAv/fMTILuogCUS0GdO6ODE4xFT/i4cAcWxVo9v2Uurf+C0gLaa5Gchtg2F1\nKADa73q2KCqWNnIMW6076ykBap1GcWKpwFuuXbz5FpdD0/Es3OVO8zO/teCu7JFU\nZpngN0vn0qx9Kv/9AFSFpMqiXUdodAU6TUivwa7i5S486dhm4bHfBAScvoSIrue5\nlT2toI8Ujo+y/t1mbOj712rl11I5fRAacb3p4/uXSgIUegAdEAscs7yqC0cxxNL6\nYlrnM8//pUxS9DGtUC6vaeRBHGHJfAfIRXEk4Bn47xbcq5ZsDjbhv3xiCQkuYsx3\n+kPO5+5DdoltH17D/BkIqGRDNgBEyj+3Z94HqV+bLbfxP41lUlxf+3MteUW8RaI3\nRXZBoFE6IWslvigX9JvfCixWnBAa96WGW5QKA/MSjO8HBc9aU/Mr071kW0H4PfGQ\n5UYJu6D4dkzndZTSC0TpHOjBiAbMsMhaQJ+mBpp5Q+nlNSCYvU7pysflM8bCawW+\n2oS7oYbH\n=hnqw\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f67020b213cec9f7888475d878d7dff9a457425\nparent 86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa\nauthor Antoine Poinsot <darosior@protonmail.com> 1599413833 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1606996597 +0100\n\ninit: don't create a CBlockPolicyEstimator if we don't relay transactions\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86ff2cf202bfb9d9b50800b8ffe3fead3f77f5fa"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "de8f32cf6a882e1e568af1ee23b1dacaeebee85a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
        "patch": "@@ -1384,13 +1384,20 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // is not yet setup and may end up being set up twice if we\n     // need to reindex later.\n \n+    // see Step 2: parameter interactions for more information about these\n+    fListen = args.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fDiscover = args.GetBoolArg(\"-discover\", true);\n+    g_relay_txes = !args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n+\n     assert(!node.banman);\n     node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n \n     assert(!node.fee_estimator);\n-    node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n+    // Don't initialize fee estimation with old data if we don't relay transactions,\n+    // as they would never get updated.\n+    if (g_relay_txes) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n     int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n@@ -1476,11 +1483,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    // see Step 2: parameter interactions for more information about these\n-    fListen = args.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n-    fDiscover = args.GetBoolArg(\"-discover\", true);\n-    g_relay_txes = !args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n-\n     for (const std::string& strAddr : args.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n         if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())"
      },
      {
        "sha": "8f522aee6639ca7f6a936377886c7cfec35c4424",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
        "patch": "@@ -13,6 +13,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n     satoshi_round,\n )\n \n@@ -262,6 +263,11 @@ def run_test(self):\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n+        self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n+        self.restart_node(0, [\"-blocksonly\"])\n+        assert_raises_rpc_error(-32603, \"Fee estimation disabled\",\n+                                self.nodes[0].estimatesmartfee, 2)\n+\n \n if __name__ == '__main__':\n     EstimateFeeTest().main()"
      }
    ]
  },
  {
    "sha": "4e28753f60613ecd35cdef87bef5f99c302c3fbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTI4NzUzZjYwNjEzZWNkMzVjZGVmODdiZWY1Zjk5YzMwMmMzZmJk",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-09-10T12:27:36Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2020-12-03T11:56:37Z"
      },
      "message": "feestimator: encapsulate estimation file logic\n\nThis moves the fee_estimates file management to the CBlockPolicyEstimator\nFlush() method.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "6e020d200f0b0bee38790f7f17549e158063ae3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e020d200f0b0bee38790f7f17549e158063ae3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e28753f60613ecd35cdef87bef5f99c302c3fbd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl/I0nUACgkQ4T/BRc0/\nQwQGQgwAme2Hi5g4jbFYbN1ToEhiON1LmrnG2a2ni7NGkdO32raNoFOZgjooi8ul\nD73XEQBShXfo0LNtkQZKVMbkSNccEUIh7/Vi5fYPFZmkQ8Lgdhhok3mcuUEMDd15\nkwhhCmnps+wdJIxA3c6fZG1LkSfHdXtxp/WXTZfWJ10TOPs+5vZG0363vf4al39S\nwIH095YFfEgXtxSUE+whIfmGd24sYtZNoGYAVf1pScMo7XRSO8X7j3jEzU7jBKTe\nkjzaig0lE+eUBd5IjAo2n8jZTxrbNSjQX0QgReepxQrTyDImmU4hPRMJpdvxBa/Q\n9EMcFikdcbkfTILpUsG3WuVR8BWCsmXwHHc04tle7eU0ZTJHXgbyMKpv3AYiXSCO\n2YLE6oCBnE7oiGD8XC/wfuBbD9PkbcPbrQCkj/0t3R6/axq3qCMzbNXg+SJgROoE\nXHRSlxU8fx36Ql87O2MvDAlERFp+/wpLnrpcWbezFaL9EESf1Lh/nws1mP2r8nin\ncQ+KARiY\n=pqLr\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e020d200f0b0bee38790f7f17549e158063ae3b\nparent e8ea6ad9c16997bdc7e22a20eca16e234290b7ff\nauthor Antoine Poinsot <darosior@protonmail.com> 1599740856 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1606996597 +0100\n\nfeestimator: encapsulate estimation file logic\n\nThis moves the fee_estimates file management to the CBlockPolicyEstimator\nFlush() method.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e28753f60613ecd35cdef87bef5f99c302c3fbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e28753f60613ecd35cdef87bef5f99c302c3fbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e28753f60613ecd35cdef87bef5f99c302c3fbd/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ea6ad9c16997bdc7e22a20eca16e234290b7ff"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 24,
      "deletions": 19
    },
    "files": [
      {
        "sha": "6877f5db473de571aae82e0f4f088b6aceb8c7b4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4e28753f60613ecd35cdef87bef5f99c302c3fbd",
        "patch": "@@ -98,8 +98,6 @@ static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n #define MIN_CORE_FILEDESCRIPTORS 150\n #endif\n \n-static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n-\n static const char* DEFAULT_ASMAP_FILENAME=\"ip_asn.map\";\n \n /**\n@@ -235,17 +233,8 @@ void Shutdown(NodeContext& node)\n         DumpMempool(*node.mempool);\n     }\n \n-    if (node.fee_estimator) {\n-        node.fee_estimator->FlushUnconfirmed();\n-        fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-        CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n-        if (!est_fileout.IsNull()) {\n-            node.fee_estimator->Write(est_fileout);\n-        } else {\n-            LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n-        }\n-    }\n-\n+    // Drop transactions we were still watching, and record fee estimations.\n+    if (node.fee_estimator) node.fee_estimator->Flush();\n \n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n     if (node.chainman) {\n@@ -1790,12 +1779,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         return false;\n     }\n \n-    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n-    // Allowed to fail as this file IS missing on first startup.\n-    if (node.fee_estimator && !est_filein.IsNull()) {\n-        node.fee_estimator->Read(est_filein);\n-    }\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);"
      },
      {
        "sha": "f6e378866cb068b1e2c1c679ed194acd50ca1a80",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4e28753f60613ecd35cdef87bef5f99c302c3fbd",
        "patch": "@@ -10,6 +10,8 @@\n #include <txmempool.h>\n #include <util/system.h>\n \n+static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n+\n static constexpr double INF_FEERATE = 1e99;\n \n std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {\n@@ -489,6 +491,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n {\n     static_assert(MIN_BUCKET_FEERATE > 0, \"Min feerate must be nonzero\");\n     size_t bucketIndex = 0;\n+\n     for (double bucketBoundary = MIN_BUCKET_FEERATE; bucketBoundary <= MAX_BUCKET_FEERATE; bucketBoundary *= FEE_SPACING, bucketIndex++) {\n         buckets.push_back(bucketBoundary);\n         bucketMap[bucketBoundary] = bucketIndex;\n@@ -500,6 +503,13 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     feeStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE));\n     shortStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE));\n     longStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE));\n+\n+    // If the fee estimation file is present, read recorded estimations\n+    fs::path est_filepath = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    CAutoFile est_file(fsbridge::fopen(est_filepath, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (est_file.IsNull() || !Read(est_file)) {\n+        LogPrintf(\"Failed to read fee estimates from %s. Continue anyway.\\n\", est_filepath.string());\n+    }\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n@@ -856,6 +866,15 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n     return CFeeRate(llround(median));\n }\n \n+void CBlockPolicyEstimator::Flush() {\n+    FlushUnconfirmed();\n+\n+    fs::path est_filepath = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    CAutoFile est_file(fsbridge::fopen(est_filepath, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (est_file.IsNull() || !Write(est_file)) {\n+        LogPrintf(\"Failed to write fee estimates to %s\\n\", est_filepath.string());\n+    }\n+}\n \n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {"
      },
      {
        "sha": "dd9f530c995c67813d66859cb1e97cf0a0df7fab",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e28753f60613ecd35cdef87bef5f99c302c3fbd/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=4e28753f60613ecd35cdef87bef5f99c302c3fbd",
        "patch": "@@ -215,6 +215,9 @@ class CBlockPolicyEstimator\n     /** Calculation of highest target that estimates are tracked for */\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n+    /** Drop still unconfirmed transactions and record current estimations, if the fee estimation file is present. */\n+    void Flush();\n+\n private:\n     mutable RecursiveMutex m_cs_fee_estimator;\n "
      }
    ]
  }
]