[
  {
    "sha": "ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQzOTVmOTY4YTA1MGJlNWRkMGFlMjFiYTdkMTg5YjZiN2Y3M2Zk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-29T00:55:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-30T12:57:49Z"
      },
      "message": "Mark CTxMemPoolEntry members that should not be modified const",
      "tree": {
        "sha": "0d085986693b7394ff13ef7cf79ffd43cec5f17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d085986693b7394ff13ef7cf79ffd43cec5f17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "257c88e5b2757c744e192bf00cbdaeeb1dcd6a4b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
        "patch": "@@ -20,13 +20,10 @@\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n-                                 bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), entryHeight(_entryHeight),\n+                                 bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n+    : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxWeight = GetTransactionWeight(*tx);\n-    nUsageSize = RecursiveDynamicUsage(tx);\n-\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = GetTxSize();\n     nModFeesWithDescendants = nFee;"
      },
      {
        "sha": "20037839524a37a4000bbc856e3a4c9216a01b5b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
        "patch": "@@ -64,14 +64,14 @@ class CTxMemPool;\n class CTxMemPoolEntry\n {\n private:\n-    CTransactionRef tx;\n-    CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n-    size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n-    size_t nUsageSize;         //!< ... and total memory usage\n-    int64_t nTime;             //!< Local time when entering the mempool\n-    unsigned int entryHeight;  //!< Chain height when entering the mempool\n-    bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n-    int64_t sigOpCost;         //!< Total sigop cost\n+    const CTransactionRef tx;\n+    const CAmount nFee;             //!< Cached to avoid expensive parent-transaction lookups\n+    const size_t nTxWeight;         //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n+    const size_t nUsageSize;        //!< ... and total memory usage\n+    const int64_t nTime;            //!< Local time when entering the mempool\n+    const unsigned int entryHeight; //!< Chain height when entering the mempool\n+    const bool spendsCoinbase;      //!< keep track of transactions that spend a coinbase\n+    const int64_t sigOpCost;        //!< Total sigop cost\n     int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n     LockPoints lockPoints;     //!< Track the height and time at which tx was final\n "
      }
    ]
  },
  {
    "sha": "fe5c49766c0dc5beaf186d77b568361242b20d5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTVjNDk3NjZjMGRjNWJlYWYxODZkNzdiNTY4MzYxMjQyYjIwZDVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-29T01:10:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-30T12:57:49Z"
      },
      "message": "tx pool: Use the entry's hash instead of the one passed to addUnchecked",
      "tree": {
        "sha": "e2968d2191be71f7d2758e253db2a522007e654a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2968d2191be71f7d2758e253db2a522007e654a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe5c49766c0dc5beaf186d77b568361242b20d5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe5c49766c0dc5beaf186d77b568361242b20d5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe5c49766c0dc5beaf186d77b568361242b20d5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe5c49766c0dc5beaf186d77b568361242b20d5e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd395f968a050be5dd0ae21ba7d189b6b7f73fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4d04b6ef6db8b47db529c76ab9fe6783cd679414",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe5c49766c0dc5beaf186d77b568361242b20d5e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe5c49766c0dc5beaf186d77b568361242b20d5e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fe5c49766c0dc5beaf186d77b568361242b20d5e",
        "patch": "@@ -364,7 +364,7 @@ void CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Update transaction for any feeDelta created by PrioritiseTransaction\n     // TODO: refactor so that the fee delta is calculated before inserting\n     // into mapTx.\n-    std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(entry.GetTx().GetHash());\n     if (pos != mapDeltas.end()) {\n         const CAmount &delta = pos->second;\n         if (delta) {"
      }
    ]
  },
  {
    "sha": "fa587773e59721e187cadc998f4dc236ad3aef0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU4Nzc3M2U1OTcyMWUxODdjYWRjOTk4ZjRkYzIzNmFkM2FlZjBi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-30T13:11:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-30T13:09:32Z"
      },
      "message": "scripted-diff: Remove unused first argument to addUnchecked\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l addUnchecked | xargs sed --regexp-extended -i -e 's/addUnchecked\\([^)][^,]+,\\s*/addUnchecked(/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7bf61adc10e630e607c33347757a98d1b674f818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bf61adc10e630e607c33347757a98d1b674f818"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa587773e59721e187cadc998f4dc236ad3aef0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbXw4MAAoJEM4rdWl+aaVIv/cL/Ar9dHsRN34ZKQDTveQ66w2v\nhFZO+Cbe+4JXjmNtd/HLU1do1Pc+pC1r/3JWZojhiLlOqDlgv/OurScLwyVssGmV\nQjFznXcyfOz7JPvm+KqABcQRbg9pulvS1GeAFIpmjucujRV4dt6bO5nRLexVWQp7\nP9xRKzbGqUZlr/o/bLBnoF4iTUc/mnLbFDNLOotmyAxxUVD3RZwl+JEbnY9L+3Zj\nxidQFEUicnsqYATA+rQbm/F2wfIbTG0jjA10DTjenRirBzKD3yI6QV/v2V38lNv4\n7T/QJ4DjKYVz23YDzJkkObRju0vVAaYgidxAXeCFmh0tBMcjbEn6EF8rvdwOYYR5\n5Yj7BBQooG4RXz4JmJIMhyo45gZyJN9pgY+sWoum7dCRdqRV0BsTEgG1g0n26ndb\nbo5CSVJybWArsCM5dJlarcTbSW6jYDoAIZyB03TXi8dexs2m90ckrMTG65kYvlx2\nJT6nz3iI5IETP1YJYMl2kEFka4hQOP2S/Qas1pzEog==\n=tNVz\n-----END PGP SIGNATURE-----",
        "payload": "tree 7bf61adc10e630e607c33347757a98d1b674f818\nparent fe5c49766c0dc5beaf186d77b568361242b20d5e\nauthor MarcoFalke <falke.marco@gmail.com> 1532956273 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1532956172 -0400\n\nscripted-diff: Remove unused first argument to addUnchecked\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l addUnchecked | xargs sed --regexp-extended -i -e 's/addUnchecked\\([^)][^,]+,\\s*/addUnchecked(/g'\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa587773e59721e187cadc998f4dc236ad3aef0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa587773e59721e187cadc998f4dc236ad3aef0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa587773e59721e187cadc998f4dc236ad3aef0b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe5c49766c0dc5beaf186d77b568361242b20d5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe5c49766c0dc5beaf186d77b568361242b20d5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe5c49766c0dc5beaf186d77b568361242b20d5e"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 79,
      "deletions": 79
    },
    "files": [
      {
        "sha": "4c5489fdc0a9cf8ced94b17924ecb7924f197865",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -16,7 +16,7 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n     bool spendsCoinbase = false;\n     unsigned int sigOpCost = 4;\n     LockPoints lp;\n-    pool.addUnchecked(tx->GetHash(), CTxMemPoolEntry(\n+    pool.addUnchecked(CTxMemPoolEntry(\n                                          tx, nFee, nTime, nHeight,\n                                          spendsCoinbase, sigOpCost, lp));\n }"
      },
      {
        "sha": "e33c44905122604ecdfeca26eb47f4123a645f1a",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -63,7 +63,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     CBlock block(BuildBlockTestCase());\n \n     LOCK(pool.cs);\n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n+    pool.addUnchecked(entry.FromTx(block.vtx[2]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     LOCK(pool.cs);\n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n+    pool.addUnchecked(entry.FromTx(block.vtx[2]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -233,7 +233,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     LOCK(pool.cs);\n-    pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(block.vtx[1]));\n+    pool.addUnchecked(entry.FromTx(block.vtx[1]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "b9970b9e6bd9b2e2f35ba8b4d9c4fdac6af00c35",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 42,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -63,17 +63,17 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n \n     // Just the parent:\n-    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n+    testPool.addUnchecked(entry.FromTx(txParent));\n     poolSize = testPool.size();\n     testPool.removeRecursive(txParent);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 1);\n \n     // Parent, children, grandchildren:\n-    testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n+    testPool.addUnchecked(entry.FromTx(txParent));\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n+        testPool.addUnchecked(entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n     poolSize = testPool.size();\n@@ -95,8 +95,8 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n     for (int i = 0; i < 3; i++)\n     {\n-        testPool.addUnchecked(txChild[i].GetHash(), entry.FromTx(txChild[i]));\n-        testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n+        testPool.addUnchecked(entry.FromTx(txChild[i]));\n+        testPool.addUnchecked(entry.FromTx(txGrandChild[i]));\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n@@ -128,36 +128,36 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).FromTx(tx3));\n+    pool.addUnchecked(entry.Fee(0LL).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(15000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n     entry.nTime = 1;\n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx6.vout.resize(1);\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n-    pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n+    pool.addUnchecked(entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6U);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n@@ -198,7 +198,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx7.GetHash(), entry.FromTx(tx7), setAncestors);\n+    pool.addUnchecked(entry.FromTx(tx7), setAncestors);\n     BOOST_CHECK_EQUAL(pool.size(), 7U);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx8.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx8.vout[0].nValue = 10 * COIN;\n     setAncestors.insert(pool.mapTx.find(tx7.GetHash()));\n-    pool.addUnchecked(tx8.GetHash(), entry.Fee(0LL).Time(2).FromTx(tx8), setAncestors);\n+    pool.addUnchecked(entry.Fee(0LL).Time(2).FromTx(tx8), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx9.vout.resize(1);\n     tx9.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx9.vout[0].nValue = 1 * COIN;\n-    pool.addUnchecked(tx9.GetHash(), entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n+    pool.addUnchecked(entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9U);\n@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n-    pool.addUnchecked(tx10.GetHash(), entry.FromTx(tx10), setAncestors);\n+    pool.addUnchecked(entry.FromTx(tx10), setAncestors);\n \n     /**\n      *  tx8 and tx9 should both now be sorted higher\n@@ -301,36 +301,36 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n \n     /* highest fee */\n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(20000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx2));\n     uint64_t tx2Size = GetVirtualTransactionSize(tx2);\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx3.vout[0].nValue = 5 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(0LL).FromTx(tx3));\n+    pool.addUnchecked(entry.Fee(0LL).FromTx(tx3));\n \n     /* 2nd highest fee */\n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vout.resize(1);\n     tx4.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx4.vout[0].nValue = 6 * COIN;\n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(15000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(15000LL).FromTx(tx4));\n \n     /* equal fee rate to tx1, but newer */\n     CMutableTransaction tx5 = CMutableTransaction();\n     tx5.vout.resize(1);\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx5));\n     BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n@@ -359,7 +359,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx6.vout[0].nValue = 20 * COIN;\n     uint64_t tx6Size = GetVirtualTransactionSize(tx6);\n \n-    pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n+    pool.addUnchecked(entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6U);\n     // Ties are broken by hash\n     if (tx3.GetHash() < tx6.GetHash())\n@@ -381,7 +381,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     /* set the fee to just below tx2's feerate when including ancestor */\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n \n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(fee).FromTx(tx7));\n+    pool.addUnchecked(entry.Fee(fee).FromTx(tx7));\n     BOOST_CHECK_EQUAL(pool.size(), 7U);\n     sortedOrder.insert(sortedOrder.begin()+1, tx7.GetHash().ToString());\n     CheckSort<ancestor_score>(pool, sortedOrder);\n@@ -413,7 +413,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     // Check that we sort by min(feerate, ancestor_feerate):\n     // set the fee so that the ancestor feerate is above tx1/5,\n     // but the transaction's own feerate is lower\n-    pool.addUnchecked(tx8.GetHash(), entry.Fee(5000LL).FromTx(tx8));\n+    pool.addUnchecked(entry.Fee(5000LL).FromTx(tx8));\n     sortedOrder.insert(sortedOrder.end()-1, tx8.GetHash().ToString());\n     CheckSort<ancestor_score>(pool, sortedOrder);\n }\n@@ -431,15 +431,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx1.vout.resize(1);\n     tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n     tx1.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx1.GetHash(), entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n \n     CMutableTransaction tx2 = CMutableTransaction();\n     tx2.vin.resize(1);\n     tx2.vin[0].scriptSig = CScript() << OP_2;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n     tx2.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx2.GetHash(), entry.Fee(5000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n@@ -449,15 +449,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n \n-    pool.addUnchecked(tx2.GetHash(), entry.FromTx(tx2));\n+    pool.addUnchecked(entry.FromTx(tx2));\n     CMutableTransaction tx3 = CMutableTransaction();\n     tx3.vin.resize(1);\n     tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n     tx3.vin[0].scriptSig = CScript() << OP_2;\n     tx3.vout.resize(1);\n     tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n     tx3.vout[0].nValue = 10 * COIN;\n-    pool.addUnchecked(tx3.GetHash(), entry.Fee(20000LL).FromTx(tx3));\n+    pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n@@ -520,10 +520,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n     tx7.vout[1].nValue = 10 * COIN;\n \n-    pool.addUnchecked(tx4.GetHash(), entry.Fee(7000LL).FromTx(tx4));\n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(tx6.GetHash(), entry.Fee(1100LL).FromTx(tx6));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n+    pool.addUnchecked(entry.Fee(7000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(1100LL).FromTx(tx6));\n+    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n@@ -532,17 +532,17 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n     if (!pool.exists(tx5.GetHash()))\n-        pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n+        pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n \n-    pool.addUnchecked(tx5.GetHash(), entry.Fee(1000LL).FromTx(tx5));\n-    pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7));\n+    pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n+    pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n@@ -603,7 +603,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     // [tx1]\n     //\n     CTransactionRef tx1 = make_tx(/* output_values */ {10 * COIN});\n-    pool.addUnchecked(tx1->GetHash(), entry.Fee(10000LL).FromTx(tx1));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx1));\n \n     // Ancestors / descendants should be 1 / 1 (itself / itself)\n     pool.GetTransactionAncestry(tx1->GetHash(), ancestors, descendants);\n@@ -615,7 +615,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     // [tx1].0 <- [tx2]\n     //\n     CTransactionRef tx2 = make_tx(/* output_values */ {495 * CENT, 5 * COIN}, /* inputs */ {tx1});\n-    pool.addUnchecked(tx2->GetHash(), entry.Fee(10000LL).FromTx(tx2));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx2));\n \n     // Ancestors / descendants should be:\n     // transaction  ancestors   descendants\n@@ -634,7 +634,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     // [tx1].0 <- [tx2].0 <- [tx3]\n     //\n     CTransactionRef tx3 = make_tx(/* output_values */ {290 * CENT, 200 * CENT}, /* inputs */ {tx2});\n-    pool.addUnchecked(tx3->GetHash(), entry.Fee(10000LL).FromTx(tx3));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx3));\n \n     // Ancestors / descendants should be:\n     // transaction  ancestors   descendants\n@@ -659,7 +659,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     //              \\---1 <- [tx4]\n     //\n     CTransactionRef tx4 = make_tx(/* output_values */ {290 * CENT, 250 * CENT}, /* inputs */ {tx2}, /* input_indices */ {1});\n-    pool.addUnchecked(tx4->GetHash(), entry.Fee(10000LL).FromTx(tx4));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(tx4));\n \n     // Ancestors / descendants should be:\n     // transaction  ancestors   descendants\n@@ -696,13 +696,13 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n         CTransactionRef& tyi = *ty[i];\n         tyi = make_tx(/* output_values */ {v}, /* inputs */ i > 0 ? std::vector<CTransactionRef>{*ty[i - 1]} : std::vector<CTransactionRef>{});\n         v -= 50 * CENT;\n-        pool.addUnchecked(tyi->GetHash(), entry.Fee(10000LL).FromTx(tyi));\n+        pool.addUnchecked(entry.Fee(10000LL).FromTx(tyi));\n         pool.GetTransactionAncestry(tyi->GetHash(), ancestors, descendants);\n         BOOST_CHECK_EQUAL(ancestors, i+1);\n         BOOST_CHECK_EQUAL(descendants, i+1);\n     }\n     CTransactionRef ty6 = make_tx(/* output_values */ {5 * COIN}, /* inputs */ {tx3, ty5});\n-    pool.addUnchecked(ty6->GetHash(), entry.Fee(10000LL).FromTx(ty6));\n+    pool.addUnchecked(entry.Fee(10000LL).FromTx(ty6));\n \n     // Ancestors / descendants should be:\n     // transaction  ancestors           descendants"
      },
      {
        "sha": "5e0d08fa84ebdfd146615cc70950a342fd611ec7",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -115,19 +115,19 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     tx.vout[0].nValue = 5000000000LL - 1000;\n     // This tx has a low fee: 1000 satoshis\n     uint256 hashParentTx = tx.GetHash(); // save this txid for later use\n-    mempool.addUnchecked(hashParentTx, entry.Fee(1000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(1000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx has a medium fee: 10000 satoshis\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 5000000000LL - 10000;\n     uint256 hashMediumFeeTx = tx.GetHash();\n-    mempool.addUnchecked(hashMediumFeeTx, entry.Fee(10000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(10000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx has a high fee, but depends on the first transaction\n     tx.vin[0].prevout.hash = hashParentTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 50k satoshi fee\n     uint256 hashHighFeeTx = tx.GetHash();\n-    mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n     std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n@@ -138,7 +138,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     tx.vin[0].prevout.hash = hashHighFeeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n-    mempool.addUnchecked(hashFreeTx, entry.Fee(0).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(0).FromTx(tx));\n     size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n@@ -148,7 +148,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n-    mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -162,7 +162,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     mempool.removeRecursive(tx);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n-    mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n@@ -175,15 +175,15 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     tx.vout[0].nValue = 5000000000LL - 100000000;\n     tx.vout[1].nValue = 100000000; // 1BTC output\n     uint256 hashFreeTx2 = tx.GetHash();\n-    mempool.addUnchecked(hashFreeTx2, entry.Fee(0).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(0).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n     feeToUse = blockMinFeeRate.GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n-    mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n \n     // Verify that this tx isn't selected.\n@@ -196,7 +196,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     // as well.\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n-    mempool.addUnchecked(tx.GetHash(), entry.Fee(10000).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(10000).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n         // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n-        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n \n@@ -292,7 +292,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n         // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n+        mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n@@ -312,15 +312,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     mempool.clear();\n \n     // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     mempool.clear();\n \n@@ -329,15 +329,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     mempool.clear();\n \n@@ -348,7 +348,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     mempool.clear();\n@@ -359,10 +359,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     mempool.clear();\n \n@@ -401,12 +401,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n     mempool.clear();\n@@ -440,7 +440,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n@@ -450,7 +450,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n@@ -466,7 +466,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 3;\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n@@ -477,7 +477,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later"
      },
      {
        "sha": "df2b1c0fc39cced843da47eb2302ad0812c79ff3",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k; // make transaction unique\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                mpool.addUnchecked(entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                mpool.addUnchecked(entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 txHashes[j].push_back(hash);\n             }\n         }\n@@ -164,7 +164,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             for (int k = 0; k < 4; k++) { // add 4 fee txs\n                 tx.vin[0].prevout.n = 10000*blocknum+100*j+k;\n                 uint256 hash = tx.GetHash();\n-                mpool.addUnchecked(hash, entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                mpool.addUnchecked(entry.Fee(feeV[j]).Time(GetTime()).Height(blocknum).FromTx(tx));\n                 CTransactionRef ptx = mpool.get(hash);\n                 if (ptx)\n                     block.push_back(ptx);"
      },
      {
        "sha": "e6cc9abe08362406e8eb23405745d9d4738a1e2c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -352,7 +352,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-void CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n@@ -925,13 +925,13 @@ int CTxMemPool::Expire(int64_t time) {\n     return stage.size();\n }\n \n-void CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n     setEntries setAncestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n-    return addUnchecked(hash, entry, setAncestors, validFeeEstimate);\n+    return addUnchecked(entry, setAncestors, validFeeEstimate);\n }\n \n void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)"
      },
      {
        "sha": "13c993e1ba954cd0d2b10e9710db49e1663a28f4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -539,8 +539,8 @@ class CTxMemPool\n     // Note that addUnchecked is ONLY called from ATMP outside of tests\n     // and any other callers may break wallet's in-mempool tracking (due to\n     // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n-    void addUnchecked(const uint256& hash, const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void addUnchecked(const uint256& hash, const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);"
      },
      {
        "sha": "38469e1f9cae7f340d802b7038813beda51ee373",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa587773e59721e187cadc998f4dc236ad3aef0b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa587773e59721e187cadc998f4dc236ad3aef0b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa587773e59721e187cadc998f4dc236ad3aef0b",
        "patch": "@@ -974,7 +974,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n \n         // Store transaction in memory\n-        pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n+        pool.addUnchecked(entry, setAncestors, validForFeeEstimation);\n \n         // trim mempool and check if tx was trimmed\n         if (!bypass_limits) {"
      }
    ]
  }
]