[
  {
    "sha": "ab21ee29448421dbf79bc2a3b83122543906018a",
    "node_id": "C_kwDOABII59oAKGFiMjFlZTI5NDQ4NDIxZGJmNzliYzJhM2I4MzEyMjU0MzkwNjAxOGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T19:49:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Types are compact size uints",
      "tree": {
        "sha": "fcd660a0e513d44bde813cd1e7d26b4f21ecf4bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcd660a0e513d44bde813cd1e7d26b4f21ecf4bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab21ee29448421dbf79bc2a3b83122543906018a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab21ee29448421dbf79bc2a3b83122543906018a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab21ee29448421dbf79bc2a3b83122543906018a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab21ee29448421dbf79bc2a3b83122543906018a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad09c287cb7033a28f8d0a002c1ca4f194c12f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad09c287cb7033a28f8d0a002c1ca4f194c12f11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad09c287cb7033a28f8d0a002c1ca4f194c12f11"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 38,
      "deletions": 22
    },
    "files": [
      {
        "sha": "51e367b2ae8109f69082d21c94e721c5c2512a45",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab21ee29448421dbf79bc2a3b83122543906018a/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab21ee29448421dbf79bc2a3b83122543906018a/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ab21ee29448421dbf79bc2a3b83122543906018a",
        "patch": "@@ -69,52 +69,52 @@ struct PSBTInput\n     inline void Serialize(Stream& s) const {\n         // Write the utxo\n         if (non_witness_utxo) {\n-            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_NON_WITNESS_UTXO));\n             OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n             SerializeToVector(os, non_witness_utxo);\n         }\n         if (!witness_utxo.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_WITNESS_UTXO));\n             SerializeToVector(s, witness_utxo);\n         }\n \n         if (final_script_sig.empty() && final_script_witness.IsNull()) {\n             // Write any partial signatures\n             for (auto sig_pair : partial_sigs) {\n-                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_PARTIAL_SIG), MakeSpan(sig_pair.second.first));\n                 s << sig_pair.second.second;\n             }\n \n             // Write the sighash type\n             if (sighash_type > 0) {\n-                SerializeToVector(s, PSBT_IN_SIGHASH);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_SIGHASH));\n                 SerializeToVector(s, sighash_type);\n             }\n \n             // Write the redeem script\n             if (!redeem_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_REDEEMSCRIPT));\n                 s << redeem_script;\n             }\n \n             // Write the witness script\n             if (!witness_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_WITNESSSCRIPT));\n                 s << witness_script;\n             }\n \n             // Write any hd keypaths\n-            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n+            SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_IN_BIP32_DERIVATION));\n         }\n \n         // Write script sig\n         if (!final_script_sig.empty()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SCRIPTSIG));\n             s << final_script_sig;\n         }\n         // write script witness\n         if (!final_script_witness.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SCRIPTWITNESS));\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n@@ -147,8 +147,9 @@ struct PSBTInput\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {\n@@ -290,18 +291,18 @@ struct PSBTOutput\n     inline void Serialize(Stream& s) const {\n         // Write the redeem script\n         if (!redeem_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_REDEEMSCRIPT));\n             s << redeem_script;\n         }\n \n         // Write the witness script\n         if (!witness_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_WITNESSSCRIPT));\n             s << witness_script;\n         }\n \n         // Write any hd keypaths\n-        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n+        SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n         // Write unknown things\n         for (auto& entry : unknown) {\n@@ -332,8 +333,9 @@ struct PSBTOutput\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {\n@@ -420,7 +422,7 @@ struct PartiallySignedTransaction\n         s << PSBT_MAGIC_BYTES;\n \n         // unsigned tx flag\n-        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n+        SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_UNSIGNED_TX));\n \n         // Write serialized tx to a stream\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -472,8 +474,9 @@ struct PartiallySignedTransaction\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {"
      },
      {
        "sha": "199c3231e5deb143d0d136278e148ec839d6c268",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab21ee29448421dbf79bc2a3b83122543906018a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab21ee29448421dbf79bc2a3b83122543906018a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ab21ee29448421dbf79bc2a3b83122543906018a",
        "patch": "@@ -143,7 +143,7 @@ void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std\n \n // Serialize HD keypaths to a stream from a map\n template<typename Stream>\n-void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, uint8_t type)\n+void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n {\n     for (auto keypath_pair : hd_keypaths) {\n         if (!keypath_pair.first.IsValid()) {"
      },
      {
        "sha": "873361fe9e95a33dfb2d3ef0032f259a985b348a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab21ee29448421dbf79bc2a3b83122543906018a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab21ee29448421dbf79bc2a3b83122543906018a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ab21ee29448421dbf79bc2a3b83122543906018a",
        "patch": "@@ -527,6 +527,19 @@ struct CompactSizeFormatter\n     }\n };\n \n+class CompactSizeWriter\n+{\n+protected:\n+    uint64_t n;\n+public:\n+    explicit CompactSizeWriter(uint64_t n_in) : n(n_in) { }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s) const {\n+        WriteCompactSize<Stream>(s, n);\n+    }\n+};\n+\n template<size_t Limit>\n struct LimitedStringFormatter\n {"
      },
      {
        "sha": "205f6c806174589e40eb833f40b18f2303ad3fd8",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab21ee29448421dbf79bc2a3b83122543906018a/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab21ee29448421dbf79bc2a3b83122543906018a/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=ab21ee29448421dbf79bc2a3b83122543906018a",
        "patch": "@@ -43,7 +43,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         } catch (const std::ios_base::failure&) {\n         }\n         CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n-        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        SerializeHDKeypaths(serialized, hd_keypaths, CompactSizeWriter(fuzzed_data_provider.ConsumeIntegral<uint8_t>()));\n     }\n \n     {\n@@ -61,7 +61,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         }\n         CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n         try {\n-            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+            SerializeHDKeypaths(serialized, hd_keypaths, CompactSizeWriter(fuzzed_data_provider.ConsumeIntegral<uint8_t>()));\n         } catch (const std::ios_base::failure&) {\n         }\n         std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;"
      }
    ]
  },
  {
    "sha": "c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
    "node_id": "C_kwDOABII59oAKGM1MGM5YmQzMjQyZDhhZjkxODVjZmMxMDAyZWE5ZDdjM2Y2MzIxNmM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Implement PSBT versions",
      "tree": {
        "sha": "958d8408033cb08795b15d8bd4de137dfb14ef45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/958d8408033cb08795b15d8bd4de137dfb14ef45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab21ee29448421dbf79bc2a3b83122543906018a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab21ee29448421dbf79bc2a3b83122543906018a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab21ee29448421dbf79bc2a3b83122543906018a"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0b383b48516e396cf9f6db9fccd70f572ba6779f",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
        "patch": "@@ -20,6 +20,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n \n // Input types\n static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n@@ -45,6 +46,9 @@ static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n // to prevent reading a stream indefinitely and running out of memory.\n const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n \n+// PSBT version number\n+static constexpr uint32_t PSBT_HIGHEST_VERSION = 0;\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {\n@@ -396,6 +400,7 @@ struct PartiallySignedTransaction\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::optional<uint32_t> m_version;\n \n     bool IsNull() const;\n \n@@ -428,6 +433,12 @@ struct PartiallySignedTransaction\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n         SerializeToVector(os, *tx);\n \n+        // PSBT version\n+        if (m_version != std::nullopt && *m_version > 0) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n+            SerializeToVector(s, *m_version);\n+        }\n+\n         // Write the unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -500,6 +511,21 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_VERSION:\n+                {\n+                    if (m_version) {\n+                        throw std::ios_base::failure(\"Duplicate Key, version already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global version key is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    m_version = v;\n+                    if (*m_version > PSBT_HIGHEST_VERSION) {\n+                        throw std::ios_base::failure(\"Unsupported version number\");\n+                    }\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {"
      },
      {
        "sha": "ddec4e65efeae8e30246be19df1a10b3a3bbc041",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
        "patch": "@@ -19,6 +19,7 @@\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAgAAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAAbiWoY6pOQepFsEGhUPXaulX9rvye2NH+NrdlAHg+WgpAQAAAAD/////AkBLTAAAAAAAF6kUqWwXCcLM5BN2zoNqMNT5qMlIi7+HQEtMAAAAAAAXqRSVF/in2XNxAlN1OSxkyp0z+Wtg2YcAAAAAAAEBIBNssgAAAAAAF6kUamsvautR8hRlMRY6OKNTx03DK96HAQcXFgAUo8u1LWpHprjt/uENAwBpGZD0UH0BCGsCRzBEAiAONfH3DYiw67ZbylrsxCF/XXpVwyWBRgofyRbPslzvwgIgIKCsWw5sHSIPh1icNvcVLZLHWj6NA7Dk+4Os2pOnMbQBIQPGStfYHPtyhpV7zIWtn0Q4GXv5gK1zy/tnJ+cBXu4iiwABABYAFMwmJQEz+HDpBEEabxJ5PogPsqZRAAEAFgAUyCrGc3h3FYCmiIspbv2pSTKZ5jU\",\n+        \"cHNidP8B+wQBAAAAAQB1AgAAAAEmgXE3Ht/yhek3re6ks3t4AAwFZsuzrWRkFxPKQhcb9gAAAAAA/v///wLT3/UFAAAAABl2qRTQxZkDxbrChodg6Q/VIaRmWqdlIIisAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4ezLhMAAAEA/aUBAQAAAAABAomjxx6rTSDgNxu7pMxpj6KVyUY6+i45f4UzzLYvlWflAQAAABcWABS+GNFSqbASA52vPafeT1M0nuy5hf////+G+KpDpx3/FEiJOlMKcjfva0YIu7LdLQFx5jrsakiQtAEAAAAXFgAU/j6e8adF6XTZAsQ1WUOryzS9U1P/////AgDC6wsAAAAAGXapFIXP8Ql/2eAIuzSvcJxiGXs4l4pIiKxy/vhOLAAAABepFDOXJboh79Yqx1OpvNBn1semo50FhwJHMEQCICcSviLgJw85T1aDEdx8qaaJcLgCX907JAIp8H+KXzokAiABizjX3NMU5zTJJ2vW+0D2czJbxLqhRMgA0vLwLbJ2XAEhA9LhVnSUG61KmWNyy4fhhW02UmBtmFYv45xenn5BPyEFAkgwRQIhANErhS2F3Nlh0vX0q2YGVN9u7cx5TAwzzlzDCf+1/OWNAiBnM4qODhclwZf7GoivWfUeROQlWyAWfIaEAxwF0fJZKgEhAiO3K+7wll0Qvgd47+zWH8rG95pOoWk5M4BzRGT4TyqzAAAAAAAAAA==\",\n         \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAQEAAQEBagA=\",\n         \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAQAAAQABagA=\",\n         \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJ//////////8AAQEJAADK/gAAAAAAAA==\",\n@@ -34,7 +35,8 @@\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAQMEAQAAAAAAAA==\",\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n         \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n-        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\"\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\",\n+        \"cHNidP8B+wQAAAAAAQB1AgAAAAEmgXE3Ht/yhek3re6ks3t4AAwFZsuzrWRkFxPKQhcb9gAAAAAA/v///wLT3/UFAAAAABl2qRTQxZkDxbrChodg6Q/VIaRmWqdlIIisAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4ezLhMAAAEA/aUBAQAAAAABAomjxx6rTSDgNxu7pMxpj6KVyUY6+i45f4UzzLYvlWflAQAAABcWABS+GNFSqbASA52vPafeT1M0nuy5hf////+G+KpDpx3/FEiJOlMKcjfva0YIu7LdLQFx5jrsakiQtAEAAAAXFgAU/j6e8adF6XTZAsQ1WUOryzS9U1P/////AgDC6wsAAAAAGXapFIXP8Ql/2eAIuzSvcJxiGXs4l4pIiKxy/vhOLAAAABepFDOXJboh79Yqx1OpvNBn1semo50FhwJHMEQCICcSviLgJw85T1aDEdx8qaaJcLgCX907JAIp8H+KXzokAiABizjX3NMU5zTJJ2vW+0D2czJbxLqhRMgA0vLwLbJ2XAEhA9LhVnSUG61KmWNyy4fhhW02UmBtmFYv45xenn5BPyEFAkgwRQIhANErhS2F3Nlh0vX0q2YGVN9u7cx5TAwzzlzDCf+1/OWNAiBnM4qODhclwZf7GoivWfUeROQlWyAWfIaEAxwF0fJZKgEhAiO3K+7wll0Qvgd47+zWH8rG95pOoWk5M4BzRGT4TyqzAAAAAAAAAA==\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
    "node_id": "C_kwDOABII59oAKGM1ZDg3NTRjMTU3N2VmOTg1MmY1OGRlYjA5NGUyZjdjYWMwYjllYTQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T22:21:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Add GetVersion helper to PSBT",
      "tree": {
        "sha": "f58a7c0a9fe49a603cc8dae28686c05ddceed5df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f58a7c0a9fe49a603cc8dae28686c05ddceed5df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c50c9bd3242d8af9185cfc1002ea9d7c3f63216c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b673d5e41aaef1807166766f5f5a9fa7b0e2d1ee",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
        "patch": "@@ -397,3 +397,11 @@ bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data,\n     }\n     return true;\n }\n+\n+uint32_t PartiallySignedTransaction::GetVersion() const\n+{\n+    if (m_version != std::nullopt) {\n+        return *m_version;\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "26a177ce2e3d17735929b62957362c4351a9a08f",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
        "patch": "@@ -403,6 +403,7 @@ struct PartiallySignedTransaction\n     std::optional<uint32_t> m_version;\n \n     bool IsNull() const;\n+    uint32_t GetVersion() const;\n \n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n@@ -434,7 +435,7 @@ struct PartiallySignedTransaction\n         SerializeToVector(os, *tx);\n \n         // PSBT version\n-        if (m_version != std::nullopt && *m_version > 0) {\n+        if (GetVersion() > 0) {\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n             SerializeToVector(s, *m_version);\n         }"
      }
    ]
  },
  {
    "sha": "9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
    "node_id": "C_kwDOABII59oAKDlhOWVhZDk2MjJkNTQyZmJjOGNlZDJhZTQ3YjMxZWViOWEzNTg4M2Q",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-25T21:49:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Output psbt version in decodepsbt",
      "tree": {
        "sha": "393d2198d304da5e73600757e3f55abda1240bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/393d2198d304da5e73600757e3f55abda1240bb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d8754c1577ef9852f58deb094e2f7cac0b9ea4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "76d37e77dc83883d679a829601d44ea20ea93607",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
        "patch": "@@ -1023,6 +1023,7 @@ static RPCHelpMan decodepsbt()\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n+                        {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n                         {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n                         {\n                              {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1142,6 +1143,9 @@ static RPCHelpMan decodepsbt()\n     TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n     result.pushKV(\"tx\", tx_univ);\n \n+    // PSBT version\n+    result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n+\n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n     for (auto entry : psbtx.unknown) {"
      }
    ]
  },
  {
    "sha": "e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
    "node_id": "C_kwDOABII59oAKGU1ZmJlMjVhNGQzNzYzYTJkNzM1YzA4NWY3N2JiYjM5NTcxNGRkNGQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:45:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Implement PSBT proprietary type",
      "tree": {
        "sha": "3c60f7c7b8a998a02a3c01199b0df5d092cd4587",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c60f7c7b8a998a02a3c01199b0df5d092cd4587"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fbe25a4d3763a2d735c085f77bbb395714dd4d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a9ead9622d542fbc8ced2ae47b31eeb9a35883d"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59a946f911d2fe636d695831a29aad718593ef59",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5fbe25a4d3763a2d735c085f77bbb395714dd4d/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5fbe25a4d3763a2d735c085f77bbb395714dd4d/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
        "patch": "@@ -21,6 +21,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n+static constexpr uint8_t PSBT_GLOBAL_PROPRIETARY = 0xFC;\n \n // Input types\n static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n@@ -32,11 +33,13 @@ static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+static constexpr uint8_t PSBT_IN_PROPRIETARY = 0xFC;\n \n // Output types\n static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+static constexpr uint8_t PSBT_OUT_PROPRIETARY = 0xFC;\n \n // The separator is 0x00. Reading this in means that the unserializer can interpret it\n // as a 0 length key which indicates that this is the separator. The separator has no value.\n@@ -49,6 +52,22 @@ const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n // PSBT version number\n static constexpr uint32_t PSBT_HIGHEST_VERSION = 0;\n \n+/** A structure for PSBT proprietary types */\n+struct PSBTProprietary\n+{\n+    uint64_t subtype;\n+    std::vector<unsigned char> identifier;\n+    std::vector<unsigned char> key;\n+    std::vector<unsigned char> value;\n+\n+    bool operator<(const PSBTProprietary &b) const {\n+        return key < b.key;\n+    }\n+    bool operator==(const PSBTProprietary &b) const {\n+        return key == b.key;\n+    }\n+};\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {\n@@ -61,6 +80,7 @@ struct PSBTInput\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<CKeyID, SigPair> partial_sigs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::set<PSBTProprietary> m_proprietary;\n     int sighash_type = 0;\n \n     bool IsNull() const;\n@@ -122,6 +142,12 @@ struct PSBTInput\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -253,6 +279,20 @@ struct PSBTInput\n                     UnserializeFromVector(s, final_script_witness.stack);\n                     break;\n                 }\n+                case PSBT_IN_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default:\n                     if (unknown.count(key) > 0) {\n@@ -284,6 +324,7 @@ struct PSBTOutput\n     CScript witness_script;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::set<PSBTProprietary> m_proprietary;\n \n     bool IsNull() const;\n     void FillSignatureData(SignatureData& sigdata) const;\n@@ -308,6 +349,12 @@ struct PSBTOutput\n         // Write any hd keypaths\n         SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -368,6 +415,20 @@ struct PSBTOutput\n                     DeserializeHDKeypaths(s, key, hd_keypaths);\n                     break;\n                 }\n+                case PSBT_OUT_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {\n@@ -401,6 +462,7 @@ struct PartiallySignedTransaction\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     std::optional<uint32_t> m_version;\n+    std::set<PSBTProprietary> m_proprietary;\n \n     bool IsNull() const;\n     uint32_t GetVersion() const;\n@@ -440,6 +502,12 @@ struct PartiallySignedTransaction\n             SerializeToVector(s, *m_version);\n         }\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write the unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -527,6 +595,20 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {"
      }
    ]
  },
  {
    "sha": "cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
    "node_id": "C_kwDOABII59oAKGNmNGQwZWUxNGQzYWI5MWFlOWNkNzJmNjg2MTMxM2ExMTQxOWJkZGU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:58:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:50Z"
      },
      "message": "Output proprietary type info in decodepsbt",
      "tree": {
        "sha": "1779b8f9186db53946e2d3cd08cd8aab883a48b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1779b8f9186db53946e2d3cd08cd8aab883a48b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fbe25a4d3763a2d735c085f77bbb395714dd4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fbe25a4d3763a2d735c085f77bbb395714dd4d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9b2a9fb8281c5ee98bb36bc98c9da02ccbb1f028",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
        "patch": "@@ -1024,6 +1024,16 @@ static RPCHelpMan decodepsbt()\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n                         {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n+                        {RPCResult::Type::ARR, \"proprietary\", \"The global proprietary map\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                            }},\n+                        }},\n                         {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n                         {\n                              {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1086,6 +1096,16 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n+                                {RPCResult::Type::ARR, \"proprietary\", \"The input proprietary map\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                        {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                        {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                        {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                                    }},\n+                                }},\n                             }},\n                         }},\n                         {RPCResult::Type::ARR, \"outputs\", \"\",\n@@ -1117,6 +1137,16 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n+                                {RPCResult::Type::ARR, \"proprietary\", \"The output proprietary map\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                        {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                        {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                        {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                                    }},\n+                                }},\n                             }},\n                         }},\n                         {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The transaction fee paid if all UTXOs slots in the PSBT have been filled.\"},\n@@ -1146,6 +1176,18 @@ static RPCHelpMan decodepsbt()\n     // PSBT version\n     result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n \n+    // Proprietary\n+    UniValue proprietary(UniValue::VARR);\n+    for (const auto& entry : psbtx.m_proprietary) {\n+        UniValue this_prop(UniValue::VOBJ);\n+        this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+        this_prop.pushKV(\"subtype\", entry.subtype);\n+        this_prop.pushKV(\"key\", HexStr(entry.key));\n+        this_prop.pushKV(\"value\", HexStr(entry.value));\n+        proprietary.push_back(this_prop);\n+    }\n+    result.pushKV(\"proprietary\", proprietary);\n+\n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n     for (auto entry : psbtx.unknown) {\n@@ -1252,6 +1294,20 @@ static RPCHelpMan decodepsbt()\n             in.pushKV(\"final_scriptwitness\", txinwitness);\n         }\n \n+        // Proprietary\n+        if (!input.m_proprietary.empty()) {\n+            UniValue proprietary(UniValue::VARR);\n+            for (const auto& entry : input.m_proprietary) {\n+                UniValue this_prop(UniValue::VOBJ);\n+                this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+                this_prop.pushKV(\"subtype\", entry.subtype);\n+                this_prop.pushKV(\"key\", HexStr(entry.key));\n+                this_prop.pushKV(\"value\", HexStr(entry.value));\n+                proprietary.push_back(this_prop);\n+            }\n+            in.pushKV(\"proprietary\", proprietary);\n+        }\n+\n         // Unknown data\n         if (input.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);\n@@ -1296,6 +1352,20 @@ static RPCHelpMan decodepsbt()\n             out.pushKV(\"bip32_derivs\", keypaths);\n         }\n \n+        // Proprietary\n+        if (!output.m_proprietary.empty()) {\n+            UniValue proprietary(UniValue::VARR);\n+            for (const auto& entry : output.m_proprietary) {\n+                UniValue this_prop(UniValue::VOBJ);\n+                this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+                this_prop.pushKV(\"subtype\", entry.subtype);\n+                this_prop.pushKV(\"key\", HexStr(entry.key));\n+                this_prop.pushKV(\"value\", HexStr(entry.value));\n+                proprietary.push_back(this_prop);\n+            }\n+            out.pushKV(\"proprietary\", proprietary);\n+        }\n+\n         // Unknown data\n         if (output.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
    "node_id": "C_kwDOABII59oAKDdhNzMyZjRjYTA5YjVjZjM1Y2IyNjQ3NzFiZDFlYzMxODMxZTQ3ZWU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T23:28:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Test for proprietary field",
      "tree": {
        "sha": "d09db6987a07a8010df14b50b4161f7014ba4539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d09db6987a07a8010df14b50b4161f7014ba4539"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a732f4ca09b5cf35cb264771bd1ec31831e47ee/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf4d0ee14d3ab91ae9cd72f6861313a11419bdde"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c7284d40d7bebc04766db8272e6036525de485a",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a732f4ca09b5cf35cb264771bd1ec31831e47ee/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a732f4ca09b5cf35cb264771bd1ec31831e47ee/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
        "patch": "@@ -36,7 +36,8 @@\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n         \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n         \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\",\n-        \"cHNidP8B+wQAAAAAAQB1AgAAAAEmgXE3Ht/yhek3re6ks3t4AAwFZsuzrWRkFxPKQhcb9gAAAAAA/v///wLT3/UFAAAAABl2qRTQxZkDxbrChodg6Q/VIaRmWqdlIIisAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4ezLhMAAAEA/aUBAQAAAAABAomjxx6rTSDgNxu7pMxpj6KVyUY6+i45f4UzzLYvlWflAQAAABcWABS+GNFSqbASA52vPafeT1M0nuy5hf////+G+KpDpx3/FEiJOlMKcjfva0YIu7LdLQFx5jrsakiQtAEAAAAXFgAU/j6e8adF6XTZAsQ1WUOryzS9U1P/////AgDC6wsAAAAAGXapFIXP8Ql/2eAIuzSvcJxiGXs4l4pIiKxy/vhOLAAAABepFDOXJboh79Yqx1OpvNBn1semo50FhwJHMEQCICcSviLgJw85T1aDEdx8qaaJcLgCX907JAIp8H+KXzokAiABizjX3NMU5zTJJ2vW+0D2czJbxLqhRMgA0vLwLbJ2XAEhA9LhVnSUG61KmWNyy4fhhW02UmBtmFYv45xenn5BPyEFAkgwRQIhANErhS2F3Nlh0vX0q2YGVN9u7cx5TAwzzlzDCf+1/OWNAiBnM4qODhclwZf7GoivWfUeROQlWyAWfIaEAxwF0fJZKgEhAiO3K+7wll0Qvgd47+zWH8rG95pOoWk5M4BzRGT4TyqzAAAAAAAAAA==\"\n+        \"cHNidP8B+wQAAAAAAQB1AgAAAAEmgXE3Ht/yhek3re6ks3t4AAwFZsuzrWRkFxPKQhcb9gAAAAAA/v///wLT3/UFAAAAABl2qRTQxZkDxbrChodg6Q/VIaRmWqdlIIisAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4ezLhMAAAEA/aUBAQAAAAABAomjxx6rTSDgNxu7pMxpj6KVyUY6+i45f4UzzLYvlWflAQAAABcWABS+GNFSqbASA52vPafeT1M0nuy5hf////+G+KpDpx3/FEiJOlMKcjfva0YIu7LdLQFx5jrsakiQtAEAAAAXFgAU/j6e8adF6XTZAsQ1WUOryzS9U1P/////AgDC6wsAAAAAGXapFIXP8Ql/2eAIuzSvcJxiGXs4l4pIiKxy/vhOLAAAABepFDOXJboh79Yqx1OpvNBn1semo50FhwJHMEQCICcSviLgJw85T1aDEdx8qaaJcLgCX907JAIp8H+KXzokAiABizjX3NMU5zTJJ2vW+0D2czJbxLqhRMgA0vLwLbJ2XAEhA9LhVnSUG61KmWNyy4fhhW02UmBtmFYv45xenn5BPyEFAkgwRQIhANErhS2F3Nlh0vX0q2YGVN9u7cx5TAwzzlzDCf+1/OWNAiBnM4qODhclwZf7GoivWfUeROQlWyAWfIaEAxwF0fJZKgEhAiO3K+7wll0Qvgd47+zWH8rG95pOoWk5M4BzRGT4TyqzAAAAAAAAAA==\",\n+        \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAD/AAAAaoF/AKqqgABqgABAP2lAQEAAAAAAQKJo8ceq00g4Dcbu6TMaY+ilclGOvouOX+FM8y2L5Vn5QEAAAAXFgAUvhjRUqmwEgOdrz2n3k9TNJ7suYX/////hviqQ6cd/xRIiTpTCnI372tGCLuy3S0BceY67GpIkLQBAAAAFxYAFP4+nvGnRel02QLENVlDq8s0vVNT/////wIAwusLAAAAABl2qRSFz/EJf9ngCLs0r3CcYhl7OJeKSIiscv74TiwAAAAXqRQzlyW6Ie/WKsdTqbzQZ9bHpqOdBYcCRzBEAiAnEr4i4CcPOU9WgxHcfKmmiXC4Al/dOyQCKfB/il86JAIgAYs419zTFOc0ySdr1vtA9nMyW8S6oUTIANLy8C2ydlwBIQPS4VZ0lButSpljcsuH4YVtNlJgbZhWL+OcXp5+QT8hBQJIMEUCIQDRK4UthdzZYdL19KtmBlTfbu3MeUwMM85cwwn/tfzljQIgZzOKjg4XJcGX+xqIr1n1HkTkJVsgFnyGhAMcBdHyWSoBIQIjtyvu8JZdEL4HeO/s1h/KxveaTqFpOTOAc0Rk+E8qswAAAAAF/AKqqgEBqwAABfwCqqoCAawA\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "a26df88a8e7ebedb45c098a75ce1370f1185968d",
    "node_id": "C_kwDOABII59oAKGEyNmRmODhhOGU3ZWJlZGI0NWMwOThhNzVjZTEzNzBmMTE4NTk2OGQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:26:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "moveonly: Move (Un)Serialize(To/From)Vector, (De)SerializeHDKeypaths to psbt module\n\nSerializeToVector, UnserializeFromVector, DeserializeHDKeypaths, and SerializeHDKeypaths\nwere in sign.h where PSBT was originally implemented. Since all of the PSBT serialization\nhas moved to its own file, these functions should follow.",
      "tree": {
        "sha": "479b381e822c45d9c4a7c09366f73546019a2d98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/479b381e822c45d9c4a7c09366f73546019a2d98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a26df88a8e7ebedb45c098a75ce1370f1185968d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26df88a8e7ebedb45c098a75ce1370f1185968d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a26df88a8e7ebedb45c098a75ce1370f1185968d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26df88a8e7ebedb45c098a75ce1370f1185968d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a732f4ca09b5cf35cb264771bd1ec31831e47ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a732f4ca09b5cf35cb264771bd1ec31831e47ee"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 80,
      "deletions": 78
    },
    "files": [
      {
        "sha": "78017a9e4a79743bd31d31c80c874f084f537c93",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "patch": "@@ -10,8 +10,11 @@\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n+#include <span.h>\n+#include <streams.h>\n \n #include <optional>\n \n@@ -68,6 +71,80 @@ struct PSBTProprietary\n     }\n };\n \n+// Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n+// The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n+template<typename Stream, typename... X>\n+void SerializeToVector(Stream& s, const X&... args)\n+{\n+    WriteCompactSize(s, GetSerializeSizeMany(s.GetVersion(), args...));\n+    SerializeMany(s, args...);\n+}\n+\n+// Takes a stream and multiple arguments and unserializes them first as a vector then each object individually in the order provided in the arguments\n+template<typename Stream, typename... X>\n+void UnserializeFromVector(Stream& s, X&... args)\n+{\n+    size_t expected_size = ReadCompactSize(s);\n+    size_t remaining_before = s.size();\n+    UnserializeMany(s, args...);\n+    size_t remaining_after = s.size();\n+    if (remaining_after + expected_size != remaining_before) {\n+        throw std::ios_base::failure(\"Size of value was not the stated size\");\n+    }\n+}\n+\n+// Deserialize HD keypaths into a map\n+template<typename Stream>\n+void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n+{\n+    // Make sure that the key is the size of pubkey + 1\n+    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n+        throw std::ios_base::failure(\"Size of key was not the expected size for the type BIP32 keypath\");\n+    }\n+    // Read in the pubkey from key\n+    CPubKey pubkey(key.begin() + 1, key.end());\n+    if (!pubkey.IsFullyValid()) {\n+       throw std::ios_base::failure(\"Invalid pubkey\");\n+    }\n+    if (hd_keypaths.count(pubkey) > 0) {\n+        throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n+    }\n+\n+    // Read in key path\n+    uint64_t value_len = ReadCompactSize(s);\n+    if (value_len % 4 || value_len == 0) {\n+        throw std::ios_base::failure(\"Invalid length for HD key path\");\n+    }\n+\n+    KeyOriginInfo keypath;\n+    s >> keypath.fingerprint;\n+    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n+        uint32_t index;\n+        s >> index;\n+        keypath.path.push_back(index);\n+    }\n+\n+    // Add to map\n+    hd_keypaths.emplace(pubkey, std::move(keypath));\n+}\n+\n+// Serialize HD keypaths to a stream from a map\n+template<typename Stream>\n+void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n+{\n+    for (auto keypath_pair : hd_keypaths) {\n+        if (!keypath_pair.first.IsValid()) {\n+            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n+        }\n+        SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n+        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n+        s << keypath_pair.second.fingerprint;\n+        for (const auto& path : keypath_pair.second.path) {\n+            s << path;\n+        }\n+    }\n+}\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {"
      },
      {
        "sha": "132b77777f17ec34bac168c4c87c44b6934c891c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "patch": "@@ -9,6 +9,7 @@\n #include <key.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <script/keyorigin.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>"
      },
      {
        "sha": "f88832290a585b52f53a2972c470083a827abed3",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "patch": "@@ -12,8 +12,6 @@\n #include <script/interpreter.h>\n #include <script/keyorigin.h>\n #include <script/standard.h>\n-#include <span.h>\n-#include <streams.h>\n \n class CKey;\n class CKeyID;\n@@ -84,80 +82,6 @@ struct SignatureData {\n     void MergeSignatureData(SignatureData sigdata);\n };\n \n-// Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n-// The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n-template<typename Stream, typename... X>\n-void SerializeToVector(Stream& s, const X&... args)\n-{\n-    WriteCompactSize(s, GetSerializeSizeMany(s.GetVersion(), args...));\n-    SerializeMany(s, args...);\n-}\n-\n-// Takes a stream and multiple arguments and unserializes them first as a vector then each object individually in the order provided in the arguments\n-template<typename Stream, typename... X>\n-void UnserializeFromVector(Stream& s, X&... args)\n-{\n-    size_t expected_size = ReadCompactSize(s);\n-    size_t remaining_before = s.size();\n-    UnserializeMany(s, args...);\n-    size_t remaining_after = s.size();\n-    if (remaining_after + expected_size != remaining_before) {\n-        throw std::ios_base::failure(\"Size of value was not the stated size\");\n-    }\n-}\n-\n-// Deserialize HD keypaths into a map\n-template<typename Stream>\n-void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n-{\n-    // Make sure that the key is the size of pubkey + 1\n-    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n-        throw std::ios_base::failure(\"Size of key was not the expected size for the type BIP32 keypath\");\n-    }\n-    // Read in the pubkey from key\n-    CPubKey pubkey(key.begin() + 1, key.end());\n-    if (!pubkey.IsFullyValid()) {\n-       throw std::ios_base::failure(\"Invalid pubkey\");\n-    }\n-    if (hd_keypaths.count(pubkey) > 0) {\n-        throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n-    }\n-\n-    // Read in key path\n-    uint64_t value_len = ReadCompactSize(s);\n-    if (value_len % 4 || value_len == 0) {\n-        throw std::ios_base::failure(\"Invalid length for HD key path\");\n-    }\n-\n-    KeyOriginInfo keypath;\n-    s >> keypath.fingerprint;\n-    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n-        uint32_t index;\n-        s >> index;\n-        keypath.path.push_back(index);\n-    }\n-\n-    // Add to map\n-    hd_keypaths.emplace(pubkey, std::move(keypath));\n-}\n-\n-// Serialize HD keypaths to a stream from a map\n-template<typename Stream>\n-void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n-{\n-    for (auto keypath_pair : hd_keypaths) {\n-        if (!keypath_pair.first.IsValid()) {\n-            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n-        }\n-        SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n-        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n-        s << keypath_pair.second.fingerprint;\n-        for (const auto& path : keypath_pair.second.path) {\n-            s << path;\n-        }\n-    }\n-}\n-\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n "
      },
      {
        "sha": "b8b3e03dd36da1e5a0f731be3596ad0d6e6ba8c0",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "patch": "@@ -8,12 +8,11 @@\n \n #include <key.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n \n-struct KeyOriginInfo;\n-\n /** An interface to be implemented by keystores that support signing. */\n class SigningProvider\n {"
      },
      {
        "sha": "1a42179724fc1aa65759453e5847f681fdca7de1",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26df88a8e7ebedb45c098a75ce1370f1185968d/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "patch": "@@ -5,6 +5,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <key.h>\n+#include <psbt.h>\n #include <pubkey.h>\n #include <script/keyorigin.h>\n #include <script/sign.h>"
      }
    ]
  },
  {
    "sha": "5e9eaf073503a3573343e574e9910d81f34b2f75",
    "node_id": "C_kwDOABII59oAKDVlOWVhZjA3MzUwM2EzNTczMzQzZTU3NGU5OTEwZDgxZjM0YjJmNzU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:28:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Store version bytes and be able to serialize them in CExtPubKey\n\nCExtPubKey does not store the version bytes for the extended public key.\nWe store these so that a CExtPubKey can be serialized and deserialized with\nthe same version bytes.",
      "tree": {
        "sha": "f16b49a6a345779037185e5d85a5ff690b601dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f16b49a6a345779037185e5d85a5ff690b601dcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e9eaf073503a3573343e574e9910d81f34b2f75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9eaf073503a3573343e574e9910d81f34b2f75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e9eaf073503a3573343e574e9910d81f34b2f75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9eaf073503a3573343e574e9910d81f34b2f75/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26df88a8e7ebedb45c098a75ce1370f1185968d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a26df88a8e7ebedb45c098a75ce1370f1185968d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b7dfb6d83fca5b4bd26babc812e67c9611d5df55",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9eaf073503a3573343e574e9910d81f34b2f75/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9eaf073503a3573343e574e9910d81f34b2f75/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=5e9eaf073503a3573343e574e9910d81f34b2f75",
        "patch": "@@ -352,6 +352,18 @@ void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     if ((nDepth == 0 && (nChild != 0 || ReadLE32(vchFingerprint) != 0)) || !pubkey.IsFullyValid()) pubkey = CPubKey();\n }\n \n+void CExtPubKey::EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const\n+{\n+    memcpy(code, version, 4);\n+    Encode(&code[4]);\n+}\n+\n+void CExtPubKey::DecodeWithVersion(const unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE])\n+{\n+    memcpy(version, code, 4);\n+    Decode(&code[4]);\n+}\n+\n bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = pubkey.GetID();"
      },
      {
        "sha": "49f9bcf093656c7a0e4765d78bf6499a3214688d",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e9eaf073503a3573343e574e9910d81f34b2f75/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e9eaf073503a3573343e574e9910d81f34b2f75/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=5e9eaf073503a3573343e574e9910d81f34b2f75",
        "patch": "@@ -17,6 +17,7 @@\n #include <vector>\n \n const unsigned int BIP32_EXTKEY_SIZE = 74;\n+const unsigned int BIP32_EXTKEY_WITH_VERSION_SIZE = 78;\n \n /** A reference to a CKey: the Hash160 of its serialized public key */\n class CKeyID : public uint160\n@@ -285,6 +286,7 @@ class XOnlyPubKey\n };\n \n struct CExtPubKey {\n+    unsigned char version[4];\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n@@ -307,6 +309,8 @@ struct CExtPubKey {\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n+    void EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const;\n+    void DecodeWithVersion(const unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n "
      }
    ]
  },
  {
    "sha": "f8d49a2a224c8d5b48694c69888de5107c86a8e0",
    "node_id": "C_kwDOABII59oAKGY4ZDQ5YTJhMjI0YzhkNWI0ODY5NGM2OTg4OGRlNTEwN2M4NmE4ZTA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:32:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Separate individual HD Keypath serialization into separate functions",
      "tree": {
        "sha": "1b202ff15fe17724d3efd585c5a683f844cde136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b202ff15fe17724d3efd585c5a683f844cde136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8d49a2a224c8d5b48694c69888de5107c86a8e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d49a2a224c8d5b48694c69888de5107c86a8e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8d49a2a224c8d5b48694c69888de5107c86a8e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d49a2a224c8d5b48694c69888de5107c86a8e0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e9eaf073503a3573343e574e9910d81f34b2f75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e9eaf073503a3573343e574e9910d81f34b2f75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e9eaf073503a3573343e574e9910d81f34b2f75"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 31,
      "deletions": 17
    },
    "files": [
      {
        "sha": "307429e66a621574d3e8d81a50f564e6eec9e1b1",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 31,
        "deletions": 17,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d49a2a224c8d5b48694c69888de5107c86a8e0/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d49a2a224c8d5b48694c69888de5107c86a8e0/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=f8d49a2a224c8d5b48694c69888de5107c86a8e0",
        "patch": "@@ -93,6 +93,24 @@ void UnserializeFromVector(Stream& s, X&... args)\n     }\n }\n \n+// Deserialize an individual HD keypath to a stream\n+template<typename Stream>\n+void DeserializeHDKeypath(Stream& s, KeyOriginInfo& hd_keypath)\n+{\n+    // Read in key path\n+    uint64_t value_len = ReadCompactSize(s);\n+    if (value_len % 4 || value_len == 0) {\n+        throw std::ios_base::failure(\"Invalid length for HD key path\");\n+    }\n+\n+    s >> hd_keypath.fingerprint;\n+    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n+        uint32_t index;\n+        s >> index;\n+        hd_keypath.path.push_back(index);\n+    }\n+}\n+\n // Deserialize HD keypaths into a map\n template<typename Stream>\n void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n@@ -110,24 +128,24 @@ void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std\n         throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n     }\n \n-    // Read in key path\n-    uint64_t value_len = ReadCompactSize(s);\n-    if (value_len % 4 || value_len == 0) {\n-        throw std::ios_base::failure(\"Invalid length for HD key path\");\n-    }\n-\n     KeyOriginInfo keypath;\n-    s >> keypath.fingerprint;\n-    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n-        uint32_t index;\n-        s >> index;\n-        keypath.path.push_back(index);\n-    }\n+    DeserializeHDKeypath(s, keypath);\n \n     // Add to map\n     hd_keypaths.emplace(pubkey, std::move(keypath));\n }\n \n+// Serialize an individual HD keypath to a stream\n+template<typename Stream>\n+void SerializeHDKeypath(Stream& s, KeyOriginInfo hd_keypath)\n+{\n+    WriteCompactSize(s, (hd_keypath.path.size() + 1) * sizeof(uint32_t));\n+    s << hd_keypath.fingerprint;\n+    for (const auto& path : hd_keypath.path) {\n+        s << path;\n+    }\n+}\n+\n // Serialize HD keypaths to a stream from a map\n template<typename Stream>\n void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n@@ -137,11 +155,7 @@ void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_k\n             throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n         }\n         SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n-        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n-        s << keypath_pair.second.fingerprint;\n-        for (const auto& path : keypath_pair.second.path) {\n-            s << path;\n-        }\n+        SerializeHDKeypath(s, keypath_pair.second);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "3c317b89269845e9ede05304fda0eeb12ffd9a37",
    "node_id": "C_kwDOABII59oAKDNjMzE3Yjg5MjY5ODQ1ZTllZGUwNTMwNGZkYTBlZWIxMmZmZDlhMzc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:58:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Implement operator< for KeyOriginInfo and CExtPubKey",
      "tree": {
        "sha": "e04cfbdc527f87e3fa770928a447ead618676428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e04cfbdc527f87e3fa770928a447ead618676428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c317b89269845e9ede05304fda0eeb12ffd9a37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c317b89269845e9ede05304fda0eeb12ffd9a37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c317b89269845e9ede05304fda0eeb12ffd9a37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c317b89269845e9ede05304fda0eeb12ffd9a37/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8d49a2a224c8d5b48694c69888de5107c86a8e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d49a2a224c8d5b48694c69888de5107c86a8e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8d49a2a224c8d5b48694c69888de5107c86a8e0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e4960d2ab5578864fd4e7a1a0a8229066169e5d",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c317b89269845e9ede05304fda0eeb12ffd9a37/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c317b89269845e9ede05304fda0eeb12ffd9a37/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=3c317b89269845e9ede05304fda0eeb12ffd9a37",
        "patch": "@@ -130,6 +130,11 @@ class CPubKey\n         return a.vch[0] < b.vch[0] ||\n                (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n     }\n+    friend bool operator>(const CPubKey& a, const CPubKey& b)\n+    {\n+        return a.vch[0] > b.vch[0] ||\n+               (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) > 0);\n+    }\n \n     //! Implement serialization, as if this was a byte vector.\n     template <typename Stream>\n@@ -307,6 +312,16 @@ struct CExtPubKey {\n         return !(a == b);\n     }\n \n+    friend bool operator<(const CExtPubKey &a, const CExtPubKey &b)\n+    {\n+        if (a.pubkey < b.pubkey) {\n+            return true;\n+        } else if (a.pubkey > b.pubkey) {\n+            return false;\n+        }\n+        return a.chaincode < b.chaincode;\n+    }\n+\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     void EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const;"
      },
      {
        "sha": "c779872be2c4dbeef66d89d35502c1e676bbc28a",
        "filename": "src/script/keyorigin.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c317b89269845e9ede05304fda0eeb12ffd9a37/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c317b89269845e9ede05304fda0eeb12ffd9a37/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=3c317b89269845e9ede05304fda0eeb12ffd9a37",
        "patch": "@@ -18,6 +18,25 @@ struct KeyOriginInfo\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n \n+    friend bool operator<(const KeyOriginInfo& a, const KeyOriginInfo& b)\n+    {\n+        // Compare the fingerprints lexicographically\n+        int fpr_cmp = memcmp(a.fingerprint, b.fingerprint, 4);\n+        if (fpr_cmp < 0) {\n+            return true;\n+        } else if (fpr_cmp > 0) {\n+            return false;\n+        }\n+        // Compare the sizes of the paths, shorter is \"less than\"\n+        if (a.path.size() < b.path.size()) {\n+            return true;\n+        } else if (a.path.size() > b.path.size()) {\n+            return false;\n+        }\n+        // Paths same length, compare them lexicographically\n+        return a.path < b.path;\n+    }\n+\n     SERIALIZE_METHODS(KeyOriginInfo, obj) { READWRITE(obj.fingerprint, obj.path); }\n \n     void clear()"
      }
    ]
  },
  {
    "sha": "3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
    "node_id": "C_kwDOABII59oAKDNmZTcwY2Y5ZWZlYzRiMmVkYzllMGViMGE2OTlkZWEyYjFmY2VjZjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:58:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Implement serializations for PSBT_GLOBAL_XPUB",
      "tree": {
        "sha": "531055b210141d9202e67ba3f1eaa15f86725bc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/531055b210141d9202e67ba3f1eaa15f86725bc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c317b89269845e9ede05304fda0eeb12ffd9a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c317b89269845e9ede05304fda0eeb12ffd9a37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c317b89269845e9ede05304fda0eeb12ffd9a37"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ec744c8d6c7d8cac8716e4f8b721ad94df4a7bfb",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
        "patch": "@@ -23,6 +23,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+static constexpr uint8_t PSBT_GLOBAL_XPUB = 0x01;\n static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n static constexpr uint8_t PSBT_GLOBAL_PROPRIETARY = 0xFC;\n \n@@ -549,6 +550,9 @@ struct PSBTOutput\n struct PartiallySignedTransaction\n {\n     std::optional<CMutableTransaction> tx;\n+    // We use a vector of CExtPubKey in the event that there happens to be the same KeyOriginInfos for different CExtPubKeys\n+    // Note that this map swaps the key and values from the serialization\n+    std::map<KeyOriginInfo, std::set<CExtPubKey>> m_xpubs;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n@@ -587,6 +591,18 @@ struct PartiallySignedTransaction\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n         SerializeToVector(os, *tx);\n \n+        // Write xpubs\n+        for (const auto& xpub_pair : m_xpubs) {\n+            for (const auto& xpub : xpub_pair.second) {\n+                unsigned char ser_xpub[BIP32_EXTKEY_WITH_VERSION_SIZE];\n+                xpub.EncodeWithVersion(ser_xpub);\n+                // Note that the serialization swaps the key and value\n+                // The xpub is the key (for uniqueness) while the path is the value\n+                SerializeToVector(s, PSBT_GLOBAL_XPUB, ser_xpub);\n+                SerializeHDKeypath(s, xpub_pair.first);\n+            }\n+        }\n+\n         // PSBT version\n         if (GetVersion() > 0) {\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n@@ -631,6 +647,9 @@ struct PartiallySignedTransaction\n         // Used for duplicate key detection\n         std::set<std::vector<unsigned char>> key_lookup;\n \n+        // Track the global xpubs we have already seen. Just for sanity checking\n+        std::set<CExtPubKey> global_xpubs;\n+\n         // Read global data\n         bool found_sep = false;\n         while(!s.empty()) {\n@@ -671,6 +690,36 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_XPUB:\n+                {\n+                    if (key.size() != BIP32_EXTKEY_WITH_VERSION_SIZE + 1) {\n+                        throw std::ios_base::failure(\"Size of key was not the expected size for the type global xpub\");\n+                    }\n+                    // Read in the xpub from key\n+                    CExtPubKey xpub;\n+                    xpub.DecodeWithVersion(&key.data()[1]);\n+                    if (!xpub.pubkey.IsFullyValid()) {\n+                       throw std::ios_base::failure(\"Invalid pubkey\");\n+                    }\n+                    if (global_xpubs.count(xpub) > 0) {\n+                       throw std::ios_base::failure(\"Duplicate key, global xpub already provided\");\n+                    }\n+                    global_xpubs.insert(xpub);\n+                    // Read in the keypath from stream\n+                    KeyOriginInfo keypath;\n+                    DeserializeHDKeypath(s, keypath);\n+\n+                    // Note that we store these swapped to make searches faster.\n+                    // Serialization uses xpub -> keypath to enqure key uniqueness\n+                    if (m_xpubs.count(keypath) == 0) {\n+                        // Make a new set to put the xpub in\n+                        m_xpubs[keypath] = {xpub};\n+                    } else {\n+                        // Insert xpub into existing set\n+                        m_xpubs[keypath].insert(xpub);\n+                    }\n+                    break;\n+                }\n                 case PSBT_GLOBAL_VERSION:\n                 {\n                     if (m_version) {"
      }
    ]
  },
  {
    "sha": "d31965eefc1eca8a287b7a33c570a084c8fbfa53",
    "node_id": "C_kwDOABII59oAKGQzMTk2NWVlZmMxZWNhOGEyODdiN2EzM2M1NzBhMDg0YzhmYmZhNTM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T17:20:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Add global_xpubs to decodepsbt",
      "tree": {
        "sha": "73fdce5cfc1ef8bf69b50071eb8eadcf11db4fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73fdce5cfc1ef8bf69b50071eb8eadcf11db4fc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d31965eefc1eca8a287b7a33c570a084c8fbfa53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31965eefc1eca8a287b7a33c570a084c8fbfa53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d31965eefc1eca8a287b7a33c570a084c8fbfa53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31965eefc1eca8a287b7a33c570a084c8fbfa53/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fe70cf9efec4b2edc9e0eb0a699dea2b1fcecf5"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "577b6a6b68f09206cd84576b84b442d67756991b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d31965eefc1eca8a287b7a33c570a084c8fbfa53/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d31965eefc1eca8a287b7a33c570a084c8fbfa53/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d31965eefc1eca8a287b7a33c570a084c8fbfa53",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <base58.h>\n #include <chain.h>\n #include <coins.h>\n #include <consensus/amount.h>\n@@ -1023,6 +1024,15 @@ static RPCHelpMan decodepsbt()\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n+                        {RPCResult::Type::ARR, \"global_xpubs\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"xpub\", \"The extended public key this path corresponds to\"},\n+                                {RPCResult::Type::STR_HEX, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                {RPCResult::Type::STR, \"path\", \"The path\"},\n+                            }},\n+                        }},\n                         {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n                         {RPCResult::Type::ARR, \"proprietary\", \"The global proprietary map\",\n                         {\n@@ -1173,6 +1183,23 @@ static RPCHelpMan decodepsbt()\n     TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n     result.pushKV(\"tx\", tx_univ);\n \n+    // Add the global xpubs\n+    UniValue global_xpubs(UniValue::VARR);\n+    for (std::pair<KeyOriginInfo, std::set<CExtPubKey>> xpub_pair : psbtx.m_xpubs) {\n+        for (auto& xpub : xpub_pair.second) {\n+            std::vector<unsigned char> ser_xpub;\n+            ser_xpub.assign(BIP32_EXTKEY_WITH_VERSION_SIZE, 0);\n+            xpub.EncodeWithVersion(ser_xpub.data());\n+\n+            UniValue keypath(UniValue::VOBJ);\n+            keypath.pushKV(\"xpub\", EncodeBase58Check(ser_xpub));\n+            keypath.pushKV(\"master_fingerprint\", HexStr(Span<unsigned char>(xpub_pair.first.fingerprint, xpub_pair.first.fingerprint + 4)));\n+            keypath.pushKV(\"path\", WriteHDKeypath(xpub_pair.first.path));\n+            global_xpubs.push_back(keypath);\n+        }\n+    }\n+    result.pushKV(\"global_xpubs\", global_xpubs);\n+\n     // PSBT version\n     result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n "
      }
    ]
  },
  {
    "sha": "14411789f7fb59cbd85965fec82b8c3eb96972f6",
    "node_id": "C_kwDOABII59oAKDE0NDExNzg5ZjdmYjU5Y2JkODU5NjVmZWM4MmI4YzNlYjk2OTcyZjY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T17:43:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Add global xpub test vectors from BIP",
      "tree": {
        "sha": "6fd630e433ce4ebf16dd4247d4d24046b56beadd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fd630e433ce4ebf16dd4247d4d24046b56beadd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14411789f7fb59cbd85965fec82b8c3eb96972f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14411789f7fb59cbd85965fec82b8c3eb96972f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14411789f7fb59cbd85965fec82b8c3eb96972f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14411789f7fb59cbd85965fec82b8c3eb96972f6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d31965eefc1eca8a287b7a33c570a084c8fbfa53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d31965eefc1eca8a287b7a33c570a084c8fbfa53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d31965eefc1eca8a287b7a33c570a084c8fbfa53"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5c3a3491b865742c00ba264425219efa2a97e1ed",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14411789f7fb59cbd85965fec82b8c3eb96972f6/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14411789f7fb59cbd85965fec82b8c3eb96972f6/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=14411789f7fb59cbd85965fec82b8c3eb96972f6",
        "patch": "@@ -37,7 +37,10 @@\n         \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n         \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\",\n         \"cHNidP8B+wQAAAAAAQB1AgAAAAEmgXE3Ht/yhek3re6ks3t4AAwFZsuzrWRkFxPKQhcb9gAAAAAA/v///wLT3/UFAAAAABl2qRTQxZkDxbrChodg6Q/VIaRmWqdlIIisAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4ezLhMAAAEA/aUBAQAAAAABAomjxx6rTSDgNxu7pMxpj6KVyUY6+i45f4UzzLYvlWflAQAAABcWABS+GNFSqbASA52vPafeT1M0nuy5hf////+G+KpDpx3/FEiJOlMKcjfva0YIu7LdLQFx5jrsakiQtAEAAAAXFgAU/j6e8adF6XTZAsQ1WUOryzS9U1P/////AgDC6wsAAAAAGXapFIXP8Ql/2eAIuzSvcJxiGXs4l4pIiKxy/vhOLAAAABepFDOXJboh79Yqx1OpvNBn1semo50FhwJHMEQCICcSviLgJw85T1aDEdx8qaaJcLgCX907JAIp8H+KXzokAiABizjX3NMU5zTJJ2vW+0D2czJbxLqhRMgA0vLwLbJ2XAEhA9LhVnSUG61KmWNyy4fhhW02UmBtmFYv45xenn5BPyEFAkgwRQIhANErhS2F3Nlh0vX0q2YGVN9u7cx5TAwzzlzDCf+1/OWNAiBnM4qODhclwZf7GoivWfUeROQlWyAWfIaEAxwF0fJZKgEhAiO3K+7wll0Qvgd47+zWH8rG95pOoWk5M4BzRGT4TyqzAAAAAAAAAA==\",\n-        \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAD/AAAAaoF/AKqqgABqgABAP2lAQEAAAAAAQKJo8ceq00g4Dcbu6TMaY+ilclGOvouOX+FM8y2L5Vn5QEAAAAXFgAUvhjRUqmwEgOdrz2n3k9TNJ7suYX/////hviqQ6cd/xRIiTpTCnI372tGCLuy3S0BceY67GpIkLQBAAAAFxYAFP4+nvGnRel02QLENVlDq8s0vVNT/////wIAwusLAAAAABl2qRSFz/EJf9ngCLs0r3CcYhl7OJeKSIiscv74TiwAAAAXqRQzlyW6Ie/WKsdTqbzQZ9bHpqOdBYcCRzBEAiAnEr4i4CcPOU9WgxHcfKmmiXC4Al/dOyQCKfB/il86JAIgAYs419zTFOc0ySdr1vtA9nMyW8S6oUTIANLy8C2ydlwBIQPS4VZ0lButSpljcsuH4YVtNlJgbZhWL+OcXp5+QT8hBQJIMEUCIQDRK4UthdzZYdL19KtmBlTfbu3MeUwMM85cwwn/tfzljQIgZzOKjg4XJcGX+xqIr1n1HkTkJVsgFnyGhAMcBdHyWSoBIQIjtyvu8JZdEL4HeO/s1h/KxveaTqFpOTOAc0Rk+E8qswAAAAAF/AKqqgEBqwAABfwCqqoCAawA\"\n+        \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAD/AAAAaoF/AKqqgABqgABAP2lAQEAAAAAAQKJo8ceq00g4Dcbu6TMaY+ilclGOvouOX+FM8y2L5Vn5QEAAAAXFgAUvhjRUqmwEgOdrz2n3k9TNJ7suYX/////hviqQ6cd/xRIiTpTCnI372tGCLuy3S0BceY67GpIkLQBAAAAFxYAFP4+nvGnRel02QLENVlDq8s0vVNT/////wIAwusLAAAAABl2qRSFz/EJf9ngCLs0r3CcYhl7OJeKSIiscv74TiwAAAAXqRQzlyW6Ie/WKsdTqbzQZ9bHpqOdBYcCRzBEAiAnEr4i4CcPOU9WgxHcfKmmiXC4Al/dOyQCKfB/il86JAIgAYs419zTFOc0ySdr1vtA9nMyW8S6oUTIANLy8C2ydlwBIQPS4VZ0lButSpljcsuH4YVtNlJgbZhWL+OcXp5+QT8hBQJIMEUCIQDRK4UthdzZYdL19KtmBlTfbu3MeUwMM85cwwn/tfzljQIgZzOKjg4XJcGX+xqIr1n1HkTkJVsgFnyGhAMcBdHyWSoBIQIjtyvu8JZdEL4HeO/s1h/KxveaTqFpOTOAc0Rk+E8qswAAAAAF/AKqqgEBqwAABfwCqqoCAawA\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\",\n+        \"cHNidP8BAFICAAAAAZ38ZijCbFiZ/hvT3DOGZb/VXXraEPYiCXPfLTht7BJ2AQAAAAD/////AfA9zR0AAAAAFgAUezoAv9wU0neVwrdJAdCdpu8TNXkAAAAATwEENYfPAto/0AiAAAAAlwSLGtBEWx7IJ1UXcnyHtOTrwYogP/oPlMAVZr046QADUbdDiH7h1A3DKmBDck8tZFmztaTXPa7I+64EcvO8Q+IM2QxqT64AAIAAAACATwEENYfPAto/0AiAAAABuQRSQnE5zXjCz/JES+NTzVhgXj5RMoXlKLQH+uP2FzUD0wpel8itvFV9rCrZp+OcFyLrrGnmaLbyZnzB1nHIPKsM2QxqT64AAIABAACAAAEBKwBlzR0AAAAAIgAgLFSGEmxJeAeagU4TcV1l82RZ5NbMre0mbQUIZFuvpjIBBUdSIQKdoSzbWyNWkrkVNq/v5ckcOrlHPY5DtTODarRWKZyIcSEDNys0I07Xz5wf6l0F1EFVeSe+lUKxYusC4ass6AIkwAtSriIGAp2hLNtbI1aSuRU2r+/lyRw6uUc9jkO1M4NqtFYpnIhxENkMak+uAACAAAAAgAAAAAAiBgM3KzQjTtfPnB/qXQXUQVV5J76VQrFi6wLhqyzoAiTACxDZDGpPrgAAgAEAAIAAAAAAACICA57/H1R6HV+S36K6evaslxpL0DukpzSwMVaiVritOh75EO3kXMUAAACAAAAAgAEAAIAA\",\n+        \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAATwEENYfPAAAAAAAAAAAAG3t93NmzqdwlifBjtWBRnFrHYkoMdmriSG1s74PiZ8ID3+4wNJ18fPeMDsRRe9iTAopsKogDQfxLmL6Kgj07xScE2QxqTwAAAAAA\"\n     ],\n     \"creator\" : [\n         {\n@@ -139,4 +142,4 @@\n             \"result\" : \"0200000000010258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7500000000da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752aeffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00000000\"\n         }\n     ]\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "b4cf309acef78f6122dc0fff0a94e933c3705f89",
    "node_id": "C_kwDOABII59oAKGI0Y2YzMDlhY2VmNzhmNjEyMmRjMGZmZjBhOTRlOTMzYzM3MDVmODk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-31T21:24:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Merge global xpubs in joinpsbts and combinepsbts",
      "tree": {
        "sha": "3e9c3fa921cf48e706ae45ac510a7ab24d674fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e9c3fa921cf48e706ae45ac510a7ab24d674fb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4cf309acef78f6122dc0fff0a94e933c3705f89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cf309acef78f6122dc0fff0a94e933c3705f89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4cf309acef78f6122dc0fff0a94e933c3705f89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cf309acef78f6122dc0fff0a94e933c3705f89/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14411789f7fb59cbd85965fec82b8c3eb96972f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14411789f7fb59cbd85965fec82b8c3eb96972f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14411789f7fb59cbd85965fec82b8c3eb96972f6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd5e42b1f00b4159c1ebf34de2036b07a32815e0",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4cf309acef78f6122dc0fff0a94e933c3705f89/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4cf309acef78f6122dc0fff0a94e933c3705f89/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=b4cf309acef78f6122dc0fff0a94e933c3705f89",
        "patch": "@@ -32,6 +32,13 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n     for (unsigned int i = 0; i < outputs.size(); ++i) {\n         outputs[i].Merge(psbt.outputs[i]);\n     }\n+    for (auto& xpub_pair : psbt.m_xpubs) {\n+        if (m_xpubs.count(xpub_pair.first) == 0) {\n+            m_xpubs[xpub_pair.first] = xpub_pair.second;\n+        } else {\n+            m_xpubs[xpub_pair.first].insert(xpub_pair.second.begin(), xpub_pair.second.end());\n+        }\n+    }\n     unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n \n     return true;"
      },
      {
        "sha": "b8d99e23be48dbd2649f2219db500a9d82c38c06",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4cf309acef78f6122dc0fff0a94e933c3705f89/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4cf309acef78f6122dc0fff0a94e933c3705f89/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b4cf309acef78f6122dc0fff0a94e933c3705f89",
        "patch": "@@ -1838,6 +1838,13 @@ static RPCHelpMan joinpsbts()\n         for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n             merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n         }\n+        for (auto& xpub_pair : psbt.m_xpubs) {\n+            if (merged_psbt.m_xpubs.count(xpub_pair.first) == 0) {\n+                merged_psbt.m_xpubs[xpub_pair.first] = xpub_pair.second;\n+            } else {\n+                merged_psbt.m_xpubs[xpub_pair.first].insert(xpub_pair.second.begin(), xpub_pair.second.end());\n+            }\n+        }\n         merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n     }\n "
      }
    ]
  },
  {
    "sha": "eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
    "node_id": "C_kwDOABII59oAKGViMzllZDUyOTRkMjk5MDI1YWMwYWM5ZTYzN2VkNWY1N2VjZDUyZjA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T20:20:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-16T17:26:51Z"
      },
      "message": "Define psbtv2 field numbers",
      "tree": {
        "sha": "9146868a6b4bcaa7fb8d7ed226b81f7a8c166d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9146868a6b4bcaa7fb8d7ed226b81f7a8c166d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4cf309acef78f6122dc0fff0a94e933c3705f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4cf309acef78f6122dc0fff0a94e933c3705f89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4cf309acef78f6122dc0fff0a94e933c3705f89"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "df0f4d7e59ee7dd74b6db8e91c735effa187b165",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
        "patch": "@@ -24,6 +24,11 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n static constexpr uint8_t PSBT_GLOBAL_XPUB = 0x01;\n+static constexpr uint8_t PSBT_GLOBAL_TX_VERSION = 0x02;\n+static constexpr uint8_t PSBT_GLOBAL_FALLBACK_LOCKTIME = 0x03;\n+static constexpr uint8_t PSBT_GLOBAL_INPUT_COUNT = 0x04;\n+static constexpr uint8_t PSBT_GLOBAL_OUTPUT_COUNT = 0x05;\n+static constexpr uint8_t PSBT_GLOBAL_TX_MODIFIABLE = 0x06;\n static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n static constexpr uint8_t PSBT_GLOBAL_PROPRIETARY = 0xFC;\n \n@@ -37,12 +42,19 @@ static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+static constexpr uint8_t PSBT_IN_PREVIOUS_TXID = 0x0e;\n+static constexpr uint8_t PSBT_IN_OUTPUT_INDEX = 0x0f;\n+static constexpr uint8_t PSBT_IN_SEQUENCE = 0x10;\n+static constexpr uint8_t PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x11;\n+static constexpr uint8_t PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x12;\n static constexpr uint8_t PSBT_IN_PROPRIETARY = 0xFC;\n \n // Output types\n static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+static constexpr uint8_t PSBT_OUT_AMOUNT = 0x03;\n+static constexpr uint8_t PSBT_OUT_SCRIPT = 0x04;\n static constexpr uint8_t PSBT_OUT_PROPRIETARY = 0xFC;\n \n // The separator is 0x00. Reading this in means that the unserializer can interpret it"
      }
    ]
  },
  {
    "sha": "b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
    "node_id": "C_kwDOABII59oAKGIwZDMxNmZjYWNhYzk0MjY3ZjY5YTVjYWYyYTNmZDJiZDkzNTRiYjc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T21:56:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:14:16Z"
      },
      "message": "Change PSBT unknown fields test to use higher numbers\n\nPreviously these tests were using 0x0f as the field number. Changed to\nuse 0xf0 instead as it is unlikely we will hit that anytime soon.",
      "tree": {
        "sha": "7eacc29d808ef7ed826fe5283a5b8bf092af2da3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7eacc29d808ef7ed826fe5283a5b8bf092af2da3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb39ed5294d299025ac0ac9e637ed5f57ecd52f0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3112d5d5d7ec0379f7777552d545d85bdcad3524",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
        "patch": "@@ -124,10 +124,10 @@\n         },\n         {\n             \"combine\" : [\n-                \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAKDwECAwQFBgcICQ8BAgMEBQYHCAkKCwwNDg8ACg8BAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PAAoPAQIDBAUGBwgJDwECAwQFBgcICQoLDA0ODwA=\",\n-                \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAKDwECAwQFBgcIEA8BAgMEBQYHCAkKCwwNDg8ACg8BAgMEBQYHCBAPAQIDBAUGBwgJCgsMDQ4PAAoPAQIDBAUGBwgQDwECAwQFBgcICQoLDA0ODwA=\"\n+                \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAK8AECAwQFBgcICQ8BAgMEBQYHCAkKCwwNDg8ACvABAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PAArwAQIDBAUGBwgJDwECAwQFBgcICQoLDA0ODwA=\",\n+                \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAK8AECAwQFBgcIEA8BAgMEBQYHCAkKCwwNDg8ACvABAgMEBQYHCBAPAQIDBAUGBwgJCgsMDQ4PAArwAQIDBAUGBwgQDwECAwQFBgcICQoLDA0ODwA=\"\n             ],\n-            \"result\" : \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAKDwECAwQFBgcICQ8BAgMEBQYHCAkKCwwNDg8KDwECAwQFBgcIEA8BAgMEBQYHCAkKCwwNDg8ACg8BAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PCg8BAgMEBQYHCBAPAQIDBAUGBwgJCgsMDQ4PAAoPAQIDBAUGBwgJDwECAwQFBgcICQoLDA0ODwoPAQIDBAUGBwgQDwECAwQFBgcICQoLDA0ODwA=\"\n+            \"result\" : \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAK8AECAwQFBgcICQ8BAgMEBQYHCAkKCwwNDg8K8AECAwQFBgcIEA8BAgMEBQYHCAkKCwwNDg8ACvABAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PCvABAgMEBQYHCBAPAQIDBAUGBwgJCgsMDQ4PAArwAQIDBAUGBwgJDwECAwQFBgcICQoLDA0ODwrwAQIDBAUGBwgQDwECAwQFBgcICQoLDA0ODwA=\"\n         }\n     ],\n     \"finalizer\" : ["
      },
      {
        "sha": "c818abe4ac0d24c63b20097d2d7baf7a38bc8e84",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
        "patch": "@@ -421,7 +421,7 @@ def run_test(self):\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through\n-        unknown_psbt = \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAACg8BAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PAAA=\"\n+        unknown_psbt = \"cHNidP8BAD8CAAAAAf//////////////////////////////////////////AAAAAAD/////AQAAAAAAAAAAA2oBAAAAAAAACvABAgMEBQYHCAkPAQIDBAUGBwgJCgsMDQ4PAAA=\"\n         unknown_out = self.nodes[0].walletprocesspsbt(unknown_psbt)['psbt']\n         assert_equal(unknown_psbt, unknown_out)\n "
      }
    ]
  },
  {
    "sha": "95b9acff719825acb85754661c059dbc6c4183b5",
    "node_id": "C_kwDOABII59oAKDk1YjlhY2ZmNzE5ODI1YWNiODU3NTQ2NjFjMDU5ZGJjNmM0MTgzYjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T21:07:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:17:50Z"
      },
      "message": "Implement PSBTv2 fields de/ser",
      "tree": {
        "sha": "827bd9fcd040d331c8355a72e810a6c478321bed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827bd9fcd040d331c8355a72e810a6c478321bed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95b9acff719825acb85754661c059dbc6c4183b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95b9acff719825acb85754661c059dbc6c4183b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95b9acff719825acb85754661c059dbc6c4183b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95b9acff719825acb85754661c059dbc6c4183b5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0d316fcacac94267f69a5caf2a3fd2bd9354bb7"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 228,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1bddb79637c212eefa01982341e862fe0fcd740a",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 215,
        "deletions": 4,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95b9acff719825acb85754661c059dbc6c4183b5/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95b9acff719825acb85754661c059dbc6c4183b5/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=95b9acff719825acb85754661c059dbc6c4183b5",
        "patch": "@@ -15,8 +15,10 @@\n #include <script/signingprovider.h>\n #include <span.h>\n #include <streams.h>\n+#include <uint256.h>\n \n #include <optional>\n+#include <bitset>\n \n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n@@ -183,6 +185,11 @@ struct PSBTInput\n     CScriptWitness final_script_witness;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<CKeyID, SigPair> partial_sigs;\n+    uint256 prev_txid;\n+    std::optional<uint32_t> prev_out;\n+    std::optional<uint32_t> sequence;\n+    std::optional<uint32_t> time_locktime;\n+    std::optional<uint32_t> height_locktime;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     std::set<PSBTProprietary> m_proprietary;\n     int sighash_type = 0;\n@@ -246,6 +253,28 @@ struct PSBTInput\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n+        // Write prev txid, vout, sequence, and lock times\n+        if (!prev_txid.IsNull()) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_PREVIOUS_TXID));\n+            SerializeToVector(s, prev_txid);\n+        }\n+        if (prev_out != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_OUTPUT_INDEX));\n+            SerializeToVector(s, *prev_out);\n+        }\n+        if (sequence != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SEQUENCE));\n+            SerializeToVector(s, *sequence);\n+        }\n+        if (time_locktime != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_TIME_LOCKTIME));\n+            SerializeToVector(s, *time_locktime);\n+        }\n+        if (height_locktime != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_HEIGHT_LOCKTIME));\n+            SerializeToVector(s, *height_locktime);\n+        }\n+\n         // Write proprietary things\n         for (const auto& entry : m_proprietary) {\n             s << entry.key;\n@@ -383,6 +412,64 @@ struct PSBTInput\n                     UnserializeFromVector(s, final_script_witness.stack);\n                     break;\n                 }\n+                case PSBT_IN_PREVIOUS_TXID:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, previous txid is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Previous txid key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, prev_txid);\n+                    break;\n+                }\n+                case PSBT_IN_OUTPUT_INDEX:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, previous output's index is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Previous output's index is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    prev_out = v;\n+                    break;\n+                }\n+                case PSBT_IN_SEQUENCE:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, sequence is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Sequence key is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    sequence = v;\n+                    break;\n+                }\n+                case PSBT_IN_REQUIRED_TIME_LOCKTIME:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, required time based locktime is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Required time based locktime is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    time_locktime = v;\n+                    break;\n+                }\n+                case PSBT_IN_REQUIRED_HEIGHT_LOCKTIME:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, required height based locktime is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Required height based locktime is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    height_locktime = v;\n+                    break;\n+                }\n                 case PSBT_IN_PROPRIETARY:\n                 {\n                     PSBTProprietary this_prop;\n@@ -427,6 +514,8 @@ struct PSBTOutput\n     CScript redeem_script;\n     CScript witness_script;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    std::optional<CAmount> amount;\n+    CScript script;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     std::set<PSBTProprietary> m_proprietary;\n \n@@ -453,6 +542,16 @@ struct PSBTOutput\n         // Write any hd keypaths\n         SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n+        // Write amount and spk\n+        if (amount != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_AMOUNT));\n+            SerializeToVector(s, *amount);\n+        }\n+        if (!script.empty()) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_SCRIPT));\n+            s << script;\n+        }\n+\n         // Write proprietary things\n         for (const auto& entry : m_proprietary) {\n             s << entry.key;\n@@ -519,6 +618,28 @@ struct PSBTOutput\n                     DeserializeHDKeypaths(s, key, hd_keypaths);\n                     break;\n                 }\n+                case PSBT_OUT_AMOUNT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output amount is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output amount key is more than one byte type\");\n+                    }\n+                    CAmount v;\n+                    UnserializeFromVector(s, v);\n+                    amount = v;\n+                    break;\n+                }\n+                case PSBT_OUT_SCRIPT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output script is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output script key is more than one byte type\");\n+                    }\n+                    s >> script;\n+                    break;\n+                }\n                 case PSBT_OUT_PROPRIETARY:\n                 {\n                     PSBTProprietary this_prop;\n@@ -565,6 +686,9 @@ struct PartiallySignedTransaction\n     // We use a vector of CExtPubKey in the event that there happens to be the same KeyOriginInfos for different CExtPubKeys\n     // Note that this map swaps the key and values from the serialization\n     std::map<KeyOriginInfo, std::set<CExtPubKey>> m_xpubs;\n+    std::optional<int32_t> tx_version;\n+    std::optional<uint32_t> fallback_locktime;\n+    std::optional<std::bitset<8>> m_tx_modifiable;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n@@ -615,6 +739,26 @@ struct PartiallySignedTransaction\n             }\n         }\n \n+        // Write PSBTv2 tx version, locktime, counts, etc.\n+        if (tx_version != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_TX_VERSION));\n+            SerializeToVector(s, *tx_version);\n+        }\n+        if (fallback_locktime != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_FALLBACK_LOCKTIME));\n+            SerializeToVector(s, *fallback_locktime);\n+        }\n+        if (m_version != std::nullopt && *m_version >= 2) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_INPUT_COUNT));\n+            SerializeToVector(s, CompactSizeWriter(inputs.size()));\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_OUTPUT_COUNT));\n+            SerializeToVector(s, CompactSizeWriter(outputs.size()));\n+        }\n+        if (m_tx_modifiable != std::nullopt) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_TX_MODIFIABLE));\n+            SerializeToVector(s, static_cast<uint8_t>(m_tx_modifiable->to_ulong()));\n+        }\n+\n         // PSBT version\n         if (GetVersion() > 0) {\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n@@ -664,6 +808,10 @@ struct PartiallySignedTransaction\n \n         // Read global data\n         bool found_sep = false;\n+        uint64_t input_count = 0;\n+        uint64_t output_count = 0;\n+        bool found_input_count = false;\n+        bool found_output_count = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n@@ -700,6 +848,69 @@ struct PartiallySignedTransaction\n                             throw std::ios_base::failure(\"Unsigned tx does not have empty scriptSigs and scriptWitnesses.\");\n                         }\n                     }\n+                    // Set the input and output counts\n+                    input_count = tx->vin.size();\n+                    output_count = tx->vout.size();\n+                    break;\n+                }\n+                case PSBT_GLOBAL_TX_VERSION:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, global transaction version is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global transaction version key is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    tx_version = v;\n+                    break;\n+                }\n+                case PSBT_GLOBAL_FALLBACK_LOCKTIME:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, global fallback locktime is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global fallback locktime key is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    fallback_locktime = v;\n+                    break;\n+                }\n+                case PSBT_GLOBAL_INPUT_COUNT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, global input count is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global input count key is more than one byte type\");\n+                    }\n+                    CompactSizeReader reader(input_count);\n+                    UnserializeFromVector(s, reader);\n+                    found_input_count = true;\n+                    break;\n+                }\n+                case PSBT_GLOBAL_OUTPUT_COUNT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, global output count is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global output count key is more than one byte type\");\n+                    }\n+                    CompactSizeReader reader(output_count);\n+                    UnserializeFromVector(s, reader);\n+                    found_output_count = true;\n+                    break;\n+                }\n+                case PSBT_GLOBAL_TX_MODIFIABLE:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, tx modifiable flags is already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global tx modifiable flags key is more than one byte type\");\n+                    }\n+                    uint8_t tx_mod;\n+                    UnserializeFromVector(s, tx_mod);\n+                    m_tx_modifiable.emplace(tx_mod);\n                     break;\n                 }\n                 case PSBT_GLOBAL_XPUB:\n@@ -785,7 +996,7 @@ struct PartiallySignedTransaction\n \n         // Read input data\n         unsigned int i = 0;\n-        while (!s.empty() && i < tx->vin.size()) {\n+        while (!s.empty() && i < input_count) {\n             PSBTInput input;\n             s >> input;\n             inputs.push_back(input);\n@@ -797,20 +1008,20 @@ struct PartiallySignedTransaction\n             ++i;\n         }\n         // Make sure that the number of inputs matches the number of inputs in the transaction\n-        if (inputs.size() != tx->vin.size()) {\n+        if (inputs.size() != input_count) {\n             throw std::ios_base::failure(\"Inputs provided does not match the number of inputs in transaction.\");\n         }\n \n         // Read output data\n         i = 0;\n-        while (!s.empty() && i < tx->vout.size()) {\n+        while (!s.empty() && i < output_count) {\n             PSBTOutput output;\n             s >> output;\n             outputs.push_back(output);\n             ++i;\n         }\n         // Make sure that the number of outputs matches the number of outputs in the transaction\n-        if (outputs.size() != tx->vout.size()) {\n+        if (outputs.size() != output_count) {\n             throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n         }\n     }"
      },
      {
        "sha": "1a45c5ff257a54236c873fbe89a99ae2e7b473f9",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95b9acff719825acb85754661c059dbc6c4183b5/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95b9acff719825acb85754661c059dbc6c4183b5/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=95b9acff719825acb85754661c059dbc6c4183b5",
        "patch": "@@ -527,6 +527,19 @@ struct CompactSizeFormatter\n     }\n };\n \n+class CompactSizeReader\n+{\n+protected:\n+    uint64_t& n;\n+public:\n+    explicit CompactSizeReader(uint64_t& n_in) : n(n_in) {}\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s) const {\n+        n = ReadCompactSize<Stream>(s);\n+    }\n+};\n+\n class CompactSizeWriter\n {\n protected:"
      }
    ]
  },
  {
    "sha": "2cc56e812e3a1210c2421f1d0d49e7a487f63838",
    "node_id": "C_kwDOABII59oAKDJjYzU2ZTgxMmUzYTEyMTBjMjQyMWYxZDBkNDllN2E0ODdmNjM4Mzg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T22:23:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Have PSBTInput and PSBTOutput know the PSBT's version",
      "tree": {
        "sha": "a63a6eb93e0db9b81b7e086c40b5fd51a9ac5cb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a63a6eb93e0db9b81b7e086c40b5fd51a9ac5cb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cc56e812e3a1210c2421f1d0d49e7a487f63838",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc56e812e3a1210c2421f1d0d49e7a487f63838",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cc56e812e3a1210c2421f1d0d49e7a487f63838",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc56e812e3a1210c2421f1d0d49e7a487f63838/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95b9acff719825acb85754661c059dbc6c4183b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95b9acff719825acb85754661c059dbc6c4183b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95b9acff719825acb85754661c059dbc6c4183b5"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "01c280a76e4e72bc804f01c454af6a6bcd32b539",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "patch": "@@ -10,8 +10,8 @@\n \n PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n {\n-    inputs.resize(tx.vin.size());\n-    outputs.resize(tx.vout.size());\n+    inputs.resize(tx.vin.size(), PSBTInput(GetVersion()));\n+    outputs.resize(tx.vout.size(), PSBTOutput(GetVersion()));\n }\n \n bool PartiallySignedTransaction::IsNull() const"
      },
      {
        "sha": "6291d583a4ca27932b7297f2832b52a32e1377e9",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "patch": "@@ -194,11 +194,13 @@ struct PSBTInput\n     std::set<PSBTProprietary> m_proprietary;\n     int sighash_type = 0;\n \n+    uint32_t m_psbt_version;\n+\n     bool IsNull() const;\n     void FillSignatureData(SignatureData& sigdata) const;\n     void FromSignatureData(const SignatureData& sigdata);\n     void Merge(const PSBTInput& input);\n-    PSBTInput() {}\n+    PSBTInput(uint32_t version) : m_psbt_version(version) {}\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {\n@@ -519,11 +521,13 @@ struct PSBTOutput\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     std::set<PSBTProprietary> m_proprietary;\n \n+    uint32_t m_psbt_version;\n+\n     bool IsNull() const;\n     void FillSignatureData(SignatureData& sigdata) const;\n     void FromSignatureData(const SignatureData& sigdata);\n     void Merge(const PSBTOutput& output);\n-    PSBTOutput() {}\n+    PSBTOutput(uint32_t version) : m_psbt_version(version) {}\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {\n@@ -994,10 +998,12 @@ struct PartiallySignedTransaction\n             throw std::ios_base::failure(\"No unsigned transcation was provided\");\n         }\n \n+        uint32_t psbt_ver = GetVersion();\n+\n         // Read input data\n         unsigned int i = 0;\n         while (!s.empty() && i < input_count) {\n-            PSBTInput input;\n+            PSBTInput input(psbt_ver);\n             s >> input;\n             inputs.push_back(input);\n \n@@ -1015,7 +1021,7 @@ struct PartiallySignedTransaction\n         // Read output data\n         i = 0;\n         while (!s.empty() && i < output_count) {\n-            PSBTOutput output;\n+            PSBTOutput output(psbt_ver);\n             s >> output;\n             outputs.push_back(output);\n             ++i;"
      },
      {
        "sha": "6b359f254d92c7295ce7caa7ab2cb377cb4bed7b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "patch": "@@ -1596,10 +1596,10 @@ static RPCHelpMan createpsbt()\n     PartiallySignedTransaction psbtx;\n     psbtx.tx = rawTx;\n     for (unsigned int i = 0; i < rawTx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput());\n+        psbtx.inputs.push_back(PSBTInput(0));\n     }\n     for (unsigned int i = 0; i < rawTx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput());\n+        psbtx.outputs.push_back(PSBTOutput(0));\n     }\n \n     // Serialize the PSBT\n@@ -1665,10 +1665,10 @@ static RPCHelpMan converttopsbt()\n     PartiallySignedTransaction psbtx;\n     psbtx.tx = tx;\n     for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput());\n+        psbtx.inputs.push_back(PSBTInput(0));\n     }\n     for (unsigned int i = 0; i < tx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput());\n+        psbtx.outputs.push_back(PSBTOutput(0));\n     }\n \n     // Serialize the PSBT"
      },
      {
        "sha": "8c49facfa6ba8b220b2adde1520b8840217df692",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cc56e812e3a1210c2421f1d0d49e7a487f63838/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "patch": "@@ -167,11 +167,11 @@ FUZZ_TARGET_DESERIALIZE(prefilled_transaction_deserialize, {\n     DeserializeFromFuzzingInput(buffer, prefilled_transaction);\n })\n FUZZ_TARGET_DESERIALIZE(psbt_input_deserialize, {\n-    PSBTInput psbt_input;\n+    PSBTInput psbt_input(0);\n     DeserializeFromFuzzingInput(buffer, psbt_input);\n })\n FUZZ_TARGET_DESERIALIZE(psbt_output_deserialize, {\n-    PSBTOutput psbt_output;\n+    PSBTOutput psbt_output(0);\n     DeserializeFromFuzzingInput(buffer, psbt_output);\n })\n FUZZ_TARGET_DESERIALIZE(block_deserialize, {"
      }
    ]
  },
  {
    "sha": "c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
    "node_id": "C_kwDOABII59oAKGM2N2E2NWViNjJkMjg4ZTQ2YjVkZmE4N2VkNzM3M2YxZGJjZmE2ZGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T22:23:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Enforce PSBT version constraints\n\nWith PSBTv2, some fields are not allowed in PSBTv2, and some are\nrequired. Enforce those.",
      "tree": {
        "sha": "88ec34e65ceb3dd3bbfb2b4a8d5aff61430e1ffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88ec34e65ceb3dd3bbfb2b4a8d5aff61430e1ffd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cc56e812e3a1210c2421f1d0d49e7a487f63838",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cc56e812e3a1210c2421f1d0d49e7a487f63838"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 127,
      "deletions": 51
    },
    "files": [
      {
        "sha": "12d8b288b735b1959052661c541a4a64b46f400c",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 127,
        "deletions": 51,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
        "patch": "@@ -255,26 +255,29 @@ struct PSBTInput\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n-        // Write prev txid, vout, sequence, and lock times\n-        if (!prev_txid.IsNull()) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_IN_PREVIOUS_TXID));\n-            SerializeToVector(s, prev_txid);\n-        }\n-        if (prev_out != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_IN_OUTPUT_INDEX));\n-            SerializeToVector(s, *prev_out);\n-        }\n-        if (sequence != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SEQUENCE));\n-            SerializeToVector(s, *sequence);\n-        }\n-        if (time_locktime != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_TIME_LOCKTIME));\n-            SerializeToVector(s, *time_locktime);\n-        }\n-        if (height_locktime != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_HEIGHT_LOCKTIME));\n-            SerializeToVector(s, *height_locktime);\n+        // Write PSBTv2 fields\n+        if (m_psbt_version >= 2) {\n+            // Write prev txid, vout, sequence, and lock times\n+            if (!prev_txid.IsNull()) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_PREVIOUS_TXID));\n+                SerializeToVector(s, prev_txid);\n+            }\n+            if (prev_out != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_OUTPUT_INDEX));\n+                SerializeToVector(s, *prev_out);\n+            }\n+            if (sequence != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_SEQUENCE));\n+                SerializeToVector(s, *sequence);\n+            }\n+            if (time_locktime != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_TIME_LOCKTIME));\n+                SerializeToVector(s, *time_locktime);\n+            }\n+            if (height_locktime != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_REQUIRED_HEIGHT_LOCKTIME));\n+                SerializeToVector(s, *height_locktime);\n+            }\n         }\n \n         // Write proprietary things\n@@ -420,6 +423,8 @@ struct PSBTInput\n                         throw std::ios_base::failure(\"Duplicate Key, previous txid is already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Previous txid key is more than one byte type\");\n+                    } else if (m_psbt_version == 0) {\n+                        throw std::ios_base::failure(\"Previous txid is only allowed in PSBTv2\");\n                     }\n                     UnserializeFromVector(s, prev_txid);\n                     break;\n@@ -430,6 +435,8 @@ struct PSBTInput\n                         throw std::ios_base::failure(\"Duplicate Key, previous output's index is already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Previous output's index is more than one byte type\");\n+                    } else if (m_psbt_version == 0) {\n+                        throw std::ios_base::failure(\"Previous output's index is only allowed in PSBTv2\");\n                     }\n                     uint32_t v;\n                     UnserializeFromVector(s, v);\n@@ -442,6 +449,8 @@ struct PSBTInput\n                         throw std::ios_base::failure(\"Duplicate Key, sequence is already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Sequence key is more than one byte type\");\n+                    } else if (m_psbt_version == 0) {\n+                        throw std::ios_base::failure(\"Sequence is only allowed in PSBTv2\");\n                     }\n                     uint32_t v;\n                     UnserializeFromVector(s, v);\n@@ -454,6 +463,8 @@ struct PSBTInput\n                         throw std::ios_base::failure(\"Duplicate Key, required time based locktime is already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Required time based locktime is more than one byte type\");\n+                    } else if (m_psbt_version == 0) {\n+                        throw std::ios_base::failure(\"Required time based locktime is only allowed in PSBTv2\");\n                     }\n                     uint32_t v;\n                     UnserializeFromVector(s, v);\n@@ -466,6 +477,8 @@ struct PSBTInput\n                         throw std::ios_base::failure(\"Duplicate Key, required height based locktime is already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Required height based locktime is more than one byte type\");\n+                    } else if (m_psbt_version == 0) {\n+                        throw std::ios_base::failure(\"Required height based locktime is only allowed in PSBTv2\");\n                     }\n                     uint32_t v;\n                     UnserializeFromVector(s, v);\n@@ -502,6 +515,16 @@ struct PSBTInput\n         if (!found_sep) {\n             throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n         }\n+\n+        // Make sure required PSBTv2 fields are present\n+        if (m_psbt_version >= 2) {\n+            if (prev_txid.IsNull()) {\n+                throw std::ios_base::failure(\"Previous TXID is required in PSBTv2\");\n+            }\n+            if (prev_out == std::nullopt) {\n+                throw std::ios_base::failure(\"Previous output's index is required in PSBTv2\");\n+            }\n+        }\n     }\n \n     template <typename Stream>\n@@ -546,14 +569,16 @@ struct PSBTOutput\n         // Write any hd keypaths\n         SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n-        // Write amount and spk\n-        if (amount != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_AMOUNT));\n-            SerializeToVector(s, *amount);\n-        }\n-        if (!script.empty()) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_SCRIPT));\n-            s << script;\n+        if (m_psbt_version >= 2) {\n+            // Write amount and spk\n+            if (amount != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_OUT_AMOUNT));\n+                SerializeToVector(s, *amount);\n+            }\n+            if (!script.empty()) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_OUT_SCRIPT));\n+                s << script;\n+            }\n         }\n \n         // Write proprietary things\n@@ -675,6 +700,16 @@ struct PSBTOutput\n         if (!found_sep) {\n             throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n         }\n+\n+        // Make sure required PSBTv2 fields are present\n+        if (m_psbt_version >= 2) {\n+            if (amount == std::nullopt) {\n+                throw std::ios_base::failure(\"Output amount is required in PSBTv2\");\n+            }\n+            if (script.empty()) {\n+                throw std::ios_base::failure(\"Output script is required in PSBTv2\");\n+            }\n+        }\n     }\n \n     template <typename Stream>\n@@ -724,12 +759,14 @@ struct PartiallySignedTransaction\n         // magic bytes\n         s << PSBT_MAGIC_BYTES;\n \n-        // unsigned tx flag\n-        SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_UNSIGNED_TX));\n+        if (GetVersion() == 0) {\n+            // unsigned tx flag\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_UNSIGNED_TX));\n \n-        // Write serialized tx to a stream\n-        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-        SerializeToVector(os, *tx);\n+            // Write serialized tx to a stream\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, *tx);\n+        }\n \n         // Write xpubs\n         for (const auto& xpub_pair : m_xpubs) {\n@@ -743,24 +780,24 @@ struct PartiallySignedTransaction\n             }\n         }\n \n-        // Write PSBTv2 tx version, locktime, counts, etc.\n-        if (tx_version != std::nullopt) {\n+        if (GetVersion() >= 2) {\n+            // Write PSBTv2 tx version, locktime, counts, etc.\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_TX_VERSION));\n             SerializeToVector(s, *tx_version);\n-        }\n-        if (fallback_locktime != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_FALLBACK_LOCKTIME));\n-            SerializeToVector(s, *fallback_locktime);\n-        }\n-        if (m_version != std::nullopt && *m_version >= 2) {\n+            if (fallback_locktime != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_FALLBACK_LOCKTIME));\n+                SerializeToVector(s, *fallback_locktime);\n+            }\n+\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_INPUT_COUNT));\n             SerializeToVector(s, CompactSizeWriter(inputs.size()));\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_OUTPUT_COUNT));\n             SerializeToVector(s, CompactSizeWriter(outputs.size()));\n-        }\n-        if (m_tx_modifiable != std::nullopt) {\n-            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_TX_MODIFIABLE));\n-            SerializeToVector(s, static_cast<uint8_t>(m_tx_modifiable->to_ulong()));\n+\n+            if (m_tx_modifiable != std::nullopt) {\n+                SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_TX_MODIFIABLE));\n+                SerializeToVector(s, static_cast<uint8_t>(m_tx_modifiable->to_ulong()));\n+            }\n         }\n \n         // PSBT version\n@@ -993,13 +1030,52 @@ struct PartiallySignedTransaction\n             throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n         }\n \n-        // Make sure that we got an unsigned tx\n-        if (!tx) {\n-            throw std::ios_base::failure(\"No unsigned transcation was provided\");\n-        }\n-\n         uint32_t psbt_ver = GetVersion();\n \n+        // Check PSBT version constraints\n+        if (psbt_ver == 0) {\n+            // Make sure that we got an unsigned tx for PSBTv0\n+            if (!tx) {\n+                throw std::ios_base::failure(\"No unsigned transcation was provided\");\n+            }\n+            // Make sure no PSBTv2 fields are present\n+            if (tx_version != std::nullopt) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_TX_VERSION is not allowed in PSBTv0\");\n+            }\n+            if (fallback_locktime != std::nullopt) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_FALLBACK_LOCKTIME is not allowed in PSBTv0\");\n+            }\n+            if (found_input_count) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_INPUT_COUNT is not allowed in PSBTv0\");\n+            }\n+            if (found_output_count) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_OUTPUT_COUNT is not allowed in PSBTv0\");\n+            }\n+            if (m_tx_modifiable != std::nullopt) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_TX_MODIFIABLE is not allowed in PSBTv0\");\n+            }\n+        }\n+        // Disallow v1\n+        if (psbt_ver == 1) {\n+            throw std::ios_base::failure(\"There is no PSBT version 1\");\n+        }\n+        if (psbt_ver >= 2) {\n+            // Tx version, input, and output counts are required\n+            if (tx_version == std::nullopt) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_TX_VERSION is required in PSBTv2\");\n+            }\n+            if (!found_input_count) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_INPUT_COUNT is required in PSBTv2\");\n+            }\n+            if (!found_output_count) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_OUTPUT_COUNT is required in PSBTv2\");\n+            }\n+            // Unsigned tx is disallowed\n+            if (tx) {\n+                throw std::ios_base::failure(\"PSBT_GLOBAL_UNSIGNED_TX is not allowed in PSBTv2\");\n+            }\n+        }\n+\n         // Read input data\n         unsigned int i = 0;\n         while (!s.empty() && i < input_count) {\n@@ -1008,7 +1084,7 @@ struct PartiallySignedTransaction\n             inputs.push_back(input);\n \n             // Make sure the non-witness utxo matches the outpoint\n-            if (input.non_witness_utxo && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) {\n+            if (input.non_witness_utxo && ((tx != std::nullopt && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) || (!input.prev_txid.IsNull() && input.non_witness_utxo->GetHash() != input.prev_txid))) {\n                 throw std::ios_base::failure(\"Non-witness UTXO does not match outpoint hash\");\n             }\n             ++i;"
      }
    ]
  },
  {
    "sha": "7279004cbbf4bea31eadb0ceb643df0b436e2f22",
    "node_id": "C_kwDOABII59oAKDcyNzkwMDRjYmJmNGJlYTMxZWFkYjBjZWI2NDNkZjBiNDM2ZTJmMjI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T23:34:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Add PSBT::CacheUnsignedTxPieces\n\nFetches the PSBTv2 fields from PSBTv0's global unsigned tx. This allows\nus to pretend everything internally is a PSBTv2 and makes things easier\nto work with.",
      "tree": {
        "sha": "6207e6b893b1264eb210ae88299b5c7593adfe62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6207e6b893b1264eb210ae88299b5c7593adfe62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7279004cbbf4bea31eadb0ceb643df0b436e2f22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7279004cbbf4bea31eadb0ceb643df0b436e2f22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7279004cbbf4bea31eadb0ceb643df0b436e2f22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7279004cbbf4bea31eadb0ceb643df0b436e2f22/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c67a65eb62d288e46b5dfa87ed7373f1dbcfa6da"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1ae152133fbc4f8422a64f6d8742a3c5010dd4a7",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7279004cbbf4bea31eadb0ceb643df0b436e2f22/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7279004cbbf4bea31eadb0ceb643df0b436e2f22/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=7279004cbbf4bea31eadb0ceb643df0b436e2f22",
        "patch": "@@ -412,3 +412,36 @@ uint32_t PartiallySignedTransaction::GetVersion() const\n     }\n     return 0;\n }\n+\n+void PartiallySignedTransaction::SetupFromTx(const CMutableTransaction& tx)\n+{\n+    tx_version = tx.nVersion;\n+    fallback_locktime = tx.nLockTime;\n+\n+    uint32_t i;\n+    for (i = 0; i < tx.vin.size(); ++i) {\n+        PSBTInput& input = inputs.at(i);\n+        const CTxIn& txin = tx.vin.at(i);\n+\n+        input.prev_txid = txin.prevout.hash;\n+        input.prev_out = txin.prevout.n;\n+        input.sequence = txin.nSequence;\n+    }\n+\n+    for (i = 0; i < tx.vout.size(); ++i) {\n+        PSBTOutput& output = outputs.at(i);\n+        const CTxOut& txout = tx.vout.at(i);\n+\n+        output.amount = txout.nValue;\n+        output.script = txout.scriptPubKey;\n+    }\n+}\n+\n+void PartiallySignedTransaction::CacheUnsignedTxPieces()\n+{\n+    // To make things easier, we split up the global unsigned transaction\n+    // and use the PSBTv2 fields for PSBTv0.\n+    if (tx != std::nullopt) {\n+        SetupFromTx(*tx);\n+    }\n+}"
      },
      {
        "sha": "7d9f7564cd0ef5de379fa1d5a84562ee3c4b17a9",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7279004cbbf4bea31eadb0ceb643df0b436e2f22/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7279004cbbf4bea31eadb0ceb643df0b436e2f22/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=7279004cbbf4bea31eadb0ceb643df0b436e2f22",
        "patch": "@@ -742,6 +742,8 @@ struct PartiallySignedTransaction\n     [[nodiscard]] bool Merge(const PartiallySignedTransaction& psbt);\n     bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n+    void SetupFromTx(const CMutableTransaction& tx);\n+    void CacheUnsignedTxPieces();\n     PartiallySignedTransaction() {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n     /**"
      }
    ]
  },
  {
    "sha": "6fb2392cba8fa306d989299f36d51f3ffb2590ae",
    "node_id": "C_kwDOABII59oAKDZmYjIzOTJjYmE4ZmEzMDZkOTg5Mjk5ZjM2ZDUxZjNmZmIyNTkwYWU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T23:35:32Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Call CacheUnsignedTxPieces in PSBT constructor",
      "tree": {
        "sha": "68c697c8824a73a7b4d712ee6ff86e10e57455e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68c697c8824a73a7b4d712ee6ff86e10e57455e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fb2392cba8fa306d989299f36d51f3ffb2590ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb2392cba8fa306d989299f36d51f3ffb2590ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fb2392cba8fa306d989299f36d51f3ffb2590ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb2392cba8fa306d989299f36d51f3ffb2590ae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7279004cbbf4bea31eadb0ceb643df0b436e2f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7279004cbbf4bea31eadb0ceb643df0b436e2f22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7279004cbbf4bea31eadb0ceb643df0b436e2f22"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "051fa98caf858ebd59e83798423f8d9d63ab8fd3",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb2392cba8fa306d989299f36d51f3ffb2590ae/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb2392cba8fa306d989299f36d51f3ffb2590ae/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=6fb2392cba8fa306d989299f36d51f3ffb2590ae",
        "patch": "@@ -12,6 +12,7 @@ PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction\n {\n     inputs.resize(tx.vin.size(), PSBTInput(GetVersion()));\n     outputs.resize(tx.vout.size(), PSBTOutput(GetVersion()));\n+    CacheUnsignedTxPieces();\n }\n \n bool PartiallySignedTransaction::IsNull() const"
      }
    ]
  },
  {
    "sha": "1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
    "node_id": "C_kwDOABII59oAKDE4MzFkYjI0OGNlOWE5MzE4YjZkZDVjZDk5YTlmMGMzN2Q5MTNjNTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T20:27:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Convert PSBTv0 unsigned tx to PSBTv2 fields\n\nThis is just a convenience and doesn't effect serialization.",
      "tree": {
        "sha": "19789d951be99a1d018888c2ffd8e3133ae595bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19789d951be99a1d018888c2ffd8e3133ae595bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1831db248ce9a9318b6dd5cd99a9f0c37d913c58/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fb2392cba8fa306d989299f36d51f3ffb2590ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb2392cba8fa306d989299f36d51f3ffb2590ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fb2392cba8fa306d989299f36d51f3ffb2590ae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c3a6caf473d7372862e20da67ba287f5b5d4ae9",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1831db248ce9a9318b6dd5cd99a9f0c37d913c58/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1831db248ce9a9318b6dd5cd99a9f0c37d913c58/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
        "patch": "@@ -1108,6 +1108,8 @@ struct PartiallySignedTransaction\n         if (outputs.size() != output_count) {\n             throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n         }\n+\n+        CacheUnsignedTxPieces();\n     }\n \n     template <typename Stream>"
      }
    ]
  },
  {
    "sha": "6b79cf18fd6baf27f22291c9007602949dd54ba3",
    "node_id": "C_kwDOABII59oAKDZiNzljZjE4ZmQ2YmFmMjdmMjIyOTFjOTAwNzYwMjk0OWRkNTRiYTM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T20:50:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Replace PSBT::GetInputUTXO with PSBTInput::GetUTXO\n\nNow that PSBTInput's track their own prevouts, there's no need for a\nPSBT global function to fetch input specific data.",
      "tree": {
        "sha": "7fe5decd54c520f9d36a686739ba7c6dc3ff40f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe5decd54c520f9d36a686739ba7c6dc3ff40f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b79cf18fd6baf27f22291c9007602949dd54ba3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b79cf18fd6baf27f22291c9007602949dd54ba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b79cf18fd6baf27f22291c9007602949dd54ba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b79cf18fd6baf27f22291c9007602949dd54ba3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1831db248ce9a9318b6dd5cd99a9f0c37d913c58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1831db248ce9a9318b6dd5cd99a9f0c37d913c58"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "9e395c6e26b11244d837ca4ffa276a28e2673a61",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "patch": "@@ -34,7 +34,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n         // Check for a UTXO\n         CTxOut utxo;\n-        if (psbtx.GetInputUTXO(utxo, i)) {\n+        if (input.GetUTXO(utxo)) {\n             if (!MoneyRange(utxo.nValue) || !MoneyRange(in_amt + utxo.nValue)) {\n                 result.SetInvalid(strprintf(\"PSBT is not valid. Input %u has invalid value\", i));\n                 return result;\n@@ -123,7 +123,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             PSBTInput& input = psbtx.inputs[i];\n             Coin newcoin;\n \n-            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, nullptr, 1) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n+            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, nullptr, 1) || !input.GetUTXO(newcoin.out)) {\n                 success = false;\n                 break;\n             } else {"
      },
      {
        "sha": "e68352a1dda9ed89ee562e5ad5a0311519fdb1ee",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "patch": "@@ -65,20 +65,18 @@ bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput\n     return true;\n }\n \n-bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n+bool PSBTInput::GetUTXO(CTxOut& utxo) const\n {\n-    const PSBTInput& input = inputs[input_index];\n-    uint32_t prevout_index = tx->vin[input_index].prevout.n;\n-    if (input.non_witness_utxo) {\n-        if (prevout_index >= input.non_witness_utxo->vout.size()) {\n+    if (non_witness_utxo) {\n+        if (prev_out >= non_witness_utxo->vout.size()) {\n             return false;\n         }\n-        if (input.non_witness_utxo->GetHash() != tx->vin[input_index].prevout.hash) {\n+        if (non_witness_utxo->GetHash() != prev_txid) {\n             return false;\n         }\n-        utxo = input.non_witness_utxo->vout[prevout_index];\n-    } else if (!input.witness_utxo.IsNull()) {\n-        utxo = input.witness_utxo;\n+        utxo = non_witness_utxo->vout[*prev_out];\n+    } else if (!witness_utxo.IsNull()) {\n+        utxo = witness_utxo;\n     } else {\n         return false;\n     }\n@@ -242,9 +240,9 @@ PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction&\n {\n     const CMutableTransaction& tx = *psbt.tx;\n     bool have_all_spent_outputs = true;\n-    std::vector<CTxOut> utxos(tx.vin.size());\n-    for (size_t idx = 0; idx < tx.vin.size(); ++idx) {\n-        if (!psbt.GetInputUTXO(utxos[idx], idx)) have_all_spent_outputs = false;\n+    std::vector<CTxOut> utxos;\n+    for (const PSBTInput& input : psbt.inputs) {\n+        if (!input.GetUTXO(utxos.emplace_back())) have_all_spent_outputs = false;\n     }\n     PrecomputedTransactionData txdata;\n     if (have_all_spent_outputs) {"
      },
      {
        "sha": "7670f9213b5cd43e88654430872151ad5f2ec8da",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "patch": "@@ -200,6 +200,13 @@ struct PSBTInput\n     void FillSignatureData(SignatureData& sigdata) const;\n     void FromSignatureData(const SignatureData& sigdata);\n     void Merge(const PSBTInput& input);\n+    /**\n+     * Retrieves the UTXO for this input\n+     *\n+     * @param[out] utxo The UTXO of this input\n+     * @return Whether the UTXO could be retrieved\n+     */\n+    bool GetUTXO(CTxOut& utxo) const;\n     PSBTInput(uint32_t version) : m_psbt_version(version) {}\n \n     template <typename Stream>\n@@ -746,14 +753,6 @@ struct PartiallySignedTransaction\n     void CacheUnsignedTxPieces();\n     PartiallySignedTransaction() {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n-    /**\n-     * Finds the UTXO for a given input index\n-     *\n-     * @param[out] utxo The UTXO of the input if found\n-     * @param[in] input_index Index of the input to retrieve the UTXO of\n-     * @return Whether the UTXO for the specified input was found\n-     */\n-    bool GetInputUTXO(CTxOut& utxo, int input_index) const;\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {"
      },
      {
        "sha": "f6f20ea895f53d5bbcc5f9e07774c4d4501ae649",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b79cf18fd6baf27f22291c9007602949dd54ba3/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "patch": "@@ -59,7 +59,7 @@ FUZZ_TARGET_INIT(psbt, initialize_psbt)\n \n     for (size_t i = 0; i < psbt.tx->vin.size(); ++i) {\n         CTxOut tx_out;\n-        if (psbt.GetInputUTXO(tx_out, i)) {\n+        if (psbt.inputs.at(i).GetUTXO(tx_out)) {\n             (void)tx_out.IsNull();\n             (void)tx_out.ToString();\n         }"
      }
    ]
  },
  {
    "sha": "91f783ce5763421c565ee685f397a9201c646606",
    "node_id": "C_kwDOABII59oAKDkxZjc4M2NlNTc2MzQyMWM1NjVlZTY4NWYzOTdhOTIwMWM2NDY2MDY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T21:15:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Add PSBT::ComputeLockTime()\n\nFunction to compute the lock time for the transaction",
      "tree": {
        "sha": "420f6fd7461511423a72b5c23755fc7a15a1f282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/420f6fd7461511423a72b5c23755fc7a15a1f282"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f783ce5763421c565ee685f397a9201c646606",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f783ce5763421c565ee685f397a9201c646606",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f783ce5763421c565ee685f397a9201c646606",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f783ce5763421c565ee685f397a9201c646606/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b79cf18fd6baf27f22291c9007602949dd54ba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b79cf18fd6baf27f22291c9007602949dd54ba3"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d600858b98e37b5790258d019ec4490a1cd4ce9",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f783ce5763421c565ee685f397a9201c646606/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f783ce5763421c565ee685f397a9201c646606/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=91f783ce5763421c565ee685f397a9201c646606",
        "patch": "@@ -45,6 +45,41 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n     return true;\n }\n \n+bool PartiallySignedTransaction::ComputeTimeLock(uint32_t& locktime) const\n+{\n+    std::optional<uint32_t> time_lock{0};\n+    std::optional<uint32_t> height_lock{0};\n+    for (const PSBTInput& input : inputs) {\n+        if (input.time_locktime != std::nullopt && input.height_locktime == std::nullopt) {\n+            height_lock.reset(); // Transaction can no longer have a height locktime\n+            if (time_lock == std::nullopt) {\n+                return false;\n+            }\n+        } else if (input.time_locktime == std::nullopt && input.height_locktime != std::nullopt) {\n+            time_lock.reset(); // Transaction can no longer have a time locktime\n+            if (height_lock == std::nullopt) {\n+                return false;\n+            }\n+        }\n+        if (input.time_locktime && time_lock != std::nullopt) {\n+            time_lock = std::max(time_lock, input.time_locktime);\n+        }\n+        if (input.height_locktime && height_lock != std::nullopt) {\n+            height_lock = std::max(height_lock, input.height_locktime);\n+        }\n+    }\n+    if (height_lock != std::nullopt && *height_lock > 0) {\n+        locktime = *height_lock;\n+        return true;\n+    }\n+    if (time_lock != std::nullopt && *time_lock > 0) {\n+        locktime = *time_lock;\n+        return true;\n+    }\n+    locktime = fallback_locktime.value_or(0);\n+    return true;\n+}\n+\n bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n {\n     if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {"
      },
      {
        "sha": "6a8779a1db24e400fa02aba515d45b653a9f1d62",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f783ce5763421c565ee685f397a9201c646606/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f783ce5763421c565ee685f397a9201c646606/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=91f783ce5763421c565ee685f397a9201c646606",
        "patch": "@@ -751,6 +751,7 @@ struct PartiallySignedTransaction\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     void SetupFromTx(const CMutableTransaction& tx);\n     void CacheUnsignedTxPieces();\n+    bool ComputeTimeLock(uint32_t& locktime) const;\n     PartiallySignedTransaction() {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n "
      }
    ]
  },
  {
    "sha": "3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
    "node_id": "C_kwDOABII59oAKDNkNjQ4ZWUwNWQ4NWRlY2ZiMWVhYjc2NDZkOTNhNDBmMGYzZmRhYTE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T21:21:42Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Add PSBT::GetUnsignedTx\n\nA helper function for getting the unsigned transaction regardless of\npsbt version.",
      "tree": {
        "sha": "e27c2999dfb3548fc4af46611b2b9fda54c188ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e27c2999dfb3548fc4af46611b2b9fda54c188ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f783ce5763421c565ee685f397a9201c646606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f783ce5763421c565ee685f397a9201c646606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f783ce5763421c565ee685f397a9201c646606"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7f0df6da028a6ee2bcf6ba459e759f2164a292b",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <psbt.h>\n \n+#include <primitives/transaction.h>\n #include <util/check.h>\n #include <util/strencodings.h>\n \n@@ -80,6 +81,33 @@ bool PartiallySignedTransaction::ComputeTimeLock(uint32_t& locktime) const\n     return true;\n }\n \n+CMutableTransaction PartiallySignedTransaction::GetUnsignedTx() const\n+{\n+    if (tx != std::nullopt) {\n+        return *tx;\n+    }\n+\n+    CMutableTransaction mtx;\n+    mtx.nVersion = *tx_version;\n+    bool locktime_success = ComputeTimeLock(mtx.nLockTime);\n+    assert(locktime_success);\n+    uint32_t max_sequence = CTxIn::SEQUENCE_FINAL;\n+    for (const PSBTInput& input : inputs) {\n+        CTxIn txin;\n+        txin.prevout.hash = input.prev_txid;\n+        txin.prevout.n = *input.prev_out;\n+        txin.nSequence = input.sequence.value_or(max_sequence);\n+        mtx.vin.push_back(txin);\n+    }\n+    for (const PSBTOutput& output : outputs) {\n+        CTxOut txout;\n+        txout.nValue = *output.amount;\n+        txout.scriptPubKey = output.script;\n+        mtx.vout.push_back(txout);\n+    }\n+    return mtx;\n+}\n+\n bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n {\n     if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {"
      },
      {
        "sha": "eb3b4d159ebbc75bcc739ff990ff29e58b45f895",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
        "patch": "@@ -752,6 +752,7 @@ struct PartiallySignedTransaction\n     void SetupFromTx(const CMutableTransaction& tx);\n     void CacheUnsignedTxPieces();\n     bool ComputeTimeLock(uint32_t& locktime) const;\n+    CMutableTransaction GetUnsignedTx() const;\n     PartiallySignedTransaction() {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n "
      }
    ]
  },
  {
    "sha": "ff30e1cdc505bec2213befbf5edfef438d5efb2e",
    "node_id": "C_kwDOABII59oAKGZmMzBlMWNkYzUwNWJlYzIyMTNiZWZiZjVlZGZlZjQzOGQ1ZWZiMmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T20:51:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Add PSBT::GetUniqueID\n\nThe unique ID for PSBTv2 is different from v0. Use this function to get\nthe ID without requiring the caller to know the version number.",
      "tree": {
        "sha": "ad97603aabdea31e610dab680be0a5dd2a9f5e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad97603aabdea31e610dab680be0a5dd2a9f5e04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff30e1cdc505bec2213befbf5edfef438d5efb2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff30e1cdc505bec2213befbf5edfef438d5efb2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff30e1cdc505bec2213befbf5edfef438d5efb2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff30e1cdc505bec2213befbf5edfef438d5efb2e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d648ee05d85decfb1eab7646d93a40f0f3fdaa1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cad3228a268eeae9e9e27b850cab850edd6edcad",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff30e1cdc505bec2213befbf5edfef438d5efb2e/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff30e1cdc505bec2213befbf5edfef438d5efb2e/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=ff30e1cdc505bec2213befbf5edfef438d5efb2e",
        "patch": "@@ -24,7 +24,7 @@ bool PartiallySignedTransaction::IsNull() const\n bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n {\n     // Prohibited to merge two PSBTs over different transactions\n-    if (tx->GetHash() != psbt.tx->GetHash()) {\n+    if (GetUniqueID() != psbt.GetUniqueID()) {\n         return false;\n     }\n \n@@ -108,6 +108,23 @@ CMutableTransaction PartiallySignedTransaction::GetUnsignedTx() const\n     return mtx;\n }\n \n+uint256 PartiallySignedTransaction::GetUniqueID() const\n+{\n+    if (tx != std::nullopt) {\n+        return tx->GetHash();\n+    }\n+\n+    // Get the unsigned transaction\n+    CMutableTransaction mtx = GetUnsignedTx();\n+    // Set the locktime to 0\n+    mtx.nLockTime = 0;\n+    // Set the sequence numbers to 0\n+    for (CTxIn& txin : mtx.vin) {\n+        txin.nSequence = 0;\n+    }\n+    return mtx.GetHash();\n+}\n+\n bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n {\n     if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {"
      },
      {
        "sha": "af775332a3864c533f48d4a85a71f7a5768e26f9",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff30e1cdc505bec2213befbf5edfef438d5efb2e/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff30e1cdc505bec2213befbf5edfef438d5efb2e/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ff30e1cdc505bec2213befbf5edfef438d5efb2e",
        "patch": "@@ -753,6 +753,7 @@ struct PartiallySignedTransaction\n     void CacheUnsignedTxPieces();\n     bool ComputeTimeLock(uint32_t& locktime) const;\n     CMutableTransaction GetUnsignedTx() const;\n+    uint256 GetUniqueID() const;\n     PartiallySignedTransaction() {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n "
      }
    ]
  },
  {
    "sha": "ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
    "node_id": "C_kwDOABII59oAKGFjNzdhZjZmNTY0OGEwZTZmMzk2ZjVkNmFlZGUyN2JkZTBjMWU1YmY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T21:50:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Change PSBT::AddInput to take just PSBTInput",
      "tree": {
        "sha": "d24f8931a2d3d435d32dcb2e0d46bd25757d33f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d24f8931a2d3d435d32dcb2e0d46bd25757d33f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff30e1cdc505bec2213befbf5edfef438d5efb2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff30e1cdc505bec2213befbf5edfef438d5efb2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff30e1cdc505bec2213befbf5edfef438d5efb2e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 28,
      "deletions": 13
    },
    "files": [
      {
        "sha": "5c21530a621fc76d1beb720d410c0e8c79834f23",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 8,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "patch": "@@ -125,17 +125,32 @@ uint256 PartiallySignedTransaction::GetUniqueID() const\n     return mtx.GetHash();\n }\n \n-bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n+bool PartiallySignedTransaction::AddInput(PSBTInput& psbtin)\n {\n-    if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n+    if (std::find_if(inputs.begin(), inputs.end(),\n+        [psbtin](const PSBTInput& psbt) {\n+            return psbt.prev_txid == psbtin.prev_txid && psbt.prev_out == psbtin.prev_out;\n+        }\n+    ) != inputs.end()) {\n         return false;\n     }\n-    tx->vin.push_back(txin);\n-    psbtin.partial_sigs.clear();\n-    psbtin.final_script_sig.clear();\n-    psbtin.final_script_witness.SetNull();\n-    inputs.push_back(psbtin);\n-    return true;\n+\n+    if (tx != std::nullopt) {\n+        // This is a v0 psbt, so do the v0 AddInput\n+        CTxIn txin(COutPoint(psbtin.prev_txid, *psbtin.prev_out));\n+        if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n+            return false;\n+        }\n+        tx->vin.push_back(txin);\n+        psbtin.partial_sigs.clear();\n+        psbtin.final_script_sig.clear();\n+        psbtin.final_script_witness.SetNull();\n+        inputs.push_back(psbtin);\n+        return true;\n+    }\n+\n+    // TODO: Do PSBTv2\n+    return false;\n }\n \n bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)"
      },
      {
        "sha": "59e1fe478d68989d0bebd3784731dd499522e6cc",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "patch": "@@ -747,7 +747,7 @@ struct PartiallySignedTransaction\n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     [[nodiscard]] bool Merge(const PartiallySignedTransaction& psbt);\n-    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddInput(PSBTInput& psbtin);\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     void SetupFromTx(const CMutableTransaction& tx);\n     void CacheUnsignedTxPieces();"
      },
      {
        "sha": "b7035b6ea804ccb998e16240cc75fd66d0774303",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "patch": "@@ -1831,7 +1831,7 @@ static RPCHelpMan joinpsbts()\n     // Merge\n     for (auto& psbt : psbtxs) {\n         for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n-            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+            if (!merged_psbt.AddInput(psbt.inputs[i])) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString(), psbt.tx->vin[i].prevout.n));\n             }\n         }\n@@ -1863,7 +1863,7 @@ static RPCHelpMan joinpsbts()\n     shuffled_psbt.tx->nVersion = merged_psbt.tx->nVersion;\n     shuffled_psbt.tx->nLockTime = merged_psbt.tx->nLockTime;\n     for (int i : input_indices) {\n-        shuffled_psbt.AddInput(merged_psbt.tx->vin[i], merged_psbt.inputs[i]);\n+        shuffled_psbt.AddInput(merged_psbt.inputs[i]);\n     }\n     for (int i : output_indices) {\n         shuffled_psbt.AddOutput(merged_psbt.tx->vout[i], merged_psbt.outputs[i]);"
      },
      {
        "sha": "5835cb9ce73e98adf282a5053292d5e5ef56f709",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "patch": "@@ -83,8 +83,8 @@ FUZZ_TARGET_INIT(psbt, initialize_psbt)\n     psbt_mut = psbt;\n     (void)CombinePSBTs(psbt_mut, {psbt_mut, psbt_merge});\n     psbt_mut = psbt;\n-    for (unsigned int i = 0; i < psbt_merge.tx->vin.size(); ++i) {\n-        (void)psbt_mut.AddInput(psbt_merge.tx->vin[i], psbt_merge.inputs[i]);\n+    for (auto& psbt_in : psbt_merge.inputs) {\n+        (void)psbt_mut.AddInput(psbt_in);\n     }\n     for (unsigned int i = 0; i < psbt_merge.tx->vout.size(); ++i) {\n         Assert(psbt_mut.AddOutput(psbt_merge.tx->vout[i], psbt_merge.outputs[i]));"
      }
    ]
  },
  {
    "sha": "0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
    "node_id": "C_kwDOABII59oAKDBiOWViOTNmMWVhYTg4ODRmMzEwNWVlMGNjZDQ0NjA5ZjhhMmZmODQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T21:59:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Change PSBT::AddOutput to take just PSBTOutput",
      "tree": {
        "sha": "bc9dcdb20a9541f4d411232ec5fe280253fd472e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc9dcdb20a9541f4d411232ec5fe280253fd472e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac77af6f5648a0e6f396f5d6aede27bde0c1e5bf"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8eb8c6df5a544c3715f177384ae24003a48d6a3f",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "patch": "@@ -153,11 +153,18 @@ bool PartiallySignedTransaction::AddInput(PSBTInput& psbtin)\n     return false;\n }\n \n-bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)\n+bool PartiallySignedTransaction::AddOutput(const PSBTOutput& psbtout)\n {\n-    tx->vout.push_back(txout);\n-    outputs.push_back(psbtout);\n-    return true;\n+    if (tx != std::nullopt) {\n+        // This is a v0 psbt, do the v0 AddOutput\n+        CTxOut txout(*psbtout.amount, psbtout.script);\n+        tx->vout.push_back(txout);\n+        outputs.push_back(psbtout);\n+        return true;\n+    }\n+\n+    // TOOD: Do PSBTv2\n+    return false;\n }\n \n bool PSBTInput::GetUTXO(CTxOut& utxo) const"
      },
      {
        "sha": "64ba3821dc4b69d616555e2508c74580e680c2fc",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "patch": "@@ -748,7 +748,7 @@ struct PartiallySignedTransaction\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     [[nodiscard]] bool Merge(const PartiallySignedTransaction& psbt);\n     bool AddInput(PSBTInput& psbtin);\n-    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n+    bool AddOutput(const PSBTOutput& psbtout);\n     void SetupFromTx(const CMutableTransaction& tx);\n     void CacheUnsignedTxPieces();\n     bool ComputeTimeLock(uint32_t& locktime) const;"
      },
      {
        "sha": "a4ae3d3cbd6d28e82f50877da17c80ad1ab1ec2b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "patch": "@@ -1836,7 +1836,7 @@ static RPCHelpMan joinpsbts()\n             }\n         }\n         for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n-            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+            merged_psbt.AddOutput(psbt.outputs[i]);\n         }\n         for (auto& xpub_pair : psbt.m_xpubs) {\n             if (merged_psbt.m_xpubs.count(xpub_pair.first) == 0) {\n@@ -1866,7 +1866,7 @@ static RPCHelpMan joinpsbts()\n         shuffled_psbt.AddInput(merged_psbt.inputs[i]);\n     }\n     for (int i : output_indices) {\n-        shuffled_psbt.AddOutput(merged_psbt.tx->vout[i], merged_psbt.outputs[i]);\n+        shuffled_psbt.AddOutput(merged_psbt.outputs[i]);\n     }\n     shuffled_psbt.unknown.insert(merged_psbt.unknown.begin(), merged_psbt.unknown.end());\n "
      },
      {
        "sha": "6ebe2fa5d8c28ca822c6da0ef750911bb490802b",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "patch": "@@ -86,8 +86,8 @@ FUZZ_TARGET_INIT(psbt, initialize_psbt)\n     for (auto& psbt_in : psbt_merge.inputs) {\n         (void)psbt_mut.AddInput(psbt_in);\n     }\n-    for (unsigned int i = 0; i < psbt_merge.tx->vout.size(); ++i) {\n-        Assert(psbt_mut.AddOutput(psbt_merge.tx->vout[i], psbt_merge.outputs[i]));\n+    for (const auto& psbt_out : psbt_merge.outputs) {\n+        Assert(psbt_mut.AddOutput(psbt_out));\n     }\n     psbt_mut.unknown.insert(psbt_merge.unknown.begin(), psbt_merge.unknown.end());\n }"
      }
    ]
  },
  {
    "sha": "d27594f8f8ff2977968697ab1dce2bcaeb615a86",
    "node_id": "C_kwDOABII59oAKGQyNzU5NGY4ZjhmZjI5Nzc5Njg2OTdhYjFkY2UyYmNhZWI2MTVhODY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:18:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Implement PSBTv2 field merging",
      "tree": {
        "sha": "f2f5f3e0d01f147e4490cfa7533de51ea5625ceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2f5f3e0d01f147e4490cfa7533de51ea5625ceb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d27594f8f8ff2977968697ab1dce2bcaeb615a86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d27594f8f8ff2977968697ab1dce2bcaeb615a86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d27594f8f8ff2977968697ab1dce2bcaeb615a86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d27594f8f8ff2977968697ab1dce2bcaeb615a86/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9eb93f1eaa8884f3105ee0ccd44609f8a2ff84"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71ab0fa71855d3a02ec0c77b57c759c78d1ed0ec",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d27594f8f8ff2977968697ab1dce2bcaeb615a86/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d27594f8f8ff2977968697ab1dce2bcaeb615a86/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=d27594f8f8ff2977968697ab1dce2bcaeb615a86",
        "patch": "@@ -28,6 +28,7 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n         return false;\n     }\n \n+    assert(*tx_version == psbt.tx_version);\n     for (unsigned int i = 0; i < inputs.size(); ++i) {\n         inputs[i].Merge(psbt.inputs[i]);\n     }\n@@ -41,6 +42,8 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n             m_xpubs[xpub_pair.first].insert(xpub_pair.second.begin(), xpub_pair.second.end());\n         }\n     }\n+    if (fallback_locktime == std::nullopt && psbt.fallback_locktime != std::nullopt) fallback_locktime = psbt.fallback_locktime;\n+    if (m_tx_modifiable == std::nullopt && psbt.m_tx_modifiable != std::nullopt) m_tx_modifiable = psbt.m_tx_modifiable;\n     unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n \n     return true;\n@@ -247,6 +250,9 @@ void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n \n void PSBTInput::Merge(const PSBTInput& input)\n {\n+    assert(prev_txid == input.prev_txid);\n+    assert(*prev_out == *input.prev_out);\n+\n     if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n     if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n         // TODO: For segwit v1, we will want to clear out the non-witness utxo when setting a witness one. For v0 and non-segwit, this is not safe\n@@ -261,6 +267,9 @@ void PSBTInput::Merge(const PSBTInput& input)\n     if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n     if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n     if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n+    if (sequence == std::nullopt && input.sequence != std::nullopt) sequence = input.sequence;\n+    if (time_locktime == std::nullopt && input.time_locktime != std::nullopt) time_locktime = input.time_locktime;\n+    if (height_locktime == std::nullopt && input.height_locktime != std::nullopt) height_locktime = input.height_locktime;\n }\n \n void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n@@ -296,6 +305,9 @@ bool PSBTOutput::IsNull() const\n \n void PSBTOutput::Merge(const PSBTOutput& output)\n {\n+    assert(*amount == *output.amount);\n+    assert(script == output.script);\n+\n     hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n     unknown.insert(output.unknown.begin(), output.unknown.end());\n "
      }
    ]
  },
  {
    "sha": "29a3987cd27a6c404ea689bf78699c3afce57f0a",
    "node_id": "C_kwDOABII59oAKDI5YTM5ODdjZDI3YTZjNDA0ZWE2ODliZjc4Njk5YzNhZmNlNTdmMGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:48:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Add PSBTInput::GetOutPoint\n\nHelper for getting the PSBTInput COutPoint",
      "tree": {
        "sha": "931f264baeb27c4afefb67ee31822fc917857441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931f264baeb27c4afefb67ee31822fc917857441"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29a3987cd27a6c404ea689bf78699c3afce57f0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3987cd27a6c404ea689bf78699c3afce57f0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3987cd27a6c404ea689bf78699c3afce57f0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3987cd27a6c404ea689bf78699c3afce57f0a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d27594f8f8ff2977968697ab1dce2bcaeb615a86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d27594f8f8ff2977968697ab1dce2bcaeb615a86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d27594f8f8ff2977968697ab1dce2bcaeb615a86"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a4de40b1e7ebff3c11e5ece737e8112729a0264",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3987cd27a6c404ea689bf78699c3afce57f0a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3987cd27a6c404ea689bf78699c3afce57f0a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=29a3987cd27a6c404ea689bf78699c3afce57f0a",
        "patch": "@@ -188,6 +188,11 @@ bool PSBTInput::GetUTXO(CTxOut& utxo) const\n     return true;\n }\n \n+COutPoint PSBTInput::GetOutPoint() const\n+{\n+    return COutPoint(prev_txid, *prev_out);\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();"
      },
      {
        "sha": "70586c86cbd005d538e08a2dc6b3e52ff49b0204",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3987cd27a6c404ea689bf78699c3afce57f0a/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3987cd27a6c404ea689bf78699c3afce57f0a/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=29a3987cd27a6c404ea689bf78699c3afce57f0a",
        "patch": "@@ -207,6 +207,7 @@ struct PSBTInput\n      * @return Whether the UTXO could be retrieved\n      */\n     bool GetUTXO(CTxOut& utxo) const;\n+    COutPoint GetOutPoint() const;\n     PSBTInput(uint32_t version) : m_psbt_version(version) {}\n \n     template <typename Stream>"
      }
    ]
  },
  {
    "sha": "12bcabbab3f187a0d84a1365297f4b73008fe1b6",
    "node_id": "C_kwDOABII59oAKDEyYmNhYmJhYjNmMTg3YTBkODRhMTM2NTI5N2Y0YjczMDA4ZmUxYjY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:18:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update SignPSBTInput for PSBTv2",
      "tree": {
        "sha": "2b35cf6ff79d84de1307a5c9b0faa1deb2be655c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b35cf6ff79d84de1307a5c9b0faa1deb2be655c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12bcabbab3f187a0d84a1365297f4b73008fe1b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12bcabbab3f187a0d84a1365297f4b73008fe1b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12bcabbab3f187a0d84a1365297f4b73008fe1b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12bcabbab3f187a0d84a1365297f4b73008fe1b6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a3987cd27a6c404ea689bf78699c3afce57f0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3987cd27a6c404ea689bf78699c3afce57f0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3987cd27a6c404ea689bf78699c3afce57f0a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d4565216f9c22c82613b0eec964ea3c236d6cc65",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12bcabbab3f187a0d84a1365297f4b73008fe1b6/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12bcabbab3f187a0d84a1365297f4b73008fe1b6/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=12bcabbab3f187a0d84a1365297f4b73008fe1b6",
        "patch": "@@ -375,7 +375,7 @@ PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction&\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash, SignatureData* out_sigdata)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n-    const CMutableTransaction& tx = *psbt.tx;\n+    const CMutableTransaction& tx = psbt.GetUnsignedTx();\n \n     if (PSBTInputSigned(input)) {\n         return true;\n@@ -391,7 +391,7 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n \n     if (input.non_witness_utxo) {\n         // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n-        COutPoint prevout = tx.vin[index].prevout;\n+        COutPoint prevout = input.GetOutPoint();\n         if (prevout.n >= input.non_witness_utxo->vout.size()) {\n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "289f7b48b50c330cf568607c87e029f1cecea7e8",
    "node_id": "C_kwDOABII59oAKDI4OWY3YjQ4YjUwYzMzMGNmNTY4NjA3Yzg3ZTAyOWYxY2VjZWE3ZTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-18T23:12:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Change PrecomputePSBTData to use GetUnsignedTx",
      "tree": {
        "sha": "54123f9b8c56829785531e3a5f1652f1314978b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54123f9b8c56829785531e3a5f1652f1314978b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/289f7b48b50c330cf568607c87e029f1cecea7e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/289f7b48b50c330cf568607c87e029f1cecea7e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/289f7b48b50c330cf568607c87e029f1cecea7e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/289f7b48b50c330cf568607c87e029f1cecea7e8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12bcabbab3f187a0d84a1365297f4b73008fe1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12bcabbab3f187a0d84a1365297f4b73008fe1b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12bcabbab3f187a0d84a1365297f4b73008fe1b6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8e5c5ce7b4ff0f17d86caa28d6c230d293b0d582",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/289f7b48b50c330cf568607c87e029f1cecea7e8/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/289f7b48b50c330cf568607c87e029f1cecea7e8/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=289f7b48b50c330cf568607c87e029f1cecea7e8",
        "patch": "@@ -357,7 +357,7 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n \n PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction& psbt)\n {\n-    const CMutableTransaction& tx = *psbt.tx;\n+    const CMutableTransaction& tx = psbt.GetUnsignedTx();\n     bool have_all_spent_outputs = true;\n     std::vector<CTxOut> utxos;\n     for (const PSBTInput& input : psbt.inputs) {"
      }
    ]
  },
  {
    "sha": "7fd080c77390c4f8ba58b9b33336d818d998ec69",
    "node_id": "C_kwDOABII59oAKDdmZDA4MGM3NzM5MGM0ZjhiYTU4YjliMzMzMzZkODE4ZDk5OGVjNjk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:19:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update FinalizeAndExtract for v2",
      "tree": {
        "sha": "9b643f58b6e5ede53815032e283f0d4bc6007fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b643f58b6e5ede53815032e283f0d4bc6007fba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fd080c77390c4f8ba58b9b33336d818d998ec69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd080c77390c4f8ba58b9b33336d818d998ec69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd080c77390c4f8ba58b9b33336d818d998ec69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd080c77390c4f8ba58b9b33336d818d998ec69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "289f7b48b50c330cf568607c87e029f1cecea7e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/289f7b48b50c330cf568607c87e029f1cecea7e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/289f7b48b50c330cf568607c87e029f1cecea7e8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "451f6d11013c513c10145015d43a43f3535fbd0d",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd080c77390c4f8ba58b9b33336d818d998ec69/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd080c77390c4f8ba58b9b33336d818d998ec69/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=7fd080c77390c4f8ba58b9b33336d818d998ec69",
        "patch": "@@ -448,7 +448,7 @@ bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n     //   script.\n     bool complete = true;\n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL);\n     }\n \n@@ -463,7 +463,7 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n         return false;\n     }\n \n-    result = *psbtx.tx;\n+    result = psbtx.GetUnsignedTx();\n     for (unsigned int i = 0; i < result.vin.size(); ++i) {\n         result.vin[i].scriptSig = psbtx.inputs[i].final_script_sig;\n         result.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;"
      }
    ]
  },
  {
    "sha": "5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
    "node_id": "C_kwDOABII59oAKDVmZDhmZmI1NTJkOGNlOTNkNDNlM2M5MTUzZDI5NjBkYWIwOTQ3YTk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:21:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update AnalyzePSBT for PSBTv2",
      "tree": {
        "sha": "6e224b8e33daf8c5263af341dd652b92540eca0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e224b8e33daf8c5263af341dd652b92540eca0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd080c77390c4f8ba58b9b33336d818d998ec69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd080c77390c4f8ba58b9b33336d818d998ec69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd080c77390c4f8ba58b9b33336d818d998ec69"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "75095102ca2b19a5a81d0460cbf59552bec1db29",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
        "patch": "@@ -21,11 +21,11 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     CAmount in_amt = 0;\n \n-    result.inputs.resize(psbtx.tx->vin.size());\n+    result.inputs.resize(psbtx.inputs.size());\n \n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n \n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         PSBTInput& input = psbtx.inputs[i];\n         PSBTInputAnalysis& input_analysis = result.inputs[i];\n \n@@ -42,7 +42,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             in_amt += utxo.nValue;\n             input_analysis.has_utxo = true;\n         } else {\n-            if (input.non_witness_utxo && psbtx.tx->vin[i].prevout.n >= input.non_witness_utxo->vout.size()) {\n+            if (input.non_witness_utxo && input.prev_out >= input.non_witness_utxo->vout.size()) {\n                 result.SetInvalid(strprintf(\"PSBT is not valid. Input %u specifies invalid prevout\", i));\n                 return result;\n             }\n@@ -88,20 +88,20 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     // Calculate next role for PSBT by grabbing \"minimum\" PSBTInput next role\n     result.next = PSBTRole::EXTRACTOR;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         PSBTInputAnalysis& input_analysis = result.inputs[i];\n         result.next = std::min(result.next, input_analysis.next);\n     }\n     assert(result.next > PSBTRole::CREATOR);\n \n     if (calc_fee) {\n         // Get the output amount\n-        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), CAmount(0),\n-            [](CAmount a, const CTxOut& b) {\n-                if (!MoneyRange(a) || !MoneyRange(b.nValue) || !MoneyRange(a + b.nValue)) {\n+        CAmount out_amt = std::accumulate(psbtx.outputs.begin(), psbtx.outputs.end(), CAmount(0),\n+            [](CAmount a, const PSBTOutput& b) {\n+                if (!MoneyRange(a) || !MoneyRange(*b.amount) || !MoneyRange(a + *b.amount)) {\n                     return CAmount(-1);\n                 }\n-                return a += b.nValue;\n+                return a += *b.amount;\n             }\n         );\n         if (!MoneyRange(out_amt)) {\n@@ -114,12 +114,12 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n         result.fee = fee;\n \n         // Estimate the size\n-        CMutableTransaction mtx(*psbtx.tx);\n+        CMutableTransaction mtx(psbtx.GetUnsignedTx());\n         CCoinsView view_dummy;\n         CCoinsViewCache view(&view_dummy);\n         bool success = true;\n \n-        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n             PSBTInput& input = psbtx.inputs[i];\n             Coin newcoin;\n \n@@ -130,7 +130,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n                 mtx.vin[i].scriptSig = input.final_script_sig;\n                 mtx.vin[i].scriptWitness = input.final_script_witness;\n                 newcoin.nHeight = 1;\n-                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+                view.AddCoin(input.GetOutPoint(), std::move(newcoin), true);\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "d1dba6f48133268779cc4eb392fb6e6beac1c91d",
    "node_id": "C_kwDOABII59oAKGQxZGJhNmY0ODEzMzI2ODc3OWNjNGViMzkyZmI2ZTZiZWFjMWM5MWQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T22:59:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update PSBT Operations Dialog for v2",
      "tree": {
        "sha": "81679d9b2812143a9705b61d7800950dfd734cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81679d9b2812143a9705b61d7800950dfd734cd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1dba6f48133268779cc4eb392fb6e6beac1c91d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1dba6f48133268779cc4eb392fb6e6beac1c91d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1dba6f48133268779cc4eb392fb6e6beac1c91d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1dba6f48133268779cc4eb392fb6e6beac1c91d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fd8ffb552d8ce93d43e3c9153d2960dab0947a9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "08ed7070df0123d4c9881973557c2c9c118868d1",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1dba6f48133268779cc4eb392fb6e6beac1c91d/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1dba6f48133268779cc4eb392fb6e6beac1c91d/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=d1dba6f48133268779cc4eb392fb6e6beac1c91d",
        "patch": "@@ -170,12 +170,12 @@ std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransac\n {\n     QString tx_description = \"\";\n     CAmount totalAmount = 0;\n-    for (const CTxOut& out : psbtx.tx->vout) {\n+    for (const PSBTOutput& out : psbtx.outputs) {\n         CTxDestination address;\n-        ExtractDestination(out.scriptPubKey, address);\n-        totalAmount += out.nValue;\n+        ExtractDestination(out.script, address);\n+        totalAmount += *out.amount;\n         tx_description.append(tr(\" * Sends %1 to %2\")\n-            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *out.amount))\n             .arg(QString::fromStdString(EncodeDestination(address))));\n         tx_description.append(\"<br>\");\n     }"
      }
    ]
  },
  {
    "sha": "6552c316f67f503aa1a75a437ac723538034dde2",
    "node_id": "C_kwDOABII59oAKDY1NTJjMzE2ZjY3ZjUwM2FhMWE3NWE0MzdhYzcyMzUzODAzNGRkZTI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T23:00:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update RPCs for PSBTv2",
      "tree": {
        "sha": "1054f59aa419127a0744e4a5896b7980e42a5e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1054f59aa419127a0744e4a5896b7980e42a5e2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6552c316f67f503aa1a75a437ac723538034dde2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6552c316f67f503aa1a75a437ac723538034dde2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6552c316f67f503aa1a75a437ac723538034dde2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6552c316f67f503aa1a75a437ac723538034dde2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1dba6f48133268779cc4eb392fb6e6beac1c91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1dba6f48133268779cc4eb392fb6e6beac1c91d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1dba6f48133268779cc4eb392fb6e6beac1c91d"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 29,
      "deletions": 21
    },
    "files": [
      {
        "sha": "6cda349f2456cb7bf2a01d864709fd24208ab07e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 21,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6552c316f67f503aa1a75a437ac723538034dde2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6552c316f67f503aa1a75a437ac723538034dde2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6552c316f67f503aa1a75a437ac723538034dde2",
        "patch": "@@ -1178,10 +1178,12 @@ static RPCHelpMan decodepsbt()\n \n     UniValue result(UniValue::VOBJ);\n \n-    // Add the decoded tx\n-    UniValue tx_univ(UniValue::VOBJ);\n-    TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n-    result.pushKV(\"tx\", tx_univ);\n+    if (psbtx.tx != std::nullopt) {\n+        // Add the decoded tx\n+        UniValue tx_univ(UniValue::VOBJ);\n+        TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n+        result.pushKV(\"tx\", tx_univ);\n+    }\n \n     // Add the global xpubs\n     UniValue global_xpubs(UniValue::VARR);\n@@ -1247,7 +1249,7 @@ static RPCHelpMan decodepsbt()\n             have_a_utxo = true;\n         }\n         if (input.non_witness_utxo) {\n-            txout = input.non_witness_utxo->vout[psbtx.tx->vin[i].prevout.n];\n+            txout = input.non_witness_utxo->vout[*input.prev_out];\n \n             UniValue non_wit(UniValue::VOBJ);\n             TxToUniv(*input.non_witness_utxo, uint256(), non_wit, false);\n@@ -1405,8 +1407,8 @@ static RPCHelpMan decodepsbt()\n         outputs.push_back(out);\n \n         // Fee calculation\n-        if (MoneyRange(psbtx.tx->vout[i].nValue) && MoneyRange(output_value + psbtx.tx->vout[i].nValue)) {\n-            output_value += psbtx.tx->vout[i].nValue;\n+        if (MoneyRange(*output.amount) && MoneyRange(output_value + *output.amount)) {\n+            output_value += *output.amount;\n         } else {\n             // Hack to just not show fee later\n             have_all_utxos = false;\n@@ -1734,23 +1736,23 @@ static RPCHelpMan utxoupdatepsbt()\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n-        for (const CTxIn& txin : psbtx.tx->vin) {\n-            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        for (const PSBTInput& txin : psbtx.inputs) {\n+            view.AccessCoin(txin.GetOutPoint()); // Load entries from viewChain into view; can fail.\n         }\n \n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n     // Fill the inputs\n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n         if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n             continue;\n         }\n \n-        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+        const Coin& coin = view.AccessCoin(input.GetOutPoint());\n \n         if (IsSegWitOutput(provider, coin.out.scriptPubKey)) {\n             input.witness_utxo = coin.out;\n@@ -1763,7 +1765,7 @@ static RPCHelpMan utxoupdatepsbt()\n     }\n \n     // Update script/keypath information using descriptor data.\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.outputs.size(); ++i) {\n         UpdatePSBTOutput(public_provider, psbtx, i);\n     }\n \n@@ -1803,7 +1805,7 @@ static RPCHelpMan joinpsbts()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n     }\n \n-    uint32_t best_version = 1;\n+    int32_t best_version = 1;\n     uint32_t best_locktime = 0xffffffff;\n     for (unsigned int i = 0; i < txs.size(); ++i) {\n         PartiallySignedTransaction psbtx;\n@@ -1813,29 +1815,32 @@ static RPCHelpMan joinpsbts()\n         }\n         psbtxs.push_back(psbtx);\n         // Choose the highest version number\n-        if (static_cast<uint32_t>(psbtx.tx->nVersion) > best_version) {\n-            best_version = static_cast<uint32_t>(psbtx.tx->nVersion);\n+        if (*psbtx.tx_version > best_version) {\n+            best_version = *psbtx.tx_version;\n         }\n         // Choose the lowest lock time\n-        if (psbtx.tx->nLockTime < best_locktime) {\n-            best_locktime = psbtx.tx->nLockTime;\n+        if (*psbtx.fallback_locktime < best_locktime) {\n+            best_locktime = *psbtx.fallback_locktime;\n         }\n     }\n \n     // Create a blank psbt where everything will be added\n     PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx_version = best_version;\n+    merged_psbt.fallback_locktime = best_locktime;\n+    // TODO: Remove for PSBTv2\n     merged_psbt.tx = CMutableTransaction();\n-    merged_psbt.tx->nVersion = static_cast<int32_t>(best_version);\n+    merged_psbt.tx->nVersion = best_version;\n     merged_psbt.tx->nLockTime = best_locktime;\n \n     // Merge\n     for (auto& psbt : psbtxs) {\n-        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+        for (unsigned int i = 0; i < psbt.inputs.size(); ++i) {\n             if (!merged_psbt.AddInput(psbt.inputs[i])) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString(), psbt.tx->vin[i].prevout.n));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.inputs[i].prev_txid.ToString(), *psbt.inputs[i].prev_out));\n             }\n         }\n-        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+        for (unsigned int i = 0; i < psbt.outputs.size(); ++i) {\n             merged_psbt.AddOutput(psbt.outputs[i]);\n         }\n         for (auto& xpub_pair : psbt.m_xpubs) {\n@@ -1859,6 +1864,9 @@ static RPCHelpMan joinpsbts()\n     Shuffle(output_indices.begin(), output_indices.end(), FastRandomContext());\n \n     PartiallySignedTransaction shuffled_psbt;\n+    shuffled_psbt.tx_version = merged_psbt.tx_version;\n+    shuffled_psbt.fallback_locktime = merged_psbt.fallback_locktime;\n+    // TODO: Remove for PSBTv2\n     shuffled_psbt.tx = CMutableTransaction();\n     shuffled_psbt.tx->nVersion = merged_psbt.tx->nVersion;\n     shuffled_psbt.tx->nLockTime = merged_psbt.tx->nLockTime;"
      }
    ]
  },
  {
    "sha": "ea462ac9a89d1eb647f67484485d7705e96dcfbb",
    "node_id": "C_kwDOABII59oAKGVhNDYyYWM5YTg5ZDFlYjY0N2Y2NzQ4NDQ4NWQ3NzA1ZTk2ZGNmYmI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-11T23:00:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update wallet for PSBTv2",
      "tree": {
        "sha": "e04f082b605ea56439effaff2f10625b800bbf8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e04f082b605ea56439effaff2f10625b800bbf8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea462ac9a89d1eb647f67484485d7705e96dcfbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea462ac9a89d1eb647f67484485d7705e96dcfbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea462ac9a89d1eb647f67484485d7705e96dcfbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea462ac9a89d1eb647f67484485d7705e96dcfbb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6552c316f67f503aa1a75a437ac723538034dde2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6552c316f67f503aa1a75a437ac723538034dde2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6552c316f67f503aa1a75a437ac723538034dde2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 11,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b98f7b1b7525cbcaaa18dc3791b9d684724009ed",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ea462ac9a89d1eb647f67484485d7705e96dcfbb",
        "patch": "@@ -615,8 +615,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n     if (n_signed) {\n         *n_signed = 0;\n     }\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n         if (PSBTInputSigned(input)) {\n@@ -630,7 +629,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n \n         // Check non_witness_utxo has specified prevout\n         if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+            if (*input.prev_out >= input.non_witness_utxo->vout.size()) {\n                 return TransactionError::MISSING_INPUTS;\n             }\n         } else if (input.witness_utxo.IsNull()) {\n@@ -651,7 +650,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+    for (unsigned int i = 0; i < psbtx.outputs.size(); ++i) {\n         UpdatePSBTOutput(HidingSigningProvider(this, true, !bip32derivs), psbtx, i);\n     }\n \n@@ -2083,8 +2082,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n     if (n_signed) {\n         *n_signed = 0;\n     }\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n         if (PSBTInputSigned(input)) {\n@@ -2101,10 +2099,10 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n         if (!input.witness_utxo.IsNull()) {\n             script = input.witness_utxo.scriptPubKey;\n         } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+            if (*input.prev_out >= input.non_witness_utxo->vout.size()) {\n                 return TransactionError::MISSING_INPUTS;\n             }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+            script = input.non_witness_utxo->vout[*input.prev_out].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n             continue;\n@@ -2140,8 +2138,8 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        std::unique_ptr<SigningProvider> keys = GetSolvingProvider(psbtx.tx->vout.at(i).scriptPubKey);\n+    for (unsigned int i = 0; i < psbtx.outputs.size(); ++i) {\n+        std::unique_ptr<SigningProvider> keys = GetSolvingProvider(psbtx.outputs.at(i).script);\n         if (!keys) {\n             continue;\n         }"
      },
      {
        "sha": "02c63e6015d5941d0b3739496de07eb8811a6249",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=ea462ac9a89d1eb647f67484485d7705e96dcfbb",
        "patch": "@@ -63,6 +63,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Mutate the transaction so that one of the inputs is invalid\n     psbtx.tx->vin[0].prevout.n = 2;\n+    psbtx.inputs[0].prev_out = 2;\n \n     // Try to sign the mutated input\n     SignatureData sigdata;"
      },
      {
        "sha": "7949fbc5aaa36cb204b198a51eaf59c8485182d4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea462ac9a89d1eb647f67484485d7705e96dcfbb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ea462ac9a89d1eb647f67484485d7705e96dcfbb",
        "patch": "@@ -1860,17 +1860,14 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     LOCK(cs_wallet);\n     // Get all of the previous transactions\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n+    for (PSBTInput& input : psbtx.inputs) {\n         if (PSBTInputSigned(input)) {\n             continue;\n         }\n \n         // If we have no utxo, grab it from the wallet.\n         if (!input.non_witness_utxo) {\n-            const uint256& txhash = txin.prevout.hash;\n+            const uint256& txhash = input.prev_txid;\n             const auto it = mapWallet.find(txhash);\n             if (it != mapWallet.end()) {\n                 const CWalletTx& wtx = it->second;"
      }
    ]
  },
  {
    "sha": "f037714b51bccf93f55ab9bed7287ec34a82310a",
    "node_id": "C_kwDOABII59oAKGYwMzc3MTRiNTFiY2NmOTNmNTVhYjliZWQ3Mjg3ZWMzNGE4MjMxMGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-18T20:27:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Implement PSBTv2 AddInput and AddOutput",
      "tree": {
        "sha": "fbb0aa36ad17dca3523f9648e3b01ba6fa48ce0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbb0aa36ad17dca3523f9648e3b01ba6fa48ce0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f037714b51bccf93f55ab9bed7287ec34a82310a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f037714b51bccf93f55ab9bed7287ec34a82310a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f037714b51bccf93f55ab9bed7287ec34a82310a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f037714b51bccf93f55ab9bed7287ec34a82310a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea462ac9a89d1eb647f67484485d7705e96dcfbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea462ac9a89d1eb647f67484485d7705e96dcfbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea462ac9a89d1eb647f67484485d7705e96dcfbb"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 73,
      "deletions": 5
    },
    "files": [
      {
        "sha": "023fc1338b918a4e62e31b2e0f1303a71f0f66f1",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 5,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f037714b51bccf93f55ab9bed7287ec34a82310a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f037714b51bccf93f55ab9bed7287ec34a82310a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=f037714b51bccf93f55ab9bed7287ec34a82310a",
        "patch": "@@ -130,7 +130,10 @@ uint256 PartiallySignedTransaction::GetUniqueID() const\n \n bool PartiallySignedTransaction::AddInput(PSBTInput& psbtin)\n {\n-    if (std::find_if(inputs.begin(), inputs.end(),\n+    // Check required fields are present and this input is not a duplicate\n+    if (psbtin.prev_txid.IsNull() ||\n+        psbtin.prev_out == std::nullopt ||\n+        std::find_if(inputs.begin(), inputs.end(),\n         [psbtin](const PSBTInput& psbt) {\n             return psbt.prev_txid == psbtin.prev_txid && psbt.prev_out == psbtin.prev_out;\n         }\n@@ -152,12 +155,71 @@ bool PartiallySignedTransaction::AddInput(PSBTInput& psbtin)\n         return true;\n     }\n \n-    // TODO: Do PSBTv2\n-    return false;\n+    // No global tx, must be PSBTv2.\n+    // Check inputs modifiable flag\n+    if (m_tx_modifiable == std::nullopt || !m_tx_modifiable->test(0)) {\n+        return false;\n+    }\n+\n+    // Determine if we need to iterate the inputs.\n+    // For now, we only do this if the new input has a required time lock.\n+    // The BIP states that we should also do this if m_tx_modifiable's bit 2 is set\n+    // (Has SIGHASH_SINGLE flag) but since we are only adding inputs at the end of the vector,\n+    // we don't care about that.\n+    bool iterate_inputs = psbtin.time_locktime != std::nullopt || psbtin.height_locktime != std::nullopt;\n+    if (iterate_inputs) {\n+        uint32_t old_timelock;\n+        if (!ComputeTimeLock(old_timelock)) {\n+            return false;\n+        }\n+\n+        std::optional<uint32_t> time_lock = psbtin.time_locktime;\n+        std::optional<uint32_t> height_lock = psbtin.height_locktime;\n+        bool has_sigs = false;\n+        for (const PSBTInput& input : inputs) {\n+            if (input.time_locktime != std::nullopt && input.height_locktime == std::nullopt) {\n+                height_lock.reset(); // Transaction can no longer have a height locktime\n+                if (time_lock == std::nullopt) {\n+                    return false;\n+                }\n+            } else if (input.time_locktime == std::nullopt && input.height_locktime != std::nullopt) {\n+                time_lock.reset(); // Transaction can no longer have a time locktime\n+                if (height_lock == std::nullopt) {\n+                    return false;\n+                }\n+            }\n+            if (input.time_locktime && time_lock != std::nullopt) {\n+                time_lock = std::max(time_lock, input.time_locktime);\n+            }\n+            if (input.height_locktime && height_lock != std::nullopt) {\n+                height_lock = std::max(height_lock, input.height_locktime);\n+            }\n+            if (!input.partial_sigs.empty()) {\n+                has_sigs = true;\n+            }\n+        }\n+        uint32_t new_timelock = fallback_locktime.value_or(0);\n+        if (height_lock != std::nullopt && *height_lock > 0) {\n+            new_timelock = *height_lock;\n+        } else if (time_lock != std::nullopt && *time_lock > 0) {\n+            new_timelock = *time_lock;\n+        }\n+        if (has_sigs && old_timelock != new_timelock) {\n+            return false;\n+        }\n+    }\n+\n+    // Add the input to the end\n+    inputs.push_back(psbtin);\n+    return true;\n }\n \n bool PartiallySignedTransaction::AddOutput(const PSBTOutput& psbtout)\n {\n+    if (psbtout.amount == std::nullopt || psbtout.script.empty()) {\n+        return false;\n+    }\n+\n     if (tx != std::nullopt) {\n         // This is a v0 psbt, do the v0 AddOutput\n         CTxOut txout(*psbtout.amount, psbtout.script);\n@@ -166,8 +228,14 @@ bool PartiallySignedTransaction::AddOutput(const PSBTOutput& psbtout)\n         return true;\n     }\n \n-    // TOOD: Do PSBTv2\n-    return false;\n+    // No global tx, must be PSBTv2\n+    // Check outputs are modifiable\n+    if (m_tx_modifiable == std::nullopt || !m_tx_modifiable->test(1)) {\n+        return false;\n+    }\n+    outputs.push_back(psbtout);\n+\n+    return true;\n }\n \n bool PSBTInput::GetUTXO(CTxOut& utxo) const"
      }
    ]
  },
  {
    "sha": "3333f301b2434547bf827c49c25ea26291905380",
    "node_id": "C_kwDOABII59oAKDMzMzNmMzAxYjI0MzQ1NDdiZjgyN2M0OWMyNWVhMjYyOTE5MDUzODA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-18T21:31:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Implement PSBTv2 in decodepsbt",
      "tree": {
        "sha": "72975ce746f271d4a77c7e6f42ea8c05398ad885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72975ce746f271d4a77c7e6f42ea8c05398ad885"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3333f301b2434547bf827c49c25ea26291905380",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333f301b2434547bf827c49c25ea26291905380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3333f301b2434547bf827c49c25ea26291905380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333f301b2434547bf827c49c25ea26291905380/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f037714b51bccf93f55ab9bed7287ec34a82310a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f037714b51bccf93f55ab9bed7287ec34a82310a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f037714b51bccf93f55ab9bed7287ec34a82310a"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 67,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3c5058ded9ad7f6ccf5cee6a67590c248a561086",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3333f301b2434547bf827c49c25ea26291905380/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3333f301b2434547bf827c49c25ea26291905380/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3333f301b2434547bf827c49c25ea26291905380",
        "patch": "@@ -1033,7 +1033,16 @@ static RPCHelpMan decodepsbt()\n                                 {RPCResult::Type::STR, \"path\", \"The path\"},\n                             }},\n                         }},\n-                        {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n+                        {RPCResult::Type::NUM, \"tx_version\", /* optional */ true, \"The version number of the unsigned transaction. Not to be confused with PSBT version\"},\n+                        {RPCResult::Type::NUM, \"fallback_locktime\", /* optional */ true, \"The locktime to fallback to if no inputs specify a required locktime.\"},\n+                        {RPCResult::Type::NUM, \"input_count\", /* optional */ true, \"The number of inputs in this psbt\"},\n+                        {RPCResult::Type::NUM, \"output_count\", /* optional */ true, \"The number of outputs in this psbt.\"},\n+                        {RPCResult::Type::NUM, \"inputs_modifiable\", /* optional */ true, \"Whether inputs can be modified\"},\n+                        {RPCResult::Type::NUM, \"outputs_modifiable\", /* optional */ true, \"Whether outputs can be modified\"},\n+                        {RPCResult::Type::ARR, \"sighash_single_indexes\", /* optional */ true, \"The indexes which have SIGHASH_SINGLE signatures\",\n+                            {{RPCResult::Type::NUM, \"\", \"Index of an input with a SIGHASH_SINGLE signature\"}},\n+                        },\n+                        {RPCResult::Type::NUM, \"psbt_version\", /* optional */ true, \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n                         {RPCResult::Type::ARR, \"proprietary\", \"The global proprietary map\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n@@ -1102,6 +1111,11 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"\", \"hex-encoded witness data (if any)\"},\n                                 }},\n+                                {RPCResult::Type::STR_HEX, \"previous_txid\", /*optional */ true, \"TXID of the transaction containing the output being spent by this input.\"},\n+                                {RPCResult::Type::NUM, \"previous_vout\", /* optional */ true, \"Index of the output being spent\"},\n+                                {RPCResult::Type::NUM, \"sequence\", /* optional */ true, \"Sequence number for this inputs\"},\n+                                {RPCResult::Type::NUM, \"time_locktime\", /* optional */ true, \"Required time-based locktime for this input\"},\n+                                {RPCResult::Type::NUM, \"height_locktime\", /* optional */ true, \"Required height-based locktime for this input\"},\n                                 {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1143,6 +1157,10 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n+                                {RPCResult::Type::NUM, \"amount\", /* optional */ true, \"The amount (nValue) for this output\"},\n+                                {RPCResult::Type::OBJ, \"script\", /* optional */ true, \"The output script (scriptPubKey) for this output\",\n+                                    {{RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of scriptPubKeys in decoderawtransaction.\"}},\n+                                },\n                                 {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1202,6 +1220,23 @@ static RPCHelpMan decodepsbt()\n     }\n     result.pushKV(\"global_xpubs\", global_xpubs);\n \n+    // Add PSBTv2 stuff\n+    if (psbtx.GetVersion() == 2) {\n+        if (psbtx.tx_version != std::nullopt) {\n+            result.pushKV(\"tx_version\", *psbtx.tx_version);\n+        }\n+        if (psbtx.fallback_locktime != std::nullopt) {\n+            result.pushKV(\"fallback_locktime\", static_cast<uint64_t>(*psbtx.fallback_locktime));\n+        }\n+        result.pushKV(\"input_count\", (uint64_t)psbtx.inputs.size());\n+        result.pushKV(\"output_count\", (uint64_t)psbtx.outputs.size());\n+        if (psbtx.m_tx_modifiable != std::nullopt) {\n+            result.pushKV(\"inputs_modifiable\", psbtx.m_tx_modifiable->test(0));\n+            result.pushKV(\"outputs_modifiable\", psbtx.m_tx_modifiable->test(1));\n+            result.pushKV(\"has_sighash_single\", psbtx.m_tx_modifiable->test(2));\n+        }\n+    }\n+\n     // PSBT version\n     result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n \n@@ -1323,6 +1358,25 @@ static RPCHelpMan decodepsbt()\n             in.pushKV(\"final_scriptwitness\", txinwitness);\n         }\n \n+        // PSBTv2\n+        if (psbtx.GetVersion() == 2) {\n+            if (!input.prev_txid.IsNull()) {\n+                in.pushKV(\"previous_txid\", input.prev_txid.GetHex());\n+            }\n+            if (input.prev_out != std::nullopt) {\n+                in.pushKV(\"previous_vout\", static_cast<uint64_t>(*input.prev_out));\n+            }\n+            if (input.sequence != std::nullopt) {\n+                in.pushKV(\"sequence\", static_cast<uint64_t>(*input.sequence));\n+            }\n+            if (input.time_locktime != std::nullopt) {\n+                in.pushKV(\"time_locktime\", static_cast<uint64_t>(*input.time_locktime));\n+            }\n+            if (input.height_locktime!= std::nullopt) {\n+                in.pushKV(\"height_locktime\", static_cast<uint64_t>(*input.height_locktime));\n+            }\n+        }\n+\n         // Proprietary\n         if (!input.m_proprietary.empty()) {\n             UniValue proprietary(UniValue::VARR);\n@@ -1381,6 +1435,18 @@ static RPCHelpMan decodepsbt()\n             out.pushKV(\"bip32_derivs\", keypaths);\n         }\n \n+        // PSBTv2 stuff\n+        if (psbtx.GetVersion() == 2) {\n+            if (output.amount != std::nullopt) {\n+                out.pushKV(\"amount\", ValueFromAmount(*output.amount));\n+            }\n+            if (!output.script.empty()) {\n+                UniValue spk(UniValue::VOBJ);\n+                ScriptPubKeyToUniv(output.script, spk, true /* fIncludeHex */);\n+                out.pushKV(\"script\", spk);\n+            }\n+        }\n+\n         // Proprietary\n         if (!output.m_proprietary.empty()) {\n             UniValue proprietary(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
    "node_id": "C_kwDOABII59oAKDUyNGNjN2FjMWQwNjU5NWE0Y2E1MTRjNzliZjU5NDU4ZjJhNWQwZDQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-18T21:55:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Allow specifying PSBT version in constructor",
      "tree": {
        "sha": "e32a287e4137b7a93636d18254321c865ba6e4e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e32a287e4137b7a93636d18254321c865ba6e4e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3333f301b2434547bf827c49c25ea26291905380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333f301b2434547bf827c49c25ea26291905380",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3333f301b2434547bf827c49c25ea26291905380"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8bf7bc8cae1db3c01993a75820f19fe88bfb37f5",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
        "patch": "@@ -9,11 +9,14 @@\n #include <util/strencodings.h>\n \n \n-PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n+PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx, uint32_t version) : m_version(version)\n {\n+    if (version == 0) {\n+        this->tx = tx;\n+    }\n     inputs.resize(tx.vin.size(), PSBTInput(GetVersion()));\n     outputs.resize(tx.vout.size(), PSBTOutput(GetVersion()));\n-    CacheUnsignedTxPieces();\n+    SetupFromTx(tx);\n }\n \n bool PartiallySignedTransaction::IsNull() const"
      },
      {
        "sha": "e6aec43e96fb4e26a24698acc3d1eb98058d7208",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
        "patch": "@@ -756,7 +756,7 @@ struct PartiallySignedTransaction\n     CMutableTransaction GetUnsignedTx() const;\n     uint256 GetUniqueID() const;\n     PartiallySignedTransaction() {}\n-    explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    explicit PartiallySignedTransaction(const CMutableTransaction& tx, uint32_t version = 0);\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {"
      }
    ]
  },
  {
    "sha": "5b132e9e29ff7debc75d59d9ffd465dda86dafef",
    "node_id": "C_kwDOABII59oAKDViMTMyZTllMjlmZjdkZWJjNzVkNTlkOWZmZDQ2NWRkYTg2ZGFmZWY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-18T22:12:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Update PSBT::UpdatePSBTOutput to use GetUnsignedTx",
      "tree": {
        "sha": "32ada4db8e407ece7b4fea9243821cbebcb07fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32ada4db8e407ece7b4fea9243821cbebcb07fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b132e9e29ff7debc75d59d9ffd465dda86dafef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b132e9e29ff7debc75d59d9ffd465dda86dafef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b132e9e29ff7debc75d59d9ffd465dda86dafef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b132e9e29ff7debc75d59d9ffd465dda86dafef/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/524cc7ac1d06595a4ca514c79bf59458f2a5d0d4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4ccb91772916a8cab8731422dc709c9fab7d89d4",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b132e9e29ff7debc75d59d9ffd465dda86dafef/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b132e9e29ff7debc75d59d9ffd465dda86dafef/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=5b132e9e29ff7debc75d59d9ffd465dda86dafef",
        "patch": "@@ -408,7 +408,7 @@ size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction& psbt) {\n \n void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index)\n {\n-    CMutableTransaction& tx = *Assert(psbt.tx);\n+    CMutableTransaction tx = psbt.GetUnsignedTx();\n     const CTxOut& out = tx.vout.at(index);\n     PSBTOutput& psbt_out = psbt.outputs.at(index);\n "
      }
    ]
  },
  {
    "sha": "3f1bb3bcd2165adc34777f88033fff481209a57e",
    "node_id": "C_kwDOABII59oAKDNmMWJiM2JjZDIxNjVhZGMzNDc3N2Y4ODAzM2ZmZjQ4MTIwOWE1N2U",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-25T21:11:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Restrict joinpsbts to PSBTv0 only",
      "tree": {
        "sha": "33a23ea26b47be87c0e11d2207564889ca306918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33a23ea26b47be87c0e11d2207564889ca306918"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f1bb3bcd2165adc34777f88033fff481209a57e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1bb3bcd2165adc34777f88033fff481209a57e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1bb3bcd2165adc34777f88033fff481209a57e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1bb3bcd2165adc34777f88033fff481209a57e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b132e9e29ff7debc75d59d9ffd465dda86dafef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b132e9e29ff7debc75d59d9ffd465dda86dafef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b132e9e29ff7debc75d59d9ffd465dda86dafef"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cf0a0efdd293e53aa05d036afe289893ffce040f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1bb3bcd2165adc34777f88033fff481209a57e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1bb3bcd2165adc34777f88033fff481209a57e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3f1bb3bcd2165adc34777f88033fff481209a57e",
        "patch": "@@ -1879,6 +1879,9 @@ static RPCHelpMan joinpsbts()\n         if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n         }\n+        if (psbtx.GetVersion() != 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"joinpsbts only operates on version 0 PSBTs\");\n+        }\n         psbtxs.push_back(psbtx);\n         // Choose the highest version number\n         if (*psbtx.tx_version > best_version) {"
      }
    ]
  },
  {
    "sha": "192e900aa7c01dc02753688f03d6ab714e1dc680",
    "node_id": "C_kwDOABII59oAKDE5MmU5MDBhYTdjMDFkYzAyNzUzNjg4ZjAzZDZhYjcxNGUxZGM2ODA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-18T22:13:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T00:21:15Z"
      },
      "message": "Allow createpsbt and walletcreatefundedpsbt to take psbt version\n\nUse v2 for other RPCs. For some tests to work, PSBTv0 is set explicitly.",
      "tree": {
        "sha": "615c516e33d1b84587de70600dc2f3b706b72105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/615c516e33d1b84587de70600dc2f3b706b72105"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/192e900aa7c01dc02753688f03d6ab714e1dc680",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192e900aa7c01dc02753688f03d6ab714e1dc680",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/192e900aa7c01dc02753688f03d6ab714e1dc680",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192e900aa7c01dc02753688f03d6ab714e1dc680/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f1bb3bcd2165adc34777f88033fff481209a57e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1bb3bcd2165adc34777f88033fff481209a57e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1bb3bcd2165adc34777f88033fff481209a57e"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 80,
      "deletions": 58
    },
    "files": [
      {
        "sha": "d9dd55998edf9258bd91992c84055b1f8a033b35",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -68,7 +68,7 @@ static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n \n // PSBT version number\n-static constexpr uint32_t PSBT_HIGHEST_VERSION = 0;\n+static constexpr uint32_t PSBT_HIGHEST_VERSION = 2;\n \n /** A structure for PSBT proprietary types */\n struct PSBTProprietary"
      },
      {
        "sha": "3fc0e2a638f24cac1ba7d15327310a01d3e58ffb",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -113,12 +113,14 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 2, \"locktime\" },\n     { \"walletcreatefundedpsbt\", 3, \"options\" },\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n+    { \"walletcreatefundedpsbt\", 5, \"psbt_version\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },\n     { \"createpsbt\", 3, \"replaceable\" },\n+    { \"createpsbt\", 4, \"psbt_version\" },\n     { \"combinepsbt\", 0, \"txs\"},\n     { \"joinpsbts\", 0, \"txs\"},\n     { \"finalizepsbt\", 1, \"extract\"},"
      },
      {
        "sha": "4c5908cea0a4e90fe350186eea58b544f69b5f96",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -1636,6 +1636,7 @@ static RPCHelpMan createpsbt()\n                     {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n+                    {\"psbt_version\", RPCArg::Type::NUM, RPCArg::Default{2}, \"The PSBT version number to use.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR, \"\", \"The resulting raw transaction (base64-encoded string)\"\n@@ -1651,6 +1652,7 @@ static RPCHelpMan createpsbt()\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n         UniValue::VBOOL,\n+        UniValue::VNUM,\n         }, true\n     );\n \n@@ -1661,15 +1663,16 @@ static RPCHelpMan createpsbt()\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     // Make a blank psbt\n-    PartiallySignedTransaction psbtx;\n-    psbtx.tx = rawTx;\n-    for (unsigned int i = 0; i < rawTx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput(0));\n+    uint32_t psbt_version = 2;\n+    if (!request.params[4].isNull()) {\n+        psbt_version = request.params[4].get_int();\n     }\n-    for (unsigned int i = 0; i < rawTx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput(0));\n+    if (psbt_version != 2 && psbt_version != 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"The PSBT version can only be 2 or 0\");\n     }\n \n+    PartiallySignedTransaction psbtx(rawTx, psbt_version);\n+\n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n@@ -1730,14 +1733,7 @@ static RPCHelpMan converttopsbt()\n     }\n \n     // Make a blank psbt\n-    PartiallySignedTransaction psbtx;\n-    psbtx.tx = tx;\n-    for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput(0));\n-    }\n-    for (unsigned int i = 0; i < tx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput(0));\n-    }\n+    PartiallySignedTransaction psbtx(tx, 2 /* version */);\n \n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "f9c39d5a72c45e00543e793cac0685aa48014dc3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -3790,7 +3790,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n \n         result.pushKV(\"txid\", txid.GetHex());\n     } else {\n-        PartiallySignedTransaction psbtx(mtx);\n+        PartiallySignedTransaction psbtx(mtx, 2 /* version */);\n         bool complete = false;\n         const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false /* sign */, true /* bip32derivs */);\n         CHECK_NONFATAL(err == TransactionError::OK);\n@@ -4421,7 +4421,7 @@ static RPCHelpMan send()\n             }\n \n             // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            PartiallySignedTransaction psbtx(rawTx, 2 /* version */);\n \n             // First fill transaction with our data without signing,\n             // so external signers are not asked sign more than once.\n@@ -4670,6 +4670,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                         FundTxDoc()),\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"psbt_version\", RPCArg::Type::NUM, RPCArg::Default(2), \"The PSBT version number to use.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -4698,7 +4699,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n         UniValue::VOBJ,\n-        UniValue::VBOOL\n+        UniValue::VBOOL,\n+        UniValue::VNUM\n         }, true\n     );\n \n@@ -4718,7 +4720,15 @@ static RPCHelpMan walletcreatefundedpsbt()\n     FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n-    PartiallySignedTransaction psbtx(rawTx);\n+    uint32_t psbt_version = 2;\n+    if (!request.params[5].isNull()) {\n+        psbt_version = request.params[5].get_int();\n+    }\n+    if (psbt_version != 2 && psbt_version != 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"The PSBT version can only be 2 or 0\");\n+    }\n+\n+    PartiallySignedTransaction psbtx(rawTx, 2 /* version */);\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();"
      },
      {
        "sha": "688ee1e55a599031b40875e2c102a0a20356cd7b",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -62,6 +62,7 @@\n                     \"bcrt1qqzh2ngh97ru8dfvgma25d6r595wcwqy0cee4cc\": 1\n                 }\n             ],\n+            \"version\": 0,\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAAAAAA=\"\n         }\n     ],"
      },
      {
        "sha": "758b529a8b6086f5a701f8a89d6109dbbacb05ab",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 44,
        "deletions": 31,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -89,7 +89,7 @@ def assert_change_type(self, psbtx, expected_type):\n         # The decodepsbt RPC is stateless and independent of any settings, we can always just call it on the first node\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx[\"psbt\"])\n         changepos = psbtx[\"changepos\"]\n-        assert_equal(decoded_psbt[\"tx\"][\"vout\"][changepos][\"scriptPubKey\"][\"type\"], expected_type)\n+        assert_equal(decoded_psbt[\"outputs\"][changepos][\"script\"][\"type\"], expected_type)\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n@@ -100,7 +100,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90})\n \n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90}, 0, {\"add_inputs\": True})['psbt']\n-        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 2)\n+        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['inputs']), 2)\n \n         # Inputs argument can be null\n         self.nodes[0].walletcreatefundedpsbt(None, {self.nodes[2].getnewaddress():10})\n@@ -327,12 +327,14 @@ def run_test(self):\n         # Update psbts, should only have data for one input and not the other\n         psbt1 = self.nodes[1].walletprocesspsbt(psbt_orig, False, \"ALL\")['psbt']\n         psbt1_decoded = self.nodes[0].decodepsbt(psbt1)\n-        assert psbt1_decoded['inputs'][0] and not psbt1_decoded['inputs'][1]\n+        assert len(psbt1_decoded['inputs'][0].keys()) > 3\n+        assert len(psbt1_decoded['inputs'][1].keys()) == 3\n         # Check that BIP32 path was added\n         assert \"bip32_derivs\" in psbt1_decoded['inputs'][0]\n         psbt2 = self.nodes[2].walletprocesspsbt(psbt_orig, False, \"ALL\", False)['psbt']\n         psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n-        assert not psbt2_decoded['inputs'][0] and psbt2_decoded['inputs'][1]\n+        assert len(psbt2_decoded['inputs'][0].keys()) == 3\n+        assert len(psbt2_decoded['inputs'][1].keys()) > 3\n         # Check that BIP32 paths were not added\n         assert \"bip32_derivs\" not in psbt2_decoded['inputs'][1]\n \n@@ -354,33 +356,33 @@ def run_test(self):\n         unspent = self.nodes[0].listunspent()[0]\n         psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\": False, \"add_inputs\": True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-            assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        for psbt_in in decoded_psbt[\"inputs\"]:\n+            assert_greater_than(psbt_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" not in psbt_in\n-        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n+        assert_equal(decoded_psbt[\"fallback_locktime\"], block_height+2)\n \n         # Same construction with only locktime set and RBF explicitly enabled\n         psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {\"replaceable\": True, \"add_inputs\": True}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        for psbt_in in decoded_psbt[\"inputs\"]:\n+            assert_equal(psbt_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" in psbt_in\n-        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n+        assert_equal(decoded_psbt[\"fallback_locktime\"], block_height)\n \n         # Same construction without optional arguments\n         psbtx_info = self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        for psbt_in in decoded_psbt[\"inputs\"]:\n+            assert_equal(psbt_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" in psbt_in\n-        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n+        assert_equal(decoded_psbt[\"fallback_locktime\"], 0)\n \n         # Same construction without optional arguments, for a node with -walletrbf=0\n         unspent1 = self.nodes[1].listunspent()[0]\n         psbtx_info = self.nodes[1].walletcreatefundedpsbt([{\"txid\":unspent1[\"txid\"], \"vout\":unspent1[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent1[\"amount\"]+1}], block_height, {\"add_inputs\": True})\n         decoded_psbt = self.nodes[1].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-            assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        for psbt_in in decoded_psbt[\"inputs\"]:\n+            assert_greater_than(psbt_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" in psbt_in\n \n         # Make sure change address wallet does not have P2SH innerscript access to results in success\n@@ -446,7 +448,7 @@ def run_test(self):\n \n         # Creator Tests\n         for creator in creators:\n-            created_tx = self.nodes[0].createpsbt(creator['inputs'], creator['outputs'])\n+            created_tx = self.nodes[0].createpsbt(inputs=creator['inputs'], outputs=creator['outputs'], psbt_version=creator['version'])\n             assert_equal(created_tx, creator['result'])\n \n         # Signer tests\n@@ -503,55 +505,66 @@ def run_test(self):\n         vout3 = find_output(self.nodes[0], txid3, 11)\n         self.sync_all()\n \n+        psbt_v2_required_keys = [\"previous_vout\", \"sequence\", \"previous_txid\"]\n+\n         def test_psbt_input_keys(psbt_input, keys):\n             \"\"\"Check that the psbt input has only the expected keys.\"\"\"\n             assert_equal(set(keys), set(psbt_input.keys()))\n \n         # Create a PSBT. None of the inputs are filled initially\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n         decoded = self.nodes[1].decodepsbt(psbt)\n-        test_psbt_input_keys(decoded['inputs'][0], [])\n-        test_psbt_input_keys(decoded['inputs'][1], [])\n-        test_psbt_input_keys(decoded['inputs'][2], [])\n+        test_psbt_input_keys(decoded['inputs'][0], psbt_v2_required_keys)\n+        test_psbt_input_keys(decoded['inputs'][1], psbt_v2_required_keys)\n+        test_psbt_input_keys(decoded['inputs'][2], psbt_v2_required_keys)\n \n         # Update a PSBT with UTXOs from the node\n         # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n         updated = self.nodes[1].utxoupdatepsbt(psbt)\n         decoded = self.nodes[1].decodepsbt(updated)\n-        test_psbt_input_keys(decoded['inputs'][0], ['witness_utxo'])\n-        test_psbt_input_keys(decoded['inputs'][1], [])\n-        test_psbt_input_keys(decoded['inputs'][2], [])\n+        test_psbt_input_keys(decoded['inputs'][0], psbt_v2_required_keys + ['witness_utxo'])\n+        test_psbt_input_keys(decoded['inputs'][1], psbt_v2_required_keys)\n+        test_psbt_input_keys(decoded['inputs'][2], psbt_v2_required_keys)\n \n         # Try again, now while providing descriptors, making P2SH-segwit work, and causing bip32_derivs and redeem_script to be filled in\n         descs = [self.nodes[1].getaddressinfo(addr)['desc'] for addr in [addr1,addr2,addr3]]\n         updated = self.nodes[1].utxoupdatepsbt(psbt=psbt, descriptors=descs)\n         decoded = self.nodes[1].decodepsbt(updated)\n-        test_psbt_input_keys(decoded['inputs'][0], ['witness_utxo', 'bip32_derivs'])\n-        test_psbt_input_keys(decoded['inputs'][1], [])\n-        test_psbt_input_keys(decoded['inputs'][2], ['witness_utxo', 'bip32_derivs', 'redeem_script'])\n+        test_psbt_input_keys(decoded['inputs'][0], psbt_v2_required_keys + ['witness_utxo', 'bip32_derivs'])\n+        test_psbt_input_keys(decoded['inputs'][1], psbt_v2_required_keys)\n+        test_psbt_input_keys(decoded['inputs'][2], psbt_v2_required_keys + ['witness_utxo', 'bip32_derivs', 'redeem_script'])\n+\n+        # Cannot join PSBTv2s\n+        psbt1 = self.nodes[1].createpsbt(inputs=[{\"txid\":txid1, \"vout\":vout1}], outputs={self.nodes[0].getnewaddress():Decimal('10.999')}, psbt_version=0)\n+        psbt2 = self.nodes[1].createpsbt(inputs=[{\"txid\":txid1, \"vout\":vout1}], outputs={self.nodes[0].getnewaddress():Decimal('10.999')}, psbt_version=2)\n+        assert_raises_rpc_error(-8, \"joinpsbts only operates on version 0 PSBTs\", self.nodes[1].joinpsbts, [psbt1, psbt2])\n \n         # Two PSBTs with a common input should not be joinable\n-        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():Decimal('10.999')})\n-        assert_raises_rpc_error(-8, \"exists in multiple PSBTs\", self.nodes[1].joinpsbts, [psbt1, updated])\n+        psbt2 = self.nodes[1].createpsbt(inputs=[{\"txid\":txid1, \"vout\":vout1}], outputs={self.nodes[0].getnewaddress():Decimal('10.999')}, psbt_version=0)\n+        assert_raises_rpc_error(-8, \"exists in multiple PSBTs\", self.nodes[1].joinpsbts, [psbt1, psbt2])\n \n         # Join two distinct PSBTs\n+        psbt1 = self.nodes[1].createpsbt(inputs=[{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], outputs={self.nodes[0].getnewaddress():32.999}, psbt_version=0)\n         addr4 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n         txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n         vout4 = find_output(self.nodes[0], txid4, 5)\n         self.generate(self.nodes[0], 6)\n-        psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n+        psbt2 = self.nodes[1].createpsbt(inputs=[{\"txid\":txid4, \"vout\":vout4}], outputs={self.nodes[0].getnewaddress():Decimal('4.999')}, psbt_version=0)\n         psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n         psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n         assert \"final_scriptwitness\" in psbt2_decoded['inputs'][0] and \"final_scriptSig\" in psbt2_decoded['inputs'][0]\n-        joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+        joined = self.nodes[0].joinpsbts([psbt1, psbt2])\n         joined_decoded = self.nodes[0].decodepsbt(joined)\n-        assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n+        assert_equal(len(joined_decoded['inputs']), 4)\n+        assert_equal(len(joined_decoded['outputs']), 2)\n+        assert \"final_scriptwitness\" not in joined_decoded['inputs'][3]\n+        assert \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n         # Check that joining shuffles the inputs and outputs\n         # 10 attempts should be enough to get a shuffled join\n         shuffled = False\n         for _ in range(10):\n-            shuffled_joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+            shuffled_joined = self.nodes[0].joinpsbts([psbt1, psbt2])\n             shuffled |= joined != shuffled_joined\n             if shuffled:\n                 break"
      },
      {
        "sha": "50597f2b4ffdd6bc22ad2cc5fa45ebb112bdedc1",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -447,14 +447,14 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     psbt_signed = signer.walletprocesspsbt(psbt=psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n     psbt_final = watcher.finalizepsbt(psbt_signed[\"psbt\"])\n     original_txid = watcher.sendrawtransaction(psbt_final[\"hex\"])\n-    assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n+    assert_equal(len(watcher.decodepsbt(psbt)[\"inputs\"]), 1)\n \n     # bumpfee can't be used on watchonly wallets\n     assert_raises_rpc_error(-4, \"bumpfee is not available with wallets that have private keys disabled. Use psbtbumpfee instead.\", watcher.bumpfee, original_txid)\n \n     # Bump fee, obnoxiously high to add additional watchonly input\n     bumped_psbt = watcher.psbtbumpfee(original_txid, {\"fee_rate\": HIGH})\n-    assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n+    assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"inputs\"]), 1)\n     assert \"txid\" not in bumped_psbt\n     assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])\n     assert not watcher.finalizepsbt(bumped_psbt[\"psbt\"])[\"complete\"]"
      },
      {
        "sha": "10c094e165ba2091c5dcce2fe7e5d8e860806565",
        "filename": "test/functional/wallet_multisig_descriptor_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_multisig_descriptor_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_multisig_descriptor_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multisig_descriptor_psbt.py?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -35,13 +35,13 @@ def _get_xpub(wallet):\n     @staticmethod\n     def _check_psbt(psbt, to, value, multisig):\n         \"\"\"Helper function for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n-        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        decoded = multisig.decodepsbt(psbt)\n         amount = 0\n-        for vout in tx[\"vout\"]:\n-            address = vout[\"scriptPubKey\"][\"address\"]\n+        for psbt_out in decoded[\"outputs\"]:\n+            address = psbt_out[\"script\"][\"address\"]\n             assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n             if address == to:\n-                amount += vout[\"value\"]\n+                amount += psbt_out[\"amount\"]\n         assert_approx(amount, float(value), vspan=0.001)\n \n     def participants_create_multisigs(self, xpubs):"
      },
      {
        "sha": "1b1c90dee8ded2b192f1c92265ec5defb7037c66",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192e900aa7c01dc02753688f03d6ab714e1dc680/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=192e900aa7c01dc02753688f03d6ab714e1dc680",
        "patch": "@@ -419,10 +419,10 @@ def run_test(self):\n         assert res[\"complete\"]\n         res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_address=change_address, change_position=0)\n         assert res[\"complete\"]\n-        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"address\"], change_address)\n+        assert_equal(self.nodes[0].decodepsbt(res[\"psbt\"])[\"outputs\"][0][\"script\"][\"address\"], change_address)\n         res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, add_to_wallet=False, change_type=\"legacy\", change_position=0)\n         assert res[\"complete\"]\n-        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"tx\"][\"vout\"][0][\"scriptPubKey\"][\"address\"]\n+        change_address = self.nodes[0].decodepsbt(res[\"psbt\"])[\"outputs\"][0][\"script\"][\"address\"]\n         assert change_address[0] == \"m\" or change_address[0] == \"n\"\n \n         self.log.info(\"Set lock time...\")"
      }
    ]
  },
  {
    "sha": "da80041d910db55e668d115ded36f57be7eb3520",
    "node_id": "C_kwDOABII59oAKGRhODAwNDFkOTEwZGI1NWU2NjhkMTE1ZGVkMzZmNTdiZTdlYjM1MjA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-05T20:17:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T01:45:28Z"
      },
      "message": "Add a PSBT constructor for providing the version\n\nAlso changes CTransaction::CURRENT_VERSION to constexpr as otherwise\nthere will be a linker error.",
      "tree": {
        "sha": "a544e9c0ca6aa9592f34db95a0ec71255d06423b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a544e9c0ca6aa9592f34db95a0ec71255d06423b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da80041d910db55e668d115ded36f57be7eb3520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da80041d910db55e668d115ded36f57be7eb3520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da80041d910db55e668d115ded36f57be7eb3520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da80041d910db55e668d115ded36f57be7eb3520/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "192e900aa7c01dc02753688f03d6ab714e1dc680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192e900aa7c01dc02753688f03d6ab714e1dc680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/192e900aa7c01dc02753688f03d6ab714e1dc680"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4d6289cb31bfc9025f409af663a7eca91ea7a536",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da80041d910db55e668d115ded36f57be7eb3520/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da80041d910db55e668d115ded36f57be7eb3520/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=da80041d910db55e668d115ded36f57be7eb3520",
        "patch": "@@ -260,7 +260,7 @@ class CTransaction\n {\n public:\n     // Default transaction version.\n-    static const int32_t CURRENT_VERSION=2;\n+    static constexpr int32_t CURRENT_VERSION=2;\n \n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not"
      },
      {
        "sha": "32ec072eac93b78d248b0fd0e42b172128d0cdb6",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da80041d910db55e668d115ded36f57be7eb3520/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da80041d910db55e668d115ded36f57be7eb3520/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=da80041d910db55e668d115ded36f57be7eb3520",
        "patch": "@@ -19,6 +19,14 @@ PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction\n     SetupFromTx(tx);\n }\n \n+PartiallySignedTransaction::PartiallySignedTransaction(uint32_t version) :\n+    m_version(version)\n+{\n+    if (GetVersion() >= 2) {\n+        tx_version = CTransaction::CURRENT_VERSION;\n+    }\n+}\n+\n bool PartiallySignedTransaction::IsNull() const\n {\n     return !tx && inputs.empty() && outputs.empty() && unknown.empty();"
      },
      {
        "sha": "6015fc2da130ea37ae8a55743e1870f5479087e6",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da80041d910db55e668d115ded36f57be7eb3520/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da80041d910db55e668d115ded36f57be7eb3520/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=da80041d910db55e668d115ded36f57be7eb3520",
        "patch": "@@ -756,6 +756,7 @@ struct PartiallySignedTransaction\n     CMutableTransaction GetUnsignedTx() const;\n     uint256 GetUniqueID() const;\n     PartiallySignedTransaction() {}\n+    PartiallySignedTransaction(uint32_t version);\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx, uint32_t version = 0);\n \n     template <typename Stream>"
      }
    ]
  },
  {
    "sha": "537afb3715cbff65f90c33da91b86ad093723ed8",
    "node_id": "C_kwDOABII59oAKDUzN2FmYjM3MTVjYmZmNjVmOTBjMzNkYTkxYjg2YWQwOTM3MjNlZDg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-05T20:39:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-24T01:45:42Z"
      },
      "message": "Use GetUnsignedTx when serializing in PSBTv0\n\nIf we are asked to make a PSBTv0, we may not necessarily have made an\nunsigned transaction. So instead use GetUnsignedTx which will either\nfetch one that already exists, or construct a new one from the stored\ndata. Internally we may be storing a PSBTv0 like a PSBTv2, but still\nwant to serialize those as v0.",
      "tree": {
        "sha": "7c1c26c39aa96b19fccb460b66eeb32ed2c8c6f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c1c26c39aa96b19fccb460b66eeb32ed2c8c6f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/537afb3715cbff65f90c33da91b86ad093723ed8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/537afb3715cbff65f90c33da91b86ad093723ed8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/537afb3715cbff65f90c33da91b86ad093723ed8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/537afb3715cbff65f90c33da91b86ad093723ed8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da80041d910db55e668d115ded36f57be7eb3520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da80041d910db55e668d115ded36f57be7eb3520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da80041d910db55e668d115ded36f57be7eb3520"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0811da2e8201f814ca44578eb3eecab35a140733",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/537afb3715cbff65f90c33da91b86ad093723ed8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/537afb3715cbff65f90c33da91b86ad093723ed8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=537afb3715cbff65f90c33da91b86ad093723ed8",
        "patch": "@@ -771,7 +771,7 @@ struct PartiallySignedTransaction\n \n             // Write serialized tx to a stream\n             OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-            SerializeToVector(os, *tx);\n+            SerializeToVector(os, GetUnsignedTx());\n         }\n \n         // Write xpubs"
      }
    ]
  }
]