[
  {
    "sha": "c180c911b88b2bd2baf2c9c2b24e276787ffb69b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTgwYzkxMWI4OGIyYmQyYmFmMmM5YzJiMjRlMjc2Nzg3ZmZiNjli",
    "commit": {
      "author": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2021-03-02T21:17:11Z"
      },
      "committer": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2021-03-03T21:09:52Z"
      },
      "message": "doc: revamp macOS build doc\n\nThis pr makes the macOS build docs more informative and adds in the following information:\n- Proper descriptions and delineation of required/optional dependencies\n- walk-through of optional dependencies\n- configuration walk-through\n- various other tid-bits of information",
      "tree": {
        "sha": "0370c81d05fd9bd3fdf13100b1a5968386a67284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0370c81d05fd9bd3fdf13100b1a5968386a67284"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c180c911b88b2bd2baf2c9c2b24e276787ffb69b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c180c911b88b2bd2baf2c9c2b24e276787ffb69b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c180c911b88b2bd2baf2c9c2b24e276787ffb69b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c180c911b88b2bd2baf2c9c2b24e276787ffb69b/comments",
    "author": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cabe63759ce890a7d39d72f7b8046195b0edb421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cabe63759ce890a7d39d72f7b8046195b0edb421",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cabe63759ce890a7d39d72f7b8046195b0edb421"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 256,
      "deletions": 74
    },
    "files": [
      {
        "sha": "16c6da66d5b4a6ff4a3ad5f7615ed7611a8563e3",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 256,
        "deletions": 74,
        "changes": 330,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c180c911b88b2bd2baf2c9c2b24e276787ffb69b/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c180c911b88b2bd2baf2c9c2b24e276787ffb69b/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=c180c911b88b2bd2baf2c9c2b24e276787ffb69b",
        "patch": "@@ -1,116 +1,303 @@\n-# macOS Build Instructions and Notes\n+# macOS Build Guide\n+\n+**Updated for MacOS [11.2](https://www.apple.com/macos/big-sur/)**\n+\n+This guide describes how to build bitcoind, command-line utilities, and GUI on macOS\n+\n+**Note:** The following is for Intel Macs only!\n+\n+## Dependencies\n+\n+The following dependencies are **required**:\n+\n+Library                                                    | Purpose    | Description\n+-----------------------------------------------------------|------------|----------------------\n+[automake](https://formulae.brew.sh/formula/automake)      | Build      | Generate makefile\n+[libtool](https://formulae.brew.sh/formula/libtool)        | Build      | Shared library support\n+[pkg-config](https://formulae.brew.sh/formula/pkg-config)  | Build      | Configure compiler and linker flags\n+[boost](https://formulae.brew.sh/formula/boost)            | Utility    | Library for threading, data structures, etc\n+[libevent](https://formulae.brew.sh/formula/libevent)      | Networking | OS independent asynchronous networking\n+\n+The following dependencies are **optional**:\n+\n+Library                                                         | Purpose          | Description\n+--------------------------------------------------------------- |------------------|----------------------\n+[berkeley-db@4](https://formulae.brew.sh/formula/berkeley-db@4) | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n+[qt@5](https://formulae.brew.sh/formula/qt@5)                   | GUI              | GUI toolkit (only needed when GUI enabled)\n+[qrencode](https://formulae.brew.sh/formula/qrencode)           | QR codes in GUI  | Generating QR codes (only needed when GUI enabled)\n+[zeromq](https://formulae.brew.sh/formula/zeromq)               | ZMQ notification | Allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+[sqlite](https://formulae.brew.sh/formula/sqlite)               | SQLite DB        | Wallet storage (only needed when wallet enabled)\n+[miniupnpc](https://formulae.brew.sh/formula/miniupnpc)         | UPnP Support     | Firewall-jumping support (needed for port mapping support)\n+[libnatpmp](https://formulae.brew.sh/formula/libnatpmp)         | NAT-PMP Support  | Firewall-jumping support (needed for port mapping support)\n+[python3](https://formulae.brew.sh/formula/python@3.9)          | Testing          | Python Interpreter (only needed when running the test suite)\n+\n+The following dependencies are **optional** packages required for deploying:\n+\n+Library                                             | Purpose          | Description\n+----------------------------------------------------|------------------|----------------------\n+[librsvg](https://formulae.brew.sh/formula/librsvg) | Deploy Dependency| Library to render SVG files\n+[ds_store](https://pypi.org/project/ds-store/)      | Deploy Dependency| Examine and modify .DS_Store files\n+[mac_alias](https://pypi.org/project/mac-alias/)    | Deploy Dependency| Generate/Read binary alias and bookmark records\n+\n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n+## Preparation\n \n The commands in this guide should be executed in a Terminal application.\n-The built-in one is located in\n+macOS comes with a built-in Terminal located in:\n+\n ```\n /Applications/Utilities/Terminal.app\n ```\n \n-## Preparation\n-Install the macOS command line tools:\n+### 1. Xcode Command Line Tools\n \n-```shell\n+The Xcode Command Line Tools are a collection of build tools for macOS.\n+These tools must be installed in order to build Bitcoin Core from source.\n+\n+To install, run the following command from your terminal:\n+\n+``` bash\n xcode-select --install\n ```\n \n-When the popup appears, click `Install`.\n+Upon running the command, you should see a popup appear.\n+Click on `Install` to continue the installation process.\n \n-Then install [Homebrew](https://brew.sh).\n+### 2. Homebrew Package Manager\n \n-## Dependencies\n-```shell\n-brew install automake libtool boost miniupnpc libnatpmp pkg-config python qt@5 libevent qrencode\n+Homebrew is a package manager for macOS that allows one to install packages from the command line easily.\n+While several package managers are available for macOS, this guide will focus on Homebrew as it is the most popular.\n+Since the examples in this guide which walk through the installation of a package will use Homebrew, it is recommended that you install it to follow along.\n+Otherwise, you can adapt the commands to your package manager of choice.\n+\n+To install the Homebrew package manager, see: https://brew.sh\n+\n+Note: If you run into issues while installing Homebrew or pulling packages, refer to [Homebrew's troubleshooting page](https://docs.brew.sh/Troubleshooting).\n+\n+### 3. Install Required Dependencies\n+\n+The first step is to download the required dependencies.\n+These dependencies represent the packages required to get a barebones installation up and running.\n+To install, run the following from your terminal:\n+\n+``` bash\n+brew install automake libtool boost pkg-config libevent\n ```\n \n-If you run into issues, check [Homebrew's troubleshooting page](https://docs.brew.sh/Troubleshooting).\n-See [dependencies.md](dependencies.md) for a complete overview.\n+### 4. Clone Bitcoin repository\n \n-If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n-```shell\n-brew install librsvg\n+`git` should already be installed by default on your system.\n+Now that all the required dependencies are installed, let's clone the Bitcoin Core repository to a directory.\n+All build scripts and commands will run from this directory.\n+\n+``` bash\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n-and [`macdeployqtplus`](../contrib/macdeploy/README.md) dependencies:\n-```shell\n-pip3 install ds_store mac_alias\n+### 5. Install Optional Dependencies\n+\n+#### Wallet Dependencies\n+\n+It is not necessary to build wallet functionality to run `bitcoind` or  `bitcoin-qt`.\n+To enable legacy wallets, you must install `berkeley-db@4`.\n+To enable [descriptor wallets](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md), `sqlite` is required.\n+Skip `berkeley-db@4` if you intend to *exclusively* use descriptor wallets.\n+\n+###### Legacy Wallet Support\n+\n+`berkeley-db@4` is required to enable support for legacy wallets.\n+Skip if you don't intend to use legacy wallets.\n+\n+``` bash\n+brew install berkeley-db@4\n ```\n \n-The wallet support requires one or both of the dependencies ([*SQLite*](#sqlite) and [*Berkeley DB*](#berkeley-db)) in the sections below.\n-To build Bitcoin Core without wallet, see [*Disable-wallet mode*](#disable-wallet-mode).\n+###### Descriptor Wallet Support\n \n-#### SQLite\n+Note: Apple has included a useable `sqlite` package since macOS 10.14.\n+You may not need to install this package.\n \n-Usually, macOS installation already has a suitable SQLite installation.\n-Also, the Homebrew package could be installed:\n+`sqlite` is required to enable support for descriptor wallets.\n+Skip if you don't intend to use descriptor wallets.\n \n-```shell\n+``` bash\n brew install sqlite\n ```\n+---\n \n-In that case the Homebrew package will prevail.\n+#### GUI Dependencies\n \n-#### Berkeley DB\n+###### Qt\n \n-It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n-you can use [this](/contrib/install_db4.sh) script to install it\n-like so:\n+Bitcoin Core includes a GUI built with the cross-platform Qt Framework.\n+To compile the GUI, we need to install `qt@5`.\n+Skip if you don't intend to use the GUI.\n \n-```shell\n-./contrib/install_db4.sh .\n+``` bash\n+brew install qt@5\n ```\n \n-from the root of the repository.\n+Note: Building with Qt binaries downloaded from the Qt website is not officially supported.\n+See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714).\n \n-Also, the Homebrew package could be installed:\n+###### qrencode\n \n-```shell\n-brew install berkeley-db4\n+The GUI can encode addresses in a QR Code. To build in QR support for the GUI, install `qrencode`.\n+Skip if not using the GUI or don't want QR code functionality.\n+\n+``` bash\n+brew install qrencode\n ```\n+---\n+\n+#### Port Mapping Dependencies\n+\n+###### miniupnpc\n \n-## Build Bitcoin Core\n+miniupnpc may be used for UPnP port mapping.\n+Skip if you do not need this functionality.\n \n-1. Clone the Bitcoin Core source code:\n-    ```shell\n-    git clone https://github.com/bitcoin/bitcoin\n-    cd bitcoin\n-    ```\n+``` bash\n+brew install miniupnpc\n+```\n \n-2.  Build Bitcoin Core:\n+###### libnatpmp\n \n-    Configure and build the headless Bitcoin Core binaries as well as the GUI (if Qt is found).\n+libnatpmp may be used for NAT-PMP port mapping.\n+Skip if you do not need this functionality.\n \n-    You can disable the GUI build by passing `--without-gui` to configure.\n-    ```shell\n-    ./autogen.sh\n-    ./configure\n-    make\n-    ```\n+``` bash\n+brew install libnatpmp\n+```\n \n-3.  It is recommended to build and run the unit tests:\n-    ```shell\n-    make check\n-    ```\n+Note: UPnP and NAT-PMP support will be compiled in and disabled by default.\n+Check out the [further configuration](#further-configuration) section for more information.\n \n-4.  You can also create a  `.dmg` that contains the `.app` bundle (optional):\n-    ```shell\n-    make deploy\n-    ```\n+---\n \n-## Disable-wallet mode\n-When the intention is to run only a P2P node without a wallet, Bitcoin Core may be\n-compiled in disable-wallet mode with:\n-```shell\n-./configure --disable-wallet\n+#### ZMQ Dependencies\n+\n+Support for ZMQ notifications requires the following dependency.\n+Skip if you do not need ZMQ functionality.\n+\n+``` bash\n+brew install zeromq\n ```\n \n-In this case there is no dependency on [*Berkeley DB*](#berkeley-db) and [*SQLite*](#sqlite).\n+ZMQ is automatically compiled in and enabled if the dependency is detected.\n+Check out the [further configuration](#further-configuration) section for more information.\n+\n+For more information on ZMQ, see: [zmq.md](zmq.md)\n \n-Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n+---\n \n-## Running\n-Bitcoin Core is now available at `./src/bitcoind`\n+#### Test Suite Dependencies\n+\n+There is an included test suite that is useful for testing code changes when developing.\n+To run the test suite (recommended), you will need to have Python 3 installed:\n+\n+``` bash\n+brew install python\n+```\n+\n+---\n+\n+#### Deploy Dependencies\n+\n+You can deploy a `.dmg` containing the Bitcoin Core application using `make deploy`.\n+This command depends on a couple of python packages, so it is required that you have `python` installed.\n+\n+Ensuring that `python` is installed, you can install the deploy dependencies by running the following commands in your terminal:\n+\n+``` bash\n+brew install librsvg\n+```\n+\n+``` bash\n+pip3 install ds_store mac_alias\n+```\n+\n+## Building Bitcoin Core\n+\n+### 1. Configuration\n+\n+There are many ways to configure Bitcoin Core, here are a few common examples:\n+\n+##### Wallet (BDB + SQlite) Support, No GUI:\n+\n+If `berkeley-db@4` is installed, then legacy wallet support will be built.\n+If `berkeley-db@4` is not installed, then this will throw an error.\n+If `sqlite` is installed, then descriptor wallet support will also be built.\n+Additionally, this explicitly disables the GUI.\n+\n+``` bash\n+./autogen.sh\n+./configure --with-gui=no\n+```\n+\n+##### Wallet (only SQlite) and GUI Support:\n+\n+This explicitly enables the GUI and disables legacy wallet support.\n+If `qt` is not installed, this will throw an error.\n+If `sqlite` is installed then descriptor wallet functionality will be built.\n+If `sqlite` is not installed, then wallet functionality will be disabled.\n+\n+``` bash\n+./autogen.sh\n+./configure --without-bdb --with-gui=yes\n+```\n+\n+##### No Wallet or GUI\n+\n+``` bash\n+./autogen.sh\n+./configure --without-wallet --with-gui=no\n+```\n+\n+##### Further Configuration\n+\n+You may want to dig deeper into the configuration options to achieve your desired behavior.\n+Examine the output of the following command for a full list of configuration options:\n+\n+``` bash\n+./configure -help\n+```\n+\n+### 2. Compile\n+\n+After configuration, you are ready to compile.\n+Run the following in your terminal to compile Bitcoin Core:\n+\n+``` bash\n+make -jx    # use -jX here for parallelism\n+make check  # Run tests if Python 3 is available\n+```\n+\n+### 3. Deploy (optional)\n+\n+You can also create a  `.dmg` containing the `.app` bundle by running the following command:\n+\n+``` bash\n+make deploy\n+```\n+\n+## Running Bitcoin Core\n+\n+Bitcoin Core should now be available at `./src/bitcoind`.\n+If you compiled support for the GUI, it should be available at `./src/qt/bitcoin-qt`.\n+\n+The first time you run `bitcoind` or `bitcoin-qt`, it will start downloading the blockchain.\n+This process could take many hours, or even days on slower than average systems.\n+\n+By default, blockchain and wallet data files will be stored in:\n+\n+``` bash\n+/Users/${USER}/Library/Application Support/Bitcoin/\n+```\n \n Before running, you may create an empty configuration file:\n+\n ```shell\n mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n \n@@ -119,22 +306,17 @@ touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n ```\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could\n-take many hours, or even days on slower than average systems.\n-\n You can monitor the download process by looking at the debug.log file:\n+\n ```shell\n tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n ```\n \n ## Other commands:\n+\n ```shell\n ./src/bitcoind -daemon      # Starts the bitcoin daemon.\n ./src/bitcoin-cli --help    # Outputs a list of command-line options.\n ./src/bitcoin-cli help      # Outputs a list of RPC commands when the daemon is running.\n+./src/qt/bitcoin-qt -server # Starts the bitcoin-qt server mode, allows bitcoin-cli control\n ```\n-\n-## Notes\n-* Tested on OS X 10.14 Mojave through macOS 11 Big Sur on 64-bit Intel\n-processors only.\n-* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)."
      }
    ]
  }
]