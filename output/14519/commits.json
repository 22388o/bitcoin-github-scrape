[
  {
    "sha": "58180b5fd467ff15e7170145d77c84f13ccafe6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODE4MGI1ZmQ0NjdmZjE1ZTcxNzAxNDVkNzdjODRmMTNjY2FmZTZl",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-19T16:28:47Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-22T13:55:55Z"
      },
      "message": "tests: add utility to easily profile node performance with perf\n\nIntroduces `TestNode.profile_with_perf()` context manager which\nsamples node execution to produce profiling data.\n\nAlso introduces a test framework flag, `--perf`, which will run\nperf on all nodes for the duration of a given test.",
      "tree": {
        "sha": "5a7be4313cd7dd4e15f9666cf702235c2962ce5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a7be4313cd7dd4e15f9666cf702235c2962ce5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58180b5fd467ff15e7170145d77c84f13ccafe6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58180b5fd467ff15e7170145d77c84f13ccafe6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58180b5fd467ff15e7170145d77c84f13ccafe6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58180b5fd467ff15e7170145d77c84f13ccafe6e/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df894fa69a09ff2b7f00af0cf220e5132a69c70a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df894fa69a09ff2b7f00af0cf220e5132a69c70a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df894fa69a09ff2b7f00af0cf220e5132a69c70a"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 165,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1cf22cb64b6856a9cbc25ec4a80068e57bf12eb1",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "patch": "@@ -176,6 +176,26 @@ gdb /home/example/bitcoind <pid>\n \n Note: gdb attach step may require `sudo`\n \n+##### Profiling\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like [hotspot](https://github.com/KDAB/hotspot).\n+\n+To generate a profile during test suite runs, use the `--perf` flag.\n+\n+To see render the output to text, run\n+\n+```sh\n+perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n+```\n+\n+For ways to generate more granular profiles, see the README in\n+[test/functional](/test/functional).\n+\n ### Util tests\n \n Util tests can be run locally by running `test/util/bitcoin-util-test.py`."
      },
      {
        "sha": "711151d60631cf1781af4be95343961298acd95b",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "patch": "@@ -118,3 +118,36 @@ Helpers for script.py\n \n #### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n+\n+### Benchmarking with perf\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like [hotspot](https://github.com/KDAB/hotspot).\n+\n+There are two ways of invoking perf: one is to use the `--perf` flag when\n+running tests, which will profile each node during the entire test run: perf\n+begins to profile when the node starts and ends when it shuts down. The other\n+way is the use the `profile_with_perf` context manager, e.g.\n+\n+```python\n+with node.profile_with_perf(\"send-big-msgs\"):\n+    # Perform activity on the node you're interested in profiling, e.g.:\n+    for _ in range(10000):\n+        node.p2p.send_message(some_large_message)\n+```\n+\n+To see useful textual output, run\n+\n+```sh\n+perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n+```\n+\n+#### See also:\n+\n+- [Installing perf](https://askubuntu.com/q/50145)\n+- [Perf examples](http://www.brendangregg.com/perf.html)\n+- [Hotspot](https://github.com/KDAB/hotspot): a GUI for perf output analysis"
      },
      {
        "sha": "240d9ce87cf3d80bee014911d00dc36489dbf3cc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "patch": "@@ -128,6 +128,8 @@ def main(self):\n                             help=\"Attach a python debugger if test fails\")\n         parser.add_argument(\"--usecli\", dest=\"usecli\", default=False, action=\"store_true\",\n                             help=\"use bitcoin-cli instead of RPC for all commands\")\n+        parser.add_argument(\"--perf\", dest=\"perf\", default=False, action=\"store_true\",\n+                            help=\"profile running nodes with perf for the duration of the test\")\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n@@ -201,11 +203,20 @@ def main(self):\n                 node.cleanup_on_exit = False\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n+        should_clean_up = (\n+            not self.options.nocleanup and\n+            not self.options.noshutdown and\n+            success != TestStatus.FAILED and\n+            not self.options.perf\n+        )\n+        if should_clean_up:\n             self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = True\n+        elif self.options.perf:\n+            self.log.warning(\"Not cleaning up dir {} due to perf data\".format(self.options.tmpdir))\n+            cleanup_tree_on_exit = False\n         else:\n-            self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n+            self.log.warning(\"Not cleaning up dir {}\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = False\n \n         if success == TestStatus.PASSED:\n@@ -309,6 +320,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 extra_conf=extra_confs[i],\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n+                start_perf=self.options.perf,\n             ))\n \n     def start_node(self, i, *args, **kwargs):"
      },
      {
        "sha": "14d37e72208522bfdfb76eac250979c98be3f393",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 97,
        "deletions": 1,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "patch": "@@ -18,6 +18,8 @@\n import time\n import urllib.parse\n import collections\n+import shlex\n+import sys\n \n from .authproxy import JSONRPCException\n from .util import (\n@@ -59,7 +61,13 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+        \"\"\"\n+        Kwargs:\n+            start_perf (bool): If True, begin profiling the node with `perf` as soon as\n+                the node starts.\n+        \"\"\"\n+\n         self.index = i\n         self.datadir = datadir\n         self.stdout_dir = os.path.join(self.datadir, \"stdout\")\n@@ -87,6 +95,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli\n+        self.start_perf = start_perf\n \n         self.running = False\n         self.process = None\n@@ -95,6 +104,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}\n \n         self.p2ps = []\n \n@@ -186,6 +197,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n+        if self.start_perf:\n+            self._start_perf()\n+\n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n         # Poll at a rate of four times per second\n@@ -238,6 +252,10 @@ def stop_node(self, expected_stderr='', wait=0):\n         except http.client.CannotSendRequest:\n             self.log.exception(\"Unable to stop node.\")\n \n+        # If there are any running perf processes, stop them.\n+        for profile_name in tuple(self.perf_subprocesses.keys()):\n+            self._stop_perf(profile_name)\n+\n         # Check that stderr is as expected\n         self.stderr.seek(0)\n         stderr = self.stderr.read().decode('utf-8').strip()\n@@ -317,6 +335,84 @@ def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n                     increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        See `test/functional/README.md` for details on perf usage.\n+\n+        Args:\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name=None):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not sys.platform.startswith('linux'):\n+            self.log.warning(\"Can't profile with perf; only availabe on Linux platforms\")\n+            return None\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+            return None\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        output_path = tempfile.NamedTemporaryFile(\n+            dir=self.datadir,\n+            prefix=\"{}.perf.data.\".format(profile_name or 'test'),\n+            delete=False,\n+        ).name\n+\n+        cmd = [\n+            'perf', 'record',\n+            '-g',                     # Record the callgraph.\n+            '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+            '-F', '101',              # Sampling frequency in Hz.\n+            '-p', str(self.process.pid),\n+            '-o', output_path,\n+        ]\n+        subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+        self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]\n+\n+        subp.terminate()\n+        subp.wait(timeout=10)\n+\n+        stderr = subp.stderr.read().decode()\n+        if 'Consider tweaking /proc/sys/kernel/perf_event_paranoid' in stderr:\n+            self.log.warning(\n+                \"perf couldn't collect data! Try \"\n+                \"'sudo sysctl -w kernel.perf_event_paranoid=-1'\")\n+        else:\n+            report_cmd = \"perf report -i {}\".format(output_path)\n+            self.log.info(\"See perf output by running '{}'\".format(report_cmd))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      },
      {
        "sha": "863caa9d5c48f20177d962c58e08877256a46c17",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58180b5fd467ff15e7170145d77c84f13ccafe6e/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey\" \\\n+    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n     $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  },
  {
    "sha": "13782b8ba84c5033a59a5234410a763393eafb8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzc4MmI4YmE4NGM1MDMzYTU5YTUyMzQ0MTBhNzYzMzkzZWFmYjhk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-02T18:57:21Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-22T13:56:01Z"
      },
      "message": "docs: add perf section to developer docs",
      "tree": {
        "sha": "36d17088039ca4ce050c7577d4079777ef96ead2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36d17088039ca4ce050c7577d4079777ef96ead2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13782b8ba84c5033a59a5234410a763393eafb8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13782b8ba84c5033a59a5234410a763393eafb8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13782b8ba84c5033a59a5234410a763393eafb8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13782b8ba84c5033a59a5234410a763393eafb8d/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58180b5fd467ff15e7170145d77c84f13ccafe6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58180b5fd467ff15e7170145d77c84f13ccafe6e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40861608a6bcfedb9dae9d8c2d318e700551db8b",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13782b8ba84c5033a59a5234410a763393eafb8d/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13782b8ba84c5033a59a5234410a763393eafb8d/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=13782b8ba84c5033a59a5234410a763393eafb8d",
        "patch": "@@ -17,6 +17,7 @@ Developer Notes\n         - [DEBUG_LOCKORDER](#debug_lockorder)\n         - [Valgrind suppressions file](#valgrind-suppressions-file)\n         - [Compiling for test coverage](#compiling-for-test-coverage)\n+        - [Performance profiling with perf](#performance-profiling-with-perf)\n     - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n     - [Threads](#threads)\n     - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n@@ -257,6 +258,51 @@ make cov\n # A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n ```\n \n+### Performance profiling with perf\n+\n+Profiling is a good way to get a precise idea of where time is being spent in\n+code. One tool for doing profiling on Linux platforms is called\n+[`perf`](http://www.brendangregg.com/perf.html), and has been integrated into\n+the functional test framework. Perf can observe a running process and sample\n+(at some frequency) where its execution is.\n+\n+Perf installation is contingent on which kernel version you're running; see\n+[this StackExchange\n+thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n+for specific instructions.\n+\n+Certain kernel parameters may need to be set for perf to be able to inspect the\n+running process' stack.\n+\n+```sh\n+$ sudo sysctl -w kernel.perf_event_paranoid=-1\n+$ sudo sysctl -w kernel.kptr_restrict=0\n+```\n+\n+Make sure you [understand the security\n+trade-offs](https://lwn.net/Articles/420403/) of setting these kernel\n+parameters.\n+\n+To profile a running bitcoind process for 60 seconds, you could use an\n+invocation of `perf record` like this:\n+\n+```sh\n+$ perf record \\\n+    -g --call-graph dwarf --per-thread -F 140 \\\n+    -p `pgrep bitcoind` -- sleep 60\n+```\n+\n+You could then analyze the results by running\n+\n+```sh\n+perf report --stdio | c++filt | less\n+```\n+\n+or using a graphical tool like [Hotspot](https://github.com/KDAB/hotspot).\n+\n+See the functional test documentation for how to invoke perf within tests.\n+\n+\n **Sanitizers**\n \n Bitcoin Core can be compiled with various \"sanitizers\" enabled, which add"
      }
    ]
  }
]