[
  {
    "sha": "90604f16af63ec066d6561337f476ccd8acec326",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDYwNGYxNmFmNjNlYzA2NmQ2NTYxMzM3ZjQ3NmNjZDhhY2VjMzI2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-01T14:35:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-04-14T18:56:33Z"
      },
      "message": "add bip32 pubkey serialization\n\nCExtPubKey should be serializable like CPubKey",
      "tree": {
        "sha": "5cca6f0af2f22330bbf7d7a913b3e10cbcafe868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cca6f0af2f22330bbf7d7a913b3e10cbcafe868"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90604f16af63ec066d6561337f476ccd8acec326",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXD+fhAAoJECnUvLZBb1PsCuEP+wTTZyWzMn8zmtgSNFHWN1fc\nAbbX7l6+uBXgEFf95lI+Xte7q+oo2VihPXfsko7aC7gQyVwqWOIHqfe1ztM4FJpJ\nHFkN3gjD94o3/TxVNXGR98XSU/NnnE741HU7fjflFRH/tbsyxl7xojoEXsr8SraG\nVUX/csgKClKhFm8CTfIOcYBvrNsw66thMg6+n3mBDInihoLS1b4IajsUch60BWYh\n3ap1gz1tbFQCldHa6GFe69nIlVS+0pU/SqRKAB2YiGHc+BG3jUWLZmR+BlaE2sXC\nUyjLe3K9WNL4sDxwATzP1EpPqoc7pnU2oPQjbZPPZUTZgVo+tRnTJ+zKSGWc3Xe7\nx+0HwnVSfR0tamKwJ8tu2e88YjgV/w6MBaymgMzkomaXj1i7qWhIT4vxPP6+q/yz\nTS5JytkCx8uHN7ZlCplLGf5nmIlLQ7YCzESPTdy1L0ccxjkHJSKoe0jhNuWoNKtf\nFG9QTS06Ui1q8M7NyIKun+1/ABYbOa3WnP1gHUDY/QNTaUXqmvlWe2lDjq2PyYPk\ngQSBopT3pQQwMtRcE+v7rsR/S8Idz71tBe8jl7Qt/ajp/LSJzLNXdJvW0j6xMRZ+\njSHPZw8lKz68wtcIAWYWq0GZp2G3EIP0ybJ6fYmaTG1lSX2ha7QW03rRKx9+BcKY\nqcB70Ad/tzC+lOvJNr8K\n=1A3z\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cca6f0af2f22330bbf7d7a913b3e10cbcafe868\nparent e6a4d48a9bff0bdbcca3a13de59b5e6e683a6aac\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433169319 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1460660193 +0200\n\nadd bip32 pubkey serialization\n\nCExtPubKey should be serializable like CPubKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90604f16af63ec066d6561337f476ccd8acec326",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90604f16af63ec066d6561337f476ccd8acec326",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90604f16af63ec066d6561337f476ccd8acec326/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6a4d48a9bff0bdbcca3a13de59b5e6e683a6aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6a4d48a9bff0bdbcca3a13de59b5e6e683a6aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6a4d48a9bff0bdbcca3a13de59b5e6e683a6aac"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 71,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cccebc9e0e753af7e8f4d4551a484aed2e3c638f",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -164,7 +164,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     CBitcoinExtKeyBase() {}\n };\n \n-typedef CBitcoinExtKeyBase<CExtKey, 74, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n-typedef CBitcoinExtKeyBase<CExtPubKey, 74, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n+typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n+typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "6a3d9aa1409067b923a1f638c1146504030c9f00",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -275,7 +275,7 @@ CExtPubKey CExtKey::Neuter() const {\n     return ret;\n }\n \n-void CExtKey::Encode(unsigned char code[74]) const {\n+void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[0] = nDepth;\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n@@ -286,12 +286,12 @@ void CExtKey::Encode(unsigned char code[74]) const {\n     memcpy(code+42, key.begin(), 32);\n }\n \n-void CExtKey::Decode(const unsigned char code[74]) {\n+void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    key.Set(code+42, code+74, true);\n+    key.Set(code+42, code+BIP32_EXTKEY_SIZE, true);\n }\n \n bool ECC_InitSanityCheck() {"
      },
      {
        "sha": "b4f48d59f5b08af73eb81319d384e19985c5e04f",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -164,11 +164,28 @@ struct CExtKey {\n                a.chaincode == b.chaincode && a.key == b.key;\n     }\n \n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n+    void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n+    void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n     void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        unsigned int len = BIP32_EXTKEY_SIZE;\n+        ::WriteCompactSize(s, len);\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n+        Encode(code);\n+        s.write((const char *)&code[0], len);\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        unsigned int len = ::ReadCompactSize(s);\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n+        s.read((char *)&code[0], len);\n+        Decode(code);\n+    }\n };\n \n /** Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. */"
      },
      {
        "sha": "be4ee27cd48d5734b47c7ef56810bde27cee28a5",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -246,7 +246,7 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     return true;\n }\n \n-void CExtPubKey::Encode(unsigned char code[74]) const {\n+void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[0] = nDepth;\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n@@ -256,12 +256,12 @@ void CExtPubKey::Encode(unsigned char code[74]) const {\n     memcpy(code+41, pubkey.begin(), 33);\n }\n \n-void CExtPubKey::Decode(const unsigned char code[74]) {\n+void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    pubkey.Set(code+41, code+74);\n+    pubkey.Set(code+41, code+BIP32_EXTKEY_SIZE);\n }\n \n bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {"
      },
      {
        "sha": "db5444ea9d745df424ca569695eb9f872c0a2cf6",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -23,6 +23,8 @@\n  * script supports up to 75 for single byte push\n  */\n \n+const unsigned int BIP32_EXTKEY_SIZE = 74;\n+\n /** A reference to a CKey: the Hash160 of its serialized public key */\n class CKeyID : public uint160\n {\n@@ -205,9 +207,33 @@ struct CExtPubKey {\n                a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n     }\n \n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n+    void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n+    void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return BIP32_EXTKEY_SIZE+1; //add one byte for the size (compact int)\n+    }\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        unsigned int len = BIP32_EXTKEY_SIZE;\n+        ::WriteCompactSize(s, len);\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n+        Encode(code);\n+        s.write((const char *)&code[0], len);\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        unsigned int len = ::ReadCompactSize(s);\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n+        if (len != BIP32_EXTKEY_SIZE)\n+            throw std::runtime_error(\"Invalid extended key size\\n\");\n+        s.read((char *)&code[0], len);\n+        Decode(code);\n+    }\n };\n \n /** Users of this module must hold an ECCVerifyHandle. The constructor and"
      },
      {
        "sha": "7f1c2a32dd1214b63367db5c8c46f42856cf43d5",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90604f16af63ec066d6561337f476ccd8acec326/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90604f16af63ec066d6561337f476ccd8acec326/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=90604f16af63ec066d6561337f476ccd8acec326",
        "patch": "@@ -117,6 +117,22 @@ void RunTest(const TestVector &test) {\n         }\n         key = keyNew;\n         pubkey = pubkeyNew;\n+\n+        CDataStream ssPub(SER_DISK, CLIENT_VERSION);\n+        ssPub << pubkeyNew;\n+        BOOST_CHECK(ssPub.size() == 75);\n+\n+        CDataStream ssPriv(SER_DISK, CLIENT_VERSION);\n+        ssPriv << keyNew;\n+        BOOST_CHECK(ssPriv.size() == 75);\n+\n+        CExtPubKey pubCheck;\n+        CExtKey privCheck;\n+        ssPub >> pubCheck;\n+        ssPriv >> privCheck;\n+\n+        BOOST_CHECK(pubCheck == pubkeyNew);\n+        BOOST_CHECK(privCheck == keyNew);\n     }\n }\n "
      }
    ]
  }
]