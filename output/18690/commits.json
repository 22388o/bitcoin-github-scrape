[
  {
    "sha": "9f5608c2893f89cd56c7c548b748996199e0da1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjU2MDhjMjg5M2Y4OWNkNTZjN2M1NDhiNzQ4OTk2MTk5ZTBkYTFk",
    "commit": {
      "author": {
        "name": "Danny Lee",
        "email": "robot-visions@protonmail.com",
        "date": "2020-04-17T09:23:02Z"
      },
      "committer": {
        "name": "Danny Lee",
        "email": "robot-visions@protonmail.com",
        "date": "2020-04-22T17:46:08Z"
      },
      "message": "test: check for matching object hashes in wait_for_getdata",
      "tree": {
        "sha": "bc2b9b73d6dc16533591f5252f409fe123811766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc2b9b73d6dc16533591f5252f409fe123811766"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5608c2893f89cd56c7c548b748996199e0da1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5608c2893f89cd56c7c548b748996199e0da1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5608c2893f89cd56c7c548b748996199e0da1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5608c2893f89cd56c7c548b748996199e0da1d/comments",
    "author": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 9,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c9fbb830c8ca6f821426584b9b3971d8c609b71a",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=9f5608c2893f89cd56c7c548b748996199e0da1d",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n \n         # Force reorg to a longer chain\n         node0.send_message(msg_headers(new_blocks))\n-        node0.wait_for_getdata()\n+        node0.wait_for_getdata([x.sha256 for x in new_blocks])\n         for block in new_blocks:\n             node0.send_and_ping(msg_block(block))\n "
      },
      {
        "sha": "fcf61eea3e7bff4082578406c66e618d28f70dab",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=9f5608c2893f89cd56c7c548b748996199e0da1d",
        "patch": "@@ -159,7 +159,7 @@ def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True):\n             self.last_message.pop(\"getdata\", None)\n         self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n         if success:\n-            self.wait_for_getdata(timeout)\n+            self.wait_for_getdata([tx.sha256], timeout)\n         else:\n             time.sleep(timeout)\n             assert not self.last_message.get(\"getdata\")\n@@ -176,7 +176,7 @@ def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n             self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n             self.wait_for_getheaders()\n             self.send_message(msg)\n-        self.wait_for_getdata()\n+        self.wait_for_getdata([block.sha256])\n \n     def request_block(self, blockhash, inv_type, timeout=60):\n         with mininode_lock:"
      },
      {
        "sha": "a8fba306a709a8a7d763c5769c92a518731ac0cd",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=9f5608c2893f89cd56c7c548b748996199e0da1d",
        "patch": "@@ -144,13 +144,6 @@ def send_getblocks(self, locator):\n         getblocks_message.locator.vHave = locator\n         self.send_message(getblocks_message)\n \n-    def wait_for_getdata(self, hash_list, timeout=60):\n-        if hash_list == []:\n-            return\n-\n-        test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n-\n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)"
      },
      {
        "sha": "6aa73623e6e60f80bfb5957bbf8a3dc2124e6f66",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5608c2893f89cd56c7c548b748996199e0da1d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=9f5608c2893f89cd56c7c548b748996199e0da1d",
        "patch": "@@ -406,17 +406,17 @@ def test_function():\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n-    def wait_for_getdata(self, timeout=60):\n+    def wait_for_getdata(self, hash_list, timeout=60):\n         \"\"\"Waits for a getdata message.\n \n-        Receiving any getdata message will satisfy the predicate. the last_message[\"getdata\"]\n-        value must be explicitly cleared before calling this method, or this will return\n-        immediately with success. TODO: change this method to take a hash value and only\n-        return true if the correct block/tx has been requested.\"\"\"\n+        The object hashes in the inventory vector must match the provided hash_list.\"\"\"\n \n         def test_function():\n             assert self.is_connected\n-            return self.last_message.get(\"getdata\")\n+            last_data = self.last_message.get(\"getdata\")\n+            if not last_data:\n+                return False\n+            return [x.hash for x in last_data.inv] == hash_list\n \n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n "
      }
    ]
  }
]