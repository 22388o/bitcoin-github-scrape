[
  {
    "sha": "c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmI3MmJhMjdmMGI0MWQxNWM3MDgxOGNiOTc0ZDRmZTcxODhkMTdj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-09T18:39:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-09T21:28:46Z"
      },
      "message": "Remove fClient\n\nClient (SPV) mode never got implemented entirely, and whatever part was already\nworking, is likely not been tested (or even executed at all) for the past two\nyears. This removes it entirely.\n\nIf we want an SPV implementation, I think we should first get the block chain\ndata structures to be encapsulated in a class implementing a standard interface,\nand then writing an alternate implementation with SPV semantics.",
      "tree": {
        "sha": "a76205d143c4e345666b488212253d7e9de51266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a76205d143c4e345666b488212253d7e9de51266"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/429915bd0dfcdb03b13d9a3c2fb82d5401ef70ce"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 14,
      "deletions": 33
    },
    "files": [
      {
        "sha": "7585ae3aef799541c1ce688ef102ea7255a46019",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 30,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
        "patch": "@@ -467,28 +467,21 @@ CTransaction::GetLegacySigOpCount() const\n \n int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n {\n-    if (fClient)\n-    {\n-        if (hashBlock == 0)\n-            return 0;\n-    }\n-    else\n-    {\n-        CBlock blockTmp;\n-\n-        if (pblock == NULL) {\n-            CCoins coins;\n-            if (pcoinsTip->GetCoins(GetHash(), coins)) {\n-                CBlockIndex *pindex = FindBlockByHeight(coins.nHeight);\n-                if (pindex) {\n-                    if (!blockTmp.ReadFromDisk(pindex))\n-                        return 0;\n-                    pblock = &blockTmp;\n-                }\n+    CBlock blockTmp;\n+\n+    if (pblock == NULL) {\n+        CCoins coins;\n+        if (pcoinsTip->GetCoins(GetHash(), coins)) {\n+            CBlockIndex *pindex = FindBlockByHeight(coins.nHeight);\n+            if (pindex) {\n+                if (!blockTmp.ReadFromDisk(pindex))\n+                    return 0;\n+                pblock = &blockTmp;\n             }\n         }\n+    }\n \n-        if (pblock) {\n+    if (pblock) {\n         // Update the tx's hashBlock\n         hashBlock = pblock->GetHash();\n \n@@ -506,7 +499,6 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n \n         // Fill in merkle branch\n         vMerkleBranch = pblock->GetMerkleBranch(nIndex);\n-        }\n     }\n \n     // Is the tx in a block that's in the main chain\n@@ -915,16 +907,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(bool fCheckInputs)\n {\n-    if (fClient)\n-    {\n-        if (!IsInMainChain() && !ClientCheckInputs())\n-            return false;\n-        return CTransaction::AcceptToMemoryPool(false);\n-    }\n-    else\n-    {\n-        return CTransaction::AcceptToMemoryPool(fCheckInputs);\n-    }\n+    return CTransaction::AcceptToMemoryPool(fCheckInputs);\n }\n \n "
      },
      {
        "sha": "7867c85b7ffe7a7cc011586f7f3c6625f067016c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
        "patch": "@@ -45,10 +45,9 @@ struct LocalServiceInfo {\n //\n // Global state variables\n //\n-bool fClient = false;\n bool fDiscover = true;\n bool fUseUPnP = false;\n-uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n+uint64 nLocalServices = NODE_NETWORK;\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};"
      },
      {
        "sha": "44c80dac28868a5f4ab01713a9ed04257b91f6ff",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b72ba27f0b41d15c70818cb974d4fe7188d17c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c2b72ba27f0b41d15c70818cb974d4fe7188d17c",
        "patch": "@@ -86,7 +86,6 @@ enum threadId\n     THREAD_MAX\n };\n \n-extern bool fClient;\n extern bool fDiscover;\n extern bool fUseUPnP;\n extern uint64 nLocalServices;"
      }
    ]
  }
]