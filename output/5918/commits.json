[
  {
    "sha": "f7303f97933be33e34d482cf8348d180c8da2a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzMwM2Y5NzkzM2JlMzNlMzRkNDgyY2Y4MzQ4ZDE4MGM4ZGEyYTI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-17T13:35:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-22T10:53:25Z"
      },
      "message": "Use equivalent PoW for non-main-chain requests",
      "tree": {
        "sha": "5612e3678a19c1412212ca034e7c7a8b959aa9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5612e3678a19c1412212ca034e7c7a8b959aa9f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7303f97933be33e34d482cf8348d180c8da2a26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7303f97933be33e34d482cf8348d180c8da2a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7303f97933be33e34d482cf8348d180c8da2a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7303f97933be33e34d482cf8348d180c8da2a26/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 49,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c5168ec8c4a5fdfbf80e6b3696ef6c51453922de",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7303f97933be33e34d482cf8348d180c8da2a26/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7303f97933be33e34d482cf8348d180c8da2a26/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f7303f97933be33e34d482cf8348d180c8da2a26",
        "patch": "@@ -3459,7 +3459,6 @@ bool static AlreadyHave(const CInv& inv)\n     return true;\n }\n \n-\n void static ProcessGetData(CNode* pfrom)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n@@ -3487,11 +3486,13 @@ void static ProcessGetData(CNode* pfrom)\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n+                        static const int nOneMonth = 30 * 24 * 60 * 60;\n                         // To prevent fingerprinting attacks, only send blocks outside of the active\n-                        // chain if they are valid, and no more than a month older than the best header\n-                        // chain we know about.\n+                        // chain if they are valid, and no more than a month older (both in time, and in\n+                        // best equivalent proof of work) than the best header chain we know about.\n                         send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n-                            (mi->second->GetBlockTime() > pindexBestHeader->GetBlockTime() - 30 * 24 * 60 * 60);\n+                            (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n+                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, Params().GetConsensus()) < nOneMonth);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }"
      },
      {
        "sha": "bb53ad204bc7b3b8ccf1c2b7c1215fa964a35833",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7303f97933be33e34d482cf8348d180c8da2a26/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7303f97933be33e34d482cf8348d180c8da2a26/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=f7303f97933be33e34d482cf8348d180c8da2a26",
        "patch": "@@ -114,3 +114,20 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n+\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n+{\n+    arith_uint256 r;\n+    int sign = 1;\n+    if (to.nChainWork > from.nChainWork) {\n+        r = to.nChainWork - from.nChainWork;\n+    } else {\n+        r = from.nChainWork - to.nChainWork;\n+        sign = -1;\n+    }\n+    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n+    if (r.bits() > 63) {\n+        return sign * std::numeric_limits<int64_t>::max();\n+    }\n+    return sign * r.GetLow64();\n+}"
      },
      {
        "sha": "e864a474ccd69d8cbf51c721cc810798c1f95b5f",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7303f97933be33e34d482cf8348d180c8da2a26/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7303f97933be33e34d482cf8348d180c8da2a26/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=f7303f97933be33e34d482cf8348d180c8da2a26",
        "patch": "@@ -22,4 +22,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n+/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+\n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "a436749287d844f64126b59acc9bf83e0eba5ea3",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7303f97933be33e34d482cf8348d180c8da2a26/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7303f97933be33e34d482cf8348d180c8da2a26/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=f7303f97933be33e34d482cf8348d180c8da2a26",
        "patch": "@@ -69,4 +69,28 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n     BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n }\n \n+BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n+\n+    std::vector<CBlockIndex> blocks(10000);\n+    for (int i = 0; i < 10000; i++) {\n+        blocks[i].pprev = i ? &blocks[i - 1] : NULL;\n+        blocks[i].nHeight = i;\n+        blocks[i].nTime = 1269211443 + i * params.nPowTargetSpacing;\n+        blocks[i].nBits = 0x207fffff; /* target 0x7fffff000... */\n+        blocks[i].nChainWork = i ? blocks[i - 1].nChainWork + GetBlockProof(blocks[i - 1]) : arith_uint256(0);\n+    }\n+\n+    for (int j = 0; j < 1000; j++) {\n+        CBlockIndex *p1 = &blocks[GetRand(10000)];\n+        CBlockIndex *p2 = &blocks[GetRand(10000)];\n+        CBlockIndex *p3 = &blocks[GetRand(10000)];\n+\n+        int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, params);\n+        BOOST_CHECK_EQUAL(tdiff, p1->GetBlockTime() - p2->GetBlockTime());\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]