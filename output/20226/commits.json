[
  {
    "sha": "647b81b70938dc4dbcf32399c56f78be395c721a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDdiODFiNzA5MzhkYzRkYmNmMzIzOTljNTZmNzhiZTM5NWM3MjFh",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-10-09T07:24:20Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-01-27T20:22:13Z"
      },
      "message": "wallet, rpc: add listdescriptors command",
      "tree": {
        "sha": "3098f9a6da9bef19aa45e6865f7bc7ba5b20214e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3098f9a6da9bef19aa45e6865f7bc7ba5b20214e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/647b81b70938dc4dbcf32399c56f78be395c721a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647b81b70938dc4dbcf32399c56f78be395c721a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/647b81b70938dc4dbcf32399c56f78be395c721a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647b81b70938dc4dbcf32399c56f78be395c721a/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 139,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8505ddc30926b158c3b09525fb301883ee9bdcbb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647b81b70938dc4dbcf32399c56f78be395c721a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647b81b70938dc4dbcf32399c56f78be395c721a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=647b81b70938dc4dbcf32399c56f78be395c721a",
        "patch": "@@ -1740,3 +1740,72 @@ RPCHelpMan importdescriptors()\n },\n     };\n }\n+\n+RPCHelpMan listdescriptors()\n+{\n+    return RPCHelpMan{\n+        \"listdescriptors\",\n+        \"\\nList descriptors imported into a descriptor-enabled wallet.\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"Response is an array of descriptor objects\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\", {\n+                    {RPCResult::Type::STR, \"desc\", \"Descriptor string representation\"},\n+                    {RPCResult::Type::NUM, \"timestamp\", \"The creation time of the descriptor\"},\n+                    {RPCResult::Type::BOOL, \"active\", \"Activeness flag\"},\n+                    {RPCResult::Type::BOOL, \"internal\", true, \"Whether this is internal or external descriptor; defined only for active descriptors\"},\n+                    {RPCResult::Type::ARR_FIXED, \"range\", true, \"Defined only for ranged descriptors\", {\n+                        {RPCResult::Type::NUM, \"\", \"Range start inclusive\"},\n+                        {RPCResult::Type::NUM, \"\", \"Range end inclusive\"},\n+                    }},\n+                    {RPCResult::Type::NUM, \"next\", true, \"The next index to generate addresses from; defined only for ranged descriptors\"},\n+                }},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"listdescriptors\", \"\") + HelpExampleRpc(\"listdescriptors\", \"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"listdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    LOCK(wallet->cs_wallet);\n+\n+    UniValue response(UniValue::VARR);\n+    const auto active_spk_mans = wallet->GetActiveScriptPubKeyMans();\n+    for (const auto& spk_man : wallet->GetAllScriptPubKeyMans()) {\n+        const auto desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man);\n+        if (!desc_spk_man) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Unexpected ScriptPubKey manager type.\");\n+        }\n+        UniValue spk(UniValue::VOBJ);\n+        LOCK(desc_spk_man->cs_desc_man);\n+        const auto& wallet_descriptor = desc_spk_man->GetWalletDescriptor();\n+        spk.pushKV(\"desc\", wallet_descriptor.descriptor->ToString());\n+        spk.pushKV(\"timestamp\", wallet_descriptor.creation_time);\n+        const bool active = active_spk_mans.count(desc_spk_man) != 0;\n+        spk.pushKV(\"active\", active);\n+        const auto& type = wallet_descriptor.descriptor->GetOutputType();\n+        if (active && type != nullopt) {\n+            spk.pushKV(\"internal\", wallet->GetScriptPubKeyMan(*type, true) == desc_spk_man);\n+        }\n+        if (wallet_descriptor.descriptor->IsRange()) {\n+            UniValue range(UniValue::VARR);\n+            range.push_back(wallet_descriptor.range_start);\n+            range.push_back(wallet_descriptor.range_end - 1);\n+            spk.pushKV(\"range\", range);\n+            spk.pushKV(\"next\", wallet_descriptor.next_index);\n+        }\n+        response.push_back(spk);\n+    }\n+\n+    return response;\n+},\n+    };\n+}"
      },
      {
        "sha": "92bae9dc54431b05820432f97fa7922c9b87be7d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647b81b70938dc4dbcf32399c56f78be395c721a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647b81b70938dc4dbcf32399c56f78be395c721a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=647b81b70938dc4dbcf32399c56f78be395c721a",
        "patch": "@@ -4537,6 +4537,7 @@ RPCHelpMan importprunedfunds();\n RPCHelpMan removeprunedfunds();\n RPCHelpMan importmulti();\n RPCHelpMan importdescriptors();\n+RPCHelpMan listdescriptors();\n \n Span<const CRPCCommand> GetWalletRPCCommands()\n {\n@@ -4575,6 +4576,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listdescriptors\",                  &listdescriptors,               {} },\n     { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },"
      },
      {
        "sha": "f62a0f267aae47d62a3d4636a989e522e3f34524",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647b81b70938dc4dbcf32399c56f78be395c721a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647b81b70938dc4dbcf32399c56f78be395c721a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=647b81b70938dc4dbcf32399c56f78be395c721a",
        "patch": "@@ -237,6 +237,7 @@\n     'rpc_named_arguments.py',\n     'wallet_listsinceblock.py',\n     'wallet_listsinceblock.py --descriptors',\n+    'wallet_listdescriptors.py --descriptors',\n     'p2p_leak.py',\n     'wallet_encryption.py',\n     'wallet_encryption.py --descriptors',"
      },
      {
        "sha": "9f8c341bc713b0ec5f2a3fbdaf3dd75b19a987f8",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647b81b70938dc4dbcf32399c56f78be395c721a/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647b81b70938dc4dbcf32399c56f78be395c721a/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=647b81b70938dc4dbcf32399c56f78be395c721a",
        "patch": "@@ -0,0 +1,67 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the listdescriptors RPC.\"\"\"\n+\n+from test_framework.descriptors import (\n+    descsum_create\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class ListDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    # do not create any wallet by default\n+    def init_wallet(self, i):\n+        return\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        assert_raises_rpc_error(-18, 'No wallet is loaded.', node.listdescriptors)\n+\n+        self.log.info('Test that the command is not available for legacy wallets.')\n+        node.createwallet(wallet_name='w1', descriptors=False)\n+        assert_raises_rpc_error(-4, 'listdescriptors is not available for non-descriptor wallets', node.listdescriptors)\n+\n+        self.log.info('Test the command for empty descriptors wallet.')\n+        node.createwallet(wallet_name='w2', blank=True, descriptors=True)\n+        assert_equal(0, len(node.get_wallet_rpc('w2').listdescriptors()))\n+\n+        self.log.info('Test the command for a default descriptors wallet.')\n+        node.createwallet(wallet_name='w3', descriptors=True)\n+        result = node.get_wallet_rpc('w3').listdescriptors()\n+        assert_equal(6, len(result))\n+        assert_equal(6, len([d for d in result if d['active']]))\n+        assert_equal(3, len([d for d in result if d['internal']]))\n+        for item in result:\n+            assert item['desc'] != ''\n+            assert item['next'] == 0\n+            assert item['range'] == [0, 0]\n+            assert item['timestamp'] is not None\n+\n+        self.log.info('Test non-active non-range combo descriptor')\n+        node.createwallet(wallet_name='w4', blank=True, descriptors=True)\n+        wallet = node.get_wallet_rpc('w4')\n+        wallet.importdescriptors([{\n+            'desc': descsum_create('combo(' + node.get_deterministic_priv_key().key + ')'),\n+            'timestamp': 1296688602,\n+        }])\n+        expected = [{'active': False,\n+                     'desc': 'combo(0227d85ba011276cf25b51df6a188b75e604b38770a462b2d0e9fb2fc839ef5d3f)#np574htj',\n+                     'timestamp': 1296688602}]\n+        assert_equal(expected, wallet.listdescriptors())\n+\n+\n+if __name__ == '__main__':\n+    ListDescriptorsTest().main()"
      }
    ]
  }
]