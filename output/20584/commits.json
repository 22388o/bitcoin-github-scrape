[
  {
    "sha": "1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzY1YzA3NWVlNGM3Zjk4ZDljMWZhYzVlZDc1NzZiOTYzNzRkNGU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T15:51:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T18:44:25Z"
      },
      "message": "Don't declare de facto const member functions as non-const",
      "tree": {
        "sha": "6bbc3ecd15d74450843b7049414b0c1950182c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bbc3ecd15d74450843b7049414b0c1950182c4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64156ad4d1f50daf35250dc3b329a8a595594d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64156ad4d1f50daf35250dc3b329a8a595594d87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64156ad4d1f50daf35250dc3b329a8a595594d87"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "4ddcf1d9308ad42962d42e618e9d605f9adadbda",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -174,7 +174,7 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n     return false;\n }\n \n-std::vector<LogCategory> BCLog::Logger::LogCategoriesList()\n+std::vector<LogCategory> BCLog::Logger::LogCategoriesList() const\n {\n     std::vector<LogCategory> ret;\n     for (const CLogCategoryDesc& category_desc : LogCategories) {"
      },
      {
        "sha": "9efecc7c12f3f1951d2c11852e2b47decb860421",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -135,9 +135,9 @@ namespace BCLog {\n \n         bool WillLogCategory(LogFlags category) const;\n         /** Returns a vector of the log categories */\n-        std::vector<LogCategory> LogCategoriesList();\n+        std::vector<LogCategory> LogCategoriesList() const;\n         /** Returns a string with the log categories */\n-        std::string LogCategoriesString()\n+        std::string LogCategoriesString() const\n         {\n             return Join(LogCategoriesList(), \", \", [&](const LogCategory& i) { return i.category; });\n         };"
      },
      {
        "sha": "009ae6b13ab655cc4cb13b874ff402deb5ce4018",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -213,7 +213,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - transaction finality (locktime)\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n+bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const\n {\n     for (CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))"
      },
      {
        "sha": "9a2b7063f4dbefee84b89cf4b20bb423971873ea",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -185,7 +185,7 @@ class BlockAssembler\n       * locktime, premature-witness, serialized size (if necessary)\n       * These checks should always succeed, and they're here\n       * only as an extra check in case of suboptimal node configuration */\n-    bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n+    bool TestPackageTransactions(const CTxMemPool::setEntries& package) const;\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n     bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set& mapModifiedTx, CTxMemPool::setEntries& failedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);"
      },
      {
        "sha": "8ddbcf5d3365aaaaacc8dc211d2c5212bc568cc6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -1216,7 +1216,7 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-void CConnman::InactivityCheck(CNode *pnode)\n+void CConnman::InactivityCheck(CNode *pnode) const\n {\n     int64_t nTime = GetSystemTimeInSeconds();\n     if (nTime - pnode->nTimeConnected > m_peer_connect_timeout)"
      },
      {
        "sha": "0e92e06e0d07645d771ed726f6ba08becdd5cdbd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -423,7 +423,7 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n-    void InactivityCheck(CNode *pnode);\n+    void InactivityCheck(CNode *pnode) const;\n     bool GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();"
      },
      {
        "sha": "ecac3b9e7e071e75cfabd4e0ec5221e76fc38eab",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -305,8 +305,8 @@ class ConditionStack {\n     uint32_t m_first_false_pos = NO_FALSE;\n \n public:\n-    bool empty() { return m_stack_size == 0; }\n-    bool all_true() { return m_first_false_pos == NO_FALSE; }\n+    bool empty() const { return m_stack_size == 0; }\n+    bool all_true() const { return m_first_false_pos == NO_FALSE; }\n     void push_back(bool f)\n     {\n         if (m_first_false_pos == NO_FALSE && !f) {"
      },
      {
        "sha": "5dbf07b420c4db862fd454301a2eb77fb59a0af3",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -26,7 +26,7 @@ static const unsigned int QUEUE_BATCH_SIZE = 128;\n static const int SCRIPT_CHECK_THREADS = 3;\n \n struct FakeCheck {\n-    bool operator()()\n+    bool operator()() const\n     {\n         return true;\n     }\n@@ -47,7 +47,7 @@ struct FailingCheck {\n     bool fails;\n     FailingCheck(bool _fails) : fails(_fails){};\n     FailingCheck() : fails(true){};\n-    bool operator()()\n+    bool operator()() const\n     {\n         return !fails;\n     }\n@@ -76,7 +76,7 @@ struct UniqueCheck {\n struct MemoryCheck {\n     static std::atomic<size_t> fake_allocated_memory;\n     bool b {false};\n-    bool operator()()\n+    bool operator()() const\n     {\n         return true;\n     }\n@@ -107,7 +107,7 @@ struct FrozenCleanupCheck {\n     // Freezing can't be the default initialized behavior given how the queue\n     // swaps in default initialized Checks.\n     bool should_freeze {false};\n-    bool operator()()\n+    bool operator()() const\n     {\n         return true;\n     }"
      },
      {
        "sha": "e6b72dc447bec3a0949e0ed14c1a7f6df9fcd58b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -231,12 +231,12 @@ TestChain100Setup::~TestChain100Setup()\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n }\n \n-CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction& tx)\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction& tx) const\n {\n     return FromTx(MakeTransactionRef(tx));\n }\n \n-CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransactionRef& tx)\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransactionRef& tx) const\n {\n     return CTxMemPoolEntry(tx, nFee, nTime, nHeight,\n                            spendsCoinbase, sigOpCost, lp);"
      },
      {
        "sha": "a20421b85b06f636afcf22b193249615ded6d497",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -138,8 +138,8 @@ struct TestMemPoolEntryHelper\n         nFee(0), nTime(0), nHeight(1),\n         spendsCoinbase(false), sigOpCost(4) { }\n \n-    CTxMemPoolEntry FromTx(const CMutableTransaction& tx);\n-    CTxMemPoolEntry FromTx(const CTransactionRef& tx);\n+    CTxMemPoolEntry FromTx(const CMutableTransaction& tx) const;\n+    CTxMemPoolEntry FromTx(const CTransactionRef& tx) const;\n \n     // Change the default value\n     TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }"
      },
      {
        "sha": "4ec4ee8a7f5eb0dcd6c0f0650dc4b9d2c96abe4d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -564,7 +564,7 @@ class CChainState\n \n     //! @returns whether or not the CoinsViews object has been fully initialized and we can\n     //!          safely flush this object to disk.\n-    bool CanFlushToDisk() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+    bool CanFlushToDisk() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n         return m_coins_views && m_coins_views->m_cacheview;\n     }\n "
      },
      {
        "sha": "5c3d7a9d75b45c1d4691bb7f133fe7f0dc20e2c9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -2706,7 +2706,7 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, const uin\n     return locktime;\n }\n \n-OutputType CWallet::TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend)\n+OutputType CWallet::TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const\n {\n     // If -changetype is specified, always use that change type.\n     if (change_type) {"
      },
      {
        "sha": "e3eae1dd95db06881ccdb3c3cc14bc99e48e55d3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "patch": "@@ -930,7 +930,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     Balance GetBalance(int min_depth = 0, bool avoid_reuse = true) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n-    OutputType TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend);\n+    OutputType TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\n \n     /**\n      * Insert additional inputs into the transaction by"
      }
    ]
  },
  {
    "sha": "31b136e5802e1b1e5f9a9589736afe0652f34da2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWIxMzZlNTgwMmUxYjFlNWY5YTk1ODk3MzZhZmUwNjUyZjM0ZGEy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T16:11:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T18:44:31Z"
      },
      "message": "Don't declare de facto const reference variables as non-const",
      "tree": {
        "sha": "9779b5d95f79318082347ed7f762a53e0fdb6016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9779b5d95f79318082347ed7f762a53e0fdb6016"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31b136e5802e1b1e5f9a9589736afe0652f34da2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b136e5802e1b1e5f9a9589736afe0652f34da2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31b136e5802e1b1e5f9a9589736afe0652f34da2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b136e5802e1b1e5f9a9589736afe0652f34da2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c65c075ee4c7f98d9c1fac5ed7576b96374d4e9"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ed7fccc0ff60f172c7f2fea37fc46f8100e1073e",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -617,7 +617,7 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n         return CAddrInfo();\n     }\n \n-    CAddrInfo& newInfo = mapInfo[id_new];\n+    const CAddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);"
      },
      {
        "sha": "54e44a3471ffcbb740ac25875f173f6f14bb9944",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -65,7 +65,7 @@ NodeContext& EnsureNodeContext(const util::Ref& context)\n \n CTxMemPool& EnsureMemPool(const util::Ref& context)\n {\n-    NodeContext& node = EnsureNodeContext(context);\n+    const NodeContext& node = EnsureNodeContext(context);\n     if (!node.mempool) {\n         throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n     }\n@@ -74,7 +74,7 @@ CTxMemPool& EnsureMemPool(const util::Ref& context)\n \n ChainstateManager& EnsureChainman(const util::Ref& context)\n {\n-    NodeContext& node = EnsureNodeContext(context);\n+    const NodeContext& node = EnsureNodeContext(context);\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }"
      },
      {
        "sha": "8afbe9ebed3a0ef1a116362671a7103252fbbc4c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -388,7 +388,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n+    const CTxIn& txin = txTo.vin[nIn];\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n "
      },
      {
        "sha": "ea18cb94d4afc1d3ee048d1c349cd1c0058db2a7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -640,7 +640,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n \n-    CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n+    const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n     // do all inputs exist?\n     for (const CTxIn& txin : tx.vin) {\n         if (!coins_cache.HaveCoinInCache(txin.prevout)) {"
      },
      {
        "sha": "fa38fcc0cefdadc33ec04a937b0ef0bae65f27e2",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -256,7 +256,7 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n         errors.push_back(Untranslated(\"Invalid or non-wallet transaction id\"));\n         return Result::MISC_ERROR;\n     }\n-    CWalletTx& oldWtx = it->second;\n+    const CWalletTx& oldWtx = it->second;\n \n     // make sure the transaction still has no descendants and hasn't been mined in the meantime\n     Result result = PreconditionChecks(wallet, oldWtx, errors);"
      },
      {
        "sha": "ce668d0468a89e3ff1ba1e70b994ca8c653c5a7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b136e5802e1b1e5f9a9589736afe0652f34da2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=31b136e5802e1b1e5f9a9589736afe0652f34da2",
        "patch": "@@ -570,7 +570,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n {\n     auto it = mapWallet.find(wtxid);\n     assert(it != mapWallet.end());\n-    CWalletTx& thisTx = it->second;\n+    const CWalletTx& thisTx = it->second;\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n@@ -1053,7 +1053,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     // Can't mark abandoned if confirmed or in mempool\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n-    CWalletTx& origtx = it->second;\n+    const CWalletTx& origtx = it->second;\n     if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }"
      }
    ]
  }
]