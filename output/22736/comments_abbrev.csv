jonatack,2021-08-18 20:15:15,"Moving this out of draft now, ready for review.",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-901400935,901400935,
DrahtBot,2021-08-19 08:35:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20487](https://github.com/bitcoin/bitcoin/pull/20487) (Add syscall sandboxing using seccomp-bpf (Linux secure computing ",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-901721006,901721006,
laanwj,2021-08-19 14:50:46,Code review ACK ccd73de1dd969097d34634c2be2fc32b03fbd09e,https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-901980815,901980815,
practicalswift,2021-08-19 21:32:09,"Concept ACK\n\nNice idea. I've used something similar in my local tree when analysing lock contention locally.\n\nNon-blocking suggestions:\n* In my version I printed the duration too to make it clear from the log entry if the lock contention was significant or not. Perhaps worth adding here too?\n* In addition to `__FILE__` and `__LINE__` it would be nice to have `__FUNCTION__` printed as p",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902262386,902262386,
jonatack,2021-08-19 23:20:40,"> In my version I printed the duration too to make it clear from the log entry if the lock contention was significant or not. Perhaps worth adding here too?\n> \n> In addition to `__FILE__` and `__LINE__` it would be nice to have `__FUNCTION__` printed as part of the log message too.\n\nI think I'd need your help (propose a commit to pull in?) or you could do it as a follow-up.\n \n> To rule",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902315324,902315324,
jonatack,2021-08-19 23:23:37,"@laanwj: following up on our IRC convo in `#bitcoin-core-builds`, as a test just pushed a version with the `HAVE_THREAD_LOCAL` conditional compilation directives removed to see what happens...",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902316418,902316418,
jonatack,2021-08-20 09:35:57,"To-do:\n- <strike>add a smoke test with -debug=lock</strike>\n- <strike>do some invocation frequency checks and research</strike>\n- try benchmarking Mutex::UniqueLock `lock()` versus `try_lock()` and the overhead of `LogAcceptCategory(BCLog::LOCK)`, which evaluates to `m_categories.load(std::memory_order_relaxed) & category) != 0`",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902567823,902567823,
MarcoFalke,2021-08-20 10:22:09,"> add a smoke test with -debug=lock\n\nShouldn't this be enabled in the functional test already by default?",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902594037,902594037,
jonatack,2021-08-20 12:55:25,"> Shouldn't this be enabled in the functional test already by default?\n\nYou're right, TIL.  I was thinking of adding something like this assertion but probably not worth it or reliable enough:\n\n```python3\n        with node.assert_debug_log(expected_msgs=[""Lock contention: cs_main""]):\n            node.generate(COINBASE_MATURITY)\n```\n",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902672708,902672708,
theStack,2021-08-20 16:33:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902815225,902815225,
jonatack,2021-08-20 17:38:09,"Observations\n\n- `void Mutex::UniqueLock::lock()` acquires the mutex and blocks until it gains access to it\n\n- `bool Mutex::UniqueLock::try_lock()` doesn't block but instead immediately returns whether it acquired the mutex; it may be used by `lock()` internally as part of the deadlock-avoidance algorithm\n\n- IIUC the test-and-set logic of these calls is ~constant time, optimised and lig",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902851054,902851054,
hebasto,2021-09-01 07:57:14,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910035766,910035766,
hebasto,2021-09-01 08:31:22,">     * benchmarking ... the overhead of `LogAcceptCategory(BCLog::LOCK)`, which evaluates to `m_categories.load(std::memory_order_relaxed) & category) != 0`\n\nI think the benchmarking results could depend on a platform.\n\nCould we sacrifice the ability to turn ""lock"" debugging on/off at runtime, and use just a const?\n\n",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910063200,910063200,
jonatack,2021-09-01 09:23:36,"> Could we sacrifice the ability to turn ""lock"" debugging on/off at runtime, and use just a const?\n\nI could be wrong, and this goes way beyond my competence, but readings suggest that these options are low-level, fast, and near constant time compared to system calls, memory/cache coherency and fences, wait queues and (particularly) lock contentions.  (Would a difference be apparent in, say, ht",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910102088,910102088,
hebasto,2021-09-01 09:23:55,"> > Could we sacrifice the ability to turn ""lock"" debugging on/off at runtime, and use just a const?\n> \n> I could be wrong, and this goes way beyond my competence, but readings suggest that these options are low-level, fast, and near constant time compared to system calls, memory/cache coherency and fences, wait queues and (particularly) lock contentions. Would a difference be apparent in, say",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910102353,910102353,
jonatack,2021-09-01 09:33:23,"> And `m_categories.load(std::memory_order_relaxed)` could cause cache lines switching, no?\n\nAlternative version:\n```cpp\n    void Enter(const char* pszName, const char* pszFile, int nLine)\n    {\n        EnterCritical(pszName, pszFile, nLine, Base::mutex());\n        if (Base::try_lock()) return;\n        Base::lock();\n        LogPrint(BCLog::LOCK, ""Lock contention: %s, %s:%d\n"", ps",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910110140,910110140,
hebasto,2021-09-01 09:40:20,"> > And `m_categories.load(std::memory_order_relaxed)` could cause cache lines switching, no?\n> \n> Alternative version:\n> \n> ```c++\n>     void Enter(const char* pszName, const char* pszFile, int nLine)\n>     {\n>         EnterCritical(pszName, pszFile, nLine, Base::mutex());\n>         if (Base::try_lock()) return;\n>         Base::lock();\n>         LogPrint(BCLog::LOCK, ""Lock con",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910114980,910114980,
jonatack,2021-09-01 10:25:50,"> And `m_categories.load(std::memory_order_relaxed)` could cause cache lines switching, no?\n\nI don't know.\n\n> Maybe put logging before the blocking call `Base::lock();` as it is now? The `LogPrint` call takes some time, and it could increase probability of releasing a mutex by another thread before the `Base::lock()` call.\n\nSeems like a good idea--done.\n\n\n\n",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910149515,910149515,
jonatack,2021-09-01 10:46:05,"> as a follow up?\n\nThanks--was about to re-push to drop the third commit. Will try your suggestion before re-pushing.",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910162337,910162337,
hebasto,2021-09-01 10:48:13,"> > as a follow up?\n> \n> Thanks--was about to re-push to drop the third commit. Will try your suggestion before re-pushing.\n\nMy only concerns are about wording -- ""Enter: Lock contention: cs_vNodes, net.cpp:2242 completed (0.07ms)"" -- ""contention completed""?",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910163668,910163668,
jonatack,2021-09-01 11:06:42,"> My only concerns are about wording -- ""Enter: Lock contention: cs_vNodes, net.cpp:2242 completed (0.07ms)"" -- ""contention completed""?\n\nI'm seeing the following (all of the times are 0.00ms or 0.01ms so far, and seems I should remove ""PrintLockContention"" or ""Lock Contention"" from the log output now)\n```\n2021-09-01T11:03:59Z PrintLockContention: Lock contention: cs_main, net_processing.cp",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910176459,910176459,
jonatack,2021-09-01 11:34:29,"<details><summary>How about microseconds?</summary><p>\n\n```diff\ndiff --git a/src/logging/timer.h b/src/logging/timer.h\nindex 159920e397..cadfe395ee 100644\n--- a/src/logging/timer.h\n+++ b/src/logging/timer.h\n@@ -93,6 +93,8 @@ private:\n } // namespace BCLog\n \n \n+#define LOG_TIME_MICROS_WITH_CATEGORY(end_msg, log_category) \\n+    BCLog::Timer<std::chrono::microseconds> PASTE2(",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910198774,910198774,
martinus,2021-09-01 11:47:07,"> And `m_categories.load(std::memory_order_relaxed)` could cause cache lines switching, no?\n\nyes, the only guarantee with `memory_order_relaxed` is that the operation itself is atomic, but other operations are allowed to be  shuffled that by the compiler. I personally try to avoid using any of the memory order stuff. It's too easy to get wrong. \n\nBy the way, I think that in that patch: \n",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910206514,910206514,
jonatack,2021-09-01 13:21:24,"Thanks for the ideas and feedback. Updates:\n\n- added a timing macro in microseconds, `LOG_TIME_MICROS_WITH_CATEGORY`\n- improved `BCLog::LogMsg()` to omit irrelevant decimals for microseconds and skip unnecessary code/math\n- added time duration in microseconds to the lock contention logging\n\n> If `Base::try_lock()` fails strictly speaking that does not necessarily mean that there's a lo",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-910280351,910280351,
jonatack,2021-09-05 11:14:24,"Thanks for testing! For me, there seems to be a higher frequency of contention and occuring in more places on mainnet than on signet, presumably as the scale/numbers are larger. Also, a big difference in contention durations between a regular build and a debug build, which makes sense.",https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-913133555,913133555,
laanwj,2021-08-18 14:11:34,I am somewhat worried that the extra calls to `Base::try_lock` cause performance overhead in the non-lock contention debugging case. It's unnecessary. We might want to gate *that too* on the log category being enabled.,https://github.com/bitcoin/bitcoin/pull/22736#discussion_r691277896,691277896,src/sync.h
jonatack,2021-08-18 14:14:42,"Thanks, wondering that as well (or alternatively, leave the directives in place and just improve the logging experience when `DEBUG_LOCKCONTENTION` is defined).",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r691280693,691280693,src/sync.h
jonatack,2021-08-18 18:03:48,"Implemented your suggestion (thanks!)\n\n(Behind the gate it could now be just `LogPrintf` if anyone prefers.)",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r691487999,691487999,src/sync.h
MarcoFalke,2021-08-19 18:29:56,why are those includes needed?,https://github.com/bitcoin/bitcoin/pull/22736#discussion_r692383717,692383717,src/sync.h
MarcoFalke,2021-08-19 18:36:38,"nit: If `PrintLockContention` stayed in the cpp file, this include can be avoided (it indirectly includes the heavy filesystem header).",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r692388102,692388102,src/sync.h
jonatack,2021-08-19 23:11:47,dropped,https://github.com/bitcoin/bitcoin/pull/22736#discussion_r692550022,692550022,src/sync.h
jonatack,2021-08-19 23:14:07,"Good point, though we would have to essentially move `UniqueLock::Enter()` to the cpp file, due to calling `LogAcceptCategory(BCLog::LOCK)`. Punting on this for now.",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r692550796,692550796,src/sync.h
hebasto,2021-09-01 08:19:05,"```suggestion\n        if (LogAcceptCategory(BCLog::LOCK) && !Base::try_lock()) {\n            LogPrintf(""Lock contention: %s, %s:%d\n"", pszName, pszFile, nLine);\n        }\n```\n\n?",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r699989239,699989239,src/sync.h
jonatack,2021-09-01 09:09:23,"Thanks. If I understand the suggestion, this would only lock if the lock logging is on and `try_lock()` succeeds.",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r700028085,700028085,src/sync.h
hebasto,2021-09-01 09:12:27,"```cpp\n    void Enter(const char* pszName, const char* pszFile, int nLine)\n    {\n        EnterCritical(pszName, pszFile, nLine, Base::mutex());\n        if (LogAcceptCategory(BCLog::LOCK) && !Base::try_lock()) {\n            LogPrintf(""Lock contention: %s, %s:%d\n"", pszName, pszFile, nLine);\n        }\n        Base::lock();\n    }\n```",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r700030470,700030470,src/sync.h
hebasto,2021-09-01 09:18:47,"nm, my suggestion is wrong.",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r700035169,700035169,src/sync.h
jonatack,2021-09-01 10:44:14,"> nit: If `PrintLockContention` stayed in the cpp file, this include can be avoided (it indirectly includes the heavy filesystem header).\n\nagree, dropped the commit changing this",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r700095417,700095417,src/sync.h
MarcoFalke,2021-09-06 09:23:30,unrelated: Could make sense to inline those as well to avoid the heterogeneous code flow? ,https://github.com/bitcoin/bitcoin/pull/22736#discussion_r702747920,702747920,src/logging/timer.h
martinus,2021-09-06 17:21:54,"I think `LockContention` doesn't do what it is supposed to do. At least it doesn't log the time that the contention actually takes: the macro creates an `BCLog::Timer` instance where constructor measures start time, and destructor prints finished. But since all that is done inside the `LockContention` function, this happens instantly and doesn't measure the actual lock contention.\n\nI've verifi",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r703019629,703019629,src/sync.cpp
jonatack,2021-09-06 17:53:55,"Interesting, makes sense that it would only be timing the `LockContention()` function. Right now on mainnet with a non-debug clang 13 build running since 6 hours (2 cores x 2.50GHz), I see varying durations of 1-50 usec, most often 2-30.  I suspect your machine is much faster than mine (and that I may be only seeing the time of the macro function as you suggest). Will try your suggestion.",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r703028343,703028343,src/sync.cpp
jonatack,2021-09-06 23:08:46,"@martinus This does seem better, now seeing durations of 1 to several million usec (mainnet, non-debug build). Thanks for reporting. Proposed fix in #22904.\n",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r703090529,703090529,src/sync.cpp
jonatack,2021-09-06 23:09:29,"good idea, done (and more) in #22904",https://github.com/bitcoin/bitcoin/pull/22736#discussion_r703090666,703090666,src/logging/timer.h
