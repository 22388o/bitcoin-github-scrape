[
  {
    "sha": "ef8ca179ef007eba5bed497be18f5bc90a4194a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjhjYTE3OWVmMDA3ZWJhNWJlZDQ5N2JlMThmNWJjOTBhNDE5NGE2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-28T17:59:25Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-17T09:18:25Z"
      },
      "message": "[test] Add tests for some walletmodel functions\n\nAdd unit tests for some walletmodel functions that will be refactored & moved\nin the next commit.",
      "tree": {
        "sha": "af17d5c532bcca75c682214f9cb14f7099074e9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af17d5c532bcca75c682214f9cb14f7099074e9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef8ca179ef007eba5bed497be18f5bc90a4194a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ca179ef007eba5bed497be18f5bc90a4194a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8ca179ef007eba5bed497be18f5bc90a4194a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ca179ef007eba5bed497be18f5bc90a4194a6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "526e8390e6be32b33a7fe2c6388d1ade8bdbb5aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526e8390e6be32b33a7fe2c6388d1ade8bdbb5aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526e8390e6be32b33a7fe2c6388d1ade8bdbb5aa"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 127,
      "deletions": 3
    },
    "files": [
      {
        "sha": "391b9ebdf6947f272f342ad7a83a3e8c99883121",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8ca179ef007eba5bed497be18f5bc90a4194a6/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8ca179ef007eba5bed497be18f5bc90a4194a6/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=ef8ca179ef007eba5bed497be18f5bc90a4194a6",
        "patch": "@@ -46,7 +46,8 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/paymentservertests.cpp \\\n-  qt/test/wallettests.cpp\n+  qt/test/wallettests.cpp \\\n+  wallet/test/wallet_test_fixture.cpp\n endif\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)"
      },
      {
        "sha": "867711309eb0608484970eb8413db525b83c01fd",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 2,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef8ca179ef007eba5bed497be18f5bc90a4194a6/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef8ca179ef007eba5bed497be18f5bc90a4194a6/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=ef8ca179ef007eba5bed497be18f5bc90a4194a6",
        "patch": "@@ -1,5 +1,6 @@\n #include \"wallettests.h\"\n \n+#include \"consensus/validation.h\"\n #include \"qt/bitcoinamountfield.h\"\n #include \"qt/callback.h\"\n #include \"qt/optionsmodel.h\"\n@@ -11,6 +12,8 @@\n #include \"qt/walletmodel.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/wallet.h\"\n \n #include <QAbstractButton>\n@@ -20,6 +23,118 @@\n \n namespace\n {\n+\n+void TestLoadReceiveRequests()\n+{\n+    WalletTestingSetup test;\n+    OptionsModel optionsModel;\n+    WalletModel walletModel(nullptr, pwalletMain, &optionsModel);\n+\n+    CTxDestination dest = CKeyID();\n+    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n+    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n+    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n+\n+    std::vector<std::string> values;\n+    walletModel.loadReceiveRequests(values);\n+    QCOMPARE((int)values.size(), 2);\n+    QCOMPARE(QString::fromStdString(values[0]), QString(\"val_rr0\"));\n+    QCOMPARE(QString::fromStdString(values[1]), QString(\"val_rr1\"));\n+}\n+\n+class ListCoinsTestingSetup : public TestChain100Setup\n+{\n+public:\n+    ListCoinsTestingSetup()\n+    {\n+        CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+        ::bitdb.MakeMock();\n+        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n+        bool firstRun;\n+        wallet->LoadWallet(firstRun);\n+        LOCK(wallet->cs_wallet);\n+        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        wallet->ScanForWalletTransactions(chainActive.Genesis());\n+    }\n+\n+    ~ListCoinsTestingSetup()\n+    {\n+        ::bitdb.Flush(true);\n+        ::bitdb.Reset();\n+    }\n+\n+    CWalletTx& AddTx(CRecipient recipient)\n+    {\n+        CWalletTx wtx;\n+        CReserveKey reservekey(wallet.get());\n+        CAmount fee;\n+        int changePos = -1;\n+        std::string error;\n+        wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error);\n+        CValidationState state;\n+        wallet->CommitTransaction(wtx, reservekey, nullptr, state);\n+        auto it = wallet->mapWallet.find(wtx.GetHash());\n+        CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+        it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        return it->second;\n+    }\n+\n+    std::unique_ptr<CWallet> wallet;\n+};\n+\n+void TestListCoins()\n+{\n+    ListCoinsTestingSetup test;\n+    OptionsModel optionsModel;\n+    WalletModel walletModel(nullptr, test.wallet.get(), &optionsModel);\n+    QString coinbaseAddress = QString::fromStdString(CBitcoinAddress(test.coinbaseKey.GetPubKey().GetID()).ToString());\n+\n+    LOCK(test.wallet->cs_wallet);\n+\n+    // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n+    // address.\n+    std::map<QString, std::vector<COutput>> list;\n+    walletModel.listCoins(list);\n+    QCOMPARE((int)list.size(), 1);\n+    QCOMPARE(list.begin()->first, coinbaseAddress);\n+    QCOMPARE((int)list.begin()->second.size(), 1);\n+\n+    // Check initial balance from one mature coinbase transaction.\n+    CCoinControl coinControl;\n+    QCOMPARE(50 * COIN, walletModel.getBalance(&coinControl));\n+\n+    // Add a transaction creating a change address, and confirm ListCoins still\n+    // returns the coin associated with the change address underneath the\n+    // coinbaseKey pubkey, even though the change address has a different\n+    // pubkey.\n+    test.AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n+    list.clear();\n+    walletModel.listCoins(list);\n+    QCOMPARE((int)list.size(), 1);\n+    QCOMPARE(list.begin()->first, coinbaseAddress);\n+    QCOMPARE((int)list.begin()->second.size(), 2);\n+\n+    // Lock both coins. Confirm number of available coins drops to 0.\n+    std::vector<COutput> available;\n+    test.wallet->AvailableCoins(available);\n+    QCOMPARE((int)available.size(), 2);\n+    for (const auto& group : list) {\n+        for (const auto& coin : group.second) {\n+            test.wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n+        }\n+    }\n+    test.wallet->AvailableCoins(available);\n+    QCOMPARE((int)available.size(), 0);\n+\n+    // Confirm ListCoins still returns same result as before, despite coins\n+    // being locked.\n+    list.clear();\n+    walletModel.listCoins(list);\n+    QCOMPARE((int)list.size(), 1);\n+    QCOMPARE(list.begin()->first, coinbaseAddress);\n+    QCOMPARE((int)list.begin()->second.size(), 2);\n+}\n+\n //! Press \"Yes\" button in modal send confirmation dialog.\n void ConfirmSend()\n {\n@@ -65,7 +180,6 @@ QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)\n     }\n     return {};\n }\n-}\n \n //! Simple qt wallet tests.\n //\n@@ -80,7 +194,7 @@ QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)\n //     src/qt/test/test_bitcoin-qt -platform xcb      # Linux\n //     src/qt/test/test_bitcoin-qt -platform windows  # Windows\n //     src/qt/test/test_bitcoin-qt -platform cocoa    # macOS\n-void WalletTests::walletTests()\n+void TestSendCoins()\n {\n     // Set up wallet and chain with 101 blocks (1 mature block for spending).\n     TestChain100Setup test;\n@@ -117,3 +231,12 @@ void WalletTests::walletTests()\n     bitdb.Flush(true);\n     bitdb.Reset();\n }\n+\n+}\n+\n+void WalletTests::walletTests()\n+{\n+    TestLoadReceiveRequests();\n+    TestListCoins();\n+    TestSendCoins();\n+}"
      }
    ]
  },
  {
    "sha": "d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQ0YmQ3YTI3YWJlMGZhNzRkNDBiYTVlOTBmMzQ1ZjUxYmI1MTQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-28T18:10:21Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-17T09:18:25Z"
      },
      "message": "[qt] Move some WalletModel functions into CWallet\n\nMotivation for moving these is to make supporting IPC simpler (#10102), so\nthese lookups can be one-shot IPC requests, instead of back-and-forth\ninteractions over the IPC channel.\n\nAlso these functions are potentially useful outside of the bitcoin GUI (e.g.\nfor RPCs).",
      "tree": {
        "sha": "f73c7793f3b16856d9667e6319cc8f9979abf144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f73c7793f3b16856d9667e6319cc8f9979abf144"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef8ca179ef007eba5bed497be18f5bc90a4194a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8ca179ef007eba5bed497be18f5bc90a4194a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8ca179ef007eba5bed497be18f5bc90a4194a6"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 122,
      "deletions": 51
    },
    "files": [
      {
        "sha": "719089d05a0e8d7d92a8c669169e22f4f59b4431",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 49,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
        "patch": "@@ -63,14 +63,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n {\n     if (coinControl)\n     {\n-        CAmount nBalance = 0;\n-        std::vector<COutput> vCoins;\n-        wallet->AvailableCoins(vCoins, true, coinControl);\n-        BOOST_FOREACH(const COutput& out, vCoins)\n-            if(out.fSpendable)\n-                nBalance += out.tx->tx->vout[out.i].nValue;\n-\n-        return nBalance;\n+        return wallet->GetAvailableBalance(coinControl);\n     }\n \n     return wallet->GetBalance();\n@@ -595,38 +588,11 @@ bool WalletModel::isSpent(const COutPoint& outpoint) const\n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {\n-    std::vector<COutput> vCoins;\n-    wallet->AvailableCoins(vCoins);\n-\n-    LOCK2(cs_main, wallet->cs_wallet); // ListLockedCoins, mapWallet\n-    std::vector<COutPoint> vLockedCoins;\n-    wallet->ListLockedCoins(vLockedCoins);\n-\n-    // add locked coins\n-    BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n-    {\n-        if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n-        if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n-        if (outpoint.n < out.tx->tx->vout.size() && wallet->IsMine(out.tx->tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n-            vCoins.push_back(out);\n-    }\n-\n-    BOOST_FOREACH(const COutput& out, vCoins)\n-    {\n-        COutput cout = out;\n-\n-        while (wallet->IsChange(cout.tx->tx->vout[cout.i]) && cout.tx->tx->vin.size() > 0 && wallet->IsMine(cout.tx->tx->vin[0]))\n-        {\n-            if (!wallet->mapWallet.count(cout.tx->tx->vin[0].prevout.hash)) break;\n-            cout = COutput(&wallet->mapWallet[cout.tx->tx->vin[0].prevout.hash], cout.tx->tx->vin[0].prevout.n, 0 /* depth */, true /* spendable */, true /* solvable */, true /* safe */);\n+    for (auto& group : wallet->ListCoins()) {\n+        auto& resultGroup = mapCoins[QString::fromStdString(CBitcoinAddress(group.first).ToString())];\n+        for (auto& coin : group.second) {\n+            resultGroup.emplace_back(std::move(coin));\n         }\n-\n-        CTxDestination address;\n-        if(!out.fSpendable || !ExtractDestination(cout.tx->tx->vout[cout.i].scriptPubKey, address))\n-            continue;\n-        mapCoins[QString::fromStdString(CBitcoinAddress(address).ToString())].push_back(out);\n     }\n }\n \n@@ -656,11 +622,7 @@ void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n \n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n-    LOCK(wallet->cs_wallet);\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item2, item.second.destdata)\n-            if (item2.first.size() > 2 && item2.first.substr(0,2) == \"rr\") // receive request\n-                vReceiveRequests.push_back(item2.second);\n+    vReceiveRequests = wallet->GetDestValues(\"rr\"); // receive request\n }\n \n bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n@@ -680,11 +642,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n \n bool WalletModel::transactionCanBeAbandoned(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    const CWalletTx *wtx = wallet->GetWalletTx(hash);\n-    if (!wtx || wtx->isAbandoned() || wtx->GetDepthInMainChain() > 0 || wtx->InMempool())\n-        return false;\n-    return true;\n+    return wallet->TransactionCanBeAbandoned(hash);\n }\n \n bool WalletModel::abandonTransaction(uint256 hash) const"
      },
      {
        "sha": "e62b24cdbcfb28e5222377e623eb20160beed150",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 1,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
        "patch": "@@ -982,6 +982,13 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n     return false;\n }\n \n+bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n+{\n+    LOCK2(cs_main, cs_wallet);\n+    const CWalletTx* wtx = GetWalletTx(hashTx);\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() <= 0 && !wtx->InMempool();\n+}\n+\n bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n     LOCK2(cs_main, cs_wallet);\n@@ -1977,6 +1984,19 @@ CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth, cons\n     return balance;\n }\n \n+CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n+{\n+    CAmount balance = 0;\n+    std::vector<COutput> vCoins;\n+    AvailableCoins(vCoins, true, coinControl);\n+    for (const COutput& out : vCoins) {\n+        if (out.fSpendable) {\n+            balance += out.tx->tx->vout[out.i].nValue;\n+        }\n+    }\n+    return balance;\n+}\n+\n void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t &nMaximumCount, const int &nMinDepth, const int &nMaxDepth) const\n {\n     vCoins.clear();\n@@ -2088,6 +2108,69 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n     }\n }\n \n+std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n+{\n+    // TODO: Add AssertLockHeld(cs_wallet) here.\n+    //\n+    // Because the return value from this function contains pointers to\n+    // CWalletTx objects, callers to this function really should acquire the\n+    // cs_wallet lock before calling it. However, the current caller doesn't\n+    // acquire this lock yet. There was an attempt to add the missing lock in\n+    // https://github.com/bitcoin/bitcoin/pull/10340, but that change has been\n+    // postponed until after https://github.com/bitcoin/bitcoin/pull/10244 to\n+    // avoid adding some extra complexity to the Qt code.\n+\n+    std::map<CTxDestination, std::vector<COutput>> result;\n+\n+    std::vector<COutput> availableCoins;\n+    AvailableCoins(availableCoins);\n+\n+    LOCK2(cs_main, cs_wallet);\n+    for (auto& coin : availableCoins) {\n+        CTxDestination address;\n+        if (coin.fSpendable &&\n+            ExtractDestination(FindNonChangeParentOutput(*coin.tx->tx, coin.i).scriptPubKey, address)) {\n+            result[address].emplace_back(std::move(coin));\n+        }\n+    }\n+\n+    std::vector<COutPoint> lockedCoins;\n+    ListLockedCoins(lockedCoins);\n+    for (const auto& output : lockedCoins) {\n+        auto it = mapWallet.find(output.hash);\n+        if (it != mapWallet.end()) {\n+            int depth = it->second.GetDepthInMainChain();\n+            if (depth >= 0 && output.n < it->second.tx->vout.size() &&\n+                IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n+                CTxDestination address;\n+                if (ExtractDestination(FindNonChangeParentOutput(*it->second.tx, output.n).scriptPubKey, address)) {\n+                    result[address].emplace_back(\n+                        &it->second, output.n, depth, true /* spendable */, true /* solvable */, false /* safe */);\n+                }\n+            }\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const\n+{\n+    const CTransaction* ptx = &tx;\n+    int n = output;\n+    while (IsChange(ptx->vout[n]) && ptx->vin.size() > 0) {\n+        const COutPoint& prevout = ptx->vin[0].prevout;\n+        auto it = mapWallet.find(prevout.hash);\n+        if (it == mapWallet.end() || it->second.tx->vout.size() <= prevout.n ||\n+            !IsMine(it->second.tx->vout[prevout.n])) {\n+            break;\n+        }\n+        ptx = it->second.tx.get();\n+        n = prevout.n;\n+    }\n+    return ptx->vout[n];\n+}\n+\n static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n@@ -3408,7 +3491,7 @@ bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n     return (setLockedCoins.count(outpt) > 0);\n }\n \n-void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n+void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n@@ -3609,6 +3692,20 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     return false;\n }\n \n+std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n+{\n+    LOCK(cs_wallet);\n+    std::vector<std::string> values;\n+    for (const auto& address : mapAddressBook) {\n+        for (const auto& data : address.second.destdata) {\n+            if (!data.first.compare(0, prefix.size(), prefix)) {\n+                values.emplace_back(data.second);\n+            }\n+        }\n+    }\n+    return values;\n+}\n+\n std::string CWallet::GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));"
      },
      {
        "sha": "11b2f7a66347b4b4500ebb7b8f1e2afc33967c23",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d944bd7a27abe0fa74d40ba5e90f345f51bb5141/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
        "patch": "@@ -820,6 +820,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = NULL, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t& nMaximumCount = 0, const int& nMinDepth = 0, const int& nMaxDepth = 9999999) const;\n \n+    /**\n+     * Return list of available coins and locked coins grouped by non-change output address.\n+     */\n+    std::map<CTxDestination, std::vector<COutput>> ListCoins() const;\n+\n+    /**\n+     * Find non-change parent output.\n+     */\n+    const CTxOut& FindNonChangeParentOutput(const CTransaction& tx, int output) const;\n+\n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding\n      * small change; This method is stochastic for some inputs and upon\n@@ -834,7 +844,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void LockCoin(const COutPoint& output);\n     void UnlockCoin(const COutPoint& output);\n     void UnlockAllCoins();\n-    void ListLockedCoins(std::vector<COutPoint>& vOutpts);\n+    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const;\n \n     /*\n      * Rescan abort properties\n@@ -873,6 +883,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n+    //! Get all destination values matching a prefix.\n+    std::vector<std::string> GetDestValues(const std::string& prefix) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n@@ -917,6 +929,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n     CAmount GetLegacyBalance(const isminefilter& filter, int minDepth, const std::string* account) const;\n+    CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n     /**\n      * Insert additional inputs into the transaction by\n@@ -1066,6 +1079,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n \n+    /** Return whether transaction can be abandoned */\n+    bool TransactionCanBeAbandoned(const uint256& hashTx) const;\n+\n     /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n     bool AbandonTransaction(const uint256& hashTx);\n "
      }
    ]
  },
  {
    "sha": "429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjlhYTllYjUxOWI3MmE3OWY4YmI0MWQwYzRkN2Q0N2JjZDlkZDBk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-28T18:18:14Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-17T09:18:25Z"
      },
      "message": "[test] Move some tests from qt -> wallet\n\nAfter previous refactoring, the tests make more sense here.",
      "tree": {
        "sha": "0a82631ba72ac21b4de60cdabda9c53ae509df76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a82631ba72ac21b4de60cdabda9c53ae509df76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d944bd7a27abe0fa74d40ba5e90f345f51bb5141",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d944bd7a27abe0fa74d40ba5e90f345f51bb5141"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 101,
      "deletions": 117
    },
    "files": [
      {
        "sha": "798d333d6353924790e1f73cbb99b041778e2d2b",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 117,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
        "patch": "@@ -1,6 +1,5 @@\n #include \"wallettests.h\"\n \n-#include \"consensus/validation.h\"\n #include \"qt/bitcoinamountfield.h\"\n #include \"qt/callback.h\"\n #include \"qt/optionsmodel.h\"\n@@ -12,8 +11,6 @@\n #include \"qt/walletmodel.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n-#include \"wallet/test/wallet_test_fixture.h\"\n-#include \"wallet/coincontrol.h\"\n #include \"wallet/wallet.h\"\n \n #include <QAbstractButton>\n@@ -23,118 +20,6 @@\n \n namespace\n {\n-\n-void TestLoadReceiveRequests()\n-{\n-    WalletTestingSetup test;\n-    OptionsModel optionsModel;\n-    WalletModel walletModel(nullptr, pwalletMain, &optionsModel);\n-\n-    CTxDestination dest = CKeyID();\n-    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n-    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n-    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n-\n-    std::vector<std::string> values;\n-    walletModel.loadReceiveRequests(values);\n-    QCOMPARE((int)values.size(), 2);\n-    QCOMPARE(QString::fromStdString(values[0]), QString(\"val_rr0\"));\n-    QCOMPARE(QString::fromStdString(values[1]), QString(\"val_rr1\"));\n-}\n-\n-class ListCoinsTestingSetup : public TestChain100Setup\n-{\n-public:\n-    ListCoinsTestingSetup()\n-    {\n-        CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        ::bitdb.MakeMock();\n-        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n-        bool firstRun;\n-        wallet->LoadWallet(firstRun);\n-        LOCK(wallet->cs_wallet);\n-        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n-        wallet->ScanForWalletTransactions(chainActive.Genesis());\n-    }\n-\n-    ~ListCoinsTestingSetup()\n-    {\n-        ::bitdb.Flush(true);\n-        ::bitdb.Reset();\n-    }\n-\n-    CWalletTx& AddTx(CRecipient recipient)\n-    {\n-        CWalletTx wtx;\n-        CReserveKey reservekey(wallet.get());\n-        CAmount fee;\n-        int changePos = -1;\n-        std::string error;\n-        wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error);\n-        CValidationState state;\n-        wallet->CommitTransaction(wtx, reservekey, nullptr, state);\n-        auto it = wallet->mapWallet.find(wtx.GetHash());\n-        CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        it->second.SetMerkleBranch(chainActive.Tip(), 1);\n-        return it->second;\n-    }\n-\n-    std::unique_ptr<CWallet> wallet;\n-};\n-\n-void TestListCoins()\n-{\n-    ListCoinsTestingSetup test;\n-    OptionsModel optionsModel;\n-    WalletModel walletModel(nullptr, test.wallet.get(), &optionsModel);\n-    QString coinbaseAddress = QString::fromStdString(CBitcoinAddress(test.coinbaseKey.GetPubKey().GetID()).ToString());\n-\n-    LOCK(test.wallet->cs_wallet);\n-\n-    // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n-    // address.\n-    std::map<QString, std::vector<COutput>> list;\n-    walletModel.listCoins(list);\n-    QCOMPARE((int)list.size(), 1);\n-    QCOMPARE(list.begin()->first, coinbaseAddress);\n-    QCOMPARE((int)list.begin()->second.size(), 1);\n-\n-    // Check initial balance from one mature coinbase transaction.\n-    CCoinControl coinControl;\n-    QCOMPARE(50 * COIN, walletModel.getBalance(&coinControl));\n-\n-    // Add a transaction creating a change address, and confirm ListCoins still\n-    // returns the coin associated with the change address underneath the\n-    // coinbaseKey pubkey, even though the change address has a different\n-    // pubkey.\n-    test.AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n-    list.clear();\n-    walletModel.listCoins(list);\n-    QCOMPARE((int)list.size(), 1);\n-    QCOMPARE(list.begin()->first, coinbaseAddress);\n-    QCOMPARE((int)list.begin()->second.size(), 2);\n-\n-    // Lock both coins. Confirm number of available coins drops to 0.\n-    std::vector<COutput> available;\n-    test.wallet->AvailableCoins(available);\n-    QCOMPARE((int)available.size(), 2);\n-    for (const auto& group : list) {\n-        for (const auto& coin : group.second) {\n-            test.wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n-        }\n-    }\n-    test.wallet->AvailableCoins(available);\n-    QCOMPARE((int)available.size(), 0);\n-\n-    // Confirm ListCoins still returns same result as before, despite coins\n-    // being locked.\n-    list.clear();\n-    walletModel.listCoins(list);\n-    QCOMPARE((int)list.size(), 1);\n-    QCOMPARE(list.begin()->first, coinbaseAddress);\n-    QCOMPARE((int)list.begin()->second.size(), 2);\n-}\n-\n //! Press \"Yes\" button in modal send confirmation dialog.\n void ConfirmSend()\n {\n@@ -236,7 +121,5 @@ void TestSendCoins()\n \n void WalletTests::walletTests()\n {\n-    TestLoadReceiveRequests();\n-    TestListCoins();\n     TestSendCoins();\n }"
      },
      {
        "sha": "8e56f1efebbed04cf233e18ee868175fbfd71f9f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
        "patch": "@@ -9,6 +9,7 @@\n #include <utility>\n #include <vector>\n \n+#include \"consensus/validation.h\"\n #include \"rpc/server.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n@@ -515,4 +516,104 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n     SetMockTime(0);\n }\n \n+BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n+{\n+    CTxDestination dest = CKeyID();\n+    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n+    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n+    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n+\n+    auto values = pwalletMain->GetDestValues(\"rr\");\n+    BOOST_CHECK_EQUAL(values.size(), 2);\n+    BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n+    BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n+}\n+\n+class ListCoinsTestingSetup : public TestChain100Setup\n+{\n+public:\n+    ListCoinsTestingSetup()\n+    {\n+        CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+        ::bitdb.MakeMock();\n+        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n+        bool firstRun;\n+        wallet->LoadWallet(firstRun);\n+        LOCK(wallet->cs_wallet);\n+        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        wallet->ScanForWalletTransactions(chainActive.Genesis());\n+    }\n+\n+    ~ListCoinsTestingSetup()\n+    {\n+        wallet.reset();\n+        ::bitdb.Flush(true);\n+        ::bitdb.Reset();\n+    }\n+\n+    CWalletTx& AddTx(CRecipient recipient)\n+    {\n+        CWalletTx wtx;\n+        CReserveKey reservekey(wallet.get());\n+        CAmount fee;\n+        int changePos = -1;\n+        std::string error;\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error));\n+        CValidationState state;\n+        BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        auto it = wallet->mapWallet.find(wtx.GetHash());\n+        BOOST_CHECK(it != wallet->mapWallet.end());\n+        CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+        it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        return it->second;\n+    }\n+\n+    std::unique_ptr<CWallet> wallet;\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n+{\n+    std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\n+    LOCK(wallet->cs_wallet);\n+\n+    // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n+    // address.\n+    auto list = wallet->ListCoins();\n+    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 1);\n+\n+    // Check initial balance from one mature coinbase transaction.\n+    BOOST_CHECK_EQUAL(50 * COIN, wallet->GetAvailableBalance());\n+\n+    // Add a transaction creating a change address, and confirm ListCoins still\n+    // returns the coin associated with the change address underneath the\n+    // coinbaseKey pubkey, even though the change address has a different\n+    // pubkey.\n+    AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n+    list = wallet->ListCoins();\n+    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n+\n+    // Lock both coins. Confirm number of available coins drops to 0.\n+    std::vector<COutput> available;\n+    wallet->AvailableCoins(available);\n+    BOOST_CHECK_EQUAL(available.size(), 2);\n+    for (const auto& group : list) {\n+        for (const auto& coin : group.second) {\n+            wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n+        }\n+    }\n+    wallet->AvailableCoins(available);\n+    BOOST_CHECK_EQUAL(available.size(), 0);\n+\n+    // Confirm ListCoins still returns same result as before, despite coins\n+    // being locked.\n+    list = wallet->ListCoins();\n+    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "108f04f2d973adac5313c7e4e17a59766a3cc1b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDhmMDRmMmQ5NzNhZGFjNTMxM2M3ZTRlMTdhNTk3NjZhM2NjMWI2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-04T21:02:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-17T09:18:25Z"
      },
      "message": "Add missing LOCK2 in CWallet::GetAvailableBalance",
      "tree": {
        "sha": "0fcd50216a4422a234aab56205274b371e6605b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fcd50216a4422a234aab56205274b371e6605b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/108f04f2d973adac5313c7e4e17a59766a3cc1b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108f04f2d973adac5313c7e4e17a59766a3cc1b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/108f04f2d973adac5313c7e4e17a59766a3cc1b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108f04f2d973adac5313c7e4e17a59766a3cc1b6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/429aa9eb519b72a79f8bb41d0c4d7d47bcd9dd0d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca620b5af1cce216f2a286a0e223e0e32f87fdc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108f04f2d973adac5313c7e4e17a59766a3cc1b6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108f04f2d973adac5313c7e4e17a59766a3cc1b6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=108f04f2d973adac5313c7e4e17a59766a3cc1b6",
        "patch": "@@ -1986,6 +1986,8 @@ CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth, cons\n \n CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n {\n+    LOCK2(cs_main, cs_wallet);\n+\n     CAmount balance = 0;\n     std::vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);"
      }
    ]
  }
]