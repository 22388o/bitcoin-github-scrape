[
  {
    "sha": "c33fbab25c82b6a18773b80e8b355c987066ae5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzNmYmFiMjVjODJiNmExODc3M2I4MGU4YjM1NWM5ODcwNjZhZTVh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-04T17:37:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-11T10:55:17Z"
      },
      "message": "net: allow CSubNet of non-IP networks\n\nAllow creation of valid `CSubNet` objects of non-IP networks and only\nmatch the single address they were created from (like /32 for IPv4 or\n/128 for IPv6).\n\nThis fixes a deficiency in `CConnman::DisconnectNode(const CNetAddr& addr)`\nand in `BanMan` which assume that creating a subnet from any address\nusing the `CSubNet(CNetAddr)` constructor would later match that address\nonly. Before this change a non-IP subnet would be invalid and would not\nmatch any address.\n\nGithub-Pull: #20852\nRebased-From: 94d335da7f8232bc653c9b08b0a33b517b4c98ad",
      "tree": {
        "sha": "e9787dfcf3ff895e07fd9facb1c908e9e0f22d18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9787dfcf3ff895e07fd9facb1c908e9e0f22d18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c33fbab25c82b6a18773b80e8b355c987066ae5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33fbab25c82b6a18773b80e8b355c987066ae5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c33fbab25c82b6a18773b80e8b355c987066ae5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33fbab25c82b6a18773b80e8b355c987066ae5a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15877d160cb8aaa53742fbfeea7296077e30edea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15877d160cb8aaa53742fbfeea7296077e30edea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15877d160cb8aaa53742fbfeea7296077e30edea"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 107,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e0d4638dd6ac808d9df25afc1e15dc235cf448ae",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 14,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=c33fbab25c82b6a18773b80e8b355c987066ae5a",
        "patch": "@@ -1063,15 +1063,24 @@ CSubNet::CSubNet(const CNetAddr& addr, const CNetAddr& mask) : CSubNet()\n \n CSubNet::CSubNet(const CNetAddr& addr) : CSubNet()\n {\n-    valid = addr.IsIPv4() || addr.IsIPv6();\n-    if (!valid) {\n+    switch (addr.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        valid = true;\n+        assert(addr.m_addr.size() <= sizeof(netmask));\n+        memset(netmask, 0xFF, addr.m_addr.size());\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+        valid = true;\n+        break;\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n         return;\n     }\n \n-    assert(addr.m_addr.size() <= sizeof(netmask));\n-\n-    memset(netmask, 0xFF, addr.m_addr.size());\n-\n     network = addr;\n }\n \n@@ -1083,6 +1092,21 @@ bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid() || network.m_net != addr.m_net)\n         return false;\n+\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+    case NET_INTERNAL:\n+        return addr == network;\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        return false;\n+    }\n+\n     assert(network.m_addr.size() == addr.m_addr.size());\n     for (size_t x = 0; x < addr.m_addr.size(); ++x) {\n         if ((addr.m_addr[x] & netmask[x]) != network.m_addr[x]) {\n@@ -1094,18 +1118,35 @@ bool CSubNet::Match(const CNetAddr &addr) const\n \n std::string CSubNet::ToString() const\n {\n-    assert(network.m_addr.size() <= sizeof(netmask));\n+    std::string suffix;\n \n-    uint8_t cidr = 0;\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6: {\n+        assert(network.m_addr.size() <= sizeof(netmask));\n \n-    for (size_t i = 0; i < network.m_addr.size(); ++i) {\n-        if (netmask[i] == 0x00) {\n-            break;\n+        uint8_t cidr = 0;\n+\n+        for (size_t i = 0; i < network.m_addr.size(); ++i) {\n+            if (netmask[i] == 0x00) {\n+                break;\n+            }\n+            cidr += NetmaskBits(netmask[i]);\n         }\n-        cidr += NetmaskBits(netmask[i]);\n+\n+        suffix = strprintf(\"/%u\", cidr);\n+        break;\n+    }\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        break;\n     }\n \n-    return network.ToString() + strprintf(\"/%u\", cidr);\n+    return network.ToString() + suffix;\n }\n \n bool CSubNet::IsValid() const\n@@ -1115,7 +1156,19 @@ bool CSubNet::IsValid() const\n \n bool CSubNet::SanityCheck() const\n {\n-    if (!(network.IsIPv4() || network.IsIPv6())) return false;\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+        return true;\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        return false;\n+    }\n \n     for (size_t x = 0; x < network.m_addr.size(); ++x) {\n         if (network.m_addr[x] & ~netmask[x]) return false;"
      },
      {
        "sha": "b9beb1e3585d41f82ff034a1e10b8e851815f3ab",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=c33fbab25c82b6a18773b80e8b355c987066ae5a",
        "patch": "@@ -462,11 +462,33 @@ class CSubNet\n         bool SanityCheck() const;\n \n     public:\n+        /**\n+         * Construct an invalid subnet (empty, `Match()` always returns false).\n+         */\n         CSubNet();\n+\n+        /**\n+         * Construct from a given network start and number of bits (CIDR mask).\n+         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n+         * created.\n+         * @param[in] mask CIDR mask, must be in [0, 32] for IPv4 addresses and in [0, 128] for\n+         * IPv6 addresses. Otherwise an invalid subnet is created.\n+         */\n         CSubNet(const CNetAddr& addr, uint8_t mask);\n+\n+        /**\n+         * Construct from a given network start and mask.\n+         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n+         * created.\n+         * @param[in] mask Network mask, must be of the same type as `addr` and not contain 0-bits\n+         * followed by 1-bits. Otherwise an invalid subnet is created.\n+         */\n         CSubNet(const CNetAddr& addr, const CNetAddr& mask);\n \n-        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n+        /**\n+         * Construct a single-host subnet.\n+         * @param[in] addr The sole address to be contained in the subnet, can also be non-IPv[46].\n+         */\n         explicit CSubNet(const CNetAddr& addr);\n \n         bool Match(const CNetAddr &addr) const;"
      },
      {
        "sha": "36f18fcf6744121e96dc697e306d9b1cdf61623b",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c33fbab25c82b6a18773b80e8b355c987066ae5a/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=c33fbab25c82b6a18773b80e8b355c987066ae5a",
        "patch": "@@ -224,8 +224,22 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     // IPv4 address with IPv6 netmask or the other way around.\n     BOOST_CHECK(!CSubNet(ResolveIP(\"1.1.1.1\"), ResolveIP(\"ffff::\")).IsValid());\n     BOOST_CHECK(!CSubNet(ResolveIP(\"::1\"), ResolveIP(\"255.0.0.0\")).IsValid());\n-    // Can't subnet TOR (or any other non-IPv4 and non-IPv6 network).\n-    BOOST_CHECK(!CSubNet(ResolveIP(\"5wyqrzbvrdsumnok.onion\"), ResolveIP(\"255.0.0.0\")).IsValid());\n+\n+    // Create Non-IP subnets.\n+\n+    const CNetAddr tor_addr{\n+        ResolveIP(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\")};\n+\n+    subnet = CSubNet(tor_addr);\n+    BOOST_CHECK(subnet.IsValid());\n+    BOOST_CHECK_EQUAL(subnet.ToString(), tor_addr.ToString());\n+    BOOST_CHECK(subnet.Match(tor_addr));\n+    BOOST_CHECK(\n+        !subnet.Match(ResolveIP(\"kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion\")));\n+    BOOST_CHECK(!subnet.Match(ResolveIP(\"1.2.3.4\")));\n+\n+    BOOST_CHECK(!CSubNet(tor_addr, 200).IsValid());\n+    BOOST_CHECK(!CSubNet(tor_addr, ResolveIP(\"255.0.0.0\")).IsValid());\n \n     subnet = ResolveSubNet(\"1.2.3.4/255.255.255.255\");\n     BOOST_CHECK_EQUAL(subnet.ToString(), \"1.2.3.4/32\");\n@@ -440,8 +454,7 @@ BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n     BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0\", 11), ret));\n     BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\", 22), ret));\n     BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\\0\", 23), ret));\n-    // We only do subnetting for IPv4 and IPv6\n-    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\", 22), ret));\n+    BOOST_CHECK(LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\", 22), ret));\n     BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0\", 23), ret));\n     BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\", 34), ret));\n     BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\", 35), ret));"
      }
    ]
  },
  {
    "sha": "bdce029191ab094a4a325b143324487f1c62ba7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGNlMDI5MTkxYWIwOTRhNGEzMjViMTQzMzI0NDg3ZjFjNjJiYTdj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-10T14:51:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-11T10:57:21Z"
      },
      "message": "test: add test for banning of non-IP addresses\n\nCo-authored-by: Jon Atack <jon@atack.com>\n\nGithub-Pull: #20852\nRebased-From: 39b43298d9c54f9c18bef36f3d5934f57aefd088",
      "tree": {
        "sha": "d3ce6fd7cf2753ac4dbd2c5fa378ca403a12d2d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3ce6fd7cf2753ac4dbd2c5fa378ca403a12d2d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdce029191ab094a4a325b143324487f1c62ba7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdce029191ab094a4a325b143324487f1c62ba7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdce029191ab094a4a325b143324487f1c62ba7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdce029191ab094a4a325b143324487f1c62ba7c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c33fbab25c82b6a18773b80e8b355c987066ae5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33fbab25c82b6a18773b80e8b355c987066ae5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c33fbab25c82b6a18773b80e8b355c987066ae5a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "551eb4d7242befa8c45c50fc369a9592b015011c",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdce029191ab094a4a325b143324487f1c62ba7c/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdce029191ab094a4a325b143324487f1c62ba7c/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=bdce029191ab094a4a325b143324487f1c62ba7c",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[],[]]\n \n+    def is_banned(self, node, addr):\n+        return any(e['address'] == addr for e in node.listbanned())\n+\n     def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n@@ -42,5 +45,18 @@ def run_test(self):\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n \n+        self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n+        node = self.nodes[1]\n+        tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n+        ip_addr = \"1.2.3.4\"\n+        assert(not self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+        node.setban(tor_addr, \"add\")\n+        assert(self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+        node.setban(tor_addr, \"remove\")\n+        assert(not self.is_banned(self.nodes[1], tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  },
  {
    "sha": "7bf3ed495b96f0959d5c45c6e1936d8628dec730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmYzZWQ0OTViOTZmMDk1OWQ1YzQ1YzZlMTkzNmQ4NjI4ZGVjNzMw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-12-09T22:50:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-13T16:56:34Z"
      },
      "message": "Bugfix: GUI: Restore SendConfirmationDialog button default to \"Yes\"\n\nThe SendConfirmationDialog is used for bumping the fee, where \"Send\" doesn't really make sense\n\nGithub-Pull: #bitcoin-core/gui#148\nRebased-From: 8775691383ff394b998232ac8e63fac3a214d18b",
      "tree": {
        "sha": "3ba437d963681111f246fa7efc566caff53f503e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ba437d963681111f246fa7efc566caff53f503e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf3ed495b96f0959d5c45c6e1936d8628dec730",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf3ed495b96f0959d5c45c6e1936d8628dec730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf3ed495b96f0959d5c45c6e1936d8628dec730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf3ed495b96f0959d5c45c6e1936d8628dec730/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdce029191ab094a4a325b143324487f1c62ba7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdce029191ab094a4a325b143324487f1c62ba7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdce029191ab094a4a325b143324487f1c62ba7c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63b06b62152208ca3b036a0436f4fbe112a2a38b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf3ed495b96f0959d5c45c6e1936d8628dec730/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf3ed495b96f0959d5c45c6e1936d8628dec730/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7bf3ed495b96f0959d5c45c6e1936d8628dec730",
        "patch": "@@ -966,6 +966,9 @@ SendConfirmationDialog::SendConfirmationDialog(const QString& title, const QStri\n     setStandardButtons(QMessageBox::Yes | QMessageBox::Cancel);\n     setDefaultButton(QMessageBox::Cancel);\n     yesButton = button(QMessageBox::Yes);\n+    if (confirmButtonText.isEmpty()) {\n+        confirmButtonText = yesButton->text();\n+    }\n     updateYesButton();\n     connect(&countDownTimer, &QTimer::timeout, this, &SendConfirmationDialog::countDown);\n }"
      },
      {
        "sha": "8863d2e5c89c5d242c721d8c2100ca932019ce6c",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf3ed495b96f0959d5c45c6e1936d8628dec730/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf3ed495b96f0959d5c45c6e1936d8628dec730/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=7bf3ed495b96f0959d5c45c6e1936d8628dec730",
        "patch": "@@ -115,7 +115,7 @@ class SendConfirmationDialog : public QMessageBox\n     Q_OBJECT\n \n public:\n-    SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text = \"\", const QString& detailed_text = \"\", int secDelay = SEND_CONFIRM_DELAY, const QString& confirmText = \"Send\", QWidget* parent = nullptr);\n+    SendConfirmationDialog(const QString& title, const QString& text, const QString& informative_text = \"\", const QString& detailed_text = \"\", int secDelay = SEND_CONFIRM_DELAY, const QString& confirmText = \"\", QWidget* parent = nullptr);\n     int exec() override;\n \n private Q_SLOTS:"
      }
    ]
  },
  {
    "sha": "0dba346a568882434098dd08566978e23eb4a516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGJhMzQ2YTU2ODg4MjQzNDA5OGRkMDg1NjY5NzhlMjNlYjRhNTE2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-01T10:36:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T17:57:10Z"
      },
      "message": "qt: Use layout manager for Create Wallet dialog\n\nGithub-Pull: bitcoin-core/gui#171\nRebased-From: d4feb6812a2707ef85d75dda4372086ec62eb922",
      "tree": {
        "sha": "b3558979fb155a4049e3adbdccb142691695b457",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3558979fb155a4049e3adbdccb142691695b457"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dba346a568882434098dd08566978e23eb4a516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dba346a568882434098dd08566978e23eb4a516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dba346a568882434098dd08566978e23eb4a516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dba346a568882434098dd08566978e23eb4a516/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf3ed495b96f0959d5c45c6e1936d8628dec730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf3ed495b96f0959d5c45c6e1936d8628dec730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf3ed495b96f0959d5c45c6e1936d8628dec730"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 124,
      "deletions": 129
    },
    "files": [
      {
        "sha": "881869a46cb6976fb7afffc46935da940b08a900",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "modified",
        "additions": 124,
        "deletions": 129,
        "changes": 253,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dba346a568882434098dd08566978e23eb4a516/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dba346a568882434098dd08566978e23eb4a516/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=0dba346a568882434098dd08566978e23eb4a516",
        "patch": "@@ -7,140 +7,135 @@\n     <x>0</x>\n     <y>0</y>\n     <width>364</width>\n-    <height>213</height>\n+    <height>249</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n    <string>Create Wallet</string>\n   </property>\n-  <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>10</x>\n-     <y>170</y>\n-     <width>341</width>\n-     <height>32</height>\n-    </rect>\n-   </property>\n-   <property name=\"orientation\">\n-    <enum>Qt::Horizontal</enum>\n-   </property>\n-   <property name=\"standardButtons\">\n-    <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n-   </property>\n-  </widget>\n-  <widget class=\"QLineEdit\" name=\"wallet_name_line_edit\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>120</x>\n-     <y>20</y>\n-     <width>231</width>\n-     <height>24</height>\n-    </rect>\n-   </property>\n-   <property name=\"placeholderText\">\n-     <string>Wallet</string>\n-   </property>\n-  </widget>\n-  <widget class=\"QLabel\" name=\"label\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>20</y>\n-     <width>101</width>\n-     <height>21</height>\n-    </rect>\n-   </property>\n-   <property name=\"text\">\n-    <string>Wallet Name</string>\n-   </property>\n-  </widget>\n-  <widget class=\"QCheckBox\" name=\"encrypt_wallet_checkbox\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>50</y>\n-     <width>220</width>\n-     <height>22</height>\n-    </rect>\n-   </property>\n-   <property name=\"toolTip\">\n-    <string>Encrypt the wallet. The wallet will be encrypted with a passphrase of your choice.</string>\n-   </property>\n-   <property name=\"text\">\n-    <string>Encrypt Wallet</string>\n-   </property>\n-   <property name=\"checked\">\n-    <bool>false</bool>\n-   </property>\n-  </widget>\n-  <widget class=\"QLabel\" name=\"advanced_options_label\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>90</y>\n-     <width>220</width>\n-     <height>21</height>\n-    </rect>\n-   </property>\n-   <property name=\"styleSheet\">\n-    <string notr=\"true\">font-weight:bold;</string>\n-   </property>\n-   <property name=\"text\">\n-    <string>Advanced options</string>\n-   </property>\n-  </widget>\n-  <widget class=\"QCheckBox\" name=\"disable_privkeys_checkbox\">\n-   <property name=\"enabled\">\n-    <bool>true</bool>\n-   </property>\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>115</y>\n-     <width>220</width>\n-     <height>22</height>\n-    </rect>\n-   </property>\n-   <property name=\"toolTip\">\n-    <string>Disable private keys for this wallet. Wallets with private keys disabled will have no private keys and cannot have an HD seed or imported private keys. This is ideal for watch-only wallets.</string>\n-   </property>\n-   <property name=\"text\">\n-    <string>Disable Private Keys</string>\n-   </property>\n-  </widget>\n-  <widget class=\"QCheckBox\" name=\"blank_wallet_checkbox\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>135</y>\n-     <width>220</width>\n-     <height>22</height>\n-    </rect>\n-   </property>\n-   <property name=\"toolTip\">\n-    <string>Make a blank wallet. Blank wallets do not initially have private keys or scripts. Private keys and addresses can be imported, or an HD seed can be set, at a later time.</string>\n-   </property>\n-   <property name=\"text\">\n-    <string>Make Blank Wallet</string>\n-   </property>\n-  </widget>\n-  <widget class=\"QCheckBox\" name=\"descriptor_checkbox\">\n-   <property name=\"geometry\">\n-    <rect>\n-     <x>20</x>\n-     <y>155</y>\n-     <width>220</width>\n-     <height>22</height>\n-    </rect>\n-   </property>\n-   <property name=\"toolTip\">\n-    <string>Use descriptors for scriptPubKey management</string>\n-   </property>\n-   <property name=\"text\">\n-    <string>Descriptor Wallet</string>\n-   </property>\n-  </widget>\n+  <property name=\"sizeGripEnabled\">\n+   <bool>true</bool>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <item>\n+      <widget class=\"QLabel\" name=\"wallet_name_label\">\n+       <property name=\"text\">\n+        <string>Wallet Name</string>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QLineEdit\" name=\"wallet_name_line_edit\">\n+       <property name=\"minimumSize\">\n+        <size>\n+         <width>262</width>\n+         <height>0</height>\n+        </size>\n+       </property>\n+       <property name=\"placeholderText\">\n+        <string>Wallet</string>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QCheckBox\" name=\"encrypt_wallet_checkbox\">\n+     <property name=\"toolTip\">\n+      <string>Encrypt the wallet. The wallet will be encrypted with a passphrase of your choice.</string>\n+     </property>\n+     <property name=\"text\">\n+      <string>Encrypt Wallet</string>\n+     </property>\n+     <property name=\"checked\">\n+      <bool>false</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_1\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeType\">\n+      <enum>QSizePolicy::Fixed</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>8</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QGroupBox\" name=\"groupBox\">\n+     <property name=\"title\">\n+      <string>Advanced Options</string>\n+     </property>\n+     <layout class=\"QVBoxLayout\" name=\"verticalLayout_groupbox\">\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"disable_privkeys_checkbox\">\n+        <property name=\"enabled\">\n+         <bool>true</bool>\n+        </property>\n+        <property name=\"toolTip\">\n+         <string>Disable private keys for this wallet. Wallets with private keys disabled will have no private keys and cannot have an HD seed or imported private keys. This is ideal for watch-only wallets.</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>Disable Private Keys</string>\n+        </property>\n+       </widget>\n+      </item>\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"blank_wallet_checkbox\">\n+        <property name=\"toolTip\">\n+         <string>Make a blank wallet. Blank wallets do not initially have private keys or scripts. Private keys and addresses can be imported, or an HD seed can be set, at a later time.</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>Make Blank Wallet</string>\n+        </property>\n+       </widget>\n+      </item>\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"descriptor_checkbox\">\n+        <property name=\"toolTip\">\n+         <string>Use descriptors for scriptPubKey management</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>Descriptor Wallet</string>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_2\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>0</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n  </widget>\n  <tabstops>\n   <tabstop>wallet_name_line_edit</tabstop>"
      }
    ]
  },
  {
    "sha": "b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzA4NmU2OWZmMzgyNWMzZjNiZmRlNGNhOWFmOTA2NjNhNDU3NWRk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-03T09:27:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T17:58:42Z"
      },
      "message": "qt: Add TransactionOverviewWidget class\n\nGithub-Pull: bitcoin-core/gui#176\nRebased-From: d43992140679fb9a5ebc7850923679033f9837f3",
      "tree": {
        "sha": "fb215b21b6b1c2bcf4dc7d77f19db6c0bec8538c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb215b21b6b1c2bcf4dc7d77f19db6c0bec8538c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dba346a568882434098dd08566978e23eb4a516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dba346a568882434098dd08566978e23eb4a516",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dba346a568882434098dd08566978e23eb4a516"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 56,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eb17795b48b111f120f770facefbc184a7c25986",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "patch": "@@ -78,6 +78,7 @@ QT_MOC_CPP = \\\n   qt/moc_transactiondesc.cpp \\\n   qt/moc_transactiondescdialog.cpp \\\n   qt/moc_transactionfilterproxy.cpp \\\n+  qt/moc_transactionoverviewwidget.cpp \\\n   qt/moc_transactiontablemodel.cpp \\\n   qt/moc_transactionview.cpp \\\n   qt/moc_utilitydialog.cpp \\\n@@ -151,6 +152,7 @@ BITCOIN_QT_H = \\\n   qt/transactiondesc.h \\\n   qt/transactiondescdialog.h \\\n   qt/transactionfilterproxy.h \\\n+  qt/transactionoverviewwidget.h \\\n   qt/transactionrecord.h \\\n   qt/transactiontablemodel.h \\\n   qt/transactionview.h \\"
      },
      {
        "sha": "88172b067515048fc7ffecbf093b8477a659fc08",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "patch": "@@ -504,7 +504,7 @@\n            </layout>\n           </item>\n           <item>\n-           <widget class=\"QListView\" name=\"listTransactions\">\n+           <widget class=\"TransactionOverviewWidget\" name=\"listTransactions\">\n             <property name=\"styleSheet\">\n              <string notr=\"true\">QListView { background: transparent; }</string>\n             </property>\n@@ -520,6 +520,9 @@\n             <property name=\"selectionMode\">\n              <enum>QAbstractItemView::NoSelection</enum>\n             </property>\n+            <property name=\"uniformItemSizes\">\n+             <bool>true</bool>\n+            </property>\n            </widget>\n           </item>\n          </layout>\n@@ -544,6 +547,13 @@\n    </item>\n   </layout>\n  </widget>\n+ <customwidgets>\n+  <customwidget>\n+   <class>TransactionOverviewWidget</class>\n+   <extends>QListView</extends>\n+   <header>qt/transactionoverviewwidget.h</header>\n+  </customwidget>\n+ </customwidgets>\n  <resources/>\n  <connections/>\n </ui>"
      },
      {
        "sha": "f613d2c2a5bd224bcc92ceda45200ff45d34105b",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "patch": "@@ -12,6 +12,7 @@\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n #include <qt/transactionfilterproxy.h>\n+#include <qt/transactionoverviewwidget.h>\n #include <qt/transactiontablemodel.h>\n #include <qt/walletmodel.h>\n \n@@ -135,7 +136,7 @@ OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent)\n     ui->listTransactions->setMinimumHeight(NUM_ITEMS * (DECORATION_SIZE + 2));\n     ui->listTransactions->setAttribute(Qt::WA_MacShowFocusRect, false);\n \n-    connect(ui->listTransactions, &QListView::clicked, this, &OverviewPage::handleTransactionClicked);\n+    connect(ui->listTransactions, &TransactionOverviewWidget::clicked, this, &OverviewPage::handleTransactionClicked);\n \n     // start with displaying the \"out of sync\" warnings\n     showOutOfSyncWarning(true);"
      },
      {
        "sha": "2bdead7bc40e92b5a915cb6d24046da3352d01ff",
        "filename": "src/qt/transactionoverviewwidget.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/transactionoverviewwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7086e69ff3825c3f3bfde4ca9af90663a4575dd/src/qt/transactionoverviewwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionoverviewwidget.h?ref=b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_TRANSACTIONOVERVIEWWIDGET_H\n+#define BITCOIN_QT_TRANSACTIONOVERVIEWWIDGET_H\n+\n+#include <qt/transactiontablemodel.h>\n+\n+#include <QListView>\n+#include <QSize>\n+#include <QSizePolicy>\n+\n+QT_BEGIN_NAMESPACE\n+class QShowEvent;\n+class QWidget;\n+QT_END_NAMESPACE\n+\n+class TransactionOverviewWidget : public QListView\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit TransactionOverviewWidget(QWidget* parent = nullptr) : QListView(parent) {}\n+\n+    QSize sizeHint() const override\n+    {\n+        return {sizeHintForColumn(TransactionTableModel::ToAddress), QListView::sizeHint().height()};\n+    }\n+\n+protected:\n+    void showEvent(QShowEvent* event) override\n+    {\n+        Q_UNUSED(event);\n+        QSizePolicy sp = sizePolicy();\n+        sp.setHorizontalPolicy(QSizePolicy::Minimum);\n+        setSizePolicy(sp);\n+    }\n+};\n+\n+#endif // BITCOIN_QT_TRANSACTIONOVERVIEWWIDGET_H"
      }
    ]
  },
  {
    "sha": "7bc4498234e16bc75975555cbe7855384489782f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmM0NDk4MjM0ZTE2YmM3NTk3NTU1NWNiZTc4NTUzODQ0ODk3ODJm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-02T19:00:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T17:58:45Z"
      },
      "message": "qt: Fix TxViewDelegate layout\n\nThis change (1) prevents overlapping date and amount strings,\nand (2) guaranties that \"eye\" sign at the end of the watch-only\naddress/label is always visible.\n\nGithub-Pull: bitcoin-core/gui#176\nRebased-From: f0d04795e23606399414d074d78efe5aa0da7259",
      "tree": {
        "sha": "25813bbc24aeb1a117de281f199c391f18ef8c07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25813bbc24aeb1a117de281f199c391f18ef8c07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bc4498234e16bc75975555cbe7855384489782f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bc4498234e16bc75975555cbe7855384489782f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bc4498234e16bc75975555cbe7855384489782f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bc4498234e16bc75975555cbe7855384489782f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7086e69ff3825c3f3bfde4ca9af90663a4575dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7086e69ff3825c3f3bfde4ca9af90663a4575dd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 33,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ee9d4a113cad0e533acb99d40a5a549ef06daeee",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc4498234e16bc75975555cbe7855384489782f/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc4498234e16bc75975555cbe7855384489782f/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=7bc4498234e16bc75975555cbe7855384489782f",
        "patch": "@@ -517,6 +517,9 @@\n             <property name=\"horizontalScrollBarPolicy\">\n              <enum>Qt::ScrollBarAlwaysOff</enum>\n             </property>\n+            <property name=\"sizeAdjustPolicy\">\n+             <enum>QAbstractScrollArea::AdjustToContents</enum>\n+            </property>\n             <property name=\"selectionMode\">\n              <enum>QAbstractItemView::NoSelection</enum>\n             </property>"
      },
      {
        "sha": "6a66584544c9e7abd01eb77de4e8e0086bd6ef02",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 6,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bc4498234e16bc75975555cbe7855384489782f/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bc4498234e16bc75975555cbe7855384489782f/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=7bc4498234e16bc75975555cbe7855384489782f",
        "patch": "@@ -21,6 +21,9 @@\n #include <QPainter>\n #include <QStatusTipEvent>\n \n+#include <algorithm>\n+#include <map>\n+\n #define DECORATION_SIZE 54\n #define NUM_ITEMS 5\n \n@@ -34,7 +37,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QAbstractItemDelegate(parent), unit(BitcoinUnits::BTC),\n         platformStyle(_platformStyle)\n     {\n-\n+        connect(this, &TxViewDelegate::width_changed, this, &TxViewDelegate::sizeHintChanged);\n     }\n \n     inline void paint(QPainter *painter, const QStyleOptionViewItem &option,\n@@ -67,13 +70,15 @@ class TxViewDelegate : public QAbstractItemDelegate\n \n         painter->setPen(foreground);\n         QRect boundingRect;\n-        painter->drawText(addressRect, Qt::AlignLeft|Qt::AlignVCenter, address, &boundingRect);\n+        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n+        int address_rect_min_width = boundingRect.width();\n \n         if (index.data(TransactionTableModel::WatchonlyRole).toBool())\n         {\n             QIcon iconWatchonly = qvariant_cast<QIcon>(index.data(TransactionTableModel::WatchonlyDecorationRole));\n             QRect watchonlyRect(boundingRect.right() + 5, mainRect.top()+ypad+halfheight, 16, halfheight);\n             iconWatchonly.paint(painter, watchonlyRect);\n+            address_rect_min_width += 5 + watchonlyRect.width();\n         }\n \n         if(amount < 0)\n@@ -94,23 +99,42 @@ class TxViewDelegate : public QAbstractItemDelegate\n         {\n             amountText = QString(\"[\") + amountText + QString(\"]\");\n         }\n-        painter->drawText(amountRect, Qt::AlignRight|Qt::AlignVCenter, amountText);\n+\n+        QRect amount_bounding_rect;\n+        painter->drawText(amountRect, Qt::AlignRight | Qt::AlignVCenter, amountText, &amount_bounding_rect);\n \n         painter->setPen(option.palette.color(QPalette::Text));\n-        painter->drawText(amountRect, Qt::AlignLeft|Qt::AlignVCenter, GUIUtil::dateTimeStr(date));\n+        QRect date_bounding_rect;\n+        painter->drawText(amountRect, Qt::AlignLeft | Qt::AlignVCenter, GUIUtil::dateTimeStr(date), &date_bounding_rect);\n+\n+        const int minimum_width = std::max(address_rect_min_width, amount_bounding_rect.width() + date_bounding_rect.width());\n+        const auto search = m_minimum_width.find(index.row());\n+        if (search == m_minimum_width.end() || search->second != minimum_width) {\n+            m_minimum_width[index.row()] = minimum_width;\n+            Q_EMIT width_changed(index);\n+        }\n \n         painter->restore();\n     }\n \n     inline QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const override\n     {\n-        return QSize(DECORATION_SIZE, DECORATION_SIZE);\n+        const auto search = m_minimum_width.find(index.row());\n+        const int minimum_text_width = search == m_minimum_width.end() ? 0 : search->second;\n+        return {DECORATION_SIZE + 8 + minimum_text_width, DECORATION_SIZE};\n     }\n \n     int unit;\n-    const PlatformStyle *platformStyle;\n \n+Q_SIGNALS:\n+    //! An intermediate signal for emitting from the `paint() const` member function.\n+    void width_changed(const QModelIndex& index) const;\n+\n+private:\n+    const PlatformStyle* platformStyle;\n+    mutable std::map<int, int> m_minimum_width;\n };\n+\n #include <qt/overviewpage.moc>\n \n OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :"
      }
    ]
  },
  {
    "sha": "bdc64c9030488e7a6b88f369fb876c0b21c04a25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGM2NGM5MDMwNDg4ZTdhNmI4OGYzNjlmYjg3NmMwYjIxYzA0YTI1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-05T20:33:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T17:58:49Z"
      },
      "message": "qt: Stop the effect of hidden widgets on the size of QStackedWidget\n\nLayouts of the hidden widgets, those are children of QStackedWidget,\ncould prevent to adjust the size of the parent widget in the\nWalletFrame widget.\n\nGithub-Pull: bitcoin-core/gui#176\nRebased-From: af58f5b12cea91467692dd4ae71d8cc916a608ed",
      "tree": {
        "sha": "19c5059bb2703a496de492440a61fd414432a03d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19c5059bb2703a496de492440a61fd414432a03d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdc64c9030488e7a6b88f369fb876c0b21c04a25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc64c9030488e7a6b88f369fb876c0b21c04a25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc64c9030488e7a6b88f369fb876c0b21c04a25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc64c9030488e7a6b88f369fb876c0b21c04a25/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bc4498234e16bc75975555cbe7855384489782f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bc4498234e16bc75975555cbe7855384489782f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bc4498234e16bc75975555cbe7855384489782f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eaa18b03a377d8caca89225542bd3bf2647e4145",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc64c9030488e7a6b88f369fb876c0b21c04a25/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc64c9030488e7a6b88f369fb876c0b21c04a25/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=bdc64c9030488e7a6b88f369fb876c0b21c04a25",
        "patch": "@@ -106,9 +106,24 @@ void WalletFrame::setCurrentWallet(WalletModel* wallet_model)\n {\n     if (mapWalletViews.count(wallet_model) == 0) return;\n \n+    // Stop the effect of hidden widgets on the size hint of the shown one in QStackedWidget.\n+    WalletView* view_about_to_hide = currentWalletView();\n+    if (view_about_to_hide) {\n+        QSizePolicy sp = view_about_to_hide->sizePolicy();\n+        sp.setHorizontalPolicy(QSizePolicy::Ignored);\n+        view_about_to_hide->setSizePolicy(sp);\n+    }\n+\n     WalletView *walletView = mapWalletViews.value(wallet_model);\n-    walletStack->setCurrentWidget(walletView);\n     assert(walletView);\n+\n+    // Set or restore the default QSizePolicy which could be set to QSizePolicy::Ignored previously.\n+    QSizePolicy sp = walletView->sizePolicy();\n+    sp.setHorizontalPolicy(QSizePolicy::Preferred);\n+    walletView->setSizePolicy(sp);\n+    walletView->updateGeometry();\n+\n+    walletStack->setCurrentWidget(walletView);\n     walletView->updateEncryptionStatus();\n }\n "
      }
    ]
  },
  {
    "sha": "a98f211940dc6eaed8050263efad7656126b7b3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOThmMjExOTQwZGM2ZWFlZDgwNTAyNjNlZmFkNzY1NjEyNmI3YjNl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-21T21:09:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-22T06:41:18Z"
      },
      "message": "Fix MSVC build after gui#176\n\nGithub-Pull: #20983\nRebased-From: c5354e4641d8a92807e4183894d4bb32241e4b5b",
      "tree": {
        "sha": "0986cd0cd778480119686ad2ca3e517df5c49a8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0986cd0cd778480119686ad2ca3e517df5c49a8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a98f211940dc6eaed8050263efad7656126b7b3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98f211940dc6eaed8050263efad7656126b7b3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a98f211940dc6eaed8050263efad7656126b7b3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98f211940dc6eaed8050263efad7656126b7b3e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdc64c9030488e7a6b88f369fb876c0b21c04a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc64c9030488e7a6b88f369fb876c0b21c04a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc64c9030488e7a6b88f369fb876c0b21c04a25"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "490ce8b1ced9fd64addcc8ec9e42ba959633e6d3",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98f211940dc6eaed8050263efad7656126b7b3e/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98f211940dc6eaed8050263efad7656126b7b3e/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=a98f211940dc6eaed8050263efad7656126b7b3e",
        "patch": "@@ -104,6 +104,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondesc.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondescdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionfilterproxy.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionoverviewwidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionrecord.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiontablemodel.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionview.cpp\" />"
      }
    ]
  },
  {
    "sha": "e2ebc8567a96e92d1c039b2e7c5f48826fece810",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmViYzg1NjdhOTZlOTJkMWMwMzliMmU3YzVmNDg4MjZmZWNlODEw",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2020-12-29T21:54:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-26T08:51:56Z"
      },
      "message": "raise helpMessageDialog\n\nGithub-Pull: bitcoin-core/gui#167\nRebased-From: 77114462f2328914b7a918f40776e522a0898e56",
      "tree": {
        "sha": "827885d20bf275aec277893af09ea6f8f19970a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827885d20bf275aec277893af09ea6f8f19970a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2ebc8567a96e92d1c039b2e7c5f48826fece810",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2ebc8567a96e92d1c039b2e7c5f48826fece810",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2ebc8567a96e92d1c039b2e7c5f48826fece810",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2ebc8567a96e92d1c039b2e7c5f48826fece810/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a98f211940dc6eaed8050263efad7656126b7b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98f211940dc6eaed8050263efad7656126b7b3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a98f211940dc6eaed8050263efad7656126b7b3e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6a412b95f89c875131cbac892436e9e7fa3bfaa0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2ebc8567a96e92d1c039b2e7c5f48826fece810/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2ebc8567a96e92d1c039b2e7c5f48826fece810/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e2ebc8567a96e92d1c039b2e7c5f48826fece810",
        "patch": "@@ -845,7 +845,7 @@ void BitcoinGUI::showDebugWindowActivateConsole()\n \n void BitcoinGUI::showHelpMessageClicked()\n {\n-    helpMessageDialog->show();\n+    GUIUtil::bringToFront(helpMessageDialog);\n }\n \n #ifdef ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "6dc58e99457fe4609fa3c401e89f98c92dbd9878",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGM1OGU5OTQ1N2ZlNDYwOWZhM2M0MDFlODlmOThjOTJkYmQ5ODc4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-01-07T21:04:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-28T09:15:59Z"
      },
      "message": "qt: Use \"fusion\" style on macOS Big Sur with old Qt\n\nThe \"macintosh\" style is broken on macOS Big Sur at least for Qt 5.9.8.\n\nGithub-Pull: #bitcoin-core/gui#177\nRebased-From: 4e1154dfd128cbada65e9ea08ee274cdeafc4c53",
      "tree": {
        "sha": "359990bae31856cb3159fca7fc4b92b7ed878597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/359990bae31856cb3159fca7fc4b92b7ed878597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dc58e99457fe4609fa3c401e89f98c92dbd9878",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc58e99457fe4609fa3c401e89f98c92dbd9878",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dc58e99457fe4609fa3c401e89f98c92dbd9878",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc58e99457fe4609fa3c401e89f98c92dbd9878/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2ebc8567a96e92d1c039b2e7c5f48826fece810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2ebc8567a96e92d1c039b2e7c5f48826fece810",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2ebc8567a96e92d1c039b2e7c5f48826fece810"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6737452aba9c23f2a80f422b1164a30bfdaeb371",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc58e99457fe4609fa3c401e89f98c92dbd9878/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc58e99457fe4609fa3c401e89f98c92dbd9878/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6dc58e99457fe4609fa3c401e89f98c92dbd9878",
        "patch": "@@ -51,6 +51,7 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n+#include <QtGlobal>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -466,6 +467,13 @@ int GuiMain(int argc, char* argv[])\n     QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n #endif\n \n+#if (QT_VERSION <= QT_VERSION_CHECK(5, 9, 8)) && defined(Q_OS_MACOS)\n+    const auto os_name = QSysInfo::prettyProductName();\n+    if (os_name.startsWith(\"macOS 11\") || os_name.startsWith(\"macOS 10.16\")) {\n+        QApplication::setStyle(\"fusion\");\n+    }\n+#endif\n+\n     BitcoinApplication app;\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these"
      }
    ]
  },
  {
    "sha": "4607019798c543f046bcd22d5b7c09750e7e0ee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjA3MDE5Nzk4YzU0M2YwNDZiY2QyMmQ1YjdjMDk3NTBlN2UwZWUy",
    "commit": {
      "author": {
        "name": "Bruno Garcia",
        "email": "brunoely.gc@gmail.com",
        "date": "2021-02-04T12:49:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-08T07:51:02Z"
      },
      "message": "fix the unreachable code at feature_taproot\n\nGithub-Pull: #21081\nRebased-From: 5e0cd25e29541e6c19559fb5c2555e008ed896fa",
      "tree": {
        "sha": "9132dff8e37a367dbea858e9de76f24a4083c98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9132dff8e37a367dbea858e9de76f24a4083c98a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4607019798c543f046bcd22d5b7c09750e7e0ee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4607019798c543f046bcd22d5b7c09750e7e0ee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4607019798c543f046bcd22d5b7c09750e7e0ee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4607019798c543f046bcd22d5b7c09750e7e0ee2/comments",
    "author": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dc58e99457fe4609fa3c401e89f98c92dbd9878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc58e99457fe4609fa3c401e89f98c92dbd9878",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dc58e99457fe4609fa3c401e89f98c92dbd9878"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2b9b614878c1b99ef7f75bf538337a32acfbfdc1",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4607019798c543f046bcd22d5b7c09750e7e0ee2/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4607019798c543f046bcd22d5b7c09750e7e0ee2/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=4607019798c543f046bcd22d5b7c09750e7e0ee2",
        "patch": "@@ -515,7 +515,6 @@ def add_spender(spenders, *args, **kwargs):\n \n def random_checksig_style(pubkey):\n     \"\"\"Creates a random CHECKSIG* tapscript that would succeed with only the valid signature on witness stack.\"\"\"\n-    return bytes(CScript([pubkey, OP_CHECKSIG]))\n     opcode = random.choice([OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD])\n     if (opcode == OP_CHECKSIGVERIFY):\n         ret = CScript([pubkey, opcode, OP_1])"
      }
    ]
  },
  {
    "sha": "95218ee95cdb4046ee7d622eac822e74d94314c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTIxOGVlOTVjZGI0MDQ2ZWU3ZDYyMmVhYzgyMmU3NGQ5NDMxNGM3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-01-31T21:03:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-11T11:42:31Z"
      },
      "message": "net: Avoid UBSan warning in ProcessMessage(...)\n\nGithub-Pull: #21043\nRebased-From: f5f2f9716885e7548809e77f46b493c896a019bf",
      "tree": {
        "sha": "6b780ed1141f6433fb4dbb5c7c3b187df67d920c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b780ed1141f6433fb4dbb5c7c3b187df67d920c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95218ee95cdb4046ee7d622eac822e74d94314c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95218ee95cdb4046ee7d622eac822e74d94314c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95218ee95cdb4046ee7d622eac822e74d94314c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95218ee95cdb4046ee7d622eac822e74d94314c7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4607019798c543f046bcd22d5b7c09750e7e0ee2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4607019798c543f046bcd22d5b7c09750e7e0ee2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4607019798c543f046bcd22d5b7c09750e7e0ee2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f29be8d8a388a1da92760824d08cf171ace37840",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95218ee95cdb4046ee7d622eac822e74d94314c7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95218ee95cdb4046ee7d622eac822e74d94314c7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=95218ee95cdb4046ee7d622eac822e74d94314c7",
        "patch": "@@ -2305,6 +2305,9 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom.IsInboundConn())\n         {"
      }
    ]
  },
  {
    "sha": "08dada84565ea5f49127123e356c82a150626f3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGRhZGE4NDU2NWVhNWY0OTEyNzEyM2UzNTZjODJhMTUwNjI2ZjNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-01T14:57:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-11T11:42:40Z"
      },
      "message": "util: Disallow negative mocktime\n\nSigned-off-by: practicalswift <practicalswift@users.noreply.github.com>\n\nGithub-Pull: #21043\nRebased-From: 3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
      "tree": {
        "sha": "f118994b26354a51f0209c8c758c393aec464416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f118994b26354a51f0209c8c758c393aec464416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08dada84565ea5f49127123e356c82a150626f3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dada84565ea5f49127123e356c82a150626f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08dada84565ea5f49127123e356c82a150626f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dada84565ea5f49127123e356c82a150626f3c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95218ee95cdb4046ee7d622eac822e74d94314c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95218ee95cdb4046ee7d622eac822e74d94314c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95218ee95cdb4046ee7d622eac822e74d94314c7"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "00f7445cfa5b8bca07aeeeca29bde9845e99b210",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dada84565ea5f49127123e356c82a150626f3c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dada84565ea5f49127123e356c82a150626f3c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=08dada84565ea5f49127123e356c82a150626f3c",
        "patch": "@@ -360,13 +360,13 @@ static RPCHelpMan signmessagewithprivkey()\n static RPCHelpMan setmocktime()\n {\n     return RPCHelpMan{\"setmocktime\",\n-                \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n-                {\n-                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n-            \"   Pass 0 to go back to using the system time.\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\"\"},\n+        \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n+        {\n+            {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n+             \"Pass 0 to go back to using the system time.\"},\n+        },\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\"\"},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     if (!Params().IsMockableChain()) {\n@@ -381,7 +381,10 @@ static RPCHelpMan setmocktime()\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, {UniValue::VNUM});\n-    int64_t time = request.params[0].get_int64();\n+    const int64_t time{request.params[0].get_int64()};\n+    if (time < 0) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Mocktime can not be negative: %s.\", time));\n+    }\n     SetMockTime(time);\n     if (request.context.Has<NodeContext>()) {\n         for (const auto& chain_client : request.context.Get<NodeContext>().chain_clients) {"
      },
      {
        "sha": "d130e4e4d4c8bdf66b83ab9764b8704f5f869bc5",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dada84565ea5f49127123e356c82a150626f3c/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dada84565ea5f49127123e356c82a150626f3c/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=08dada84565ea5f49127123e356c82a150626f3c",
        "patch": "@@ -9,6 +9,8 @@\n \n #include <util/time.h>\n \n+#include <util/check.h>\n+\n #include <atomic>\n #include <boost/date_time/posix_time/posix_time.hpp>\n #include <ctime>\n@@ -18,7 +20,7 @@\n \n void UninterruptibleSleep(const std::chrono::microseconds& n) { std::this_thread::sleep_for(n); }\n \n-static std::atomic<int64_t> nMockTime(0); //!< For unit testing\n+static std::atomic<int64_t> nMockTime(0); //!< For testing\n \n int64_t GetTime()\n {\n@@ -46,6 +48,7 @@ template std::chrono::microseconds GetTime();\n \n void SetMockTime(int64_t nMockTimeIn)\n {\n+    Assert(nMockTimeIn >= 0);\n     nMockTime.store(nMockTimeIn, std::memory_order_relaxed);\n }\n "
      },
      {
        "sha": "6177970872a056426d7eee72c5803a0e8db222f2",
        "filename": "test/functional/rpc_uptime.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dada84565ea5f49127123e356c82a150626f3c/test/functional/rpc_uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dada84565ea5f49127123e356c82a150626f3c/test/functional/rpc_uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_uptime.py?ref=08dada84565ea5f49127123e356c82a150626f3c",
        "patch": "@@ -10,6 +10,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error\n \n \n class UptimeTest(BitcoinTestFramework):\n@@ -18,8 +19,12 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n+        self._test_negative_time()\n         self._test_uptime()\n \n+    def _test_negative_time(self):\n+        assert_raises_rpc_error(-8, \"Mocktime can not be negative: -1.\", self.nodes[0].setmocktime, -1)\n+\n     def _test_uptime(self):\n         wait_time = 10\n         self.nodes[0].setmocktime(int(time.time() + wait_time))"
      }
    ]
  },
  {
    "sha": "d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmI1ZWI1ZmNjOGU4ZjdmMGFiNzc4ZjMyZDQ5YWFiZjZlMDRkODBk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-16T18:22:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-19T11:47:40Z"
      },
      "message": "Disallow sendtoaddress and sendmany when private keys disabled\n\nGithub-Pull: #21201\nRebased-From: 0997019e7681efb00847a7246c15ac8f235128d8",
      "tree": {
        "sha": "2bb8e3520646eb4262bdb9a1647424c1c74fc252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bb8e3520646eb4262bdb9a1647424c1c74fc252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08dada84565ea5f49127123e356c82a150626f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dada84565ea5f49127123e356c82a150626f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08dada84565ea5f49127123e356c82a150626f3c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37d672ace1d71924293ccdebfbed1ef7c56c27bd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
        "patch": "@@ -400,6 +400,12 @@ UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std\n {\n     EnsureWalletIsUnlocked(pwallet);\n \n+    // This function is only used by sendtoaddress and sendmany.\n+    // This should always try to sign, if we don't have private keys, don't try to do anything here.\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n     // Shuffle recipient list\n     std::shuffle(recipients.begin(), recipients.end(), FastRandomContext());\n \n@@ -409,7 +415,7 @@ UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std\n     bilingual_str error;\n     CTransactionRef tx;\n     FeeCalculation fee_calc_out;\n-    bool fCreated = pwallet->CreateTransaction(recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    const bool fCreated = pwallet->CreateTransaction(recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, true);\n     if (!fCreated) {\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n     }"
      }
    ]
  },
  {
    "sha": "4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWYxZTRiZDQwN2NjZjgwYjJhMWQ0MGU5NDZlMmFjODMyZTYyNGU1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-16T19:41:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-19T11:47:43Z"
      },
      "message": "test: disallow sendtoaddress/sendmany when private keys disabled\n\nGithub-Pull: #21201\nRebased-From: 6bfbc97d716faad38c87603ac6049d222236d623",
      "tree": {
        "sha": "1e209ef17d8c5fa08b684089adc7d2dc01b1ce63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e209ef17d8c5fa08b684089adc7d2dc01b1ce63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b5eb5fcc8e8f7f0ab778f32d49aabf6e04d80d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2bf7c094e56f93591268a182434407a5dedf040a",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test createwallet arguments.\n+\"\"\"Test createwallet watchonly arguments.\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n@@ -50,6 +50,11 @@ def run_test(self):\n         assert_equal(len(wo_wallet.listtransactions()), 1)\n         assert_equal(wo_wallet.getbalance(include_watchonly=False), 0)\n \n+        self.log.info('Test sending from a watch-only wallet raises RPC error')\n+        msg = \"Error: Private keys are disabled for this wallet\"\n+        assert_raises_rpc_error(-4, msg, wo_wallet.sendtoaddress, a1, 0.1)\n+        assert_raises_rpc_error(-4, msg, wo_wallet.sendmany, amounts={a1: 0.1})\n+\n         self.log.info('Testing listreceivedbyaddress watch-only defaults')\n         result = wo_wallet.listreceivedbyaddress()\n         assert_equal(len(result), 1)"
      }
    ]
  },
  {
    "sha": "36ecf5eb8752890fdffd617c9fedb08033607f99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmVjZjVlYjg3NTI4OTBmZGZmZDYxN2M5ZmVkYjA4MDMzNjA3Zjk5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-12-03T19:43:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-06T07:18:16Z"
      },
      "message": "tests: Test that a fully signed tx given to signrawtx is unchanged\n\nTests that a fully signed transaction given to\nsignrawtransactionwithwallet is both unchanged and marked as complete.\nThis tests for a regression in 0.20 where the transaction would not be\nmarked as complete.\n\nGithub-Pull: #20562\nRebased-From: 773c42b265fb2212b5cb8785b7226a206d063543",
      "tree": {
        "sha": "dc98017a15db80a0d6ed20806cb95852bf1c2cf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc98017a15db80a0d6ed20806cb95852bf1c2cf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36ecf5eb8752890fdffd617c9fedb08033607f99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ecf5eb8752890fdffd617c9fedb08033607f99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36ecf5eb8752890fdffd617c9fedb08033607f99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ecf5eb8752890fdffd617c9fedb08033607f99/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef1e4bd407ccf80b2a1d40e946e2ac832e624e5"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2fbbdbbdf0da4894181e140304a907cf771b9b5c",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecf5eb8752890fdffd617c9fedb08033607f99/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecf5eb8752890fdffd617c9fedb08033607f99/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=36ecf5eb8752890fdffd617c9fedb08033607f99",
        "patch": "@@ -151,6 +151,19 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+    def test_fully_signed_tx(self):\n+        self.log.info(\"Test signing a fully signed transaction does nothing\")\n+        self.nodes[0].walletpassphrase(\"password\", 9999)\n+        self.nodes[0].generate(101)\n+        rawtx = self.nodes[0].createrawtransaction([], [{self.nodes[0].getnewaddress(): 10}])\n+        fundedtx = self.nodes[0].fundrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(fundedtx[\"hex\"])\n+        assert_equal(signedtx[\"complete\"], True)\n+        signedtx2 = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n+        assert_equal(signedtx2[\"complete\"], True)\n+        assert_equal(signedtx[\"hex\"], signedtx2[\"hex\"])\n+        self.nodes[0].walletlock()\n+\n     def witness_script_test(self):\n         self.log.info(\"Test signing transaction to P2SH-P2WSH addresses without wallet\")\n         # Create a new P2SH-P2WSH 1-of-1 multisig address:\n@@ -231,6 +244,7 @@ def run_test(self):\n         self.witness_script_test()\n         self.OP_1NEGATE_test()\n         self.test_with_lock_outputs()\n+        self.test_fully_signed_tx()\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "3a126724195fcf00d84e852a9247475fccd14f38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTEyNjcyNDE5NWZjZjAwZDg0ZTg1MmE5MjQ3NDc1ZmNjZDE0ZjM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-19T01:38:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-11T20:15:09Z"
      },
      "message": "GUI: Write PSBTs to file with binary mode\n\nGithub-Pull: #bitcoin-core/gui#188\nRebased-From: cc3971c9ff538a924c1a76ca1352bcaeb24f579f",
      "tree": {
        "sha": "3177768692ddfeec1af4aa104fa4a8ba09244430",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3177768692ddfeec1af4aa104fa4a8ba09244430"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a126724195fcf00d84e852a9247475fccd14f38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a126724195fcf00d84e852a9247475fccd14f38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a126724195fcf00d84e852a9247475fccd14f38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a126724195fcf00d84e852a9247475fccd14f38/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36ecf5eb8752890fdffd617c9fedb08033607f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ecf5eb8752890fdffd617c9fedb08033607f99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36ecf5eb8752890fdffd617c9fedb08033607f99"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "28103495da4ec091f2eebe900000ad38e43c06d6",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a126724195fcf00d84e852a9247475fccd14f38/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a126724195fcf00d84e852a9247475fccd14f38/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=3a126724195fcf00d84e852a9247475fccd14f38",
        "patch": "@@ -145,7 +145,7 @@ void PSBTOperationsDialog::saveTransaction() {\n     if (filename.isEmpty()) {\n         return;\n     }\n-    std::ofstream out(filename.toLocal8Bit().data());\n+    std::ofstream out(filename.toLocal8Bit().data(), std::ofstream::out | std::ofstream::binary);\n     out << ssTx.str();\n     out.close();\n     showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);"
      },
      {
        "sha": "62606ff0b00b46e7ad96e76aa08267fc73383ec3",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a126724195fcf00d84e852a9247475fccd14f38/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a126724195fcf00d84e852a9247475fccd14f38/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3a126724195fcf00d84e852a9247475fccd14f38",
        "patch": "@@ -427,7 +427,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n             if (filename.isEmpty()) {\n                 return;\n             }\n-            std::ofstream out(filename.toLocal8Bit().data());\n+            std::ofstream out(filename.toLocal8Bit().data(), std::ofstream::out | std::ofstream::binary);\n             out << ssTx.str();\n             out.close();\n             Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);"
      }
    ]
  },
  {
    "sha": "b35711efdebc4e95906b1e809e711bc707852f2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzU3MTFlZmRlYmM0ZTk1OTA2YjFlODA5ZTcxMWJjNzA3ODUyZjJk",
    "commit": {
      "author": {
        "name": "Aaron Clauson",
        "email": "aaron@sipsorcery.com",
        "date": "2021-03-15T17:18:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T07:40:51Z"
      },
      "message": "Update vcpkg checkout commit.\n\nPreviously vcpkg was relying on https://repo.msys2.org/mingw/i686/mingw-w64-i686-pkg-config-0.29.2-1-any.pkg.tar.xz which is no longer available. The vcpkg source has been updated to use http://repo.msys2.org/mingw/i686/mingw-w64-i686-pkg-config-0.29.2-2-any.pkg.tar.zst. This PR updates the commit ID used to checkout vcpkg for the updated URL.\n\nGithub-Pull: #21446\nRebased-From: b9e3f3530611d5fbb799a401b839ee23e3eba835",
      "tree": {
        "sha": "cf803e1a77176045ac9e1444ce75ccf63e1e60cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf803e1a77176045ac9e1444ce75ccf63e1e60cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b35711efdebc4e95906b1e809e711bc707852f2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35711efdebc4e95906b1e809e711bc707852f2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b35711efdebc4e95906b1e809e711bc707852f2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35711efdebc4e95906b1e809e711bc707852f2d/comments",
    "author": {
      "login": "sipsorcery",
      "id": 197660,
      "node_id": "MDQ6VXNlcjE5NzY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/197660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipsorcery",
      "html_url": "https://github.com/sipsorcery",
      "followers_url": "https://api.github.com/users/sipsorcery/followers",
      "following_url": "https://api.github.com/users/sipsorcery/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipsorcery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipsorcery/subscriptions",
      "organizations_url": "https://api.github.com/users/sipsorcery/orgs",
      "repos_url": "https://api.github.com/users/sipsorcery/repos",
      "events_url": "https://api.github.com/users/sipsorcery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipsorcery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a126724195fcf00d84e852a9247475fccd14f38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a126724195fcf00d84e852a9247475fccd14f38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a126724195fcf00d84e852a9247475fccd14f38"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "097874b17af0f2d60e3a5cd09ea8c103dc9d7007",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b35711efdebc4e95906b1e809e711bc707852f2d/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b35711efdebc4e95906b1e809e711bc707852f2d/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=b35711efdebc4e95906b1e809e711bc707852f2d",
        "patch": "@@ -10,7 +10,7 @@ environment:\n   QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt598x64_vs2019_v1681/qt598_x64_vs2019_1681.zip'\n   QT_DOWNLOAD_HASH: '00cf7327818c07d74e0b1a4464ffe987c2728b00d49d4bf333065892af0515c3'\n   QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n-  VCPKG_TAG: '2020.11-1'\n+  VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n install:\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq"
      }
    ]
  },
  {
    "sha": "58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODk3NWQ1YzBhYmVhYjhjYjY2ZjYwMDZlZTU1OGQ0YmI3Y2MxMmI1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-07T23:22:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:32:31Z"
      },
      "message": "doc: add signet to share/examples/bitcoin.conf\n\nGithub-Pull: #21384\nRebased-From: 21b6a233734da1601846a16a741b108522901782",
      "tree": {
        "sha": "6e8eb595ba42562ee492da5a9bde92cd6c83e91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e8eb595ba42562ee492da5a9bde92cd6c83e91d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b35711efdebc4e95906b1e809e711bc707852f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35711efdebc4e95906b1e809e711bc707852f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b35711efdebc4e95906b1e809e711bc707852f2d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5b7fc776a4c48e8e38000ec693f6508ae607b4cb",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
        "patch": "@@ -4,13 +4,16 @@\n \n # Network-related settings:\n \n-# Note that if you use testnet or regtest, particularly with the options\n+# Note that if you use testnet, signet or regtest, particularly with the options\n # addnode, connect, port, bind, rpcport, rpcbind or wallet, you will also\n # want to read \"[Sections]\" further down.\n \n-# Run on the test network instead of the real bitcoin network.\n+# Run on the testnet network\n #testnet=0\n \n+# Run on a signet network\n+#signet=0\n+\n # Run a regression test network\n #regtest=0\n \n@@ -57,7 +60,7 @@\n # Listening mode, enabled by default except when 'connect' is being used\n #listen=1\n \n-# Port on which to listen for connections (default: 8333, testnet: 18333, regtest: 18444)\n+# Port on which to listen for connections (default: 8333, testnet: 18333, signet: 38333, regtest: 18444)\n #port=\n \n # Maximum number of inbound+outbound connections.\n@@ -155,7 +158,7 @@\n #minimizetotray=1\n \n # [Sections]\n-# Most options apply to mainnet, testnet and regtest.\n+# Most options apply to mainnet, testnet, signet and regtest.\n # If you want to confine an option to just one network, you should add it in the\n # relevant section below.\n # EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet\n@@ -167,5 +170,8 @@\n # Options only for testnet\n [test]\n \n+# Options only for signet\n+[signet]\n+\n # Options only for regtest\n [regtest]"
      }
    ]
  },
  {
    "sha": "6746cd078be8a15c69f8f5ba5253b1768d0acf21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQ2Y2QwNzhiZThhMTVjNjlmOGY1YmE1MjUzYjE3NjhkMGFjZjIx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-07T23:43:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:32:33Z"
      },
      "message": "doc: add signet to doc/bitcoin-conf.md\n\nGithub-Pull: #21384\nRebased-From: 4a285107c11edde2cfc8adfa831c5448c93798d3",
      "tree": {
        "sha": "6837f63cf065f90dfdb41f88eef7bc6e2cb52126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6837f63cf065f90dfdb41f88eef7bc6e2cb52126"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6746cd078be8a15c69f8f5ba5253b1768d0acf21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6746cd078be8a15c69f8f5ba5253b1768d0acf21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6746cd078be8a15c69f8f5ba5253b1768d0acf21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6746cd078be8a15c69f8f5ba5253b1768d0acf21/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58975d5c0abeab8cb66f6006ee558d4bb7cc12b5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9a312bc33c7aa84ea22ebd1fb48411763bf658f4",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6746cd078be8a15c69f8f5ba5253b1768d0acf21/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6746cd078be8a15c69f8f5ba5253b1768d0acf21/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=6746cd078be8a15c69f8f5ba5253b1768d0acf21",
        "patch": "@@ -27,7 +27,7 @@ Comments may appear in two ways:\n ### Network specific options\n \n Network specific options can be:\n-- placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`) or `[regtest]`;\n+- placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`), `[signet]` or `[regtest]`;\n - prefixed with a chain name; e.g., `regtest.maxmempool=100`.\n \n Network specific options take precedence over non-network specific options."
      }
    ]
  },
  {
    "sha": "a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDhjOWQzMTYxMGNhYjNkZGQ0ZjczMzRlODNkYjVjZjRmMTg0ZGYx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-21T23:19:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:33:42Z"
      },
      "message": "fuzz: Update FuzzedDataProvider.h from upstream (LLVM)\n\nUpstream revision: https://github.com/llvm/llvm-project/blob/6d0488f75bb2f37bcfe93fc8f59f6e78c9a0c939/compiler-rt/include/fuzzer/FuzzedDataProvider.h\n\nChanges:\n* [compiler-rt] FuzzedDataProvider: add ConsumeData and method.\n* [compiler-rt] Fix a typo in a comment in FuzzedDataProvider.h.\n* [compiler-rt] Add ConsumeRandomLengthString() version without arguments.\n* [compiler-rt] Refactor FuzzedDataProvider for better readability.\n* [compiler-rt] FuzzedDataProvider: make linter happy.\n* [compiler-rt] Mark FDP non-template methods inline to avoid ODR violations.\n\nGithub-Pull: #20740\nRebased-From: e3d2ba7c70b13a2165020e45abf02373a1e953f7",
      "tree": {
        "sha": "e560aa521e2e990855a381b284a4180b6c77d54c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e560aa521e2e990855a381b284a4180b6c77d54c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48c9d31610cab3ddd4f7334e83db5cf4f184df1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6746cd078be8a15c69f8f5ba5253b1768d0acf21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6746cd078be8a15c69f8f5ba5253b1768d0acf21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6746cd078be8a15c69f8f5ba5253b1768d0acf21"
      }
    ],
    "stats": {
      "total": 556,
      "additions": 319,
      "deletions": 237
    },
    "files": [
      {
        "sha": "83bcd0134a7d3a92c7d44c34db957886cc9f5579",
        "filename": "src/test/fuzz/FuzzedDataProvider.h",
        "status": "modified",
        "additions": 319,
        "deletions": 237,
        "changes": 556,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48c9d31610cab3ddd4f7334e83db5cf4f184df1/src/test/fuzz/FuzzedDataProvider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48c9d31610cab3ddd4f7334e83db5cf4f184df1/src/test/fuzz/FuzzedDataProvider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/FuzzedDataProvider.h?ref=a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
        "patch": "@@ -34,272 +34,354 @@ class FuzzedDataProvider {\n       : data_ptr_(data), remaining_bytes_(size) {}\n   ~FuzzedDataProvider() = default;\n \n-  // Returns a std::vector containing |num_bytes| of input data. If fewer than\n-  // |num_bytes| of data remain, returns a shorter std::vector containing all\n-  // of the data that's left. Can be used with any byte sized type, such as\n-  // char, unsigned char, uint8_t, etc.\n-  template <typename T> std::vector<T> ConsumeBytes(size_t num_bytes) {\n-    num_bytes = std::min(num_bytes, remaining_bytes_);\n-    return ConsumeBytes<T>(num_bytes, num_bytes);\n-  }\n-\n-  // Similar to |ConsumeBytes|, but also appends the terminator value at the end\n-  // of the resulting vector. Useful, when a mutable null-terminated C-string is\n-  // needed, for example. But that is a rare case. Better avoid it, if possible,\n-  // and prefer using |ConsumeBytes| or |ConsumeBytesAsString| methods.\n+  // See the implementation below (after the class definition) for more verbose\n+  // comments for each of the methods.\n+\n+  // Methods returning std::vector of bytes. These are the most popular choice\n+  // when splitting fuzzing input into pieces, as every piece is put into a\n+  // separate buffer (i.e. ASan would catch any under-/overflow) and the memory\n+  // will be released automatically.\n+  template <typename T> std::vector<T> ConsumeBytes(size_t num_bytes);\n   template <typename T>\n-  std::vector<T> ConsumeBytesWithTerminator(size_t num_bytes,\n-                                            T terminator = 0) {\n-    num_bytes = std::min(num_bytes, remaining_bytes_);\n-    std::vector<T> result = ConsumeBytes<T>(num_bytes + 1, num_bytes);\n-    result.back() = terminator;\n-    return result;\n-  }\n-\n-  // Returns a std::string containing |num_bytes| of input data. Using this and\n-  // |.c_str()| on the resulting string is the best way to get an immutable\n-  // null-terminated C string. If fewer than |num_bytes| of data remain, returns\n-  // a shorter std::string containing all of the data that's left.\n-  std::string ConsumeBytesAsString(size_t num_bytes) {\n-    static_assert(sizeof(std::string::value_type) == sizeof(uint8_t),\n-                  \"ConsumeBytesAsString cannot convert the data to a string.\");\n-\n-    num_bytes = std::min(num_bytes, remaining_bytes_);\n-    std::string result(\n-        reinterpret_cast<const std::string::value_type *>(data_ptr_),\n-        num_bytes);\n-    Advance(num_bytes);\n-    return result;\n-  }\n+  std::vector<T> ConsumeBytesWithTerminator(size_t num_bytes, T terminator = 0);\n+  template <typename T> std::vector<T> ConsumeRemainingBytes();\n \n-  // Returns a number in the range [min, max] by consuming bytes from the\n-  // input data. The value might not be uniformly distributed in the given\n-  // range. If there's no input data left, always returns |min|. |min| must\n-  // be less than or equal to |max|.\n-  template <typename T> T ConsumeIntegralInRange(T min, T max) {\n-    static_assert(std::is_integral<T>::value, \"An integral type is required.\");\n-    static_assert(sizeof(T) <= sizeof(uint64_t), \"Unsupported integral type.\");\n+  // Methods returning strings. Use only when you need a std::string or a null\n+  // terminated C-string. Otherwise, prefer the methods returning std::vector.\n+  std::string ConsumeBytesAsString(size_t num_bytes);\n+  std::string ConsumeRandomLengthString(size_t max_length);\n+  std::string ConsumeRandomLengthString();\n+  std::string ConsumeRemainingBytesAsString();\n \n-    if (min > max)\n-      abort();\n+  // Methods returning integer values.\n+  template <typename T> T ConsumeIntegral();\n+  template <typename T> T ConsumeIntegralInRange(T min, T max);\n \n-    // Use the biggest type possible to hold the range and the result.\n-    uint64_t range = static_cast<uint64_t>(max) - min;\n-    uint64_t result = 0;\n-    size_t offset = 0;\n-\n-    while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&\n-           remaining_bytes_ != 0) {\n-      // Pull bytes off the end of the seed data. Experimentally, this seems to\n-      // allow the fuzzer to more easily explore the input space. This makes\n-      // sense, since it works by modifying inputs that caused new code to run,\n-      // and this data is often used to encode length of data read by\n-      // |ConsumeBytes|. Separating out read lengths makes it easier modify the\n-      // contents of the data that is actually read.\n-      --remaining_bytes_;\n-      result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];\n-      offset += CHAR_BIT;\n-    }\n+  // Methods returning floating point values.\n+  template <typename T> T ConsumeFloatingPoint();\n+  template <typename T> T ConsumeFloatingPointInRange(T min, T max);\n \n-    // Avoid division by 0, in case |range + 1| results in overflow.\n-    if (range != std::numeric_limits<decltype(range)>::max())\n-      result = result % (range + 1);\n+  // 0 <= return value <= 1.\n+  template <typename T> T ConsumeProbability();\n \n-    return static_cast<T>(min + result);\n-  }\n+  bool ConsumeBool();\n \n-  // Returns a std::string of length from 0 to |max_length|. When it runs out of\n-  // input data, returns what remains of the input. Designed to be more stable\n-  // with respect to a fuzzer inserting characters than just picking a random\n-  // length and then consuming that many bytes with |ConsumeBytes|.\n-  std::string ConsumeRandomLengthString(size_t max_length) {\n-    // Reads bytes from the start of |data_ptr_|. Maps \"\\\\\" to \"\\\", and maps \"\\\"\n-    // followed by anything else to the end of the string. As a result of this\n-    // logic, a fuzzer can insert characters into the string, and the string\n-    // will be lengthened to include those new characters, resulting in a more\n-    // stable fuzzer than picking the length of a string independently from\n-    // picking its contents.\n-    std::string result;\n-\n-    // Reserve the anticipated capaticity to prevent several reallocations.\n-    result.reserve(std::min(max_length, remaining_bytes_));\n-    for (size_t i = 0; i < max_length && remaining_bytes_ != 0; ++i) {\n-      char next = ConvertUnsignedToSigned<char>(data_ptr_[0]);\n-      Advance(1);\n-      if (next == '\\\\' && remaining_bytes_ != 0) {\n-        next = ConvertUnsignedToSigned<char>(data_ptr_[0]);\n-        Advance(1);\n-        if (next != '\\\\')\n-          break;\n-      }\n-      result += next;\n-    }\n+  // Returns a value chosen from the given enum.\n+  template <typename T> T ConsumeEnum();\n \n-    result.shrink_to_fit();\n-    return result;\n-  }\n+  // Returns a value from the given array.\n+  template <typename T, size_t size> T PickValueInArray(const T (&array)[size]);\n+  template <typename T> T PickValueInArray(std::initializer_list<const T> list);\n \n-  // Returns a std::vector containing all remaining bytes of the input data.\n-  template <typename T> std::vector<T> ConsumeRemainingBytes() {\n-    return ConsumeBytes<T>(remaining_bytes_);\n-  }\n+  // Writes data to the given destination and returns number of bytes written.\n+  size_t ConsumeData(void *destination, size_t num_bytes);\n \n-  // Returns a std::string containing all remaining bytes of the input data.\n-  // Prefer using |ConsumeRemainingBytes| unless you actually need a std::string\n-  // object.\n-  std::string ConsumeRemainingBytesAsString() {\n-    return ConsumeBytesAsString(remaining_bytes_);\n-  }\n+  // Reports the remaining bytes available for fuzzed input.\n+  size_t remaining_bytes() { return remaining_bytes_; }\n \n-  // Returns a number in the range [Type's min, Type's max]. The value might\n-  // not be uniformly distributed in the given range. If there's no input data\n-  // left, always returns |min|.\n-  template <typename T> T ConsumeIntegral() {\n-    return ConsumeIntegralInRange(std::numeric_limits<T>::min(),\n-                                  std::numeric_limits<T>::max());\n-  }\n+ private:\n+  FuzzedDataProvider(const FuzzedDataProvider &) = delete;\n+  FuzzedDataProvider &operator=(const FuzzedDataProvider &) = delete;\n \n-  // Reads one byte and returns a bool, or false when no data remains.\n-  bool ConsumeBool() { return 1 & ConsumeIntegral<uint8_t>(); }\n+  void CopyAndAdvance(void *destination, size_t num_bytes);\n \n-  // Returns a copy of the value selected from the given fixed-size |array|.\n-  template <typename T, size_t size>\n-  T PickValueInArray(const T (&array)[size]) {\n-    static_assert(size > 0, \"The array must be non empty.\");\n-    return array[ConsumeIntegralInRange<size_t>(0, size - 1)];\n-  }\n+  void Advance(size_t num_bytes);\n \n   template <typename T>\n-  T PickValueInArray(std::initializer_list<const T> list) {\n-    // TODO(Dor1s): switch to static_assert once C++14 is allowed.\n-    if (!list.size())\n-      abort();\n-\n-    return *(list.begin() + ConsumeIntegralInRange<size_t>(0, list.size() - 1));\n-  }\n-\n-  // Returns an enum value. The enum must start at 0 and be contiguous. It must\n-  // also contain |kMaxValue| aliased to its largest (inclusive) value. Such as:\n-  // enum class Foo { SomeValue, OtherValue, kMaxValue = OtherValue };\n-  template <typename T> T ConsumeEnum() {\n-    static_assert(std::is_enum<T>::value, \"|T| must be an enum type.\");\n-    return static_cast<T>(ConsumeIntegralInRange<uint32_t>(\n-        0, static_cast<uint32_t>(T::kMaxValue)));\n-  }\n+  std::vector<T> ConsumeBytes(size_t size, size_t num_bytes);\n \n-  // Returns a floating point number in the range [0.0, 1.0]. If there's no\n-  // input data left, always returns 0.\n-  template <typename T> T ConsumeProbability() {\n-    static_assert(std::is_floating_point<T>::value,\n-                  \"A floating point type is required.\");\n+  template <typename TS, typename TU> TS ConvertUnsignedToSigned(TU value);\n \n-    // Use different integral types for different floating point types in order\n-    // to provide better density of the resulting values.\n-    using IntegralType =\n-        typename std::conditional<(sizeof(T) <= sizeof(uint32_t)), uint32_t,\n-                                  uint64_t>::type;\n+  const uint8_t *data_ptr_;\n+  size_t remaining_bytes_;\n+};\n \n-    T result = static_cast<T>(ConsumeIntegral<IntegralType>());\n-    result /= static_cast<T>(std::numeric_limits<IntegralType>::max());\n-    return result;\n+// Returns a std::vector containing |num_bytes| of input data. If fewer than\n+// |num_bytes| of data remain, returns a shorter std::vector containing all\n+// of the data that's left. Can be used with any byte sized type, such as\n+// char, unsigned char, uint8_t, etc.\n+template <typename T>\n+std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {\n+  num_bytes = std::min(num_bytes, remaining_bytes_);\n+  return ConsumeBytes<T>(num_bytes, num_bytes);\n+}\n+\n+// Similar to |ConsumeBytes|, but also appends the terminator value at the end\n+// of the resulting vector. Useful, when a mutable null-terminated C-string is\n+// needed, for example. But that is a rare case. Better avoid it, if possible,\n+// and prefer using |ConsumeBytes| or |ConsumeBytesAsString| methods.\n+template <typename T>\n+std::vector<T> FuzzedDataProvider::ConsumeBytesWithTerminator(size_t num_bytes,\n+                                                              T terminator) {\n+  num_bytes = std::min(num_bytes, remaining_bytes_);\n+  std::vector<T> result = ConsumeBytes<T>(num_bytes + 1, num_bytes);\n+  result.back() = terminator;\n+  return result;\n+}\n+\n+// Returns a std::vector containing all remaining bytes of the input data.\n+template <typename T>\n+std::vector<T> FuzzedDataProvider::ConsumeRemainingBytes() {\n+  return ConsumeBytes<T>(remaining_bytes_);\n+}\n+\n+// Returns a std::string containing |num_bytes| of input data. Using this and\n+// |.c_str()| on the resulting string is the best way to get an immutable\n+// null-terminated C string. If fewer than |num_bytes| of data remain, returns\n+// a shorter std::string containing all of the data that's left.\n+inline std::string FuzzedDataProvider::ConsumeBytesAsString(size_t num_bytes) {\n+  static_assert(sizeof(std::string::value_type) == sizeof(uint8_t),\n+                \"ConsumeBytesAsString cannot convert the data to a string.\");\n+\n+  num_bytes = std::min(num_bytes, remaining_bytes_);\n+  std::string result(\n+      reinterpret_cast<const std::string::value_type *>(data_ptr_), num_bytes);\n+  Advance(num_bytes);\n+  return result;\n+}\n+\n+// Returns a std::string of length from 0 to |max_length|. When it runs out of\n+// input data, returns what remains of the input. Designed to be more stable\n+// with respect to a fuzzer inserting characters than just picking a random\n+// length and then consuming that many bytes with |ConsumeBytes|.\n+inline std::string\n+FuzzedDataProvider::ConsumeRandomLengthString(size_t max_length) {\n+  // Reads bytes from the start of |data_ptr_|. Maps \"\\\\\" to \"\\\", and maps \"\\\"\n+  // followed by anything else to the end of the string. As a result of this\n+  // logic, a fuzzer can insert characters into the string, and the string\n+  // will be lengthened to include those new characters, resulting in a more\n+  // stable fuzzer than picking the length of a string independently from\n+  // picking its contents.\n+  std::string result;\n+\n+  // Reserve the anticipated capaticity to prevent several reallocations.\n+  result.reserve(std::min(max_length, remaining_bytes_));\n+  for (size_t i = 0; i < max_length && remaining_bytes_ != 0; ++i) {\n+    char next = ConvertUnsignedToSigned<char>(data_ptr_[0]);\n+    Advance(1);\n+    if (next == '\\\\' && remaining_bytes_ != 0) {\n+      next = ConvertUnsignedToSigned<char>(data_ptr_[0]);\n+      Advance(1);\n+      if (next != '\\\\')\n+        break;\n+    }\n+    result += next;\n   }\n \n-  // Returns a floating point value in the range [Type's lowest, Type's max] by\n-  // consuming bytes from the input data. If there's no input data left, always\n-  // returns approximately 0.\n-  template <typename T> T ConsumeFloatingPoint() {\n-    return ConsumeFloatingPointInRange<T>(std::numeric_limits<T>::lowest(),\n-                                          std::numeric_limits<T>::max());\n+  result.shrink_to_fit();\n+  return result;\n+}\n+\n+// Returns a std::string of length from 0 to |remaining_bytes_|.\n+inline std::string FuzzedDataProvider::ConsumeRandomLengthString() {\n+  return ConsumeRandomLengthString(remaining_bytes_);\n+}\n+\n+// Returns a std::string containing all remaining bytes of the input data.\n+// Prefer using |ConsumeRemainingBytes| unless you actually need a std::string\n+// object.\n+inline std::string FuzzedDataProvider::ConsumeRemainingBytesAsString() {\n+  return ConsumeBytesAsString(remaining_bytes_);\n+}\n+\n+// Returns a number in the range [Type's min, Type's max]. The value might\n+// not be uniformly distributed in the given range. If there's no input data\n+// left, always returns |min|.\n+template <typename T> T FuzzedDataProvider::ConsumeIntegral() {\n+  return ConsumeIntegralInRange(std::numeric_limits<T>::min(),\n+                                std::numeric_limits<T>::max());\n+}\n+\n+// Returns a number in the range [min, max] by consuming bytes from the\n+// input data. The value might not be uniformly distributed in the given\n+// range. If there's no input data left, always returns |min|. |min| must\n+// be less than or equal to |max|.\n+template <typename T>\n+T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {\n+  static_assert(std::is_integral<T>::value, \"An integral type is required.\");\n+  static_assert(sizeof(T) <= sizeof(uint64_t), \"Unsupported integral type.\");\n+\n+  if (min > max)\n+    abort();\n+\n+  // Use the biggest type possible to hold the range and the result.\n+  uint64_t range = static_cast<uint64_t>(max) - min;\n+  uint64_t result = 0;\n+  size_t offset = 0;\n+\n+  while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&\n+         remaining_bytes_ != 0) {\n+    // Pull bytes off the end of the seed data. Experimentally, this seems to\n+    // allow the fuzzer to more easily explore the input space. This makes\n+    // sense, since it works by modifying inputs that caused new code to run,\n+    // and this data is often used to encode length of data read by\n+    // |ConsumeBytes|. Separating out read lengths makes it easier modify the\n+    // contents of the data that is actually read.\n+    --remaining_bytes_;\n+    result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];\n+    offset += CHAR_BIT;\n   }\n \n-  // Returns a floating point value in the given range by consuming bytes from\n-  // the input data. If there's no input data left, returns |min|. Note that\n-  // |min| must be less than or equal to |max|.\n-  template <typename T> T ConsumeFloatingPointInRange(T min, T max) {\n-    if (min > max)\n-      abort();\n-\n-    T range = .0;\n-    T result = min;\n-    constexpr T zero(.0);\n-    if (max > zero && min < zero && max > min + std::numeric_limits<T>::max()) {\n-      // The diff |max - min| would overflow the given floating point type. Use\n-      // the half of the diff as the range and consume a bool to decide whether\n-      // the result is in the first of the second part of the diff.\n-      range = (max / 2.0) - (min / 2.0);\n-      if (ConsumeBool()) {\n-        result += range;\n-      }\n-    } else {\n-      range = max - min;\n+  // Avoid division by 0, in case |range + 1| results in overflow.\n+  if (range != std::numeric_limits<decltype(range)>::max())\n+    result = result % (range + 1);\n+\n+  return static_cast<T>(min + result);\n+}\n+\n+// Returns a floating point value in the range [Type's lowest, Type's max] by\n+// consuming bytes from the input data. If there's no input data left, always\n+// returns approximately 0.\n+template <typename T> T FuzzedDataProvider::ConsumeFloatingPoint() {\n+  return ConsumeFloatingPointInRange<T>(std::numeric_limits<T>::lowest(),\n+                                        std::numeric_limits<T>::max());\n+}\n+\n+// Returns a floating point value in the given range by consuming bytes from\n+// the input data. If there's no input data left, returns |min|. Note that\n+// |min| must be less than or equal to |max|.\n+template <typename T>\n+T FuzzedDataProvider::ConsumeFloatingPointInRange(T min, T max) {\n+  if (min > max)\n+    abort();\n+\n+  T range = .0;\n+  T result = min;\n+  constexpr T zero(.0);\n+  if (max > zero && min < zero && max > min + std::numeric_limits<T>::max()) {\n+    // The diff |max - min| would overflow the given floating point type. Use\n+    // the half of the diff as the range and consume a bool to decide whether\n+    // the result is in the first of the second part of the diff.\n+    range = (max / 2.0) - (min / 2.0);\n+    if (ConsumeBool()) {\n+      result += range;\n     }\n-\n-    return result + range * ConsumeProbability<T>();\n+  } else {\n+    range = max - min;\n   }\n \n-  // Reports the remaining bytes available for fuzzed input.\n-  size_t remaining_bytes() { return remaining_bytes_; }\n-\n- private:\n-  FuzzedDataProvider(const FuzzedDataProvider &) = delete;\n-  FuzzedDataProvider &operator=(const FuzzedDataProvider &) = delete;\n-\n-  void Advance(size_t num_bytes) {\n-    if (num_bytes > remaining_bytes_)\n+  return result + range * ConsumeProbability<T>();\n+}\n+\n+// Returns a floating point number in the range [0.0, 1.0]. If there's no\n+// input data left, always returns 0.\n+template <typename T> T FuzzedDataProvider::ConsumeProbability() {\n+  static_assert(std::is_floating_point<T>::value,\n+                \"A floating point type is required.\");\n+\n+  // Use different integral types for different floating point types in order\n+  // to provide better density of the resulting values.\n+  using IntegralType =\n+      typename std::conditional<(sizeof(T) <= sizeof(uint32_t)), uint32_t,\n+                                uint64_t>::type;\n+\n+  T result = static_cast<T>(ConsumeIntegral<IntegralType>());\n+  result /= static_cast<T>(std::numeric_limits<IntegralType>::max());\n+  return result;\n+}\n+\n+// Reads one byte and returns a bool, or false when no data remains.\n+inline bool FuzzedDataProvider::ConsumeBool() {\n+  return 1 & ConsumeIntegral<uint8_t>();\n+}\n+\n+// Returns an enum value. The enum must start at 0 and be contiguous. It must\n+// also contain |kMaxValue| aliased to its largest (inclusive) value. Such as:\n+// enum class Foo { SomeValue, OtherValue, kMaxValue = OtherValue };\n+template <typename T> T FuzzedDataProvider::ConsumeEnum() {\n+  static_assert(std::is_enum<T>::value, \"|T| must be an enum type.\");\n+  return static_cast<T>(\n+      ConsumeIntegralInRange<uint32_t>(0, static_cast<uint32_t>(T::kMaxValue)));\n+}\n+\n+// Returns a copy of the value selected from the given fixed-size |array|.\n+template <typename T, size_t size>\n+T FuzzedDataProvider::PickValueInArray(const T (&array)[size]) {\n+  static_assert(size > 0, \"The array must be non empty.\");\n+  return array[ConsumeIntegralInRange<size_t>(0, size - 1)];\n+}\n+\n+template <typename T>\n+T FuzzedDataProvider::PickValueInArray(std::initializer_list<const T> list) {\n+  // TODO(Dor1s): switch to static_assert once C++14 is allowed.\n+  if (!list.size())\n+    abort();\n+\n+  return *(list.begin() + ConsumeIntegralInRange<size_t>(0, list.size() - 1));\n+}\n+\n+// Writes |num_bytes| of input data to the given destination pointer. If there\n+// is not enough data left, writes all remaining bytes. Return value is the\n+// number of bytes written.\n+// In general, it's better to avoid using this function, but it may be useful\n+// in cases when it's necessary to fill a certain buffer or object with\n+// fuzzing data.\n+inline size_t FuzzedDataProvider::ConsumeData(void *destination,\n+                                              size_t num_bytes) {\n+  num_bytes = std::min(num_bytes, remaining_bytes_);\n+  CopyAndAdvance(destination, num_bytes);\n+  return num_bytes;\n+}\n+\n+// Private methods.\n+inline void FuzzedDataProvider::CopyAndAdvance(void *destination,\n+                                               size_t num_bytes) {\n+  std::memcpy(destination, data_ptr_, num_bytes);\n+  Advance(num_bytes);\n+}\n+\n+inline void FuzzedDataProvider::Advance(size_t num_bytes) {\n+  if (num_bytes > remaining_bytes_)\n+    abort();\n+\n+  data_ptr_ += num_bytes;\n+  remaining_bytes_ -= num_bytes;\n+}\n+\n+template <typename T>\n+std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {\n+  static_assert(sizeof(T) == sizeof(uint8_t), \"Incompatible data type.\");\n+\n+  // The point of using the size-based constructor below is to increase the\n+  // odds of having a vector object with capacity being equal to the length.\n+  // That part is always implementation specific, but at least both libc++ and\n+  // libstdc++ allocate the requested number of bytes in that constructor,\n+  // which seems to be a natural choice for other implementations as well.\n+  // To increase the odds even more, we also call |shrink_to_fit| below.\n+  std::vector<T> result(size);\n+  if (size == 0) {\n+    if (num_bytes != 0)\n       abort();\n-\n-    data_ptr_ += num_bytes;\n-    remaining_bytes_ -= num_bytes;\n-  }\n-\n-  template <typename T>\n-  std::vector<T> ConsumeBytes(size_t size, size_t num_bytes_to_consume) {\n-    static_assert(sizeof(T) == sizeof(uint8_t), \"Incompatible data type.\");\n-\n-    // The point of using the size-based constructor below is to increase the\n-    // odds of having a vector object with capacity being equal to the length.\n-    // That part is always implementation specific, but at least both libc++ and\n-    // libstdc++ allocate the requested number of bytes in that constructor,\n-    // which seems to be a natural choice for other implementations as well.\n-    // To increase the odds even more, we also call |shrink_to_fit| below.\n-    std::vector<T> result(size);\n-    if (size == 0) {\n-      if (num_bytes_to_consume != 0)\n-        abort();\n-      return result;\n-    }\n-\n-    std::memcpy(result.data(), data_ptr_, num_bytes_to_consume);\n-    Advance(num_bytes_to_consume);\n-\n-    // Even though |shrink_to_fit| is also implementation specific, we expect it\n-    // to provide an additional assurance in case vector's constructor allocated\n-    // a buffer which is larger than the actual amount of data we put inside it.\n-    result.shrink_to_fit();\n     return result;\n   }\n \n-  template <typename TS, typename TU> TS ConvertUnsignedToSigned(TU value) {\n-    static_assert(sizeof(TS) == sizeof(TU), \"Incompatible data types.\");\n-    static_assert(!std::numeric_limits<TU>::is_signed,\n-                  \"Source type must be unsigned.\");\n-\n-    // TODO(Dor1s): change to `if constexpr` once C++17 becomes mainstream.\n-    if (std::numeric_limits<TS>::is_modulo)\n-      return static_cast<TS>(value);\n-\n-    // Avoid using implementation-defined unsigned to signer conversions.\n-    // To learn more, see https://stackoverflow.com/questions/13150449.\n-    if (value <= std::numeric_limits<TS>::max()) {\n-      return static_cast<TS>(value);\n-    } else {\n-      constexpr auto TS_min = std::numeric_limits<TS>::min();\n-      return TS_min + static_cast<char>(value - TS_min);\n-    }\n+  CopyAndAdvance(result.data(), num_bytes);\n+\n+  // Even though |shrink_to_fit| is also implementation specific, we expect it\n+  // to provide an additional assurance in case vector's constructor allocated\n+  // a buffer which is larger than the actual amount of data we put inside it.\n+  result.shrink_to_fit();\n+  return result;\n+}\n+\n+template <typename TS, typename TU>\n+TS FuzzedDataProvider::ConvertUnsignedToSigned(TU value) {\n+  static_assert(sizeof(TS) == sizeof(TU), \"Incompatible data types.\");\n+  static_assert(!std::numeric_limits<TU>::is_signed,\n+                \"Source type must be unsigned.\");\n+\n+  // TODO(Dor1s): change to `if constexpr` once C++17 becomes mainstream.\n+  if (std::numeric_limits<TS>::is_modulo)\n+    return static_cast<TS>(value);\n+\n+  // Avoid using implementation-defined unsigned to signed conversions.\n+  // To learn more, see https://stackoverflow.com/questions/13150449.\n+  if (value <= std::numeric_limits<TS>::max()) {\n+    return static_cast<TS>(value);\n+  } else {\n+    constexpr auto TS_min = std::numeric_limits<TS>::min();\n+    return TS_min + static_cast<char>(value - TS_min);\n   }\n-\n-  const uint8_t *data_ptr_;\n-  size_t remaining_bytes_;\n-};\n+}\n \n #endif // LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_"
      }
    ]
  },
  {
    "sha": "14e3f2a1c916fccf375a6570e58072c4d007fc3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGUzZjJhMWM5MTZmY2NmMzc1YTY1NzBlNTgwNzJjNGQwMDdmYzNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-31T07:50:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:34:29Z"
      },
      "message": "fuzz: Bump FuzzedDataProvider.h\n\nLatest version from https://raw.githubusercontent.com/llvm/llvm-project/70de7e0d9a95b7fcd7c105b06bd90fdf4e01f563/compiler-rt/include/fuzzer/FuzzedDataProvider.h\n\nGithub-Pull: #20812\nRebased-From: fafce49336e18033b26948886bbd7342c779b246",
      "tree": {
        "sha": "f51657c7e8056fd3f83782926303c9612a2ff391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f51657c7e8056fd3f83782926303c9612a2ff391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14e3f2a1c916fccf375a6570e58072c4d007fc3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e3f2a1c916fccf375a6570e58072c4d007fc3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14e3f2a1c916fccf375a6570e58072c4d007fc3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e3f2a1c916fccf375a6570e58072c4d007fc3c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48c9d31610cab3ddd4f7334e83db5cf4f184df1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a48c9d31610cab3ddd4f7334e83db5cf4f184df1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "744a9d78cec0efa8a6328a83721afe6ed1e438f7",
        "filename": "src/test/fuzz/FuzzedDataProvider.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e3f2a1c916fccf375a6570e58072c4d007fc3c/src/test/fuzz/FuzzedDataProvider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e3f2a1c916fccf375a6570e58072c4d007fc3c/src/test/fuzz/FuzzedDataProvider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/FuzzedDataProvider.h?ref=14e3f2a1c916fccf375a6570e58072c4d007fc3c",
        "patch": "@@ -14,6 +14,7 @@\n #define LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_\n \n #include <algorithm>\n+#include <array>\n #include <climits>\n #include <cstddef>\n #include <cstdint>\n@@ -71,6 +72,8 @@ class FuzzedDataProvider {\n \n   // Returns a value from the given array.\n   template <typename T, size_t size> T PickValueInArray(const T (&array)[size]);\n+  template <typename T, size_t size>\n+  T PickValueInArray(const std::array<T, size> &array);\n   template <typename T> T PickValueInArray(std::initializer_list<const T> list);\n \n   // Writes data to the given destination and returns number of bytes written.\n@@ -301,6 +304,12 @@ T FuzzedDataProvider::PickValueInArray(const T (&array)[size]) {\n   return array[ConsumeIntegralInRange<size_t>(0, size - 1)];\n }\n \n+template <typename T, size_t size>\n+T FuzzedDataProvider::PickValueInArray(const std::array<T, size> &array) {\n+  static_assert(size > 0, \"The array must be non empty.\");\n+  return array[ConsumeIntegralInRange<size_t>(0, size - 1)];\n+}\n+\n template <typename T>\n T FuzzedDataProvider::PickValueInArray(std::initializer_list<const T> list) {\n   // TODO(Dor1s): switch to static_assert once C++14 is allowed."
      }
    ]
  },
  {
    "sha": "8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDI2ZTNhOGExYWFkMmUxZWE3OTQxNThmZmI5YTU4N2Y0NzZkOGQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-09T12:06:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:35:15Z"
      },
      "message": "fuzz: Bump FuzzedDataProvider.h\n\nLatest version from https://github.com/llvm/llvm-project/blob/0cccccf0d2cbd707503263785f9a0407d3e2bd5e/compiler-rt/include/fuzzer/FuzzedDataProvider.h\n\nGithub-Pull: #21397\nRebased-From: fa7dc7ae9595ea49a2b31a3baef9af674d8def60",
      "tree": {
        "sha": "a2a0c11681a978f34067fe258b1f43cc8d46fcef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2a0c11681a978f34067fe258b1f43cc8d46fcef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14e3f2a1c916fccf375a6570e58072c4d007fc3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e3f2a1c916fccf375a6570e58072c4d007fc3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14e3f2a1c916fccf375a6570e58072c4d007fc3c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6cbfc39bc20b99997941b56bf7bd578ee609e0b6",
        "filename": "src/test/fuzz/FuzzedDataProvider.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3/src/test/fuzz/FuzzedDataProvider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3/src/test/fuzz/FuzzedDataProvider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/FuzzedDataProvider.h?ref=8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
        "patch": "@@ -20,6 +20,7 @@\n #include <cstdint>\n #include <cstring>\n #include <initializer_list>\n+#include <limits>\n #include <string>\n #include <type_traits>\n #include <utility>"
      }
    ]
  },
  {
    "sha": "5a2d98c640cf308d3c7e85ba51fbb7e84f99322a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTJkOThjNjQwY2YzMDhkM2M3ZTg1YmE1MWZiYjdlODRmOTkzMjJh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-03-02T20:14:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-21T08:39:27Z"
      },
      "message": "doc: Remove outdated comment\n\nThe removed commit is wrong since v0.21.0.\n\nGithub-Pull: #21342\nRebased-From: f1f63ac3f833e14badac6edf88ed09d0161e18f7",
      "tree": {
        "sha": "a4853f2d8c352d50dc4be53e59390746dad64787",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4853f2d8c352d50dc4be53e59390746dad64787"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8426e3a8a1aad2e1ea794158ffb9a587f476d8d3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1b84eef42b54c5e043558de54396fabfab7441d",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a2d98c640cf308d3c7e85ba51fbb7e84f99322a/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=5a2d98c640cf308d3c7e85ba51fbb7e84f99322a",
        "patch": "@@ -103,7 +103,7 @@ Build using:\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n-    ./autogen.sh # not required when building from tarball\n+    ./autogen.sh\n     CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n     sudo bash -c \"echo 1 > /proc/sys/fs/binfmt_misc/status\" # Enable WSL support for Win32 applications."
      }
    ]
  }
]