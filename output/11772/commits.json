[
  {
    "sha": "54b8c580b74d2db7e1012506e6c08a35165bfa9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGI4YzU4MGI3NGQyZGI3ZTEwMTI1MDZlNmMwOGEzNTE2NWJmYTlm",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-13T21:54:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-14T00:03:47Z"
      },
      "message": "[test] Fix nits leftover from 11771\n\nRemove unused variable reassignments in p2p_invalid_tx.py and call\nsend_txs_and_test() with valid transaction.",
      "tree": {
        "sha": "7f7a6d644a8dec287b9ee30fc4bc34d227218178",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7a6d644a8dec287b9ee30fc4bc34d227218178"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54b8c580b74d2db7e1012506e6c08a35165bfa9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b8c580b74d2db7e1012506e6c08a35165bfa9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54b8c580b74d2db7e1012506e6c08a35165bfa9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b8c580b74d2db7e1012506e6c08a35165bfa9f/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "69ce529ad6b4f882b23ea122e623e80d8b91c95c",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54b8c580b74d2db7e1012506e6c08a35165bfa9f/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54b8c580b74d2db7e1012506e6c08a35165bfa9f/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=54b8c580b74d2db7e1012506e6c08a35165bfa9f",
        "patch": "@@ -33,12 +33,10 @@ def run_test(self):\n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n         block = create_block(tip, create_coinbase(height), block_time)\n-        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        height += 1\n         node.p2p.send_blocks_and_test([block], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n@@ -49,7 +47,10 @@ def run_test(self):\n         tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n         node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n \n-        # TODO: test further transactions...\n+        # Verify valid transaction\n+        tx1 = create_transaction(block1.vtx[0], 0, b'', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=True)\n+\n \n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      }
    ]
  },
  {
    "sha": "2b7064eda7b941c85d23eb77656677df3e7ec140",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjcwNjRlZGE3Yjk0MWM4NWQyM2ViNzc2NTY2NzdkZjNlN2VjMTQw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:57:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-14T00:04:35Z"
      },
      "message": "[tests] Fix flake8 warnings in invalidblockrequest",
      "tree": {
        "sha": "7ef171c858000c3335b75e3196831fb911c84973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ef171c858000c3335b75e3196831fb911c84973"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b7064eda7b941c85d23eb77656677df3e7ec140",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b7064eda7b941c85d23eb77656677df3e7ec140",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b7064eda7b941c85d23eb77656677df3e7ec140",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b7064eda7b941c85d23eb77656677df3e7ec140/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54b8c580b74d2db7e1012506e6c08a35165bfa9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54b8c580b74d2db7e1012506e6c08a35165bfa9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54b8c580b74d2db7e1012506e6c08a35165bfa9f"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 22,
      "deletions": 29
    },
    "files": [
      {
        "sha": "f6f060a9ea87facb2ba7d557678bb2496959c921",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 22,
        "deletions": 29,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b7064eda7b941c85d23eb77656677df3e7ec140/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b7064eda7b941c85d23eb77656677df3e7ec140/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=2b7064eda7b941c85d23eb77656677df3e7ec140",
        "patch": "@@ -10,20 +10,17 @@\n 3) Invalid block with bad coinbase value should be rejected and not\n re-requested.\n \"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-from test_framework.mininode import network_thread_start\n import copy\n import time\n \n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidBlockRequestTest(ComparisonTestFramework):\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.comptool import RejectResult, TestInstance, TestManager\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import assert_equal\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+class InvalidBlockRequestTest(ComparisonTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n@@ -39,11 +36,10 @@ def run_test(self):\n     def get_tests(self):\n         if self.tip is None:\n             self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        self.block_time = int(time.time()) + 1\n+\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase\")\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n         height = 1\n         block = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n@@ -54,9 +50,8 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n+        self.log.info(\"Mature the block.\")\n+\n         test = TestInstance(sync_every_block=False)\n         for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n@@ -67,13 +62,12 @@ def get_tests(self):\n             height += 1\n         yield test\n \n-        '''\n-        Now we use merkle-root malleability to generate an invalid block with\n-        same blockheader.\n-        Manufacture a block with 3 transactions (coinbase, spend of prior\n-        coinbase, spend of that spend).  Duplicate the 3rd transaction to \n-        leave merkle root and blockheader unchanged but invalidate the block.\n-        '''\n+        # Use merkle-root malleability to generate an invalid block with\n+        # same blockheader.\n+        # Manufacture a block with 3 transactions (coinbase, spend of prior\n+        # coinbase, spend of that spend).  Duplicate the 3rd transaction to\n+        # leave merkle root and blockheader unchanged but invalidate the block.\n+        self.log.info(\"Test merkle root malleability.\")\n         block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n \n@@ -98,13 +92,12 @@ def get_tests(self):\n         yield TestInstance([[block2, RejectResult(16, b'bad-txns-duplicate')], [block2_orig, True]])\n         height += 1\n \n-        '''\n-        Make sure that a totally screwed up block is not valid.\n-        '''\n+        self.log.info(\"Test very broken block.\")\n+\n         block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n-        block3.vtx[0].vout[0].nValue = 100 * COIN # Too high!\n-        block3.vtx[0].sha256=None\n+        block3.vtx[0].vout[0].nValue = 100 * COIN  # Too high!\n+        block3.vtx[0].sha256 = None\n         block3.vtx[0].calc_sha256()\n         block3.hashMerkleRoot = block3.calc_merkle_root()\n         block3.rehash()"
      }
    ]
  },
  {
    "sha": "e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTdiMTEzYjA0OWZhMWNhNzE1MjM3M2Q2ZWE5MTFkNTZiZjdlZjRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:45:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-14T00:04:35Z"
      },
      "message": "[tests] Change invalidblockrequest to use BitcoinTestFramework\n\n[tests] update tests from changes to mininode in #11771 - added by @conscott\n\n[tests] trivial update to hex conversion for readability - added by @conscott",
      "tree": {
        "sha": "2eb7a30a351bd8a88a299d0029624451fa3714f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb7a30a351bd8a88a299d0029624451fa3714f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e97b113b049fa1ca7152373d6ea911d56bf7ef4e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b7064eda7b941c85d23eb77656677df3e7ec140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b7064eda7b941c85d23eb77656677df3e7ec140",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b7064eda7b941c85d23eb77656677df3e7ec140"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 30,
      "deletions": 39
    },
    "files": [
      {
        "sha": "e1f328ba774ca171c956aacfe619410f0d4c57cc",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 30,
        "deletions": 39,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e97b113b049fa1ca7152373d6ea911d56bf7ef4e/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e97b113b049fa1ca7152373d6ea911d56bf7ef4e/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
        "patch": "@@ -11,68 +11,62 @@\n re-requested.\n \"\"\"\n import copy\n-import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-class InvalidBlockRequestTest(ComparisonTestFramework):\n+class InvalidBlockRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        best_block = node.getblock(node.getbestblockhash())\n+        tip = int(node.getbestblockhash(), 16)\n+        height = best_block[\"height\"] + 1\n+        block_time = best_block[\"time\"] + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase\")\n \n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        block1 = block\n+        tip = block.sha256\n+        node.p2p.send_blocks_and_test([block1], node, True)\n \n         self.log.info(\"Mature the block.\")\n+        node.generate(100)\n \n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        best_block = node.getblock(node.getbestblockhash())\n+        tip = int(node.getbestblockhash(), 16)\n+        height = best_block[\"height\"] + 1\n+        block_time = best_block[\"time\"] + 1\n \n         # Use merkle-root malleability to generate an invalid block with\n         # same blockheader.\n         # Manufacture a block with 3 transactions (coinbase, spend of prior\n         # coinbase, spend of that spend).  Duplicate the 3rd transaction to\n         # leave merkle root and blockheader unchanged but invalidate the block.\n         self.log.info(\"Test merkle root malleability.\")\n-        block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+\n+        block2 = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n \n         # b'0x51' is OP_TRUE\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x51', 50 * COIN)\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x51', 50 * COIN)\n         tx2 = create_transaction(tx1, 0, b'\\x51', 50 * COIN)\n \n         block2.vtx.extend([tx1, tx2])\n@@ -88,23 +82,20 @@ def get_tests(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        self.tip = block2.sha256\n-        yield TestInstance([[block2, RejectResult(16, b'bad-txns-duplicate')], [block2_orig, True]])\n-        height += 1\n+        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n \n         self.log.info(\"Test very broken block.\")\n \n-        block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block3 = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block3.vtx[0].vout[0].nValue = 100 * COIN  # Too high!\n         block3.vtx[0].sha256 = None\n         block3.vtx[0].calc_sha256()\n         block3.hashMerkleRoot = block3.calc_merkle_root()\n         block3.rehash()\n         block3.solve()\n \n-        yield TestInstance([[block3, RejectResult(16, b'bad-cb-amount')]])\n-\n+        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  }
]