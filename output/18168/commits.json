[
  {
    "sha": "aff2748f8aee72f03b5fb6f6f97f0d0f66391755",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmYyNzQ4ZjhhZWU3MmYwM2I1ZmI2ZjZmOTdmMGQwZjY2MzkxNzU1",
    "commit": {
      "author": {
        "name": "Filip Gospodinov",
        "email": "f@gospodinov.ch",
        "date": "2020-02-18T07:29:35Z"
      },
      "committer": {
        "name": "Filip Gospodinov",
        "email": "f@gospodinov.ch",
        "date": "2020-02-18T07:29:35Z"
      },
      "message": "httpserver: use own HTTP status codes\n\nBefore, macros defined in `<event2/http.h>` have been used\nfor some HTTP status codes.\n`<event2/http.h>` is included implicitly and the usage\nof its status code macros is inconsistent with the majority\nHTTP response implementations in this file.\n\nNow, the `HTTPStatusCode` enum from `<rpc/protocol.h>` is\nconsistently used for all HTTP response implementations.",
      "tree": {
        "sha": "257f16f03f1ea0d4450c069468c1a583db927301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/257f16f03f1ea0d4450c069468c1a583db927301"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aff2748f8aee72f03b5fb6f6f97f0d0f66391755",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff2748f8aee72f03b5fb6f6f97f0d0f66391755",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aff2748f8aee72f03b5fb6f6f97f0d0f66391755",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff2748f8aee72f03b5fb6f6f97f0d0f66391755/comments",
    "author": {
      "login": "toxeus",
      "id": 7702854,
      "node_id": "MDQ6VXNlcjc3MDI4NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7702854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toxeus",
      "html_url": "https://github.com/toxeus",
      "followers_url": "https://api.github.com/users/toxeus/followers",
      "following_url": "https://api.github.com/users/toxeus/following{/other_user}",
      "gists_url": "https://api.github.com/users/toxeus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toxeus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toxeus/subscriptions",
      "organizations_url": "https://api.github.com/users/toxeus/orgs",
      "repos_url": "https://api.github.com/users/toxeus/repos",
      "events_url": "https://api.github.com/users/toxeus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toxeus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "toxeus",
      "id": 7702854,
      "node_id": "MDQ6VXNlcjc3MDI4NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7702854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toxeus",
      "html_url": "https://github.com/toxeus",
      "followers_url": "https://api.github.com/users/toxeus/followers",
      "following_url": "https://api.github.com/users/toxeus/following{/other_user}",
      "gists_url": "https://api.github.com/users/toxeus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toxeus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toxeus/subscriptions",
      "organizations_url": "https://api.github.com/users/toxeus/orgs",
      "repos_url": "https://api.github.com/users/toxeus/repos",
      "events_url": "https://api.github.com/users/toxeus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toxeus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f42e1bf43f2c9f3b4642814051cedf66f05a5e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "11d73b7c9a422130359ef42488e587507621e03a",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aff2748f8aee72f03b5fb6f6f97f0d0f66391755/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aff2748f8aee72f03b5fb6f6f97f0d0f66391755/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=aff2748f8aee72f03b5fb6f6f97f0d0f66391755",
        "patch": "@@ -236,7 +236,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n         LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Unknown HTTP request method\\n\",\n                  hreq->GetPeer().ToString());\n-        hreq->WriteReply(HTTP_BADMETHOD);\n+        hreq->WriteReply(HTTP_BAD_METHOD);\n         return;\n     }\n \n@@ -268,10 +268,10 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n             item.release(); /* if true, queue took ownership */\n         else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n-            item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+            item->req->WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Work queue depth exceeded\");\n         }\n     } else {\n-        hreq->WriteReply(HTTP_NOTFOUND);\n+        hreq->WriteReply(HTTP_NOT_FOUND);\n     }\n }\n \n@@ -519,7 +519,7 @@ HTTPRequest::~HTTPRequest()\n     if (!replySent) {\n         // Keep track of whether reply was sent to avoid request leaks\n         LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL, \"Unhandled request\");\n+        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n     }\n     // evhttpd cleans up the request, as long as a reply was sent.\n }"
      }
    ]
  }
]