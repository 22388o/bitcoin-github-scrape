[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635101579",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-635101579",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 635101579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTEwMTU3OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-28T05:00:51Z",
    "updated_at": "2020-06-04T23:13:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19168 (Refactor: Improve setup_clean_chain semantics by fjahr)\n* #18788 (wallet: tests: Update more tests to work with descriptor wallets by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635101579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639956650",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-639956650",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 639956650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTk1NjY1MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-06T02:09:34Z",
    "updated_at": "2020-06-06T02:09:34Z",
    "author_association": "MEMBER",
    "body": "nit: commit f78730d582c605882e5a3bf554aefb1a92942b0e can be done as a scripted diff, but no big deal",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639956650/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640254282",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-640254282",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 640254282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDI1NDI4Mg==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-07T17:44:55Z",
    "updated_at": "2020-06-07T17:46:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Resolves #18473 . Ready for Review again!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640254282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642155460",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-642155460",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 642155460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE1NTQ2MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-10T17:34:59Z",
    "updated_at": "2020-06-10T17:35:18Z",
    "author_association": "MEMBER",
    "body": "ACK dca73941eb only changes is restoring accidentally deleted test \ud83c\udf6e\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK dca73941eb only changes is restoring accidentally deleted test \ud83c\udf6e\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUg6PAv/ROMdaabZoFQqsrL/+8J/dZZQXJsUGSiG2TpTQibWFyPSlvgYeDe5raf6\r\nyTa139/BqIY8ZsoiMsW7dwHtx3sJQ4bEkL53nECP5OaFS3wdK+6DoddSW4n/Vdm0\r\nF3/Wz01/x2tYg8hXP4jpoaBN1KcJpbDtrp+hk4UuOu2Yrwxm7sT1uJi8Gl5g8cRc\r\nwKPFldxOR/NvB2WjDWGHwda3WSN9ylEa66XYjXCm3dVi0cL4rfsVy6pudL4yVmh8\r\nsuygyKj15vWTmJz4NRsWnTisIRBXcIen/gNvNKl8bEfNU1BUeThziey/6i/zszq6\r\nDP51JOUSOGCEZqZsK6vcaflUz6GRIGkBQXQ/mC4DrtNJHakn0wSLZ+gO2UKuIKdU\r\nr6NnqvNSrNFWkc2l1tfmxovGnkZQ2iwu98Mo/X8hs7SCshvcVsDLvhhDecxB61Z6\r\ntsnwdSR8EBZrMkGWUYjzG6BAsnV/hQpLErFuthJTzEDdmyoO2eWAYk+R3+5Uszrl\r\neuwfkY0A\r\n=debF\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `70bc0be0f61503b76003fe460f747227c9eb065aff2dd334d2640b7467d69650  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010870bc0be0f61503b76003fe460f747227c9eb065aff2dd334d2640b7467d69650f010d86cdabbffb2d69a50e81830afcfae6808fff0100752b650538d4cb326c8c799a4342aec08f1045ee119cbf00860615e0f6b3e3b370083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01031cffb0a65c7230f55778c445d96420f08f1045ee119caf00897413da488d267820083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010aa2f5feacecdea1f79861a2139b61cd908f1045ee119caf008990446e6614ffb890083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010e5e8f83eb5af389be2f72241d0eee76508f1045ee119cbf00842bffc2d3b73a8eb0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642155460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642158062",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-642158062",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 642158062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE1ODA2Mg==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-10T17:40:14Z",
    "updated_at": "2020-06-10T17:40:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the thorough review @MarcoFalke \ud83d\ude4f , greatly appreciated.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642158062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642704786",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-642704786",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 642704786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjcwNDc4Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T14:44:05Z",
    "updated_at": "2020-06-11T14:44:05Z",
    "author_association": "MEMBER",
    "body": "With two ACKs, this test change seems ready to merge. @gzhao408 Let me know if you want to address the feedback or want to leave it as is for now (for potential follow-ups) and have the pull request merged.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642704786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642845541",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#issuecomment-642845541",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19083",
    "id": 642845541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjg0NTU0MQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T18:05:59Z",
    "updated_at": "2020-06-11T18:05:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the review @jonatack \ud83d\ude4f ! \r\nI've made a followup #19252 for `disconnect_p2ps` to wait for disconnect to complete anyway, so I can easily incorporate the feedback there. @MarcoFalke green light to merge :) thanks",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642845541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432978430",
    "pull_request_review_id": 421522894,
    "id": 432978430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3ODQzMA==",
    "diff_hunk": "@@ -51,6 +56,21 @@ def on_merkleblock(self, message):\n     def on_tx(self, message):\n         self.tx_received = True\n \n+class FilterNodeFRelay(FilterNode):\n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 22,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "e692c3cdd1e56ef6780bc43058f9321085f5a9de",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you can remove the `services` and `send_version` arguments, and just set them directly below (this function is only ever called once, and you know what `services` and `send_version` should be set to.",
    "created_at": "2020-05-31T19:52:25Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r432978430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432978430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r432978430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432978430/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432986314",
    "pull_request_review_id": 421529378,
    "id": 432986314,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NjMxNA==",
    "diff_hunk": "@@ -51,6 +56,21 @@ def on_merkleblock(self, message):\n     def on_tx(self, message):\n         self.tx_received = True\n \n+class FilterNodeFRelay(FilterNode):\n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+        create_conn = P2PConnection.peer_connect(self, *args, **kwargs)\n+\n+        if send_version:\n+            # Send a version msg\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            vt.nRelay = 0 # default = 1\n+            self.on_connection_send_msg = vt  # Will be sent soon after connection_made\n+        return create_conn",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 35,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "e692c3cdd1e56ef6780bc43058f9321085f5a9de",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there any reason to overwrite this at all? The whole overwrite with the `on_connection_send_msg` magic is a bit of a mental load. I believe this can simply be a `FilterNode`, where you set `send_version=False` and then `send_message(version_without_nRelay)` and then `wait_for_verack()`.\r\n\r\nOverall it should be less complex and less lines of code",
    "created_at": "2020-05-31T21:32:54Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r432986314",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432986314"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r432986314"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432986314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434130754",
    "pull_request_review_id": 422999172,
    "id": 434130754,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMDc1NA==",
    "diff_hunk": "@@ -51,6 +56,21 @@ def on_merkleblock(self, message):\n     def on_tx(self, message):\n         self.tx_received = True\n \n+class FilterNodeFRelay(FilterNode):\n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+        create_conn = P2PConnection.peer_connect(self, *args, **kwargs)\n+\n+        if send_version:\n+            # Send a version msg\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            vt.nRelay = 0 # default = 1\n+            self.on_connection_send_msg = vt  # Will be sent soon after connection_made\n+        return create_conn",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 35,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "e692c3cdd1e56ef6780bc43058f9321085f5a9de",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops - had a big hole in my knowledge. You're right that was way too complicated \ud83e\udd26\u200d\u2640\ufe0f . How does this look:\r\n```py\r\nclass FilterNode(P2PInterface):\r\n    def __init__(self, fRelay=True):\r\n        super().__init__()\r\n        if fRelay == False:\r\n            version_without_nRelay = msg_version()\r\n            version_without_nRelay.nRelay = 0\r\n            self.on_connection_send_msg = version_without_nRelay\r\n```\r\nI'm still not 100% clear on how connection works under the hood, but setting `self.on_connection_send_msg` feels correct since it's handled in the `connection_made` callback - otherwise I need to somehow wait for connection to be established before using `send_message` directly.",
    "created_at": "2020-06-02T19:37:32Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r434130754",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434130754"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r434130754"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434130754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 432986314
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434160361",
    "pull_request_review_id": 423038066,
    "id": 434160361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDM2MQ==",
    "diff_hunk": "@@ -51,6 +56,21 @@ def on_merkleblock(self, message):\n     def on_tx(self, message):\n         self.tx_received = True\n \n+class FilterNodeFRelay(FilterNode):\n+    def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n+        create_conn = P2PConnection.peer_connect(self, *args, **kwargs)\n+\n+        if send_version:\n+            # Send a version msg\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            vt.nRelay = 0 # default = 1\n+            self.on_connection_send_msg = vt  # Will be sent soon after connection_made\n+        return create_conn",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 35,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "e692c3cdd1e56ef6780bc43058f9321085f5a9de",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When I added `on_connection_send_msg` it was meant to be a \"private\" member. Obviously in python there is no \"private\", so discount my point by that.\r\n\r\nI think either is fine. Your solution with the `on_connection_send_msg` or something along the lines of:\r\n\r\n```\r\np2p = create_connection(bla)\r\np2p.wait_until(p2p.is_connected)\r\np2p.send_message(ver)\r\np2p.wait_for_verack()",
    "created_at": "2020-06-02T20:36:15Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r434160361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434160361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r434160361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434160361/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 432986314
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435227279",
    "pull_request_review_id": 424406698,
    "id": 435227279,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNzI3OQ==",
    "diff_hunk": "@@ -51,7 +61,6 @@ def on_merkleblock(self, message):\n     def on_tx(self, message):\n         self.tx_received = True\n \n-",
    "path": "test/functional/p2p_filter.py",
    "position": 61,
    "original_position": 32,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "951442335bdfb18f3f4dc4cf3ee2e5d5add8a775",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "style-nit (feel free to ignore): I think pep-8 says two new lines before `class`",
    "created_at": "2020-06-04T12:50:21Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435227279",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435227279"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435227279"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435227279/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 54,
    "original_line": 54,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435230233",
    "pull_request_review_id": 424406698,
    "id": 435230233,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMDIzMw==",
    "diff_hunk": "@@ -34,6 +37,13 @@ class FilterNode(P2PInterface):\n         nFlags=1,\n     )\n \n+    def __init__(self, fRelay=True):\n+        super().__init__()\n+        if fRelay == False:\n+            version_without_nRelay = msg_version()\n+            version_without_nRelay.nRelay = 0\n+            self.on_connection_send_msg = version_without_nRelay",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 23,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "951442335bdfb18f3f4dc4cf3ee2e5d5add8a775",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How does this work? Isn't `peer_connect` called *after* init, in which case `on_connection_send_msg` would be overwritten?",
    "created_at": "2020-06-04T12:55:08Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435230233",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435230233"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435230233"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435230233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435356224",
    "pull_request_review_id": 424580848,
    "id": 435356224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1NjIyNA==",
    "diff_hunk": "@@ -34,6 +37,13 @@ class FilterNode(P2PInterface):\n         nFlags=1,\n     )\n \n+    def __init__(self, fRelay=True):\n+        super().__init__()\n+        if fRelay == False:\n+            version_without_nRelay = msg_version()\n+            version_without_nRelay.nRelay = 0\n+            self.on_connection_send_msg = version_without_nRelay",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 23,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "951442335bdfb18f3f4dc4cf3ee2e5d5add8a775",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Aw shoot, just fixed using `send_version=False` and then manually sending it after connection is established. Asserting `relaytxes=False` so it should be set correctly now.",
    "created_at": "2020-06-04T15:38:22Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435356224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435356224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435356224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435356224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 435230233
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435365394",
    "pull_request_review_id": 424592023,
    "id": 435365394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTM5NA==",
    "diff_hunk": "@@ -125,8 +153,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 58,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any time we access members of a `P2PInterface` or derived class, we should be taking the `mininode_lock`, otherwise there's the possibility of a data race between the main test logic thread and the network event loop. I think the easiest would be to define some getters on the `FilterNode` class that take the lock and then return the attribute value.",
    "created_at": "2020-06-04T15:50:47Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435365394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435365394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435365394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435365394/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 156,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435370818",
    "pull_request_review_id": 424592023,
    "id": 435370818,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MDgxOA==",
    "diff_hunk": "@@ -125,8 +153,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 58,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In fact, I think this whole part of the test is not actually testing the mempool message (which is obvious, since it was passing even before you added the line to send the mempool message). Since you're now testing the mempool message correctly in `test_msg_mempool()`, I think you can just erase this block.",
    "created_at": "2020-06-04T15:58:20Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435370818",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435370818"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435370818"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435370818/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 156,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435633618",
    "pull_request_review_id": 424592023,
    "id": 435633618,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzYxOA==",
    "diff_hunk": "@@ -153,6 +184,33 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 71,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: one style point that I've tried to move the tests away from is referring to connections as \"nodes\". A node is a bitcoind instance that we're testing. A p2p connection is a test structure used to interact with the node. Using the word _node_ for both the node and connections to it is confusing.",
    "created_at": "2020-06-05T00:52:35Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435633618",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435633618"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435633618"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435633618/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 188,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435634793",
    "pull_request_review_id": 424592023,
    "id": 435634793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDc5Mw==",
    "diff_hunk": "@@ -93,11 +96,36 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_node = FilterNode()\n+        filter_node.tx_received = False\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Create a tx relevant to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_node)\n+        filter_node.send_and_ping(filter_node.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.tx_received\n+\n+    def test_frelay_false(self, filter_node):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_node doesn't receive the tx isn't due to p2p delays\n+        filter_node.sync_with_ping()\n+        assert not filter_node.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n \n+    def test_filter(self, filter_node):\n         self.log.info('Add filtered P2P connection to the node')",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 51,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This log seems in the wrong place. The connection has already been created earlier.",
    "created_at": "2020-06-05T00:57:38Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435634793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435634793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435634793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435634793/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 129,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435638997",
    "pull_request_review_id": 424935780,
    "id": 435638997,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODk5Nw==",
    "diff_hunk": "@@ -125,8 +153,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 58,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "True, I had considered just changing the log message (since it didn't seem entirely correct) but I wasn't really sure what it should be. It looks like @MarcoFalke wrote this test, I'm wondering what he would have in mind?",
    "created_at": "2020-06-05T01:14:58Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435638997",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435638997"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435638997"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435638997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 156,
    "side": "RIGHT",
    "in_reply_to_id": 435370818
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435639882",
    "pull_request_review_id": 424936866,
    "id": 435639882,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTg4Mg==",
    "diff_hunk": "@@ -125,8 +153,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 58,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. I'm thinking a getter and a setter: `get_tx_received`, `reset_tx_received` (to False), and for `merkleblock_received` as well? Shall I change the rest of the test too since it uses these throughout?",
    "created_at": "2020-06-05T01:18:51Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435639882",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435639882"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435639882"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435639882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 156,
    "side": "RIGHT",
    "in_reply_to_id": 435365394
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435991790",
    "pull_request_review_id": 425395549,
    "id": 435991790,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTc5MA==",
    "diff_hunk": "@@ -125,8 +153,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 58,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Shall I change the rest of the test too since it uses these throughout?\r\n\r\nIf you want to, that'd be great! There are lots of data races in this test where the test logic thread and the p2p handler thread can be accessing the same memory.\r\n\r\nTake a look at Python properties: https://docs.python.org/3/library/functions.html#property. By implementing a getter/setter using properties, you don't need to change the client code from `assert not filter_node.tx_received` to `assert not filter_node.get_tx_received()`.\r\n\r\nBe careful not to use the setter for the `on_xxxx()`, methods, which already have the lock when called. It's better to make the locks non-reentrant if possible (see https://github.com/bitcoin/bitcoin/pull/19178)",
    "created_at": "2020-06-05T15:19:44Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435991790",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435991790"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r435991790"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435991790/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 156,
    "side": "RIGHT",
    "in_reply_to_id": 435365394
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436194736",
    "pull_request_review_id": 425665965,
    "id": 436194736,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NDczNg==",
    "diff_hunk": "@@ -153,6 +184,33 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 71,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "72672bc5a3435c22890dcec245097a2e3c5a52ba",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Noted! Renaming all of them increases the number of lines in the diff by a lot, so I put renames for existing code in a separate commit.",
    "created_at": "2020-06-05T22:38:38Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436194736",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436194736"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436194736"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436194736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 188,
    "side": "RIGHT",
    "in_reply_to_id": 435633618
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436200326",
    "pull_request_review_id": 425672605,
    "id": 436200326,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDMyNg==",
    "diff_hunk": "@@ -64,95 +92,140 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = P2PBloomFilter()\n+        filter_peer.tx_received = False\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        filter_peer.tx_received = False\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()",
    "path": "test/functional/p2p_filter.py",
    "position": 167,
    "original_position": 168,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "f78730d582c605882e5a3bf554aefb1a92942b0e",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Weird that there are two `sync_with_ping`s here. @MarcoFalke would it be correct for me to remove one (since I'm touching the lines anyway)? From what I understand, one `sync_with_ping` is enough to ensure that the messages were sent and processed, and we'll be grabbing `mininode_lock` when we check the `*_received` values.",
    "created_at": "2020-06-05T23:03:03Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436200326",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436200326"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436200326"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436200326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436211479",
    "pull_request_review_id": 425685087,
    "id": 436211479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMTQ3OQ==",
    "diff_hunk": "@@ -64,95 +92,140 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = P2PBloomFilter()\n+        filter_peer.tx_received = False\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        filter_peer.tx_received = False\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()",
    "path": "test/functional/p2p_filter.py",
    "position": 167,
    "original_position": 168,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "f78730d582c605882e5a3bf554aefb1a92942b0e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There are no messages sent at all, so using `sync_with_ping` is odd, but I didn't know what else to use.\r\n\r\n* The first sync_with_ping is needed for any imaginary invs on the wire (from `SendMessages`) to be flushed to the filter peer\r\n* The seconds one is needed for our imaginary getdata (in reply to the imaginary inv) to be flushed to the node (and to be processed)",
    "created_at": "2020-06-06T00:02:59Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436211479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436211479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436211479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436211479/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "LEFT",
    "in_reply_to_id": 436200326
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436380927",
    "pull_request_review_id": 425835414,
    "id": 436380927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MDkyNw==",
    "diff_hunk": "@@ -64,95 +92,140 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = P2PBloomFilter()\n+        filter_peer.tx_received = False\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        filter_peer.tx_received = False\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()",
    "path": "test/functional/p2p_filter.py",
    "position": 167,
    "original_position": 168,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "f78730d582c605882e5a3bf554aefb1a92942b0e",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ohh I see what you mean. If only 1 is sent, the order could be:\r\n\r\n1. send `ping`\r\n2. receive `inv`, send `getdata`\r\n3. receive `pong`, can move on\r\n5. assert not received\r\n6. receive data (too late)\r\n\r\nWith 2, it has to be:\r\n1. send `ping1`\r\n2. receive `inv`, send `getdata`\r\n3. receive `pong1`, send `ping2`\r\n4. any response to `getdata` must be received before `pong2`\r\n5. assert\r\n\r\nIs this correct?",
    "created_at": "2020-06-07T16:44:42Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436380927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436380927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436380927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436380927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "LEFT",
    "in_reply_to_id": 436200326
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436381172",
    "pull_request_review_id": 425835625,
    "id": 436381172,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MTE3Mg==",
    "diff_hunk": "@@ -64,95 +92,140 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = P2PBloomFilter()\n+        filter_peer.tx_received = False\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        filter_peer.tx_received = False\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()",
    "path": "test/functional/p2p_filter.py",
    "position": 167,
    "original_position": 168,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "f78730d582c605882e5a3bf554aefb1a92942b0e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Jup, that's the idea",
    "created_at": "2020-06-07T16:47:31Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436381172",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436381172"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r436381172"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436381172/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 121,
    "original_line": 121,
    "side": "LEFT",
    "in_reply_to_id": 436200326
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437373663",
    "pull_request_review_id": 427091099,
    "id": 437373663,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MzY2Mw==",
    "diff_hunk": "@@ -93,6 +94,23 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = FilterNode()\n+        filter_peer.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 16,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit 75865b28a0:\r\n\r\n```suggestion\r\n```\r\n\r\nI think tx_received  can be removed from this test, as it is redundant to `wait_for_tx`, no?",
    "created_at": "2020-06-09T12:30:39Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437373663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437373663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437373663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437373663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437377885",
    "pull_request_review_id": 427091099,
    "id": 437377885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3Nzg4NQ==",
    "diff_hunk": "@@ -125,8 +143,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 34,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same commit:\r\n\r\nThis comment is obviously wrong (`git blame myself`)\r\n\r\n```suggestion\r\n        self.log.info('Check that we receive a tx if the filter matches a mempool tx')\r\n```",
    "created_at": "2020-06-09T12:36:08Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437377885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437377885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437377885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437377885/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 144,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437378399",
    "pull_request_review_id": 427091099,
    "id": 437378399,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3ODM5OQ==",
    "diff_hunk": "@@ -125,8 +143,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+        self.nodes[0].p2p.send_message(msg_mempool())",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "So this change needs to go",
    "created_at": "2020-06-09T12:37:03Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437378399",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437378399"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437378399"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437378399/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 148,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437379473",
    "pull_request_review_id": 427091099,
    "id": 437379473,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3OTQ3Mw==",
    "diff_hunk": "@@ -93,6 +94,23 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 14,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same commit:\r\n\r\nI have a slight preference that tests clean up after themselves, and not after other tests. So this should be moved to the end of the subtest that created the peer connection.",
    "created_at": "2020-06-09T12:38:58Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437379473",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437379473"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437379473"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437379473/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 99,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437383989",
    "pull_request_review_id": 427091099,
    "id": 437383989,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4Mzk4OQ==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 48,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit 5f0dd129a0:\r\n\r\nIt seems a burden on tests to call this to avoid races. It might be easy to forget and races might only appear long after the test has been written and merged. It seems less fragile to move this wait into the disconnect helper.",
    "created_at": "2020-06-09T12:46:18Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437383989",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437383989"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437383989"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437383989/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437384935",
    "pull_request_review_id": 427091099,
    "id": 437384935,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NDkzNQ==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')\n+        # Add peer but do not send version yet\n+        filter_peer_without_nrelay = self.nodes[0].add_p2p_connection(FilterNode(), send_version=False, wait_for_verack=False)\n+        # Send version with fRelay=False\n+        filter_peer_without_nrelay.wait_until(lambda: filter_peer_without_nrelay.is_connected, timeout=10)\n+        version_without_fRelay = msg_version()\n+        version_without_fRelay.nRelay = 0\n+        filter_peer_without_nrelay.send_message(version_without_fRelay)\n+        filter_peer_without_nrelay.wait_for_verack()\n+        assert not self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        self.test_frelay_false(filter_peer_without_nrelay)\n+        self.test_filter(filter_peer_without_nrelay)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 63,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "same",
    "created_at": "2020-06-09T12:47:52Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437384935",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437384935"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437384935"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437384935/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 210,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437385849",
    "pull_request_review_id": 427091099,
    "id": 437385849,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NTg0OQ==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')\n+        # Add peer but do not send version yet\n+        filter_peer_without_nrelay = self.nodes[0].add_p2p_connection(FilterNode(), send_version=False, wait_for_verack=False)\n+        # Send version with fRelay=False\n+        filter_peer_without_nrelay.wait_until(lambda: filter_peer_without_nrelay.is_connected, timeout=10)\n+        version_without_fRelay = msg_version()\n+        version_without_fRelay.nRelay = 0\n+        filter_peer_without_nrelay.send_message(version_without_fRelay)\n+        filter_peer_without_nrelay.wait_for_verack()\n+        assert not self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        self.test_frelay_false(filter_peer_without_nrelay)\n+        self.test_filter(filter_peer_without_nrelay)",
    "path": "test/functional/p2p_filter.py",
    "position": 242,
    "original_position": 61,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same commit: Could add `assert self.nodes[0].getpeerinfo()[0]['relaytxes']` after this line?",
    "created_at": "2020-06-09T12:49:25Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437385849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437385849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437385849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437385849/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 228,
    "original_line": 228,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804053",
    "pull_request_review_id": 427644447,
    "id": 437804053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwNDA1Mw==",
    "diff_hunk": "@@ -93,6 +94,23 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        self.nodes[0].disconnect_p2ps()\n+        filter_peer = FilterNode()\n+        filter_peer.tx_received = False",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 16,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Er, do you mean because it's already set to False in the constructor? I removed it for this reason, thanks for bringing it to my attention.\r\nI don't think we can remove `tx_received` because we sometimes want to assert that we didn't receive a tx with it.",
    "created_at": "2020-06-10T01:06:31Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 437373663
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804266",
    "pull_request_review_id": 427644715,
    "id": 437804266,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwNDI2Ng==",
    "diff_hunk": "@@ -125,8 +143,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n         filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+        self.nodes[0].p2p.send_message(msg_mempool())",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I removed it altogether, since receiving tx behavior for this reason is already tested and `msg_mempool` is added.",
    "created_at": "2020-06-10T01:07:23Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804266",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804266"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804266"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 148,
    "side": "RIGHT",
    "in_reply_to_id": 437378399
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804515",
    "pull_request_review_id": 427645011,
    "id": 437804515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwNDUxNQ==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')\n+        # Add peer but do not send version yet\n+        filter_peer_without_nrelay = self.nodes[0].add_p2p_connection(FilterNode(), send_version=False, wait_for_verack=False)\n+        # Send version with fRelay=False\n+        filter_peer_without_nrelay.wait_until(lambda: filter_peer_without_nrelay.is_connected, timeout=10)\n+        version_without_fRelay = msg_version()\n+        version_without_fRelay.nRelay = 0\n+        filter_peer_without_nrelay.send_message(version_without_fRelay)\n+        filter_peer_without_nrelay.wait_for_verack()\n+        assert not self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        self.test_frelay_false(filter_peer_without_nrelay)\n+        self.test_filter(filter_peer_without_nrelay)",
    "path": "test/functional/p2p_filter.py",
    "position": 242,
    "original_position": 61,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added it right after it should be set to True after the `filterload` message in `test_filter`.",
    "created_at": "2020-06-10T01:08:18Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437804515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437804515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 228,
    "original_line": 228,
    "side": "RIGHT",
    "in_reply_to_id": 437385849
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437823900",
    "pull_request_review_id": 427667668,
    "id": 437823900,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzkwMA==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 48,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Uh oh... I naively added a `wait_until(lambda: len(self.getpeerinfo()) == 0)` but `getpeerinfo` gets both p2p connections and connected nodes. I need to figure out a better way to do this.",
    "created_at": "2020-06-10T02:24:48Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437823900",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437823900"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r437823900"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437823900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 437383989
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438048919",
    "pull_request_review_id": 427956453,
    "id": 438048919,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODkxOQ==",
    "diff_hunk": "@@ -93,6 +94,21 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = FilterNode()\n+\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 25,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit in commit facd5f9765:\r\n\r\nThis assert is not needed. A stronger assert was checked in the previous line, no?",
    "created_at": "2020-06-10T11:22:12Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438048919",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438048919"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438048919"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438048919/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438049526",
    "pull_request_review_id": 427956453,
    "id": 438049526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTUyNg==",
    "diff_hunk": "@@ -125,8 +143,11 @@ def run_test(self):\n \n         self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 34,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "75865b28a0a274878077eb0dcf008a0457085e3a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unrelated nit in commit facd5f9765:\r\n\r\nHas this comment been fixed?",
    "created_at": "2020-06-10T11:23:21Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438049526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438049526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438049526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438049526/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 144,
    "side": "RIGHT",
    "in_reply_to_id": 437377885
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438050713",
    "pull_request_review_id": 427958767,
    "id": 438050713,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MDcxMw==",
    "diff_hunk": "@@ -123,12 +139,6 @@ def run_test(self):\n         assert not filter_node.merkleblock_received\n         assert not filter_node.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received",
    "path": "test/functional/p2p_filter.py",
    "position": 182,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "facd5f9765 why is this test removed?",
    "created_at": "2020-06-10T11:25:50Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438050713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438050713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438050713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438050713/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438052347",
    "pull_request_review_id": 427958767,
    "id": 438052347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjM0Nw==",
    "diff_hunk": "@@ -109,13 +110,23 @@ def test_msg_mempool(self):\n         filter_peer.wait_for_tx(txid)\n         assert filter_peer.tx_received\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n \n-        self.test_size_limits(filter_node)\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n \n-        self.log.info('Add filtered P2P connection to the node')\n+    def test_filter(self, filter_node, frelay=False):\n+        # Set the bloomfilter using filterload\n         filter_node.send_and_ping(filter_node.watch_filter_init)\n+        if frelay == False:",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 30,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "27f3cac34ea62f95126030c428164a7980a912d9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in 27f3cac34e\r\n\r\nwhy is this guard needed?",
    "created_at": "2020-06-10T11:29:10Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438052347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438052347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438052347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438052347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 127,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438143534",
    "pull_request_review_id": 428081444,
    "id": 438143534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzUzNA==",
    "diff_hunk": "@@ -109,13 +110,23 @@ def test_msg_mempool(self):\n         filter_peer.wait_for_tx(txid)\n         assert filter_peer.tx_received\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n \n-        self.test_size_limits(filter_node)\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n \n-        self.log.info('Add filtered P2P connection to the node')\n+    def test_filter(self, filter_node, frelay=False):\n+        # Set the bloomfilter using filterload\n         filter_node.send_and_ping(filter_node.watch_filter_init)\n+        if frelay == False:",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 30,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "27f3cac34ea62f95126030c428164a7980a912d9",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not really needed, but I didn't think the assertion was relevant to the case where `fRelay=True` because it doesn't change after `filterload`. I could take it out.",
    "created_at": "2020-06-10T13:58:31Z",
    "updated_at": "2020-06-10T15:41:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438143534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438143534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438143534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438143534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 127,
    "side": "RIGHT",
    "in_reply_to_id": 438052347
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223192",
    "pull_request_review_id": 428187461,
    "id": 438223192,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMzE5Mg==",
    "diff_hunk": "@@ -109,13 +110,23 @@ def test_msg_mempool(self):\n         filter_peer.wait_for_tx(txid)\n         assert filter_peer.tx_received\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n \n-        self.test_size_limits(filter_node)\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n \n-        self.log.info('Add filtered P2P connection to the node')\n+    def test_filter(self, filter_node, frelay=False):\n+        # Set the bloomfilter using filterload\n         filter_node.send_and_ping(filter_node.watch_filter_init)\n+        if frelay == False:",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 30,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "27f3cac34ea62f95126030c428164a7980a912d9",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed the conditional and replaced log with comment.",
    "created_at": "2020-06-10T15:41:54Z",
    "updated_at": "2020-06-10T15:41:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438223192",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223192"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438223192"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 127,
    "side": "RIGHT",
    "in_reply_to_id": 438052347
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223968",
    "pull_request_review_id": 428188506,
    "id": 438223968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMzk2OA==",
    "diff_hunk": "@@ -123,12 +139,6 @@ def run_test(self):\n         assert not filter_node.merkleblock_received\n         assert not filter_node.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received",
    "path": "test/functional/p2p_filter.py",
    "position": 182,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I had thought it was already tested, my apologies. I just changed the log message and left the test as-is.",
    "created_at": "2020-06-10T15:43:00Z",
    "updated_at": "2020-06-10T15:43:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438223968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438223968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438223968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "LEFT",
    "in_reply_to_id": 438050713
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438225888",
    "pull_request_review_id": 428191134,
    "id": 438225888,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNTg4OA==",
    "diff_hunk": "@@ -93,6 +94,21 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = FilterNode()\n+\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 25,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah yes! All of them should be either `wait_for_*` or `assert not *_received` now.\r\nAnd every `*_received = False` is accompanied by an `assert not *_received` later.",
    "created_at": "2020-06-10T15:45:46Z",
    "updated_at": "2020-06-10T15:45:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438225888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438225888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438225888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438225888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT",
    "in_reply_to_id": 438048919
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438232127",
    "pull_request_review_id": 428199681,
    "id": 438232127,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMjEyNw==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 48,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An idea is to wait until `len(self.getpeerinfo())` decreases by `len(self.p2ps)` but that doesn't seem completely safe",
    "created_at": "2020-06-10T15:54:50Z",
    "updated_at": "2020-06-10T15:54:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438232127",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438232127"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438232127"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438232127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 437383989
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438272760",
    "pull_request_review_id": 428252485,
    "id": 438272760,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3Mjc2MA==",
    "diff_hunk": "@@ -123,12 +139,6 @@ def run_test(self):\n         assert not filter_node.merkleblock_received\n         assert not filter_node.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received",
    "path": "test/functional/p2p_filter.py",
    "position": 182,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe I am missing something obvious, but I couldn't find where this is tested already.",
    "created_at": "2020-06-10T16:55:35Z",
    "updated_at": "2020-06-10T16:55:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438272760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438272760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438272760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438272760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "LEFT",
    "in_reply_to_id": 438050713
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438296974",
    "pull_request_review_id": 428283626,
    "id": 438296974,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5Njk3NA==",
    "diff_hunk": "@@ -109,13 +110,23 @@ def test_msg_mempool(self):\n         filter_peer.wait_for_tx(txid)\n         assert filter_peer.tx_received\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n \n-        self.test_size_limits(filter_node)\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n \n-        self.log.info('Add filtered P2P connection to the node')\n+    def test_filter(self, filter_node, frelay=False):\n+        # Set the bloomfilter using filterload\n         filter_node.send_and_ping(filter_node.watch_filter_init)\n+        if frelay == False:",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 30,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "27f3cac34ea62f95126030c428164a7980a912d9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. This is a now a stronger assertion with less code.",
    "created_at": "2020-06-10T17:36:08Z",
    "updated_at": "2020-06-10T17:36:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438296974",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438296974"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438296974"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438296974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 127,
    "side": "RIGHT",
    "in_reply_to_id": 438052347
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297461",
    "pull_request_review_id": 428284250,
    "id": 438297461,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NzQ2MQ==",
    "diff_hunk": "@@ -93,6 +94,21 @@ def test_size_limits(self, filter_node):\n \n         filter_node.send_and_ping(msg_filterclear())\n \n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = FilterNode()\n+\n+        self.log.info(\"Send a tx to the node before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n+\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+        assert filter_peer.tx_received",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 25,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, that makes the tests similarly structured ",
    "created_at": "2020-06-10T17:36:59Z",
    "updated_at": "2020-06-10T17:36:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438297461",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297461"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438297461"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT",
    "in_reply_to_id": 438048919
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297934",
    "pull_request_review_id": 428284831,
    "id": 438297934,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NzkzNA==",
    "diff_hunk": "@@ -174,6 +184,32 @@ def run_test(self):\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(FilterNode())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)",
    "path": "test/functional/p2p_filter.py",
    "position": null,
    "original_position": 48,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "5f0dd129a01d8c894ced0f71c12030fcd3678863",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "mininodes have a unique user agent, so the assert could be that no peers of this user agent are connected",
    "created_at": "2020-06-10T17:37:47Z",
    "updated_at": "2020-06-10T17:37:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438297934",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297934"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438297934"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438297934/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 437383989
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438298114",
    "pull_request_review_id": 428285033,
    "id": 438298114,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5ODExNA==",
    "diff_hunk": "@@ -123,12 +139,6 @@ def run_test(self):\n         assert not filter_node.merkleblock_received\n         assert not filter_node.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n-        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received",
    "path": "test/functional/p2p_filter.py",
    "position": 182,
    "original_position": 38,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "facd5f9765e0b018ee187e16f088b595adfc12ae",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It wasn't. I had thought it was tested with the first `generatetoaddress` test, but that's a tx in a block, not a tx in mempool.",
    "created_at": "2020-06-10T17:38:07Z",
    "updated_at": "2020-06-10T17:38:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438298114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438298114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438298114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438298114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "LEFT",
    "in_reply_to_id": 438050713
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438818716",
    "pull_request_review_id": 428955784,
    "id": 438818716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODcxNg==",
    "diff_hunk": "@@ -64,95 +91,144 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = P2PBloomFilter()\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Create a tx relevant to the peer before connecting\")",
    "path": "test/functional/p2p_filter.py",
    "position": 112,
    "original_position": 112,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "e8acc60 It looks like these logs lines 127 and 131 are related to the same test as the logging at line 124. Perhaps make them `debug` logs instead of `info` to declutter the ample logging output. (Thanks for putting the test in a separate function as you did.)",
    "created_at": "2020-06-11T14:14:32Z",
    "updated_at": "2020-06-11T14:40:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438818716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438818716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438818716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438818716/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 127,
    "original_line": 127,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438824867",
    "pull_request_review_id": 428955784,
    "id": 438824867,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNDg2Nw==",
    "diff_hunk": "@@ -64,95 +91,144 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = P2PBloomFilter()\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Create a tx relevant to the peer before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_peer.tx_received = False\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        # Set the bloomfilter using filterload\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        # If fRelay is not already True, sending filterload sets it to True\n+        assert self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()\n-        filter_node.sync_with_ping()\n-        assert not filter_node.merkleblock_received\n-        assert not filter_node.tx_received\n+        filter_peer.sync_with_ping()\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.merkleblock_received\n+        assert not filter_peer.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n+        self.log.info('Check that we receive a tx if the filter matches a mempool tx')\n+        filter_peer.merkleblock_received = False\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received\n+        filter_peer.wait_for_tx(txid)\n+        assert not filter_peer.merkleblock_received\n \n         self.log.info('Check that after deleting filter all txs get relayed again')\n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n         for _ in range(5):\n             txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 7)\n-            filter_node.wait_for_tx(txid)\n+            filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that request for filtered blocks is ignored if no filter is set')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         with self.nodes[0].assert_debug_log(expected_msgs=['received getdata']):\n             block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-            filter_node.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n-            filter_node.sync_with_ping()\n-            assert not filter_node.merkleblock_received\n-            assert not filter_node.tx_received\n+            filter_peer.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n+            filter_peer.sync_with_ping()\n+            assert not filter_peer.merkleblock_received\n+            assert not filter_peer.tx_received\n \n         self.log.info('Check that sending \"filteradd\" if no filter is set is treated as misbehavior')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n \n         self.log.info(\"Check that division-by-zero remote crash bug [CVE-2013-5700] is fixed\")\n-        filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n-        filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        filter_peer.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n+        filter_peer.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        self.nodes[0].disconnect_p2ps()\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')\n+        # Add peer but do not send version yet\n+        filter_peer_without_nrelay = self.nodes[0].add_p2p_connection(P2PBloomFilter(), send_version=False, wait_for_verack=False)\n+        # Send version with fRelay=False\n+        filter_peer_without_nrelay.wait_until(lambda: filter_peer_without_nrelay.is_connected, timeout=10)\n+        version_without_fRelay = msg_version()\n+        version_without_fRelay.nRelay = 0\n+        filter_peer_without_nrelay.send_message(version_without_fRelay)\n+        filter_peer_without_nrelay.wait_for_verack()\n+        assert not self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        self.test_frelay_false(filter_peer_without_nrelay)\n+        self.test_filter(filter_peer_without_nrelay)\n+\n+        self.log.info('Test msg_mempool')",
    "path": "test/functional/p2p_filter.py",
    "position": 244,
    "original_position": 244,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "497a6193 Is this logging (or the one at the start of `test_msg_mempool()`) redundant?",
    "created_at": "2020-06-11T14:23:39Z",
    "updated_at": "2020-06-11T14:40:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438824867",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438824867"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438824867"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438824867/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 230,
    "original_line": 230,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438826323",
    "pull_request_review_id": 428955784,
    "id": 438826323,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjMyMw==",
    "diff_hunk": "@@ -64,95 +91,144 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = P2PBloomFilter()\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Create a tx relevant to the peer before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_peer.tx_received = False\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        # Set the bloomfilter using filterload\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        # If fRelay is not already True, sending filterload sets it to True\n+        assert self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()\n-        filter_node.sync_with_ping()\n-        assert not filter_node.merkleblock_received\n-        assert not filter_node.tx_received\n+        filter_peer.sync_with_ping()\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.merkleblock_received\n+        assert not filter_peer.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n+        self.log.info('Check that we receive a tx if the filter matches a mempool tx')\n+        filter_peer.merkleblock_received = False\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received\n+        filter_peer.wait_for_tx(txid)\n+        assert not filter_peer.merkleblock_received\n \n         self.log.info('Check that after deleting filter all txs get relayed again')\n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n         for _ in range(5):\n             txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 7)\n-            filter_node.wait_for_tx(txid)\n+            filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that request for filtered blocks is ignored if no filter is set')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         with self.nodes[0].assert_debug_log(expected_msgs=['received getdata']):\n             block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-            filter_node.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n-            filter_node.sync_with_ping()\n-            assert not filter_node.merkleblock_received\n-            assert not filter_node.tx_received\n+            filter_peer.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n+            filter_peer.sync_with_ping()\n+            assert not filter_peer.merkleblock_received\n+            assert not filter_peer.tx_received\n \n         self.log.info('Check that sending \"filteradd\" if no filter is set is treated as misbehavior')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n \n         self.log.info(\"Check that division-by-zero remote crash bug [CVE-2013-5700] is fixed\")\n-        filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n-        filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        filter_peer.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n+        filter_peer.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        self.nodes[0].disconnect_p2ps()\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')",
    "path": "test/functional/p2p_filter.py",
    "position": 231,
    "original_position": 231,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "497a6193 perhaps put the BIP37 tests into their own function",
    "created_at": "2020-06-11T14:25:43Z",
    "updated_at": "2020-06-11T14:40:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438826323",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438826323"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438826323"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438826323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 217,
    "original_line": 217,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438828981",
    "pull_request_review_id": 428955784,
    "id": 438828981,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyODk4MQ==",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test invalid p2p messages for nodes with bloom filters disabled.\n+\n+Test that, when bloom filters are not enabled, nodes are disconnected if:\n+1. They send a p2p mempool message\n+2. They send a p2p filterload message\n+3. They send a p2p filteradd message\n+\"\"\"\n+\n+from test_framework.messages import msg_mempool, msg_filteradd, msg_filterload\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class P2PNobloomfilterMessages(BitcoinTestFramework):",
    "path": "test/functional/p2p_nobloomfilter_messages.py",
    "position": 19,
    "original_position": 19,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4ef80f0 nit: `P2PNoBloomFilterMessages` (and at the last line)",
    "created_at": "2020-06-11T14:29:21Z",
    "updated_at": "2020-06-11T14:40:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438828981",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438828981"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438828981"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438828981/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 19,
    "original_line": 19,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438830458",
    "pull_request_review_id": 428955784,
    "id": 438830458,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDQ1OA==",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test invalid p2p messages for nodes with bloom filters disabled.\n+\n+Test that, when bloom filters are not enabled, nodes are disconnected if:\n+1. They send a p2p mempool message\n+2. They send a p2p filterload message\n+3. They send a p2p filteradd message\n+\"\"\"\n+\n+from test_framework.messages import msg_mempool, msg_filteradd, msg_filterload\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class P2PNobloomfilterMessages(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-peerbloomfilters=0\"]]\n+\n+    def test_message_causes_disconnect(self, message):\n+        # Add a p2p connection that sends a message and check that it disconnects",
    "path": "test/functional/p2p_nobloomfilter_messages.py",
    "position": 26,
    "original_position": 26,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4ef80f0 nit: this could be a `\"\"\"docstring.\"\"\"`",
    "created_at": "2020-06-11T14:31:15Z",
    "updated_at": "2020-06-11T14:40:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438830458",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438830458"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438830458"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438830458/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 26,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438831818",
    "pull_request_review_id": 428955784,
    "id": 438831818,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMTgxOA==",
    "diff_hunk": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test invalid p2p messages for nodes with bloom filters disabled.\n+\n+Test that, when bloom filters are not enabled, nodes are disconnected if:\n+1. They send a p2p mempool message\n+2. They send a p2p filterload message\n+3. They send a p2p filteradd message\n+\"\"\"\n+\n+from test_framework.messages import msg_mempool, msg_filteradd, msg_filterload\n+from test_framework.mininode import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class P2PNobloomfilterMessages(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-peerbloomfilters=0\"]]\n+\n+    def test_message_causes_disconnect(self, message):\n+        # Add a p2p connection that sends a message and check that it disconnects\n+        peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer.send_message(message)\n+        peer.wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n+\n+    def run_test(self):\n+        self.log.info(\"Test that node is disconnected if it sends mempool message\")\n+        self.test_message_causes_disconnect(msg_mempool())\n+\n+        self.log.info(\"Test that node is disconnected if it sends filterload message\")\n+        self.test_message_causes_disconnect(msg_filterload())\n+\n+        self.log.info(\"Test that node is disconnected if it sends filteradd message\")\n+        self.test_message_causes_disconnect(msg_filteradd(data=b'\\xcc'))\n+",
    "path": "test/functional/p2p_nobloomfilter_messages.py",
    "position": 41,
    "original_position": 41,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4ef80f0 nit: I think PEP8 (or this codebase, not sure which) prefers two lines here at the end before `if __name__ == '__main__':`\r\n\r\nSame in p2p_filter.py in dca73941.",
    "created_at": "2020-06-11T14:33:14Z",
    "updated_at": "2020-06-11T14:42:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438831818",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438831818"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r438831818"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438831818/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 41,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439753704",
    "pull_request_review_id": 430152455,
    "id": 439753704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MzcwNA==",
    "diff_hunk": "@@ -64,95 +91,144 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def test_size_limits(self, filter_node):\n+    def test_size_limits(self, filter_peer):\n         self.log.info('Check that too large filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n         self.log.info('Check that max size filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n-        filter_node.send_and_ping(msg_filterclear())\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_peer.send_and_ping(msg_filterclear())\n \n         self.log.info('Check that filter with too many hash functions is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n \n         self.log.info('Check that filter with max hash functions is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+            filter_peer.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n         # Don't send filterclear until next two filteradd checks are done\n \n         self.log.info('Check that max size data element to add to the filter is accepted')\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n \n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+    def test_msg_mempool(self):\n+        self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n+        filter_peer = P2PBloomFilter()\n \n-        self.test_size_limits(filter_node)\n+        self.log.info(\"Create a tx relevant to the peer before connecting\")\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info('Add filtered P2P connection to the node')\n-        filter_node.send_and_ping(filter_node.watch_filter_init)\n-        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.nodes[0].add_p2p_connection(filter_peer)\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        self.nodes[0].p2p.send_message(msg_mempool())\n+        filter_peer.wait_for_tx(txid)\n+\n+    def test_frelay_false(self, filter_peer):\n+        self.log.info(\"Check that a node with fRelay set to false does not receive invs until the filter is set\")\n+        filter_peer.tx_received = False\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n+        self.nodes[0].sendtoaddress(filter_address, 90)\n+        # Sync to make sure the reason filter_peer doesn't receive the tx is not p2p delays\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.tx_received\n+\n+        # Clear the mempool so that this transaction does not impact subsequent tests\n+        self.nodes[0].generate(1)\n+\n+    def test_filter(self, filter_peer):\n+        # Set the bloomfilter using filterload\n+        filter_peer.send_and_ping(filter_peer.watch_filter_init)\n+        # If fRelay is not already True, sending filterload sets it to True\n+        assert self.nodes[0].getpeerinfo()[0]['relaytxes']\n+        filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n \n         self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n         block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n         txid = self.nodes[0].getblock(block_hash)['tx'][0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        filter_node.wait_for_tx(txid)\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n-        filter_node.tx_received = False\n+        filter_peer.tx_received = False\n         block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-        filter_node.wait_for_merkleblock(block_hash)\n-        assert not filter_node.tx_received\n+        filter_peer.wait_for_merkleblock(block_hash)\n+        assert not filter_peer.tx_received\n \n         self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n-        filter_node.sync_with_ping()\n-        filter_node.sync_with_ping()\n-        assert not filter_node.merkleblock_received\n-        assert not filter_node.tx_received\n+        filter_peer.sync_with_ping()\n+        filter_peer.sync_with_ping()\n+        assert not filter_peer.merkleblock_received\n+        assert not filter_peer.tx_received\n \n-        self.log.info('Check that we receive a tx in reply to a mempool msg if the filter matches a mempool tx')\n-        filter_node.merkleblock_received = False\n+        self.log.info('Check that we receive a tx if the filter matches a mempool tx')\n+        filter_peer.merkleblock_received = False\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n-        filter_node.wait_for_tx(txid)\n-        assert not filter_node.merkleblock_received\n+        filter_peer.wait_for_tx(txid)\n+        assert not filter_peer.merkleblock_received\n \n         self.log.info('Check that after deleting filter all txs get relayed again')\n-        filter_node.send_and_ping(msg_filterclear())\n+        filter_peer.send_and_ping(msg_filterclear())\n         for _ in range(5):\n             txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 7)\n-            filter_node.wait_for_tx(txid)\n+            filter_peer.wait_for_tx(txid)\n \n         self.log.info('Check that request for filtered blocks is ignored if no filter is set')\n-        filter_node.merkleblock_received = False\n-        filter_node.tx_received = False\n+        filter_peer.merkleblock_received = False\n+        filter_peer.tx_received = False\n         with self.nodes[0].assert_debug_log(expected_msgs=['received getdata']):\n             block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n-            filter_node.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n-            filter_node.sync_with_ping()\n-            assert not filter_node.merkleblock_received\n-            assert not filter_node.tx_received\n+            filter_peer.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n+            filter_peer.sync_with_ping()\n+            assert not filter_peer.merkleblock_received\n+            assert not filter_peer.tx_received\n \n         self.log.info('Check that sending \"filteradd\" if no filter is set is treated as misbehavior')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n+            filter_peer.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n \n         self.log.info(\"Check that division-by-zero remote crash bug [CVE-2013-5700] is fixed\")\n-        filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n-        filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        filter_peer.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n+        filter_peer.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))\n+        self.nodes[0].disconnect_p2ps()\n \n+    def run_test(self):\n+        filter_peer = self.nodes[0].add_p2p_connection(P2PBloomFilter())\n+        self.log.info('Test filter size limits')\n+        self.test_size_limits(filter_peer)\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = True (default)')\n+        self.test_filter(filter_peer)\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info('Test BIP 37 for a node with fRelay = False')",
    "path": "test/functional/p2p_filter.py",
    "position": 231,
    "original_position": 231,
    "commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "original_commit_id": "dca73941eb0f0a4c9b68efed3870b536f7dd6cfe",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They're mostly in their own function `test_filter`, so I left this one as is.",
    "created_at": "2020-06-13T17:08:52Z",
    "updated_at": "2020-06-13T17:08:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r439753704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439753704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19083#discussion_r439753704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19083"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439753704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 217,
    "original_line": 217,
    "side": "RIGHT",
    "in_reply_to_id": 438826323
  }
]