[
  {
    "sha": "fad2502240a1c440ef03ac3f880475702e418275",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQyNTAyMjQwYTFjNDQwZWYwM2FjM2Y4ODA0NzU3MDJlNDE4Mjc1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-10T12:06:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-11T23:39:25Z"
      },
      "message": "init: Use InitError for all errors in bitcoind/qt\n\nAlso, remove unused <boost/thread.hpp> include (and others)",
      "tree": {
        "sha": "a26dc6b5cec2c7000d571c9d7673def897f88979",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a26dc6b5cec2c7000d571c9d7673def897f88979"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad2502240a1c440ef03ac3f880475702e418275",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgY+gv+LgRS0MRBjvou6JIo9BALSGofJyimoHQK/bUi2GS0EC3gcE72/EXZnAtj\nSJUoHsxAT0/p+rHDm3Y89/PB/ufc5Bjr0/YVzwQKCHSNrq0BR2dyps1bJRBnUWEh\nMVUFnd1rVl64ujmUt7DSeJYncZzS51EszzfQF2UP2C1DzGjYnmIHr4gEDWgt/QwG\n/x5c2+2TnMuixpKedxRgONrHLqTAN63ZohqNXBv1NntEHewGkpRW1Rkk1vepTuQA\nH/lhXNhlBo+UTKkYfpXYiEY35FIu0iN6fc/iTC3iYPXe5vf3yfnV1a+JIHgz0grT\nXgGIG/QJCg5EHRcfgdjPF7Nb7iVTdYDAutGHtA+tjZpHYS1d1SNdBuBGT8p/rWLk\nnc4cfpkuqgyRSEhaNeSW1KQCfgcKrnzNCNSU3XsrWNbuLt10eBaSjF9HIiYoheK6\nB8eWzaDM1VAOtTKZqz0Zv6DysshzPSN7swZBuXFvRU6jt+tL9RDUilK9Jv2t1a7B\nzBgicUUB\n=HLaK\n-----END PGP SIGNATURE-----",
        "payload": "tree a26dc6b5cec2c7000d571c9d7673def897f88979\nparent 4882040182ea1109ef9befde93c2f49a98aba391\nauthor MarcoFalke <falke.marco@gmail.com> 1562760417 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562888365 -0400\n\ninit: Use InitError for all errors in bitcoind/qt\n\nAlso, remove unused <boost/thread.hpp> include (and others)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad2502240a1c440ef03ac3f880475702e418275",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad2502240a1c440ef03ac3f880475702e418275",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad2502240a1c440ef03ac3f880475702e418275/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4882040182ea1109ef9befde93c2f49a98aba391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4882040182ea1109ef9befde93c2f49a98aba391",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4882040182ea1109ef9befde93c2f49a98aba391"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 29,
      "deletions": 38
    },
    "files": [
      {
        "sha": "77367d6bb840ea4f551e427089470d808c68d2a2",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -11,15 +11,14 @@\n #include <clientversion.h>\n #include <compat.h>\n #include <fs.h>\n-#include <interfaces/chain.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <noui.h>\n #include <shutdown.h>\n+#include <ui_interface.h>\n+#include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n-#include <util/strencodings.h>\n-\n-#include <stdio.h>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n@@ -70,8 +69,7 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n-        return false;\n+        return InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n     }\n \n     // Process help and version before taking care about datadir\n@@ -96,26 +94,22 @@ static bool AppInit(int argc, char* argv[])\n     {\n         if (!fs::is_directory(GetDataDir(false)))\n         {\n-            tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n-            return false;\n+            return InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n-            return false;\n+            return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n-            return false;\n+            return InitError(strprintf(\"%s\\n\", e.what()));\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                tfm::format(std::cerr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n-                return false;\n+                return InitError(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]));\n             }\n         }\n \n@@ -146,19 +140,17 @@ static bool AppInit(int argc, char* argv[])\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #endif\n-            tfm::format(std::cout, \"Bitcoin server starting\\n\");\n+            tfm::format(std::cout, PACKAGE_NAME \"daemon starting\\n\");\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                tfm::format(std::cerr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n-                return false;\n+                return InitError(strprintf(\"daemon() failed: %s\\n\", strerror(errno)));\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            tfm::format(std::cerr, \"Error: -daemon is not supported on this operating system\\n\");\n-            return false;\n+            return InitError(\"-daemon is not supported on this operating system\\n\");\n #endif // HAVE_DECL_DAEMON\n         }\n         // Lock data directory after daemonization"
      },
      {
        "sha": "77eb2abdbc5b127b030a652ebb0c5ef3c27dd462",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -10,8 +10,8 @@\n #include <qt/bitcoingui.h>\n \n #include <chainparams.h>\n-#include <qt/clientmodel.h>\n #include <fs.h>\n+#include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/intro.h>\n@@ -30,15 +30,12 @@\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <noui.h>\n-#include <util/threadnames.h>\n #include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <util/threadnames.h>\n \n #include <memory>\n-#include <stdint.h>\n-\n-#include <boost/thread.hpp>\n \n #include <QApplication>\n #include <QDebug>\n@@ -459,8 +456,11 @@ int GuiMain(int argc, char* argv[])\n     SetupUIArgs();\n     std::string error;\n     if (!node->parseParameters(argc, argv, error)) {\n+        InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        // Create a message box, because the gui has neither been created nor has subscribed to core signals\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n-            QObject::tr(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n+            // message can not be translated because translations have not been initialized\n+            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n \n@@ -496,11 +496,13 @@ int GuiMain(int argc, char* argv[])\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!fs::is_directory(GetDataDir(false)))\n     {\n+        InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     if (!node->readConfigFiles(error)) {\n+        InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n@@ -516,6 +518,7 @@ int GuiMain(int argc, char* argv[])\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {\n+        InitError(strprintf(\"%s\\n\", e.what()));\n         QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n         return EXIT_FAILURE;\n     }"
      },
      {
        "sha": "40537c18135f7cb102df3651f6621456e9631cdd",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -11,7 +11,6 @@\n \n #include <QApplication>\n #include <memory>\n-#include <vector>\n \n class BitcoinGUI;\n class ClientModel;"
      },
      {
        "sha": "6b2ce8c61dfc3a70256423d6d0048df0cd596837",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -36,9 +36,6 @@\n #include <ui_interface.h>\n #include <util/system.h>\n \n-#include <iostream>\n-#include <memory>\n-\n #include <QAction>\n #include <QApplication>\n #include <QComboBox>"
      },
      {
        "sha": "131f52a2e5f5e7df14d412ace86139ce6831a825",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -22,7 +22,7 @@ def test_config_file_parser(self):\n             conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n \n         self.nodes[0].assert_start_raises_init_error(\n-            expected_msg='Error parsing command line arguments: Invalid parameter -dash_cli',\n+            expected_msg='Error: Error parsing command line arguments: Invalid parameter -dash_cli',\n             extra_args=['-dash_cli=1'],\n         )\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n@@ -33,27 +33,27 @@ def test_config_file_parser(self):\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('-dash=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n \n         with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n             conf.write(\"wallet=foo\\n\")\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\nrpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\nmain.rpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n \n         inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n         with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:"
      },
      {
        "sha": "2cd6a05d081ab17a527f5f3cec156543f0f7e6ed",
        "filename": "test/functional/feature_includeconf.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad2502240a1c440ef03ac3f880475702e418275/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad2502240a1c440ef03ac3f880475702e418275/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=fad2502240a1c440ef03ac3f880475702e418275",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n \n         self.log.info(\"-includeconf cannot be used as command-line arg\")\n         self.stop_node(0)\n-        self.nodes[0].assert_start_raises_init_error(extra_args=[\"-includeconf=relative2.conf\"], expected_msg=\"Error parsing command line arguments: -includeconf cannot be used from commandline; -includeconf=relative2.conf\")\n+        self.nodes[0].assert_start_raises_init_error(extra_args=[\"-includeconf=relative2.conf\"], expected_msg=\"Error: Error parsing command line arguments: -includeconf cannot be used from commandline; -includeconf=relative2.conf\")\n \n         self.log.info(\"-includeconf cannot be used recursively. subversion should end with 'main; relative)/'\")\n         with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"a\", encoding=\"utf8\") as f:\n@@ -59,11 +59,11 @@ def run_test(self):\n         # Commented out as long as we ignore invalid arguments in configuration files\n         #with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n         #    f.write(\"foo=bar\\n\")\n-        #self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error reading configuration file: Invalid configuration value foo\")\n+        #self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error: Error reading configuration file: Invalid configuration value foo\")\n \n         self.log.info(\"-includeconf cannot be invalid path\")\n         os.remove(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"))\n-        self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error reading configuration file: Failed to include configuration file relative.conf\")\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error: Error reading configuration file: Failed to include configuration file relative.conf\")\n \n         self.log.info(\"multiple -includeconf args can be used from the base config file. subversion should end with 'main; relative; relative2)/'\")\n         with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:"
      }
    ]
  },
  {
    "sha": "fa6f402bde146f92ed131e0c9c8e15a55e723307",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZmNDAyYmRlMTQ2ZjkyZWQxMzFlMGM5YzhlMTVhNTVlNzIzMzA3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-07-11T22:20:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-11T23:39:55Z"
      },
      "message": "Call node->initError instead of InitError from GUI code\n\nAvoids GUI code calling a node function, and having to live in the same process\nas g_ui_signals and uiInterface global variables.",
      "tree": {
        "sha": "691b18d0ea62750f169aa7def65ddadd0c3ec181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/691b18d0ea62750f169aa7def65ddadd0c3ec181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6f402bde146f92ed131e0c9c8e15a55e723307",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgTMgv9EY1uuFLN3oC2d5Pm7s5JD4sVNtFoiPqvrIwY+rUhizQAmAjdg5oLqoaK\nq5RDRY2WUVrmLa4Y8MIP2zXZl9voS5LRlvODbABPvJEe71Y11Q7eNWzDocP/p76z\n/9NFsykvRyjnIv28FgcESx/q3CCmc1F4o9A8PHDHyz4A8UWiv9OTq14pBKov788M\nXE3a7uex1JBB6aan67SGmbE8Ka9hDvZ0cvEe/0LkTRuWVKtPXa7ZbD01OHwVtUin\nWrSZjrVqQGHI7TmZc/pigq4+GTp5Kv5vB8wxGrrolxWeW7yoBO+8jkv3/vrpPSmV\nQ6WEfvJePFYODxwLMHwifSITQAIlLK2CpEqYZIvHQT04vxG/jXpREMv4k/qv7Keh\naEDc6GefWyzkbuz0Z/t3+RkzCcIzbxgjh3pdAKuGUvZ73or3vnXAYkhDXgYHAmur\nZv6/5iKlp8CjbjG54TJJOn5x0bE93RAN/nN5iINHXvzWLffgf9xMONHprjyw60Xn\naqLR+xUM\n=Op2R\n-----END PGP SIGNATURE-----",
        "payload": "tree 691b18d0ea62750f169aa7def65ddadd0c3ec181\nparent fad2502240a1c440ef03ac3f880475702e418275\nauthor Russell Yanofsky <russ@yanofsky.org> 1562883644 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1562888395 -0400\n\nCall node->initError instead of InitError from GUI code\n\nAvoids GUI code calling a node function, and having to live in the same process\nas g_ui_signals and uiInterface global variables.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6f402bde146f92ed131e0c9c8e15a55e723307",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6f402bde146f92ed131e0c9c8e15a55e723307",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6f402bde146f92ed131e0c9c8e15a55e723307/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad2502240a1c440ef03ac3f880475702e418275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad2502240a1c440ef03ac3f880475702e418275",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad2502240a1c440ef03ac3f880475702e418275"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fd2fb6531b50d900b0945a7256f6d29843b441a9",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fa6f402bde146f92ed131e0c9c8e15a55e723307",
        "patch": "@@ -54,6 +54,7 @@ class NodeImpl : public Node\n {\n public:\n     NodeImpl() { m_interfaces.chain = MakeChain(); }\n+    void initError(const std::string& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);"
      },
      {
        "sha": "bb4b3e1fae8e81210637580df86ef7d9deb12130",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fa6f402bde146f92ed131e0c9c8e15a55e723307",
        "patch": "@@ -38,6 +38,9 @@ class Node\n public:\n     virtual ~Node() {}\n \n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n+\n     //! Set command line arguments.\n     virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;\n "
      },
      {
        "sha": "0ab3fd05ee8d810e04ca53e57b4f56c0cc5f3ba2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6f402bde146f92ed131e0c9c8e15a55e723307/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fa6f402bde146f92ed131e0c9c8e15a55e723307",
        "patch": "@@ -456,7 +456,7 @@ int GuiMain(int argc, char* argv[])\n     SetupUIArgs();\n     std::string error;\n     if (!node->parseParameters(argc, argv, error)) {\n-        InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        node->initError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n         // Create a message box, because the gui has neither been created nor has subscribed to core signals\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             // message can not be translated because translations have not been initialized\n@@ -496,13 +496,13 @@ int GuiMain(int argc, char* argv[])\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!fs::is_directory(GetDataDir(false)))\n     {\n-        InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n+        node->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     if (!node->readConfigFiles(error)) {\n-        InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n+        node->initError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n@@ -518,7 +518,7 @@ int GuiMain(int argc, char* argv[])\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {\n-        InitError(strprintf(\"%s\\n\", e.what()));\n+        node->initError(strprintf(\"%s\\n\", e.what()));\n         QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n         return EXIT_FAILURE;\n     }"
      }
    ]
  }
]