DrahtBot,2019-07-10 15:59:32,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16362](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16362.html) (gui: Bilingual translation by hebasto)\n* [",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510123215,510123215,
hebasto,2019-07-10 16:49:46,"Concept ACK.\n\nUsually, running self-compiled `bitcoin-qt` on Linux Mint 19.1 I get a message:\n```\n$ ./src/qt/bitcoin-qt\nqt5ct: using qt5ct plugin\n```\n\nSo local run tests on my environment returns errors:\n```\n$ BITCOIND=bitcoin-qt ./test/functional/test_runner.py feature_includeconf feature_config_args\nTemporary test directory at /tmp/test_runner_₿_🏃_20190710_194358\nTracebac",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510141454,510141454,
laanwj,2019-07-11 15:30:46,"`InitError` was *supposed* to only be called from the `AppInit*` functions, to make sure it isn't called before the appropriate listeners are installed. It seems I lost track of how the initialization process works though.",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510535460,510535460,
ryanofsky,2019-07-11 15:41:05,"> to make sure it isn't called before the appropriate listeners are installed\n\n@laanwj what are ""listeners"" here? I don't understand what this could be referring to.",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510539685,510539685,
laanwj,2019-07-11 15:54:24,"> @laanwj what are ""listeners"" here? I don't understand what this could be referring to.\n\nuiInterface signal listeners etc",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510545027,510545027,
MarcoFalke,2019-07-11 16:06:54,"In `bitcoind.cpp`, I only modify the `AppInit` function, so the change is obviously correct there.\n\nHowever, the gui uses a self-brewed `AppInit*`, I think. One of the first things in `GuiMain` is to `// Subscribe to global signals from core`. So it should be fine as well.\n\nI'd presume it would be more difficult to rewrite the Gui init to call the same `AppInit` function as bitcoind does, ",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510550021,510550021,
hebasto,2019-07-13 12:10:47,"ACK fa6f402bde146f92ed131e0c9c8e15a55e723307\n\nTested on Linux Mint 19.1 with system Qt 5.9.5.\n\nThe [""using qt5ct plugin""](https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-510141454) message that is printed to `stderr` by `qt5ct` can be [suppressed](https://sourceforge.net/p/qt5ct/code/HEAD/tree/trunk/qt5ct/) by the following environment variable:\n```bash\nQT_LOGGING_RULES=""qt5",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-511117287,511117287,
MarcoFalke,2019-07-15 13:24:59,">  Could you add QT_LOGGING_RULES=""qt5ct.debug=false"" to the OP?\n\nThis is specific to your environment. If I add that, I would also have to add `XDG_SESSION_TYPE=x11`, because someone might be running on Wayland with Gnome and get the `Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome.`)",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-511400607,511400607,
MarcoFalke,2019-07-22 12:25:43,"This pull will be merged some time this week, unless there are objections.",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-513769693,513769693,
MarcoFalke,2019-07-23 22:40:21,"Going to merge this, so that the tests pass with the gui",https://github.com/bitcoin/bitcoin/pull/16366#issuecomment-514409746,514409746,
hebasto,2019-07-10 16:53:59,"```suggestion\n                return InitError(strprintf(""%s daemon failed: %s\n"", PACKAGE_NAME, strerror(errno)));\n```",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302170683,302170683,src/bitcoind.cpp
MarcoFalke,2019-07-10 17:56:21,"I think it really means that `deamon()` failed, so I'd prefer to keep the `(`,`)`.",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302196794,302196794,src/bitcoind.cpp
hebasto,2019-07-11 07:19:01,Agree.,https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302395352,302395352,src/bitcoind.cpp
laanwj,2019-07-11 15:23:22,I don't think 'daemon' is right here when it's not started in `-daemon` mode,https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302603865,302603865,src/bitcoind.cpp
MarcoFalke,2019-07-11 15:28:51,"This print is guarded by a DAEMON compile time check and `-daemon` run time check, so it should be all right, no?",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302606851,302606851,src/bitcoind.cpp
ryanofsky,2019-07-11 18:46:05,Curious what QObject::tr was doing previously. Just passing the string untranslated?,https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302691532,302691532,src/qt/bitcoin.cpp
ryanofsky,2019-07-11 19:27:38,"Just a suggestion, but it would make sense to change `InitError()` to `node->initError()` here and below, adding a new `Node::initError()` method like existing [`Chain::initError()`](https://github.com/bitcoin/bitcoin/blob/4fcccdac785e09ad5627b3bf4811dfba353693e8/src/interfaces/chain.h#L218-L219) and [`ChainImpl::initError()`](https://github.com/bitcoin/bitcoin/blob/4fcccdac785e09ad5627b3bf4811dfb",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302706686,302706686,src/qt/bitcoin.cpp
ryanofsky,2019-07-11 19:42:27,"It might be good to note in the comment on line 427 that the `handleMessageBox` call there is necessary for these `InitError` calls below to work:\n\nhttps://github.com/bitcoin/bitcoin/blob/4fcccdac785e09ad5627b3bf4811dfba353693e8/src/qt/bitcoin.cpp#L427-L428\n\nIt'd also be possible to ensure handlers were properly registered inside `InitError` by adding an assert there:\n\n```c++\nassert(",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302711655,302711655,src/qt/bitcoin.cpp
MarcoFalke,2019-07-11 20:09:18,"Yes, it would be picked up and sent to transifex for translation, but the method would only convert the `std::string` to a `QString`, I believe.",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302721352,302721352,src/qt/bitcoin.cpp
MarcoFalke,2019-07-11 20:43:17,"How would that add any value? Boost already has this assertion built in:\n\n```\nterminate called after throwing an instance of 'boost::wrapexcept<boost::signals2::no_slots_error>'\n  what():  boost::signals2::no_slots_error",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302733920,302733920,src/qt/bitcoin.cpp
MarcoFalke,2019-07-11 21:02:00,"Excellent suggestion, but I am not sure how to implement this cleanly. We have the `./src/node` and `./src/interface` subdirectories, so it seems I'd have to split the global `uiInterface`+`InitError` out from `ui_interface` into `./src/node/ui` and move the remainder of `ui_interface` into `./src/interface/ui`?\n\nI am happy to cherry-pick something if you code this up.",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302740922,302740922,src/qt/bitcoin.cpp
ryanofsky,2019-07-11 22:07:21,"Oh, I didn't realize ThreadSafeMessageBox uses `last_value<bool>` so an exception will already be thrown. In this case the assert would be redundant.\n\nhttps://www.boost.org/doc/libs/1_70_0/doc/html/boost/signals2/no_slots_error.html\nhttps://www.boost.org/doc/libs/1_70_0/doc/html/boost/signals2/last_value.html\nhttps://www.boost.org/doc/libs/1_70_0/doc/html/boost/signals2/last_valu_1_3_37_6_",https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302761310,302761310,src/qt/bitcoin.cpp
ryanofsky,2019-07-11 22:19:34,76b1c671f97a97e21326715c8ea21f5584ab5111 (https://github.com/ryanofsky/bitcoin/commits/pr/initerror) is the suggestion. I might not have described it clearly before.,https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302764391,302764391,src/qt/bitcoin.cpp
MarcoFalke,2019-07-11 23:41:48,Thx. Cherry-picked into this branch.,https://github.com/bitcoin/bitcoin/pull/16366#discussion_r302782211,302782211,src/qt/bitcoin.cpp
