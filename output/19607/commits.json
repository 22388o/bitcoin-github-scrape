[
  {
    "sha": "aba03359a6e62a376ae44914f609f82a1556fc89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmEwMzM1OWE2ZTYyYTM3NmFlNDQ5MTRmNjA5ZjgyYTE1NTZmYzg5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-29T07:57:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-12T09:10:22Z"
      },
      "message": "[net processing] Remove CNodeState.name\n\nThis has been unused since logging peer IPs was removed from\nMisbehaving() in a8865f8b.",
      "tree": {
        "sha": "b10d2f6815d5b88981e0429fcffd962c6ec4d14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b10d2f6815d5b88981e0429fcffd962c6ec4d14a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aba03359a6e62a376ae44914f609f82a1556fc89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aba03359a6e62a376ae44914f609f82a1556fc89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aba03359a6e62a376ae44914f609f82a1556fc89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aba03359a6e62a376ae44914f609f82a1556fc89/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce3bdd0ed1bbfeaa19a5b75dc07943118826f930",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce3bdd0ed1bbfeaa19a5b75dc07943118826f930",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce3bdd0ed1bbfeaa19a5b75dc07943118826f930"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9b40f26a80a5236c988a5abce5df79732b92b91f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aba03359a6e62a376ae44914f609f82a1556fc89/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aba03359a6e62a376ae44914f609f82a1556fc89/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=aba03359a6e62a376ae44914f609f82a1556fc89",
        "patch": "@@ -280,8 +280,6 @@ struct CNodeState {\n     int nMisbehavior;\n     //! Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission).\n     bool m_should_discourage;\n-    //! String name of this peer (debugging/logging purposes).\n-    const std::string name;\n     //! The best known block we know this peer has announced.\n     const CBlockIndex *pindexBestKnownBlock;\n     //! The hash of the last unknown block this peer has announced.\n@@ -430,9 +428,8 @@ struct CNodeState {\n     //! Whether this peer relays txs via wtxid\n     bool m_wtxid_relay{false};\n \n-    CNodeState(CAddress addrIn, std::string addrNameIn, bool is_inbound, bool is_manual) :\n-        address(addrIn), name(std::move(addrNameIn)), m_is_inbound(is_inbound),\n-        m_is_manual_connection (is_manual)\n+    CNodeState(CAddress addrIn, bool is_inbound, bool is_manual)\n+        : address(addrIn), m_is_inbound(is_inbound), m_is_manual_connection(is_manual)\n     {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -839,7 +836,7 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->IsInboundConn(), pnode->IsManualConn()));\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, pnode->IsInboundConn(), pnode->IsManualConn()));\n     }\n     if(!pnode->IsInboundConn())\n         PushNodeVersion(*pnode, *connman, GetTime());"
      }
    ]
  },
  {
    "sha": "7cd4159ac834432dadd60a5e8ee817f3cadbee55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Q0MTU5YWM4MzQ0MzJkYWRkNjBhNWU4ZWU4MTdmM2NhZGJlZTU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-16T19:14:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-12T10:22:44Z"
      },
      "message": "[net processing] Add Peer\n\nPeer is a struct for holding per-peer data. This structure is not\nprotected by cs_main since it does not contain validation-critical data.",
      "tree": {
        "sha": "0f6eeb9af17d21c06c17e37245072e2c47ca6edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f6eeb9af17d21c06c17e37245072e2c47ca6edf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cd4159ac834432dadd60a5e8ee817f3cadbee55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd4159ac834432dadd60a5e8ee817f3cadbee55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd4159ac834432dadd60a5e8ee817f3cadbee55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd4159ac834432dadd60a5e8ee817f3cadbee55/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aba03359a6e62a376ae44914f609f82a1556fc89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aba03359a6e62a376ae44914f609f82a1556fc89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aba03359a6e62a376ae44914f609f82a1556fc89"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4421ec9314a4ad60e8e85225a5581fe4d715693c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd4159ac834432dadd60a5e8ee817f3cadbee55/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd4159ac834432dadd60a5e8ee817f3cadbee55/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7cd4159ac834432dadd60a5e8ee817f3cadbee55",
        "patch": "@@ -471,6 +471,43 @@ static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     return &it->second;\n }\n \n+/**\n+ * Data structure for an individual peer. This struct is not protected by\n+ * cs_main since it does not contain validation-critical data.\n+ *\n+ * Memory is owned by shared pointers and this object is destructed when\n+ * the refcount drops to zero.\n+ *\n+ * TODO: move most members from CNodeState to this structure.\n+ * TODO: move remaining application-layer data members from CNode to this structure.\n+ */\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    Peer(NodeId id) : m_id(id) {}\n+};\n+\n+using PeerRef = std::shared_ptr<Peer>;\n+\n+/**\n+ * Map of all Peer objects, keyed by peer id. This map is protected\n+ * by the global g_peer_mutex. Once a shared pointer reference is\n+ * taken, the lock may be released. Individual fields are protected by\n+ * their own locks.\n+ */\n+Mutex g_peer_mutex;\n+static std::map<NodeId, PeerRef> g_peer_map GUARDED_BY(g_peer_mutex);\n+\n+/** Get a shared pointer to the Peer object.\n+ *  May return nullptr if the Peer object can't be found. */\n+static PeerRef GetPeerRef(NodeId id)\n+{\n+    LOCK(g_peer_mutex);\n+    auto it = g_peer_map.find(id);\n+    return it != g_peer_map.end() ? it->second : nullptr;\n+}\n+\n static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     nPreferredDownload -= state->fPreferredDownload;\n@@ -838,6 +875,11 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         LOCK(cs_main);\n         mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, pnode->IsInboundConn(), pnode->IsManualConn()));\n     }\n+    {\n+        PeerRef peer = std::make_shared<Peer>(nodeid);\n+        LOCK(g_peer_mutex);\n+        g_peer_map.emplace_hint(g_peer_map.end(), nodeid, std::move(peer));\n+    }\n     if(!pnode->IsInboundConn())\n         PushNodeVersion(*pnode, *connman, GetTime());\n }\n@@ -865,6 +907,10 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n+    {\n+        LOCK(g_peer_mutex);\n+        g_peer_map.erase(nodeid);\n+    }\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n "
      }
    ]
  },
  {
    "sha": "1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjk2ZDJlNjczYTc4MjIwZWViZjNiYmQxNWIxMjFjNTFjNGNkOTdi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-16T20:12:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-12T10:23:21Z"
      },
      "message": "[net processing] Move misbehavior tracking state to Peer\n\nMisbehavior tracking state is now contained in Peer instead of\nCNode. It is no longer guarded by cs_main, but instead by a\ndedicated m_misbehavior_mutex lock.\n\nThis allows us to remove 14 cs_main locks from net_processing.",
      "tree": {
        "sha": "b5f399be00d80fc19681b026a811f120d6ca64d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5f399be00d80fc19681b026a811f120d6ca64d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f96d2e673a78220eebf3bbd15b121c51c4cd97b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cd4159ac834432dadd60a5e8ee817f3cadbee55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd4159ac834432dadd60a5e8ee817f3cadbee55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd4159ac834432dadd60a5e8ee817f3cadbee55"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 53,
      "deletions": 72
    },
    "files": [
      {
        "sha": "2edd57f4587e1a2e99ba81f9e359b1f3c7caeb07",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 56,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f96d2e673a78220eebf3bbd15b121c51c4cd97b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f96d2e673a78220eebf3bbd15b121c51c4cd97b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
        "patch": "@@ -276,10 +276,6 @@ struct CNodeState {\n     const CService address;\n     //! Whether we have a fully established connection.\n     bool fCurrentlyConnected;\n-    //! Accumulated misbehaviour score for this peer.\n-    int nMisbehavior;\n-    //! Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission).\n-    bool m_should_discourage;\n     //! The best known block we know this peer has announced.\n     const CBlockIndex *pindexBestKnownBlock;\n     //! The hash of the last unknown block this peer has announced.\n@@ -432,8 +428,6 @@ struct CNodeState {\n         : address(addrIn), m_is_inbound(is_inbound), m_is_manual_connection(is_manual)\n     {\n         fCurrentlyConnected = false;\n-        nMisbehavior = 0;\n-        m_should_discourage = false;\n         pindexBestKnownBlock = nullptr;\n         hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = nullptr;\n@@ -485,6 +479,13 @@ struct Peer {\n     /** Same id as the CNode object for this peer */\n     const NodeId m_id{0};\n \n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int nMisbehavior GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n     Peer(NodeId id) : m_id(id) {}\n };\n \n@@ -907,7 +908,11 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n+    int misbehavior{0};\n     {\n+        PeerRef peer = GetPeerRef(nodeid);\n+        assert(peer != nullptr);\n+        misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->nMisbehavior);\n         LOCK(g_peer_mutex);\n         g_peer_map.erase(nodeid);\n     }\n@@ -917,7 +922,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n-    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+    if (misbehavior == 0 && state->fCurrentlyConnected) {\n         fUpdateConnectionTime = true;\n     }\n \n@@ -947,17 +952,23 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n }\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n-    LOCK(cs_main);\n-    CNodeState *state = State(nodeid);\n-    if (state == nullptr)\n-        return false;\n-    stats.nMisbehavior = state->nMisbehavior;\n-    stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n-    stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n-    for (const QueuedBlock& queue : state->vBlocksInFlight) {\n-        if (queue.pindex)\n-            stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n+    {\n+        LOCK(cs_main);\n+        CNodeState* state = State(nodeid);\n+        if (state == nullptr)\n+            return false;\n+        stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n+        stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n+        for (const QueuedBlock& queue : state->vBlocksInFlight) {\n+            if (queue.pindex)\n+                stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n+        }\n     }\n+\n+    PeerRef peer = GetPeerRef(nodeid);\n+    if (peer == nullptr) return false;\n+    stats.nMisbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->nMisbehavior);\n+\n     return true;\n }\n \n@@ -1101,21 +1112,21 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n  * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n  * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n  */\n-void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message)\n {\n     assert(howmuch > 0);\n \n-    CNodeState* const state = State(pnode);\n-    if (state == nullptr) return;\n+    PeerRef peer = GetPeerRef(pnode);\n+    if (peer == nullptr) return;\n \n-    state->nMisbehavior += howmuch;\n+    LOCK(peer->m_misbehavior_mutex);\n+    peer->nMisbehavior += howmuch;\n     const std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n-    if (state->nMisbehavior >= DISCOURAGEMENT_THRESHOLD && state->nMisbehavior - howmuch < DISCOURAGEMENT_THRESHOLD)\n-    {\n-        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", pnode, state->nMisbehavior - howmuch, state->nMisbehavior, message_prefixed);\n-        state->m_should_discourage = true;\n+    if (peer->nMisbehavior >= DISCOURAGEMENT_THRESHOLD && peer->nMisbehavior - howmuch < DISCOURAGEMENT_THRESHOLD) {\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", pnode, peer->nMisbehavior - howmuch, peer->nMisbehavior, message_prefixed);\n+        peer->m_should_discourage = true;\n     } else {\n-        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d)%s\\n\", pnode, state->nMisbehavior - howmuch, state->nMisbehavior, message_prefixed);\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d)%s\\n\", pnode, peer->nMisbehavior - howmuch, peer->nMisbehavior, message_prefixed);\n     }\n }\n \n@@ -1137,7 +1148,6 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n     case BlockValidationResult::BLOCK_CONSENSUS:\n     case BlockValidationResult::BLOCK_MUTATED:\n         if (!via_compact_block) {\n-            LOCK(cs_main);\n             Misbehaving(nodeid, 100, message);\n             return true;\n         }\n@@ -1161,18 +1171,12 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n     case BlockValidationResult::BLOCK_INVALID_HEADER:\n     case BlockValidationResult::BLOCK_CHECKPOINT:\n     case BlockValidationResult::BLOCK_INVALID_PREV:\n-        {\n-            LOCK(cs_main);\n-            Misbehaving(nodeid, 100, message);\n-        }\n+        Misbehaving(nodeid, 100, message);\n         return true;\n     // Conflicting (but not necessarily invalid) data or different policy:\n     case BlockValidationResult::BLOCK_MISSING_PREV:\n-        {\n-            // TODO: Handle this much more gracefully (10 DoS points is super arbitrary)\n-            LOCK(cs_main);\n-            Misbehaving(nodeid, 10, message);\n-        }\n+        // TODO: Handle this much more gracefully (10 DoS points is super arbitrary)\n+        Misbehaving(nodeid, 10, message);\n         return true;\n     case BlockValidationResult::BLOCK_RECENT_CONSENSUS_CHANGE:\n     case BlockValidationResult::BLOCK_TIME_FUTURE:\n@@ -1196,11 +1200,8 @@ static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state,\n         break;\n     // The node is providing invalid data:\n     case TxValidationResult::TX_CONSENSUS:\n-        {\n-            LOCK(cs_main);\n-            Misbehaving(nodeid, 100, message);\n-            return true;\n-        }\n+        Misbehaving(nodeid, 100, message);\n+        return true;\n     // Conflicting (but not necessarily invalid) data or different policy:\n     case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n     case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n@@ -1847,7 +1848,6 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     BlockTransactions resp(req);\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 100, \"getblocktxn with out-of-bounds tx indices\");\n             return;\n         }\n@@ -2368,7 +2368,6 @@ void ProcessMessage(\n         // Each connection can only send one version message\n         if (pfrom.nVersion != 0)\n         {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 1, \"redundant version message\");\n             return;\n         }\n@@ -2528,7 +2527,6 @@ void ProcessMessage(\n \n     if (pfrom.nVersion == 0) {\n         // Must have a version message before anything else\n-        LOCK(cs_main);\n         Misbehaving(pfrom.GetId(), 1, \"non-version message before version handshake\");\n         return;\n     }\n@@ -2595,7 +2593,6 @@ void ProcessMessage(\n \n     if (!pfrom.fSuccessfullyConnected) {\n         // Must have a verack message before anything else\n-        LOCK(cs_main);\n         Misbehaving(pfrom.GetId(), 1, \"non-verack message before version handshake\");\n         return;\n     }\n@@ -2609,7 +2606,6 @@ void ProcessMessage(\n         }\n         if (vAddr.size() > MAX_ADDR_TO_SEND)\n         {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"addr message size = %u\", vAddr.size()));\n             return;\n         }\n@@ -2688,7 +2684,6 @@ void ProcessMessage(\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"inv message size = %u\", vInv.size()));\n             return;\n         }\n@@ -2764,7 +2759,6 @@ void ProcessMessage(\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"getdata message size = %u\", vInv.size()));\n             return;\n         }\n@@ -3489,7 +3483,6 @@ void ProcessMessage(\n         // Bypass the normal CBlock deserialization, as we don't want to risk deserializing 2000 full blocks.\n         unsigned int nCount = ReadCompactSize(vRecv);\n         if (nCount > MAX_HEADERS_RESULTS) {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"headers message size = %u\", nCount));\n             return;\n         }\n@@ -3691,7 +3684,6 @@ void ProcessMessage(\n         if (!filter.IsWithinSizeConstraints())\n         {\n             // There is no excuse for sending a too-large filter\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 100, \"too-large bloom filter\");\n         }\n         else if (pfrom.m_tx_relay != nullptr)\n@@ -3725,7 +3717,6 @@ void ProcessMessage(\n             }\n         }\n         if (bad) {\n-            LOCK(cs_main);\n             Misbehaving(pfrom.GetId(), 100, \"bad filteradd message\");\n         }\n         return;\n@@ -3811,15 +3802,17 @@ void ProcessMessage(\n bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n     const NodeId peer_id{pnode.GetId()};\n+    PeerRef peer = GetPeerRef(peer_id);\n+    if (peer == nullptr) return false;\n+\n     {\n-        LOCK(cs_main);\n-        CNodeState& state = *State(peer_id);\n+        LOCK(peer->m_misbehavior_mutex);\n \n         // There's nothing to do if the m_should_discourage flag isn't set\n-        if (!state.m_should_discourage) return false;\n+        if (!peer->m_should_discourage) return false;\n \n-        state.m_should_discourage = false;\n-    } // cs_main\n+        peer->m_should_discourage = false;\n+    } // peer.m_misbehavior_mutex\n \n     if (pnode.HasPermission(PF_NOBAN)) {\n         // We never disconnect or discourage peers for bad behavior if they have the NOBAN permission flag"
      },
      {
        "sha": "37efc1e07150a5ff431203250f458a33d881a445",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f96d2e673a78220eebf3bbd15b121c51c4cd97b/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f96d2e673a78220eebf3bbd15b121c51c4cd97b/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
        "patch": "@@ -232,10 +232,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    {\n-        LOCK(cs_main);\n-        Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD); // Should be discouraged\n-    }\n+    Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD); // Should be discouraged\n     {\n         LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n@@ -249,20 +246,14 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n-    {\n-        LOCK(cs_main);\n-        Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1);\n-    }\n+    Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1);\n     {\n         LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n     BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    {\n-        LOCK(cs_main);\n-        Misbehaving(dummyNode2.GetId(), 1); // 2 reaches discouragement threshold\n-    }\n+    Misbehaving(dummyNode2.GetId(), 1);         // 2 reaches discouragement threshold\n     {\n         LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n@@ -292,10 +283,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n-    {\n-        LOCK(cs_main);\n-        Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD);\n-    }\n+    Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD);\n     {\n         LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));"
      }
    ]
  },
  {
    "sha": "8e35bf59062b3a823182588e0bf809b3367c2be0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTM1YmY1OTA2MmIzYTgyMzE4MjU4OGUwYmY4MDliMzM2N2MyYmUw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-16T20:27:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-12T10:23:22Z"
      },
      "message": "scripted-diff: rename misbehavior members\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/nMisbehavior/m_misbehavior_score/g' src/net_processing.cpp src/net_processing.h src/rpc/net.cpp src/qt/rpcconsole.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "07137095012ce1b833c1c5d468188d4a5c48ebb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07137095012ce1b833c1c5d468188d4a5c48ebb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e35bf59062b3a823182588e0bf809b3367c2be0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e35bf59062b3a823182588e0bf809b3367c2be0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e35bf59062b3a823182588e0bf809b3367c2be0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e35bf59062b3a823182588e0bf809b3367c2be0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f96d2e673a78220eebf3bbd15b121c51c4cd97b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f96d2e673a78220eebf3bbd15b121c51c4cd97b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "07562679f776139eae569e68d879f6e56567fe78",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e35bf59062b3a823182588e0bf809b3367c2be0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e35bf59062b3a823182588e0bf809b3367c2be0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8e35bf59062b3a823182588e0bf809b3367c2be0",
        "patch": "@@ -482,7 +482,7 @@ struct Peer {\n     /** Protects misbehavior data members */\n     Mutex m_misbehavior_mutex;\n     /** Accumulated misbehavior score for this peer */\n-    int nMisbehavior GUARDED_BY(m_misbehavior_mutex){0};\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n     /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n@@ -912,7 +912,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     {\n         PeerRef peer = GetPeerRef(nodeid);\n         assert(peer != nullptr);\n-        misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->nMisbehavior);\n+        misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n         LOCK(g_peer_mutex);\n         g_peer_map.erase(nodeid);\n     }\n@@ -967,7 +967,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n \n     PeerRef peer = GetPeerRef(nodeid);\n     if (peer == nullptr) return false;\n-    stats.nMisbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->nMisbehavior);\n+    stats.m_misbehavior_score = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n \n     return true;\n }\n@@ -1120,13 +1120,13 @@ void Misbehaving(const NodeId pnode, const int howmuch, const std::string& messa\n     if (peer == nullptr) return;\n \n     LOCK(peer->m_misbehavior_mutex);\n-    peer->nMisbehavior += howmuch;\n+    peer->m_misbehavior_score += howmuch;\n     const std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n-    if (peer->nMisbehavior >= DISCOURAGEMENT_THRESHOLD && peer->nMisbehavior - howmuch < DISCOURAGEMENT_THRESHOLD) {\n-        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", pnode, peer->nMisbehavior - howmuch, peer->nMisbehavior, message_prefixed);\n+    if (peer->m_misbehavior_score >= DISCOURAGEMENT_THRESHOLD && peer->m_misbehavior_score - howmuch < DISCOURAGEMENT_THRESHOLD) {\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", pnode, peer->m_misbehavior_score - howmuch, peer->m_misbehavior_score, message_prefixed);\n         peer->m_should_discourage = true;\n     } else {\n-        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d)%s\\n\", pnode, peer->nMisbehavior - howmuch, peer->nMisbehavior, message_prefixed);\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d)%s\\n\", pnode, peer->m_misbehavior_score - howmuch, peer->m_misbehavior_score, message_prefixed);\n     }\n }\n "
      },
      {
        "sha": "355f5393544c219f38b7609e7da553f450287c71",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e35bf59062b3a823182588e0bf809b3367c2be0/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e35bf59062b3a823182588e0bf809b3367c2be0/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=8e35bf59062b3a823182588e0bf809b3367c2be0",
        "patch": "@@ -90,7 +90,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n };\n \n struct CNodeStateStats {\n-    int nMisbehavior = 0;\n+    int m_misbehavior_score = 0;\n     int nSyncHeight = -1;\n     int nCommonHeight = -1;\n     std::vector<int> vHeightInFlight;"
      },
      {
        "sha": "653baa95305ab08d66ead60783efd9f64f4a0572",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e35bf59062b3a823182588e0bf809b3367c2be0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e35bf59062b3a823182588e0bf809b3367c2be0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8e35bf59062b3a823182588e0bf809b3367c2be0",
        "patch": "@@ -193,7 +193,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n         if (fStateStats) {\n             if (IsDeprecatedRPCEnabled(\"banscore\")) {\n                 // banscore is deprecated in v0.21 for removal in v0.22\n-                obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+                obj.pushKV(\"banscore\", statestats.m_misbehavior_score);\n             }\n             obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n             obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);"
      }
    ]
  }
]