[
  {
    "sha": "320669a363b3674954a08c49541af65f42836b5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjA2NjlhMzYzYjM2NzQ5NTRhMDhjNDk1NDFhZjY1ZjQyODM2YjVk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:53:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:57:03Z"
      },
      "message": "rpc: Validate replaceable type in createrawtransaction",
      "tree": {
        "sha": "55392a1ed22b62f49606a2c717f0d9781b80207b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55392a1ed22b62f49606a2c717f0d9781b80207b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/320669a363b3674954a08c49541af65f42836b5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/320669a363b3674954a08c49541af65f42836b5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d132e8b974652d96466a1b73ec1231614719fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d132e8b974652d96466a1b73ec1231614719fe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d132e8b974652d96466a1b73ec1231614719fe2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fbebdf44d46ba035f35bcba024a1f22b626b1b7b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/320669a363b3674954a08c49541af65f42836b5d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/320669a363b3674954a08c49541af65f42836b5d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=320669a363b3674954a08c49541af65f42836b5d",
        "patch": "@@ -349,7 +349,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM, UniValue::VBOOL}, true);\n     if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n "
      }
    ]
  },
  {
    "sha": "27c6199373093bff194f996bca0a85ed52088790",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M2MTk5MzczMDkzYmZmMTk0Zjk5NmJjYTBhODVlZDUyMDg4Nzkw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:55:00Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-13T14:51:46Z"
      },
      "message": "test: Add multidict to support dictionary with duplicate key (laanwj)",
      "tree": {
        "sha": "f22cb04947fd5b086f41115487201a233e6471f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f22cb04947fd5b086f41115487201a233e6471f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c6199373093bff194f996bca0a85ed52088790",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c6199373093bff194f996bca0a85ed52088790",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "320669a363b3674954a08c49541af65f42836b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/320669a363b3674954a08c49541af65f42836b5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/320669a363b3674954a08c49541af65f42836b5d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1495bc3753da10f9ae602e9c62514d78d44a4672",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c6199373093bff194f996bca0a85ed52088790/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c6199373093bff194f996bca0a85ed52088790/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=27c6199373093bff194f996bca0a85ed52088790",
        "patch": "@@ -15,6 +15,25 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n+class multidict(dict):\n+    \"\"\"Dictionary that allows duplicate keys.\n+\n+    Constructed with a list of (key, value) tuples. When dumped by the json module,\n+    will output invalid json with repeated keys, eg:\n+    >>> json.dumps(multidict([(1,2),(1,2)])\n+    '{\"1\": 2, \"1\": 2}'\n+\n+    Used to test calls to rpc methods with repeated keys in the json object.\"\"\"\n+\n+    def __init__(self, x):\n+        dict.__init__(self, x)\n+        self.x = x\n+\n+    def items(self):\n+        return self.x\n+\n+\n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGFmNTAyOGFkM2RlNzFjOGI4NmI1MGNiMWM2YmRkNTdjMWJhNmU1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-12T14:56:03Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-12-13T14:51:46Z"
      },
      "message": "test: Add createrawtransaction functional tests",
      "tree": {
        "sha": "b35644708dbe8cef6e68cc4f072e3b3c7e04adf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b35644708dbe8cef6e68cc4f072e3b3c7e04adf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c6199373093bff194f996bca0a85ed52088790",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c6199373093bff194f996bca0a85ed52088790",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c6199373093bff194f996bca0a85ed52088790"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20da577af19a16c071eca01054def936d9b3ed4e",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=88af5028ad3de71c8b86b50cb1c6bdd57c1ba6e5",
        "patch": "@@ -58,6 +58,41 @@ def run_test(self):\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n+        # Test `createrawtransaction` required parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction)\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [])\n+\n+        # Test `createrawtransaction` invalid extra parameters\n+        assert_raises_rpc_error(-1, \"createrawtransaction\", self.nodes[0].createrawtransaction, [], {}, 0, False, 'foo')\n+\n+        # Test `createrawtransaction` invalid `inputs`\n+        txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'\n+        assert_raises_rpc_error(-3, \"Expected type array\", self.nodes[0].createrawtransaction, 'foo', {})\n+        assert_raises_rpc_error(-1, \"JSON value is not an object as expected\", self.nodes[0].createrawtransaction, ['foo'], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{}], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{'txid': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout must be positive\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': -1}], {})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, sequence number is out of range\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 0, 'sequence': -1}], {})\n+\n+        # Test `createrawtransaction` invalid `outputs`\n+        address = self.nodes[0].getnewaddress()\n+        assert_raises_rpc_error(-3, \"Expected type object\", self.nodes[0].createrawtransaction, [], 'foo')\n+        assert_raises_rpc_error(-8, \"Data must be hexadecimal string\", self.nodes[0].createrawtransaction, [], {'data': 'foo'})\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].createrawtransaction, [], {'foo': 0})\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].createrawtransaction, [], {address: 'foo'})\n+        assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n+\n+        # Test `createrawtransaction` invalid `locktime`\n+        assert_raises_rpc_error(-3, \"Expected type number\", self.nodes[0].createrawtransaction, [], {}, 'foo')\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, -1)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, locktime out of range\", self.nodes[0].createrawtransaction, [], {}, 4294967296)\n+\n+        # Test `createrawtransaction` invalid `replaceable`\n+        assert_raises_rpc_error(-3, \"Expected type bool\", self.nodes[0].createrawtransaction, [], {}, 0, 'foo')\n+\n         #########################################\n         # sendrawtransaction with missing input #\n         #########################################"
      }
    ]
  }
]